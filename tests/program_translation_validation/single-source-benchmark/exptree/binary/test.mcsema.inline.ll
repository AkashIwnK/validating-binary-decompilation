; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4005e8__init_type = type <{ [23 x i8] }>
%seg_400600__plt_type = type <{ [144 x i8] }>
%seg_400690__text_type = type <{ [3282 x i8] }>
%seg_401364__fini_type = type <{ [9 x i8] }>
%seg_401370__rodata_type = type <{ [80 x i8], [29 x i8], [44 x i8], [6 x i8], [9 x i8], [3 x i8] }>
%seg_40141c__eh_frame_hdr_type = type <{ [156 x i8] }>
%seg_4014b8__eh_frame_type = type <{ [592 x i8] }>
%seg_601df0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_602058__data_type = type <{ [16 x i8] }>
%seg_602080__bss_type = type <{ [32 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8], [4 x i8], [4 x i8], [4 x i8], [4 x i8], [8 x i8], [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 32
@stdin = external global i64, align 128
@seg_4005e8__init = internal constant %seg_4005e8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\05\1A \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400600__plt = internal constant %seg_400600__plt_type <{ [144 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\02\1A \00\00\00\00\00\00\00\00\00\00\00\FF%\FA\19 \00\00\00\00\00\00\00\00\00\00\00\FF%\F2\19 \00\00\00\00\00\00\00\00\00\00\00\FF%\EA\19 \00\00\00\00\00\00\00\00\00\00\00\FF%\E2\19 \00\00\00\00\00\00\00\00\00\00\00\FF%\DA\19 \00\00\00\00\00\00\00\00\00\00\00\FF%\D2\19 \00\00\00\00\00\00\00\00\00\00\00\FF%\CA\19 \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400690__text = internal constant %seg_400690__text_type <{ [3282 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0`\13@\00H\C7\C1\F0\12@\00H\C7\C7\B0\12@\00\FF\156\19 \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8h `\00H=h `\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFh `\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BEh `\00UH\81\EEh `\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFh `\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=a\19 \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05O\19 \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC \B8\04\00\00\00\89\C6\89}\FCHc}\FC\E8\A5\FE\FF\FFH\89E\F0H\83}\F0\00\0F\84\0A\00\00\00H\8BE\F0H\83\C4 ]\C3H\BE\C0\13@\00\00\00\00\00H\8B<%\A0 `\00\B0\00\E8\93\FE\FF\FF\BF\01\00\00\00\89E\EC\E8\A6\FE\FF\FFf\0F\1FD\00\00UH\89\E5H\83\EC \B8\0C\00\00\00\89\C6\89}\FCHc}\FC\E8E\FE\FF\FFH\89E\F0H\83}\F0\00\0F\84\0A\00\00\00H\8BE\F0H\83\C4 ]\C3H\BE\DD\13@\00\00\00\00\00H\8B<%\A0 `\00\B0\00\E83\FE\FF\FF\BF\01\00\00\00\89E\EC\E8F\FE\FF\FFf\0F\1FD\00\00UH\89\E5H\89}\F8H\89u\F0\89U\EC\C7E\E8\00\00\00\00\8BE\E8;E\EC\0F\8D$\00\00\00H\8BE\F0HcM\E8\8B\14\88H\8BE\F8HcM\E8\89\14\88\8BE\E8\83\C0\01\89E\E8\E9\D0\FF\FF\FF]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0;E\F4\0F\8D$\00\00\00H\8BE\F8HcM\F0Hk\C9\0CH\01\C8\C7@\08\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\D0\FF\FF\FF]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\89u\F0\89U\EC\C7E\E8\00\00\00\00\8BE\E8;E\EC\0F\8Dx\00\00\00H\8BE\F0HcM\E8Hk\C9\0CH\01\C8\8B\10H\8BE\F8HcM\E8Hk\C9\0CH\01\C8\89\10H\8BE\F0HcM\E8Hk\C9\0CH\01\C8\8BP\04H\8BE\F8HcM\E8Hk\C9\0CH\01\C8\89P\04H\8BE\F0HcM\E8Hk\C9\0CH\01\C8\8BP\08H\8BE\F8HcM\E8Hk\C9\0CH\01\C8\89P\08\8BE\E8\83\C0\01\89E\E8\E9|\FF\FF\FFH\8BE\F8HcM\ECHk\C9\0CH\01\C8\C7@\08\00\00\00\00]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F0H\8B}\F0\8BG\08\83\C0\FF\89\C7\83\E8\03H\89}\E8\89E\E4\0F\87d\00\00\00H\8BE\E8H\8B\0C\C5x\13@\00\FF\E1H\8BE\F0\8B\08H\8BE\F0\03H\04\89M\FC\E9H\00\00\00H\8BE\F0\8B\08H\8BE\F0+H\04\89M\FC\E93\00\00\00H\8BE\F0\8B\08H\8BE\F0\0F\AFH\04\89M\FC\E9\1D\00\00\00H\8BE\F0\8B\00H\8BM\F0\99\F7y\04\89E\FC\E9\07\00\00\00\C7E\FC\00\00\00\00\8BE\FC]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`H\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0;E\F4\0F\8D\94\01\00\00H\8BE\F8HcM\F0H\8D\0CI\8B4\88\BA\12\14@\00\89\D71\D2A\88\D0D\88\C0\E8\AB\FB\FF\FFH\8BM\F8Hc}\F0H\8D<\7F\8BT\B9\08\89\D1H\89\CFH\83\EF\04\89E\ECH\89M\E0H\89}\D8\0F\87\8B\00\00\00H\8BE\E0H\8B\0C\C5\98\13@\00\FF\E1H\BF\16\14@\00\00\00\00\00\B0\00\E8b\FB\FF\FF\89E\D4\E9\8A\00\00\00H\BF\01\14@\00\00\00\00\00\B0\00\E8I\FB\FF\FF\89E\D0\E9q\00\00\00H\BF\03\14@\00\00\00\00\00\B0\00\E80\FB\FF\FF\89E\CC\E9X\00\00\00H\BF\05\14@\00\00\00\00\00\B0\00\E8\17\FB\FF\FF\89E\C8\E9?\00\00\00H\BF\07\14@\00\00\00\00\00\B0\00\E8\FE\FA\FF\FF\89E\C4\E9&\00\00\00H\BF\09\14@\00\00\00\00\00H\8BE\F8HcM\F0Hk\C9\0CH\01\C8\8Bp\08\B0\00\E8\D3\FA\FF\FF\89E\C0H\8BE\F8HcM\F0Hk\C9\0CH\01\C8\8Bp\04H\8BE\F8HcM\F0Hk\C9\0CH\01\C8H\89\C7\89u\BC\E8\14\FE\FF\FFH\BF\0F\14@\00\00\00\00\00\8Bu\BC\89\C2\B0\00\E8\8E\FA\FF\FF\8BU\F0\8Bu\F4\83\EE\019\F2\89E\B8\0F\8D\19\00\00\00H\BF\15\14@\00\00\00\00\00\B0\00\E8i\FA\FF\FF\89E\B4\E9\14\00\00\00H\BF\18\14@\00\00\00\00\00\B0\00\E8P\FA\FF\FF\89E\B0\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9`\FE\FF\FFH\BF\19\14@\00\00\00\00\00\B0\00\E8)\FA\FF\FF\89E\ACH\83\C4`]\C3UH\89\E5H\83\EC H\89}\F8\89u\F4\89U\F0\C7E\EC\00\00\00\00\8BE\EC;E\F4\0F\8DH\00\00\00\B8\01\00\00\00\8BM\EC\D3\E0#E\F0\83\F8\00\0F\84\05\00\00\00\E9\1F\00\00\00H\BF\0B\14@\00\00\00\00\00H\8BE\F8HcM\EC\8B4\88\B0\00\E8\C4\F9\FF\FF\89E\E8\8BE\EC\83\C0\01\89E\EC\E9\AC\FF\FF\FFH\BF\19\14@\00\00\00\00\00\B0\00\E8\A2\F9\FF\FF\89E\E4H\83\C4 ]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\89}\FC\89u\F8\83<%\B0 `\00\00\0F\84\05\00\00\00\E9\02\03\00\00\8B\04%\B4 `\00\83\C0\01\89\04%\B4 `\00\8BE\FC;\04%\B8 `\00\0F\85\C9\00\00\00H\8B\04%\C0 `\00\8B\0C%\C8 `\00\03M\FC\83\E9\01Hc\D1\8B\0C\90+\0C%\CC `\00\89\CF\E8\15\F9\FF\FF\8B\0C%\D0 `\00+\0C%\CC `\00\89\CF\89E\D8\E8\FD\F8\FF\FF\8BM\D89\C1\0F\8Dx\00\00\00H\8B\04%\C0 `\00\8B\0C%\C8 `\00\03M\FC\83\E9\01Hc\D1\8B\0C\90\89\0C%\D0 `\00\8BM\FC\89\0C%\D4 `\00H\8B<%\D8 `\00H\8B4%\E0 `\00\8BU\FC\E8n\FB\FF\FF\8B\0C%\D0 `\00;\0C%\CC `\00\0F\85\1B\00\00\00H\8B<%\E0 `\00\8Bu\FC\E8\AA\FC\FF\FF\C7\04%\B0 `\00\01\00\00\00\E9\00\00\00\00\E9\18\02\00\00\C7E\F4\01\00\00\00\83}\F4\04\0F\8F\02\02\00\00\C7E\EC\00\00\00\00\8BE\EC\8B\0C%\C8 `\00\03M\FC9\C8\0F\8D\D3\01\00\00\B8\01\00\00\00\8BM\EC\D3\E0#E\F8\83\F8\00\0F\84\05\00\00\00\E9\AA\01\00\00\C7E\E8\00\00\00\00\8BE\E8;E\EC\0F\8D\92\01\00\00\B8\01\00\00\00\8BM\E8\D3\E0#E\F8\83\F8\00\0F\84\05\00\00\00\E9i\01\00\00H\8B\04%\C0 `\00HcM\EC\8B\14\88\89U\E4H\8B\04%\C0 `\00HcM\E8\8B\14\88\89U\E0\83}\F4\03\0F\84\0A\00\00\00\83}\F4\04\0F\85\19\00\00\00\83}\E4\01\0F\84\0A\00\00\00\83}\E0\01\0F\85\05\00\00\00\E9\18\01\00\00\83}\E4\00\0F\84\0A\00\00\00\83}\E0\00\0F\85\05\00\00\00\E9\FF\00\00\00\83}\F4\04\0F\85\15\00\00\00\8BE\E4\99\F7}\E0\83\FA\00\0F\84\05\00\00\00\E9\E0\00\00\00\83}\F4\04\0F\84\0A\00\00\00\83}\F4\02\0F\85\1E\00\00\00\8BE\E4;E\E0\0F\8D\12\00\00\00\8BE\E4\89E\DC\8BE\E0\89E\E4\8BE\DC\89E\E0\B8\01\00\00\00\8BM\F8\8BU\EC\89M\D4\89\D1\89\C2\D3\E2\8Bu\D4\09\D6\8BM\E8\D3\E0\09\C6\89u\F0\8BE\E4H\8B<%\E0 `\00LcE\FCMk\C0\0CL\01\C7\89\07\8BE\E0H\8B<%\E0 `\00LcE\FCMk\C0\0CL\01\C7\89G\04\8BE\F4H\8B<%\E0 `\00LcE\FCMk\C0\0CL\01\C7\89G\08H\8B<%\E0 `\00LcE\FCMk\C0\0CL\01\C7\E8?\FA\FF\FFH\8B<%\C0 `\00\8B\14%\C8 `\00\03U\FCLc\C2B\89\04\87\8BE\FC\83\C0\01\8Bu\F0\89\C7\E8\16\FD\FF\FF\8BE\E8\83\C0\01\89E\E8\E9b\FE\FF\FF\E9\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9\18\FE\FF\FF\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\F4\FD\FF\FF\E9\00\00\00\00H\83\C40]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC\10\C7E\FC\00\00\00\00\8BE\FC;\04%\C8 `\00\0F\8Di\00\00\00H\8B\04%\C0 `\00HcM\FC\8B\14\88+\14%\CC `\00\89\D7\E8\14\F6\FF\FF\8B\14%\D0 `\00+\14%\CC `\00\89\D7\89E\F8\E8\FC\F5\FF\FF\8BU\F89\C2\0F\8D\16\00\00\00H\8B\04%\C0 `\00HcM\FC\8B\14\88\89\14%\D0 `\00\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\87\FF\FF\FF\8B\04%\D0 `\00;\04%\CC `\00\0F\85\19\00\00\00H\BF\18\14@\00\00\00\00\00\B0\00\E8\B3\F5\FF\FF\89E\F4\E9z\00\00\00\C7\04%\B8 `\00\01\00\00\00\8B\04%\B8 `\00;\04%\C8 `\00\0F\8D9\00\00\001\C0\89\C7\89\C6\E8\F1\FB\FF\FF\83<%\B0 `\00\00\0F\84\05\00\00\00\E9\1B\00\00\00\E9\00\00\00\00\8B\04%\B8 `\00\83\C0\01\89\04%\B8 `\00\E9\B3\FF\FF\FF\83<%\B0 `\00\00\0F\85\14\00\00\00H\8B<%\D8 `\00\8B4%\D4 `\00\E8A\F9\FF\FFH\83\C4\10]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`\C7E\BC\00\00\00\00\C7E\C0\0D\00\00\00\C7E\C4 \00\00\00\C7E\C8\0E\00\00\00\C7E\CC\84\05\00\00\E8\10\F5\FF\FF1\C9\88\CA\89E\B8\83\F8\0A\88U\B7\0F\84\0A\00\00\00\83}\B8\FF\0F\95\C0\88E\B7\8AE\B7\A8\01\0F\85\05\00\00\00\E9R\00\00\00\8B}\B8H\8B4%\80 `\00\E8\F3\F4\FF\FFH\BE\12\14@\00\00\00\00\00H\8DM\C0H\8B<%\80 `\00HcU\BCH\C1\E2\02H\01\D1H\89\CA\89E\B0\B0\00\E8e\F4\FF\FFD\8BE\BCA\83\C0\01D\89E\BC\89E\AC\E9|\FF\FF\FF\83}\BC\00\0F\85\07\00\00\00\C7E\BC\04\00\00\00\8BE\BC\83\E8\01\89\04%\C8 `\00Hc\0C%\C8 `\00\8BD\8D\C0\89\04%\CC `\00\8B\04%\C8 `\00\C1\E0\01\89\C7\E8\7F\F5\FF\FFH\89\04%\C0 `\00\8B<%\C8 `\00\E8\CB\F5\FF\FFH\89\04%\E0 `\00\8B<%\C8 `\00\E8\B7\F5\FF\FFH\8Du\C0H\89\04%\D8 `\00H\8B<%\C0 `\00\8B\14%\C8 `\00\E8\F7\F5\FF\FFH\8B<%\E0 `\00\8B4%\C8 `\00\E83\F6\FF\FFH\8B<%\D8 `\00\8B4%\C8 `\00\E8\1F\F6\FF\FF\8B\04%\C8 `\00H\83\C4`]\C3f\90UH\89\E5\C7\04%\B0 `\00\00\00\00\00\C7\04%\B4 `\00\00\00\00\00\E81\FD\FF\FF]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10\C7E\FC\00\00\00\00\89}\F8H\89u\F0\E8E\FE\FF\FF\83\F8\00\0F\84\05\00\00\00\E8\A7\FF\FF\FF1\C0H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\EE\0A \00UH\8D-\EE\0A \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\C7\F2\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401364__fini = internal constant %seg_401364__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401370__rodata = internal constant %seg_401370__rodata_type <{ [80 x i8] c"\01\00\02\00\00\00\00\00\D2\09@\00\00\00\00\00\E7\09@\00\00\00\00\00\FC\09@\00\00\00\00\00\12\0A@\00\00\00\00\00\BD\0A@\00\00\00\00\00\D6\0A@\00\00\00\00\00\EF\0A@\00\00\00\00\00\08\0B@\00\00\00\00\00!\0B@\00\00\00\00\00", [29 x i8] c"Out of memory for work list\0A\00", [44 x i8] c"Out of memory for combination list\0A\00+\00-\00*\00:\00", [6 x i8] c" d%d \00", [9 x i8] c"%d=%d\00; \00", [3 x i8] c".\0A\00" }>
@seg_40141c__eh_frame_hdr = internal constant %seg_40141c__eh_frame_hdr_type <{ [156 x i8] c"\01\1B\03;\98\00\00\00\12\00\00\00\E4\F1\FF\FF\F4\00\00\00t\F2\FF\FF\B4\00\00\00\A4\F2\FF\FF\E0\00\00\00d\F3\FF\FF\1C\01\00\00\C4\F3\FF\FF8\01\00\00$\F4\FF\FFT\01\00\00t\F4\FF\FFp\01\00\00\C4\F4\FF\FF\8C\01\00\00\84\F5\FF\FF\A8\01\00\00$\F6\FF\FF\C4\01\00\00\F4\F7\FF\FF\E0\01\00\00\84\F8\FF\FF\FC\01\00\00\B4\FB\FF\FF\18\02\00\00\F4\FC\FF\FF4\02\00\00d\FE\FF\FFP\02\00\00\94\FE\FF\FFl\02\00\00\D4\FE\FF\FF\8C\02\00\00D\FF\FF\FF\D4\02\00\00" }>
@seg_4014b8__eh_frame = internal constant %seg_4014b8__eh_frame_type <{ [592 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\B8\F1\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\BC\F1\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\E8\F0\FF\FF\90\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00@\F2\FF\FFZ\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00tp\01\00\00\B8\FA\FF\FFn\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00\0C\FC\FF\FF!\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\A8\01\00\00 \FC\FF\FF1\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00\C8\01\00\00@\FC\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\10\02\00\00h\FC\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601df0__init_array = internal global %seg_601df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400770_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400740___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602000__got_plt = internal global %seg_602000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), i64 ptrtoint (i64 (i64)* @abs to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @calloc to i64), i64 ptrtoint (i64 ()* @getchar to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64, i64)* @ungetc to i64), i64 ptrtoint (i64 (i64)* @exit to i64) }>
@seg_602058__data = internal global %seg_602058__data_type zeroinitializer
@seg_602080__bss = internal global %seg_602080__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400770_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400740___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401360___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4012f0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @initCombList_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @recSearch_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @doSearch_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @calculate_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @newWorkList_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @getInput_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @search_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @saveSolution_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @printSolution_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @printList_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @initWorkList_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @newCombList_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_400a40_printSolution_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007e0_newCombList_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400ca0_recSearch_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005e8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4006d0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400fd0_doSearch_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4008e0_saveSolution_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400840_initWorkList_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401280_search_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400780_newWorkList_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401110_getInput_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400890_initCombList_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_fscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @abs(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @ungetc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @getchar() #13

; Function Attrs: noinline
define %struct.Memory* @sub_400a12(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a12:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = sub i64 %18, 16
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = load i64, i64* %RAX
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC
  %27 = inttoptr i64 %24 to i32*
  %28 = load i32, i32* %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RAX, align 8, !tbaa !2428
  %30 = load i64, i64* %RBP
  %31 = sub i64 %30, 16
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %RCX, align 8, !tbaa !2428
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %40 = bitcast %union.anon* %39 to i32*
  %41 = load i32, i32* %40, align 8, !tbaa !2432
  %42 = sext i32 %41 to i64
  %43 = lshr i64 %42, 32
  store i64 %43, i64* %38, align 8, !tbaa !2428
  %44 = load i64, i64* %RCX
  %45 = add i64 %44, 4
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %49 = bitcast %union.anon* %48 to i32*
  %50 = load i32, i32* %49, align 8, !tbaa !2432
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %53 = bitcast %union.anon* %52 to i32*
  %54 = load i32, i32* %53, align 8, !tbaa !2432
  %55 = zext i32 %54 to i64
  %56 = inttoptr i64 %45 to i32*
  %57 = load i32, i32* %56
  %58 = sext i32 %57 to i64
  %59 = shl nuw i64 %55, 32
  %60 = or i64 %59, %51
  %61 = sdiv i64 %60, %58
  %62 = shl i64 %61, 32
  %63 = ashr exact i64 %62, 32
  %64 = icmp eq i64 %61, %63
  br i1 %64, label %69, label %65

; <label>:65:                                     ; preds = %block_400a12
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %67 = load i64, i64* %66, align 8, !tbaa !2428
  %68 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %67, %struct.Memory* %2) #16
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:69:                                     ; preds = %block_400a12
  %70 = srem i64 %60, %58
  %71 = getelementptr inbounds %union.anon, %union.anon* %48, i64 0, i32 0
  %72 = and i64 %61, 4294967295
  store i64 %72, i64* %71, align 8, !tbaa !2428
  %73 = getelementptr inbounds %union.anon, %union.anon* %52, i64 0, i32 0
  %74 = and i64 %70, 4294967295
  store i64 %74, i64* %73, align 8, !tbaa !2428
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %75, align 1, !tbaa !2434
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %76, align 1, !tbaa !2447
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %77, align 1, !tbaa !2448
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %78, align 1, !tbaa !2449
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %79, align 1, !tbaa !2450
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %80, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %65, %69
  %81 = phi %struct.Memory* [ %68, %65 ], [ %2, %69 ]
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i32, i32* %EAX
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 12
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %90, i64* %93, align 8, !tbaa !2428
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 4
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %95 to i32*
  %99 = load i32, i32* %98
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 1
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %104 = load i64, i64* %103, align 8, !tbaa !2428
  %105 = add i64 %104, 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %RBP, align 8, !tbaa !2428
  store i64 %105, i64* %103, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 1
  store i64 %109, i64* %PC
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %110, align 8, !tbaa !2428
  %115 = add i64 %112, 8
  store i64 %115, i64* %111, align 8, !tbaa !2428
  ret %struct.Memory* %81
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400690:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2434
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #17
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2448
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2434
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #17
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2449
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2448
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401360___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4012f0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_602148___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b08(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 7
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EAX = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDX = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %ESI = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  br label %block_400b08

block_400abd:                                     ; preds = %block_400aaf
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 10
  store i64 %50, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 166), i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 2
  store i64 %52, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %53 = load i64, i64* %PC
  %54 = sub i64 %53, 1177
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 5
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 5
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %54, i64* %63, align 8, !tbaa !2428
  %64 = load i64, i64* %PC
  %65 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %64, %struct.Memory* %585)
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 44
  %68 = load i32, i32* %EAX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 143
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %77, align 8, !tbaa !2428
  br label %block_400b60

block_400aaf:                                     ; preds = %block_400a62
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 32
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RAX
  %85 = mul i64 %84, 8
  %86 = add i64 %85, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 40)
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 8
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RCX, align 8, !tbaa !2428
  %91 = load i64, i64* %RCX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %1046 [
    i64 4197153, label %block_400b21
    i64 4197128, label %block_400b08
    i64 4197053, label %block_400abd
    i64 4197103, label %block_400aef
    i64 4197078, label %block_400ad6
  ]

block_400b3a:                                     ; preds = %block_400a62
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 10
  store i64 %97, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 153), i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %99 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 16
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = sext i32 %109 to i64
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RCX
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = sext i64 %111 to i128
  %115 = and i128 %114, -18446744073709551616
  %116 = zext i64 %111 to i128
  %117 = or i128 %115, %116
  %118 = mul nsw i128 12, %117
  %119 = trunc i128 %118 to i64
  store i64 %119, i64* %RCX, align 8, !tbaa !2428
  %120 = sext i64 %119 to i128
  %121 = icmp ne i128 %120, %118
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %122, i8* %123, align 1, !tbaa !2434
  %124 = trunc i128 %118 to i32
  %125 = and i32 %124, 255
  %126 = call i32 @llvm.ctpop.i32(i32 %125) #17
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = xor i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %131, align 1, !tbaa !2448
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %132, align 1, !tbaa !2449
  %133 = lshr i64 %119, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2450
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %RCX
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = add i64 %138, %137
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = icmp ult i64 %141, %137
  %143 = icmp ult i64 %141, %138
  %144 = or i1 %142, %143
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %145, i8* %146, align 1, !tbaa !2434
  %147 = trunc i64 %141 to i32
  %148 = and i32 %147, 255
  %149 = call i32 @llvm.ctpop.i32(i32 %148) #17
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %152, i8* %153, align 1, !tbaa !2447
  %154 = xor i64 %138, %137
  %155 = xor i64 %154, %141
  %156 = lshr i64 %155, 4
  %157 = trunc i64 %156 to i8
  %158 = and i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %158, i8* %159, align 1, !tbaa !2448
  %160 = icmp eq i64 %141, 0
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %161, i8* %162, align 1, !tbaa !2449
  %163 = lshr i64 %141, 63
  %164 = trunc i64 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %164, i8* %165, align 1, !tbaa !2450
  %166 = lshr i64 %137, 63
  %167 = lshr i64 %138, 63
  %168 = xor i64 %163, %166
  %169 = xor i64 %163, %167
  %170 = add nuw nsw i64 %168, %169
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %RAX
  %175 = add i64 %174, 8
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %183 = load i64, i64* %PC
  %184 = sub i64 %183, 1320
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 5
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %190 = load i64, i64* %189, align 8, !tbaa !2428
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  store i64 %186, i64* %192
  store i64 %191, i64* %189, align 8, !tbaa !2428
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %184, i64* %193, align 8, !tbaa !2428
  %194 = load i64, i64* %PC
  %195 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %194, %struct.Memory* %585)
  %196 = load i64, i64* %RBP
  %197 = sub i64 %196, 64
  %198 = load i32, i32* %EAX
  %199 = zext i32 %198 to i64
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %197 to i32*
  store i32 %198, i32* %202
  br label %block_400b60

block_400ad6:                                     ; preds = %block_400aaf
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 10
  store i64 %204, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 145), i64* %RDI, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 2
  store i64 %206, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %207 = load i64, i64* %PC
  %208 = sub i64 %207, 1202
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 5
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = add i64 %214, -8
  %216 = inttoptr i64 %215 to i64*
  store i64 %210, i64* %216
  store i64 %215, i64* %213, align 8, !tbaa !2428
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %208, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  %219 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %218, %struct.Memory* %585)
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 48
  %222 = load i32, i32* %EAX
  %223 = zext i32 %222 to i64
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 3
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %221 to i32*
  store i32 %222, i32* %226
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 118
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %231, align 8, !tbaa !2428
  br label %block_400b60

block_400bcf:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 2
  store i64 %233, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %234 = load i64, i64* %PC
  %235 = sub i64 %234, 1451
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 5
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 5
  store i64 %239, i64* %PC
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %241 = load i64, i64* %240, align 8, !tbaa !2428
  %242 = add i64 %241, -8
  %243 = inttoptr i64 %242 to i64*
  store i64 %237, i64* %243
  store i64 %242, i64* %240, align 8, !tbaa !2428
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %235, i64* %244, align 8, !tbaa !2428
  %245 = load i64, i64* %PC
  %246 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %245, %struct.Memory* %930)
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 80
  %249 = load i32, i32* %EAX
  %250 = zext i32 %249 to i64
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 3
  store i64 %252, i64* %PC
  %253 = inttoptr i64 %248 to i32*
  store i32 %249, i32* %253
  br label %block_400be3

block_400bf6:                                     ; preds = %block_400be3
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 10
  store i64 %255, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 2
  store i64 %257, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 1490
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %265 = load i64, i64* %264, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %261, i64* %267
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %268, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 84
  %273 = load i32, i32* %EAX
  %274 = zext i32 %273 to i64
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 3
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %272 to i32*
  store i32 %273, i32* %277
  %278 = load i64, i64* %RSP
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = add i64 96, %278
  store i64 %281, i64* %RSP, align 8, !tbaa !2428
  %282 = icmp ult i64 %281, %278
  %283 = icmp ult i64 %281, 96
  %284 = or i1 %282, %283
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2434
  %287 = trunc i64 %281 to i32
  %288 = and i32 %287, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #17
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2447
  %294 = xor i64 96, %278
  %295 = xor i64 %294, %281
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %298, i8* %299, align 1, !tbaa !2448
  %300 = icmp eq i64 %281, 0
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %301, i8* %302, align 1, !tbaa !2449
  %303 = lshr i64 %281, 63
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %304, i8* %305, align 1, !tbaa !2450
  %306 = lshr i64 %278, 63
  %307 = xor i64 %303, %306
  %308 = add nuw nsw i64 %307, %303
  %309 = icmp eq i64 %308, 2
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %310, i8* %311, align 1, !tbaa !2451
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 1
  store i64 %313, i64* %PC
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %315 = load i64, i64* %314, align 8, !tbaa !2428
  %316 = add i64 %315, 8
  %317 = inttoptr i64 %315 to i64*
  %318 = load i64, i64* %317
  store i64 %318, i64* %RBP, align 8, !tbaa !2428
  store i64 %316, i64* %314, align 8, !tbaa !2428
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 1
  store i64 %320, i64* %PC
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %323 = load i64, i64* %322, align 8, !tbaa !2428
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  store i64 %325, i64* %321, align 8, !tbaa !2428
  %326 = add i64 %323, 8
  store i64 %326, i64* %322, align 8, !tbaa !2428
  ret %struct.Memory* %270

block_400b08:                                     ; preds = %block_400aaf, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %585, %block_400aaf ]
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 10
  store i64 %328, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 149), i64* %RDI, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 2
  store i64 %330, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %331 = load i64, i64* %PC
  %332 = sub i64 %331, 1252
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %338 = load i64, i64* %337, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %334, i64* %340
  store i64 %339, i64* %337, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %341, align 8, !tbaa !2428
  %342 = load i64, i64* %PC
  %343 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %342, %struct.Memory* %MEMORY.0)
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 56
  %346 = load i32, i32* %EAX
  %347 = zext i32 %346 to i64
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 3
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %345 to i32*
  store i32 %346, i32* %350
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 68
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %352, i64* %355, align 8, !tbaa !2428
  br label %block_400b60

block_400be3:                                     ; preds = %block_400bb6, %block_400bcf
  %MEMORY.1 = phi %struct.Memory* [ %246, %block_400bcf ], [ %494, %block_400bb6 ]
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 5
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %357, i64* %360, align 8, !tbaa !2428
  %361 = load i64, i64* %RBP
  %362 = sub i64 %361, 16
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 3
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %362 to i32*
  %366 = load i32, i32* %365
  %367 = zext i32 %366 to i64
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 3
  store i64 %370, i64* %PC
  %371 = trunc i64 %368 to i32
  %372 = add i32 1, %371
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %RAX, align 8, !tbaa !2428
  %374 = icmp ult i32 %372, %371
  %375 = icmp ult i32 %372, 1
  %376 = or i1 %374, %375
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %377, i8* %378, align 1, !tbaa !2434
  %379 = and i32 %372, 255
  %380 = call i32 @llvm.ctpop.i32(i32 %379) #17
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %383, i8* %384, align 1, !tbaa !2447
  %385 = xor i64 1, %368
  %386 = trunc i64 %385 to i32
  %387 = xor i32 %386, %372
  %388 = lshr i32 %387, 4
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %390, i8* %391, align 1, !tbaa !2448
  %392 = icmp eq i32 %372, 0
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %393, i8* %394, align 1, !tbaa !2449
  %395 = lshr i32 %372, 31
  %396 = trunc i32 %395 to i8
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %396, i8* %397, align 1, !tbaa !2450
  %398 = lshr i32 %371, 31
  %399 = xor i32 %395, %398
  %400 = add nuw nsw i32 %399, %395
  %401 = icmp eq i32 %400, 2
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %402, i8* %403, align 1, !tbaa !2451
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 16
  %406 = load i32, i32* %EAX
  %407 = zext i32 %406 to i64
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 3
  store i64 %409, i64* %PC
  %410 = inttoptr i64 %405 to i32*
  store i32 %406, i32* %410
  %411 = load i64, i64* %PC
  %412 = sub i64 %411, 411
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 5
  store i64 %414, i64* %PC
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %412, i64* %415, align 8, !tbaa !2428
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 16
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 3
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  %421 = load i32, i32* %420
  %422 = zext i32 %421 to i64
  store i64 %422, i64* %RAX, align 8, !tbaa !2428
  %423 = load i32, i32* %EAX
  %424 = zext i32 %423 to i64
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 12
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 3
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = sub i32 %423, %430
  %432 = icmp ult i32 %423, %430
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %433, i8* %434, align 1, !tbaa !2434
  %435 = and i32 %431, 255
  %436 = call i32 @llvm.ctpop.i32(i32 %435) #17
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %439, i8* %440, align 1, !tbaa !2447
  %441 = xor i32 %430, %423
  %442 = xor i32 %441, %431
  %443 = lshr i32 %442, 4
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = icmp eq i32 %431, 0
  %448 = zext i1 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = lshr i32 %431, 31
  %451 = trunc i32 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %451, i8* %452, align 1, !tbaa !2450
  %453 = lshr i32 %423, 31
  %454 = lshr i32 %430, 31
  %455 = xor i32 %454, %453
  %456 = xor i32 %450, %453
  %457 = add nuw nsw i32 %456, %455
  %458 = icmp eq i32 %457, 2
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %459, i8* %460, align 1, !tbaa !2451
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 410
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 6
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 6
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %468 = load i8, i8* %467, align 1, !tbaa !2450
  %469 = icmp ne i8 %468, 0
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %471 = load i8, i8* %470, align 1, !tbaa !2451
  %472 = icmp ne i8 %471, 0
  %473 = xor i1 %469, %472
  %474 = xor i1 %473, true
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %477 = select i1 %473, i64 %464, i64 %462
  store i64 %477, i64* %476, align 8, !tbaa !2428
  %478 = load i8, i8* %BRANCH_TAKEN
  %479 = icmp eq i8 %478, 1
  br i1 %479, label %block_400bf6, label %block_400a62

block_400bb6:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 165), i64* %RDI, align 8, !tbaa !2428
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 2
  store i64 %481, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %482 = load i64, i64* %PC
  %483 = sub i64 %482, 1426
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 5
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 5
  store i64 %487, i64* %PC
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %489 = load i64, i64* %488, align 8, !tbaa !2428
  %490 = add i64 %489, -8
  %491 = inttoptr i64 %490 to i64*
  store i64 %485, i64* %491
  store i64 %490, i64* %488, align 8, !tbaa !2428
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %483, i64* %492, align 8, !tbaa !2428
  %493 = load i64, i64* %PC
  %494 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %493, %struct.Memory* %930)
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 76
  %497 = load i32, i32* %EAX
  %498 = zext i32 %497 to i64
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 3
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %496 to i32*
  store i32 %497, i32* %501
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 25
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %503, i64* %506, align 8, !tbaa !2428
  br label %block_400be3

block_400a62:                                     ; preds = %block_400be3
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 8
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i64*
  %512 = load i64, i64* %511
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 16
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i32*
  %518 = load i32, i32* %517
  %519 = sext i32 %518 to i64
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = load i64, i64* %RCX
  %521 = load i64, i64* %RCX
  %522 = mul i64 %521, 2
  %523 = add i64 %522, %520
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 4
  store i64 %525, i64* %PC
  store i64 %523, i64* %RCX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %RCX
  %528 = mul i64 %527, 4
  %529 = add i64 %528, %526
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 3
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to i32*
  %533 = load i32, i32* %532
  %534 = zext i32 %533 to i64
  store i64 %534, i64* %RSI, align 8, !tbaa !2428
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64 4294967295), i64* %RDX, align 8, !tbaa !2428
  %537 = load i32, i32* %EDX
  %538 = zext i32 %537 to i64
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 2
  store i64 %540, i64* %PC
  %541 = and i64 %538, 4294967295
  store i64 %541, i64* %RDI, align 8, !tbaa !2428
  %542 = load i64, i64* %RDX
  %543 = load i32, i32* %EDX
  %544 = zext i32 %543 to i64
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 2
  store i64 %546, i64* %PC
  %547 = xor i64 %544, %542
  %548 = trunc i64 %547 to i32
  %549 = and i64 %547, 4294967295
  store i64 %549, i64* %RDX, align 8, !tbaa !2428
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %550, align 1, !tbaa !2434
  %551 = and i32 %548, 255
  %552 = call i32 @llvm.ctpop.i32(i32 %551) #17
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  %555 = xor i8 %554, 1
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %555, i8* %556, align 1, !tbaa !2447
  %557 = icmp eq i32 %548, 0
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %558, i8* %559, align 1, !tbaa !2449
  %560 = lshr i32 %548, 31
  %561 = trunc i32 %560 to i8
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %561, i8* %562, align 1, !tbaa !2450
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %563, align 1, !tbaa !2451
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %564, align 1, !tbaa !2448
  %565 = load i8, i8* %DL
  %566 = zext i8 %565 to i64
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 3
  store i64 %568, i64* %PC
  store i8 %565, i8* %R8B, align 1, !tbaa !2452
  %569 = load i8, i8* %R8B
  %570 = zext i8 %569 to i64
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 3
  store i64 %572, i64* %PC
  store i8 %569, i8* %AL, align 1, !tbaa !2452
  %573 = load i64, i64* %PC
  %574 = sub i64 %573, 1104
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 5
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 5
  store i64 %578, i64* %PC
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %580 = load i64, i64* %579, align 8, !tbaa !2428
  %581 = add i64 %580, -8
  %582 = inttoptr i64 %581 to i64*
  store i64 %576, i64* %582
  store i64 %581, i64* %579, align 8, !tbaa !2428
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %574, i64* %583, align 8, !tbaa !2428
  %584 = load i64, i64* %PC
  %585 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %584, %struct.Memory* %MEMORY.1)
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 8
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 16
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RDI, align 8, !tbaa !2428
  %599 = load i64, i64* %RDI
  %600 = load i64, i64* %RDI
  %601 = mul i64 %600, 2
  %602 = add i64 %601, %599
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 4
  store i64 %604, i64* %PC
  store i64 %602, i64* %RDI, align 8, !tbaa !2428
  %605 = load i64, i64* %RCX
  %606 = load i64, i64* %RDI
  %607 = mul i64 %606, 4
  %608 = add i64 %605, 8
  %609 = add i64 %608, %607
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %609 to i32*
  %613 = load i32, i32* %612
  %614 = zext i32 %613 to i64
  store i64 %614, i64* %RDX, align 8, !tbaa !2428
  %615 = load i32, i32* %EDX
  %616 = zext i32 %615 to i64
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 2
  store i64 %618, i64* %PC
  %619 = and i64 %616, 4294967295
  store i64 %619, i64* %RCX, align 8, !tbaa !2428
  %620 = load i64, i64* %RCX
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 3
  store i64 %622, i64* %PC
  store i64 %620, i64* %RDI, align 8, !tbaa !2428
  %623 = load i64, i64* %RDI
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = sub i64 %623, 4
  store i64 %626, i64* %RDI, align 8, !tbaa !2428
  %627 = icmp ult i64 %623, 4
  %628 = zext i1 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %628, i8* %629, align 1, !tbaa !2434
  %630 = trunc i64 %626 to i32
  %631 = and i32 %630, 255
  %632 = call i32 @llvm.ctpop.i32(i32 %631) #17
  %633 = trunc i32 %632 to i8
  %634 = and i8 %633, 1
  %635 = xor i8 %634, 1
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %635, i8* %636, align 1, !tbaa !2447
  %637 = xor i64 4, %623
  %638 = xor i64 %637, %626
  %639 = lshr i64 %638, 4
  %640 = trunc i64 %639 to i8
  %641 = and i8 %640, 1
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %641, i8* %642, align 1, !tbaa !2448
  %643 = icmp eq i64 %626, 0
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %644, i8* %645, align 1, !tbaa !2449
  %646 = lshr i64 %626, 63
  %647 = trunc i64 %646 to i8
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %647, i8* %648, align 1, !tbaa !2450
  %649 = lshr i64 %623, 63
  %650 = xor i64 %646, %649
  %651 = add nuw nsw i64 %650, %649
  %652 = icmp eq i64 %651, 2
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %653, i8* %654, align 1, !tbaa !2451
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 20
  %657 = load i32, i32* %EAX
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 3
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %656 to i32*
  store i32 %657, i32* %661
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 32
  %664 = load i64, i64* %RCX
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 4
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %663 to i64*
  store i64 %664, i64* %667
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 40
  %670 = load i64, i64* %RDI
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 4
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %669 to i64*
  store i64 %670, i64* %673
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 145
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 6
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 6
  store i64 %679, i64* %PC
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %681 = load i8, i8* %680, align 1, !tbaa !2434
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %683 = load i8, i8* %682, align 1, !tbaa !2449
  %684 = or i8 %683, %681
  %685 = icmp eq i8 %684, 0
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %688 = select i1 %685, i64 %675, i64 %677
  store i64 %688, i64* %687, align 8, !tbaa !2428
  %689 = load i8, i8* %BRANCH_TAKEN
  %690 = icmp eq i8 %689, 1
  br i1 %690, label %block_400b3a, label %block_400aaf

block_400b21:                                     ; preds = %block_400aaf
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 10
  store i64 %692, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 151), i64* %RDI, align 8, !tbaa !2428
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 2
  store i64 %694, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %695 = load i64, i64* %PC
  %696 = sub i64 %695, 1277
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 5
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 5
  store i64 %700, i64* %PC
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %702 = load i64, i64* %701, align 8, !tbaa !2428
  %703 = add i64 %702, -8
  %704 = inttoptr i64 %703 to i64*
  store i64 %698, i64* %704
  store i64 %703, i64* %701, align 8, !tbaa !2428
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %696, i64* %705, align 8, !tbaa !2428
  %706 = load i64, i64* %PC
  %707 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %706, %struct.Memory* %585)
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 60
  %710 = load i32, i32* %EAX
  %711 = zext i32 %710 to i64
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 3
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %709 to i32*
  store i32 %710, i32* %714
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 43
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %719, align 8, !tbaa !2428
  br label %block_400b60

block_400b60:                                     ; preds = %block_400b21, %block_400b08, %block_400ad6, %block_400b3a, %block_400abd
  %MEMORY.2 = phi %struct.Memory* [ %343, %block_400b08 ], [ %195, %block_400b3a ], [ %219, %block_400ad6 ], [ %65, %block_400abd ], [ %707, %block_400b21 ]
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 8
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 4
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i64*
  %725 = load i64, i64* %724
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 16
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 4
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to i32*
  %731 = load i32, i32* %730
  %732 = sext i32 %731 to i64
  store i64 %732, i64* %RCX, align 8, !tbaa !2428
  %733 = load i64, i64* %RCX
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 4
  store i64 %735, i64* %PC
  %736 = sext i64 %733 to i128
  %737 = and i128 %736, -18446744073709551616
  %738 = zext i64 %733 to i128
  %739 = or i128 %737, %738
  %740 = mul nsw i128 12, %739
  %741 = trunc i128 %740 to i64
  store i64 %741, i64* %RCX, align 8, !tbaa !2428
  %742 = sext i64 %741 to i128
  %743 = icmp ne i128 %742, %740
  %744 = zext i1 %743 to i8
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %744, i8* %745, align 1, !tbaa !2434
  %746 = trunc i128 %740 to i32
  %747 = and i32 %746, 255
  %748 = call i32 @llvm.ctpop.i32(i32 %747) #17
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %753, align 1, !tbaa !2448
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %754, align 1, !tbaa !2449
  %755 = lshr i64 %741, 63
  %756 = trunc i64 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %756, i8* %757, align 1, !tbaa !2450
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %744, i8* %758, align 1, !tbaa !2451
  %759 = load i64, i64* %RAX
  %760 = load i64, i64* %RCX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC
  %763 = add i64 %760, %759
  store i64 %763, i64* %RAX, align 8, !tbaa !2428
  %764 = icmp ult i64 %763, %759
  %765 = icmp ult i64 %763, %760
  %766 = or i1 %764, %765
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %767, i8* %768, align 1, !tbaa !2434
  %769 = trunc i64 %763 to i32
  %770 = and i32 %769, 255
  %771 = call i32 @llvm.ctpop.i32(i32 %770) #17
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %774, i8* %775, align 1, !tbaa !2447
  %776 = xor i64 %760, %759
  %777 = xor i64 %776, %763
  %778 = lshr i64 %777, 4
  %779 = trunc i64 %778 to i8
  %780 = and i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %780, i8* %781, align 1, !tbaa !2448
  %782 = icmp eq i64 %763, 0
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %783, i8* %784, align 1, !tbaa !2449
  %785 = lshr i64 %763, 63
  %786 = trunc i64 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %786, i8* %787, align 1, !tbaa !2450
  %788 = lshr i64 %759, 63
  %789 = lshr i64 %760, 63
  %790 = xor i64 %785, %788
  %791 = xor i64 %785, %789
  %792 = add nuw nsw i64 %790, %791
  %793 = icmp eq i64 %792, 2
  %794 = zext i1 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %794, i8* %795, align 1, !tbaa !2451
  %796 = load i64, i64* %RAX
  %797 = add i64 %796, 4
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 3
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i32*
  %801 = load i32, i32* %800
  %802 = zext i32 %801 to i64
  store i64 %802, i64* %RSI, align 8, !tbaa !2428
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 8
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 4
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i64*
  %808 = load i64, i64* %807
  store i64 %808, i64* %RAX, align 8, !tbaa !2428
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 16
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %810 to i32*
  %814 = load i32, i32* %813
  %815 = sext i32 %814 to i64
  store i64 %815, i64* %RCX, align 8, !tbaa !2428
  %816 = load i64, i64* %RCX
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 4
  store i64 %818, i64* %PC
  %819 = sext i64 %816 to i128
  %820 = and i128 %819, -18446744073709551616
  %821 = zext i64 %816 to i128
  %822 = or i128 %820, %821
  %823 = mul nsw i128 12, %822
  %824 = trunc i128 %823 to i64
  store i64 %824, i64* %RCX, align 8, !tbaa !2428
  %825 = sext i64 %824 to i128
  %826 = icmp ne i128 %825, %823
  %827 = zext i1 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %827, i8* %828, align 1, !tbaa !2434
  %829 = trunc i128 %823 to i32
  %830 = and i32 %829, 255
  %831 = call i32 @llvm.ctpop.i32(i32 %830) #17
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = xor i8 %833, 1
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %834, i8* %835, align 1, !tbaa !2447
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %836, align 1, !tbaa !2448
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %837, align 1, !tbaa !2449
  %838 = lshr i64 %824, 63
  %839 = trunc i64 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %839, i8* %840, align 1, !tbaa !2450
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %827, i8* %841, align 1, !tbaa !2451
  %842 = load i64, i64* %RAX
  %843 = load i64, i64* %RCX
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 3
  store i64 %845, i64* %PC
  %846 = add i64 %843, %842
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = icmp ult i64 %846, %842
  %848 = icmp ult i64 %846, %843
  %849 = or i1 %847, %848
  %850 = zext i1 %849 to i8
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %850, i8* %851, align 1, !tbaa !2434
  %852 = trunc i64 %846 to i32
  %853 = and i32 %852, 255
  %854 = call i32 @llvm.ctpop.i32(i32 %853) #17
  %855 = trunc i32 %854 to i8
  %856 = and i8 %855, 1
  %857 = xor i8 %856, 1
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %857, i8* %858, align 1, !tbaa !2447
  %859 = xor i64 %843, %842
  %860 = xor i64 %859, %846
  %861 = lshr i64 %860, 4
  %862 = trunc i64 %861 to i8
  %863 = and i8 %862, 1
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %863, i8* %864, align 1, !tbaa !2448
  %865 = icmp eq i64 %846, 0
  %866 = zext i1 %865 to i8
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %866, i8* %867, align 1, !tbaa !2449
  %868 = lshr i64 %846, 63
  %869 = trunc i64 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %869, i8* %870, align 1, !tbaa !2450
  %871 = lshr i64 %842, 63
  %872 = lshr i64 %843, 63
  %873 = xor i64 %868, %871
  %874 = xor i64 %868, %872
  %875 = add nuw nsw i64 %873, %874
  %876 = icmp eq i64 %875, 2
  %877 = zext i1 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %877, i8* %878, align 1, !tbaa !2451
  %879 = load i64, i64* %RAX
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 3
  store i64 %881, i64* %PC
  store i64 %879, i64* %RDI, align 8, !tbaa !2428
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 68
  %884 = load i32, i32* %ESI
  %885 = zext i32 %884 to i64
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 3
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %883 to i32*
  store i32 %884, i32* %888
  %889 = load i64, i64* %PC
  %890 = sub i64 %889, 487
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 5
  store i64 %894, i64* %PC
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %896 = load i64, i64* %895, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %892, i64* %898
  store i64 %897, i64* %895, align 8, !tbaa !2428
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %890, i64* %899, align 8, !tbaa !2428
  %900 = load i64, i64* %PC
  %901 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %900, %struct.Memory* %MEMORY.2)
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 10
  store i64 %903, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 159), i64* %RDI, align 8, !tbaa !2428
  %904 = load i64, i64* %RBP
  %905 = sub i64 %904, 68
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 3
  store i64 %907, i64* %PC
  %908 = inttoptr i64 %905 to i32*
  %909 = load i32, i32* %908
  %910 = zext i32 %909 to i64
  store i64 %910, i64* %RSI, align 8, !tbaa !2428
  %911 = load i32, i32* %EAX
  %912 = zext i32 %911 to i64
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 2
  store i64 %914, i64* %PC
  %915 = and i64 %912, 4294967295
  store i64 %915, i64* %RDX, align 8, !tbaa !2428
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 2
  store i64 %917, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %918 = load i64, i64* %PC
  %919 = sub i64 %918, 1389
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 5
  store i64 %923, i64* %PC
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %925 = load i64, i64* %924, align 8, !tbaa !2428
  %926 = add i64 %925, -8
  %927 = inttoptr i64 %926 to i64*
  store i64 %921, i64* %927
  store i64 %926, i64* %924, align 8, !tbaa !2428
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %919, i64* %928, align 8, !tbaa !2428
  %929 = load i64, i64* %PC
  %930 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %929, %struct.Memory* %901)
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 16
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 3
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i32*
  %936 = load i32, i32* %935
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RDX, align 8, !tbaa !2428
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 12
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i32*
  %943 = load i32, i32* %942
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RSI, align 8, !tbaa !2428
  %945 = load i64, i64* %RSI
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 3
  store i64 %947, i64* %PC
  %948 = trunc i64 %945 to i32
  %949 = sub i32 %948, 1
  %950 = zext i32 %949 to i64
  store i64 %950, i64* %RSI, align 8, !tbaa !2428
  %951 = icmp ult i32 %948, 1
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %952, i8* %953, align 1, !tbaa !2434
  %954 = and i32 %949, 255
  %955 = call i32 @llvm.ctpop.i32(i32 %954) #17
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = xor i8 %957, 1
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %958, i8* %959, align 1, !tbaa !2447
  %960 = xor i64 1, %945
  %961 = trunc i64 %960 to i32
  %962 = xor i32 %961, %949
  %963 = lshr i32 %962, 4
  %964 = trunc i32 %963 to i8
  %965 = and i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %965, i8* %966, align 1, !tbaa !2448
  %967 = icmp eq i32 %949, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2449
  %970 = lshr i32 %949, 31
  %971 = trunc i32 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2450
  %973 = lshr i32 %948, 31
  %974 = xor i32 %970, %973
  %975 = add nuw nsw i32 %974, %973
  %976 = icmp eq i32 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2451
  %979 = load i32, i32* %EDX
  %980 = zext i32 %979 to i64
  %981 = load i32, i32* %ESI
  %982 = zext i32 %981 to i64
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 2
  store i64 %984, i64* %PC
  %985 = sub i32 %979, %981
  %986 = icmp ult i32 %979, %981
  %987 = zext i1 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %987, i8* %988, align 1, !tbaa !2434
  %989 = and i32 %985, 255
  %990 = call i32 @llvm.ctpop.i32(i32 %989) #17
  %991 = trunc i32 %990 to i8
  %992 = and i8 %991, 1
  %993 = xor i8 %992, 1
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %993, i8* %994, align 1, !tbaa !2447
  %995 = xor i64 %982, %980
  %996 = trunc i64 %995 to i32
  %997 = xor i32 %996, %985
  %998 = lshr i32 %997, 4
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1000, i8* %1001, align 1, !tbaa !2448
  %1002 = icmp eq i32 %985, 0
  %1003 = zext i1 %1002 to i8
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1003, i8* %1004, align 1, !tbaa !2449
  %1005 = lshr i32 %985, 31
  %1006 = trunc i32 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1006, i8* %1007, align 1, !tbaa !2450
  %1008 = lshr i32 %979, 31
  %1009 = lshr i32 %981, 31
  %1010 = xor i32 %1009, %1008
  %1011 = xor i32 %1005, %1008
  %1012 = add nuw nsw i32 %1011, %1010
  %1013 = icmp eq i32 %1012, 2
  %1014 = zext i1 %1013 to i8
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1014, i8* %1015, align 1, !tbaa !2451
  %1016 = load i64, i64* %RBP
  %1017 = sub i64 %1016, 72
  %1018 = load i32, i32* %EAX
  %1019 = zext i32 %1018 to i64
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 3
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1017 to i32*
  store i32 %1018, i32* %1022
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 31
  %1025 = load i64, i64* %PC
  %1026 = add i64 %1025, 6
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 6
  store i64 %1028, i64* %PC
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1030 = load i8, i8* %1029, align 1, !tbaa !2450
  %1031 = icmp ne i8 %1030, 0
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1033 = load i8, i8* %1032, align 1, !tbaa !2451
  %1034 = icmp ne i8 %1033, 0
  %1035 = xor i1 %1031, %1034
  %1036 = xor i1 %1035, true
  %1037 = zext i1 %1036 to i8
  store i8 %1037, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1039 = select i1 %1035, i64 %1026, i64 %1024
  store i64 %1039, i64* %1038, align 8, !tbaa !2428
  %1040 = load i8, i8* %BRANCH_TAKEN
  %1041 = icmp eq i8 %1040, 1
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 10
  store i64 %1043, i64* %PC
  br i1 %1041, label %block_400bcf, label %block_400bb6

block_400aef:                                     ; preds = %block_400aaf
  %1044 = load i64, i64* %PC
  %1045 = tail call %struct.Memory* @sub_400aef(%struct.State* %0, i64 %1044, %struct.Memory* %585)
  ret %struct.Memory* %1045

; <label>:1046:                                   ; preds = %block_400aaf
  %1047 = load i64, i64* %PC
  %1048 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %1047, %struct.Memory* %585)
  ret %struct.Memory* %1048
}

; Function Attrs: noinline
define %struct.Memory* @sub_400890_initCombList(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400890:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %RDI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 12
  %45 = load i32, i32* %ESI
  %46 = zext i32 %45 to i64
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 3
  store i64 %48, i64* %PC
  %49 = inttoptr i64 %44 to i32*
  store i32 %45, i32* %49
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 16
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 7
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %51 to i32*
  store i32 0, i32* %54
  br label %block_4008a2

block_4008d2:                                     ; preds = %block_4008a2
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %66 = load i64, i64* %65, align 8, !tbaa !2428
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %64, align 8, !tbaa !2428
  %69 = add i64 %66, 8
  store i64 %69, i64* %65, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4008a2:                                     ; preds = %block_4008ae, %block_400890
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400890 ], [ %MEMORY.0, %block_4008ae ]
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 3
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74
  %76 = zext i32 %75 to i64
  store i64 %76, i64* %RAX, align 8, !tbaa !2428
  %77 = load i32, i32* %EAX
  %78 = zext i32 %77 to i64
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 12
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83
  %85 = sub i32 %77, %84
  %86 = icmp ult i32 %77, %84
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %87, i8* %88, align 1, !tbaa !2434
  %89 = and i32 %85, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #17
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %93, i8* %94, align 1, !tbaa !2447
  %95 = xor i32 %84, %77
  %96 = xor i32 %95, %85
  %97 = lshr i32 %96, 4
  %98 = trunc i32 %97 to i8
  %99 = and i8 %98, 1
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %99, i8* %100, align 1, !tbaa !2448
  %101 = icmp eq i32 %85, 0
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %102, i8* %103, align 1, !tbaa !2449
  %104 = lshr i32 %85, 31
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %105, i8* %106, align 1, !tbaa !2450
  %107 = lshr i32 %77, 31
  %108 = lshr i32 %84, 31
  %109 = xor i32 %108, %107
  %110 = xor i32 %104, %107
  %111 = add nuw nsw i32 %110, %109
  %112 = icmp eq i32 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2451
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 42
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 6
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 6
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %122 = load i8, i8* %121, align 1, !tbaa !2450
  %123 = icmp ne i8 %122, 0
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %125 = load i8, i8* %124, align 1, !tbaa !2451
  %126 = icmp ne i8 %125, 0
  %127 = xor i1 %123, %126
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %131 = select i1 %127, i64 %118, i64 %116
  store i64 %131, i64* %130, align 8, !tbaa !2428
  %132 = load i8, i8* %BRANCH_TAKEN
  %133 = icmp eq i8 %132, 1
  br i1 %133, label %block_4008d2, label %block_4008ae

block_4008ae:                                     ; preds = %block_4008a2
  %134 = load i64, i64* %RBP
  %135 = sub i64 %134, 8
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %135 to i64*
  %139 = load i64, i64* %138
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 16
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 4
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = sext i32 %145 to i64
  store i64 %146, i64* %RCX, align 8, !tbaa !2428
  %147 = load i64, i64* %RCX
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC
  %150 = sext i64 %147 to i128
  %151 = and i128 %150, -18446744073709551616
  %152 = zext i64 %147 to i128
  %153 = or i128 %151, %152
  %154 = mul nsw i128 12, %153
  %155 = trunc i128 %154 to i64
  store i64 %155, i64* %RCX, align 8, !tbaa !2428
  %156 = sext i64 %155 to i128
  %157 = icmp ne i128 %156, %154
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2434
  %160 = trunc i128 %154 to i32
  %161 = and i32 %160, 255
  %162 = call i32 @llvm.ctpop.i32(i32 %161) #17
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %165, i8* %166, align 1, !tbaa !2447
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %167, align 1, !tbaa !2448
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %168, align 1, !tbaa !2449
  %169 = lshr i64 %155, 63
  %170 = trunc i64 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %158, i8* %172, align 1, !tbaa !2451
  %173 = load i64, i64* %RAX
  %174 = load i64, i64* %RCX
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 3
  store i64 %176, i64* %PC
  %177 = add i64 %174, %173
  store i64 %177, i64* %RAX, align 8, !tbaa !2428
  %178 = icmp ult i64 %177, %173
  %179 = icmp ult i64 %177, %174
  %180 = or i1 %178, %179
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %182, align 1, !tbaa !2434
  %183 = trunc i64 %177 to i32
  %184 = and i32 %183, 255
  %185 = call i32 @llvm.ctpop.i32(i32 %184) #17
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %188, i8* %189, align 1, !tbaa !2447
  %190 = xor i64 %174, %173
  %191 = xor i64 %190, %177
  %192 = lshr i64 %191, 4
  %193 = trunc i64 %192 to i8
  %194 = and i8 %193, 1
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %194, i8* %195, align 1, !tbaa !2448
  %196 = icmp eq i64 %177, 0
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %197, i8* %198, align 1, !tbaa !2449
  %199 = lshr i64 %177, 63
  %200 = trunc i64 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %200, i8* %201, align 1, !tbaa !2450
  %202 = lshr i64 %173, 63
  %203 = lshr i64 %174, 63
  %204 = xor i64 %199, %202
  %205 = xor i64 %199, %203
  %206 = add nuw nsw i64 %204, %205
  %207 = icmp eq i64 %206, 2
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %208, i8* %209, align 1, !tbaa !2451
  %210 = load i64, i64* %RAX
  %211 = add i64 %210, 8
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 7
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  store i32 0, i32* %214
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 16
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = trunc i64 %222 to i32
  %226 = add i32 1, %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = icmp ult i32 %226, %225
  %229 = icmp ult i32 %226, 1
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %231, i8* %232, align 1, !tbaa !2434
  %233 = and i32 %226, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #17
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2447
  %239 = xor i64 1, %222
  %240 = trunc i64 %239 to i32
  %241 = xor i32 %240, %226
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %244, i8* %245, align 1, !tbaa !2448
  %246 = icmp eq i32 %226, 0
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %247, i8* %248, align 1, !tbaa !2449
  %249 = lshr i32 %226, 31
  %250 = trunc i32 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = lshr i32 %225, 31
  %253 = xor i32 %249, %252
  %254 = add nuw nsw i32 %253, %249
  %255 = icmp eq i32 %254, 2
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %256, i8* %257, align 1, !tbaa !2451
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 16
  %260 = load i32, i32* %EAX
  %261 = zext i32 %260 to i64
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 3
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %259 to i32*
  store i32 %260, i32* %264
  %265 = load i64, i64* %PC
  %266 = sub i64 %265, 43
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 5
  store i64 %268, i64* %PC
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %266, i64* %269, align 8, !tbaa !2428
  br label %block_4008a2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400aef(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 7
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EAX = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDX = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %ESI = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  br label %block_400aef

block_400abd:                                     ; preds = %block_400aaf
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 10
  store i64 %50, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 166), i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 2
  store i64 %52, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %53 = load i64, i64* %PC
  %54 = sub i64 %53, 1177
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 5
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 5
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %54, i64* %63, align 8, !tbaa !2428
  %64 = load i64, i64* %PC
  %65 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %64, %struct.Memory* %614)
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 44
  %68 = load i32, i32* %EAX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 143
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %77, align 8, !tbaa !2428
  br label %block_400b60

block_400aaf:                                     ; preds = %block_400a62
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 32
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RAX
  %85 = mul i64 %84, 8
  %86 = add i64 %85, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 40)
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 8
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RCX, align 8, !tbaa !2428
  %91 = load i64, i64* %RCX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %1073 [
    i64 4197153, label %block_400b21
    i64 4197128, label %block_400b08
    i64 4197053, label %block_400abd
    i64 4197103, label %block_400aef
    i64 4197078, label %block_400ad6
  ]

block_400b3a:                                     ; preds = %block_400a62
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 10
  store i64 %97, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 153), i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %99 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 16
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = sext i32 %109 to i64
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RCX
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = sext i64 %111 to i128
  %115 = and i128 %114, -18446744073709551616
  %116 = zext i64 %111 to i128
  %117 = or i128 %115, %116
  %118 = mul nsw i128 12, %117
  %119 = trunc i128 %118 to i64
  store i64 %119, i64* %RCX, align 8, !tbaa !2428
  %120 = sext i64 %119 to i128
  %121 = icmp ne i128 %120, %118
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %122, i8* %123, align 1, !tbaa !2434
  %124 = trunc i128 %118 to i32
  %125 = and i32 %124, 255
  %126 = call i32 @llvm.ctpop.i32(i32 %125) #17
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = xor i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %131, align 1, !tbaa !2448
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %132, align 1, !tbaa !2449
  %133 = lshr i64 %119, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2450
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %136, align 1, !tbaa !2451
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %RCX
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = add i64 %138, %137
  store i64 %141, i64* %RAX, align 8, !tbaa !2428
  %142 = icmp ult i64 %141, %137
  %143 = icmp ult i64 %141, %138
  %144 = or i1 %142, %143
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %145, i8* %146, align 1, !tbaa !2434
  %147 = trunc i64 %141 to i32
  %148 = and i32 %147, 255
  %149 = call i32 @llvm.ctpop.i32(i32 %148) #17
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %152, i8* %153, align 1, !tbaa !2447
  %154 = xor i64 %138, %137
  %155 = xor i64 %154, %141
  %156 = lshr i64 %155, 4
  %157 = trunc i64 %156 to i8
  %158 = and i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %158, i8* %159, align 1, !tbaa !2448
  %160 = icmp eq i64 %141, 0
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %161, i8* %162, align 1, !tbaa !2449
  %163 = lshr i64 %141, 63
  %164 = trunc i64 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %164, i8* %165, align 1, !tbaa !2450
  %166 = lshr i64 %137, 63
  %167 = lshr i64 %138, 63
  %168 = xor i64 %163, %166
  %169 = xor i64 %163, %167
  %170 = add nuw nsw i64 %168, %169
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2451
  %174 = load i64, i64* %RAX
  %175 = add i64 %174, 8
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i32*
  %179 = load i32, i32* %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RSI, align 8, !tbaa !2428
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %183 = load i64, i64* %PC
  %184 = sub i64 %183, 1320
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 5
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %190 = load i64, i64* %189, align 8, !tbaa !2428
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  store i64 %186, i64* %192
  store i64 %191, i64* %189, align 8, !tbaa !2428
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %184, i64* %193, align 8, !tbaa !2428
  %194 = load i64, i64* %PC
  %195 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %194, %struct.Memory* %614)
  %196 = load i64, i64* %RBP
  %197 = sub i64 %196, 64
  %198 = load i32, i32* %EAX
  %199 = zext i32 %198 to i64
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %197 to i32*
  store i32 %198, i32* %202
  br label %block_400b60

block_400ad6:                                     ; preds = %block_400aaf
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 10
  store i64 %204, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 145), i64* %RDI, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 2
  store i64 %206, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %207 = load i64, i64* %PC
  %208 = sub i64 %207, 1202
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 5
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = add i64 %214, -8
  %216 = inttoptr i64 %215 to i64*
  store i64 %210, i64* %216
  store i64 %215, i64* %213, align 8, !tbaa !2428
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %208, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  %219 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %218, %struct.Memory* %614)
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 48
  %222 = load i32, i32* %EAX
  %223 = zext i32 %222 to i64
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 3
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %221 to i32*
  store i32 %222, i32* %226
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 118
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %231, align 8, !tbaa !2428
  br label %block_400b60

block_400bcf:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 2
  store i64 %233, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %234 = load i64, i64* %PC
  %235 = sub i64 %234, 1451
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 5
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 5
  store i64 %239, i64* %PC
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %241 = load i64, i64* %240, align 8, !tbaa !2428
  %242 = add i64 %241, -8
  %243 = inttoptr i64 %242 to i64*
  store i64 %237, i64* %243
  store i64 %242, i64* %240, align 8, !tbaa !2428
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %235, i64* %244, align 8, !tbaa !2428
  %245 = load i64, i64* %PC
  %246 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %245, %struct.Memory* %959)
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 80
  %249 = load i32, i32* %EAX
  %250 = zext i32 %249 to i64
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 3
  store i64 %252, i64* %PC
  %253 = inttoptr i64 %248 to i32*
  store i32 %249, i32* %253
  br label %block_400be3

block_400bf6:                                     ; preds = %block_400be3
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 10
  store i64 %255, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 2
  store i64 %257, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 1490
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %265 = load i64, i64* %264, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %261, i64* %267
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %268, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %269, %struct.Memory* %MEMORY.1)
  %271 = load i64, i64* %RBP
  %272 = sub i64 %271, 84
  %273 = load i32, i32* %EAX
  %274 = zext i32 %273 to i64
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 3
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %272 to i32*
  store i32 %273, i32* %277
  %278 = load i64, i64* %RSP
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = add i64 96, %278
  store i64 %281, i64* %RSP, align 8, !tbaa !2428
  %282 = icmp ult i64 %281, %278
  %283 = icmp ult i64 %281, 96
  %284 = or i1 %282, %283
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2434
  %287 = trunc i64 %281 to i32
  %288 = and i32 %287, 255
  %289 = call i32 @llvm.ctpop.i32(i32 %288) #17
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %292, i8* %293, align 1, !tbaa !2447
  %294 = xor i64 96, %278
  %295 = xor i64 %294, %281
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %298, i8* %299, align 1, !tbaa !2448
  %300 = icmp eq i64 %281, 0
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %301, i8* %302, align 1, !tbaa !2449
  %303 = lshr i64 %281, 63
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %304, i8* %305, align 1, !tbaa !2450
  %306 = lshr i64 %278, 63
  %307 = xor i64 %303, %306
  %308 = add nuw nsw i64 %307, %303
  %309 = icmp eq i64 %308, 2
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %310, i8* %311, align 1, !tbaa !2451
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 1
  store i64 %313, i64* %PC
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %315 = load i64, i64* %314, align 8, !tbaa !2428
  %316 = add i64 %315, 8
  %317 = inttoptr i64 %315 to i64*
  %318 = load i64, i64* %317
  store i64 %318, i64* %RBP, align 8, !tbaa !2428
  store i64 %316, i64* %314, align 8, !tbaa !2428
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 1
  store i64 %320, i64* %PC
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %323 = load i64, i64* %322, align 8, !tbaa !2428
  %324 = inttoptr i64 %323 to i64*
  %325 = load i64, i64* %324
  store i64 %325, i64* %321, align 8, !tbaa !2428
  %326 = add i64 %323, 8
  store i64 %326, i64* %322, align 8, !tbaa !2428
  ret %struct.Memory* %270

block_400b08:                                     ; preds = %block_400aaf
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 10
  store i64 %328, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 149), i64* %RDI, align 8, !tbaa !2428
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 2
  store i64 %330, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %331 = load i64, i64* %PC
  %332 = sub i64 %331, 1252
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 5
  store i64 %336, i64* %PC
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %338 = load i64, i64* %337, align 8, !tbaa !2428
  %339 = add i64 %338, -8
  %340 = inttoptr i64 %339 to i64*
  store i64 %334, i64* %340
  store i64 %339, i64* %337, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %341, align 8, !tbaa !2428
  %342 = load i64, i64* %PC
  %343 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %342, %struct.Memory* %614)
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 56
  %346 = load i32, i32* %EAX
  %347 = zext i32 %346 to i64
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 3
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %345 to i32*
  store i32 %346, i32* %350
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 68
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %352, i64* %355, align 8, !tbaa !2428
  br label %block_400b60

block_400aef:                                     ; preds = %block_400aaf, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %614, %block_400aaf ]
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 10
  store i64 %357, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 147), i64* %RDI, align 8, !tbaa !2428
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 2
  store i64 %359, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %360 = load i64, i64* %PC
  %361 = sub i64 %360, 1227
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %367 = load i64, i64* %366, align 8, !tbaa !2428
  %368 = add i64 %367, -8
  %369 = inttoptr i64 %368 to i64*
  store i64 %363, i64* %369
  store i64 %368, i64* %366, align 8, !tbaa !2428
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %361, i64* %370, align 8, !tbaa !2428
  %371 = load i64, i64* %PC
  %372 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %371, %struct.Memory* %MEMORY.0)
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 52
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %379
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 93
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %381, i64* %384, align 8, !tbaa !2428
  br label %block_400b60

block_400be3:                                     ; preds = %block_400bb6, %block_400bcf
  %MEMORY.1 = phi %struct.Memory* [ %246, %block_400bcf ], [ %523, %block_400bb6 ]
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 5
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 16
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = trunc i64 %397 to i32
  %401 = add i32 1, %400
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = icmp ult i32 %401, %400
  %404 = icmp ult i32 %401, 1
  %405 = or i1 %403, %404
  %406 = zext i1 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %406, i8* %407, align 1, !tbaa !2434
  %408 = and i32 %401, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #17
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2447
  %414 = xor i64 1, %397
  %415 = trunc i64 %414 to i32
  %416 = xor i32 %415, %401
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2448
  %421 = icmp eq i32 %401, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2449
  %424 = lshr i32 %401, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = lshr i32 %400, 31
  %428 = xor i32 %424, %427
  %429 = add nuw nsw i32 %428, %424
  %430 = icmp eq i32 %429, 2
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %431, i8* %432, align 1, !tbaa !2451
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i32, i32* %EAX
  %436 = zext i32 %435 to i64
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %434 to i32*
  store i32 %435, i32* %439
  %440 = load i64, i64* %PC
  %441 = sub i64 %440, 411
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %441, i64* %444, align 8, !tbaa !2428
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 16
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449
  %451 = zext i32 %450 to i64
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i32, i32* %EAX
  %453 = zext i32 %452 to i64
  %454 = load i64, i64* %RBP
  %455 = sub i64 %454, 12
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 3
  store i64 %457, i64* %PC
  %458 = inttoptr i64 %455 to i32*
  %459 = load i32, i32* %458
  %460 = sub i32 %452, %459
  %461 = icmp ult i32 %452, %459
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2434
  %464 = and i32 %460, 255
  %465 = call i32 @llvm.ctpop.i32(i32 %464) #17
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %468, i8* %469, align 1, !tbaa !2447
  %470 = xor i32 %459, %452
  %471 = xor i32 %470, %460
  %472 = lshr i32 %471, 4
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %474, i8* %475, align 1, !tbaa !2448
  %476 = icmp eq i32 %460, 0
  %477 = zext i1 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %477, i8* %478, align 1, !tbaa !2449
  %479 = lshr i32 %460, 31
  %480 = trunc i32 %479 to i8
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %480, i8* %481, align 1, !tbaa !2450
  %482 = lshr i32 %452, 31
  %483 = lshr i32 %459, 31
  %484 = xor i32 %483, %482
  %485 = xor i32 %479, %482
  %486 = add nuw nsw i32 %485, %484
  %487 = icmp eq i32 %486, 2
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %488, i8* %489, align 1, !tbaa !2451
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 410
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 6
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 6
  store i64 %495, i64* %PC
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %497 = load i8, i8* %496, align 1, !tbaa !2450
  %498 = icmp ne i8 %497, 0
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %500 = load i8, i8* %499, align 1, !tbaa !2451
  %501 = icmp ne i8 %500, 0
  %502 = xor i1 %498, %501
  %503 = xor i1 %502, true
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %506 = select i1 %502, i64 %493, i64 %491
  store i64 %506, i64* %505, align 8, !tbaa !2428
  %507 = load i8, i8* %BRANCH_TAKEN
  %508 = icmp eq i8 %507, 1
  br i1 %508, label %block_400bf6, label %block_400a62

block_400bb6:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 165), i64* %RDI, align 8, !tbaa !2428
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 2
  store i64 %510, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %511 = load i64, i64* %PC
  %512 = sub i64 %511, 1426
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 5
  store i64 %516, i64* %PC
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %518 = load i64, i64* %517, align 8, !tbaa !2428
  %519 = add i64 %518, -8
  %520 = inttoptr i64 %519 to i64*
  store i64 %514, i64* %520
  store i64 %519, i64* %517, align 8, !tbaa !2428
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %512, i64* %521, align 8, !tbaa !2428
  %522 = load i64, i64* %PC
  %523 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %522, %struct.Memory* %959)
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 76
  %526 = load i32, i32* %EAX
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %530
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 25
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  store i64 %534, i64* %PC
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %535, align 8, !tbaa !2428
  br label %block_400be3

block_400a62:                                     ; preds = %block_400be3
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 8
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 16
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i32*
  %547 = load i32, i32* %546
  %548 = sext i32 %547 to i64
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %549 = load i64, i64* %RCX
  %550 = load i64, i64* %RCX
  %551 = mul i64 %550, 2
  %552 = add i64 %551, %549
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  store i64 %552, i64* %RCX, align 8, !tbaa !2428
  %555 = load i64, i64* %RAX
  %556 = load i64, i64* %RCX
  %557 = mul i64 %556, 4
  %558 = add i64 %557, %555
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 3
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i32*
  %562 = load i32, i32* %561
  %563 = zext i32 %562 to i64
  store i64 %563, i64* %RSI, align 8, !tbaa !2428
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64 4294967295), i64* %RDX, align 8, !tbaa !2428
  %566 = load i32, i32* %EDX
  %567 = zext i32 %566 to i64
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 2
  store i64 %569, i64* %PC
  %570 = and i64 %567, 4294967295
  store i64 %570, i64* %RDI, align 8, !tbaa !2428
  %571 = load i64, i64* %RDX
  %572 = load i32, i32* %EDX
  %573 = zext i32 %572 to i64
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 2
  store i64 %575, i64* %PC
  %576 = xor i64 %573, %571
  %577 = trunc i64 %576 to i32
  %578 = and i64 %576, 4294967295
  store i64 %578, i64* %RDX, align 8, !tbaa !2428
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %579, align 1, !tbaa !2434
  %580 = and i32 %577, 255
  %581 = call i32 @llvm.ctpop.i32(i32 %580) #17
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %584, i8* %585, align 1, !tbaa !2447
  %586 = icmp eq i32 %577, 0
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %587, i8* %588, align 1, !tbaa !2449
  %589 = lshr i32 %577, 31
  %590 = trunc i32 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %590, i8* %591, align 1, !tbaa !2450
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %592, align 1, !tbaa !2451
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %593, align 1, !tbaa !2448
  %594 = load i8, i8* %DL
  %595 = zext i8 %594 to i64
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC
  store i8 %594, i8* %R8B, align 1, !tbaa !2452
  %598 = load i8, i8* %R8B
  %599 = zext i8 %598 to i64
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 3
  store i64 %601, i64* %PC
  store i8 %598, i8* %AL, align 1, !tbaa !2452
  %602 = load i64, i64* %PC
  %603 = sub i64 %602, 1104
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 5
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 5
  store i64 %607, i64* %PC
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %609 = load i64, i64* %608, align 8, !tbaa !2428
  %610 = add i64 %609, -8
  %611 = inttoptr i64 %610 to i64*
  store i64 %605, i64* %611
  store i64 %610, i64* %608, align 8, !tbaa !2428
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %603, i64* %612, align 8, !tbaa !2428
  %613 = load i64, i64* %PC
  %614 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %613, %struct.Memory* %MEMORY.1)
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 8
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 4
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i64*
  %620 = load i64, i64* %619
  store i64 %620, i64* %RCX, align 8, !tbaa !2428
  %621 = load i64, i64* %RBP
  %622 = sub i64 %621, 16
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i32*
  %626 = load i32, i32* %625
  %627 = sext i32 %626 to i64
  store i64 %627, i64* %RDI, align 8, !tbaa !2428
  %628 = load i64, i64* %RDI
  %629 = load i64, i64* %RDI
  %630 = mul i64 %629, 2
  %631 = add i64 %630, %628
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  store i64 %631, i64* %RDI, align 8, !tbaa !2428
  %634 = load i64, i64* %RCX
  %635 = load i64, i64* %RDI
  %636 = mul i64 %635, 4
  %637 = add i64 %634, 8
  %638 = add i64 %637, %636
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 4
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %638 to i32*
  %642 = load i32, i32* %641
  %643 = zext i32 %642 to i64
  store i64 %643, i64* %RDX, align 8, !tbaa !2428
  %644 = load i32, i32* %EDX
  %645 = zext i32 %644 to i64
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 2
  store i64 %647, i64* %PC
  %648 = and i64 %645, 4294967295
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %649 = load i64, i64* %RCX
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 3
  store i64 %651, i64* %PC
  store i64 %649, i64* %RDI, align 8, !tbaa !2428
  %652 = load i64, i64* %RDI
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 4
  store i64 %654, i64* %PC
  %655 = sub i64 %652, 4
  store i64 %655, i64* %RDI, align 8, !tbaa !2428
  %656 = icmp ult i64 %652, 4
  %657 = zext i1 %656 to i8
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %657, i8* %658, align 1, !tbaa !2434
  %659 = trunc i64 %655 to i32
  %660 = and i32 %659, 255
  %661 = call i32 @llvm.ctpop.i32(i32 %660) #17
  %662 = trunc i32 %661 to i8
  %663 = and i8 %662, 1
  %664 = xor i8 %663, 1
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %664, i8* %665, align 1, !tbaa !2447
  %666 = xor i64 4, %652
  %667 = xor i64 %666, %655
  %668 = lshr i64 %667, 4
  %669 = trunc i64 %668 to i8
  %670 = and i8 %669, 1
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %670, i8* %671, align 1, !tbaa !2448
  %672 = icmp eq i64 %655, 0
  %673 = zext i1 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %673, i8* %674, align 1, !tbaa !2449
  %675 = lshr i64 %655, 63
  %676 = trunc i64 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %676, i8* %677, align 1, !tbaa !2450
  %678 = lshr i64 %652, 63
  %679 = xor i64 %675, %678
  %680 = add nuw nsw i64 %679, %678
  %681 = icmp eq i64 %680, 2
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %682, i8* %683, align 1, !tbaa !2451
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 20
  %686 = load i32, i32* %EAX
  %687 = zext i32 %686 to i64
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %685 to i32*
  store i32 %686, i32* %690
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 32
  %693 = load i64, i64* %RCX
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %692 to i64*
  store i64 %693, i64* %696
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 40
  %699 = load i64, i64* %RDI
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %698 to i64*
  store i64 %699, i64* %702
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 145
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 6
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 6
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %710 = load i8, i8* %709, align 1, !tbaa !2434
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %712 = load i8, i8* %711, align 1, !tbaa !2449
  %713 = or i8 %712, %710
  %714 = icmp eq i8 %713, 0
  %715 = zext i1 %714 to i8
  store i8 %715, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %717 = select i1 %714, i64 %704, i64 %706
  store i64 %717, i64* %716, align 8, !tbaa !2428
  %718 = load i8, i8* %BRANCH_TAKEN
  %719 = icmp eq i8 %718, 1
  br i1 %719, label %block_400b3a, label %block_400aaf

block_400b21:                                     ; preds = %block_400aaf
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 10
  store i64 %721, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 151), i64* %RDI, align 8, !tbaa !2428
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 2
  store i64 %723, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %724 = load i64, i64* %PC
  %725 = sub i64 %724, 1277
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 5
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 5
  store i64 %729, i64* %PC
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %731 = load i64, i64* %730, align 8, !tbaa !2428
  %732 = add i64 %731, -8
  %733 = inttoptr i64 %732 to i64*
  store i64 %727, i64* %733
  store i64 %732, i64* %730, align 8, !tbaa !2428
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %725, i64* %734, align 8, !tbaa !2428
  %735 = load i64, i64* %PC
  %736 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %735, %struct.Memory* %614)
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 60
  %739 = load i32, i32* %EAX
  %740 = zext i32 %739 to i64
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %738 to i32*
  store i32 %739, i32* %743
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 43
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 5
  store i64 %747, i64* %PC
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %745, i64* %748, align 8, !tbaa !2428
  br label %block_400b60

block_400b60:                                     ; preds = %block_400b21, %block_400aef, %block_400b08, %block_400ad6, %block_400b3a, %block_400abd
  %MEMORY.2 = phi %struct.Memory* [ %372, %block_400aef ], [ %195, %block_400b3a ], [ %219, %block_400ad6 ], [ %65, %block_400abd ], [ %343, %block_400b08 ], [ %736, %block_400b21 ]
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 8
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 4
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to i64*
  %754 = load i64, i64* %753
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 16
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 4
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %756 to i32*
  %760 = load i32, i32* %759
  %761 = sext i32 %760 to i64
  store i64 %761, i64* %RCX, align 8, !tbaa !2428
  %762 = load i64, i64* %RCX
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 4
  store i64 %764, i64* %PC
  %765 = sext i64 %762 to i128
  %766 = and i128 %765, -18446744073709551616
  %767 = zext i64 %762 to i128
  %768 = or i128 %766, %767
  %769 = mul nsw i128 12, %768
  %770 = trunc i128 %769 to i64
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = sext i64 %770 to i128
  %772 = icmp ne i128 %771, %769
  %773 = zext i1 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %773, i8* %774, align 1, !tbaa !2434
  %775 = trunc i128 %769 to i32
  %776 = and i32 %775, 255
  %777 = call i32 @llvm.ctpop.i32(i32 %776) #17
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %780, i8* %781, align 1, !tbaa !2447
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %782, align 1, !tbaa !2448
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %783, align 1, !tbaa !2449
  %784 = lshr i64 %770, 63
  %785 = trunc i64 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %785, i8* %786, align 1, !tbaa !2450
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %773, i8* %787, align 1, !tbaa !2451
  %788 = load i64, i64* %RAX
  %789 = load i64, i64* %RCX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = add i64 %789, %788
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = icmp ult i64 %792, %788
  %794 = icmp ult i64 %792, %789
  %795 = or i1 %793, %794
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %796, i8* %797, align 1, !tbaa !2434
  %798 = trunc i64 %792 to i32
  %799 = and i32 %798, 255
  %800 = call i32 @llvm.ctpop.i32(i32 %799) #17
  %801 = trunc i32 %800 to i8
  %802 = and i8 %801, 1
  %803 = xor i8 %802, 1
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %803, i8* %804, align 1, !tbaa !2447
  %805 = xor i64 %789, %788
  %806 = xor i64 %805, %792
  %807 = lshr i64 %806, 4
  %808 = trunc i64 %807 to i8
  %809 = and i8 %808, 1
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %809, i8* %810, align 1, !tbaa !2448
  %811 = icmp eq i64 %792, 0
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %812, i8* %813, align 1, !tbaa !2449
  %814 = lshr i64 %792, 63
  %815 = trunc i64 %814 to i8
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %815, i8* %816, align 1, !tbaa !2450
  %817 = lshr i64 %788, 63
  %818 = lshr i64 %789, 63
  %819 = xor i64 %814, %817
  %820 = xor i64 %814, %818
  %821 = add nuw nsw i64 %819, %820
  %822 = icmp eq i64 %821, 2
  %823 = zext i1 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %823, i8* %824, align 1, !tbaa !2451
  %825 = load i64, i64* %RAX
  %826 = add i64 %825, 4
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  %830 = load i32, i32* %829
  %831 = zext i32 %830 to i64
  store i64 %831, i64* %RSI, align 8, !tbaa !2428
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 8
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i64*
  %837 = load i64, i64* %836
  store i64 %837, i64* %RAX, align 8, !tbaa !2428
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 16
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i32*
  %843 = load i32, i32* %842
  %844 = sext i32 %843 to i64
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %845 = load i64, i64* %RCX
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = sext i64 %845 to i128
  %849 = and i128 %848, -18446744073709551616
  %850 = zext i64 %845 to i128
  %851 = or i128 %849, %850
  %852 = mul nsw i128 12, %851
  %853 = trunc i128 %852 to i64
  store i64 %853, i64* %RCX, align 8, !tbaa !2428
  %854 = sext i64 %853 to i128
  %855 = icmp ne i128 %854, %852
  %856 = zext i1 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %856, i8* %857, align 1, !tbaa !2434
  %858 = trunc i128 %852 to i32
  %859 = and i32 %858, 255
  %860 = call i32 @llvm.ctpop.i32(i32 %859) #17
  %861 = trunc i32 %860 to i8
  %862 = and i8 %861, 1
  %863 = xor i8 %862, 1
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %863, i8* %864, align 1, !tbaa !2447
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %865, align 1, !tbaa !2448
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %866, align 1, !tbaa !2449
  %867 = lshr i64 %853, 63
  %868 = trunc i64 %867 to i8
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %868, i8* %869, align 1, !tbaa !2450
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %856, i8* %870, align 1, !tbaa !2451
  %871 = load i64, i64* %RAX
  %872 = load i64, i64* %RCX
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 3
  store i64 %874, i64* %PC
  %875 = add i64 %872, %871
  store i64 %875, i64* %RAX, align 8, !tbaa !2428
  %876 = icmp ult i64 %875, %871
  %877 = icmp ult i64 %875, %872
  %878 = or i1 %876, %877
  %879 = zext i1 %878 to i8
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %879, i8* %880, align 1, !tbaa !2434
  %881 = trunc i64 %875 to i32
  %882 = and i32 %881, 255
  %883 = call i32 @llvm.ctpop.i32(i32 %882) #17
  %884 = trunc i32 %883 to i8
  %885 = and i8 %884, 1
  %886 = xor i8 %885, 1
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %886, i8* %887, align 1, !tbaa !2447
  %888 = xor i64 %872, %871
  %889 = xor i64 %888, %875
  %890 = lshr i64 %889, 4
  %891 = trunc i64 %890 to i8
  %892 = and i8 %891, 1
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %892, i8* %893, align 1, !tbaa !2448
  %894 = icmp eq i64 %875, 0
  %895 = zext i1 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %895, i8* %896, align 1, !tbaa !2449
  %897 = lshr i64 %875, 63
  %898 = trunc i64 %897 to i8
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %898, i8* %899, align 1, !tbaa !2450
  %900 = lshr i64 %871, 63
  %901 = lshr i64 %872, 63
  %902 = xor i64 %897, %900
  %903 = xor i64 %897, %901
  %904 = add nuw nsw i64 %902, %903
  %905 = icmp eq i64 %904, 2
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %906, i8* %907, align 1, !tbaa !2451
  %908 = load i64, i64* %RAX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 3
  store i64 %910, i64* %PC
  store i64 %908, i64* %RDI, align 8, !tbaa !2428
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 68
  %913 = load i32, i32* %ESI
  %914 = zext i32 %913 to i64
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 3
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %912 to i32*
  store i32 %913, i32* %917
  %918 = load i64, i64* %PC
  %919 = sub i64 %918, 487
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 5
  store i64 %923, i64* %PC
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %925 = load i64, i64* %924, align 8, !tbaa !2428
  %926 = add i64 %925, -8
  %927 = inttoptr i64 %926 to i64*
  store i64 %921, i64* %927
  store i64 %926, i64* %924, align 8, !tbaa !2428
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %919, i64* %928, align 8, !tbaa !2428
  %929 = load i64, i64* %PC
  %930 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %929, %struct.Memory* %MEMORY.2)
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 10
  store i64 %932, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 159), i64* %RDI, align 8, !tbaa !2428
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 68
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 3
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i32*
  %938 = load i32, i32* %937
  %939 = zext i32 %938 to i64
  store i64 %939, i64* %RSI, align 8, !tbaa !2428
  %940 = load i32, i32* %EAX
  %941 = zext i32 %940 to i64
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 2
  store i64 %943, i64* %PC
  %944 = and i64 %941, 4294967295
  store i64 %944, i64* %RDX, align 8, !tbaa !2428
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 2
  store i64 %946, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %947 = load i64, i64* %PC
  %948 = sub i64 %947, 1389
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 5
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 5
  store i64 %952, i64* %PC
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %954 = load i64, i64* %953, align 8, !tbaa !2428
  %955 = add i64 %954, -8
  %956 = inttoptr i64 %955 to i64*
  store i64 %950, i64* %956
  store i64 %955, i64* %953, align 8, !tbaa !2428
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %948, i64* %957, align 8, !tbaa !2428
  %958 = load i64, i64* %PC
  %959 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %958, %struct.Memory* %930)
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 16
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 3
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i32*
  %965 = load i32, i32* %964
  %966 = zext i32 %965 to i64
  store i64 %966, i64* %RDX, align 8, !tbaa !2428
  %967 = load i64, i64* %RBP
  %968 = sub i64 %967, 12
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 3
  store i64 %970, i64* %PC
  %971 = inttoptr i64 %968 to i32*
  %972 = load i32, i32* %971
  %973 = zext i32 %972 to i64
  store i64 %973, i64* %RSI, align 8, !tbaa !2428
  %974 = load i64, i64* %RSI
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 3
  store i64 %976, i64* %PC
  %977 = trunc i64 %974 to i32
  %978 = sub i32 %977, 1
  %979 = zext i32 %978 to i64
  store i64 %979, i64* %RSI, align 8, !tbaa !2428
  %980 = icmp ult i32 %977, 1
  %981 = zext i1 %980 to i8
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %981, i8* %982, align 1, !tbaa !2434
  %983 = and i32 %978, 255
  %984 = call i32 @llvm.ctpop.i32(i32 %983) #17
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = xor i8 %986, 1
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %987, i8* %988, align 1, !tbaa !2447
  %989 = xor i64 1, %974
  %990 = trunc i64 %989 to i32
  %991 = xor i32 %990, %978
  %992 = lshr i32 %991, 4
  %993 = trunc i32 %992 to i8
  %994 = and i8 %993, 1
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %994, i8* %995, align 1, !tbaa !2448
  %996 = icmp eq i32 %978, 0
  %997 = zext i1 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %997, i8* %998, align 1, !tbaa !2449
  %999 = lshr i32 %978, 31
  %1000 = trunc i32 %999 to i8
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1000, i8* %1001, align 1, !tbaa !2450
  %1002 = lshr i32 %977, 31
  %1003 = xor i32 %999, %1002
  %1004 = add nuw nsw i32 %1003, %1002
  %1005 = icmp eq i32 %1004, 2
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1006, i8* %1007, align 1, !tbaa !2451
  %1008 = load i32, i32* %EDX
  %1009 = zext i32 %1008 to i64
  %1010 = load i32, i32* %ESI
  %1011 = zext i32 %1010 to i64
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 2
  store i64 %1013, i64* %PC
  %1014 = sub i32 %1008, %1010
  %1015 = icmp ult i32 %1008, %1010
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1016, i8* %1017, align 1, !tbaa !2434
  %1018 = and i32 %1014, 255
  %1019 = call i32 @llvm.ctpop.i32(i32 %1018) #17
  %1020 = trunc i32 %1019 to i8
  %1021 = and i8 %1020, 1
  %1022 = xor i8 %1021, 1
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1022, i8* %1023, align 1, !tbaa !2447
  %1024 = xor i64 %1011, %1009
  %1025 = trunc i64 %1024 to i32
  %1026 = xor i32 %1025, %1014
  %1027 = lshr i32 %1026, 4
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1029, i8* %1030, align 1, !tbaa !2448
  %1031 = icmp eq i32 %1014, 0
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1032, i8* %1033, align 1, !tbaa !2449
  %1034 = lshr i32 %1014, 31
  %1035 = trunc i32 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1035, i8* %1036, align 1, !tbaa !2450
  %1037 = lshr i32 %1008, 31
  %1038 = lshr i32 %1010, 31
  %1039 = xor i32 %1038, %1037
  %1040 = xor i32 %1034, %1037
  %1041 = add nuw nsw i32 %1040, %1039
  %1042 = icmp eq i32 %1041, 2
  %1043 = zext i1 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1043, i8* %1044, align 1, !tbaa !2451
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 72
  %1047 = load i32, i32* %EAX
  %1048 = zext i32 %1047 to i64
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 3
  store i64 %1050, i64* %PC
  %1051 = inttoptr i64 %1046 to i32*
  store i32 %1047, i32* %1051
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 31
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 6
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 6
  store i64 %1057, i64* %PC
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1059 = load i8, i8* %1058, align 1, !tbaa !2450
  %1060 = icmp ne i8 %1059, 0
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1062 = load i8, i8* %1061, align 1, !tbaa !2451
  %1063 = icmp ne i8 %1062, 0
  %1064 = xor i1 %1060, %1063
  %1065 = xor i1 %1064, true
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1068 = select i1 %1064, i64 %1055, i64 %1053
  store i64 %1068, i64* %1067, align 8, !tbaa !2428
  %1069 = load i8, i8* %BRANCH_TAKEN
  %1070 = icmp eq i8 %1069, 1
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 10
  store i64 %1072, i64* %PC
  br i1 %1070, label %block_400bcf, label %block_400bb6

; <label>:1073:                                   ; preds = %block_400aaf
  %1074 = load i64, i64* %PC
  %1075 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %1074, %struct.Memory* %614)
  ret %struct.Memory* %1075
}

; Function Attrs: noinline
define %struct.Memory* @sub_401360___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401360:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e8:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2434
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #17
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2451
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2434
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #17
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2447
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2451
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2448
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2449
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4005fa, label %block_4005f8

block_4005f8:                                     ; preds = %block_4005e8
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4005fa

block_4005fa:                                     ; preds = %block_4005f8, %block_4005e8
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4005e8 ], [ %92, %block_4005f8 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2434
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #17
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007e0_newCombList(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %AX = bitcast %union.anon* %12 to i16*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EAX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RAX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 32
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 32
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2434
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #17
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 32, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 5
  store i64 %77, i64* %PC
  store i64 12, i64* %RAX, align 8, !tbaa !2428
  %78 = load i32, i32* %EAX
  %79 = zext i32 %78 to i64
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 2
  store i64 %81, i64* %PC
  %82 = and i64 %79, 4294967295
  store i64 %82, i64* %RSI, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 4
  %85 = load i32, i32* %EDI
  %86 = zext i32 %85 to i64
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %84 to i32*
  store i32 %85, i32* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 4
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  %95 = load i32, i32* %94
  %96 = sext i32 %95 to i64
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %97 = load i64, i64* %PC
  %98 = sub i64 %97, 438
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %104 = load i64, i64* %103, align 8, !tbaa !2428
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %100, i64* %106
  store i64 %105, i64* %103, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %98, i64* %107, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = call %struct.Memory* @ext_602150_calloc(%struct.State* %0, i64 %108, %struct.Memory* %2)
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 16
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 16
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %122, align 1, !tbaa !2434
  %123 = trunc i64 %121 to i32
  %124 = and i32 %123, 255
  %125 = call i32 @llvm.ctpop.i32(i32 %124) #17
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %130, align 1, !tbaa !2448
  %131 = icmp eq i64 %121, 0
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %132, i8* %133, align 1, !tbaa !2449
  %134 = lshr i64 %121, 63
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %135, i8* %136, align 1, !tbaa !2450
  %137 = lshr i64 %121, 63
  %138 = xor i64 %134, %137
  %139 = add nuw nsw i64 %138, %137
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %141, i8* %142, align 1, !tbaa !2451
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 16
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 6
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = load i8, i8* %149, align 1, !tbaa !2449
  store i8 %150, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %152 = icmp ne i8 %150, 0
  %153 = select i1 %152, i64 %144, i64 %146
  store i64 %153, i64* %151, align 8, !tbaa !2428
  %154 = load i8, i8* %BRANCH_TAKEN
  %155 = icmp eq i8 %154, 1
  br i1 %155, label %block_400814, label %block_40080a

block_400814:                                     ; preds = %block_4007e0
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 10
  store i64 %157, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 109), i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 8
  store i64 %159, i64* %PC
  %160 = load i64, i64* @stderr
  store i64 %160, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 2
  store i64 %162, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %163 = load i64, i64* %PC
  %164 = sub i64 %163, 456
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %166, i64* %172
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %173, align 8, !tbaa !2428
  %174 = load i64, i64* %PC
  %175 = call %struct.Memory* @ext_400660_fprintf(%struct.State* %0, i64 %174, %struct.Memory* %109)
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 5
  store i64 %177, i64* %PC
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 20
  %180 = load i32, i32* %EAX
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %PC
  %186 = sub i64 %185, 437
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  store i64 %190, i64* %PC
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %192 = load i64, i64* %191, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %188, i64* %194
  store i64 %193, i64* %191, align 8, !tbaa !2428
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %186, i64* %195, align 8, !tbaa !2428
  %196 = load i64, i64* %PC
  %197 = call %struct.Memory* @ext_602170_exit(%struct.State* %0, i64 %196, %struct.Memory* %175)
  %198 = load i64, i64* %RAX
  %199 = load i64, i64* %RAX
  %200 = add i64 %199, %198
  %201 = load i16, i16* %AX
  %202 = zext i16 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 6
  store i64 %204, i64* %PC
  %205 = load i64, i64* %PC
  %206 = tail call %struct.Memory* @sub_400840_initWorkList(%struct.State* %0, i64 %205, %struct.Memory* %197)
  ret %struct.Memory* %206

block_40080a:                                     ; preds = %block_4007e0
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 16
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = load i64, i64* %RSP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = add i64 32, %213
  store i64 %216, i64* %RSP, align 8, !tbaa !2428
  %217 = icmp ult i64 %216, %213
  %218 = icmp ult i64 %216, 32
  %219 = or i1 %217, %218
  %220 = zext i1 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %220, i8* %221, align 1, !tbaa !2434
  %222 = trunc i64 %216 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #17
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = xor i64 32, %213
  %230 = xor i64 %229, %216
  %231 = lshr i64 %230, 4
  %232 = trunc i64 %231 to i8
  %233 = and i8 %232, 1
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %233, i8* %234, align 1, !tbaa !2448
  %235 = icmp eq i64 %216, 0
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %236, i8* %237, align 1, !tbaa !2449
  %238 = lshr i64 %216, 63
  %239 = trunc i64 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = lshr i64 %213, 63
  %242 = xor i64 %238, %241
  %243 = add nuw nsw i64 %242, %238
  %244 = icmp eq i64 %243, 2
  %245 = zext i1 %244 to i8
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %245, i8* %246, align 1, !tbaa !2451
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 1
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %250 = load i64, i64* %249, align 8, !tbaa !2428
  %251 = add i64 %250, 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RBP, align 8, !tbaa !2428
  store i64 %251, i64* %249, align 8, !tbaa !2428
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 1
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %258 = load i64, i64* %257, align 8, !tbaa !2428
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  store i64 %260, i64* %256, align 8, !tbaa !2428
  %261 = add i64 %258, 8
  store i64 %261, i64* %257, align 8, !tbaa !2428
  ret %struct.Memory* %109
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009fc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009fc:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = sub i64 %18, 16
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = load i64, i64* %RAX
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC
  %27 = inttoptr i64 %24 to i32*
  %28 = load i32, i32* %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RCX, align 8, !tbaa !2428
  %30 = load i64, i64* %RBP
  %31 = sub i64 %30, 16
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = load i64, i64* %RCX
  %37 = load i64, i64* %RAX
  %38 = add i64 %37, 4
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = inttoptr i64 %38 to i32*
  %42 = load i32, i32* %41
  %43 = shl i64 %36, 32
  %44 = ashr exact i64 %43, 32
  %45 = sext i32 %42 to i64
  %46 = mul nsw i64 %45, %44
  %47 = trunc i64 %46 to i32
  %48 = and i64 %46, 4294967295
  store i64 %48, i64* %RCX, align 8, !tbaa !2428
  %49 = shl i64 %46, 32
  %50 = ashr exact i64 %49, 32
  %51 = icmp ne i64 %50, %46
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2434
  %54 = and i32 %47, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #17
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2447
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2448
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %61, align 1, !tbaa !2449
  %62 = lshr i32 %47, 31
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %52, i8* %65, align 1, !tbaa !2451
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 4
  %68 = load i32, i32* %ECX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 34
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %77, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 4
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i32*
  %83 = load i32, i32* %82
  %84 = zext i32 %83 to i64
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90
  store i64 %91, i64* %RBP, align 8, !tbaa !2428
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 1
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = inttoptr i64 %96 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %94, align 8, !tbaa !2428
  %99 = add i64 %96, 8
  store i64 %99, i64* %95, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c10_printList(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400c10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 7
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %EDX = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 9
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %ESI = bitcast %union.anon* %22 to i32*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RAX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 5
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RCX = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 9
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RSI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 11
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RDI = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 13
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RSP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 15
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %RBP = bitcast %union.anon* %40 to i64*
  %41 = load i64, i64* %RBP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = sub i64 %51, 32
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  %55 = icmp ult i64 %51, 32
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %56, i8* %57, align 1, !tbaa !2434
  %58 = trunc i64 %54 to i32
  %59 = and i32 %58, 255
  %60 = call i32 @llvm.ctpop.i32(i32 %59) #17
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %63, i8* %64, align 1, !tbaa !2447
  %65 = xor i64 32, %51
  %66 = xor i64 %65, %54
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %69, i8* %70, align 1, !tbaa !2448
  %71 = icmp eq i64 %54, 0
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %72, i8* %73, align 1, !tbaa !2449
  %74 = lshr i64 %54, 63
  %75 = trunc i64 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %75, i8* %76, align 1, !tbaa !2450
  %77 = lshr i64 %51, 63
  %78 = xor i64 %74, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %81, i8* %82, align 1, !tbaa !2451
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 8
  %85 = load i64, i64* %RDI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 12
  %91 = load i32, i32* %ESI
  %92 = zext i32 %91 to i64
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 3
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 16
  %98 = load i32, i32* %EDX
  %99 = zext i32 %98 to i64
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %97 to i32*
  store i32 %98, i32* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 20
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 0, i32* %107
  br label %block_400c29

block_400c7d:                                     ; preds = %block_400c29
  %108 = add i64 %462, 10
  store i64 %108, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 2
  store i64 %110, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %111 = load i64, i64* %PC
  %112 = sub i64 %111, 1625
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 5
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 5
  store i64 %116, i64* %PC
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %118 = load i64, i64* %117, align 8, !tbaa !2428
  %119 = add i64 %118, -8
  %120 = inttoptr i64 %119 to i64*
  store i64 %114, i64* %120
  store i64 %119, i64* %117, align 8, !tbaa !2428
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %112, i64* %121, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %122, %struct.Memory* %MEMORY.1)
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 28
  %126 = load i32, i32* %EAX
  %127 = zext i32 %126 to i64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %130
  %131 = load i64, i64* %RSP
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = add i64 32, %131
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  %135 = icmp ult i64 %134, %131
  %136 = icmp ult i64 %134, 32
  %137 = or i1 %135, %136
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %138, i8* %139, align 1, !tbaa !2434
  %140 = trunc i64 %134 to i32
  %141 = and i32 %140, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #17
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %145, i8* %146, align 1, !tbaa !2447
  %147 = xor i64 32, %131
  %148 = xor i64 %147, %134
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %151, i8* %152, align 1, !tbaa !2448
  %153 = icmp eq i64 %134, 0
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = lshr i64 %134, 63
  %157 = trunc i64 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %157, i8* %158, align 1, !tbaa !2450
  %159 = lshr i64 %131, 63
  %160 = xor i64 %156, %159
  %161 = add nuw nsw i64 %160, %156
  %162 = icmp eq i64 %161, 2
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %163, i8* %164, align 1, !tbaa !2451
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 1
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %168 = load i64, i64* %167, align 8, !tbaa !2428
  %169 = add i64 %168, 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %RBP, align 8, !tbaa !2428
  store i64 %169, i64* %167, align 8, !tbaa !2428
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 1
  store i64 %173, i64* %PC
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %176 = load i64, i64* %175, align 8, !tbaa !2428
  %177 = inttoptr i64 %176 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %174, align 8, !tbaa !2428
  %179 = add i64 %176, 8
  store i64 %179, i64* %175, align 8, !tbaa !2428
  ret %struct.Memory* %123

block_400c50:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %180 = add i64 %393, 10
  store i64 %180, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 155), i64* %RDI, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 8
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = sub i64 %187, 20
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  %192 = load i32, i32* %191
  %193 = sext i32 %192 to i64
  store i64 %193, i64* %RCX, align 8, !tbaa !2428
  %194 = load i64, i64* %RAX
  %195 = load i64, i64* %RCX
  %196 = mul i64 %195, 4
  %197 = add i64 %196, %194
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 3
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %197 to i32*
  %201 = load i32, i32* %200
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RSI, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 2
  store i64 %204, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %205 = load i64, i64* %PC
  %206 = sub i64 %205, 1591
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 5
  store i64 %210, i64* %PC
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %212 = load i64, i64* %211, align 8, !tbaa !2428
  %213 = add i64 %212, -8
  %214 = inttoptr i64 %213 to i64*
  store i64 %208, i64* %214
  store i64 %213, i64* %211, align 8, !tbaa !2428
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %206, i64* %215, align 8, !tbaa !2428
  %216 = load i64, i64* %PC
  %217 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %216, %struct.Memory* %MEMORY.1)
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 24
  %220 = load i32, i32* %EAX
  %221 = zext i32 %220 to i64
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %219 to i32*
  store i32 %220, i32* %224
  br label %block_400c6f

block_400c6f:                                     ; preds = %block_400c4b, %block_400c50
  %MEMORY.0 = phi %struct.Memory* [ %217, %block_400c50 ], [ %MEMORY.1, %block_400c4b ]
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 20
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 3
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = trunc i64 %232 to i32
  %236 = add i32 1, %235
  %237 = zext i32 %236 to i64
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = icmp ult i32 %236, %235
  %239 = icmp ult i32 %236, 1
  %240 = or i1 %238, %239
  %241 = zext i1 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %241, i8* %242, align 1, !tbaa !2434
  %243 = and i32 %236, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #17
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2447
  %249 = xor i64 1, %232
  %250 = trunc i64 %249 to i32
  %251 = xor i32 %250, %236
  %252 = lshr i32 %251, 4
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %254, i8* %255, align 1, !tbaa !2448
  %256 = icmp eq i32 %236, 0
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %257, i8* %258, align 1, !tbaa !2449
  %259 = lshr i32 %236, 31
  %260 = trunc i32 %259 to i8
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %260, i8* %261, align 1, !tbaa !2450
  %262 = lshr i32 %235, 31
  %263 = xor i32 %259, %262
  %264 = add nuw nsw i32 %263, %259
  %265 = icmp eq i32 %264, 2
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %266, i8* %267, align 1, !tbaa !2451
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 20
  %270 = load i32, i32* %EAX
  %271 = zext i32 %270 to i64
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %269 to i32*
  store i32 %270, i32* %274
  %275 = load i64, i64* %PC
  %276 = sub i64 %275, 79
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 5
  store i64 %278, i64* %PC
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %276, i64* %279, align 8, !tbaa !2428
  br label %block_400c29

block_400c35:                                     ; preds = %block_400c29
  %280 = add i64 %462, 5
  store i64 %280, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 20
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i32*
  %286 = load i32, i32* %285
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = load i64, i64* %RAX
  %289 = load i8, i8* %CL
  %290 = zext i8 %289 to i64
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 2
  store i64 %292, i64* %PC
  %293 = trunc i64 %290 to i5
  switch i5 %293, label %300 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %294
  ]

; <label>:294:                                    ; preds = %block_400c35
  %295 = trunc i64 %288 to i32
  %296 = shl i32 %295, 1
  %297 = icmp slt i32 %295, 0
  %298 = icmp slt i32 %296, 0
  %299 = xor i1 %297, %298
  br label %309

; <label>:300:                                    ; preds = %block_400c35
  %301 = and i64 %290, 31
  %302 = add nuw nsw i64 %301, 4294967295
  %303 = and i64 %288, 4294967295
  %304 = and i64 %302, 4294967295
  %305 = shl i64 %303, %304
  %306 = trunc i64 %305 to i32
  %307 = icmp slt i32 %306, 0
  %308 = shl i32 %306, 1
  br label %309

; <label>:309:                                    ; preds = %300, %294
  %310 = phi i1 [ %297, %294 ], [ %307, %300 ]
  %311 = phi i1 [ %299, %294 ], [ false, %300 ]
  %312 = phi i32 [ %296, %294 ], [ %308, %300 ]
  %313 = zext i32 %312 to i64
  store i64 %313, i64* %RAX, align 8, !tbaa !2428
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %315 = zext i1 %310 to i8
  store i8 %315, i8* %314, align 1, !tbaa !2452
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %317 = and i32 %312, 254
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #17
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %316, align 1, !tbaa !2452
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %322, align 1, !tbaa !2452
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %324 = icmp eq i32 %312, 0
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %323, align 1, !tbaa !2452
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %327 = lshr i32 %312, 31
  %328 = trunc i32 %327 to i8
  store i8 %328, i8* %326, align 1, !tbaa !2452
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %330 = zext i1 %311 to i8
  store i8 %330, i8* %329, align 1, !tbaa !2452
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %block_400c35, %309
  %331 = load i64, i64* %RAX
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 16
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC
  %336 = trunc i64 %331 to i32
  %337 = inttoptr i64 %333 to i32*
  %338 = load i32, i32* %337
  %339 = and i32 %338, %336
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %341, align 1, !tbaa !2434
  %342 = and i32 %339, 255
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #17
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = icmp eq i32 %339, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = lshr i32 %339, 31
  %352 = trunc i32 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %352, i8* %353, align 1, !tbaa !2450
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %354, align 1, !tbaa !2451
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %355, align 1, !tbaa !2448
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %360, align 1, !tbaa !2434
  %361 = and i32 %356, 255
  %362 = call i32 @llvm.ctpop.i32(i32 %361) #17
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %365, i8* %366, align 1, !tbaa !2447
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %367, align 1, !tbaa !2448
  %368 = icmp eq i32 %356, 0
  %369 = zext i1 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %369, i8* %370, align 1, !tbaa !2449
  %371 = lshr i32 %356, 31
  %372 = trunc i32 %371 to i8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %372, i8* %373, align 1, !tbaa !2450
  %374 = lshr i32 %356, 31
  %375 = xor i32 %371, %374
  %376 = add nuw nsw i32 %375, %374
  %377 = icmp eq i32 %376, 2
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %378, i8* %379, align 1, !tbaa !2451
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 11
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 6
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 6
  store i64 %385, i64* %PC
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %387 = load i8, i8* %386, align 1, !tbaa !2449
  store i8 %387, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %389 = icmp ne i8 %387, 0
  %390 = select i1 %389, i64 %381, i64 %383
  store i64 %390, i64* %388, align 8, !tbaa !2428
  %391 = load i8, i8* %BRANCH_TAKEN
  %392 = icmp eq i8 %391, 1
  %393 = load i64, i64* %PC
  br i1 %392, label %block_400c50, label %block_400c4b

block_400c4b:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %394 = add i64 %393, 36
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  store i64 %396, i64* %PC
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %394, i64* %397, align 8, !tbaa !2428
  br label %block_400c6f

block_400c29:                                     ; preds = %block_400c6f, %block_400c10
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400c10 ], [ %MEMORY.0, %block_400c6f ]
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 20
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 3
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  %403 = load i32, i32* %402
  %404 = zext i32 %403 to i64
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  %405 = load i32, i32* %EAX
  %406 = zext i32 %405 to i64
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 12
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411
  %413 = sub i32 %405, %412
  %414 = icmp ult i32 %405, %412
  %415 = zext i1 %414 to i8
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %415, i8* %416, align 1, !tbaa !2434
  %417 = and i32 %413, 255
  %418 = call i32 @llvm.ctpop.i32(i32 %417) #17
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = xor i8 %420, 1
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %421, i8* %422, align 1, !tbaa !2447
  %423 = xor i32 %412, %405
  %424 = xor i32 %423, %413
  %425 = lshr i32 %424, 4
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %427, i8* %428, align 1, !tbaa !2448
  %429 = icmp eq i32 %413, 0
  %430 = zext i1 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %430, i8* %431, align 1, !tbaa !2449
  %432 = lshr i32 %413, 31
  %433 = trunc i32 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %433, i8* %434, align 1, !tbaa !2450
  %435 = lshr i32 %405, 31
  %436 = lshr i32 %412, 31
  %437 = xor i32 %436, %435
  %438 = xor i32 %432, %435
  %439 = add nuw nsw i32 %438, %437
  %440 = icmp eq i32 %439, 2
  %441 = zext i1 %440 to i8
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %441, i8* %442, align 1, !tbaa !2451
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 78
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 6
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 6
  store i64 %448, i64* %PC
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %450 = load i8, i8* %449, align 1, !tbaa !2450
  %451 = icmp ne i8 %450, 0
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %453 = load i8, i8* %452, align 1, !tbaa !2451
  %454 = icmp ne i8 %453, 0
  %455 = xor i1 %451, %454
  %456 = xor i1 %455, true
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %459 = select i1 %455, i64 %446, i64 %444
  store i64 %459, i64* %458, align 8, !tbaa !2428
  %460 = load i8, i8* %BRANCH_TAKEN
  %461 = icmp eq i8 %460, 1
  %462 = load i64, i64* %PC
  br i1 %461, label %block_400c7d, label %block_400c35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400840_initWorkList(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400840:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %RDI
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 16
  %51 = load i64, i64* %RSI
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %RBP
  %56 = sub i64 %55, 20
  %57 = load i32, i32* %EDX
  %58 = zext i32 %57 to i64
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %56 to i32*
  store i32 %57, i32* %61
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 24
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66
  br label %block_400856

block_400862:                                     ; preds = %block_400856
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 16
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 24
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i32*
  %78 = load i32, i32* %77
  %79 = sext i32 %78 to i64
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = load i64, i64* %RAX
  %81 = load i64, i64* %RCX
  %82 = mul i64 %81, 4
  %83 = add i64 %82, %80
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %RDX, align 8, !tbaa !2428
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 8
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  %100 = load i32, i32* %99
  %101 = sext i32 %100 to i64
  store i64 %101, i64* %RCX, align 8, !tbaa !2428
  %102 = load i64, i64* %RAX
  %103 = load i64, i64* %RCX
  %104 = mul i64 %103, 4
  %105 = add i64 %104, %102
  %106 = load i32, i32* %EDX
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 24
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 3
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115
  %117 = zext i32 %116 to i64
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = load i64, i64* %RAX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 3
  store i64 %120, i64* %PC
  %121 = trunc i64 %118 to i32
  %122 = add i32 1, %121
  %123 = zext i32 %122 to i64
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %124 = icmp ult i32 %122, %121
  %125 = icmp ult i32 %122, 1
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2434
  %129 = and i32 %122, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #17
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = xor i64 1, %118
  %136 = trunc i64 %135 to i32
  %137 = xor i32 %136, %122
  %138 = lshr i32 %137, 4
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i32 %122, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i32 %122, 31
  %146 = trunc i32 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i32 %121, 31
  %149 = xor i32 %145, %148
  %150 = add nuw nsw i32 %149, %145
  %151 = icmp eq i32 %150, 2
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %152, i8* %153, align 1, !tbaa !2451
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 24
  %156 = load i32, i32* %EAX
  %157 = zext i32 %156 to i64
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 3
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %155 to i32*
  store i32 %156, i32* %160
  %161 = load i64, i64* %PC
  %162 = sub i64 %161, 43
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 5
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %162, i64* %165, align 8, !tbaa !2428
  br label %block_400856

block_400856:                                     ; preds = %block_400862, %block_400840
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400840 ], [ %MEMORY.0, %block_400862 ]
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 24
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 3
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i32*
  %171 = load i32, i32* %170
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = load i32, i32* %EAX
  %174 = zext i32 %173 to i64
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 20
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 3
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i32*
  %180 = load i32, i32* %179
  %181 = sub i32 %173, %180
  %182 = icmp ult i32 %173, %180
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %183, i8* %184, align 1, !tbaa !2434
  %185 = and i32 %181, 255
  %186 = call i32 @llvm.ctpop.i32(i32 %185) #17
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = xor i32 %180, %173
  %192 = xor i32 %191, %181
  %193 = lshr i32 %192, 4
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %195, i8* %196, align 1, !tbaa !2448
  %197 = icmp eq i32 %181, 0
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %198, i8* %199, align 1, !tbaa !2449
  %200 = lshr i32 %181, 31
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %201, i8* %202, align 1, !tbaa !2450
  %203 = lshr i32 %173, 31
  %204 = lshr i32 %180, 31
  %205 = xor i32 %204, %203
  %206 = xor i32 %200, %203
  %207 = add nuw nsw i32 %206, %205
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2451
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 42
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 6
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 6
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %218 = load i8, i8* %217, align 1, !tbaa !2450
  %219 = icmp ne i8 %218, 0
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %221 = load i8, i8* %220, align 1, !tbaa !2451
  %222 = icmp ne i8 %221, 0
  %223 = xor i1 %219, %222
  %224 = xor i1 %223, true
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %227 = select i1 %223, i64 %214, i64 %212
  store i64 %227, i64* %226, align 8, !tbaa !2428
  %228 = load i8, i8* %BRANCH_TAKEN
  %229 = icmp eq i8 %228, 1
  br i1 %229, label %block_400886, label %block_400862

block_400886:                                     ; preds = %block_400856
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 1
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %233 = load i64, i64* %232, align 8, !tbaa !2428
  %234 = add i64 %233, 8
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RBP, align 8, !tbaa !2428
  store i64 %234, i64* %232, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 1
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %241 = load i64, i64* %240, align 8, !tbaa !2428
  %242 = inttoptr i64 %241 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %239, align 8, !tbaa !2428
  %244 = add i64 %241, 8
  store i64 %244, i64* %240, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006c0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400abd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 7
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EAX = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDX = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %ESI = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  br label %block_400abd

block_400bb6:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 165), i64* %RDI, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 2
  store i64 %50, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %51 = load i64, i64* %PC
  %52 = sub i64 %51, 1426
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 5
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 5
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %52, i64* %61, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %62, %struct.Memory* %872)
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 76
  %66 = load i32, i32* %EAX
  %67 = zext i32 %66 to i64
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %65 to i32*
  store i32 %66, i32* %70
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 25
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %72, i64* %75, align 8, !tbaa !2428
  br label %block_400be3

block_400bf6:                                     ; preds = %block_400be3
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 10
  store i64 %77, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 2
  store i64 %79, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %80 = load i64, i64* %PC
  %81 = sub i64 %80, 1490
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 5
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %91, %struct.Memory* %MEMORY.0)
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 84
  %95 = load i32, i32* %EAX
  %96 = zext i32 %95 to i64
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %99
  %100 = load i64, i64* %RSP
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = add i64 96, %100
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %104 = icmp ult i64 %103, %100
  %105 = icmp ult i64 %103, 96
  %106 = or i1 %104, %105
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %107, i8* %108, align 1, !tbaa !2434
  %109 = trunc i64 %103 to i32
  %110 = and i32 %109, 255
  %111 = call i32 @llvm.ctpop.i32(i32 %110) #17
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %114, i8* %115, align 1, !tbaa !2447
  %116 = xor i64 96, %100
  %117 = xor i64 %116, %103
  %118 = lshr i64 %117, 4
  %119 = trunc i64 %118 to i8
  %120 = and i8 %119, 1
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %120, i8* %121, align 1, !tbaa !2448
  %122 = icmp eq i64 %103, 0
  %123 = zext i1 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %123, i8* %124, align 1, !tbaa !2449
  %125 = lshr i64 %103, 63
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %126, i8* %127, align 1, !tbaa !2450
  %128 = lshr i64 %100, 63
  %129 = xor i64 %125, %128
  %130 = add nuw nsw i64 %129, %125
  %131 = icmp eq i64 %130, 2
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %132, i8* %133, align 1, !tbaa !2451
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 1
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %137 = load i64, i64* %136, align 8, !tbaa !2428
  %138 = add i64 %137, 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RBP, align 8, !tbaa !2428
  store i64 %138, i64* %136, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %145 = load i64, i64* %144, align 8, !tbaa !2428
  %146 = inttoptr i64 %145 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %143, align 8, !tbaa !2428
  %148 = add i64 %145, 8
  store i64 %148, i64* %144, align 8, !tbaa !2428
  ret %struct.Memory* %92

block_400bcf:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 2
  store i64 %150, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %151 = load i64, i64* %PC
  %152 = sub i64 %151, 1451
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 5
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %158 = load i64, i64* %157, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %154, i64* %160
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %152, i64* %161, align 8, !tbaa !2428
  %162 = load i64, i64* %PC
  %163 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %162, %struct.Memory* %872)
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 80
  %166 = load i32, i32* %EAX
  %167 = zext i32 %166 to i64
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 3
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %165 to i32*
  store i32 %166, i32* %170
  br label %block_400be3

block_400aaf:                                     ; preds = %block_400a62
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 32
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RAX
  %178 = mul i64 %177, 8
  %179 = add i64 %178, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 40)
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 8
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = load i64, i64* %RCX
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 2
  store i64 %186, i64* %PC
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %184, i64* %187, align 8, !tbaa !2428
  %188 = load i64, i64* %PC
  switch i64 %188, label %992 [
    i64 4197153, label %block_400b21
    i64 4197128, label %block_400b08
    i64 4197053, label %block_400abd
    i64 4197103, label %block_400aef
    i64 4197078, label %block_400ad6
  ]

block_400ad6:                                     ; preds = %block_400aaf
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 10
  store i64 %190, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 145), i64* %RDI, align 8, !tbaa !2428
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 2
  store i64 %192, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %193 = load i64, i64* %PC
  %194 = sub i64 %193, 1202
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %200 = load i64, i64* %199, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %196, i64* %202
  store i64 %201, i64* %199, align 8, !tbaa !2428
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %194, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  %205 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %204, %struct.Memory* %556)
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 48
  %208 = load i32, i32* %EAX
  %209 = zext i32 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 3
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %207 to i32*
  store i32 %208, i32* %212
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 118
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  br label %block_400b60

block_400b3a:                                     ; preds = %block_400a62
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 10
  store i64 %219, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 153), i64* %RDI, align 8, !tbaa !2428
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 16
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RCX
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = sext i64 %233 to i128
  %237 = and i128 %236, -18446744073709551616
  %238 = zext i64 %233 to i128
  %239 = or i128 %237, %238
  %240 = mul nsw i128 12, %239
  %241 = trunc i128 %240 to i64
  store i64 %241, i64* %RCX, align 8, !tbaa !2428
  %242 = sext i64 %241 to i128
  %243 = icmp ne i128 %242, %240
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %244, i8* %245, align 1, !tbaa !2434
  %246 = trunc i128 %240 to i32
  %247 = and i32 %246, 255
  %248 = call i32 @llvm.ctpop.i32(i32 %247) #17
  %249 = trunc i32 %248 to i8
  %250 = and i8 %249, 1
  %251 = xor i8 %250, 1
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %251, i8* %252, align 1, !tbaa !2447
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %253, align 1, !tbaa !2448
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %254, align 1, !tbaa !2449
  %255 = lshr i64 %241, 63
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %244, i8* %258, align 1, !tbaa !2451
  %259 = load i64, i64* %RAX
  %260 = load i64, i64* %RCX
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = add i64 %260, %259
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = icmp ult i64 %263, %259
  %265 = icmp ult i64 %263, %260
  %266 = or i1 %264, %265
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %267, i8* %268, align 1, !tbaa !2434
  %269 = trunc i64 %263 to i32
  %270 = and i32 %269, 255
  %271 = call i32 @llvm.ctpop.i32(i32 %270) #17
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %274, i8* %275, align 1, !tbaa !2447
  %276 = xor i64 %260, %259
  %277 = xor i64 %276, %263
  %278 = lshr i64 %277, 4
  %279 = trunc i64 %278 to i8
  %280 = and i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %280, i8* %281, align 1, !tbaa !2448
  %282 = icmp eq i64 %263, 0
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %283, i8* %284, align 1, !tbaa !2449
  %285 = lshr i64 %263, 63
  %286 = trunc i64 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %286, i8* %287, align 1, !tbaa !2450
  %288 = lshr i64 %259, 63
  %289 = lshr i64 %260, 63
  %290 = xor i64 %285, %288
  %291 = xor i64 %285, %289
  %292 = add nuw nsw i64 %290, %291
  %293 = icmp eq i64 %292, 2
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %294, i8* %295, align 1, !tbaa !2451
  %296 = load i64, i64* %RAX
  %297 = add i64 %296, 8
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 3
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  %301 = load i32, i32* %300
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %RSI, align 8, !tbaa !2428
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 2
  store i64 %304, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %305 = load i64, i64* %PC
  %306 = sub i64 %305, 1320
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 5
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %312 = load i64, i64* %311, align 8, !tbaa !2428
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %308, i64* %314
  store i64 %313, i64* %311, align 8, !tbaa !2428
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %306, i64* %315, align 8, !tbaa !2428
  %316 = load i64, i64* %PC
  %317 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %316, %struct.Memory* %556)
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 64
  %320 = load i32, i32* %EAX
  %321 = zext i32 %320 to i64
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %319 to i32*
  store i32 %320, i32* %324
  br label %block_400b60

block_400be3:                                     ; preds = %block_400bcf, %block_400bb6
  %MEMORY.0 = phi %struct.Memory* [ %163, %block_400bcf ], [ %63, %block_400bb6 ]
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %326, i64* %329, align 8, !tbaa !2428
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 16
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i32*
  %335 = load i32, i32* %334
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = trunc i64 %337 to i32
  %341 = add i32 1, %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = icmp ult i32 %341, %340
  %344 = icmp ult i32 %341, 1
  %345 = or i1 %343, %344
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %346, i8* %347, align 1, !tbaa !2434
  %348 = and i32 %341, 255
  %349 = call i32 @llvm.ctpop.i32(i32 %348) #17
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  %352 = xor i8 %351, 1
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %352, i8* %353, align 1, !tbaa !2447
  %354 = xor i64 1, %337
  %355 = trunc i64 %354 to i32
  %356 = xor i32 %355, %341
  %357 = lshr i32 %356, 4
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %359, i8* %360, align 1, !tbaa !2448
  %361 = icmp eq i32 %341, 0
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %362, i8* %363, align 1, !tbaa !2449
  %364 = lshr i32 %341, 31
  %365 = trunc i32 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %365, i8* %366, align 1, !tbaa !2450
  %367 = lshr i32 %340, 31
  %368 = xor i32 %364, %367
  %369 = add nuw nsw i32 %368, %364
  %370 = icmp eq i32 %369, 2
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %371, i8* %372, align 1, !tbaa !2451
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 16
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %379
  %380 = load i64, i64* %PC
  %381 = sub i64 %380, 411
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %381, i64* %384, align 8, !tbaa !2428
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 16
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 3
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389
  %391 = zext i32 %390 to i64
  store i64 %391, i64* %RAX, align 8, !tbaa !2428
  %392 = load i32, i32* %EAX
  %393 = zext i32 %392 to i64
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 12
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sub i32 %392, %399
  %401 = icmp ult i32 %392, %399
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %402, i8* %403, align 1, !tbaa !2434
  %404 = and i32 %400, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #17
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = xor i32 %399, %392
  %411 = xor i32 %410, %400
  %412 = lshr i32 %411, 4
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = icmp eq i32 %400, 0
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %417, i8* %418, align 1, !tbaa !2449
  %419 = lshr i32 %400, 31
  %420 = trunc i32 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = lshr i32 %392, 31
  %423 = lshr i32 %399, 31
  %424 = xor i32 %423, %422
  %425 = xor i32 %419, %422
  %426 = add nuw nsw i32 %425, %424
  %427 = icmp eq i32 %426, 2
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %428, i8* %429, align 1, !tbaa !2451
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 410
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 6
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 6
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %437 = load i8, i8* %436, align 1, !tbaa !2450
  %438 = icmp ne i8 %437, 0
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %440 = load i8, i8* %439, align 1, !tbaa !2451
  %441 = icmp ne i8 %440, 0
  %442 = xor i1 %438, %441
  %443 = xor i1 %442, true
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %446 = select i1 %442, i64 %433, i64 %431
  store i64 %446, i64* %445, align 8, !tbaa !2428
  %447 = load i8, i8* %BRANCH_TAKEN
  %448 = icmp eq i8 %447, 1
  br i1 %448, label %block_400bf6, label %block_400a62

block_400abd:                                     ; preds = %block_400aaf, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %556, %block_400aaf ]
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 10
  store i64 %450, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 166), i64* %RDI, align 8, !tbaa !2428
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 2
  store i64 %452, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %453 = load i64, i64* %PC
  %454 = sub i64 %453, 1177
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 5
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 5
  store i64 %458, i64* %PC
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %460 = load i64, i64* %459, align 8, !tbaa !2428
  %461 = add i64 %460, -8
  %462 = inttoptr i64 %461 to i64*
  store i64 %456, i64* %462
  store i64 %461, i64* %459, align 8, !tbaa !2428
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %454, i64* %463, align 8, !tbaa !2428
  %464 = load i64, i64* %PC
  %465 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %464, %struct.Memory* %MEMORY.1)
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 44
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %472
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 143
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %477, align 8, !tbaa !2428
  br label %block_400b60

block_400a62:                                     ; preds = %block_400be3
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 8
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 16
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  %488 = inttoptr i64 %485 to i32*
  %489 = load i32, i32* %488
  %490 = sext i32 %489 to i64
  store i64 %490, i64* %RCX, align 8, !tbaa !2428
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %RCX
  %493 = mul i64 %492, 2
  %494 = add i64 %493, %491
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 4
  store i64 %496, i64* %PC
  store i64 %494, i64* %RCX, align 8, !tbaa !2428
  %497 = load i64, i64* %RAX
  %498 = load i64, i64* %RCX
  %499 = mul i64 %498, 4
  %500 = add i64 %499, %497
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RSI, align 8, !tbaa !2428
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  store i64 %507, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64 4294967295), i64* %RDX, align 8, !tbaa !2428
  %508 = load i32, i32* %EDX
  %509 = zext i32 %508 to i64
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 2
  store i64 %511, i64* %PC
  %512 = and i64 %509, 4294967295
  store i64 %512, i64* %RDI, align 8, !tbaa !2428
  %513 = load i64, i64* %RDX
  %514 = load i32, i32* %EDX
  %515 = zext i32 %514 to i64
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 2
  store i64 %517, i64* %PC
  %518 = xor i64 %515, %513
  %519 = trunc i64 %518 to i32
  %520 = and i64 %518, 4294967295
  store i64 %520, i64* %RDX, align 8, !tbaa !2428
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %521, align 1, !tbaa !2434
  %522 = and i32 %519, 255
  %523 = call i32 @llvm.ctpop.i32(i32 %522) #17
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %526, i8* %527, align 1, !tbaa !2447
  %528 = icmp eq i32 %519, 0
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %529, i8* %530, align 1, !tbaa !2449
  %531 = lshr i32 %519, 31
  %532 = trunc i32 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %532, i8* %533, align 1, !tbaa !2450
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %534, align 1, !tbaa !2451
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %535, align 1, !tbaa !2448
  %536 = load i8, i8* %DL
  %537 = zext i8 %536 to i64
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 3
  store i64 %539, i64* %PC
  store i8 %536, i8* %R8B, align 1, !tbaa !2452
  %540 = load i8, i8* %R8B
  %541 = zext i8 %540 to i64
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 3
  store i64 %543, i64* %PC
  store i8 %540, i8* %AL, align 1, !tbaa !2452
  %544 = load i64, i64* %PC
  %545 = sub i64 %544, 1104
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  store i64 %549, i64* %PC
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %551 = load i64, i64* %550, align 8, !tbaa !2428
  %552 = add i64 %551, -8
  %553 = inttoptr i64 %552 to i64*
  store i64 %547, i64* %553
  store i64 %552, i64* %550, align 8, !tbaa !2428
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %545, i64* %554, align 8, !tbaa !2428
  %555 = load i64, i64* %PC
  %556 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %555, %struct.Memory* %MEMORY.0)
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 8
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561
  store i64 %562, i64* %RCX, align 8, !tbaa !2428
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 16
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sext i32 %568 to i64
  store i64 %569, i64* %RDI, align 8, !tbaa !2428
  %570 = load i64, i64* %RDI
  %571 = load i64, i64* %RDI
  %572 = mul i64 %571, 2
  %573 = add i64 %572, %570
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  store i64 %573, i64* %RDI, align 8, !tbaa !2428
  %576 = load i64, i64* %RCX
  %577 = load i64, i64* %RDI
  %578 = mul i64 %577, 4
  %579 = add i64 %576, 8
  %580 = add i64 %579, %578
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i32*
  %584 = load i32, i32* %583
  %585 = zext i32 %584 to i64
  store i64 %585, i64* %RDX, align 8, !tbaa !2428
  %586 = load i32, i32* %EDX
  %587 = zext i32 %586 to i64
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 2
  store i64 %589, i64* %PC
  %590 = and i64 %587, 4294967295
  store i64 %590, i64* %RCX, align 8, !tbaa !2428
  %591 = load i64, i64* %RCX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  store i64 %591, i64* %RDI, align 8, !tbaa !2428
  %594 = load i64, i64* %RDI
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = sub i64 %594, 4
  store i64 %597, i64* %RDI, align 8, !tbaa !2428
  %598 = icmp ult i64 %594, 4
  %599 = zext i1 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %599, i8* %600, align 1, !tbaa !2434
  %601 = trunc i64 %597 to i32
  %602 = and i32 %601, 255
  %603 = call i32 @llvm.ctpop.i32(i32 %602) #17
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = xor i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %606, i8* %607, align 1, !tbaa !2447
  %608 = xor i64 4, %594
  %609 = xor i64 %608, %597
  %610 = lshr i64 %609, 4
  %611 = trunc i64 %610 to i8
  %612 = and i8 %611, 1
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %612, i8* %613, align 1, !tbaa !2448
  %614 = icmp eq i64 %597, 0
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %615, i8* %616, align 1, !tbaa !2449
  %617 = lshr i64 %597, 63
  %618 = trunc i64 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %618, i8* %619, align 1, !tbaa !2450
  %620 = lshr i64 %594, 63
  %621 = xor i64 %617, %620
  %622 = add nuw nsw i64 %621, %620
  %623 = icmp eq i64 %622, 2
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %624, i8* %625, align 1, !tbaa !2451
  %626 = load i64, i64* %RBP
  %627 = sub i64 %626, 20
  %628 = load i32, i32* %EAX
  %629 = zext i32 %628 to i64
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 3
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %627 to i32*
  store i32 %628, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 32
  %635 = load i64, i64* %RCX
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 4
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %634 to i64*
  store i64 %635, i64* %638
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 40
  %641 = load i64, i64* %RDI
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 4
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %640 to i64*
  store i64 %641, i64* %644
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 145
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 6
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 6
  store i64 %650, i64* %PC
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %652 = load i8, i8* %651, align 1, !tbaa !2434
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %654 = load i8, i8* %653, align 1, !tbaa !2449
  %655 = or i8 %654, %652
  %656 = icmp eq i8 %655, 0
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %659 = select i1 %656, i64 %646, i64 %648
  store i64 %659, i64* %658, align 8, !tbaa !2428
  %660 = load i8, i8* %BRANCH_TAKEN
  %661 = icmp eq i8 %660, 1
  br i1 %661, label %block_400b3a, label %block_400aaf

block_400b60:                                     ; preds = %block_400abd, %block_400b3a, %block_400ad6
  %MEMORY.2 = phi %struct.Memory* [ %465, %block_400abd ], [ %317, %block_400b3a ], [ %205, %block_400ad6 ]
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 8
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 4
  store i64 %665, i64* %PC
  %666 = inttoptr i64 %663 to i64*
  %667 = load i64, i64* %666
  store i64 %667, i64* %RAX, align 8, !tbaa !2428
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 16
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i32*
  %673 = load i32, i32* %672
  %674 = sext i32 %673 to i64
  store i64 %674, i64* %RCX, align 8, !tbaa !2428
  %675 = load i64, i64* %RCX
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  %678 = sext i64 %675 to i128
  %679 = and i128 %678, -18446744073709551616
  %680 = zext i64 %675 to i128
  %681 = or i128 %679, %680
  %682 = mul nsw i128 12, %681
  %683 = trunc i128 %682 to i64
  store i64 %683, i64* %RCX, align 8, !tbaa !2428
  %684 = sext i64 %683 to i128
  %685 = icmp ne i128 %684, %682
  %686 = zext i1 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %686, i8* %687, align 1, !tbaa !2434
  %688 = trunc i128 %682 to i32
  %689 = and i32 %688, 255
  %690 = call i32 @llvm.ctpop.i32(i32 %689) #17
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = xor i8 %692, 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %693, i8* %694, align 1, !tbaa !2447
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %695, align 1, !tbaa !2448
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %696, align 1, !tbaa !2449
  %697 = lshr i64 %683, 63
  %698 = trunc i64 %697 to i8
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %698, i8* %699, align 1, !tbaa !2450
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %686, i8* %700, align 1, !tbaa !2451
  %701 = load i64, i64* %RAX
  %702 = load i64, i64* %RCX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = add i64 %702, %701
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = icmp ult i64 %705, %701
  %707 = icmp ult i64 %705, %702
  %708 = or i1 %706, %707
  %709 = zext i1 %708 to i8
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %709, i8* %710, align 1, !tbaa !2434
  %711 = trunc i64 %705 to i32
  %712 = and i32 %711, 255
  %713 = call i32 @llvm.ctpop.i32(i32 %712) #17
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %716, i8* %717, align 1, !tbaa !2447
  %718 = xor i64 %702, %701
  %719 = xor i64 %718, %705
  %720 = lshr i64 %719, 4
  %721 = trunc i64 %720 to i8
  %722 = and i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %722, i8* %723, align 1, !tbaa !2448
  %724 = icmp eq i64 %705, 0
  %725 = zext i1 %724 to i8
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %725, i8* %726, align 1, !tbaa !2449
  %727 = lshr i64 %705, 63
  %728 = trunc i64 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %728, i8* %729, align 1, !tbaa !2450
  %730 = lshr i64 %701, 63
  %731 = lshr i64 %702, 63
  %732 = xor i64 %727, %730
  %733 = xor i64 %727, %731
  %734 = add nuw nsw i64 %732, %733
  %735 = icmp eq i64 %734, 2
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %736, i8* %737, align 1, !tbaa !2451
  %738 = load i64, i64* %RAX
  %739 = add i64 %738, 4
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 3
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i32*
  %743 = load i32, i32* %742
  %744 = zext i32 %743 to i64
  store i64 %744, i64* %RSI, align 8, !tbaa !2428
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 16
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 4
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i32*
  %756 = load i32, i32* %755
  %757 = sext i32 %756 to i64
  store i64 %757, i64* %RCX, align 8, !tbaa !2428
  %758 = load i64, i64* %RCX
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 4
  store i64 %760, i64* %PC
  %761 = sext i64 %758 to i128
  %762 = and i128 %761, -18446744073709551616
  %763 = zext i64 %758 to i128
  %764 = or i128 %762, %763
  %765 = mul nsw i128 12, %764
  %766 = trunc i128 %765 to i64
  store i64 %766, i64* %RCX, align 8, !tbaa !2428
  %767 = sext i64 %766 to i128
  %768 = icmp ne i128 %767, %765
  %769 = zext i1 %768 to i8
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %769, i8* %770, align 1, !tbaa !2434
  %771 = trunc i128 %765 to i32
  %772 = and i32 %771, 255
  %773 = call i32 @llvm.ctpop.i32(i32 %772) #17
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %776, i8* %777, align 1, !tbaa !2447
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %778, align 1, !tbaa !2448
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %779, align 1, !tbaa !2449
  %780 = lshr i64 %766, 63
  %781 = trunc i64 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %769, i8* %783, align 1, !tbaa !2451
  %784 = load i64, i64* %RAX
  %785 = load i64, i64* %RCX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 3
  store i64 %787, i64* %PC
  %788 = add i64 %785, %784
  store i64 %788, i64* %RAX, align 8, !tbaa !2428
  %789 = icmp ult i64 %788, %784
  %790 = icmp ult i64 %788, %785
  %791 = or i1 %789, %790
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %792, i8* %793, align 1, !tbaa !2434
  %794 = trunc i64 %788 to i32
  %795 = and i32 %794, 255
  %796 = call i32 @llvm.ctpop.i32(i32 %795) #17
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = xor i8 %798, 1
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %799, i8* %800, align 1, !tbaa !2447
  %801 = xor i64 %785, %784
  %802 = xor i64 %801, %788
  %803 = lshr i64 %802, 4
  %804 = trunc i64 %803 to i8
  %805 = and i8 %804, 1
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %805, i8* %806, align 1, !tbaa !2448
  %807 = icmp eq i64 %788, 0
  %808 = zext i1 %807 to i8
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %808, i8* %809, align 1, !tbaa !2449
  %810 = lshr i64 %788, 63
  %811 = trunc i64 %810 to i8
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %811, i8* %812, align 1, !tbaa !2450
  %813 = lshr i64 %784, 63
  %814 = lshr i64 %785, 63
  %815 = xor i64 %810, %813
  %816 = xor i64 %810, %814
  %817 = add nuw nsw i64 %815, %816
  %818 = icmp eq i64 %817, 2
  %819 = zext i1 %818 to i8
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %819, i8* %820, align 1, !tbaa !2451
  %821 = load i64, i64* %RAX
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 3
  store i64 %823, i64* %PC
  store i64 %821, i64* %RDI, align 8, !tbaa !2428
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 68
  %826 = load i32, i32* %ESI
  %827 = zext i32 %826 to i64
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 3
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %825 to i32*
  store i32 %826, i32* %830
  %831 = load i64, i64* %PC
  %832 = sub i64 %831, 487
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 5
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %838 = load i64, i64* %837, align 8, !tbaa !2428
  %839 = add i64 %838, -8
  %840 = inttoptr i64 %839 to i64*
  store i64 %834, i64* %840
  store i64 %839, i64* %837, align 8, !tbaa !2428
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %832, i64* %841, align 8, !tbaa !2428
  %842 = load i64, i64* %PC
  %843 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %842, %struct.Memory* %MEMORY.2)
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 10
  store i64 %845, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 159), i64* %RDI, align 8, !tbaa !2428
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 68
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 3
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %847 to i32*
  %851 = load i32, i32* %850
  %852 = zext i32 %851 to i64
  store i64 %852, i64* %RSI, align 8, !tbaa !2428
  %853 = load i32, i32* %EAX
  %854 = zext i32 %853 to i64
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 2
  store i64 %856, i64* %PC
  %857 = and i64 %854, 4294967295
  store i64 %857, i64* %RDX, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 2
  store i64 %859, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %860 = load i64, i64* %PC
  %861 = sub i64 %860, 1389
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %867 = load i64, i64* %866, align 8, !tbaa !2428
  %868 = add i64 %867, -8
  %869 = inttoptr i64 %868 to i64*
  store i64 %863, i64* %869
  store i64 %868, i64* %866, align 8, !tbaa !2428
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %861, i64* %870, align 8, !tbaa !2428
  %871 = load i64, i64* %PC
  %872 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %871, %struct.Memory* %843)
  %873 = load i64, i64* %RBP
  %874 = sub i64 %873, 16
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 3
  store i64 %876, i64* %PC
  %877 = inttoptr i64 %874 to i32*
  %878 = load i32, i32* %877
  %879 = zext i32 %878 to i64
  store i64 %879, i64* %RDX, align 8, !tbaa !2428
  %880 = load i64, i64* %RBP
  %881 = sub i64 %880, 12
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 3
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %881 to i32*
  %885 = load i32, i32* %884
  %886 = zext i32 %885 to i64
  store i64 %886, i64* %RSI, align 8, !tbaa !2428
  %887 = load i64, i64* %RSI
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = trunc i64 %887 to i32
  %891 = sub i32 %890, 1
  %892 = zext i32 %891 to i64
  store i64 %892, i64* %RSI, align 8, !tbaa !2428
  %893 = icmp ult i32 %890, 1
  %894 = zext i1 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %894, i8* %895, align 1, !tbaa !2434
  %896 = and i32 %891, 255
  %897 = call i32 @llvm.ctpop.i32(i32 %896) #17
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = xor i8 %899, 1
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %900, i8* %901, align 1, !tbaa !2447
  %902 = xor i64 1, %887
  %903 = trunc i64 %902 to i32
  %904 = xor i32 %903, %891
  %905 = lshr i32 %904, 4
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %907, i8* %908, align 1, !tbaa !2448
  %909 = icmp eq i32 %891, 0
  %910 = zext i1 %909 to i8
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %910, i8* %911, align 1, !tbaa !2449
  %912 = lshr i32 %891, 31
  %913 = trunc i32 %912 to i8
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %913, i8* %914, align 1, !tbaa !2450
  %915 = lshr i32 %890, 31
  %916 = xor i32 %912, %915
  %917 = add nuw nsw i32 %916, %915
  %918 = icmp eq i32 %917, 2
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %919, i8* %920, align 1, !tbaa !2451
  %921 = load i32, i32* %EDX
  %922 = zext i32 %921 to i64
  %923 = load i32, i32* %ESI
  %924 = zext i32 %923 to i64
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 2
  store i64 %926, i64* %PC
  %927 = sub i32 %921, %923
  %928 = icmp ult i32 %921, %923
  %929 = zext i1 %928 to i8
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %929, i8* %930, align 1, !tbaa !2434
  %931 = and i32 %927, 255
  %932 = call i32 @llvm.ctpop.i32(i32 %931) #17
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = xor i8 %934, 1
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %935, i8* %936, align 1, !tbaa !2447
  %937 = xor i64 %924, %922
  %938 = trunc i64 %937 to i32
  %939 = xor i32 %938, %927
  %940 = lshr i32 %939, 4
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %942, i8* %943, align 1, !tbaa !2448
  %944 = icmp eq i32 %927, 0
  %945 = zext i1 %944 to i8
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %945, i8* %946, align 1, !tbaa !2449
  %947 = lshr i32 %927, 31
  %948 = trunc i32 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %948, i8* %949, align 1, !tbaa !2450
  %950 = lshr i32 %921, 31
  %951 = lshr i32 %923, 31
  %952 = xor i32 %951, %950
  %953 = xor i32 %947, %950
  %954 = add nuw nsw i32 %953, %952
  %955 = icmp eq i32 %954, 2
  %956 = zext i1 %955 to i8
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %956, i8* %957, align 1, !tbaa !2451
  %958 = load i64, i64* %RBP
  %959 = sub i64 %958, 72
  %960 = load i32, i32* %EAX
  %961 = zext i32 %960 to i64
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 3
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %959 to i32*
  store i32 %960, i32* %964
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 31
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 6
  %969 = load i64, i64* %PC
  %970 = add i64 %969, 6
  store i64 %970, i64* %PC
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %972 = load i8, i8* %971, align 1, !tbaa !2450
  %973 = icmp ne i8 %972, 0
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %975 = load i8, i8* %974, align 1, !tbaa !2451
  %976 = icmp ne i8 %975, 0
  %977 = xor i1 %973, %976
  %978 = xor i1 %977, true
  %979 = zext i1 %978 to i8
  store i8 %979, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %981 = select i1 %977, i64 %968, i64 %966
  store i64 %981, i64* %980, align 8, !tbaa !2428
  %982 = load i8, i8* %BRANCH_TAKEN
  %983 = icmp eq i8 %982, 1
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 10
  store i64 %985, i64* %PC
  br i1 %983, label %block_400bcf, label %block_400bb6

block_400aef:                                     ; preds = %block_400aaf
  %986 = load i64, i64* %PC
  %987 = tail call %struct.Memory* @sub_400aef(%struct.State* %0, i64 %986, %struct.Memory* %556)
  ret %struct.Memory* %987

block_400b08:                                     ; preds = %block_400aaf
  %988 = load i64, i64* %PC
  %989 = tail call %struct.Memory* @sub_400b08(%struct.State* %0, i64 %988, %struct.Memory* %556)
  ret %struct.Memory* %989

block_400b21:                                     ; preds = %block_400aaf
  %990 = load i64, i64* %PC
  %991 = tail call %struct.Memory* @sub_400b21(%struct.State* %0, i64 %990, %struct.Memory* %556)
  ret %struct.Memory* %991

; <label>:992:                                    ; preds = %block_400aaf
  %993 = load i64, i64* %PC
  %994 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %993, %struct.Memory* %556)
  ret %struct.Memory* %994
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ca0_recSearch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400ca0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDI = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RAX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 5
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RCX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 7
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RDX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 9
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RSI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 11
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RDI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 13
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RSP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 15
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RBP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 17
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R8 = bitcast %union.anon* %48 to i64*
  %49 = load i64, i64* %RBP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 1
  store i64 %51, i64* %PC
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %49, i64* %55
  store i64 %54, i64* %52, align 8, !tbaa !2428
  %56 = load i64, i64* %RSP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  store i64 %56, i64* %RBP, align 8, !tbaa !2428
  %59 = load i64, i64* %RSP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC
  %62 = sub i64 %59, 48
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  %63 = icmp ult i64 %59, 48
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %64, i8* %65, align 1, !tbaa !2434
  %66 = trunc i64 %62 to i32
  %67 = and i32 %66, 255
  %68 = call i32 @llvm.ctpop.i32(i32 %67) #17
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = xor i64 48, %59
  %74 = xor i64 %73, %62
  %75 = lshr i64 %74, 4
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %77, i8* %78, align 1, !tbaa !2448
  %79 = icmp eq i64 %62, 0
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %80, i8* %81, align 1, !tbaa !2449
  %82 = lshr i64 %62, 63
  %83 = trunc i64 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = lshr i64 %59, 63
  %86 = xor i64 %82, %85
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %89, i8* %90, align 1, !tbaa !2451
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 4
  %93 = load i32, i32* %EDI
  %94 = zext i32 %93 to i64
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %92 to i32*
  store i32 %93, i32* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i32, i32* %ESI
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 3
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %99 to i32*
  store i32 %100, i32* %104
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 8
  store i64 %106, i64* %PC
  %107 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 48) to i32*)
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %108, align 1, !tbaa !2434
  %109 = and i32 %107, 255
  %110 = call i32 @llvm.ctpop.i32(i32 %109) #17
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %115, align 1, !tbaa !2448
  %116 = icmp eq i32 %107, 0
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %117, i8* %118, align 1, !tbaa !2449
  %119 = lshr i32 %107, 31
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = lshr i32 %107, 31
  %123 = xor i32 %119, %122
  %124 = add nuw nsw i32 %123, %122
  %125 = icmp eq i32 %124, 2
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %126, i8* %127, align 1, !tbaa !2451
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 11
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 6
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 6
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %135 = load i8, i8* %134, align 1, !tbaa !2449
  store i8 %135, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %137 = icmp ne i8 %135, 0
  %138 = select i1 %137, i64 %129, i64 %131
  store i64 %138, i64* %136, align 8, !tbaa !2428
  %139 = load i8, i8* %BRANCH_TAKEN
  %140 = icmp eq i8 %139, 1
  %141 = load i64, i64* %PC
  br i1 %140, label %block_400cc1, label %block_400cbc

block_400e7c:                                     ; preds = %block_400e72
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 32
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %148, align 1, !tbaa !2434
  %149 = and i32 %147, 255
  %150 = call i32 @llvm.ctpop.i32(i32 %149) #17
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %153, i8* %154, align 1, !tbaa !2447
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %155, align 1, !tbaa !2448
  %156 = icmp eq i32 %147, 0
  %157 = zext i1 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %157, i8* %158, align 1, !tbaa !2449
  %159 = lshr i32 %147, 31
  %160 = trunc i32 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %160, i8* %161, align 1, !tbaa !2450
  %162 = lshr i32 %147, 31
  %163 = xor i32 %159, %162
  %164 = add nuw nsw i32 %163, %162
  %165 = icmp eq i32 %164, 2
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %166, i8* %167, align 1, !tbaa !2451
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 11
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 6
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 6
  store i64 %173, i64* %PC
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %175 = load i8, i8* %174, align 1, !tbaa !2449
  %176 = icmp eq i8 %175, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %179 = select i1 %176, i64 %169, i64 %171
  store i64 %179, i64* %178, align 8, !tbaa !2428
  %180 = load i8, i8* %BRANCH_TAKEN
  %181 = icmp eq i8 %180, 1
  br i1 %181, label %block_400e8b, label %block_400e86

block_400dfa:                                     ; preds = %block_400f8a, %block_400df3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.13, %block_400df3 ], [ %MEMORY.14, %block_400f8a ]
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 24
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = load i32, i32* %EAX
  %190 = zext i32 %189 to i64
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 20
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 3
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i32*
  %196 = load i32, i32* %195
  %197 = sub i32 %189, %196
  %198 = icmp ult i32 %189, %196
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %199, i8* %200, align 1, !tbaa !2434
  %201 = and i32 %197, 255
  %202 = call i32 @llvm.ctpop.i32(i32 %201) #17
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %205, i8* %206, align 1, !tbaa !2447
  %207 = xor i32 %196, %189
  %208 = xor i32 %207, %197
  %209 = lshr i32 %208, 4
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %211, i8* %212, align 1, !tbaa !2448
  %213 = icmp eq i32 %197, 0
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %214, i8* %215, align 1, !tbaa !2449
  %216 = lshr i32 %197, 31
  %217 = trunc i32 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %217, i8* %218, align 1, !tbaa !2450
  %219 = lshr i32 %189, 31
  %220 = lshr i32 %196, 31
  %221 = xor i32 %220, %219
  %222 = xor i32 %216, %219
  %223 = add nuw nsw i32 %222, %221
  %224 = icmp eq i32 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2451
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 408
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 6
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 6
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %234 = load i8, i8* %233, align 1, !tbaa !2450
  %235 = icmp ne i8 %234, 0
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %237 = load i8, i8* %236, align 1, !tbaa !2451
  %238 = icmp ne i8 %237, 0
  %239 = xor i1 %235, %238
  %240 = xor i1 %239, true
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %243 = select i1 %239, i64 %230, i64 %228
  store i64 %243, i64* %242, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 5
  br i1 %245, label %block_400f98, label %block_400e06

block_400fbe:                                     ; preds = %block_400db2
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 5
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %249, i64* %252, align 8, !tbaa !2428
  br label %block_400fc3

block_400e6d:                                     ; preds = %block_400e59, %block_400e63
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_400e59 ], [ %MEMORY.2, %block_400e63 ]
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 285
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 5
  store i64 %256, i64* %PC
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %254, i64* %257, align 8, !tbaa !2428
  br label %block_400f8a

block_400e63:                                     ; preds = %block_400e59
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 32
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262
  %264 = sub i32 %263, 1
  %265 = icmp ult i32 %263, 1
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2434
  %268 = and i32 %264, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #17
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = xor i32 %263, 1
  %275 = xor i32 %274, %264
  %276 = lshr i32 %275, 4
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %278, i8* %279, align 1, !tbaa !2448
  %280 = icmp eq i32 %264, 0
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %281, i8* %282, align 1, !tbaa !2449
  %283 = lshr i32 %264, 31
  %284 = trunc i32 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %284, i8* %285, align 1, !tbaa !2450
  %286 = lshr i32 %263, 31
  %287 = xor i32 %283, %286
  %288 = add nuw nsw i32 %287, %286
  %289 = icmp eq i32 %288, 2
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %290, i8* %291, align 1, !tbaa !2451
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 11
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 6
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 6
  store i64 %297, i64* %PC
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %299 = load i8, i8* %298, align 1, !tbaa !2449
  %300 = icmp eq i8 %299, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = select i1 %300, i64 %293, i64 %295
  store i64 %303, i64* %302, align 8, !tbaa !2428
  %304 = load i8, i8* %BRANCH_TAKEN
  %305 = icmp eq i8 %304, 1
  br i1 %305, label %block_400e72, label %block_400e6d

block_400ce2:                                     ; preds = %block_400cc1
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 8
  store i64 %307, i64* %PC
  %308 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 7
  store i64 %310, i64* %PC
  %311 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %312 = zext i32 %311 to i64
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = load i64, i64* %RCX
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 4
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 3
  store i64 %317, i64* %PC
  %318 = trunc i64 %313 to i32
  %319 = inttoptr i64 %315 to i32*
  %320 = load i32, i32* %319
  %321 = add i32 %320, %318
  %322 = zext i32 %321 to i64
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = icmp ult i32 %321, %318
  %324 = icmp ult i32 %321, %320
  %325 = or i1 %323, %324
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %326, i8* %327, align 1, !tbaa !2434
  %328 = and i32 %321, 255
  %329 = call i32 @llvm.ctpop.i32(i32 %328) #17
  %330 = trunc i32 %329 to i8
  %331 = and i8 %330, 1
  %332 = xor i8 %331, 1
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %332, i8* %333, align 1, !tbaa !2447
  %334 = xor i32 %320, %318
  %335 = xor i32 %334, %321
  %336 = lshr i32 %335, 4
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %338, i8* %339, align 1, !tbaa !2448
  %340 = icmp eq i32 %321, 0
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %341, i8* %342, align 1, !tbaa !2449
  %343 = lshr i32 %321, 31
  %344 = trunc i32 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %344, i8* %345, align 1, !tbaa !2450
  %346 = lshr i32 %318, 31
  %347 = lshr i32 %320, 31
  %348 = xor i32 %343, %346
  %349 = xor i32 %343, %347
  %350 = add nuw nsw i32 %348, %349
  %351 = icmp eq i32 %350, 2
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %352, i8* %353, align 1, !tbaa !2451
  %354 = load i64, i64* %RCX
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 3
  store i64 %356, i64* %PC
  %357 = trunc i64 %354 to i32
  %358 = sub i32 %357, 1
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RCX, align 8, !tbaa !2428
  %360 = icmp ult i32 %357, 1
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %361, i8* %362, align 1, !tbaa !2434
  %363 = and i32 %358, 255
  %364 = call i32 @llvm.ctpop.i32(i32 %363) #17
  %365 = trunc i32 %364 to i8
  %366 = and i8 %365, 1
  %367 = xor i8 %366, 1
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %367, i8* %368, align 1, !tbaa !2447
  %369 = xor i64 1, %354
  %370 = trunc i64 %369 to i32
  %371 = xor i32 %370, %358
  %372 = lshr i32 %371, 4
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %374, i8* %375, align 1, !tbaa !2448
  %376 = icmp eq i32 %358, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2449
  %379 = lshr i32 %358, 31
  %380 = trunc i32 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2450
  %382 = lshr i32 %357, 31
  %383 = xor i32 %379, %382
  %384 = add nuw nsw i32 %383, %382
  %385 = icmp eq i32 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2451
  %388 = load i32, i32* %ECX
  %389 = zext i32 %388 to i64
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 3
  store i64 %391, i64* %PC
  %392 = shl i64 %389, 32
  %393 = ashr exact i64 %392, 32
  store i64 %393, i64* %RDX, align 8, !tbaa !2428
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %RDX
  %396 = mul i64 %395, 4
  %397 = add i64 %396, %394
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RCX, align 8, !tbaa !2428
  %403 = load i64, i64* %RCX
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 7
  store i64 %405, i64* %PC
  %406 = trunc i64 %403 to i32
  %407 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %408 = sub i32 %406, %407
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = icmp ult i32 %406, %407
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %411, i8* %412, align 1, !tbaa !2434
  %413 = and i32 %408, 255
  %414 = call i32 @llvm.ctpop.i32(i32 %413) #17
  %415 = trunc i32 %414 to i8
  %416 = and i8 %415, 1
  %417 = xor i8 %416, 1
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %417, i8* %418, align 1, !tbaa !2447
  %419 = xor i32 %407, %406
  %420 = xor i32 %419, %408
  %421 = lshr i32 %420, 4
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %423, i8* %424, align 1, !tbaa !2448
  %425 = icmp eq i32 %408, 0
  %426 = zext i1 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %426, i8* %427, align 1, !tbaa !2449
  %428 = lshr i32 %408, 31
  %429 = trunc i32 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %429, i8* %430, align 1, !tbaa !2450
  %431 = lshr i32 %406, 31
  %432 = lshr i32 %407, 31
  %433 = xor i32 %432, %431
  %434 = xor i32 %428, %431
  %435 = add nuw nsw i32 %434, %433
  %436 = icmp eq i32 %435, 2
  %437 = zext i1 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %437, i8* %438, align 1, !tbaa !2451
  %439 = load i32, i32* %ECX
  %440 = zext i32 %439 to i64
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 2
  store i64 %442, i64* %PC
  %443 = and i64 %440, 4294967295
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = sub i64 %444, 1766
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %451 = load i64, i64* %450, align 8, !tbaa !2428
  %452 = add i64 %451, -8
  %453 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %453
  store i64 %452, i64* %450, align 8, !tbaa !2428
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %445, i64* %454, align 8, !tbaa !2428
  %455 = load i64, i64* %PC
  %456 = call %struct.Memory* @ext_6020f0_abs(%struct.State* %0, i64 %455, %struct.Memory* %2)
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 7
  store i64 %458, i64* %PC
  %459 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 80) to i32*)
  %460 = zext i32 %459 to i64
  store i64 %460, i64* %RCX, align 8, !tbaa !2428
  %461 = load i64, i64* %RCX
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 7
  store i64 %463, i64* %PC
  %464 = trunc i64 %461 to i32
  %465 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %466 = sub i32 %464, %465
  %467 = zext i32 %466 to i64
  store i64 %467, i64* %RCX, align 8, !tbaa !2428
  %468 = icmp ult i32 %464, %465
  %469 = zext i1 %468 to i8
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %469, i8* %470, align 1, !tbaa !2434
  %471 = and i32 %466, 255
  %472 = call i32 @llvm.ctpop.i32(i32 %471) #17
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = xor i32 %465, %464
  %478 = xor i32 %477, %466
  %479 = lshr i32 %478, 4
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %481, i8* %482, align 1, !tbaa !2448
  %483 = icmp eq i32 %466, 0
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %484, i8* %485, align 1, !tbaa !2449
  %486 = lshr i32 %466, 31
  %487 = trunc i32 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = lshr i32 %464, 31
  %490 = lshr i32 %465, 31
  %491 = xor i32 %490, %489
  %492 = xor i32 %486, %489
  %493 = add nuw nsw i32 %492, %491
  %494 = icmp eq i32 %493, 2
  %495 = zext i1 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %495, i8* %496, align 1, !tbaa !2451
  %497 = load i32, i32* %ECX
  %498 = zext i32 %497 to i64
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 2
  store i64 %500, i64* %PC
  %501 = and i64 %498, 4294967295
  store i64 %501, i64* %RDI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 40
  %504 = load i32, i32* %EAX
  %505 = zext i32 %504 to i64
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 3
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %503 to i32*
  store i32 %504, i32* %508
  %509 = load i64, i64* %PC
  %510 = sub i64 %509, 1790
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 5
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 5
  store i64 %514, i64* %PC
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %516 = load i64, i64* %515, align 8, !tbaa !2428
  %517 = add i64 %516, -8
  %518 = inttoptr i64 %517 to i64*
  store i64 %512, i64* %518
  store i64 %517, i64* %515, align 8, !tbaa !2428
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %510, i64* %519, align 8, !tbaa !2428
  %520 = load i64, i64* %PC
  %521 = call %struct.Memory* @ext_6020f0_abs(%struct.State* %0, i64 %520, %struct.Memory* %456)
  %522 = load i64, i64* %RBP
  %523 = sub i64 %522, 40
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 3
  store i64 %525, i64* %PC
  %526 = inttoptr i64 %523 to i32*
  %527 = load i32, i32* %526
  %528 = zext i32 %527 to i64
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = load i32, i32* %ECX
  %530 = zext i32 %529 to i64
  %531 = load i32, i32* %EAX
  %532 = zext i32 %531 to i64
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 2
  store i64 %534, i64* %PC
  %535 = sub i32 %529, %531
  %536 = icmp ult i32 %529, %531
  %537 = zext i1 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %537, i8* %538, align 1, !tbaa !2434
  %539 = and i32 %535, 255
  %540 = call i32 @llvm.ctpop.i32(i32 %539) #17
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = xor i8 %542, 1
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %543, i8* %544, align 1, !tbaa !2447
  %545 = xor i64 %532, %530
  %546 = trunc i64 %545 to i32
  %547 = xor i32 %546, %535
  %548 = lshr i32 %547, 4
  %549 = trunc i32 %548 to i8
  %550 = and i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %550, i8* %551, align 1, !tbaa !2448
  %552 = icmp eq i32 %535, 0
  %553 = zext i1 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %553, i8* %554, align 1, !tbaa !2449
  %555 = lshr i32 %535, 31
  %556 = trunc i32 %555 to i8
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %556, i8* %557, align 1, !tbaa !2450
  %558 = lshr i32 %529, 31
  %559 = lshr i32 %531, 31
  %560 = xor i32 %559, %558
  %561 = xor i32 %555, %558
  %562 = add nuw nsw i32 %561, %560
  %563 = icmp eq i32 %562, 2
  %564 = zext i1 %563 to i8
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %564, i8* %565, align 1, !tbaa !2451
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 126
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 6
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 6
  store i64 %571, i64* %PC
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %573 = load i8, i8* %572, align 1, !tbaa !2450
  %574 = icmp ne i8 %573, 0
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %576 = load i8, i8* %575, align 1, !tbaa !2451
  %577 = icmp ne i8 %576, 0
  %578 = xor i1 %574, %577
  %579 = xor i1 %578, true
  %580 = zext i1 %579 to i8
  store i8 %580, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %582 = select i1 %578, i64 %569, i64 %567
  store i64 %582, i64* %581, align 8, !tbaa !2428
  %583 = load i8, i8* %BRANCH_TAKEN
  %584 = icmp eq i8 %583, 1
  br i1 %584, label %block_400da6, label %block_400d2e

block_400e59:                                     ; preds = %block_400e21, %block_400e4f
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_400e21 ], [ %MEMORY.0, %block_400e4f ]
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 28
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %586 to i32*
  %590 = load i32, i32* %589
  %591 = sub i32 %590, 1
  %592 = icmp ult i32 %590, 1
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %593, i8* %594, align 1, !tbaa !2434
  %595 = and i32 %591, 255
  %596 = call i32 @llvm.ctpop.i32(i32 %595) #17
  %597 = trunc i32 %596 to i8
  %598 = and i8 %597, 1
  %599 = xor i8 %598, 1
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %599, i8* %600, align 1, !tbaa !2447
  %601 = xor i32 %590, 1
  %602 = xor i32 %601, %591
  %603 = lshr i32 %602, 4
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %605, i8* %606, align 1, !tbaa !2448
  %607 = icmp eq i32 %591, 0
  %608 = zext i1 %607 to i8
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %608, i8* %609, align 1, !tbaa !2449
  %610 = lshr i32 %591, 31
  %611 = trunc i32 %610 to i8
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %611, i8* %612, align 1, !tbaa !2450
  %613 = lshr i32 %590, 31
  %614 = xor i32 %610, %613
  %615 = add nuw nsw i32 %614, %613
  %616 = icmp eq i32 %615, 2
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %617, i8* %618, align 1, !tbaa !2451
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 16
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 6
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 6
  store i64 %624, i64* %PC
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %626 = load i8, i8* %625, align 1, !tbaa !2449
  store i8 %626, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %628 = icmp ne i8 %626, 0
  %629 = select i1 %628, i64 %620, i64 %622
  store i64 %629, i64* %627, align 8, !tbaa !2428
  %630 = load i8, i8* %BRANCH_TAKEN
  %631 = icmp eq i8 %630, 1
  br i1 %631, label %block_400e6d, label %block_400e63

block_400dd8:                                     ; preds = %block_400dc3
  store i64 %2547, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 20
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i32*
  %637 = load i32, i32* %636
  %638 = zext i32 %637 to i64
  store i64 %638, i64* %RCX, align 8, !tbaa !2428
  %639 = load i64, i64* %RAX
  %640 = load i8, i8* %CL
  %641 = zext i8 %640 to i64
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 2
  store i64 %643, i64* %PC
  %644 = trunc i64 %641 to i5
  switch i5 %644, label %651 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit3
    i5 1, label %645
  ]

; <label>:645:                                    ; preds = %block_400dd8
  %646 = trunc i64 %639 to i32
  %647 = shl i32 %646, 1
  %648 = icmp slt i32 %646, 0
  %649 = icmp slt i32 %647, 0
  %650 = xor i1 %648, %649
  br label %660

; <label>:651:                                    ; preds = %block_400dd8
  %652 = and i64 %641, 31
  %653 = add nuw nsw i64 %652, 4294967295
  %654 = and i64 %639, 4294967295
  %655 = and i64 %653, 4294967295
  %656 = shl i64 %654, %655
  %657 = trunc i64 %656 to i32
  %658 = icmp slt i32 %657, 0
  %659 = shl i32 %657, 1
  br label %660

; <label>:660:                                    ; preds = %651, %645
  %661 = phi i1 [ %648, %645 ], [ %658, %651 ]
  %662 = phi i1 [ %650, %645 ], [ false, %651 ]
  %663 = phi i32 [ %647, %645 ], [ %659, %651 ]
  %664 = zext i32 %663 to i64
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %666 = zext i1 %661 to i8
  store i8 %666, i8* %665, align 1, !tbaa !2452
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %668 = and i32 %663, 254
  %669 = call i32 @llvm.ctpop.i32(i32 %668) #17
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  store i8 %672, i8* %667, align 1, !tbaa !2452
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %673, align 1, !tbaa !2452
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %675 = icmp eq i32 %663, 0
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %674, align 1, !tbaa !2452
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %678 = lshr i32 %663, 31
  %679 = trunc i32 %678 to i8
  store i8 %679, i8* %677, align 1, !tbaa !2452
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %681 = zext i1 %662 to i8
  store i8 %681, i8* %680, align 1, !tbaa !2452
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit3

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit3: ; preds = %block_400dd8, %660
  %682 = load i64, i64* %RAX
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 8
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 3
  store i64 %686, i64* %PC
  %687 = trunc i64 %682 to i32
  %688 = inttoptr i64 %684 to i32*
  %689 = load i32, i32* %688
  %690 = and i32 %689, %687
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %RAX, align 8, !tbaa !2428
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %692, align 1, !tbaa !2434
  %693 = and i32 %690, 255
  %694 = call i32 @llvm.ctpop.i32(i32 %693) #17
  %695 = trunc i32 %694 to i8
  %696 = and i8 %695, 1
  %697 = xor i8 %696, 1
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %697, i8* %698, align 1, !tbaa !2447
  %699 = icmp eq i32 %690, 0
  %700 = zext i1 %699 to i8
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %700, i8* %701, align 1, !tbaa !2449
  %702 = lshr i32 %690, 31
  %703 = trunc i32 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %703, i8* %704, align 1, !tbaa !2450
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %705, align 1, !tbaa !2451
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %706, align 1, !tbaa !2448
  %707 = load i32, i32* %EAX
  %708 = zext i32 %707 to i64
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 3
  store i64 %710, i64* %PC
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %711, align 1, !tbaa !2434
  %712 = and i32 %707, 255
  %713 = call i32 @llvm.ctpop.i32(i32 %712) #17
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %716, i8* %717, align 1, !tbaa !2447
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %718, align 1, !tbaa !2448
  %719 = icmp eq i32 %707, 0
  %720 = zext i1 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %720, i8* %721, align 1, !tbaa !2449
  %722 = lshr i32 %707, 31
  %723 = trunc i32 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %723, i8* %724, align 1, !tbaa !2450
  %725 = lshr i32 %707, 31
  %726 = xor i32 %722, %725
  %727 = add nuw nsw i32 %726, %725
  %728 = icmp eq i32 %727, 2
  %729 = zext i1 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %729, i8* %730, align 1, !tbaa !2451
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 11
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 6
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 6
  store i64 %736, i64* %PC
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %738 = load i8, i8* %737, align 1, !tbaa !2449
  store i8 %738, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %740 = icmp ne i8 %738, 0
  %741 = select i1 %740, i64 %732, i64 %734
  store i64 %741, i64* %739, align 8, !tbaa !2428
  %742 = load i8, i8* %BRANCH_TAKEN
  %743 = icmp eq i8 %742, 1
  br i1 %743, label %block_400df3, label %block_400dee

block_400ea5:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 229
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 5
  store i64 %747, i64* %PC
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %745, i64* %748, align 8, !tbaa !2428
  br label %block_400f8a

block_400e4f:                                     ; preds = %block_400e21
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 12
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 4
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753
  %755 = sub i32 %754, 4
  %756 = icmp ult i32 %754, 4
  %757 = zext i1 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %757, i8* %758, align 1, !tbaa !2434
  %759 = and i32 %755, 255
  %760 = call i32 @llvm.ctpop.i32(i32 %759) #17
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  %763 = xor i8 %762, 1
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %763, i8* %764, align 1, !tbaa !2447
  %765 = xor i32 %754, 4
  %766 = xor i32 %765, %755
  %767 = lshr i32 %766, 4
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2448
  %771 = icmp eq i32 %755, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2449
  %774 = lshr i32 %755, 31
  %775 = trunc i32 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2450
  %777 = lshr i32 %754, 31
  %778 = xor i32 %774, %777
  %779 = add nuw nsw i32 %778, %777
  %780 = icmp eq i32 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2451
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 31
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 6
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 6
  store i64 %788, i64* %PC
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %790 = load i8, i8* %789, align 1, !tbaa !2449
  %791 = icmp eq i8 %790, 0
  %792 = zext i1 %791 to i8
  store i8 %792, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %794 = select i1 %791, i64 %784, i64 %786
  store i64 %794, i64* %793, align 8, !tbaa !2428
  %795 = load i8, i8* %BRANCH_TAKEN
  %796 = icmp eq i8 %795, 1
  br i1 %796, label %block_400e72, label %block_400e59

block_400df3:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit3
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 24
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 7
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %798 to i32*
  store i32 0, i32* %801
  br label %block_400dfa

block_400eca:                                     ; preds = %block_400ebe
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 28
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 3
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %803 to i32*
  %807 = load i32, i32* %806
  %808 = zext i32 %807 to i64
  store i64 %808, i64* %RAX, align 8, !tbaa !2428
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 36
  %811 = load i32, i32* %EAX
  %812 = zext i32 %811 to i64
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 3
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %810 to i32*
  store i32 %811, i32* %815
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 32
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to i32*
  %821 = load i32, i32* %820
  %822 = zext i32 %821 to i64
  store i64 %822, i64* %RAX, align 8, !tbaa !2428
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 28
  %825 = load i32, i32* %EAX
  %826 = zext i32 %825 to i64
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %824 to i32*
  store i32 %825, i32* %829
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 36
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = load i64, i64* %RBP
  %838 = sub i64 %837, 32
  %839 = load i32, i32* %EAX
  %840 = zext i32 %839 to i64
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %838 to i32*
  store i32 %839, i32* %843
  br label %block_400edc

block_400e21:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %844 = add i64 %2788, 8
  store i64 %844, i64* %PC
  %845 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %845, i64* %RAX, align 8, !tbaa !2428
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 20
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %847 to i32*
  %851 = load i32, i32* %850
  %852 = sext i32 %851 to i64
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %RCX
  %855 = mul i64 %854, 4
  %856 = add i64 %855, %853
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i32*
  %860 = load i32, i32* %859
  %861 = zext i32 %860 to i64
  store i64 %861, i64* %RDX, align 8, !tbaa !2428
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 28
  %864 = load i32, i32* %EDX
  %865 = zext i32 %864 to i64
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 3
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %863 to i32*
  store i32 %864, i32* %868
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 8
  store i64 %870, i64* %PC
  %871 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %871, i64* %RAX, align 8, !tbaa !2428
  %872 = load i64, i64* %RBP
  %873 = sub i64 %872, 24
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 4
  store i64 %875, i64* %PC
  %876 = inttoptr i64 %873 to i32*
  %877 = load i32, i32* %876
  %878 = sext i32 %877 to i64
  store i64 %878, i64* %RCX, align 8, !tbaa !2428
  %879 = load i64, i64* %RAX
  %880 = load i64, i64* %RCX
  %881 = mul i64 %880, 4
  %882 = add i64 %881, %879
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 3
  store i64 %884, i64* %PC
  %885 = inttoptr i64 %882 to i32*
  %886 = load i32, i32* %885
  %887 = zext i32 %886 to i64
  store i64 %887, i64* %RDX, align 8, !tbaa !2428
  %888 = load i64, i64* %RBP
  %889 = sub i64 %888, 32
  %890 = load i32, i32* %EDX
  %891 = zext i32 %890 to i64
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 3
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %889 to i32*
  store i32 %890, i32* %894
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 12
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 4
  store i64 %898, i64* %PC
  %899 = inttoptr i64 %896 to i32*
  %900 = load i32, i32* %899
  %901 = sub i32 %900, 3
  %902 = icmp ult i32 %900, 3
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2434
  %905 = and i32 %901, 255
  %906 = call i32 @llvm.ctpop.i32(i32 %905) #17
  %907 = trunc i32 %906 to i8
  %908 = and i8 %907, 1
  %909 = xor i8 %908, 1
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %909, i8* %910, align 1, !tbaa !2447
  %911 = xor i32 %900, 3
  %912 = xor i32 %911, %901
  %913 = lshr i32 %912, 4
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %915, i8* %916, align 1, !tbaa !2448
  %917 = icmp eq i32 %901, 0
  %918 = zext i1 %917 to i8
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %918, i8* %919, align 1, !tbaa !2449
  %920 = lshr i32 %901, 31
  %921 = trunc i32 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %921, i8* %922, align 1, !tbaa !2450
  %923 = lshr i32 %900, 31
  %924 = xor i32 %920, %923
  %925 = add nuw nsw i32 %924, %923
  %926 = icmp eq i32 %925, 2
  %927 = zext i1 %926 to i8
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %927, i8* %928, align 1, !tbaa !2451
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 16
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 6
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 6
  store i64 %934, i64* %PC
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %936 = load i8, i8* %935, align 1, !tbaa !2449
  store i8 %936, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %938 = icmp ne i8 %936, 0
  %939 = select i1 %938, i64 %930, i64 %932
  store i64 %939, i64* %937, align 8, !tbaa !2428
  %940 = load i8, i8* %BRANCH_TAKEN
  %941 = icmp eq i8 %940, 1
  br i1 %941, label %block_400e59, label %block_400e4f

block_400ebe:                                     ; preds = %block_400eaa, %block_400eb4
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.7, %block_400eaa ], [ %MEMORY.7, %block_400eb4 ]
  %942 = load i64, i64* %RBP
  %943 = sub i64 %942, 28
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 3
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to i32*
  %947 = load i32, i32* %946
  %948 = zext i32 %947 to i64
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i32, i32* %EAX
  %950 = zext i32 %949 to i64
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 32
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 3
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i32*
  %956 = load i32, i32* %955
  %957 = sub i32 %949, %956
  %958 = icmp ult i32 %949, %956
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %959, i8* %960, align 1, !tbaa !2434
  %961 = and i32 %957, 255
  %962 = call i32 @llvm.ctpop.i32(i32 %961) #17
  %963 = trunc i32 %962 to i8
  %964 = and i8 %963, 1
  %965 = xor i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %965, i8* %966, align 1, !tbaa !2447
  %967 = xor i32 %956, %949
  %968 = xor i32 %967, %957
  %969 = lshr i32 %968, 4
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %971, i8* %972, align 1, !tbaa !2448
  %973 = icmp eq i32 %957, 0
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %974, i8* %975, align 1, !tbaa !2449
  %976 = lshr i32 %957, 31
  %977 = trunc i32 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = lshr i32 %949, 31
  %980 = lshr i32 %956, 31
  %981 = xor i32 %980, %979
  %982 = xor i32 %976, %979
  %983 = add nuw nsw i32 %982, %981
  %984 = icmp eq i32 %983, 2
  %985 = zext i1 %984 to i8
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %985, i8* %986, align 1, !tbaa !2451
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 24
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 6
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 6
  store i64 %992, i64* %PC
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %994 = load i8, i8* %993, align 1, !tbaa !2450
  %995 = icmp ne i8 %994, 0
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %997 = load i8, i8* %996, align 1, !tbaa !2451
  %998 = icmp ne i8 %997, 0
  %999 = xor i1 %995, %998
  %1000 = xor i1 %999, true
  %1001 = zext i1 %1000 to i8
  store i8 %1001, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1003 = select i1 %999, i64 %990, i64 %988
  store i64 %1003, i64* %1002, align 8, !tbaa !2428
  %1004 = load i8, i8* %BRANCH_TAKEN
  %1005 = icmp eq i8 %1004, 1
  br i1 %1005, label %block_400edc, label %block_400eca

block_400dbc:                                     ; preds = %block_400db2
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 20
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 7
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to i32*
  store i32 0, i32* %1010
  br label %block_400dc3

block_400eb4:                                     ; preds = %block_400eaa
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 12
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 4
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i32*
  %1016 = load i32, i32* %1015
  %1017 = sub i32 %1016, 2
  %1018 = icmp ult i32 %1016, 2
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1019, i8* %1020, align 1, !tbaa !2434
  %1021 = and i32 %1017, 255
  %1022 = call i32 @llvm.ctpop.i32(i32 %1021) #17
  %1023 = trunc i32 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = xor i8 %1024, 1
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1025, i8* %1026, align 1, !tbaa !2447
  %1027 = xor i32 %1016, 2
  %1028 = xor i32 %1027, %1017
  %1029 = lshr i32 %1028, 4
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1031, i8* %1032, align 1, !tbaa !2448
  %1033 = icmp eq i32 %1017, 0
  %1034 = zext i1 %1033 to i8
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1034, i8* %1035, align 1, !tbaa !2449
  %1036 = lshr i32 %1017, 31
  %1037 = trunc i32 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1037, i8* %1038, align 1, !tbaa !2450
  %1039 = lshr i32 %1016, 31
  %1040 = xor i32 %1036, %1039
  %1041 = add nuw nsw i32 %1040, %1039
  %1042 = icmp eq i32 %1041, 2
  %1043 = zext i1 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1043, i8* %1044, align 1, !tbaa !2451
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 36
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 6
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 6
  store i64 %1050, i64* %PC
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1052 = load i8, i8* %1051, align 1, !tbaa !2449
  %1053 = icmp eq i8 %1052, 0
  %1054 = zext i1 %1053 to i8
  store i8 %1054, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1056 = select i1 %1053, i64 %1046, i64 %1048
  store i64 %1056, i64* %1055, align 8, !tbaa !2428
  %1057 = load i8, i8* %BRANCH_TAKEN
  %1058 = icmp eq i8 %1057, 1
  br i1 %1058, label %block_400edc, label %block_400ebe

block_400db2:                                     ; preds = %block_400dab, %block_400fab
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_400dab ], [ %MEMORY.13, %block_400fab ]
  %1059 = load i64, i64* %RBP
  %1060 = sub i64 %1059, 12
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 4
  store i64 %1062, i64* %PC
  %1063 = inttoptr i64 %1060 to i32*
  %1064 = load i32, i32* %1063
  %1065 = sub i32 %1064, 4
  %1066 = icmp ult i32 %1064, 4
  %1067 = zext i1 %1066 to i8
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1067, i8* %1068, align 1, !tbaa !2434
  %1069 = and i32 %1065, 255
  %1070 = call i32 @llvm.ctpop.i32(i32 %1069) #17
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = xor i8 %1072, 1
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1073, i8* %1074, align 1, !tbaa !2447
  %1075 = xor i32 %1064, 4
  %1076 = xor i32 %1075, %1065
  %1077 = lshr i32 %1076, 4
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1079, i8* %1080, align 1, !tbaa !2448
  %1081 = icmp eq i32 %1065, 0
  %1082 = zext i1 %1081 to i8
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1082, i8* %1083, align 1, !tbaa !2449
  %1084 = lshr i32 %1065, 31
  %1085 = trunc i32 %1084 to i8
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1085, i8* %1086, align 1, !tbaa !2450
  %1087 = lshr i32 %1064, 31
  %1088 = xor i32 %1084, %1087
  %1089 = add nuw nsw i32 %1088, %1087
  %1090 = icmp eq i32 %1089, 2
  %1091 = zext i1 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1091, i8* %1092, align 1, !tbaa !2451
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 520
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 6
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 6
  store i64 %1098, i64* %PC
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1100 = load i8, i8* %1099, align 1, !tbaa !2449
  %1101 = icmp eq i8 %1100, 0
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1103 = load i8, i8* %1102, align 1, !tbaa !2450
  %1104 = icmp ne i8 %1103, 0
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1106 = load i8, i8* %1105, align 1, !tbaa !2451
  %1107 = icmp ne i8 %1106, 0
  %1108 = xor i1 %1104, %1107
  %1109 = xor i1 %1108, true
  %1110 = and i1 %1101, %1109
  %1111 = zext i1 %1110 to i8
  store i8 %1111, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1113 = select i1 %1110, i64 %1094, i64 %1096
  store i64 %1113, i64* %1112, align 8, !tbaa !2428
  %1114 = load i8, i8* %BRANCH_TAKEN
  %1115 = icmp eq i8 %1114, 1
  br i1 %1115, label %block_400fbe, label %block_400dbc

block_400e86:                                     ; preds = %block_400e72, %block_400e7c
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.11, %block_400e72 ], [ %MEMORY.11, %block_400e7c ]
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 260
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 5
  store i64 %1119, i64* %PC
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1117, i64* %1120, align 8, !tbaa !2428
  br label %block_400f8a

block_400edc:                                     ; preds = %block_400eb4, %block_400ebe, %block_400eca
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.3, %block_400ebe ], [ %MEMORY.3, %block_400eca ], [ %MEMORY.7, %block_400eb4 ]
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 5
  store i64 %1122, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1123 = load i64, i64* %RBP
  %1124 = sub i64 %1123, 8
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 3
  store i64 %1126, i64* %PC
  %1127 = inttoptr i64 %1124 to i32*
  %1128 = load i32, i32* %1127
  %1129 = zext i32 %1128 to i64
  store i64 %1129, i64* %RCX, align 8, !tbaa !2428
  %1130 = load i64, i64* %RBP
  %1131 = sub i64 %1130, 20
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 3
  store i64 %1133, i64* %PC
  %1134 = inttoptr i64 %1131 to i32*
  %1135 = load i32, i32* %1134
  %1136 = zext i32 %1135 to i64
  store i64 %1136, i64* %RDX, align 8, !tbaa !2428
  %1137 = load i64, i64* %RBP
  %1138 = sub i64 %1137, 44
  %1139 = load i32, i32* %ECX
  %1140 = zext i32 %1139 to i64
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 3
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1138 to i32*
  store i32 %1139, i32* %1143
  %1144 = load i32, i32* %EDX
  %1145 = zext i32 %1144 to i64
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 2
  store i64 %1147, i64* %PC
  %1148 = and i64 %1145, 4294967295
  store i64 %1148, i64* %RCX, align 8, !tbaa !2428
  %1149 = load i32, i32* %EAX
  %1150 = zext i32 %1149 to i64
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 2
  store i64 %1152, i64* %PC
  %1153 = and i64 %1150, 4294967295
  store i64 %1153, i64* %RDX, align 8, !tbaa !2428
  %1154 = load i64, i64* %RDX
  %1155 = load i8, i8* %CL
  %1156 = zext i8 %1155 to i64
  %1157 = load i64, i64* %PC
  %1158 = add i64 %1157, 2
  store i64 %1158, i64* %PC
  %1159 = trunc i64 %1156 to i5
  switch i5 %1159, label %1166 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit2
    i5 1, label %1160
  ]

; <label>:1160:                                   ; preds = %block_400edc
  %1161 = trunc i64 %1154 to i32
  %1162 = shl i32 %1161, 1
  %1163 = icmp slt i32 %1161, 0
  %1164 = icmp slt i32 %1162, 0
  %1165 = xor i1 %1163, %1164
  br label %1175

; <label>:1166:                                   ; preds = %block_400edc
  %1167 = and i64 %1156, 31
  %1168 = add nuw nsw i64 %1167, 4294967295
  %1169 = and i64 %1154, 4294967295
  %1170 = and i64 %1168, 4294967295
  %1171 = shl i64 %1169, %1170
  %1172 = trunc i64 %1171 to i32
  %1173 = icmp slt i32 %1172, 0
  %1174 = shl i32 %1172, 1
  br label %1175

; <label>:1175:                                   ; preds = %1166, %1160
  %1176 = phi i1 [ %1163, %1160 ], [ %1173, %1166 ]
  %1177 = phi i1 [ %1165, %1160 ], [ false, %1166 ]
  %1178 = phi i32 [ %1162, %1160 ], [ %1174, %1166 ]
  %1179 = zext i32 %1178 to i64
  store i64 %1179, i64* %RDX, align 8, !tbaa !2428
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1181 = zext i1 %1176 to i8
  store i8 %1181, i8* %1180, align 1, !tbaa !2452
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1183 = and i32 %1178, 254
  %1184 = call i32 @llvm.ctpop.i32(i32 %1183) #17
  %1185 = trunc i32 %1184 to i8
  %1186 = and i8 %1185, 1
  %1187 = xor i8 %1186, 1
  store i8 %1187, i8* %1182, align 1, !tbaa !2452
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1188, align 1, !tbaa !2452
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1190 = icmp eq i32 %1178, 0
  %1191 = zext i1 %1190 to i8
  store i8 %1191, i8* %1189, align 1, !tbaa !2452
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1193 = lshr i32 %1178, 31
  %1194 = trunc i32 %1193 to i8
  store i8 %1194, i8* %1192, align 1, !tbaa !2452
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1196 = zext i1 %1177 to i8
  store i8 %1196, i8* %1195, align 1, !tbaa !2452
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit2

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit2: ; preds = %block_400edc, %1175
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 44
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 3
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1198 to i32*
  %1202 = load i32, i32* %1201
  %1203 = zext i32 %1202 to i64
  store i64 %1203, i64* %RSI, align 8, !tbaa !2428
  %1204 = load i64, i64* %RSI
  %1205 = load i32, i32* %EDX
  %1206 = zext i32 %1205 to i64
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 2
  store i64 %1208, i64* %PC
  %1209 = or i64 %1206, %1204
  %1210 = trunc i64 %1209 to i32
  %1211 = and i64 %1209, 4294967295
  store i64 %1211, i64* %RSI, align 8, !tbaa !2428
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1212, align 1, !tbaa !2434
  %1213 = and i32 %1210, 255
  %1214 = call i32 @llvm.ctpop.i32(i32 %1213) #17
  %1215 = trunc i32 %1214 to i8
  %1216 = and i8 %1215, 1
  %1217 = xor i8 %1216, 1
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1217, i8* %1218, align 1, !tbaa !2447
  %1219 = icmp eq i32 %1210, 0
  %1220 = zext i1 %1219 to i8
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1220, i8* %1221, align 1, !tbaa !2449
  %1222 = lshr i32 %1210, 31
  %1223 = trunc i32 %1222 to i8
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1223, i8* %1224, align 1, !tbaa !2450
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1225, align 1, !tbaa !2451
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1226, align 1, !tbaa !2448
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 24
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 3
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i32*
  %1232 = load i32, i32* %1231
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RCX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RAX
  %1235 = load i8, i8* %CL
  %1236 = zext i8 %1235 to i64
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 2
  store i64 %1238, i64* %PC
  %1239 = trunc i64 %1236 to i5
  switch i5 %1239, label %1246 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit1
    i5 1, label %1240
  ]

; <label>:1240:                                   ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit2
  %1241 = trunc i64 %1234 to i32
  %1242 = shl i32 %1241, 1
  %1243 = icmp slt i32 %1241, 0
  %1244 = icmp slt i32 %1242, 0
  %1245 = xor i1 %1243, %1244
  br label %1255

; <label>:1246:                                   ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit2
  %1247 = and i64 %1236, 31
  %1248 = add nuw nsw i64 %1247, 4294967295
  %1249 = and i64 %1234, 4294967295
  %1250 = and i64 %1248, 4294967295
  %1251 = shl i64 %1249, %1250
  %1252 = trunc i64 %1251 to i32
  %1253 = icmp slt i32 %1252, 0
  %1254 = shl i32 %1252, 1
  br label %1255

; <label>:1255:                                   ; preds = %1246, %1240
  %1256 = phi i1 [ %1243, %1240 ], [ %1253, %1246 ]
  %1257 = phi i1 [ %1245, %1240 ], [ false, %1246 ]
  %1258 = phi i32 [ %1242, %1240 ], [ %1254, %1246 ]
  %1259 = zext i32 %1258 to i64
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1261 = zext i1 %1256 to i8
  store i8 %1261, i8* %1260, align 1, !tbaa !2452
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1263 = and i32 %1258, 254
  %1264 = call i32 @llvm.ctpop.i32(i32 %1263) #17
  %1265 = trunc i32 %1264 to i8
  %1266 = and i8 %1265, 1
  %1267 = xor i8 %1266, 1
  store i8 %1267, i8* %1262, align 1, !tbaa !2452
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1268, align 1, !tbaa !2452
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1270 = icmp eq i32 %1258, 0
  %1271 = zext i1 %1270 to i8
  store i8 %1271, i8* %1269, align 1, !tbaa !2452
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1273 = lshr i32 %1258, 31
  %1274 = trunc i32 %1273 to i8
  store i8 %1274, i8* %1272, align 1, !tbaa !2452
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1276 = zext i1 %1257 to i8
  store i8 %1276, i8* %1275, align 1, !tbaa !2452
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit1

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit1: ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit2, %1255
  %1277 = load i64, i64* %RSI
  %1278 = load i32, i32* %EAX
  %1279 = zext i32 %1278 to i64
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 2
  store i64 %1281, i64* %PC
  %1282 = or i64 %1279, %1277
  %1283 = trunc i64 %1282 to i32
  %1284 = and i64 %1282, 4294967295
  store i64 %1284, i64* %RSI, align 8, !tbaa !2428
  %1285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1285, align 1, !tbaa !2434
  %1286 = and i32 %1283, 255
  %1287 = call i32 @llvm.ctpop.i32(i32 %1286) #17
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  %1290 = xor i8 %1289, 1
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1290, i8* %1291, align 1, !tbaa !2447
  %1292 = icmp eq i32 %1283, 0
  %1293 = zext i1 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1293, i8* %1294, align 1, !tbaa !2449
  %1295 = lshr i32 %1283, 31
  %1296 = trunc i32 %1295 to i8
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1296, i8* %1297, align 1, !tbaa !2450
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1298, align 1, !tbaa !2451
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1299, align 1, !tbaa !2448
  %1300 = load i64, i64* %RBP
  %1301 = sub i64 %1300, 16
  %1302 = load i32, i32* %ESI
  %1303 = zext i32 %1302 to i64
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 3
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1301 to i32*
  store i32 %1302, i32* %1306
  %1307 = load i64, i64* %RBP
  %1308 = sub i64 %1307, 28
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 3
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1308 to i32*
  %1312 = load i32, i32* %1311
  %1313 = zext i32 %1312 to i64
  store i64 %1313, i64* %RAX, align 8, !tbaa !2428
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 8
  store i64 %1315, i64* %PC
  %1316 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %1316, i64* %RDI, align 8, !tbaa !2428
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 4
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 4
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  %1322 = load i32, i32* %1321
  %1323 = sext i32 %1322 to i64
  store i64 %1323, i64* %R8, align 8, !tbaa !2428
  %1324 = load i64, i64* %R8
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 4
  store i64 %1326, i64* %PC
  %1327 = sext i64 %1324 to i128
  %1328 = and i128 %1327, -18446744073709551616
  %1329 = zext i64 %1324 to i128
  %1330 = or i128 %1328, %1329
  %1331 = mul nsw i128 12, %1330
  %1332 = trunc i128 %1331 to i64
  store i64 %1332, i64* %R8, align 8, !tbaa !2428
  %1333 = sext i64 %1332 to i128
  %1334 = icmp ne i128 %1333, %1331
  %1335 = zext i1 %1334 to i8
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1335, i8* %1336, align 1, !tbaa !2434
  %1337 = trunc i128 %1331 to i32
  %1338 = and i32 %1337, 255
  %1339 = call i32 @llvm.ctpop.i32(i32 %1338) #17
  %1340 = trunc i32 %1339 to i8
  %1341 = and i8 %1340, 1
  %1342 = xor i8 %1341, 1
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1342, i8* %1343, align 1, !tbaa !2447
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1344, align 1, !tbaa !2448
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1345, align 1, !tbaa !2449
  %1346 = lshr i64 %1332, 63
  %1347 = trunc i64 %1346 to i8
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1347, i8* %1348, align 1, !tbaa !2450
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1335, i8* %1349, align 1, !tbaa !2451
  %1350 = load i64, i64* %RDI
  %1351 = load i64, i64* %R8
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 3
  store i64 %1353, i64* %PC
  %1354 = add i64 %1351, %1350
  store i64 %1354, i64* %RDI, align 8, !tbaa !2428
  %1355 = icmp ult i64 %1354, %1350
  %1356 = icmp ult i64 %1354, %1351
  %1357 = or i1 %1355, %1356
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1358, i8* %1359, align 1, !tbaa !2434
  %1360 = trunc i64 %1354 to i32
  %1361 = and i32 %1360, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #17
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2447
  %1367 = xor i64 %1351, %1350
  %1368 = xor i64 %1367, %1354
  %1369 = lshr i64 %1368, 4
  %1370 = trunc i64 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1371, i8* %1372, align 1, !tbaa !2448
  %1373 = icmp eq i64 %1354, 0
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1374, i8* %1375, align 1, !tbaa !2449
  %1376 = lshr i64 %1354, 63
  %1377 = trunc i64 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1377, i8* %1378, align 1, !tbaa !2450
  %1379 = lshr i64 %1350, 63
  %1380 = lshr i64 %1351, 63
  %1381 = xor i64 %1376, %1379
  %1382 = xor i64 %1376, %1380
  %1383 = add nuw nsw i64 %1381, %1382
  %1384 = icmp eq i64 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2451
  %1387 = load i64, i64* %RDI
  %1388 = load i32, i32* %EAX
  %1389 = zext i32 %1388 to i64
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 2
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1387 to i32*
  store i32 %1388, i32* %1392
  %1393 = load i64, i64* %RBP
  %1394 = sub i64 %1393, 32
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 3
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i32*
  %1398 = load i32, i32* %1397
  %1399 = zext i32 %1398 to i64
  store i64 %1399, i64* %RAX, align 8, !tbaa !2428
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 8
  store i64 %1401, i64* %PC
  %1402 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %1402, i64* %RDI, align 8, !tbaa !2428
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 4
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 4
  store i64 %1406, i64* %PC
  %1407 = inttoptr i64 %1404 to i32*
  %1408 = load i32, i32* %1407
  %1409 = sext i32 %1408 to i64
  store i64 %1409, i64* %R8, align 8, !tbaa !2428
  %1410 = load i64, i64* %R8
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 4
  store i64 %1412, i64* %PC
  %1413 = sext i64 %1410 to i128
  %1414 = and i128 %1413, -18446744073709551616
  %1415 = zext i64 %1410 to i128
  %1416 = or i128 %1414, %1415
  %1417 = mul nsw i128 12, %1416
  %1418 = trunc i128 %1417 to i64
  store i64 %1418, i64* %R8, align 8, !tbaa !2428
  %1419 = sext i64 %1418 to i128
  %1420 = icmp ne i128 %1419, %1417
  %1421 = zext i1 %1420 to i8
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1421, i8* %1422, align 1, !tbaa !2434
  %1423 = trunc i128 %1417 to i32
  %1424 = and i32 %1423, 255
  %1425 = call i32 @llvm.ctpop.i32(i32 %1424) #17
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = xor i8 %1427, 1
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1428, i8* %1429, align 1, !tbaa !2447
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1430, align 1, !tbaa !2448
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1431, align 1, !tbaa !2449
  %1432 = lshr i64 %1418, 63
  %1433 = trunc i64 %1432 to i8
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1433, i8* %1434, align 1, !tbaa !2450
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1421, i8* %1435, align 1, !tbaa !2451
  %1436 = load i64, i64* %RDI
  %1437 = load i64, i64* %R8
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 3
  store i64 %1439, i64* %PC
  %1440 = add i64 %1437, %1436
  store i64 %1440, i64* %RDI, align 8, !tbaa !2428
  %1441 = icmp ult i64 %1440, %1436
  %1442 = icmp ult i64 %1440, %1437
  %1443 = or i1 %1441, %1442
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1444, i8* %1445, align 1, !tbaa !2434
  %1446 = trunc i64 %1440 to i32
  %1447 = and i32 %1446, 255
  %1448 = call i32 @llvm.ctpop.i32(i32 %1447) #17
  %1449 = trunc i32 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = xor i8 %1450, 1
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1451, i8* %1452, align 1, !tbaa !2447
  %1453 = xor i64 %1437, %1436
  %1454 = xor i64 %1453, %1440
  %1455 = lshr i64 %1454, 4
  %1456 = trunc i64 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1457, i8* %1458, align 1, !tbaa !2448
  %1459 = icmp eq i64 %1440, 0
  %1460 = zext i1 %1459 to i8
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1460, i8* %1461, align 1, !tbaa !2449
  %1462 = lshr i64 %1440, 63
  %1463 = trunc i64 %1462 to i8
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1463, i8* %1464, align 1, !tbaa !2450
  %1465 = lshr i64 %1436, 63
  %1466 = lshr i64 %1437, 63
  %1467 = xor i64 %1462, %1465
  %1468 = xor i64 %1462, %1466
  %1469 = add nuw nsw i64 %1467, %1468
  %1470 = icmp eq i64 %1469, 2
  %1471 = zext i1 %1470 to i8
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1471, i8* %1472, align 1, !tbaa !2451
  %1473 = load i64, i64* %RDI
  %1474 = add i64 %1473, 4
  %1475 = load i32, i32* %EAX
  %1476 = zext i32 %1475 to i64
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 3
  store i64 %1478, i64* %PC
  %1479 = inttoptr i64 %1474 to i32*
  store i32 %1475, i32* %1479
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 12
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 3
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i32*
  %1485 = load i32, i32* %1484
  %1486 = zext i32 %1485 to i64
  store i64 %1486, i64* %RAX, align 8, !tbaa !2428
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 8
  store i64 %1488, i64* %PC
  %1489 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %1489, i64* %RDI, align 8, !tbaa !2428
  %1490 = load i64, i64* %RBP
  %1491 = sub i64 %1490, 4
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 4
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1491 to i32*
  %1495 = load i32, i32* %1494
  %1496 = sext i32 %1495 to i64
  store i64 %1496, i64* %R8, align 8, !tbaa !2428
  %1497 = load i64, i64* %R8
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 4
  store i64 %1499, i64* %PC
  %1500 = sext i64 %1497 to i128
  %1501 = and i128 %1500, -18446744073709551616
  %1502 = zext i64 %1497 to i128
  %1503 = or i128 %1501, %1502
  %1504 = mul nsw i128 12, %1503
  %1505 = trunc i128 %1504 to i64
  store i64 %1505, i64* %R8, align 8, !tbaa !2428
  %1506 = sext i64 %1505 to i128
  %1507 = icmp ne i128 %1506, %1504
  %1508 = zext i1 %1507 to i8
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1508, i8* %1509, align 1, !tbaa !2434
  %1510 = trunc i128 %1504 to i32
  %1511 = and i32 %1510, 255
  %1512 = call i32 @llvm.ctpop.i32(i32 %1511) #17
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = xor i8 %1514, 1
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1515, i8* %1516, align 1, !tbaa !2447
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1517, align 1, !tbaa !2448
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1518, align 1, !tbaa !2449
  %1519 = lshr i64 %1505, 63
  %1520 = trunc i64 %1519 to i8
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1520, i8* %1521, align 1, !tbaa !2450
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1508, i8* %1522, align 1, !tbaa !2451
  %1523 = load i64, i64* %RDI
  %1524 = load i64, i64* %R8
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 3
  store i64 %1526, i64* %PC
  %1527 = add i64 %1524, %1523
  store i64 %1527, i64* %RDI, align 8, !tbaa !2428
  %1528 = icmp ult i64 %1527, %1523
  %1529 = icmp ult i64 %1527, %1524
  %1530 = or i1 %1528, %1529
  %1531 = zext i1 %1530 to i8
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1531, i8* %1532, align 1, !tbaa !2434
  %1533 = trunc i64 %1527 to i32
  %1534 = and i32 %1533, 255
  %1535 = call i32 @llvm.ctpop.i32(i32 %1534) #17
  %1536 = trunc i32 %1535 to i8
  %1537 = and i8 %1536, 1
  %1538 = xor i8 %1537, 1
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1538, i8* %1539, align 1, !tbaa !2447
  %1540 = xor i64 %1524, %1523
  %1541 = xor i64 %1540, %1527
  %1542 = lshr i64 %1541, 4
  %1543 = trunc i64 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1544, i8* %1545, align 1, !tbaa !2448
  %1546 = icmp eq i64 %1527, 0
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1547, i8* %1548, align 1, !tbaa !2449
  %1549 = lshr i64 %1527, 63
  %1550 = trunc i64 %1549 to i8
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1550, i8* %1551, align 1, !tbaa !2450
  %1552 = lshr i64 %1523, 63
  %1553 = lshr i64 %1524, 63
  %1554 = xor i64 %1549, %1552
  %1555 = xor i64 %1549, %1553
  %1556 = add nuw nsw i64 %1554, %1555
  %1557 = icmp eq i64 %1556, 2
  %1558 = zext i1 %1557 to i8
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1558, i8* %1559, align 1, !tbaa !2451
  %1560 = load i64, i64* %RDI
  %1561 = add i64 %1560, 8
  %1562 = load i32, i32* %EAX
  %1563 = zext i32 %1562 to i64
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 3
  store i64 %1565, i64* %PC
  %1566 = inttoptr i64 %1561 to i32*
  store i32 %1562, i32* %1566
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 8
  store i64 %1568, i64* %PC
  %1569 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %1569, i64* %RDI, align 8, !tbaa !2428
  %1570 = load i64, i64* %RBP
  %1571 = sub i64 %1570, 4
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 4
  store i64 %1573, i64* %PC
  %1574 = inttoptr i64 %1571 to i32*
  %1575 = load i32, i32* %1574
  %1576 = sext i32 %1575 to i64
  store i64 %1576, i64* %R8, align 8, !tbaa !2428
  %1577 = load i64, i64* %R8
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 4
  store i64 %1579, i64* %PC
  %1580 = sext i64 %1577 to i128
  %1581 = and i128 %1580, -18446744073709551616
  %1582 = zext i64 %1577 to i128
  %1583 = or i128 %1581, %1582
  %1584 = mul nsw i128 12, %1583
  %1585 = trunc i128 %1584 to i64
  store i64 %1585, i64* %R8, align 8, !tbaa !2428
  %1586 = sext i64 %1585 to i128
  %1587 = icmp ne i128 %1586, %1584
  %1588 = zext i1 %1587 to i8
  %1589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1588, i8* %1589, align 1, !tbaa !2434
  %1590 = trunc i128 %1584 to i32
  %1591 = and i32 %1590, 255
  %1592 = call i32 @llvm.ctpop.i32(i32 %1591) #17
  %1593 = trunc i32 %1592 to i8
  %1594 = and i8 %1593, 1
  %1595 = xor i8 %1594, 1
  %1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1595, i8* %1596, align 1, !tbaa !2447
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1597, align 1, !tbaa !2448
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1598, align 1, !tbaa !2449
  %1599 = lshr i64 %1585, 63
  %1600 = trunc i64 %1599 to i8
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1600, i8* %1601, align 1, !tbaa !2450
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1588, i8* %1602, align 1, !tbaa !2451
  %1603 = load i64, i64* %RDI
  %1604 = load i64, i64* %R8
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 3
  store i64 %1606, i64* %PC
  %1607 = add i64 %1604, %1603
  store i64 %1607, i64* %RDI, align 8, !tbaa !2428
  %1608 = icmp ult i64 %1607, %1603
  %1609 = icmp ult i64 %1607, %1604
  %1610 = or i1 %1608, %1609
  %1611 = zext i1 %1610 to i8
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1611, i8* %1612, align 1, !tbaa !2434
  %1613 = trunc i64 %1607 to i32
  %1614 = and i32 %1613, 255
  %1615 = call i32 @llvm.ctpop.i32(i32 %1614) #17
  %1616 = trunc i32 %1615 to i8
  %1617 = and i8 %1616, 1
  %1618 = xor i8 %1617, 1
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1618, i8* %1619, align 1, !tbaa !2447
  %1620 = xor i64 %1604, %1603
  %1621 = xor i64 %1620, %1607
  %1622 = lshr i64 %1621, 4
  %1623 = trunc i64 %1622 to i8
  %1624 = and i8 %1623, 1
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1624, i8* %1625, align 1, !tbaa !2448
  %1626 = icmp eq i64 %1607, 0
  %1627 = zext i1 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1627, i8* %1628, align 1, !tbaa !2449
  %1629 = lshr i64 %1607, 63
  %1630 = trunc i64 %1629 to i8
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1630, i8* %1631, align 1, !tbaa !2450
  %1632 = lshr i64 %1603, 63
  %1633 = lshr i64 %1604, 63
  %1634 = xor i64 %1629, %1632
  %1635 = xor i64 %1629, %1633
  %1636 = add nuw nsw i64 %1634, %1635
  %1637 = icmp eq i64 %1636, 2
  %1638 = zext i1 %1637 to i8
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1638, i8* %1639, align 1, !tbaa !2451
  %1640 = load i64, i64* %PC
  %1641 = sub i64 %1640, 1468
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 5
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 5
  store i64 %1645, i64* %PC
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1647 = load i64, i64* %1646, align 8, !tbaa !2428
  %1648 = add i64 %1647, -8
  %1649 = inttoptr i64 %1648 to i64*
  store i64 %1643, i64* %1649
  store i64 %1648, i64* %1646, align 8, !tbaa !2428
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1641, i64* %1650, align 8, !tbaa !2428
  %1651 = load i64, i64* %PC
  %1652 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %1651, %struct.Memory* %MEMORY.6)
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 8
  store i64 %1654, i64* %PC
  %1655 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %1655, i64* %RDI, align 8, !tbaa !2428
  %1656 = load i64, i64* %PC
  %1657 = add i64 %1656, 7
  store i64 %1657, i64* %PC
  %1658 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %1659 = zext i32 %1658 to i64
  store i64 %1659, i64* %RDX, align 8, !tbaa !2428
  %1660 = load i64, i64* %RDX
  %1661 = load i64, i64* %RBP
  %1662 = sub i64 %1661, 4
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 3
  store i64 %1664, i64* %PC
  %1665 = trunc i64 %1660 to i32
  %1666 = inttoptr i64 %1662 to i32*
  %1667 = load i32, i32* %1666
  %1668 = add i32 %1667, %1665
  %1669 = zext i32 %1668 to i64
  store i64 %1669, i64* %RDX, align 8, !tbaa !2428
  %1670 = icmp ult i32 %1668, %1665
  %1671 = icmp ult i32 %1668, %1667
  %1672 = or i1 %1670, %1671
  %1673 = zext i1 %1672 to i8
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1673, i8* %1674, align 1, !tbaa !2434
  %1675 = and i32 %1668, 255
  %1676 = call i32 @llvm.ctpop.i32(i32 %1675) #17
  %1677 = trunc i32 %1676 to i8
  %1678 = and i8 %1677, 1
  %1679 = xor i8 %1678, 1
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1679, i8* %1680, align 1, !tbaa !2447
  %1681 = xor i32 %1667, %1665
  %1682 = xor i32 %1681, %1668
  %1683 = lshr i32 %1682, 4
  %1684 = trunc i32 %1683 to i8
  %1685 = and i8 %1684, 1
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1685, i8* %1686, align 1, !tbaa !2448
  %1687 = icmp eq i32 %1668, 0
  %1688 = zext i1 %1687 to i8
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1688, i8* %1689, align 1, !tbaa !2449
  %1690 = lshr i32 %1668, 31
  %1691 = trunc i32 %1690 to i8
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1691, i8* %1692, align 1, !tbaa !2450
  %1693 = lshr i32 %1665, 31
  %1694 = lshr i32 %1667, 31
  %1695 = xor i32 %1690, %1693
  %1696 = xor i32 %1690, %1694
  %1697 = add nuw nsw i32 %1695, %1696
  %1698 = icmp eq i32 %1697, 2
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1699, i8* %1700, align 1, !tbaa !2451
  %1701 = load i32, i32* %EDX
  %1702 = zext i32 %1701 to i64
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 3
  store i64 %1704, i64* %PC
  %1705 = shl i64 %1702, 32
  %1706 = ashr exact i64 %1705, 32
  store i64 %1706, i64* %R8, align 8, !tbaa !2428
  %1707 = load i64, i64* %RDI
  %1708 = load i64, i64* %R8
  %1709 = mul i64 %1708, 4
  %1710 = add i64 %1709, %1707
  %1711 = load i32, i32* %EAX
  %1712 = zext i32 %1711 to i64
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 4
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1710 to i32*
  store i32 %1711, i32* %1715
  %1716 = load i64, i64* %RBP
  %1717 = sub i64 %1716, 4
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 3
  store i64 %1719, i64* %PC
  %1720 = inttoptr i64 %1717 to i32*
  %1721 = load i32, i32* %1720
  %1722 = zext i32 %1721 to i64
  store i64 %1722, i64* %RAX, align 8, !tbaa !2428
  %1723 = load i64, i64* %RAX
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 3
  store i64 %1725, i64* %PC
  %1726 = trunc i64 %1723 to i32
  %1727 = add i32 1, %1726
  %1728 = zext i32 %1727 to i64
  store i64 %1728, i64* %RAX, align 8, !tbaa !2428
  %1729 = icmp ult i32 %1727, %1726
  %1730 = icmp ult i32 %1727, 1
  %1731 = or i1 %1729, %1730
  %1732 = zext i1 %1731 to i8
  %1733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1732, i8* %1733, align 1, !tbaa !2434
  %1734 = and i32 %1727, 255
  %1735 = call i32 @llvm.ctpop.i32(i32 %1734) #17
  %1736 = trunc i32 %1735 to i8
  %1737 = and i8 %1736, 1
  %1738 = xor i8 %1737, 1
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1738, i8* %1739, align 1, !tbaa !2447
  %1740 = xor i64 1, %1723
  %1741 = trunc i64 %1740 to i32
  %1742 = xor i32 %1741, %1727
  %1743 = lshr i32 %1742, 4
  %1744 = trunc i32 %1743 to i8
  %1745 = and i8 %1744, 1
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1745, i8* %1746, align 1, !tbaa !2448
  %1747 = icmp eq i32 %1727, 0
  %1748 = zext i1 %1747 to i8
  %1749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1748, i8* %1749, align 1, !tbaa !2449
  %1750 = lshr i32 %1727, 31
  %1751 = trunc i32 %1750 to i8
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1751, i8* %1752, align 1, !tbaa !2450
  %1753 = lshr i32 %1726, 31
  %1754 = xor i32 %1750, %1753
  %1755 = add nuw nsw i32 %1754, %1750
  %1756 = icmp eq i32 %1755, 2
  %1757 = zext i1 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1757, i8* %1758, align 1, !tbaa !2451
  %1759 = load i64, i64* %RBP
  %1760 = sub i64 %1759, 16
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 3
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1760 to i32*
  %1764 = load i32, i32* %1763
  %1765 = zext i32 %1764 to i64
  store i64 %1765, i64* %RSI, align 8, !tbaa !2428
  %1766 = load i32, i32* %EAX
  %1767 = zext i32 %1766 to i64
  %1768 = load i64, i64* %PC
  %1769 = add i64 %1768, 2
  store i64 %1769, i64* %PC
  %1770 = and i64 %1767, 4294967295
  store i64 %1770, i64* %RDI, align 8, !tbaa !2428
  %1771 = load i64, i64* %PC
  %1772 = sub i64 %1771, 741
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 5
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 5
  store i64 %1776, i64* %PC
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1778 = load i64, i64* %1777, align 8, !tbaa !2428
  %1779 = add i64 %1778, -8
  %1780 = inttoptr i64 %1779 to i64*
  store i64 %1774, i64* %1780
  store i64 %1779, i64* %1777, align 8, !tbaa !2428
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1772, i64* %1781, align 8, !tbaa !2428
  %1782 = load i64, i64* %PC
  %1783 = call %struct.Memory* @sub_400ca0_recSearch_renamed_(%struct.State* %0, i64 %1782, %struct.Memory* %1652)
  br label %block_400f8a

block_400d2e:                                     ; preds = %block_400ce2
  %1784 = load i64, i64* %PC
  %1785 = add i64 %1784, 8
  store i64 %1785, i64* %PC
  %1786 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %1786, i64* %RAX, align 8, !tbaa !2428
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 7
  store i64 %1788, i64* %PC
  %1789 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %1790 = zext i32 %1789 to i64
  store i64 %1790, i64* %RCX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RCX
  %1792 = load i64, i64* %RBP
  %1793 = sub i64 %1792, 4
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 3
  store i64 %1795, i64* %PC
  %1796 = trunc i64 %1791 to i32
  %1797 = inttoptr i64 %1793 to i32*
  %1798 = load i32, i32* %1797
  %1799 = add i32 %1798, %1796
  %1800 = zext i32 %1799 to i64
  store i64 %1800, i64* %RCX, align 8, !tbaa !2428
  %1801 = icmp ult i32 %1799, %1796
  %1802 = icmp ult i32 %1799, %1798
  %1803 = or i1 %1801, %1802
  %1804 = zext i1 %1803 to i8
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1804, i8* %1805, align 1, !tbaa !2434
  %1806 = and i32 %1799, 255
  %1807 = call i32 @llvm.ctpop.i32(i32 %1806) #17
  %1808 = trunc i32 %1807 to i8
  %1809 = and i8 %1808, 1
  %1810 = xor i8 %1809, 1
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1810, i8* %1811, align 1, !tbaa !2447
  %1812 = xor i32 %1798, %1796
  %1813 = xor i32 %1812, %1799
  %1814 = lshr i32 %1813, 4
  %1815 = trunc i32 %1814 to i8
  %1816 = and i8 %1815, 1
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1816, i8* %1817, align 1, !tbaa !2448
  %1818 = icmp eq i32 %1799, 0
  %1819 = zext i1 %1818 to i8
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1819, i8* %1820, align 1, !tbaa !2449
  %1821 = lshr i32 %1799, 31
  %1822 = trunc i32 %1821 to i8
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1822, i8* %1823, align 1, !tbaa !2450
  %1824 = lshr i32 %1796, 31
  %1825 = lshr i32 %1798, 31
  %1826 = xor i32 %1821, %1824
  %1827 = xor i32 %1821, %1825
  %1828 = add nuw nsw i32 %1826, %1827
  %1829 = icmp eq i32 %1828, 2
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1830, i8* %1831, align 1, !tbaa !2451
  %1832 = load i64, i64* %RCX
  %1833 = load i64, i64* %PC
  %1834 = add i64 %1833, 3
  store i64 %1834, i64* %PC
  %1835 = trunc i64 %1832 to i32
  %1836 = sub i32 %1835, 1
  %1837 = zext i32 %1836 to i64
  store i64 %1837, i64* %RCX, align 8, !tbaa !2428
  %1838 = icmp ult i32 %1835, 1
  %1839 = zext i1 %1838 to i8
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1839, i8* %1840, align 1, !tbaa !2434
  %1841 = and i32 %1836, 255
  %1842 = call i32 @llvm.ctpop.i32(i32 %1841) #17
  %1843 = trunc i32 %1842 to i8
  %1844 = and i8 %1843, 1
  %1845 = xor i8 %1844, 1
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1845, i8* %1846, align 1, !tbaa !2447
  %1847 = xor i64 1, %1832
  %1848 = trunc i64 %1847 to i32
  %1849 = xor i32 %1848, %1836
  %1850 = lshr i32 %1849, 4
  %1851 = trunc i32 %1850 to i8
  %1852 = and i8 %1851, 1
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1852, i8* %1853, align 1, !tbaa !2448
  %1854 = icmp eq i32 %1836, 0
  %1855 = zext i1 %1854 to i8
  %1856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1855, i8* %1856, align 1, !tbaa !2449
  %1857 = lshr i32 %1836, 31
  %1858 = trunc i32 %1857 to i8
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1858, i8* %1859, align 1, !tbaa !2450
  %1860 = lshr i32 %1835, 31
  %1861 = xor i32 %1857, %1860
  %1862 = add nuw nsw i32 %1861, %1860
  %1863 = icmp eq i32 %1862, 2
  %1864 = zext i1 %1863 to i8
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1864, i8* %1865, align 1, !tbaa !2451
  %1866 = load i32, i32* %ECX
  %1867 = zext i32 %1866 to i64
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 3
  store i64 %1869, i64* %PC
  %1870 = shl i64 %1867, 32
  %1871 = ashr exact i64 %1870, 32
  store i64 %1871, i64* %RDX, align 8, !tbaa !2428
  %1872 = load i64, i64* %RAX
  %1873 = load i64, i64* %RDX
  %1874 = mul i64 %1873, 4
  %1875 = add i64 %1874, %1872
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 3
  store i64 %1877, i64* %PC
  %1878 = inttoptr i64 %1875 to i32*
  %1879 = load i32, i32* %1878
  %1880 = zext i32 %1879 to i64
  store i64 %1880, i64* %RCX, align 8, !tbaa !2428
  %1881 = load i32, i32* %ECX
  %1882 = zext i32 %1881 to i64
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 7
  store i64 %1884, i64* %PC
  store i32 %1881, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 80) to i32*)
  %1885 = load i64, i64* %RBP
  %1886 = sub i64 %1885, 4
  %1887 = load i64, i64* %PC
  %1888 = add i64 %1887, 3
  store i64 %1888, i64* %PC
  %1889 = inttoptr i64 %1886 to i32*
  %1890 = load i32, i32* %1889
  %1891 = zext i32 %1890 to i64
  store i64 %1891, i64* %RCX, align 8, !tbaa !2428
  %1892 = load i32, i32* %ECX
  %1893 = zext i32 %1892 to i64
  %1894 = load i64, i64* %PC
  %1895 = add i64 %1894, 7
  store i64 %1895, i64* %PC
  store i32 %1892, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 84) to i32*)
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 8
  store i64 %1897, i64* %PC
  %1898 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 88) to i64*)
  store i64 %1898, i64* %RDI, align 8, !tbaa !2428
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 8
  store i64 %1900, i64* %PC
  %1901 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %1901, i64* %RSI, align 8, !tbaa !2428
  %1902 = load i64, i64* %RBP
  %1903 = sub i64 %1902, 4
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 3
  store i64 %1905, i64* %PC
  %1906 = inttoptr i64 %1903 to i32*
  %1907 = load i32, i32* %1906
  %1908 = zext i32 %1907 to i64
  store i64 %1908, i64* %RDX, align 8, !tbaa !2428
  %1909 = load i64, i64* %PC
  %1910 = sub i64 %1909, 1165
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 5
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 5
  store i64 %1914, i64* %PC
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1916 = load i64, i64* %1915, align 8, !tbaa !2428
  %1917 = add i64 %1916, -8
  %1918 = inttoptr i64 %1917 to i64*
  store i64 %1912, i64* %1918
  store i64 %1917, i64* %1915, align 8, !tbaa !2428
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1910, i64* %1919, align 8, !tbaa !2428
  %1920 = load i64, i64* %PC
  %1921 = call %struct.Memory* @sub_4008e0_saveSolution_renamed_(%struct.State* %0, i64 %1920, %struct.Memory* %521)
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 7
  store i64 %1923, i64* %PC
  %1924 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 80) to i32*)
  %1925 = zext i32 %1924 to i64
  store i64 %1925, i64* %RCX, align 8, !tbaa !2428
  %1926 = load i32, i32* %ECX
  %1927 = zext i32 %1926 to i64
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 7
  store i64 %1929, i64* %PC
  %1930 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %1931 = sub i32 %1926, %1930
  %1932 = icmp ult i32 %1926, %1930
  %1933 = zext i1 %1932 to i8
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1933, i8* %1934, align 1, !tbaa !2434
  %1935 = and i32 %1931, 255
  %1936 = call i32 @llvm.ctpop.i32(i32 %1935) #17
  %1937 = trunc i32 %1936 to i8
  %1938 = and i8 %1937, 1
  %1939 = xor i8 %1938, 1
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1939, i8* %1940, align 1, !tbaa !2447
  %1941 = xor i32 %1930, %1926
  %1942 = xor i32 %1941, %1931
  %1943 = lshr i32 %1942, 4
  %1944 = trunc i32 %1943 to i8
  %1945 = and i8 %1944, 1
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1945, i8* %1946, align 1, !tbaa !2448
  %1947 = icmp eq i32 %1931, 0
  %1948 = zext i1 %1947 to i8
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1948, i8* %1949, align 1, !tbaa !2449
  %1950 = lshr i32 %1931, 31
  %1951 = trunc i32 %1950 to i8
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1951, i8* %1952, align 1, !tbaa !2450
  %1953 = lshr i32 %1926, 31
  %1954 = lshr i32 %1930, 31
  %1955 = xor i32 %1954, %1953
  %1956 = xor i32 %1950, %1953
  %1957 = add nuw nsw i32 %1956, %1955
  %1958 = icmp eq i32 %1957, 2
  %1959 = zext i1 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1959, i8* %1960, align 1, !tbaa !2451
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 33
  %1963 = load i64, i64* %PC
  %1964 = add i64 %1963, 6
  %1965 = load i64, i64* %PC
  %1966 = add i64 %1965, 6
  store i64 %1966, i64* %PC
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1968 = load i8, i8* %1967, align 1, !tbaa !2449
  %1969 = icmp eq i8 %1968, 0
  %1970 = zext i1 %1969 to i8
  store i8 %1970, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1972 = select i1 %1969, i64 %1962, i64 %1964
  store i64 %1972, i64* %1971, align 8, !tbaa !2428
  %1973 = load i8, i8* %BRANCH_TAKEN
  %1974 = icmp eq i8 %1973, 1
  br i1 %1974, label %block_400da1, label %block_400d86

block_400fab:                                     ; preds = %block_400dc3
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 5
  store i64 %1976, i64* %PC
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2547, i64* %1977, align 8, !tbaa !2428
  %1978 = load i64, i64* %RBP
  %1979 = sub i64 %1978, 12
  %1980 = load i64, i64* %PC
  %1981 = add i64 %1980, 3
  store i64 %1981, i64* %PC
  %1982 = inttoptr i64 %1979 to i32*
  %1983 = load i32, i32* %1982
  %1984 = zext i32 %1983 to i64
  store i64 %1984, i64* %RAX, align 8, !tbaa !2428
  %1985 = load i64, i64* %RAX
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 3
  store i64 %1987, i64* %PC
  %1988 = trunc i64 %1985 to i32
  %1989 = add i32 1, %1988
  %1990 = zext i32 %1989 to i64
  store i64 %1990, i64* %RAX, align 8, !tbaa !2428
  %1991 = icmp ult i32 %1989, %1988
  %1992 = icmp ult i32 %1989, 1
  %1993 = or i1 %1991, %1992
  %1994 = zext i1 %1993 to i8
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1994, i8* %1995, align 1, !tbaa !2434
  %1996 = and i32 %1989, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #17
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2447
  %2002 = xor i64 1, %1985
  %2003 = trunc i64 %2002 to i32
  %2004 = xor i32 %2003, %1989
  %2005 = lshr i32 %2004, 4
  %2006 = trunc i32 %2005 to i8
  %2007 = and i8 %2006, 1
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2007, i8* %2008, align 1, !tbaa !2448
  %2009 = icmp eq i32 %1989, 0
  %2010 = zext i1 %2009 to i8
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2010, i8* %2011, align 1, !tbaa !2449
  %2012 = lshr i32 %1989, 31
  %2013 = trunc i32 %2012 to i8
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2013, i8* %2014, align 1, !tbaa !2450
  %2015 = lshr i32 %1988, 31
  %2016 = xor i32 %2012, %2015
  %2017 = add nuw nsw i32 %2016, %2012
  %2018 = icmp eq i32 %2017, 2
  %2019 = zext i1 %2018 to i8
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2019, i8* %2020, align 1, !tbaa !2451
  %2021 = load i64, i64* %RBP
  %2022 = sub i64 %2021, 12
  %2023 = load i32, i32* %EAX
  %2024 = zext i32 %2023 to i64
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 3
  store i64 %2026, i64* %PC
  %2027 = inttoptr i64 %2022 to i32*
  store i32 %2023, i32* %2027
  %2028 = load i64, i64* %PC
  %2029 = sub i64 %2028, 519
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 5
  store i64 %2031, i64* %PC
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2029, i64* %2032, align 8, !tbaa !2428
  br label %block_400db2

block_400eaa:                                     ; preds = %block_400e8b, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.11, %block_400e8b ], [ %2296, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ]
  %2033 = load i64, i64* %RBP
  %2034 = sub i64 %2033, 12
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 4
  store i64 %2036, i64* %PC
  %2037 = inttoptr i64 %2034 to i32*
  %2038 = load i32, i32* %2037
  %2039 = sub i32 %2038, 4
  %2040 = icmp ult i32 %2038, 4
  %2041 = zext i1 %2040 to i8
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2041, i8* %2042, align 1, !tbaa !2434
  %2043 = and i32 %2039, 255
  %2044 = call i32 @llvm.ctpop.i32(i32 %2043) #17
  %2045 = trunc i32 %2044 to i8
  %2046 = and i8 %2045, 1
  %2047 = xor i8 %2046, 1
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2047, i8* %2048, align 1, !tbaa !2447
  %2049 = xor i32 %2038, 4
  %2050 = xor i32 %2049, %2039
  %2051 = lshr i32 %2050, 4
  %2052 = trunc i32 %2051 to i8
  %2053 = and i8 %2052, 1
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2053, i8* %2054, align 1, !tbaa !2448
  %2055 = icmp eq i32 %2039, 0
  %2056 = zext i1 %2055 to i8
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2056, i8* %2057, align 1, !tbaa !2449
  %2058 = lshr i32 %2039, 31
  %2059 = trunc i32 %2058 to i8
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2059, i8* %2060, align 1, !tbaa !2450
  %2061 = lshr i32 %2038, 31
  %2062 = xor i32 %2058, %2061
  %2063 = add nuw nsw i32 %2062, %2061
  %2064 = icmp eq i32 %2063, 2
  %2065 = zext i1 %2064 to i8
  %2066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2065, i8* %2066, align 1, !tbaa !2451
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 16
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 6
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 6
  store i64 %2072, i64* %PC
  %2073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2074 = load i8, i8* %2073, align 1, !tbaa !2449
  store i8 %2074, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2076 = icmp ne i8 %2074, 0
  %2077 = select i1 %2076, i64 %2068, i64 %2070
  store i64 %2077, i64* %2075, align 8, !tbaa !2428
  %2078 = load i8, i8* %BRANCH_TAKEN
  %2079 = icmp eq i8 %2078, 1
  br i1 %2079, label %block_400ebe, label %block_400eb4

block_400da6:                                     ; preds = %block_400da1, %block_400ce2
  %MEMORY.8 = phi %struct.Memory* [ %521, %block_400ce2 ], [ %MEMORY.9, %block_400da1 ]
  %2080 = load i64, i64* %PC
  %2081 = add i64 %2080, 541
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 5
  store i64 %2083, i64* %PC
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2081, i64* %2084, align 8, !tbaa !2428
  br label %block_400fc3

block_400da1:                                     ; preds = %block_400d86, %block_400d2e
  %MEMORY.9 = phi %struct.Memory* [ %1921, %block_400d2e ], [ %2618, %block_400d86 ]
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 5
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 5
  store i64 %2088, i64* %PC
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2086, i64* %2089, align 8, !tbaa !2428
  br label %block_400da6

block_400f9d:                                     ; preds = %block_400dee, %block_400f98
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.0, %block_400f98 ], [ %MEMORY.13, %block_400dee ]
  %2090 = load i64, i64* %RBP
  %2091 = sub i64 %2090, 20
  %2092 = load i64, i64* %PC
  %2093 = add i64 %2092, 3
  store i64 %2093, i64* %PC
  %2094 = inttoptr i64 %2091 to i32*
  %2095 = load i32, i32* %2094
  %2096 = zext i32 %2095 to i64
  store i64 %2096, i64* %RAX, align 8, !tbaa !2428
  %2097 = load i64, i64* %RAX
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 3
  store i64 %2099, i64* %PC
  %2100 = trunc i64 %2097 to i32
  %2101 = add i32 1, %2100
  %2102 = zext i32 %2101 to i64
  store i64 %2102, i64* %RAX, align 8, !tbaa !2428
  %2103 = icmp ult i32 %2101, %2100
  %2104 = icmp ult i32 %2101, 1
  %2105 = or i1 %2103, %2104
  %2106 = zext i1 %2105 to i8
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2106, i8* %2107, align 1, !tbaa !2434
  %2108 = and i32 %2101, 255
  %2109 = call i32 @llvm.ctpop.i32(i32 %2108) #17
  %2110 = trunc i32 %2109 to i8
  %2111 = and i8 %2110, 1
  %2112 = xor i8 %2111, 1
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2112, i8* %2113, align 1, !tbaa !2447
  %2114 = xor i64 1, %2097
  %2115 = trunc i64 %2114 to i32
  %2116 = xor i32 %2115, %2101
  %2117 = lshr i32 %2116, 4
  %2118 = trunc i32 %2117 to i8
  %2119 = and i8 %2118, 1
  %2120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2119, i8* %2120, align 1, !tbaa !2448
  %2121 = icmp eq i32 %2101, 0
  %2122 = zext i1 %2121 to i8
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2122, i8* %2123, align 1, !tbaa !2449
  %2124 = lshr i32 %2101, 31
  %2125 = trunc i32 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2125, i8* %2126, align 1, !tbaa !2450
  %2127 = lshr i32 %2100, 31
  %2128 = xor i32 %2124, %2127
  %2129 = add nuw nsw i32 %2128, %2124
  %2130 = icmp eq i32 %2129, 2
  %2131 = zext i1 %2130 to i8
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2131, i8* %2132, align 1, !tbaa !2451
  %2133 = load i64, i64* %RBP
  %2134 = sub i64 %2133, 20
  %2135 = load i32, i32* %EAX
  %2136 = zext i32 %2135 to i64
  %2137 = load i64, i64* %PC
  %2138 = add i64 %2137, 3
  store i64 %2138, i64* %PC
  %2139 = inttoptr i64 %2134 to i32*
  store i32 %2135, i32* %2139
  %2140 = load i64, i64* %PC
  %2141 = sub i64 %2140, 483
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 5
  store i64 %2143, i64* %PC
  %2144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2141, i64* %2144, align 8, !tbaa !2428
  br label %block_400dc3

block_400e72:                                     ; preds = %block_400e4f, %block_400e63
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.2, %block_400e63 ], [ %MEMORY.0, %block_400e4f ]
  %2145 = load i64, i64* %RBP
  %2146 = sub i64 %2145, 28
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 4
  store i64 %2148, i64* %PC
  %2149 = inttoptr i64 %2146 to i32*
  %2150 = load i32, i32* %2149
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2151, align 1, !tbaa !2434
  %2152 = and i32 %2150, 255
  %2153 = call i32 @llvm.ctpop.i32(i32 %2152) #17
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2156, i8* %2157, align 1, !tbaa !2447
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2158, align 1, !tbaa !2448
  %2159 = icmp eq i32 %2150, 0
  %2160 = zext i1 %2159 to i8
  %2161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2160, i8* %2161, align 1, !tbaa !2449
  %2162 = lshr i32 %2150, 31
  %2163 = trunc i32 %2162 to i8
  %2164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2163, i8* %2164, align 1, !tbaa !2450
  %2165 = lshr i32 %2150, 31
  %2166 = xor i32 %2162, %2165
  %2167 = add nuw nsw i32 %2166, %2165
  %2168 = icmp eq i32 %2167, 2
  %2169 = zext i1 %2168 to i8
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2169, i8* %2170, align 1, !tbaa !2451
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 16
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 6
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 6
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2178 = load i8, i8* %2177, align 1, !tbaa !2449
  store i8 %2178, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2180 = icmp ne i8 %2178, 0
  %2181 = select i1 %2180, i64 %2172, i64 %2174
  store i64 %2181, i64* %2179, align 8, !tbaa !2428
  %2182 = load i8, i8* %BRANCH_TAKEN
  %2183 = icmp eq i8 %2182, 1
  br i1 %2183, label %block_400e86, label %block_400e7c

block_400e1c:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
  %2184 = add i64 %2788, 366
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 5
  store i64 %2186, i64* %PC
  %2187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2184, i64* %2187, align 8, !tbaa !2428
  br label %block_400f8a

block_400fc3:                                     ; preds = %block_400cbc, %block_400da6, %block_400fbe
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.4, %block_400fbe ], [ %MEMORY.8, %block_400da6 ], [ %2, %block_400cbc ]
  %2188 = load i64, i64* %RSP
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 4
  store i64 %2190, i64* %PC
  %2191 = add i64 48, %2188
  store i64 %2191, i64* %RSP, align 8, !tbaa !2428
  %2192 = icmp ult i64 %2191, %2188
  %2193 = icmp ult i64 %2191, 48
  %2194 = or i1 %2192, %2193
  %2195 = zext i1 %2194 to i8
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2195, i8* %2196, align 1, !tbaa !2434
  %2197 = trunc i64 %2191 to i32
  %2198 = and i32 %2197, 255
  %2199 = call i32 @llvm.ctpop.i32(i32 %2198) #17
  %2200 = trunc i32 %2199 to i8
  %2201 = and i8 %2200, 1
  %2202 = xor i8 %2201, 1
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2202, i8* %2203, align 1, !tbaa !2447
  %2204 = xor i64 48, %2188
  %2205 = xor i64 %2204, %2191
  %2206 = lshr i64 %2205, 4
  %2207 = trunc i64 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2208, i8* %2209, align 1, !tbaa !2448
  %2210 = icmp eq i64 %2191, 0
  %2211 = zext i1 %2210 to i8
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2211, i8* %2212, align 1, !tbaa !2449
  %2213 = lshr i64 %2191, 63
  %2214 = trunc i64 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2214, i8* %2215, align 1, !tbaa !2450
  %2216 = lshr i64 %2188, 63
  %2217 = xor i64 %2213, %2216
  %2218 = add nuw nsw i64 %2217, %2213
  %2219 = icmp eq i64 %2218, 2
  %2220 = zext i1 %2219 to i8
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2220, i8* %2221, align 1, !tbaa !2451
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 1
  store i64 %2223, i64* %PC
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2225 = load i64, i64* %2224, align 8, !tbaa !2428
  %2226 = add i64 %2225, 8
  %2227 = inttoptr i64 %2225 to i64*
  %2228 = load i64, i64* %2227
  store i64 %2228, i64* %RBP, align 8, !tbaa !2428
  store i64 %2226, i64* %2224, align 8, !tbaa !2428
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 1
  store i64 %2230, i64* %PC
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2233 = load i64, i64* %2232, align 8, !tbaa !2428
  %2234 = inttoptr i64 %2233 to i64*
  %2235 = load i64, i64* %2234
  store i64 %2235, i64* %2231, align 8, !tbaa !2428
  %2236 = add i64 %2233, 8
  store i64 %2236, i64* %2232, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.12

block_400f98:                                     ; preds = %block_400dfa
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 5
  store i64 %2238, i64* %PC
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %247, i64* %2239, align 8, !tbaa !2428
  br label %block_400f9d

block_400cbc:                                     ; preds = %block_400ca0
  %2240 = add i64 %141, 775
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 5
  store i64 %2242, i64* %PC
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2240, i64* %2243, align 8, !tbaa !2428
  br label %block_400fc3

block_400e95:                                     ; preds = %block_400e8b
  %2244 = load i64, i64* %RBP
  %2245 = sub i64 %2244, 28
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 3
  store i64 %2247, i64* %PC
  %2248 = inttoptr i64 %2245 to i32*
  %2249 = load i32, i32* %2248
  %2250 = zext i32 %2249 to i64
  store i64 %2250, i64* %RAX, align 8, !tbaa !2428
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 1
  store i64 %2252, i64* %PC
  %2253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2255 = bitcast %union.anon* %2254 to i32*
  %2256 = load i32, i32* %2255, align 8, !tbaa !2432
  %2257 = sext i32 %2256 to i64
  %2258 = lshr i64 %2257, 32
  store i64 %2258, i64* %2253, align 8, !tbaa !2428
  %2259 = load i64, i64* %RBP
  %2260 = sub i64 %2259, 32
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 3
  store i64 %2262, i64* %PC
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %2264 = bitcast %union.anon* %2263 to i32*
  %2265 = load i32, i32* %2264, align 8, !tbaa !2432
  %2266 = zext i32 %2265 to i64
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %2268 = bitcast %union.anon* %2267 to i32*
  %2269 = load i32, i32* %2268, align 8, !tbaa !2432
  %2270 = zext i32 %2269 to i64
  %2271 = inttoptr i64 %2260 to i32*
  %2272 = load i32, i32* %2271
  %2273 = sext i32 %2272 to i64
  %2274 = shl nuw i64 %2270, 32
  %2275 = or i64 %2274, %2266
  %2276 = sdiv i64 %2275, %2273
  %2277 = shl i64 %2276, 32
  %2278 = ashr exact i64 %2277, 32
  %2279 = icmp eq i64 %2276, %2278
  br i1 %2279, label %2284, label %2280

; <label>:2280:                                   ; preds = %block_400e95
  %2281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2282 = load i64, i64* %2281, align 8, !tbaa !2428
  %2283 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2282, %struct.Memory* %MEMORY.11) #16
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:2284:                                   ; preds = %block_400e95
  %2285 = srem i64 %2275, %2273
  %2286 = getelementptr inbounds %union.anon, %union.anon* %2263, i64 0, i32 0
  %2287 = and i64 %2276, 4294967295
  store i64 %2287, i64* %2286, align 8, !tbaa !2428
  %2288 = getelementptr inbounds %union.anon, %union.anon* %2267, i64 0, i32 0
  %2289 = and i64 %2285, 4294967295
  store i64 %2289, i64* %2288, align 8, !tbaa !2428
  %2290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2290, align 1, !tbaa !2434
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2291, align 1, !tbaa !2447
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2292, align 1, !tbaa !2448
  %2293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2293, align 1, !tbaa !2449
  %2294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2294, align 1, !tbaa !2450
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2295, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %2280, %2284
  %2296 = phi %struct.Memory* [ %2283, %2280 ], [ %MEMORY.11, %2284 ]
  %2297 = load i32, i32* %EDX
  %2298 = zext i32 %2297 to i64
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 3
  store i64 %2300, i64* %PC
  %2301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2301, align 1, !tbaa !2434
  %2302 = and i32 %2297, 255
  %2303 = call i32 @llvm.ctpop.i32(i32 %2302) #17
  %2304 = trunc i32 %2303 to i8
  %2305 = and i8 %2304, 1
  %2306 = xor i8 %2305, 1
  %2307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2306, i8* %2307, align 1, !tbaa !2447
  %2308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2308, align 1, !tbaa !2448
  %2309 = icmp eq i32 %2297, 0
  %2310 = zext i1 %2309 to i8
  %2311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2310, i8* %2311, align 1, !tbaa !2449
  %2312 = lshr i32 %2297, 31
  %2313 = trunc i32 %2312 to i8
  %2314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2313, i8* %2314, align 1, !tbaa !2450
  %2315 = lshr i32 %2297, 31
  %2316 = xor i32 %2312, %2315
  %2317 = add nuw nsw i32 %2316, %2315
  %2318 = icmp eq i32 %2317, 2
  %2319 = zext i1 %2318 to i8
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2319, i8* %2320, align 1, !tbaa !2451
  %2321 = load i64, i64* %PC
  %2322 = add i64 %2321, 11
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 6
  %2325 = load i64, i64* %PC
  %2326 = add i64 %2325, 6
  store i64 %2326, i64* %PC
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2328 = load i8, i8* %2327, align 1, !tbaa !2449
  store i8 %2328, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2330 = icmp ne i8 %2328, 0
  %2331 = select i1 %2330, i64 %2322, i64 %2324
  store i64 %2331, i64* %2329, align 8, !tbaa !2428
  %2332 = load i8, i8* %BRANCH_TAKEN
  %2333 = icmp eq i8 %2332, 1
  br i1 %2333, label %block_400eaa, label %block_400ea5

block_400dee:                                     ; preds = %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit3
  %2334 = load i64, i64* %PC
  %2335 = add i64 %2334, 431
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 5
  store i64 %2337, i64* %PC
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2335, i64* %2338, align 8, !tbaa !2428
  br label %block_400f9d

block_400cc1:                                     ; preds = %block_400ca0
  %2339 = add i64 %141, 7
  store i64 %2339, i64* %PC
  %2340 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 52) to i32*)
  %2341 = zext i32 %2340 to i64
  store i64 %2341, i64* %RAX, align 8, !tbaa !2428
  %2342 = load i64, i64* %RAX
  %2343 = load i64, i64* %PC
  %2344 = add i64 %2343, 3
  store i64 %2344, i64* %PC
  %2345 = trunc i64 %2342 to i32
  %2346 = add i32 1, %2345
  %2347 = zext i32 %2346 to i64
  store i64 %2347, i64* %RAX, align 8, !tbaa !2428
  %2348 = icmp ult i32 %2346, %2345
  %2349 = icmp ult i32 %2346, 1
  %2350 = or i1 %2348, %2349
  %2351 = zext i1 %2350 to i8
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2351, i8* %2352, align 1, !tbaa !2434
  %2353 = and i32 %2346, 255
  %2354 = call i32 @llvm.ctpop.i32(i32 %2353) #17
  %2355 = trunc i32 %2354 to i8
  %2356 = and i8 %2355, 1
  %2357 = xor i8 %2356, 1
  %2358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2357, i8* %2358, align 1, !tbaa !2447
  %2359 = xor i64 1, %2342
  %2360 = trunc i64 %2359 to i32
  %2361 = xor i32 %2360, %2346
  %2362 = lshr i32 %2361, 4
  %2363 = trunc i32 %2362 to i8
  %2364 = and i8 %2363, 1
  %2365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2364, i8* %2365, align 1, !tbaa !2448
  %2366 = icmp eq i32 %2346, 0
  %2367 = zext i1 %2366 to i8
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2367, i8* %2368, align 1, !tbaa !2449
  %2369 = lshr i32 %2346, 31
  %2370 = trunc i32 %2369 to i8
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2370, i8* %2371, align 1, !tbaa !2450
  %2372 = lshr i32 %2345, 31
  %2373 = xor i32 %2369, %2372
  %2374 = add nuw nsw i32 %2373, %2369
  %2375 = icmp eq i32 %2374, 2
  %2376 = zext i1 %2375 to i8
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2376, i8* %2377, align 1, !tbaa !2451
  %2378 = load i32, i32* %EAX
  %2379 = zext i32 %2378 to i64
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 7
  store i64 %2381, i64* %PC
  store i32 %2378, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 52) to i32*)
  %2382 = load i64, i64* %RBP
  %2383 = sub i64 %2382, 4
  %2384 = load i64, i64* %PC
  %2385 = add i64 %2384, 3
  store i64 %2385, i64* %PC
  %2386 = inttoptr i64 %2383 to i32*
  %2387 = load i32, i32* %2386
  %2388 = zext i32 %2387 to i64
  store i64 %2388, i64* %RAX, align 8, !tbaa !2428
  %2389 = load i32, i32* %EAX
  %2390 = zext i32 %2389 to i64
  %2391 = load i64, i64* %PC
  %2392 = add i64 %2391, 7
  store i64 %2392, i64* %PC
  %2393 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 56) to i32*)
  %2394 = sub i32 %2389, %2393
  %2395 = icmp ult i32 %2389, %2393
  %2396 = zext i1 %2395 to i8
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2396, i8* %2397, align 1, !tbaa !2434
  %2398 = and i32 %2394, 255
  %2399 = call i32 @llvm.ctpop.i32(i32 %2398) #17
  %2400 = trunc i32 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = xor i8 %2401, 1
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2402, i8* %2403, align 1, !tbaa !2447
  %2404 = xor i32 %2393, %2389
  %2405 = xor i32 %2404, %2394
  %2406 = lshr i32 %2405, 4
  %2407 = trunc i32 %2406 to i8
  %2408 = and i8 %2407, 1
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2408, i8* %2409, align 1, !tbaa !2448
  %2410 = icmp eq i32 %2394, 0
  %2411 = zext i1 %2410 to i8
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2411, i8* %2412, align 1, !tbaa !2449
  %2413 = lshr i32 %2394, 31
  %2414 = trunc i32 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2414, i8* %2415, align 1, !tbaa !2450
  %2416 = lshr i32 %2389, 31
  %2417 = lshr i32 %2393, 31
  %2418 = xor i32 %2417, %2416
  %2419 = xor i32 %2413, %2416
  %2420 = add nuw nsw i32 %2419, %2418
  %2421 = icmp eq i32 %2420, 2
  %2422 = zext i1 %2421 to i8
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2422, i8* %2423, align 1, !tbaa !2451
  %2424 = load i64, i64* %PC
  %2425 = add i64 %2424, 207
  %2426 = load i64, i64* %PC
  %2427 = add i64 %2426, 6
  %2428 = load i64, i64* %PC
  %2429 = add i64 %2428, 6
  store i64 %2429, i64* %PC
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2431 = load i8, i8* %2430, align 1, !tbaa !2449
  %2432 = icmp eq i8 %2431, 0
  %2433 = zext i1 %2432 to i8
  store i8 %2433, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2435 = select i1 %2432, i64 %2425, i64 %2427
  store i64 %2435, i64* %2434, align 8, !tbaa !2428
  %2436 = load i8, i8* %BRANCH_TAKEN
  %2437 = icmp eq i8 %2436, 1
  br i1 %2437, label %block_400dab, label %block_400ce2

block_400dc3:                                     ; preds = %block_400f9d, %block_400dbc
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.4, %block_400dbc ], [ %MEMORY.10, %block_400f9d ]
  %2438 = load i64, i64* %RBP
  %2439 = sub i64 %2438, 20
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 3
  store i64 %2441, i64* %PC
  %2442 = inttoptr i64 %2439 to i32*
  %2443 = load i32, i32* %2442
  %2444 = zext i32 %2443 to i64
  store i64 %2444, i64* %RAX, align 8, !tbaa !2428
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 7
  store i64 %2446, i64* %PC
  %2447 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %2448 = zext i32 %2447 to i64
  store i64 %2448, i64* %RCX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RCX
  %2450 = load i64, i64* %RBP
  %2451 = sub i64 %2450, 4
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 3
  store i64 %2453, i64* %PC
  %2454 = trunc i64 %2449 to i32
  %2455 = inttoptr i64 %2451 to i32*
  %2456 = load i32, i32* %2455
  %2457 = add i32 %2456, %2454
  %2458 = zext i32 %2457 to i64
  store i64 %2458, i64* %RCX, align 8, !tbaa !2428
  %2459 = icmp ult i32 %2457, %2454
  %2460 = icmp ult i32 %2457, %2456
  %2461 = or i1 %2459, %2460
  %2462 = zext i1 %2461 to i8
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2462, i8* %2463, align 1, !tbaa !2434
  %2464 = and i32 %2457, 255
  %2465 = call i32 @llvm.ctpop.i32(i32 %2464) #17
  %2466 = trunc i32 %2465 to i8
  %2467 = and i8 %2466, 1
  %2468 = xor i8 %2467, 1
  %2469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2468, i8* %2469, align 1, !tbaa !2447
  %2470 = xor i32 %2456, %2454
  %2471 = xor i32 %2470, %2457
  %2472 = lshr i32 %2471, 4
  %2473 = trunc i32 %2472 to i8
  %2474 = and i8 %2473, 1
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2474, i8* %2475, align 1, !tbaa !2448
  %2476 = icmp eq i32 %2457, 0
  %2477 = zext i1 %2476 to i8
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2477, i8* %2478, align 1, !tbaa !2449
  %2479 = lshr i32 %2457, 31
  %2480 = trunc i32 %2479 to i8
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2480, i8* %2481, align 1, !tbaa !2450
  %2482 = lshr i32 %2454, 31
  %2483 = lshr i32 %2456, 31
  %2484 = xor i32 %2479, %2482
  %2485 = xor i32 %2479, %2483
  %2486 = add nuw nsw i32 %2484, %2485
  %2487 = icmp eq i32 %2486, 2
  %2488 = zext i1 %2487 to i8
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2488, i8* %2489, align 1, !tbaa !2451
  %2490 = load i32, i32* %EAX
  %2491 = zext i32 %2490 to i64
  %2492 = load i32, i32* %ECX
  %2493 = zext i32 %2492 to i64
  %2494 = load i64, i64* %PC
  %2495 = add i64 %2494, 2
  store i64 %2495, i64* %PC
  %2496 = sub i32 %2490, %2492
  %2497 = icmp ult i32 %2490, %2492
  %2498 = zext i1 %2497 to i8
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2498, i8* %2499, align 1, !tbaa !2434
  %2500 = and i32 %2496, 255
  %2501 = call i32 @llvm.ctpop.i32(i32 %2500) #17
  %2502 = trunc i32 %2501 to i8
  %2503 = and i8 %2502, 1
  %2504 = xor i8 %2503, 1
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2504, i8* %2505, align 1, !tbaa !2447
  %2506 = xor i64 %2493, %2491
  %2507 = trunc i64 %2506 to i32
  %2508 = xor i32 %2507, %2496
  %2509 = lshr i32 %2508, 4
  %2510 = trunc i32 %2509 to i8
  %2511 = and i8 %2510, 1
  %2512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2511, i8* %2512, align 1, !tbaa !2448
  %2513 = icmp eq i32 %2496, 0
  %2514 = zext i1 %2513 to i8
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2514, i8* %2515, align 1, !tbaa !2449
  %2516 = lshr i32 %2496, 31
  %2517 = trunc i32 %2516 to i8
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2517, i8* %2518, align 1, !tbaa !2450
  %2519 = lshr i32 %2490, 31
  %2520 = lshr i32 %2492, 31
  %2521 = xor i32 %2520, %2519
  %2522 = xor i32 %2516, %2519
  %2523 = add nuw nsw i32 %2522, %2521
  %2524 = icmp eq i32 %2523, 2
  %2525 = zext i1 %2524 to i8
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2525, i8* %2526, align 1, !tbaa !2451
  %2527 = load i64, i64* %PC
  %2528 = add i64 %2527, 473
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 6
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 6
  store i64 %2532, i64* %PC
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2534 = load i8, i8* %2533, align 1, !tbaa !2450
  %2535 = icmp ne i8 %2534, 0
  %2536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2537 = load i8, i8* %2536, align 1, !tbaa !2451
  %2538 = icmp ne i8 %2537, 0
  %2539 = xor i1 %2535, %2538
  %2540 = xor i1 %2539, true
  %2541 = zext i1 %2540 to i8
  store i8 %2541, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2543 = select i1 %2539, i64 %2530, i64 %2528
  store i64 %2543, i64* %2542, align 8, !tbaa !2428
  %2544 = load i8, i8* %BRANCH_TAKEN
  %2545 = icmp eq i8 %2544, 1
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 5
  br i1 %2545, label %block_400fab, label %block_400dd8

block_400e8b:                                     ; preds = %block_400e7c
  %2548 = load i64, i64* %RBP
  %2549 = sub i64 %2548, 12
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 4
  store i64 %2551, i64* %PC
  %2552 = inttoptr i64 %2549 to i32*
  %2553 = load i32, i32* %2552
  %2554 = sub i32 %2553, 4
  %2555 = icmp ult i32 %2553, 4
  %2556 = zext i1 %2555 to i8
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2556, i8* %2557, align 1, !tbaa !2434
  %2558 = and i32 %2554, 255
  %2559 = call i32 @llvm.ctpop.i32(i32 %2558) #17
  %2560 = trunc i32 %2559 to i8
  %2561 = and i8 %2560, 1
  %2562 = xor i8 %2561, 1
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2562, i8* %2563, align 1, !tbaa !2447
  %2564 = xor i32 %2553, 4
  %2565 = xor i32 %2564, %2554
  %2566 = lshr i32 %2565, 4
  %2567 = trunc i32 %2566 to i8
  %2568 = and i8 %2567, 1
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2568, i8* %2569, align 1, !tbaa !2448
  %2570 = icmp eq i32 %2554, 0
  %2571 = zext i1 %2570 to i8
  %2572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2571, i8* %2572, align 1, !tbaa !2449
  %2573 = lshr i32 %2554, 31
  %2574 = trunc i32 %2573 to i8
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2574, i8* %2575, align 1, !tbaa !2450
  %2576 = lshr i32 %2553, 31
  %2577 = xor i32 %2573, %2576
  %2578 = add nuw nsw i32 %2577, %2576
  %2579 = icmp eq i32 %2578, 2
  %2580 = zext i1 %2579 to i8
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2580, i8* %2581, align 1, !tbaa !2451
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 27
  %2584 = load i64, i64* %PC
  %2585 = add i64 %2584, 6
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 6
  store i64 %2587, i64* %PC
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2589 = load i8, i8* %2588, align 1, !tbaa !2449
  %2590 = icmp eq i8 %2589, 0
  %2591 = zext i1 %2590 to i8
  store i8 %2591, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2593 = select i1 %2590, i64 %2583, i64 %2585
  store i64 %2593, i64* %2592, align 8, !tbaa !2428
  %2594 = load i8, i8* %BRANCH_TAKEN
  %2595 = icmp eq i8 %2594, 1
  br i1 %2595, label %block_400eaa, label %block_400e95

block_400d86:                                     ; preds = %block_400d2e
  %2596 = load i64, i64* %PC
  %2597 = add i64 %2596, 8
  store i64 %2597, i64* %PC
  %2598 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %2598, i64* %RDI, align 8, !tbaa !2428
  %2599 = load i64, i64* %RBP
  %2600 = sub i64 %2599, 4
  %2601 = load i64, i64* %PC
  %2602 = add i64 %2601, 3
  store i64 %2602, i64* %PC
  %2603 = inttoptr i64 %2600 to i32*
  %2604 = load i32, i32* %2603
  %2605 = zext i32 %2604 to i64
  store i64 %2605, i64* %RSI, align 8, !tbaa !2428
  %2606 = load i64, i64* %PC
  %2607 = sub i64 %2606, 849
  %2608 = load i64, i64* %PC
  %2609 = add i64 %2608, 5
  %2610 = load i64, i64* %PC
  %2611 = add i64 %2610, 5
  store i64 %2611, i64* %PC
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2613 = load i64, i64* %2612, align 8, !tbaa !2428
  %2614 = add i64 %2613, -8
  %2615 = inttoptr i64 %2614 to i64*
  store i64 %2609, i64* %2615
  store i64 %2614, i64* %2612, align 8, !tbaa !2428
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2607, i64* %2616, align 8, !tbaa !2428
  %2617 = load i64, i64* %PC
  %2618 = call %struct.Memory* @sub_400a40_printSolution_renamed_(%struct.State* %0, i64 %2617, %struct.Memory* %1921)
  %2619 = load i64, i64* %PC
  %2620 = add i64 %2619, 11
  store i64 %2620, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 48) to i32*)
  br label %block_400da1

block_400f8a:                                     ; preds = %block_400e1c, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit1, %block_400e86, %block_400ea5, %block_400e6d
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.1, %block_400e6d ], [ %MEMORY.5, %block_400e86 ], [ %1783, %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit1 ], [ %2296, %block_400ea5 ], [ %MEMORY.0, %block_400e1c ]
  %2621 = load i64, i64* %RBP
  %2622 = sub i64 %2621, 24
  %2623 = load i64, i64* %PC
  %2624 = add i64 %2623, 3
  store i64 %2624, i64* %PC
  %2625 = inttoptr i64 %2622 to i32*
  %2626 = load i32, i32* %2625
  %2627 = zext i32 %2626 to i64
  store i64 %2627, i64* %RAX, align 8, !tbaa !2428
  %2628 = load i64, i64* %RAX
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 3
  store i64 %2630, i64* %PC
  %2631 = trunc i64 %2628 to i32
  %2632 = add i32 1, %2631
  %2633 = zext i32 %2632 to i64
  store i64 %2633, i64* %RAX, align 8, !tbaa !2428
  %2634 = icmp ult i32 %2632, %2631
  %2635 = icmp ult i32 %2632, 1
  %2636 = or i1 %2634, %2635
  %2637 = zext i1 %2636 to i8
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2637, i8* %2638, align 1, !tbaa !2434
  %2639 = and i32 %2632, 255
  %2640 = call i32 @llvm.ctpop.i32(i32 %2639) #17
  %2641 = trunc i32 %2640 to i8
  %2642 = and i8 %2641, 1
  %2643 = xor i8 %2642, 1
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2643, i8* %2644, align 1, !tbaa !2447
  %2645 = xor i64 1, %2628
  %2646 = trunc i64 %2645 to i32
  %2647 = xor i32 %2646, %2632
  %2648 = lshr i32 %2647, 4
  %2649 = trunc i32 %2648 to i8
  %2650 = and i8 %2649, 1
  %2651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2650, i8* %2651, align 1, !tbaa !2448
  %2652 = icmp eq i32 %2632, 0
  %2653 = zext i1 %2652 to i8
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2653, i8* %2654, align 1, !tbaa !2449
  %2655 = lshr i32 %2632, 31
  %2656 = trunc i32 %2655 to i8
  %2657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2656, i8* %2657, align 1, !tbaa !2450
  %2658 = lshr i32 %2631, 31
  %2659 = xor i32 %2655, %2658
  %2660 = add nuw nsw i32 %2659, %2655
  %2661 = icmp eq i32 %2660, 2
  %2662 = zext i1 %2661 to i8
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2662, i8* %2663, align 1, !tbaa !2451
  %2664 = load i64, i64* %RBP
  %2665 = sub i64 %2664, 24
  %2666 = load i32, i32* %EAX
  %2667 = zext i32 %2666 to i64
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 3
  store i64 %2669, i64* %PC
  %2670 = inttoptr i64 %2665 to i32*
  store i32 %2666, i32* %2670
  %2671 = load i64, i64* %PC
  %2672 = sub i64 %2671, 409
  %2673 = load i64, i64* %PC
  %2674 = add i64 %2673, 5
  store i64 %2674, i64* %PC
  %2675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2672, i64* %2675, align 8, !tbaa !2428
  br label %block_400dfa

block_400e06:                                     ; preds = %block_400dfa
  store i64 %247, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2676 = load i64, i64* %RBP
  %2677 = sub i64 %2676, 24
  %2678 = load i64, i64* %PC
  %2679 = add i64 %2678, 3
  store i64 %2679, i64* %PC
  %2680 = inttoptr i64 %2677 to i32*
  %2681 = load i32, i32* %2680
  %2682 = zext i32 %2681 to i64
  store i64 %2682, i64* %RCX, align 8, !tbaa !2428
  %2683 = load i64, i64* %RAX
  %2684 = load i8, i8* %CL
  %2685 = zext i8 %2684 to i64
  %2686 = load i64, i64* %PC
  %2687 = add i64 %2686, 2
  store i64 %2687, i64* %PC
  %2688 = trunc i64 %2685 to i5
  switch i5 %2688, label %2695 [
    i5 0, label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit
    i5 1, label %2689
  ]

; <label>:2689:                                   ; preds = %block_400e06
  %2690 = trunc i64 %2683 to i32
  %2691 = shl i32 %2690, 1
  %2692 = icmp slt i32 %2690, 0
  %2693 = icmp slt i32 %2691, 0
  %2694 = xor i1 %2692, %2693
  br label %2704

; <label>:2695:                                   ; preds = %block_400e06
  %2696 = and i64 %2685, 31
  %2697 = add nuw nsw i64 %2696, 4294967295
  %2698 = and i64 %2683, 4294967295
  %2699 = and i64 %2697, 4294967295
  %2700 = shl i64 %2698, %2699
  %2701 = trunc i64 %2700 to i32
  %2702 = icmp slt i32 %2701, 0
  %2703 = shl i32 %2701, 1
  br label %2704

; <label>:2704:                                   ; preds = %2695, %2689
  %2705 = phi i1 [ %2692, %2689 ], [ %2702, %2695 ]
  %2706 = phi i1 [ %2694, %2689 ], [ false, %2695 ]
  %2707 = phi i32 [ %2691, %2689 ], [ %2703, %2695 ]
  %2708 = zext i32 %2707 to i64
  store i64 %2708, i64* %RAX, align 8, !tbaa !2428
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2710 = zext i1 %2705 to i8
  store i8 %2710, i8* %2709, align 1, !tbaa !2452
  %2711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2712 = and i32 %2707, 254
  %2713 = call i32 @llvm.ctpop.i32(i32 %2712) #17
  %2714 = trunc i32 %2713 to i8
  %2715 = and i8 %2714, 1
  %2716 = xor i8 %2715, 1
  store i8 %2716, i8* %2711, align 1, !tbaa !2452
  %2717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2717, align 1, !tbaa !2452
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2719 = icmp eq i32 %2707, 0
  %2720 = zext i1 %2719 to i8
  store i8 %2720, i8* %2718, align 1, !tbaa !2452
  %2721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2722 = lshr i32 %2707, 31
  %2723 = trunc i32 %2722 to i8
  store i8 %2723, i8* %2721, align 1, !tbaa !2452
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2725 = zext i1 %2706 to i8
  store i8 %2725, i8* %2724, align 1, !tbaa !2452
  br label %_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit

_ZN12_GLOBAL__N_1L3SHLI3RnWImE2RnIjES4_EEP6MemoryS6_R5StateT_T0_T1_.exit: ; preds = %block_400e06, %2704
  %2726 = load i64, i64* %RAX
  %2727 = load i64, i64* %RBP
  %2728 = sub i64 %2727, 8
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 3
  store i64 %2730, i64* %PC
  %2731 = trunc i64 %2726 to i32
  %2732 = inttoptr i64 %2728 to i32*
  %2733 = load i32, i32* %2732
  %2734 = and i32 %2733, %2731
  %2735 = zext i32 %2734 to i64
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2736, align 1, !tbaa !2434
  %2737 = and i32 %2734, 255
  %2738 = call i32 @llvm.ctpop.i32(i32 %2737) #17
  %2739 = trunc i32 %2738 to i8
  %2740 = and i8 %2739, 1
  %2741 = xor i8 %2740, 1
  %2742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2741, i8* %2742, align 1, !tbaa !2447
  %2743 = icmp eq i32 %2734, 0
  %2744 = zext i1 %2743 to i8
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2744, i8* %2745, align 1, !tbaa !2449
  %2746 = lshr i32 %2734, 31
  %2747 = trunc i32 %2746 to i8
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2747, i8* %2748, align 1, !tbaa !2450
  %2749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2749, align 1, !tbaa !2451
  %2750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2750, align 1, !tbaa !2448
  %2751 = load i32, i32* %EAX
  %2752 = zext i32 %2751 to i64
  %2753 = load i64, i64* %PC
  %2754 = add i64 %2753, 3
  store i64 %2754, i64* %PC
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2755, align 1, !tbaa !2434
  %2756 = and i32 %2751, 255
  %2757 = call i32 @llvm.ctpop.i32(i32 %2756) #17
  %2758 = trunc i32 %2757 to i8
  %2759 = and i8 %2758, 1
  %2760 = xor i8 %2759, 1
  %2761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2760, i8* %2761, align 1, !tbaa !2447
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2762, align 1, !tbaa !2448
  %2763 = icmp eq i32 %2751, 0
  %2764 = zext i1 %2763 to i8
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2764, i8* %2765, align 1, !tbaa !2449
  %2766 = lshr i32 %2751, 31
  %2767 = trunc i32 %2766 to i8
  %2768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2767, i8* %2768, align 1, !tbaa !2450
  %2769 = lshr i32 %2751, 31
  %2770 = xor i32 %2766, %2769
  %2771 = add nuw nsw i32 %2770, %2769
  %2772 = icmp eq i32 %2771, 2
  %2773 = zext i1 %2772 to i8
  %2774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2773, i8* %2774, align 1, !tbaa !2451
  %2775 = load i64, i64* %PC
  %2776 = add i64 %2775, 11
  %2777 = load i64, i64* %PC
  %2778 = add i64 %2777, 6
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 6
  store i64 %2780, i64* %PC
  %2781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2782 = load i8, i8* %2781, align 1, !tbaa !2449
  store i8 %2782, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %2783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2784 = icmp ne i8 %2782, 0
  %2785 = select i1 %2784, i64 %2776, i64 %2778
  store i64 %2785, i64* %2783, align 8, !tbaa !2428
  %2786 = load i8, i8* %BRANCH_TAKEN
  %2787 = icmp eq i8 %2786, 1
  %2788 = load i64, i64* %PC
  br i1 %2787, label %block_400e21, label %block_400e1c

block_400dab:                                     ; preds = %block_400cc1
  %2789 = load i64, i64* %RBP
  %2790 = sub i64 %2789, 12
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 7
  store i64 %2792, i64* %PC
  %2793 = inttoptr i64 %2790 to i32*
  store i32 1, i32* %2793
  br label %block_400db2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009a0_calculate(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 16
  %39 = load i64, i64* %RDI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 16
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = load i64, i64* %RDI
  %50 = add i64 %49, 8
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %50 to i32*
  %54 = load i32, i32* %53
  %55 = zext i32 %54 to i64
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = load i64, i64* %RAX
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = trunc i64 %56 to i32
  %60 = add i32 -1, %59
  %61 = zext i32 %60 to i64
  store i64 %61, i64* %RAX, align 8, !tbaa !2428
  %62 = icmp ult i32 %60, %59
  %63 = icmp ult i32 %60, -1
  %64 = or i1 %62, %63
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %66, align 1, !tbaa !2434
  %67 = and i32 %60, 255
  %68 = call i32 @llvm.ctpop.i32(i32 %67) #17
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = xor i64 -1, %56
  %74 = trunc i64 %73 to i32
  %75 = xor i32 %74, %60
  %76 = lshr i32 %75, 4
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %78, i8* %79, align 1, !tbaa !2448
  %80 = icmp eq i32 %60, 0
  %81 = zext i1 %80 to i8
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %81, i8* %82, align 1, !tbaa !2449
  %83 = lshr i32 %60, 31
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = lshr i32 %59, 31
  %87 = xor i32 %83, %86
  %88 = xor i32 %83, 1
  %89 = add nuw nsw i32 %87, %88
  %90 = icmp eq i32 %89, 2
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %91, i8* %92, align 1, !tbaa !2451
  %93 = load i32, i32* %EAX
  %94 = zext i32 %93 to i64
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 2
  store i64 %96, i64* %PC
  %97 = and i64 %94, 4294967295
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = trunc i64 %98 to i32
  %102 = sub i32 %101, 3
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = icmp ult i32 %101, 3
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %105, i8* %106, align 1, !tbaa !2434
  %107 = and i32 %102, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #17
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = xor i64 3, %98
  %114 = trunc i64 %113 to i32
  %115 = xor i32 %114, %102
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %118, i8* %119, align 1, !tbaa !2448
  %120 = icmp eq i32 %102, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2449
  %123 = lshr i32 %102, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2450
  %126 = lshr i32 %101, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2451
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 24
  %134 = load i64, i64* %RDI
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %133 to i64*
  store i64 %134, i64* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 28
  %140 = load i32, i32* %EAX
  %141 = zext i32 %140 to i64
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %144
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 106
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 6
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 6
  store i64 %150, i64* %PC
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %152 = load i8, i8* %151, align 1, !tbaa !2434
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %154 = load i8, i8* %153, align 1, !tbaa !2449
  %155 = or i8 %154, %152
  %156 = icmp eq i8 %155, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = select i1 %156, i64 %146, i64 %148
  store i64 %159, i64* %158, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  %162 = load i64, i64* %RBP
  br i1 %161, label %block_400a28, label %block_4009c4

block_4009d2:                                     ; preds = %block_4009c4
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 16
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = load i64, i64* %RAX
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 2
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %169 to i32*
  %173 = load i32, i32* %172
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %RCX, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 16
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = load i64, i64* %RCX
  %182 = load i64, i64* %RAX
  %183 = add i64 %182, 4
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  %186 = trunc i64 %181 to i32
  %187 = inttoptr i64 %183 to i32*
  %188 = load i32, i32* %187
  %189 = add i32 %188, %186
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RCX, align 8, !tbaa !2428
  %191 = icmp ult i32 %189, %186
  %192 = icmp ult i32 %189, %188
  %193 = or i1 %191, %192
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %194, i8* %195, align 1, !tbaa !2434
  %196 = and i32 %189, 255
  %197 = call i32 @llvm.ctpop.i32(i32 %196) #17
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = xor i8 %199, 1
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %200, i8* %201, align 1, !tbaa !2447
  %202 = xor i32 %188, %186
  %203 = xor i32 %202, %189
  %204 = lshr i32 %203, 4
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %206, i8* %207, align 1, !tbaa !2448
  %208 = icmp eq i32 %189, 0
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %209, i8* %210, align 1, !tbaa !2449
  %211 = lshr i32 %189, 31
  %212 = trunc i32 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %212, i8* %213, align 1, !tbaa !2450
  %214 = lshr i32 %186, 31
  %215 = lshr i32 %188, 31
  %216 = xor i32 %211, %214
  %217 = xor i32 %211, %215
  %218 = add nuw nsw i32 %216, %217
  %219 = icmp eq i32 %218, 2
  %220 = zext i1 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %220, i8* %221, align 1, !tbaa !2451
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 4
  %224 = load i32, i32* %ECX
  %225 = zext i32 %224 to i64
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 3
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %223 to i32*
  store i32 %224, i32* %228
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 77
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %230, i64* %233, align 8, !tbaa !2428
  br label %block_400a2f

block_4009fc:                                     ; preds = %block_4009c4
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 16
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = load i64, i64* %RAX
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i32*
  %244 = load i32, i32* %243
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RCX, align 8, !tbaa !2428
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 16
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %RAX, align 8, !tbaa !2428
  %252 = load i64, i64* %RCX
  %253 = load i64, i64* %RAX
  %254 = add i64 %253, 4
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %254 to i32*
  %258 = load i32, i32* %257
  %259 = shl i64 %252, 32
  %260 = ashr exact i64 %259, 32
  %261 = sext i32 %258 to i64
  %262 = mul nsw i64 %261, %260
  %263 = trunc i64 %262 to i32
  %264 = and i64 %262, 4294967295
  store i64 %264, i64* %RCX, align 8, !tbaa !2428
  %265 = shl i64 %262, 32
  %266 = ashr exact i64 %265, 32
  %267 = icmp ne i64 %266, %262
  %268 = zext i1 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %268, i8* %269, align 1, !tbaa !2434
  %270 = and i32 %263, 255
  %271 = call i32 @llvm.ctpop.i32(i32 %270) #17
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %274, i8* %275, align 1, !tbaa !2447
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %276, align 1, !tbaa !2448
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %277, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %279, i8* %280, align 1, !tbaa !2450
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %268, i8* %281, align 1, !tbaa !2451
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 4
  %284 = load i32, i32* %ECX
  %285 = zext i32 %284 to i64
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %283 to i32*
  store i32 %284, i32* %288
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 34
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 5
  store i64 %292, i64* %PC
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %290, i64* %293, align 8, !tbaa !2428
  br label %block_400a2f

block_400a12:                                     ; preds = %block_4009c4
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 16
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to i32*
  %304 = load i32, i32* %303
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = load i64, i64* %RBP
  %307 = sub i64 %306, 16
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RCX, align 8, !tbaa !2428
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 1
  store i64 %313, i64* %PC
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %316 = bitcast %union.anon* %315 to i32*
  %317 = load i32, i32* %316, align 8, !tbaa !2432
  %318 = sext i32 %317 to i64
  %319 = lshr i64 %318, 32
  store i64 %319, i64* %314, align 8, !tbaa !2428
  %320 = load i64, i64* %RCX
  %321 = add i64 %320, 4
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %325 = bitcast %union.anon* %324 to i32*
  %326 = load i32, i32* %325, align 8, !tbaa !2432
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %329 = bitcast %union.anon* %328 to i32*
  %330 = load i32, i32* %329, align 8, !tbaa !2432
  %331 = zext i32 %330 to i64
  %332 = inttoptr i64 %321 to i32*
  %333 = load i32, i32* %332
  %334 = sext i32 %333 to i64
  %335 = shl nuw i64 %331, 32
  %336 = or i64 %335, %327
  %337 = sdiv i64 %336, %334
  %338 = shl i64 %337, 32
  %339 = ashr exact i64 %338, 32
  %340 = icmp eq i64 %337, %339
  br i1 %340, label %345, label %341

; <label>:341:                                    ; preds = %block_400a12
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %343 = load i64, i64* %342, align 8, !tbaa !2428
  %344 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %343, %struct.Memory* %2) #16
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:345:                                    ; preds = %block_400a12
  %346 = srem i64 %336, %334
  %347 = getelementptr inbounds %union.anon, %union.anon* %324, i64 0, i32 0
  %348 = and i64 %337, 4294967295
  store i64 %348, i64* %347, align 8, !tbaa !2428
  %349 = getelementptr inbounds %union.anon, %union.anon* %328, i64 0, i32 0
  %350 = and i64 %346, 4294967295
  store i64 %350, i64* %349, align 8, !tbaa !2428
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %351, align 1, !tbaa !2434
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %353, align 1, !tbaa !2448
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %354, align 1, !tbaa !2449
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %355, align 1, !tbaa !2450
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %356, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %341, %345
  %357 = phi %struct.Memory* [ %344, %341 ], [ %2, %345 ]
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 4
  %360 = load i32, i32* %EAX
  %361 = zext i32 %360 to i64
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 3
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %359 to i32*
  store i32 %360, i32* %364
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 12
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 5
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %366, i64* %369, align 8, !tbaa !2428
  br label %block_400a2f

block_400a28:                                     ; preds = %block_4009a0
  %370 = sub i64 %162, 4
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 7
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  store i32 0, i32* %373
  br label %block_400a2f

block_4009e7:                                     ; preds = %block_4009c4
  %374 = load i64, i64* %RBP
  %375 = sub i64 %374, 16
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 4
  store i64 %377, i64* %PC
  %378 = inttoptr i64 %375 to i64*
  %379 = load i64, i64* %378
  store i64 %379, i64* %RAX, align 8, !tbaa !2428
  %380 = load i64, i64* %RAX
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 2
  store i64 %382, i64* %PC
  %383 = inttoptr i64 %380 to i32*
  %384 = load i32, i32* %383
  %385 = zext i32 %384 to i64
  store i64 %385, i64* %RCX, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 16
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i64*
  %391 = load i64, i64* %390
  store i64 %391, i64* %RAX, align 8, !tbaa !2428
  %392 = load i64, i64* %RCX
  %393 = load i64, i64* %RAX
  %394 = add i64 %393, 4
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = trunc i64 %392 to i32
  %398 = inttoptr i64 %394 to i32*
  %399 = load i32, i32* %398
  %400 = sub i32 %397, %399
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %RCX, align 8, !tbaa !2428
  %402 = icmp ult i32 %397, %399
  %403 = zext i1 %402 to i8
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %403, i8* %404, align 1, !tbaa !2434
  %405 = and i32 %400, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #17
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2447
  %411 = xor i32 %399, %397
  %412 = xor i32 %411, %400
  %413 = lshr i32 %412, 4
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %415, i8* %416, align 1, !tbaa !2448
  %417 = icmp eq i32 %400, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2449
  %420 = lshr i32 %400, 31
  %421 = trunc i32 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = lshr i32 %397, 31
  %424 = lshr i32 %399, 31
  %425 = xor i32 %424, %423
  %426 = xor i32 %420, %423
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp eq i32 %427, 2
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %429, i8* %430, align 1, !tbaa !2451
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 4
  %433 = load i32, i32* %ECX
  %434 = zext i32 %433 to i64
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %432 to i32*
  store i32 %433, i32* %437
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 56
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 5
  store i64 %441, i64* %PC
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %439, i64* %442, align 8, !tbaa !2428
  br label %block_400a2f

block_4009c4:                                     ; preds = %block_4009a0
  %443 = sub i64 %162, 24
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 4
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %443 to i64*
  %447 = load i64, i64* %446
  store i64 %447, i64* %RAX, align 8, !tbaa !2428
  %448 = load i64, i64* %RAX
  %449 = mul i64 %448, 8
  %450 = add i64 %449, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 8)
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 8
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %RCX, align 8, !tbaa !2428
  %455 = load i64, i64* %RCX
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 2
  store i64 %457, i64* %PC
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %455, i64* %458, align 8, !tbaa !2428
  %459 = load i64, i64* %PC
  switch i64 %459, label %482 [
    i64 4196860, label %block_4009fc
    i64 4196818, label %block_4009d2
    i64 4196839, label %block_4009e7
    i64 4196882, label %block_400a12
  ]

block_400a2f:                                     ; preds = %block_4009e7, %block_400a28, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit, %block_4009fc, %block_4009d2
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400a28 ], [ %357, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2MnIjEEEP6MemoryS4_R5StateT_.exit ], [ %2, %block_4009e7 ], [ %2, %block_4009d2 ], [ %2, %block_4009fc ]
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 4
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 3
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  %465 = load i32, i32* %464
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 1
  store i64 %468, i64* %PC
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %470 = load i64, i64* %469, align 8, !tbaa !2428
  %471 = add i64 %470, 8
  %472 = inttoptr i64 %470 to i64*
  %473 = load i64, i64* %472
  store i64 %473, i64* %RBP, align 8, !tbaa !2428
  store i64 %471, i64* %469, align 8, !tbaa !2428
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 1
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %478 = load i64, i64* %477, align 8, !tbaa !2428
  %479 = inttoptr i64 %478 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %476, align 8, !tbaa !2428
  %481 = add i64 %478, 8
  store i64 %481, i64* %477, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

; <label>:482:                                    ; preds = %block_4009c4
  %483 = load i64, i64* %PC
  %484 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %483, %struct.Memory* %2)
  ret %struct.Memory* %484
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006d0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6299752, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6299752
  %37 = icmp ult i64 %33, 6299752
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2434
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #17
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2447
  %47 = xor i64 6299752, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2448
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2451
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2449
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4006f8, label %block_4006e1

block_4006f8:                                     ; preds = %block_4006e1, %block_4006f3, %block_4006d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4006d0 ], [ %2, %block_4006e1 ], [ %2, %block_4006f3 ]
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4006fa:                                     ; preds = %block_4006eb
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RAX
  %98 = add i64 %97, %96
  %99 = load i16, i16* %AX
  %100 = zext i16 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 6
  store i64 %102, i64* %PC
  %103 = load i64, i64* %PC
  %104 = tail call %struct.Memory* @sub_400700_register_tm_clones(%struct.State* %0, i64 %103, %struct.Memory* %2)
  ret %struct.Memory* %104

block_4006f3:                                     ; preds = %block_4006eb
  %105 = load i64, i64* %RAX
  %106 = load i64, i64* %RAX
  %107 = add i64 %106, %105
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  br label %block_4006f8

block_4006eb:                                     ; preds = %block_4006e1
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 1
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RBP, align 8, !tbaa !2428
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  store i64 6299752, i64* %RDI, align 8, !tbaa !2428
  %121 = load i64, i64* %RAX
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  switch i64 %125, label %162 [
    i64 4196090, label %block_4006fa
    i64 4196083, label %block_4006f3
  ]

block_4006e1:                                     ; preds = %block_4006d0
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = and i64 %129, %128
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %133, align 1, !tbaa !2434
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #17
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %132, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = lshr i64 %132, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %147, align 1, !tbaa !2451
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2448
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 15
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = load i8, i8* %155, align 1, !tbaa !2449
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = icmp ne i8 %156, 0
  %159 = select i1 %158, i64 %150, i64 %152
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_4006f8, label %block_4006eb

; <label>:162:                                    ; preds = %block_4006eb
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009d2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009d2:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = sub i64 %18, 16
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = load i64, i64* %RAX
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC
  %27 = inttoptr i64 %24 to i32*
  %28 = load i32, i32* %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RCX, align 8, !tbaa !2428
  %30 = load i64, i64* %RBP
  %31 = sub i64 %30, 16
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = load i64, i64* %RCX
  %37 = load i64, i64* %RAX
  %38 = add i64 %37, 4
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  %41 = trunc i64 %36 to i32
  %42 = inttoptr i64 %38 to i32*
  %43 = load i32, i32* %42
  %44 = add i32 %43, %41
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %RCX, align 8, !tbaa !2428
  %46 = icmp ult i32 %44, %41
  %47 = icmp ult i32 %44, %43
  %48 = or i1 %46, %47
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2434
  %51 = and i32 %44, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #17
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = xor i32 %43, %41
  %58 = xor i32 %57, %44
  %59 = lshr i32 %58, 4
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = icmp eq i32 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i32 %44, 31
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i32 %41, 31
  %70 = lshr i32 %43, 31
  %71 = xor i32 %66, %69
  %72 = xor i32 %66, %70
  %73 = add nuw nsw i32 %71, %72
  %74 = icmp eq i32 %73, 2
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %76, align 1, !tbaa !2451
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 4
  %79 = load i32, i32* %ECX
  %80 = zext i32 %79 to i64
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %78 to i32*
  store i32 %79, i32* %83
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 77
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  store i64 %87, i64* %PC
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %88, align 8, !tbaa !2428
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 4
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 3
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i32*
  %94 = load i32, i32* %93
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 1
  store i64 %97, i64* %PC
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %99 = load i64, i64* %98, align 8, !tbaa !2428
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101
  store i64 %102, i64* %RBP, align 8, !tbaa !2428
  store i64 %100, i64* %98, align 8, !tbaa !2428
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 1
  store i64 %104, i64* %PC
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %107 = load i64, i64* %106, align 8, !tbaa !2428
  %108 = inttoptr i64 %107 to i64*
  %109 = load i64, i64* %108
  store i64 %109, i64* %105, align 8, !tbaa !2428
  %110 = add i64 %107, 8
  store i64 %110, i64* %106, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400770_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400770:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400700_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fd0_doSearch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400fd0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 7
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EDX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 16
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 16
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2434
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #17
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = xor i64 16, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2451
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 4
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 7
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i32*
  store i32 0, i32* %83
  br label %block_400fdf

block_400fef:                                     ; preds = %block_400fdf
  %84 = add i64 %504, 8
  store i64 %84, i64* %PC
  %85 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 4
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %87 to i32*
  %91 = load i32, i32* %90
  %92 = sext i32 %91 to i64
  store i64 %92, i64* %RCX, align 8, !tbaa !2428
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %RCX
  %95 = mul i64 %94, 4
  %96 = add i64 %95, %93
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  %100 = load i32, i32* %99
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %RDX, align 8, !tbaa !2428
  %102 = load i64, i64* %RDX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = trunc i64 %102 to i32
  %106 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %107 = sub i32 %105, %106
  %108 = zext i32 %107 to i64
  store i64 %108, i64* %RDX, align 8, !tbaa !2428
  %109 = icmp ult i32 %105, %106
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %110, i8* %111, align 1, !tbaa !2434
  %112 = and i32 %107, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #17
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = xor i32 %106, %105
  %119 = xor i32 %118, %107
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %122, i8* %123, align 1, !tbaa !2448
  %124 = icmp eq i32 %107, 0
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %125, i8* %126, align 1, !tbaa !2449
  %127 = lshr i32 %107, 31
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %128, i8* %129, align 1, !tbaa !2450
  %130 = lshr i32 %105, 31
  %131 = lshr i32 %106, 31
  %132 = xor i32 %131, %130
  %133 = xor i32 %127, %130
  %134 = add nuw nsw i32 %133, %132
  %135 = icmp eq i32 %134, 2
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %136, i8* %137, align 1, !tbaa !2451
  %138 = load i32, i32* %EDX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = and i64 %139, 4294967295
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 2535
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %150 = load i64, i64* %149, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %146, i64* %152
  store i64 %151, i64* %149, align 8, !tbaa !2428
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = call %struct.Memory* @ext_6020f0_abs(%struct.State* %0, i64 %154, %struct.Memory* %MEMORY.2)
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 7
  store i64 %157, i64* %PC
  %158 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 80) to i32*)
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = load i64, i64* %RDX
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 7
  store i64 %162, i64* %PC
  %163 = trunc i64 %160 to i32
  %164 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %165 = sub i32 %163, %164
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %167 = icmp ult i32 %163, %164
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2434
  %170 = and i32 %165, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #17
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = xor i32 %164, %163
  %177 = xor i32 %176, %165
  %178 = lshr i32 %177, 4
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %180, i8* %181, align 1, !tbaa !2448
  %182 = icmp eq i32 %165, 0
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %183, i8* %184, align 1, !tbaa !2449
  %185 = lshr i32 %165, 31
  %186 = trunc i32 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %186, i8* %187, align 1, !tbaa !2450
  %188 = lshr i32 %163, 31
  %189 = lshr i32 %164, 31
  %190 = xor i32 %189, %188
  %191 = xor i32 %185, %188
  %192 = add nuw nsw i32 %191, %190
  %193 = icmp eq i32 %192, 2
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %194, i8* %195, align 1, !tbaa !2451
  %196 = load i32, i32* %EDX
  %197 = zext i32 %196 to i64
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 2
  store i64 %199, i64* %PC
  %200 = and i64 %197, 4294967295
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP
  %202 = sub i64 %201, 8
  %203 = load i32, i32* %EAX
  %204 = zext i32 %203 to i64
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 3
  store i64 %206, i64* %PC
  %207 = inttoptr i64 %202 to i32*
  store i32 %203, i32* %207
  %208 = load i64, i64* %PC
  %209 = sub i64 %208, 2559
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 5
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %215 = load i64, i64* %214, align 8, !tbaa !2428
  %216 = add i64 %215, -8
  %217 = inttoptr i64 %216 to i64*
  store i64 %211, i64* %217
  store i64 %216, i64* %214, align 8, !tbaa !2428
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %209, i64* %218, align 8, !tbaa !2428
  %219 = load i64, i64* %PC
  %220 = call %struct.Memory* @ext_6020f0_abs(%struct.State* %0, i64 %219, %struct.Memory* %155)
  %221 = load i64, i64* %RBP
  %222 = sub i64 %221, 8
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to i32*
  %226 = load i32, i32* %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RDX, align 8, !tbaa !2428
  %228 = load i32, i32* %EDX
  %229 = zext i32 %228 to i64
  %230 = load i32, i32* %EAX
  %231 = zext i32 %230 to i64
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 2
  store i64 %233, i64* %PC
  %234 = sub i32 %228, %230
  %235 = icmp ult i32 %228, %230
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %236, i8* %237, align 1, !tbaa !2434
  %238 = and i32 %234, 255
  %239 = call i32 @llvm.ctpop.i32(i32 %238) #17
  %240 = trunc i32 %239 to i8
  %241 = and i8 %240, 1
  %242 = xor i8 %241, 1
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %242, i8* %243, align 1, !tbaa !2447
  %244 = xor i64 %231, %229
  %245 = trunc i64 %244 to i32
  %246 = xor i32 %245, %234
  %247 = lshr i32 %246, 4
  %248 = trunc i32 %247 to i8
  %249 = and i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = icmp eq i32 %234, 0
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = lshr i32 %234, 31
  %255 = trunc i32 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %255, i8* %256, align 1, !tbaa !2450
  %257 = lshr i32 %228, 31
  %258 = lshr i32 %230, 31
  %259 = xor i32 %258, %257
  %260 = xor i32 %254, %257
  %261 = add nuw nsw i32 %260, %259
  %262 = icmp eq i32 %261, 2
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %263, i8* %264, align 1, !tbaa !2451
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 28
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 6
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 6
  store i64 %270, i64* %PC
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %272 = load i8, i8* %271, align 1, !tbaa !2450
  %273 = icmp ne i8 %272, 0
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %275 = load i8, i8* %274, align 1, !tbaa !2451
  %276 = icmp ne i8 %275, 0
  %277 = xor i1 %273, %276
  %278 = xor i1 %277, true
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %281 = select i1 %277, i64 %268, i64 %266
  store i64 %281, i64* %280, align 8, !tbaa !2428
  %282 = load i8, i8* %BRANCH_TAKEN
  %283 = icmp eq i8 %282, 1
  br i1 %283, label %block_401045, label %block_40102f

block_4010ff:                                     ; preds = %block_4010dd, %block_4010eb, %block_40106c
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_4010dd ], [ %442, %block_4010eb ], [ %410, %block_40106c ]
  %284 = load i64, i64* %RSP
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = add i64 16, %284
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %288 = icmp ult i64 %287, %284
  %289 = icmp ult i64 %287, 16
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %291, i8* %292, align 1, !tbaa !2434
  %293 = trunc i64 %287 to i32
  %294 = and i32 %293, 255
  %295 = call i32 @llvm.ctpop.i32(i32 %294) #17
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %298, i8* %299, align 1, !tbaa !2447
  %300 = xor i64 16, %284
  %301 = xor i64 %300, %287
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = icmp eq i64 %287, 0
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i64 %287, 63
  %310 = trunc i64 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %310, i8* %311, align 1, !tbaa !2450
  %312 = lshr i64 %284, 63
  %313 = xor i64 %309, %312
  %314 = add nuw nsw i64 %313, %309
  %315 = icmp eq i64 %314, 2
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %316, i8* %317, align 1, !tbaa !2451
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 1
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %321 = load i64, i64* %320, align 8, !tbaa !2428
  %322 = add i64 %321, 8
  %323 = inttoptr i64 %321 to i64*
  %324 = load i64, i64* %323
  store i64 %324, i64* %RBP, align 8, !tbaa !2428
  store i64 %322, i64* %320, align 8, !tbaa !2428
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 1
  store i64 %326, i64* %PC
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %329 = load i64, i64* %328, align 8, !tbaa !2428
  %330 = inttoptr i64 %329 to i64*
  %331 = load i64, i64* %330
  store i64 %331, i64* %327, align 8, !tbaa !2428
  %332 = add i64 %329, 8
  store i64 %332, i64* %328, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4010bd:                                     ; preds = %block_4010a4
  %333 = add i64 %738, 32
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %336, align 8, !tbaa !2428
  br label %block_4010dd

block_401090:                                     ; preds = %block_4010c2, %block_401085
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_401085 ], [ %701, %block_4010c2 ]
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 7
  store i64 %338, i64* %PC
  %339 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 56) to i32*)
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i32, i32* %EAX
  %342 = zext i32 %341 to i64
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 7
  store i64 %344, i64* %PC
  %345 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %346 = sub i32 %341, %345
  %347 = icmp ult i32 %341, %345
  %348 = zext i1 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %348, i8* %349, align 1, !tbaa !2434
  %350 = and i32 %346, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #17
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2447
  %356 = xor i32 %345, %341
  %357 = xor i32 %356, %346
  %358 = lshr i32 %357, 4
  %359 = trunc i32 %358 to i8
  %360 = and i8 %359, 1
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %360, i8* %361, align 1, !tbaa !2448
  %362 = icmp eq i32 %346, 0
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %363, i8* %364, align 1, !tbaa !2449
  %365 = lshr i32 %346, 31
  %366 = trunc i32 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %366, i8* %367, align 1, !tbaa !2450
  %368 = lshr i32 %341, 31
  %369 = lshr i32 %345, 31
  %370 = xor i32 %369, %368
  %371 = xor i32 %365, %368
  %372 = add nuw nsw i32 %371, %370
  %373 = icmp eq i32 %372, 2
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %374, i8* %375, align 1, !tbaa !2451
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 63
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 6
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 6
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %383 = load i8, i8* %382, align 1, !tbaa !2450
  %384 = icmp ne i8 %383, 0
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %386 = load i8, i8* %385, align 1, !tbaa !2451
  %387 = icmp ne i8 %386, 0
  %388 = xor i1 %384, %387
  %389 = xor i1 %388, true
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %392 = select i1 %388, i64 %379, i64 %377
  store i64 %392, i64* %391, align 8, !tbaa !2428
  %393 = load i8, i8* %BRANCH_TAKEN
  %394 = icmp eq i8 %393, 1
  br i1 %394, label %block_4010dd, label %block_4010a4

block_40106c:                                     ; preds = %block_401058
  %395 = add i64 %655, 10
  store i64 %395, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 2
  store i64 %397, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %398 = load i64, i64* %PC
  %399 = sub i64 %398, 2632
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 5
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 5
  store i64 %403, i64* %PC
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %405 = load i64, i64* %404, align 8, !tbaa !2428
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  store i64 %401, i64* %407
  store i64 %406, i64* %404, align 8, !tbaa !2428
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %399, i64* %408, align 8, !tbaa !2428
  %409 = load i64, i64* %PC
  %410 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %409, %struct.Memory* %MEMORY.2)
  %411 = load i64, i64* %RBP
  %412 = sub i64 %411, 12
  %413 = load i32, i32* %EAX
  %414 = zext i32 %413 to i64
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 3
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %412 to i32*
  store i32 %413, i32* %417
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 127
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %419, i64* %422, align 8, !tbaa !2428
  br label %block_4010ff

block_4010eb:                                     ; preds = %block_4010dd
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 8
  store i64 %424, i64* %PC
  %425 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 88) to i64*)
  store i64 %425, i64* %RDI, align 8, !tbaa !2428
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 7
  store i64 %427, i64* %PC
  %428 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 84) to i32*)
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RSI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 1722
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %437 = load i64, i64* %436, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %439
  store i64 %438, i64* %436, align 8, !tbaa !2428
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %440, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = call %struct.Memory* @sub_400a40_printSolution_renamed_(%struct.State* %0, i64 %441, %struct.Memory* %MEMORY.4)
  br label %block_4010ff

block_400fdf:                                     ; preds = %block_401045, %block_400fd0
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400fd0 ], [ %MEMORY.3, %block_401045 ]
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 4
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 3
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i32*
  %448 = load i32, i32* %447
  %449 = zext i32 %448 to i64
  store i64 %449, i64* %RAX, align 8, !tbaa !2428
  %450 = load i32, i32* %EAX
  %451 = zext i32 %450 to i64
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 7
  store i64 %453, i64* %PC
  %454 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %455 = sub i32 %450, %454
  %456 = icmp ult i32 %450, %454
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %457, i8* %458, align 1, !tbaa !2434
  %459 = and i32 %455, 255
  %460 = call i32 @llvm.ctpop.i32(i32 %459) #17
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %463, i8* %464, align 1, !tbaa !2447
  %465 = xor i32 %454, %450
  %466 = xor i32 %465, %455
  %467 = lshr i32 %466, 4
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %469, i8* %470, align 1, !tbaa !2448
  %471 = icmp eq i32 %455, 0
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %472, i8* %473, align 1, !tbaa !2449
  %474 = lshr i32 %455, 31
  %475 = trunc i32 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %475, i8* %476, align 1, !tbaa !2450
  %477 = lshr i32 %450, 31
  %478 = lshr i32 %454, 31
  %479 = xor i32 %478, %477
  %480 = xor i32 %474, %477
  %481 = add nuw nsw i32 %480, %479
  %482 = icmp eq i32 %481, 2
  %483 = zext i1 %482 to i8
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %483, i8* %484, align 1, !tbaa !2451
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 111
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 6
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 6
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %492 = load i8, i8* %491, align 1, !tbaa !2450
  %493 = icmp ne i8 %492, 0
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %495 = load i8, i8* %494, align 1, !tbaa !2451
  %496 = icmp ne i8 %495, 0
  %497 = xor i1 %493, %496
  %498 = xor i1 %497, true
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %501 = select i1 %497, i64 %488, i64 %486
  store i64 %501, i64* %500, align 8, !tbaa !2428
  %502 = load i8, i8* %BRANCH_TAKEN
  %503 = icmp eq i8 %502, 1
  %504 = load i64, i64* %PC
  br i1 %503, label %block_401058, label %block_400fef

block_401085:                                     ; preds = %block_401058
  %505 = add i64 %655, 11
  store i64 %505, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 56) to i32*)
  br label %block_401090

block_401045:                                     ; preds = %block_40102f, %block_400fef
  %MEMORY.3 = phi %struct.Memory* [ %220, %block_400fef ], [ %220, %block_40102f ]
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %510, align 8, !tbaa !2428
  %511 = load i64, i64* %RBP
  %512 = sub i64 %511, 4
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 3
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %512 to i32*
  %516 = load i32, i32* %515
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = load i64, i64* %RAX
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 3
  store i64 %520, i64* %PC
  %521 = trunc i64 %518 to i32
  %522 = add i32 1, %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = icmp ult i32 %522, %521
  %525 = icmp ult i32 %522, 1
  %526 = or i1 %524, %525
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %527, i8* %528, align 1, !tbaa !2434
  %529 = and i32 %522, 255
  %530 = call i32 @llvm.ctpop.i32(i32 %529) #17
  %531 = trunc i32 %530 to i8
  %532 = and i8 %531, 1
  %533 = xor i8 %532, 1
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %533, i8* %534, align 1, !tbaa !2447
  %535 = xor i64 1, %518
  %536 = trunc i64 %535 to i32
  %537 = xor i32 %536, %522
  %538 = lshr i32 %537, 4
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = icmp eq i32 %522, 0
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i32 %522, 31
  %546 = trunc i32 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %546, i8* %547, align 1, !tbaa !2450
  %548 = lshr i32 %521, 31
  %549 = xor i32 %545, %548
  %550 = add nuw nsw i32 %549, %545
  %551 = icmp eq i32 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2451
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 4
  %556 = load i32, i32* %EAX
  %557 = zext i32 %556 to i64
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 3
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %555 to i32*
  store i32 %556, i32* %560
  %561 = load i64, i64* %PC
  %562 = sub i64 %561, 116
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 5
  store i64 %564, i64* %PC
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %562, i64* %565, align 8, !tbaa !2428
  br label %block_400fdf

block_4010dd:                                     ; preds = %block_401090, %block_4010bd
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_401090 ], [ %701, %block_4010bd ]
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 8
  store i64 %567, i64* %PC
  %568 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 48) to i32*)
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %569, align 1, !tbaa !2434
  %570 = and i32 %568, 255
  %571 = call i32 @llvm.ctpop.i32(i32 %570) #17
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = xor i8 %573, 1
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %574, i8* %575, align 1, !tbaa !2447
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %576, align 1, !tbaa !2448
  %577 = icmp eq i32 %568, 0
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %578, i8* %579, align 1, !tbaa !2449
  %580 = lshr i32 %568, 31
  %581 = trunc i32 %580 to i8
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %581, i8* %582, align 1, !tbaa !2450
  %583 = lshr i32 %568, 31
  %584 = xor i32 %580, %583
  %585 = add nuw nsw i32 %584, %583
  %586 = icmp eq i32 %585, 2
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %587, i8* %588, align 1, !tbaa !2451
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 26
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 6
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 6
  store i64 %594, i64* %PC
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %596 = load i8, i8* %595, align 1, !tbaa !2449
  %597 = icmp eq i8 %596, 0
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %600 = select i1 %597, i64 %590, i64 %592
  store i64 %600, i64* %599, align 8, !tbaa !2428
  %601 = load i8, i8* %BRANCH_TAKEN
  %602 = icmp eq i8 %601, 1
  br i1 %602, label %block_4010ff, label %block_4010eb

block_401058:                                     ; preds = %block_400fdf
  %603 = add i64 %504, 7
  store i64 %603, i64* %PC
  %604 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 80) to i32*)
  %605 = zext i32 %604 to i64
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i32, i32* %EAX
  %607 = zext i32 %606 to i64
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 7
  store i64 %609, i64* %PC
  %610 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %611 = sub i32 %606, %610
  %612 = icmp ult i32 %606, %610
  %613 = zext i1 %612 to i8
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %613, i8* %614, align 1, !tbaa !2434
  %615 = and i32 %611, 255
  %616 = call i32 @llvm.ctpop.i32(i32 %615) #17
  %617 = trunc i32 %616 to i8
  %618 = and i8 %617, 1
  %619 = xor i8 %618, 1
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %619, i8* %620, align 1, !tbaa !2447
  %621 = xor i32 %610, %606
  %622 = xor i32 %621, %611
  %623 = lshr i32 %622, 4
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %625, i8* %626, align 1, !tbaa !2448
  %627 = icmp eq i32 %611, 0
  %628 = zext i1 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %628, i8* %629, align 1, !tbaa !2449
  %630 = lshr i32 %611, 31
  %631 = trunc i32 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %631, i8* %632, align 1, !tbaa !2450
  %633 = lshr i32 %606, 31
  %634 = lshr i32 %610, 31
  %635 = xor i32 %634, %633
  %636 = xor i32 %630, %633
  %637 = add nuw nsw i32 %636, %635
  %638 = icmp eq i32 %637, 2
  %639 = zext i1 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %639, i8* %640, align 1, !tbaa !2451
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 31
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 6
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 6
  store i64 %646, i64* %PC
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %648 = load i8, i8* %647, align 1, !tbaa !2449
  %649 = icmp eq i8 %648, 0
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %652 = select i1 %649, i64 %642, i64 %644
  store i64 %652, i64* %651, align 8, !tbaa !2428
  %653 = load i8, i8* %BRANCH_TAKEN
  %654 = icmp eq i8 %653, 1
  %655 = load i64, i64* %PC
  br i1 %654, label %block_401085, label %block_40106c

block_4010a4:                                     ; preds = %block_401090
  %656 = load i64, i64* %RAX
  %657 = load i32, i32* %EAX
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 2
  store i64 %660, i64* %PC
  %661 = xor i64 %658, %656
  %662 = trunc i64 %661 to i32
  %663 = and i64 %661, 4294967295
  store i64 %663, i64* %RAX, align 8, !tbaa !2428
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %664, align 1, !tbaa !2434
  %665 = and i32 %662, 255
  %666 = call i32 @llvm.ctpop.i32(i32 %665) #17
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = xor i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i32 %662, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %662, 31
  %675 = trunc i32 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2450
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %677, align 1, !tbaa !2451
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %678, align 1, !tbaa !2448
  %679 = load i32, i32* %EAX
  %680 = zext i32 %679 to i64
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 2
  store i64 %682, i64* %PC
  %683 = and i64 %680, 4294967295
  store i64 %683, i64* %RDI, align 8, !tbaa !2428
  %684 = load i32, i32* %EAX
  %685 = zext i32 %684 to i64
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 2
  store i64 %687, i64* %PC
  %688 = and i64 %685, 4294967295
  store i64 %688, i64* %RSI, align 8, !tbaa !2428
  %689 = load i64, i64* %PC
  %690 = sub i64 %689, 1034
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 5
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 5
  store i64 %694, i64* %PC
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %696 = load i64, i64* %695, align 8, !tbaa !2428
  %697 = add i64 %696, -8
  %698 = inttoptr i64 %697 to i64*
  store i64 %692, i64* %698
  store i64 %697, i64* %695, align 8, !tbaa !2428
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %690, i64* %699, align 8, !tbaa !2428
  %700 = load i64, i64* %PC
  %701 = call %struct.Memory* @sub_400ca0_recSearch_renamed_(%struct.State* %0, i64 %700, %struct.Memory* %MEMORY.1)
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 8
  store i64 %703, i64* %PC
  %704 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 48) to i32*)
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %705, align 1, !tbaa !2434
  %706 = and i32 %704, 255
  %707 = call i32 @llvm.ctpop.i32(i32 %706) #17
  %708 = trunc i32 %707 to i8
  %709 = and i8 %708, 1
  %710 = xor i8 %709, 1
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %710, i8* %711, align 1, !tbaa !2447
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %712, align 1, !tbaa !2448
  %713 = icmp eq i32 %704, 0
  %714 = zext i1 %713 to i8
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %714, i8* %715, align 1, !tbaa !2449
  %716 = lshr i32 %704, 31
  %717 = trunc i32 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %717, i8* %718, align 1, !tbaa !2450
  %719 = lshr i32 %704, 31
  %720 = xor i32 %716, %719
  %721 = add nuw nsw i32 %720, %719
  %722 = icmp eq i32 %721, 2
  %723 = zext i1 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %723, i8* %724, align 1, !tbaa !2451
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 11
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 6
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 6
  store i64 %730, i64* %PC
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %732 = load i8, i8* %731, align 1, !tbaa !2449
  store i8 %732, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %734 = icmp ne i8 %732, 0
  %735 = select i1 %734, i64 %726, i64 %728
  store i64 %735, i64* %733, align 8, !tbaa !2428
  %736 = load i8, i8* %BRANCH_TAKEN
  %737 = icmp eq i8 %736, 1
  %738 = load i64, i64* %PC
  br i1 %737, label %block_4010c2, label %block_4010bd

block_4010c2:                                     ; preds = %block_4010a4
  %739 = add i64 %738, 5
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 5
  store i64 %741, i64* %PC
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %739, i64* %742, align 8, !tbaa !2428
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 7
  store i64 %744, i64* %PC
  %745 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 56) to i32*)
  %746 = zext i32 %745 to i64
  store i64 %746, i64* %RAX, align 8, !tbaa !2428
  %747 = load i64, i64* %RAX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 3
  store i64 %749, i64* %PC
  %750 = trunc i64 %747 to i32
  %751 = add i32 1, %750
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = icmp ult i32 %751, %750
  %754 = icmp ult i32 %751, 1
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %756, i8* %757, align 1, !tbaa !2434
  %758 = and i32 %751, 255
  %759 = call i32 @llvm.ctpop.i32(i32 %758) #17
  %760 = trunc i32 %759 to i8
  %761 = and i8 %760, 1
  %762 = xor i8 %761, 1
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %762, i8* %763, align 1, !tbaa !2447
  %764 = xor i64 1, %747
  %765 = trunc i64 %764 to i32
  %766 = xor i32 %765, %751
  %767 = lshr i32 %766, 4
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %769, i8* %770, align 1, !tbaa !2448
  %771 = icmp eq i32 %751, 0
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %772, i8* %773, align 1, !tbaa !2449
  %774 = lshr i32 %751, 31
  %775 = trunc i32 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %775, i8* %776, align 1, !tbaa !2450
  %777 = lshr i32 %750, 31
  %778 = xor i32 %774, %777
  %779 = add nuw nsw i32 %778, %774
  %780 = icmp eq i32 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2451
  %783 = load i32, i32* %EAX
  %784 = zext i32 %783 to i64
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 7
  store i64 %786, i64* %PC
  store i32 %783, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 56) to i32*)
  %787 = load i64, i64* %PC
  %788 = sub i64 %787, 72
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 5
  store i64 %790, i64* %PC
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %788, i64* %791, align 8, !tbaa !2428
  br label %block_401090

block_40102f:                                     ; preds = %block_400fef
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 8
  store i64 %793, i64* %PC
  %794 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RBP
  %796 = sub i64 %795, 4
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %796 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  store i64 %801, i64* %RCX, align 8, !tbaa !2428
  %802 = load i64, i64* %RAX
  %803 = load i64, i64* %RCX
  %804 = mul i64 %803, 4
  %805 = add i64 %804, %802
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 3
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i32*
  %809 = load i32, i32* %808
  %810 = zext i32 %809 to i64
  store i64 %810, i64* %RDX, align 8, !tbaa !2428
  %811 = load i32, i32* %EDX
  %812 = zext i32 %811 to i64
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 7
  store i64 %814, i64* %PC
  store i32 %811, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 80) to i32*)
  br label %block_401045
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008e0_saveSolution(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4008e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %RDI
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 16
  %51 = load i64, i64* %RSI
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %RBP
  %56 = sub i64 %55, 20
  %57 = load i32, i32* %EDX
  %58 = zext i32 %57 to i64
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %56 to i32*
  store i32 %57, i32* %61
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 24
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66
  br label %block_4008f6

block_4008f6:                                     ; preds = %block_400902, %block_4008e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4008e0 ], [ %MEMORY.0, %block_400902 ]
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 24
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i32, i32* %EAX
  %75 = zext i32 %74 to i64
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 20
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 3
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i32*
  %81 = load i32, i32* %80
  %82 = sub i32 %74, %81
  %83 = icmp ult i32 %74, %81
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %84, i8* %85, align 1, !tbaa !2434
  %86 = and i32 %82, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #17
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2447
  %92 = xor i32 %81, %74
  %93 = xor i32 %92, %82
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2448
  %98 = icmp eq i32 %82, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2449
  %101 = lshr i32 %82, 31
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2450
  %104 = lshr i32 %74, 31
  %105 = lshr i32 %81, 31
  %106 = xor i32 %105, %104
  %107 = xor i32 %101, %104
  %108 = add nuw nsw i32 %107, %106
  %109 = icmp eq i32 %108, 2
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %110, i8* %111, align 1, !tbaa !2451
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 126
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 6
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %119 = load i8, i8* %118, align 1, !tbaa !2450
  %120 = icmp ne i8 %119, 0
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %122 = load i8, i8* %121, align 1, !tbaa !2451
  %123 = icmp ne i8 %122, 0
  %124 = xor i1 %120, %123
  %125 = xor i1 %124, true
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = select i1 %124, i64 %115, i64 %113
  store i64 %128, i64* %127, align 8, !tbaa !2428
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  %131 = load i64, i64* %RBP
  br i1 %130, label %block_40097a, label %block_400902

block_40097a:                                     ; preds = %block_4008f6
  %132 = sub i64 %131, 8
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 20
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = sext i32 %142 to i64
  store i64 %143, i64* %RCX, align 8, !tbaa !2428
  %144 = load i64, i64* %RCX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sext i64 %144 to i128
  %148 = and i128 %147, -18446744073709551616
  %149 = zext i64 %144 to i128
  %150 = or i128 %148, %149
  %151 = mul nsw i128 12, %150
  %152 = trunc i128 %151 to i64
  store i64 %152, i64* %RCX, align 8, !tbaa !2428
  %153 = sext i64 %152 to i128
  %154 = icmp ne i128 %153, %151
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %155, i8* %156, align 1, !tbaa !2434
  %157 = trunc i128 %151 to i32
  %158 = and i32 %157, 255
  %159 = call i32 @llvm.ctpop.i32(i32 %158) #17
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %164, align 1, !tbaa !2448
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %165, align 1, !tbaa !2449
  %166 = lshr i64 %152, 63
  %167 = trunc i64 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %167, i8* %168, align 1, !tbaa !2450
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %155, i8* %169, align 1, !tbaa !2451
  %170 = load i64, i64* %RAX
  %171 = load i64, i64* %RCX
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 3
  store i64 %173, i64* %PC
  %174 = add i64 %171, %170
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = icmp ult i64 %174, %170
  %176 = icmp ult i64 %174, %171
  %177 = or i1 %175, %176
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %178, i8* %179, align 1, !tbaa !2434
  %180 = trunc i64 %174 to i32
  %181 = and i32 %180, 255
  %182 = call i32 @llvm.ctpop.i32(i32 %181) #17
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  %185 = xor i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %185, i8* %186, align 1, !tbaa !2447
  %187 = xor i64 %171, %170
  %188 = xor i64 %187, %174
  %189 = lshr i64 %188, 4
  %190 = trunc i64 %189 to i8
  %191 = and i8 %190, 1
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %191, i8* %192, align 1, !tbaa !2448
  %193 = icmp eq i64 %174, 0
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %194, i8* %195, align 1, !tbaa !2449
  %196 = lshr i64 %174, 63
  %197 = trunc i64 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %197, i8* %198, align 1, !tbaa !2450
  %199 = lshr i64 %170, 63
  %200 = lshr i64 %171, 63
  %201 = xor i64 %196, %199
  %202 = xor i64 %196, %200
  %203 = add nuw nsw i64 %201, %202
  %204 = icmp eq i64 %203, 2
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %205, i8* %206, align 1, !tbaa !2451
  %207 = load i64, i64* %RAX
  %208 = add i64 %207, 8
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 7
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i32*
  store i32 0, i32* %211
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 1
  store i64 %213, i64* %PC
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %215 = load i64, i64* %214, align 8, !tbaa !2428
  %216 = add i64 %215, 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217
  store i64 %218, i64* %RBP, align 8, !tbaa !2428
  store i64 %216, i64* %214, align 8, !tbaa !2428
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %223 = load i64, i64* %222, align 8, !tbaa !2428
  %224 = inttoptr i64 %223 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %221, align 8, !tbaa !2428
  %226 = add i64 %223, 8
  store i64 %226, i64* %222, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400902:                                     ; preds = %block_4008f6
  %227 = sub i64 %131, 16
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 24
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = sext i32 %237 to i64
  store i64 %238, i64* %RCX, align 8, !tbaa !2428
  %239 = load i64, i64* %RCX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = sext i64 %239 to i128
  %243 = and i128 %242, -18446744073709551616
  %244 = zext i64 %239 to i128
  %245 = or i128 %243, %244
  %246 = mul nsw i128 12, %245
  %247 = trunc i128 %246 to i64
  store i64 %247, i64* %RCX, align 8, !tbaa !2428
  %248 = sext i64 %247 to i128
  %249 = icmp ne i128 %248, %246
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %250, i8* %251, align 1, !tbaa !2434
  %252 = trunc i128 %246 to i32
  %253 = and i32 %252, 255
  %254 = call i32 @llvm.ctpop.i32(i32 %253) #17
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %257, i8* %258, align 1, !tbaa !2447
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %259, align 1, !tbaa !2448
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %260, align 1, !tbaa !2449
  %261 = lshr i64 %247, 63
  %262 = trunc i64 %261 to i8
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %262, i8* %263, align 1, !tbaa !2450
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %250, i8* %264, align 1, !tbaa !2451
  %265 = load i64, i64* %RAX
  %266 = load i64, i64* %RCX
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  %269 = add i64 %266, %265
  store i64 %269, i64* %RAX, align 8, !tbaa !2428
  %270 = icmp ult i64 %269, %265
  %271 = icmp ult i64 %269, %266
  %272 = or i1 %270, %271
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %273, i8* %274, align 1, !tbaa !2434
  %275 = trunc i64 %269 to i32
  %276 = and i32 %275, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #17
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2447
  %282 = xor i64 %266, %265
  %283 = xor i64 %282, %269
  %284 = lshr i64 %283, 4
  %285 = trunc i64 %284 to i8
  %286 = and i8 %285, 1
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %286, i8* %287, align 1, !tbaa !2448
  %288 = icmp eq i64 %269, 0
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %289, i8* %290, align 1, !tbaa !2449
  %291 = lshr i64 %269, 63
  %292 = trunc i64 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %292, i8* %293, align 1, !tbaa !2450
  %294 = lshr i64 %265, 63
  %295 = lshr i64 %266, 63
  %296 = xor i64 %291, %294
  %297 = xor i64 %291, %295
  %298 = add nuw nsw i64 %296, %297
  %299 = icmp eq i64 %298, 2
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %300, i8* %301, align 1, !tbaa !2451
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 2
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i32*
  %306 = load i32, i32* %305
  %307 = zext i32 %306 to i64
  store i64 %307, i64* %RDX, align 8, !tbaa !2428
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 8
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312
  store i64 %313, i64* %RAX, align 8, !tbaa !2428
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 24
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 4
  store i64 %317, i64* %PC
  %318 = inttoptr i64 %315 to i32*
  %319 = load i32, i32* %318
  %320 = sext i32 %319 to i64
  store i64 %320, i64* %RCX, align 8, !tbaa !2428
  %321 = load i64, i64* %RCX
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 4
  store i64 %323, i64* %PC
  %324 = sext i64 %321 to i128
  %325 = and i128 %324, -18446744073709551616
  %326 = zext i64 %321 to i128
  %327 = or i128 %325, %326
  %328 = mul nsw i128 12, %327
  %329 = trunc i128 %328 to i64
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %330 = sext i64 %329 to i128
  %331 = icmp ne i128 %330, %328
  %332 = zext i1 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %332, i8* %333, align 1, !tbaa !2434
  %334 = trunc i128 %328 to i32
  %335 = and i32 %334, 255
  %336 = call i32 @llvm.ctpop.i32(i32 %335) #17
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = xor i8 %338, 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %339, i8* %340, align 1, !tbaa !2447
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %341, align 1, !tbaa !2448
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %342, align 1, !tbaa !2449
  %343 = lshr i64 %329, 63
  %344 = trunc i64 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %344, i8* %345, align 1, !tbaa !2450
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %332, i8* %346, align 1, !tbaa !2451
  %347 = load i64, i64* %RAX
  %348 = load i64, i64* %RCX
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 3
  store i64 %350, i64* %PC
  %351 = add i64 %348, %347
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = icmp ult i64 %351, %347
  %353 = icmp ult i64 %351, %348
  %354 = or i1 %352, %353
  %355 = zext i1 %354 to i8
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %355, i8* %356, align 1, !tbaa !2434
  %357 = trunc i64 %351 to i32
  %358 = and i32 %357, 255
  %359 = call i32 @llvm.ctpop.i32(i32 %358) #17
  %360 = trunc i32 %359 to i8
  %361 = and i8 %360, 1
  %362 = xor i8 %361, 1
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %362, i8* %363, align 1, !tbaa !2447
  %364 = xor i64 %348, %347
  %365 = xor i64 %364, %351
  %366 = lshr i64 %365, 4
  %367 = trunc i64 %366 to i8
  %368 = and i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %368, i8* %369, align 1, !tbaa !2448
  %370 = icmp eq i64 %351, 0
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %371, i8* %372, align 1, !tbaa !2449
  %373 = lshr i64 %351, 63
  %374 = trunc i64 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %374, i8* %375, align 1, !tbaa !2450
  %376 = lshr i64 %347, 63
  %377 = lshr i64 %348, 63
  %378 = xor i64 %373, %376
  %379 = xor i64 %373, %377
  %380 = add nuw nsw i64 %378, %379
  %381 = icmp eq i64 %380, 2
  %382 = zext i1 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %382, i8* %383, align 1, !tbaa !2451
  %384 = load i64, i64* %RAX
  %385 = load i32, i32* %EDX
  %386 = zext i32 %385 to i64
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 2
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %384 to i32*
  store i32 %385, i32* %389
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 16
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 24
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i32*
  %401 = load i32, i32* %400
  %402 = sext i32 %401 to i64
  store i64 %402, i64* %RCX, align 8, !tbaa !2428
  %403 = load i64, i64* %RCX
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = sext i64 %403 to i128
  %407 = and i128 %406, -18446744073709551616
  %408 = zext i64 %403 to i128
  %409 = or i128 %407, %408
  %410 = mul nsw i128 12, %409
  %411 = trunc i128 %410 to i64
  store i64 %411, i64* %RCX, align 8, !tbaa !2428
  %412 = sext i64 %411 to i128
  %413 = icmp ne i128 %412, %410
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %414, i8* %415, align 1, !tbaa !2434
  %416 = trunc i128 %410 to i32
  %417 = and i32 %416, 255
  %418 = call i32 @llvm.ctpop.i32(i32 %417) #17
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = xor i8 %420, 1
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %421, i8* %422, align 1, !tbaa !2447
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %423, align 1, !tbaa !2448
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %424, align 1, !tbaa !2449
  %425 = lshr i64 %411, 63
  %426 = trunc i64 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %426, i8* %427, align 1, !tbaa !2450
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %414, i8* %428, align 1, !tbaa !2451
  %429 = load i64, i64* %RAX
  %430 = load i64, i64* %RCX
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = add i64 %430, %429
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = icmp ult i64 %433, %429
  %435 = icmp ult i64 %433, %430
  %436 = or i1 %434, %435
  %437 = zext i1 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %437, i8* %438, align 1, !tbaa !2434
  %439 = trunc i64 %433 to i32
  %440 = and i32 %439, 255
  %441 = call i32 @llvm.ctpop.i32(i32 %440) #17
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = xor i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = xor i64 %430, %429
  %447 = xor i64 %446, %433
  %448 = lshr i64 %447, 4
  %449 = trunc i64 %448 to i8
  %450 = and i8 %449, 1
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %450, i8* %451, align 1, !tbaa !2448
  %452 = icmp eq i64 %433, 0
  %453 = zext i1 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %453, i8* %454, align 1, !tbaa !2449
  %455 = lshr i64 %433, 63
  %456 = trunc i64 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = lshr i64 %429, 63
  %459 = lshr i64 %430, 63
  %460 = xor i64 %455, %458
  %461 = xor i64 %455, %459
  %462 = add nuw nsw i64 %460, %461
  %463 = icmp eq i64 %462, 2
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %464, i8* %465, align 1, !tbaa !2451
  %466 = load i64, i64* %RAX
  %467 = add i64 %466, 4
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 3
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %467 to i32*
  %471 = load i32, i32* %470
  %472 = zext i32 %471 to i64
  store i64 %472, i64* %RDX, align 8, !tbaa !2428
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 8
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 4
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i64*
  %478 = load i64, i64* %477
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = load i64, i64* %RBP
  %480 = sub i64 %479, 24
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 4
  store i64 %482, i64* %PC
  %483 = inttoptr i64 %480 to i32*
  %484 = load i32, i32* %483
  %485 = sext i32 %484 to i64
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = load i64, i64* %RCX
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = sext i64 %486 to i128
  %490 = and i128 %489, -18446744073709551616
  %491 = zext i64 %486 to i128
  %492 = or i128 %490, %491
  %493 = mul nsw i128 12, %492
  %494 = trunc i128 %493 to i64
  store i64 %494, i64* %RCX, align 8, !tbaa !2428
  %495 = sext i64 %494 to i128
  %496 = icmp ne i128 %495, %493
  %497 = zext i1 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %497, i8* %498, align 1, !tbaa !2434
  %499 = trunc i128 %493 to i32
  %500 = and i32 %499, 255
  %501 = call i32 @llvm.ctpop.i32(i32 %500) #17
  %502 = trunc i32 %501 to i8
  %503 = and i8 %502, 1
  %504 = xor i8 %503, 1
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %504, i8* %505, align 1, !tbaa !2447
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %506, align 1, !tbaa !2448
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %507, align 1, !tbaa !2449
  %508 = lshr i64 %494, 63
  %509 = trunc i64 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %509, i8* %510, align 1, !tbaa !2450
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %497, i8* %511, align 1, !tbaa !2451
  %512 = load i64, i64* %RAX
  %513 = load i64, i64* %RCX
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 3
  store i64 %515, i64* %PC
  %516 = add i64 %513, %512
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = icmp ult i64 %516, %512
  %518 = icmp ult i64 %516, %513
  %519 = or i1 %517, %518
  %520 = zext i1 %519 to i8
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %520, i8* %521, align 1, !tbaa !2434
  %522 = trunc i64 %516 to i32
  %523 = and i32 %522, 255
  %524 = call i32 @llvm.ctpop.i32(i32 %523) #17
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %527, i8* %528, align 1, !tbaa !2447
  %529 = xor i64 %513, %512
  %530 = xor i64 %529, %516
  %531 = lshr i64 %530, 4
  %532 = trunc i64 %531 to i8
  %533 = and i8 %532, 1
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %533, i8* %534, align 1, !tbaa !2448
  %535 = icmp eq i64 %516, 0
  %536 = zext i1 %535 to i8
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %536, i8* %537, align 1, !tbaa !2449
  %538 = lshr i64 %516, 63
  %539 = trunc i64 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %539, i8* %540, align 1, !tbaa !2450
  %541 = lshr i64 %512, 63
  %542 = lshr i64 %513, 63
  %543 = xor i64 %538, %541
  %544 = xor i64 %538, %542
  %545 = add nuw nsw i64 %543, %544
  %546 = icmp eq i64 %545, 2
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %547, i8* %548, align 1, !tbaa !2451
  %549 = load i64, i64* %RAX
  %550 = add i64 %549, 4
  %551 = load i32, i32* %EDX
  %552 = zext i32 %551 to i64
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 3
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %550 to i32*
  store i32 %551, i32* %555
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 16
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 4
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %557 to i64*
  %561 = load i64, i64* %560
  store i64 %561, i64* %RAX, align 8, !tbaa !2428
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 24
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 4
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i32*
  %567 = load i32, i32* %566
  %568 = sext i32 %567 to i64
  store i64 %568, i64* %RCX, align 8, !tbaa !2428
  %569 = load i64, i64* %RCX
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC
  %572 = sext i64 %569 to i128
  %573 = and i128 %572, -18446744073709551616
  %574 = zext i64 %569 to i128
  %575 = or i128 %573, %574
  %576 = mul nsw i128 12, %575
  %577 = trunc i128 %576 to i64
  store i64 %577, i64* %RCX, align 8, !tbaa !2428
  %578 = sext i64 %577 to i128
  %579 = icmp ne i128 %578, %576
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %580, i8* %581, align 1, !tbaa !2434
  %582 = trunc i128 %576 to i32
  %583 = and i32 %582, 255
  %584 = call i32 @llvm.ctpop.i32(i32 %583) #17
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  %587 = xor i8 %586, 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %587, i8* %588, align 1, !tbaa !2447
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %589, align 1, !tbaa !2448
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %590, align 1, !tbaa !2449
  %591 = lshr i64 %577, 63
  %592 = trunc i64 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %592, i8* %593, align 1, !tbaa !2450
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %580, i8* %594, align 1, !tbaa !2451
  %595 = load i64, i64* %RAX
  %596 = load i64, i64* %RCX
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 3
  store i64 %598, i64* %PC
  %599 = add i64 %596, %595
  store i64 %599, i64* %RAX, align 8, !tbaa !2428
  %600 = icmp ult i64 %599, %595
  %601 = icmp ult i64 %599, %596
  %602 = or i1 %600, %601
  %603 = zext i1 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %603, i8* %604, align 1, !tbaa !2434
  %605 = trunc i64 %599 to i32
  %606 = and i32 %605, 255
  %607 = call i32 @llvm.ctpop.i32(i32 %606) #17
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  %610 = xor i8 %609, 1
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %610, i8* %611, align 1, !tbaa !2447
  %612 = xor i64 %596, %595
  %613 = xor i64 %612, %599
  %614 = lshr i64 %613, 4
  %615 = trunc i64 %614 to i8
  %616 = and i8 %615, 1
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %616, i8* %617, align 1, !tbaa !2448
  %618 = icmp eq i64 %599, 0
  %619 = zext i1 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %619, i8* %620, align 1, !tbaa !2449
  %621 = lshr i64 %599, 63
  %622 = trunc i64 %621 to i8
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %622, i8* %623, align 1, !tbaa !2450
  %624 = lshr i64 %595, 63
  %625 = lshr i64 %596, 63
  %626 = xor i64 %621, %624
  %627 = xor i64 %621, %625
  %628 = add nuw nsw i64 %626, %627
  %629 = icmp eq i64 %628, 2
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %630, i8* %631, align 1, !tbaa !2451
  %632 = load i64, i64* %RAX
  %633 = add i64 %632, 8
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i32*
  %637 = load i32, i32* %636
  %638 = zext i32 %637 to i64
  store i64 %638, i64* %RDX, align 8, !tbaa !2428
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 8
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i64*
  %644 = load i64, i64* %643
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i64, i64* %RBP
  %646 = sub i64 %645, 24
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 4
  store i64 %648, i64* %PC
  %649 = inttoptr i64 %646 to i32*
  %650 = load i32, i32* %649
  %651 = sext i32 %650 to i64
  store i64 %651, i64* %RCX, align 8, !tbaa !2428
  %652 = load i64, i64* %RCX
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 4
  store i64 %654, i64* %PC
  %655 = sext i64 %652 to i128
  %656 = and i128 %655, -18446744073709551616
  %657 = zext i64 %652 to i128
  %658 = or i128 %656, %657
  %659 = mul nsw i128 12, %658
  %660 = trunc i128 %659 to i64
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = sext i64 %660 to i128
  %662 = icmp ne i128 %661, %659
  %663 = zext i1 %662 to i8
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %663, i8* %664, align 1, !tbaa !2434
  %665 = trunc i128 %659 to i32
  %666 = and i32 %665, 255
  %667 = call i32 @llvm.ctpop.i32(i32 %666) #17
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %670, i8* %671, align 1, !tbaa !2447
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %672, align 1, !tbaa !2448
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %673, align 1, !tbaa !2449
  %674 = lshr i64 %660, 63
  %675 = trunc i64 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2450
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %663, i8* %677, align 1, !tbaa !2451
  %678 = load i64, i64* %RAX
  %679 = load i64, i64* %RCX
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 3
  store i64 %681, i64* %PC
  %682 = add i64 %679, %678
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = icmp ult i64 %682, %678
  %684 = icmp ult i64 %682, %679
  %685 = or i1 %683, %684
  %686 = zext i1 %685 to i8
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %686, i8* %687, align 1, !tbaa !2434
  %688 = trunc i64 %682 to i32
  %689 = and i32 %688, 255
  %690 = call i32 @llvm.ctpop.i32(i32 %689) #17
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = xor i8 %692, 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %693, i8* %694, align 1, !tbaa !2447
  %695 = xor i64 %679, %678
  %696 = xor i64 %695, %682
  %697 = lshr i64 %696, 4
  %698 = trunc i64 %697 to i8
  %699 = and i8 %698, 1
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %699, i8* %700, align 1, !tbaa !2448
  %701 = icmp eq i64 %682, 0
  %702 = zext i1 %701 to i8
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %702, i8* %703, align 1, !tbaa !2449
  %704 = lshr i64 %682, 63
  %705 = trunc i64 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %705, i8* %706, align 1, !tbaa !2450
  %707 = lshr i64 %678, 63
  %708 = lshr i64 %679, 63
  %709 = xor i64 %704, %707
  %710 = xor i64 %704, %708
  %711 = add nuw nsw i64 %709, %710
  %712 = icmp eq i64 %711, 2
  %713 = zext i1 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %713, i8* %714, align 1, !tbaa !2451
  %715 = load i64, i64* %RAX
  %716 = add i64 %715, 8
  %717 = load i32, i32* %EDX
  %718 = zext i32 %717 to i64
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 3
  store i64 %720, i64* %PC
  %721 = inttoptr i64 %716 to i32*
  store i32 %717, i32* %721
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 24
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 3
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  %727 = load i32, i32* %726
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = load i64, i64* %RAX
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 3
  store i64 %731, i64* %PC
  %732 = trunc i64 %729 to i32
  %733 = add i32 1, %732
  %734 = zext i32 %733 to i64
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = icmp ult i32 %733, %732
  %736 = icmp ult i32 %733, 1
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2434
  %740 = and i32 %733, 255
  %741 = call i32 @llvm.ctpop.i32(i32 %740) #17
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  %744 = xor i8 %743, 1
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %744, i8* %745, align 1, !tbaa !2447
  %746 = xor i64 1, %729
  %747 = trunc i64 %746 to i32
  %748 = xor i32 %747, %733
  %749 = lshr i32 %748, 4
  %750 = trunc i32 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2448
  %753 = icmp eq i32 %733, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2449
  %756 = lshr i32 %733, 31
  %757 = trunc i32 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2450
  %759 = lshr i32 %732, 31
  %760 = xor i32 %756, %759
  %761 = add nuw nsw i32 %760, %756
  %762 = icmp eq i32 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2451
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 24
  %767 = load i32, i32* %EAX
  %768 = zext i32 %767 to i64
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 3
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %766 to i32*
  store i32 %767, i32* %771
  %772 = load i64, i64* %PC
  %773 = sub i64 %772, 127
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 5
  store i64 %775, i64* %PC
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %773, i64* %776, align 8, !tbaa !2428
  br label %block_4008f6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400700_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400700:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6299752, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6299752
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6299752
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2434
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #17
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2447
  %50 = xor i64 6299752, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2450
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2451
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2452
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #17
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2452
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2452
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2452
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2452
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2452
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2452
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #17
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2452
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2452
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2452
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2452
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2452
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2434
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #17
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2448
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2451
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #17
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2452
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2452
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2452
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2452
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2452
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2449
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_400738, label %block_400723

block_40073a:                                     ; preds = %block_40072d
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, %190
  %193 = load i16, i16* %AX
  %194 = zext i16 %193 to i64
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400740___do_global_dtors_aux(%struct.State* %0, i64 %197, %struct.Memory* %2)
  ret %struct.Memory* %198

block_400735:                                     ; preds = %block_40072d
  %199 = load i64, i64* %RAX
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  br label %block_400738

block_40072d:                                     ; preds = %block_400723
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  store i64 6299752, i64* %RDI, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 2
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  switch i64 %217, label %269 [
    i64 4196154, label %block_40073a
    i64 4196149, label %block_400735
  ]

block_400738:                                     ; preds = %block_400723, %block_400735, %block_400700
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400700 ], [ %2, %block_400723 ], [ %2, %block_400735 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RBP, align 8, !tbaa !2428
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %227, align 8, !tbaa !2428
  %232 = add i64 %229, 8
  store i64 %232, i64* %228, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400723:                                     ; preds = %block_400700
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, %235
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2434
  %241 = trunc i64 %239 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #17
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2447
  %248 = icmp eq i64 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2449
  %251 = lshr i64 %239, 63
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2450
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %254, align 1, !tbaa !2451
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %255, align 1, !tbaa !2448
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 13
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 2
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %263 = load i8, i8* %262, align 1, !tbaa !2449
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = icmp ne i8 %263, 0
  %266 = select i1 %265, i64 %257, i64 %259
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_400738, label %block_40072d

; <label>:269:                                    ; preds = %block_40072d
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_401364__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401364:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2434
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #17
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2447
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2451
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2434
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #17
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2451
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012b0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = sub i64 %34, 16
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %38 = icmp ult i64 %34, 16
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2434
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = call i32 @llvm.ctpop.i32(i32 %42) #17
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2447
  %48 = xor i64 16, %34
  %49 = xor i64 %48, %37
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = icmp eq i64 %37, 0
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = lshr i64 %37, 63
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %58, i8* %59, align 1, !tbaa !2450
  %60 = lshr i64 %34, 63
  %61 = xor i64 %57, %60
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2451
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 4
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 7
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %67 to i32*
  store i32 0, i32* %70
  %71 = load i64, i64* %RBP
  %72 = sub i64 %71, 8
  %73 = load i32, i32* %EDI
  %74 = zext i32 %73 to i64
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 3
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %72 to i32*
  store i32 %73, i32* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %RSI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %PC
  %85 = sub i64 %84, 438
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 5
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %85, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = call %struct.Memory* @sub_401110_getInput_renamed_(%struct.State* %0, i64 %95, %struct.Memory* %2)
  %97 = load i32, i32* %EAX
  %98 = zext i32 %97 to i64
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %101, align 1, !tbaa !2434
  %102 = and i32 %97, 255
  %103 = call i32 @llvm.ctpop.i32(i32 %102) #17
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %106, i8* %107, align 1, !tbaa !2447
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %108, align 1, !tbaa !2448
  %109 = icmp eq i32 %97, 0
  %110 = zext i1 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %110, i8* %111, align 1, !tbaa !2449
  %112 = lshr i32 %97, 31
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = lshr i32 %97, 31
  %116 = xor i32 %112, %115
  %117 = add nuw nsw i32 %116, %115
  %118 = icmp eq i32 %117, 2
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %119, i8* %120, align 1, !tbaa !2451
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 11
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 6
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 6
  store i64 %126, i64* %PC
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %128 = load i8, i8* %127, align 1, !tbaa !2449
  store i8 %128, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = icmp ne i8 %128, 0
  %131 = select i1 %130, i64 %122, i64 %124
  store i64 %131, i64* %129, align 8, !tbaa !2428
  %132 = load i8, i8* %BRANCH_TAKEN
  %133 = icmp eq i8 %132, 1
  br i1 %133, label %block_4012d9, label %block_4012d4

block_4012d4:                                     ; preds = %block_4012b0
  %134 = load i64, i64* %PC
  %135 = sub i64 %134, 84
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 5
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 5
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %141 = load i64, i64* %140, align 8, !tbaa !2428
  %142 = add i64 %141, -8
  %143 = inttoptr i64 %142 to i64*
  store i64 %137, i64* %143
  store i64 %142, i64* %140, align 8, !tbaa !2428
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %135, i64* %144, align 8, !tbaa !2428
  %145 = load i64, i64* %PC
  %146 = call %struct.Memory* @sub_401280_search_renamed_(%struct.State* %0, i64 %145, %struct.Memory* %96)
  br label %block_4012d9

block_4012d9:                                     ; preds = %block_4012d4, %block_4012b0
  %MEMORY.0 = phi %struct.Memory* [ %96, %block_4012b0 ], [ %146, %block_4012d4 ]
  %147 = load i64, i64* %RAX
  %148 = load i32, i32* %EAX
  %149 = zext i32 %148 to i64
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 2
  store i64 %151, i64* %PC
  %152 = xor i64 %149, %147
  %153 = trunc i64 %152 to i32
  %154 = and i64 %152, 4294967295
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %155, align 1, !tbaa !2434
  %156 = and i32 %153, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #17
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2447
  %162 = icmp eq i32 %153, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i32 %153, 31
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %168, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2448
  %170 = load i64, i64* %RSP
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = add i64 16, %170
  store i64 %173, i64* %RSP, align 8, !tbaa !2428
  %174 = icmp ult i64 %173, %170
  %175 = icmp ult i64 %173, 16
  %176 = or i1 %174, %175
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %177, i8* %178, align 1, !tbaa !2434
  %179 = trunc i64 %173 to i32
  %180 = and i32 %179, 255
  %181 = call i32 @llvm.ctpop.i32(i32 %180) #17
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %184, i8* %185, align 1, !tbaa !2447
  %186 = xor i64 16, %170
  %187 = xor i64 %186, %173
  %188 = lshr i64 %187, 4
  %189 = trunc i64 %188 to i8
  %190 = and i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %190, i8* %191, align 1, !tbaa !2448
  %192 = icmp eq i64 %173, 0
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %193, i8* %194, align 1, !tbaa !2449
  %195 = lshr i64 %173, 63
  %196 = trunc i64 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %196, i8* %197, align 1, !tbaa !2450
  %198 = lshr i64 %170, 63
  %199 = xor i64 %195, %198
  %200 = add nuw nsw i64 %199, %195
  %201 = icmp eq i64 %200, 2
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %202, i8* %203, align 1, !tbaa !2451
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 1
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %215 = load i64, i64* %214, align 8, !tbaa !2428
  %216 = inttoptr i64 %215 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %213, align 8, !tbaa !2428
  %218 = add i64 %215, 8
  store i64 %218, i64* %214, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400740___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400740:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 40) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2434
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #17
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2448
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2449
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2451
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2449
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400760, label %block_400749

block_400760:                                     ; preds = %block_400740
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400749:                                     ; preds = %block_400740
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4006d0_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 40) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b21(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 7
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EAX = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDX = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %ESI = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  br label %block_400b21

block_400bb6:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 165), i64* %RDI, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 2
  store i64 %50, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %51 = load i64, i64* %PC
  %52 = sub i64 %51, 1426
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 5
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 5
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %52, i64* %61, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %62, %struct.Memory* %901)
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 76
  %66 = load i32, i32* %EAX
  %67 = zext i32 %66 to i64
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %65 to i32*
  store i32 %66, i32* %70
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 25
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %72, i64* %75, align 8, !tbaa !2428
  br label %block_400be3

block_400aaf:                                     ; preds = %block_400a62
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 32
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = load i64, i64* %RAX
  %83 = mul i64 %82, 8
  %84 = add i64 %83, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 40)
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 8
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RCX, align 8, !tbaa !2428
  %89 = load i64, i64* %RCX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 2
  store i64 %91, i64* %PC
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %89, i64* %92, align 8, !tbaa !2428
  %93 = load i64, i64* %PC
  switch i64 %93, label %1019 [
    i64 4197153, label %block_400b21
    i64 4197128, label %block_400b08
    i64 4197053, label %block_400abd
    i64 4197103, label %block_400aef
    i64 4197078, label %block_400ad6
  ]

block_400ad6:                                     ; preds = %block_400aaf
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 10
  store i64 %95, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 145), i64* %RDI, align 8, !tbaa !2428
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 2
  store i64 %97, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %98 = load i64, i64* %PC
  %99 = sub i64 %98, 1202
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 5
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 5
  store i64 %103, i64* %PC
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %105 = load i64, i64* %104, align 8, !tbaa !2428
  %106 = add i64 %105, -8
  %107 = inttoptr i64 %106 to i64*
  store i64 %101, i64* %107
  store i64 %106, i64* %104, align 8, !tbaa !2428
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %99, i64* %108, align 8, !tbaa !2428
  %109 = load i64, i64* %PC
  %110 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %109, %struct.Memory* %556)
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 48
  %113 = load i32, i32* %EAX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 118
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %119, i64* %122, align 8, !tbaa !2428
  br label %block_400b60

block_400bf6:                                     ; preds = %block_400be3
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 10
  store i64 %124, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 2
  store i64 %126, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %127 = load i64, i64* %PC
  %128 = sub i64 %127, 1490
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, -8
  %136 = inttoptr i64 %135 to i64*
  store i64 %130, i64* %136
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %128, i64* %137, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %138, %struct.Memory* %MEMORY.0)
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 84
  %142 = load i32, i32* %EAX
  %143 = zext i32 %142 to i64
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %141 to i32*
  store i32 %142, i32* %146
  %147 = load i64, i64* %RSP
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC
  %150 = add i64 96, %147
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  %151 = icmp ult i64 %150, %147
  %152 = icmp ult i64 %150, 96
  %153 = or i1 %151, %152
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %154, i8* %155, align 1, !tbaa !2434
  %156 = trunc i64 %150 to i32
  %157 = and i32 %156, 255
  %158 = call i32 @llvm.ctpop.i32(i32 %157) #17
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = xor i8 %160, 1
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %161, i8* %162, align 1, !tbaa !2447
  %163 = xor i64 96, %147
  %164 = xor i64 %163, %150
  %165 = lshr i64 %164, 4
  %166 = trunc i64 %165 to i8
  %167 = and i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %167, i8* %168, align 1, !tbaa !2448
  %169 = icmp eq i64 %150, 0
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %170, i8* %171, align 1, !tbaa !2449
  %172 = lshr i64 %150, 63
  %173 = trunc i64 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %173, i8* %174, align 1, !tbaa !2450
  %175 = lshr i64 %147, 63
  %176 = xor i64 %172, %175
  %177 = add nuw nsw i64 %176, %172
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %180, align 1, !tbaa !2451
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 1
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %184 = load i64, i64* %183, align 8, !tbaa !2428
  %185 = add i64 %184, 8
  %186 = inttoptr i64 %184 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %RBP, align 8, !tbaa !2428
  store i64 %185, i64* %183, align 8, !tbaa !2428
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 1
  store i64 %189, i64* %PC
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %192 = load i64, i64* %191, align 8, !tbaa !2428
  %193 = inttoptr i64 %192 to i64*
  %194 = load i64, i64* %193
  store i64 %194, i64* %190, align 8, !tbaa !2428
  %195 = add i64 %192, 8
  store i64 %195, i64* %191, align 8, !tbaa !2428
  ret %struct.Memory* %139

block_400bcf:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 2
  store i64 %197, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %198 = load i64, i64* %PC
  %199 = sub i64 %198, 1451
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 5
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 5
  store i64 %203, i64* %PC
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %205 = load i64, i64* %204, align 8, !tbaa !2428
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %201, i64* %207
  store i64 %206, i64* %204, align 8, !tbaa !2428
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %199, i64* %208, align 8, !tbaa !2428
  %209 = load i64, i64* %PC
  %210 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %209, %struct.Memory* %901)
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 80
  %213 = load i32, i32* %EAX
  %214 = zext i32 %213 to i64
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %212 to i32*
  store i32 %213, i32* %217
  br label %block_400be3

block_400b3a:                                     ; preds = %block_400a62
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 10
  store i64 %219, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 153), i64* %RDI, align 8, !tbaa !2428
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 8
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 16
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = sext i32 %231 to i64
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RCX
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = sext i64 %233 to i128
  %237 = and i128 %236, -18446744073709551616
  %238 = zext i64 %233 to i128
  %239 = or i128 %237, %238
  %240 = mul nsw i128 12, %239
  %241 = trunc i128 %240 to i64
  store i64 %241, i64* %RCX, align 8, !tbaa !2428
  %242 = sext i64 %241 to i128
  %243 = icmp ne i128 %242, %240
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %244, i8* %245, align 1, !tbaa !2434
  %246 = trunc i128 %240 to i32
  %247 = and i32 %246, 255
  %248 = call i32 @llvm.ctpop.i32(i32 %247) #17
  %249 = trunc i32 %248 to i8
  %250 = and i8 %249, 1
  %251 = xor i8 %250, 1
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %251, i8* %252, align 1, !tbaa !2447
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %253, align 1, !tbaa !2448
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %254, align 1, !tbaa !2449
  %255 = lshr i64 %241, 63
  %256 = trunc i64 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %244, i8* %258, align 1, !tbaa !2451
  %259 = load i64, i64* %RAX
  %260 = load i64, i64* %RCX
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = add i64 %260, %259
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = icmp ult i64 %263, %259
  %265 = icmp ult i64 %263, %260
  %266 = or i1 %264, %265
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %267, i8* %268, align 1, !tbaa !2434
  %269 = trunc i64 %263 to i32
  %270 = and i32 %269, 255
  %271 = call i32 @llvm.ctpop.i32(i32 %270) #17
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %274, i8* %275, align 1, !tbaa !2447
  %276 = xor i64 %260, %259
  %277 = xor i64 %276, %263
  %278 = lshr i64 %277, 4
  %279 = trunc i64 %278 to i8
  %280 = and i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %280, i8* %281, align 1, !tbaa !2448
  %282 = icmp eq i64 %263, 0
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %283, i8* %284, align 1, !tbaa !2449
  %285 = lshr i64 %263, 63
  %286 = trunc i64 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %286, i8* %287, align 1, !tbaa !2450
  %288 = lshr i64 %259, 63
  %289 = lshr i64 %260, 63
  %290 = xor i64 %285, %288
  %291 = xor i64 %285, %289
  %292 = add nuw nsw i64 %290, %291
  %293 = icmp eq i64 %292, 2
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %294, i8* %295, align 1, !tbaa !2451
  %296 = load i64, i64* %RAX
  %297 = add i64 %296, 8
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 3
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i32*
  %301 = load i32, i32* %300
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %RSI, align 8, !tbaa !2428
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 2
  store i64 %304, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %305 = load i64, i64* %PC
  %306 = sub i64 %305, 1320
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 5
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %312 = load i64, i64* %311, align 8, !tbaa !2428
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %308, i64* %314
  store i64 %313, i64* %311, align 8, !tbaa !2428
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %306, i64* %315, align 8, !tbaa !2428
  %316 = load i64, i64* %PC
  %317 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %316, %struct.Memory* %556)
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 64
  %320 = load i32, i32* %EAX
  %321 = zext i32 %320 to i64
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %319 to i32*
  store i32 %320, i32* %324
  br label %block_400b60

block_400be3:                                     ; preds = %block_400bcf, %block_400bb6
  %MEMORY.0 = phi %struct.Memory* [ %210, %block_400bcf ], [ %63, %block_400bb6 ]
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %326, i64* %329, align 8, !tbaa !2428
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 16
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i32*
  %335 = load i32, i32* %334
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = trunc i64 %337 to i32
  %341 = add i32 1, %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = icmp ult i32 %341, %340
  %344 = icmp ult i32 %341, 1
  %345 = or i1 %343, %344
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %346, i8* %347, align 1, !tbaa !2434
  %348 = and i32 %341, 255
  %349 = call i32 @llvm.ctpop.i32(i32 %348) #17
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  %352 = xor i8 %351, 1
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %352, i8* %353, align 1, !tbaa !2447
  %354 = xor i64 1, %337
  %355 = trunc i64 %354 to i32
  %356 = xor i32 %355, %341
  %357 = lshr i32 %356, 4
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %359, i8* %360, align 1, !tbaa !2448
  %361 = icmp eq i32 %341, 0
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %362, i8* %363, align 1, !tbaa !2449
  %364 = lshr i32 %341, 31
  %365 = trunc i32 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %365, i8* %366, align 1, !tbaa !2450
  %367 = lshr i32 %340, 31
  %368 = xor i32 %364, %367
  %369 = add nuw nsw i32 %368, %364
  %370 = icmp eq i32 %369, 2
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %371, i8* %372, align 1, !tbaa !2451
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 16
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %379
  %380 = load i64, i64* %PC
  %381 = sub i64 %380, 411
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %381, i64* %384, align 8, !tbaa !2428
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 16
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 3
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389
  %391 = zext i32 %390 to i64
  store i64 %391, i64* %RAX, align 8, !tbaa !2428
  %392 = load i32, i32* %EAX
  %393 = zext i32 %392 to i64
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 12
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sub i32 %392, %399
  %401 = icmp ult i32 %392, %399
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %402, i8* %403, align 1, !tbaa !2434
  %404 = and i32 %400, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #17
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = xor i32 %399, %392
  %411 = xor i32 %410, %400
  %412 = lshr i32 %411, 4
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = icmp eq i32 %400, 0
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %417, i8* %418, align 1, !tbaa !2449
  %419 = lshr i32 %400, 31
  %420 = trunc i32 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = lshr i32 %392, 31
  %423 = lshr i32 %399, 31
  %424 = xor i32 %423, %422
  %425 = xor i32 %419, %422
  %426 = add nuw nsw i32 %425, %424
  %427 = icmp eq i32 %426, 2
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %428, i8* %429, align 1, !tbaa !2451
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 410
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 6
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 6
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %437 = load i8, i8* %436, align 1, !tbaa !2450
  %438 = icmp ne i8 %437, 0
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %440 = load i8, i8* %439, align 1, !tbaa !2451
  %441 = icmp ne i8 %440, 0
  %442 = xor i1 %438, %441
  %443 = xor i1 %442, true
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %446 = select i1 %442, i64 %433, i64 %431
  store i64 %446, i64* %445, align 8, !tbaa !2428
  %447 = load i8, i8* %BRANCH_TAKEN
  %448 = icmp eq i8 %447, 1
  br i1 %448, label %block_400bf6, label %block_400a62

block_400abd:                                     ; preds = %block_400aaf
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 10
  store i64 %450, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 166), i64* %RDI, align 8, !tbaa !2428
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 2
  store i64 %452, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %453 = load i64, i64* %PC
  %454 = sub i64 %453, 1177
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 5
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 5
  store i64 %458, i64* %PC
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %460 = load i64, i64* %459, align 8, !tbaa !2428
  %461 = add i64 %460, -8
  %462 = inttoptr i64 %461 to i64*
  store i64 %456, i64* %462
  store i64 %461, i64* %459, align 8, !tbaa !2428
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %454, i64* %463, align 8, !tbaa !2428
  %464 = load i64, i64* %PC
  %465 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %464, %struct.Memory* %556)
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 44
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %472
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 143
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %477, align 8, !tbaa !2428
  br label %block_400b60

block_400a62:                                     ; preds = %block_400be3
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 8
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 16
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  %488 = inttoptr i64 %485 to i32*
  %489 = load i32, i32* %488
  %490 = sext i32 %489 to i64
  store i64 %490, i64* %RCX, align 8, !tbaa !2428
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %RCX
  %493 = mul i64 %492, 2
  %494 = add i64 %493, %491
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 4
  store i64 %496, i64* %PC
  store i64 %494, i64* %RCX, align 8, !tbaa !2428
  %497 = load i64, i64* %RAX
  %498 = load i64, i64* %RCX
  %499 = mul i64 %498, 4
  %500 = add i64 %499, %497
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RSI, align 8, !tbaa !2428
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  store i64 %507, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64 4294967295), i64* %RDX, align 8, !tbaa !2428
  %508 = load i32, i32* %EDX
  %509 = zext i32 %508 to i64
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 2
  store i64 %511, i64* %PC
  %512 = and i64 %509, 4294967295
  store i64 %512, i64* %RDI, align 8, !tbaa !2428
  %513 = load i64, i64* %RDX
  %514 = load i32, i32* %EDX
  %515 = zext i32 %514 to i64
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 2
  store i64 %517, i64* %PC
  %518 = xor i64 %515, %513
  %519 = trunc i64 %518 to i32
  %520 = and i64 %518, 4294967295
  store i64 %520, i64* %RDX, align 8, !tbaa !2428
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %521, align 1, !tbaa !2434
  %522 = and i32 %519, 255
  %523 = call i32 @llvm.ctpop.i32(i32 %522) #17
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %526, i8* %527, align 1, !tbaa !2447
  %528 = icmp eq i32 %519, 0
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %529, i8* %530, align 1, !tbaa !2449
  %531 = lshr i32 %519, 31
  %532 = trunc i32 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %532, i8* %533, align 1, !tbaa !2450
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %534, align 1, !tbaa !2451
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %535, align 1, !tbaa !2448
  %536 = load i8, i8* %DL
  %537 = zext i8 %536 to i64
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 3
  store i64 %539, i64* %PC
  store i8 %536, i8* %R8B, align 1, !tbaa !2452
  %540 = load i8, i8* %R8B
  %541 = zext i8 %540 to i64
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 3
  store i64 %543, i64* %PC
  store i8 %540, i8* %AL, align 1, !tbaa !2452
  %544 = load i64, i64* %PC
  %545 = sub i64 %544, 1104
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  store i64 %549, i64* %PC
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %551 = load i64, i64* %550, align 8, !tbaa !2428
  %552 = add i64 %551, -8
  %553 = inttoptr i64 %552 to i64*
  store i64 %547, i64* %553
  store i64 %552, i64* %550, align 8, !tbaa !2428
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %545, i64* %554, align 8, !tbaa !2428
  %555 = load i64, i64* %PC
  %556 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %555, %struct.Memory* %MEMORY.0)
  %557 = load i64, i64* %RBP
  %558 = sub i64 %557, 8
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561
  store i64 %562, i64* %RCX, align 8, !tbaa !2428
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 16
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sext i32 %568 to i64
  store i64 %569, i64* %RDI, align 8, !tbaa !2428
  %570 = load i64, i64* %RDI
  %571 = load i64, i64* %RDI
  %572 = mul i64 %571, 2
  %573 = add i64 %572, %570
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  store i64 %573, i64* %RDI, align 8, !tbaa !2428
  %576 = load i64, i64* %RCX
  %577 = load i64, i64* %RDI
  %578 = mul i64 %577, 4
  %579 = add i64 %576, 8
  %580 = add i64 %579, %578
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i32*
  %584 = load i32, i32* %583
  %585 = zext i32 %584 to i64
  store i64 %585, i64* %RDX, align 8, !tbaa !2428
  %586 = load i32, i32* %EDX
  %587 = zext i32 %586 to i64
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 2
  store i64 %589, i64* %PC
  %590 = and i64 %587, 4294967295
  store i64 %590, i64* %RCX, align 8, !tbaa !2428
  %591 = load i64, i64* %RCX
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  store i64 %591, i64* %RDI, align 8, !tbaa !2428
  %594 = load i64, i64* %RDI
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = sub i64 %594, 4
  store i64 %597, i64* %RDI, align 8, !tbaa !2428
  %598 = icmp ult i64 %594, 4
  %599 = zext i1 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %599, i8* %600, align 1, !tbaa !2434
  %601 = trunc i64 %597 to i32
  %602 = and i32 %601, 255
  %603 = call i32 @llvm.ctpop.i32(i32 %602) #17
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = xor i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %606, i8* %607, align 1, !tbaa !2447
  %608 = xor i64 4, %594
  %609 = xor i64 %608, %597
  %610 = lshr i64 %609, 4
  %611 = trunc i64 %610 to i8
  %612 = and i8 %611, 1
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %612, i8* %613, align 1, !tbaa !2448
  %614 = icmp eq i64 %597, 0
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %615, i8* %616, align 1, !tbaa !2449
  %617 = lshr i64 %597, 63
  %618 = trunc i64 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %618, i8* %619, align 1, !tbaa !2450
  %620 = lshr i64 %594, 63
  %621 = xor i64 %617, %620
  %622 = add nuw nsw i64 %621, %620
  %623 = icmp eq i64 %622, 2
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %624, i8* %625, align 1, !tbaa !2451
  %626 = load i64, i64* %RBP
  %627 = sub i64 %626, 20
  %628 = load i32, i32* %EAX
  %629 = zext i32 %628 to i64
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 3
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %627 to i32*
  store i32 %628, i32* %632
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 32
  %635 = load i64, i64* %RCX
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 4
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %634 to i64*
  store i64 %635, i64* %638
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 40
  %641 = load i64, i64* %RDI
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 4
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %640 to i64*
  store i64 %641, i64* %644
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 145
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 6
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 6
  store i64 %650, i64* %PC
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %652 = load i8, i8* %651, align 1, !tbaa !2434
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %654 = load i8, i8* %653, align 1, !tbaa !2449
  %655 = or i8 %654, %652
  %656 = icmp eq i8 %655, 0
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %659 = select i1 %656, i64 %646, i64 %648
  store i64 %659, i64* %658, align 8, !tbaa !2428
  %660 = load i8, i8* %BRANCH_TAKEN
  %661 = icmp eq i8 %660, 1
  br i1 %661, label %block_400b3a, label %block_400aaf

block_400b21:                                     ; preds = %block_400aaf, %3
  %MEMORY.1 = phi %struct.Memory* [ %2, %3 ], [ %556, %block_400aaf ]
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 10
  store i64 %663, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 151), i64* %RDI, align 8, !tbaa !2428
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 2
  store i64 %665, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %666 = load i64, i64* %PC
  %667 = sub i64 %666, 1277
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 5
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 5
  store i64 %671, i64* %PC
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %673 = load i64, i64* %672, align 8, !tbaa !2428
  %674 = add i64 %673, -8
  %675 = inttoptr i64 %674 to i64*
  store i64 %669, i64* %675
  store i64 %674, i64* %672, align 8, !tbaa !2428
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %667, i64* %676, align 8, !tbaa !2428
  %677 = load i64, i64* %PC
  %678 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %677, %struct.Memory* %MEMORY.1)
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 60
  %681 = load i32, i32* %EAX
  %682 = zext i32 %681 to i64
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 3
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %680 to i32*
  store i32 %681, i32* %685
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 43
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 5
  store i64 %689, i64* %PC
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %687, i64* %690, align 8, !tbaa !2428
  br label %block_400b60

block_400b60:                                     ; preds = %block_400b21, %block_400abd, %block_400b3a, %block_400ad6
  %MEMORY.2 = phi %struct.Memory* [ %678, %block_400b21 ], [ %317, %block_400b3a ], [ %110, %block_400ad6 ], [ %465, %block_400abd ]
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 8
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i64*
  %696 = load i64, i64* %695
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 16
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to i32*
  %702 = load i32, i32* %701
  %703 = sext i32 %702 to i64
  store i64 %703, i64* %RCX, align 8, !tbaa !2428
  %704 = load i64, i64* %RCX
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 4
  store i64 %706, i64* %PC
  %707 = sext i64 %704 to i128
  %708 = and i128 %707, -18446744073709551616
  %709 = zext i64 %704 to i128
  %710 = or i128 %708, %709
  %711 = mul nsw i128 12, %710
  %712 = trunc i128 %711 to i64
  store i64 %712, i64* %RCX, align 8, !tbaa !2428
  %713 = sext i64 %712 to i128
  %714 = icmp ne i128 %713, %711
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %715, i8* %716, align 1, !tbaa !2434
  %717 = trunc i128 %711 to i32
  %718 = and i32 %717, 255
  %719 = call i32 @llvm.ctpop.i32(i32 %718) #17
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %722, i8* %723, align 1, !tbaa !2447
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %724, align 1, !tbaa !2448
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %725, align 1, !tbaa !2449
  %726 = lshr i64 %712, 63
  %727 = trunc i64 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %727, i8* %728, align 1, !tbaa !2450
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %715, i8* %729, align 1, !tbaa !2451
  %730 = load i64, i64* %RAX
  %731 = load i64, i64* %RCX
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 3
  store i64 %733, i64* %PC
  %734 = add i64 %731, %730
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = icmp ult i64 %734, %730
  %736 = icmp ult i64 %734, %731
  %737 = or i1 %735, %736
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %738, i8* %739, align 1, !tbaa !2434
  %740 = trunc i64 %734 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #17
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2447
  %747 = xor i64 %731, %730
  %748 = xor i64 %747, %734
  %749 = lshr i64 %748, 4
  %750 = trunc i64 %749 to i8
  %751 = and i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %751, i8* %752, align 1, !tbaa !2448
  %753 = icmp eq i64 %734, 0
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %754, i8* %755, align 1, !tbaa !2449
  %756 = lshr i64 %734, 63
  %757 = trunc i64 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %757, i8* %758, align 1, !tbaa !2450
  %759 = lshr i64 %730, 63
  %760 = lshr i64 %731, 63
  %761 = xor i64 %756, %759
  %762 = xor i64 %756, %760
  %763 = add nuw nsw i64 %761, %762
  %764 = icmp eq i64 %763, 2
  %765 = zext i1 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %765, i8* %766, align 1, !tbaa !2451
  %767 = load i64, i64* %RAX
  %768 = add i64 %767, 4
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 3
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %768 to i32*
  %772 = load i32, i32* %771
  %773 = zext i32 %772 to i64
  store i64 %773, i64* %RSI, align 8, !tbaa !2428
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 8
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 4
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to i64*
  %779 = load i64, i64* %778
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 16
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 4
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  %785 = load i32, i32* %784
  %786 = sext i32 %785 to i64
  store i64 %786, i64* %RCX, align 8, !tbaa !2428
  %787 = load i64, i64* %RCX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 4
  store i64 %789, i64* %PC
  %790 = sext i64 %787 to i128
  %791 = and i128 %790, -18446744073709551616
  %792 = zext i64 %787 to i128
  %793 = or i128 %791, %792
  %794 = mul nsw i128 12, %793
  %795 = trunc i128 %794 to i64
  store i64 %795, i64* %RCX, align 8, !tbaa !2428
  %796 = sext i64 %795 to i128
  %797 = icmp ne i128 %796, %794
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %798, i8* %799, align 1, !tbaa !2434
  %800 = trunc i128 %794 to i32
  %801 = and i32 %800, 255
  %802 = call i32 @llvm.ctpop.i32(i32 %801) #17
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  %805 = xor i8 %804, 1
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %805, i8* %806, align 1, !tbaa !2447
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %807, align 1, !tbaa !2448
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %808, align 1, !tbaa !2449
  %809 = lshr i64 %795, 63
  %810 = trunc i64 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %810, i8* %811, align 1, !tbaa !2450
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %798, i8* %812, align 1, !tbaa !2451
  %813 = load i64, i64* %RAX
  %814 = load i64, i64* %RCX
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 3
  store i64 %816, i64* %PC
  %817 = add i64 %814, %813
  store i64 %817, i64* %RAX, align 8, !tbaa !2428
  %818 = icmp ult i64 %817, %813
  %819 = icmp ult i64 %817, %814
  %820 = or i1 %818, %819
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %821, i8* %822, align 1, !tbaa !2434
  %823 = trunc i64 %817 to i32
  %824 = and i32 %823, 255
  %825 = call i32 @llvm.ctpop.i32(i32 %824) #17
  %826 = trunc i32 %825 to i8
  %827 = and i8 %826, 1
  %828 = xor i8 %827, 1
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %828, i8* %829, align 1, !tbaa !2447
  %830 = xor i64 %814, %813
  %831 = xor i64 %830, %817
  %832 = lshr i64 %831, 4
  %833 = trunc i64 %832 to i8
  %834 = and i8 %833, 1
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %834, i8* %835, align 1, !tbaa !2448
  %836 = icmp eq i64 %817, 0
  %837 = zext i1 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %837, i8* %838, align 1, !tbaa !2449
  %839 = lshr i64 %817, 63
  %840 = trunc i64 %839 to i8
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %840, i8* %841, align 1, !tbaa !2450
  %842 = lshr i64 %813, 63
  %843 = lshr i64 %814, 63
  %844 = xor i64 %839, %842
  %845 = xor i64 %839, %843
  %846 = add nuw nsw i64 %844, %845
  %847 = icmp eq i64 %846, 2
  %848 = zext i1 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %848, i8* %849, align 1, !tbaa !2451
  %850 = load i64, i64* %RAX
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 3
  store i64 %852, i64* %PC
  store i64 %850, i64* %RDI, align 8, !tbaa !2428
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 68
  %855 = load i32, i32* %ESI
  %856 = zext i32 %855 to i64
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %854 to i32*
  store i32 %855, i32* %859
  %860 = load i64, i64* %PC
  %861 = sub i64 %860, 487
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %867 = load i64, i64* %866, align 8, !tbaa !2428
  %868 = add i64 %867, -8
  %869 = inttoptr i64 %868 to i64*
  store i64 %863, i64* %869
  store i64 %868, i64* %866, align 8, !tbaa !2428
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %861, i64* %870, align 8, !tbaa !2428
  %871 = load i64, i64* %PC
  %872 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %871, %struct.Memory* %MEMORY.2)
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 10
  store i64 %874, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 159), i64* %RDI, align 8, !tbaa !2428
  %875 = load i64, i64* %RBP
  %876 = sub i64 %875, 68
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RSI, align 8, !tbaa !2428
  %882 = load i32, i32* %EAX
  %883 = zext i32 %882 to i64
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 2
  store i64 %885, i64* %PC
  %886 = and i64 %883, 4294967295
  store i64 %886, i64* %RDX, align 8, !tbaa !2428
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 2
  store i64 %888, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %889 = load i64, i64* %PC
  %890 = sub i64 %889, 1389
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 5
  store i64 %894, i64* %PC
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %896 = load i64, i64* %895, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %892, i64* %898
  store i64 %897, i64* %895, align 8, !tbaa !2428
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %890, i64* %899, align 8, !tbaa !2428
  %900 = load i64, i64* %PC
  %901 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %900, %struct.Memory* %872)
  %902 = load i64, i64* %RBP
  %903 = sub i64 %902, 16
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 3
  store i64 %905, i64* %PC
  %906 = inttoptr i64 %903 to i32*
  %907 = load i32, i32* %906
  %908 = zext i32 %907 to i64
  store i64 %908, i64* %RDX, align 8, !tbaa !2428
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 12
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 3
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i32*
  %914 = load i32, i32* %913
  %915 = zext i32 %914 to i64
  store i64 %915, i64* %RSI, align 8, !tbaa !2428
  %916 = load i64, i64* %RSI
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 3
  store i64 %918, i64* %PC
  %919 = trunc i64 %916 to i32
  %920 = sub i32 %919, 1
  %921 = zext i32 %920 to i64
  store i64 %921, i64* %RSI, align 8, !tbaa !2428
  %922 = icmp ult i32 %919, 1
  %923 = zext i1 %922 to i8
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %923, i8* %924, align 1, !tbaa !2434
  %925 = and i32 %920, 255
  %926 = call i32 @llvm.ctpop.i32(i32 %925) #17
  %927 = trunc i32 %926 to i8
  %928 = and i8 %927, 1
  %929 = xor i8 %928, 1
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %929, i8* %930, align 1, !tbaa !2447
  %931 = xor i64 1, %916
  %932 = trunc i64 %931 to i32
  %933 = xor i32 %932, %920
  %934 = lshr i32 %933, 4
  %935 = trunc i32 %934 to i8
  %936 = and i8 %935, 1
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %936, i8* %937, align 1, !tbaa !2448
  %938 = icmp eq i32 %920, 0
  %939 = zext i1 %938 to i8
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %939, i8* %940, align 1, !tbaa !2449
  %941 = lshr i32 %920, 31
  %942 = trunc i32 %941 to i8
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %942, i8* %943, align 1, !tbaa !2450
  %944 = lshr i32 %919, 31
  %945 = xor i32 %941, %944
  %946 = add nuw nsw i32 %945, %944
  %947 = icmp eq i32 %946, 2
  %948 = zext i1 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %948, i8* %949, align 1, !tbaa !2451
  %950 = load i32, i32* %EDX
  %951 = zext i32 %950 to i64
  %952 = load i32, i32* %ESI
  %953 = zext i32 %952 to i64
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 2
  store i64 %955, i64* %PC
  %956 = sub i32 %950, %952
  %957 = icmp ult i32 %950, %952
  %958 = zext i1 %957 to i8
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %958, i8* %959, align 1, !tbaa !2434
  %960 = and i32 %956, 255
  %961 = call i32 @llvm.ctpop.i32(i32 %960) #17
  %962 = trunc i32 %961 to i8
  %963 = and i8 %962, 1
  %964 = xor i8 %963, 1
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %964, i8* %965, align 1, !tbaa !2447
  %966 = xor i64 %953, %951
  %967 = trunc i64 %966 to i32
  %968 = xor i32 %967, %956
  %969 = lshr i32 %968, 4
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %971, i8* %972, align 1, !tbaa !2448
  %973 = icmp eq i32 %956, 0
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %974, i8* %975, align 1, !tbaa !2449
  %976 = lshr i32 %956, 31
  %977 = trunc i32 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = lshr i32 %950, 31
  %980 = lshr i32 %952, 31
  %981 = xor i32 %980, %979
  %982 = xor i32 %976, %979
  %983 = add nuw nsw i32 %982, %981
  %984 = icmp eq i32 %983, 2
  %985 = zext i1 %984 to i8
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %985, i8* %986, align 1, !tbaa !2451
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 72
  %989 = load i32, i32* %EAX
  %990 = zext i32 %989 to i64
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %988 to i32*
  store i32 %989, i32* %993
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 31
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 6
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 6
  store i64 %999, i64* %PC
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1001 = load i8, i8* %1000, align 1, !tbaa !2450
  %1002 = icmp ne i8 %1001, 0
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1004 = load i8, i8* %1003, align 1, !tbaa !2451
  %1005 = icmp ne i8 %1004, 0
  %1006 = xor i1 %1002, %1005
  %1007 = xor i1 %1006, true
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1010 = select i1 %1006, i64 %997, i64 %995
  store i64 %1010, i64* %1009, align 8, !tbaa !2428
  %1011 = load i8, i8* %BRANCH_TAKEN
  %1012 = icmp eq i8 %1011, 1
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 10
  store i64 %1014, i64* %PC
  br i1 %1012, label %block_400bcf, label %block_400bb6

block_400aef:                                     ; preds = %block_400aaf
  %1015 = load i64, i64* %PC
  %1016 = tail call %struct.Memory* @sub_400aef(%struct.State* %0, i64 %1015, %struct.Memory* %556)
  ret %struct.Memory* %1016

block_400b08:                                     ; preds = %block_400aaf
  %1017 = load i64, i64* %PC
  %1018 = tail call %struct.Memory* @sub_400b08(%struct.State* %0, i64 %1017, %struct.Memory* %556)
  ret %struct.Memory* %1018

; <label>:1019:                                   ; preds = %block_400aaf
  %1020 = load i64, i64* %PC
  %1021 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %1020, %struct.Memory* %556)
  ret %struct.Memory* %1021
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a40_printSolution(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 7
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 17
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %EDX = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %ESI = bitcast %union.anon* %26 to i32*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 1
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RAX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 5
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RCX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 7
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDX = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 9
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 11
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RDI = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 13
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RSP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 15
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %RBP = bitcast %union.anon* %47 to i64*
  %48 = load i64, i64* %RBP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 1
  store i64 %50, i64* %PC
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %48, i64* %54
  store i64 %53, i64* %51, align 8, !tbaa !2428
  %55 = load i64, i64* %RSP
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC
  store i64 %55, i64* %RBP, align 8, !tbaa !2428
  %58 = load i64, i64* %RSP
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC
  %61 = sub i64 %58, 96
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  %62 = icmp ult i64 %58, 96
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %63, i8* %64, align 1, !tbaa !2434
  %65 = trunc i64 %61 to i32
  %66 = and i32 %65, 255
  %67 = call i32 @llvm.ctpop.i32(i32 %66) #17
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %70, i8* %71, align 1, !tbaa !2447
  %72 = xor i64 96, %58
  %73 = xor i64 %72, %61
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = icmp eq i64 %61, 0
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %61, 63
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %82, i8* %83, align 1, !tbaa !2450
  %84 = lshr i64 %58, 63
  %85 = xor i64 %81, %84
  %86 = add nuw nsw i64 %85, %84
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %88, i8* %89, align 1, !tbaa !2451
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %RDI
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 12
  %98 = load i32, i32* %ESI
  %99 = zext i32 %98 to i64
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %97 to i32*
  store i32 %98, i32* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 16
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 0, i32* %107
  br label %block_400a56

block_400abd:                                     ; preds = %block_400aaf
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 10
  store i64 %109, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 166), i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 2
  store i64 %111, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %112 = load i64, i64* %PC
  %113 = sub i64 %112, 1177
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  store i64 %117, i64* %PC
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %119 = load i64, i64* %118, align 8, !tbaa !2428
  %120 = add i64 %119, -8
  %121 = inttoptr i64 %120 to i64*
  store i64 %115, i64* %121
  store i64 %120, i64* %118, align 8, !tbaa !2428
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %113, i64* %122, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %123, %struct.Memory* %1026)
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 44
  %127 = load i32, i32* %EAX
  %128 = zext i32 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %126 to i32*
  store i32 %127, i32* %131
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 143
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 5
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %133, i64* %136, align 8, !tbaa !2428
  br label %block_400b60

block_400aaf:                                     ; preds = %block_400a62
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 32
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = load i64, i64* %RAX
  %144 = mul i64 %143, 8
  %145 = add i64 %144, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 40)
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 8
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RCX, align 8, !tbaa !2428
  %150 = load i64, i64* %RCX
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %150, i64* %153, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  switch i64 %154, label %1132 [
    i64 4197153, label %block_400b21
    i64 4197128, label %block_400b08
    i64 4197053, label %block_400abd
    i64 4197103, label %block_400aef
    i64 4197078, label %block_400ad6
  ]

block_400b3a:                                     ; preds = %block_400a62
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 10
  store i64 %156, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 153), i64* %RDI, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 8
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 16
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i32*
  %168 = load i32, i32* %167
  %169 = sext i32 %168 to i64
  store i64 %169, i64* %RCX, align 8, !tbaa !2428
  %170 = load i64, i64* %RCX
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = sext i64 %170 to i128
  %174 = and i128 %173, -18446744073709551616
  %175 = zext i64 %170 to i128
  %176 = or i128 %174, %175
  %177 = mul nsw i128 12, %176
  %178 = trunc i128 %177 to i64
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = sext i64 %178 to i128
  %180 = icmp ne i128 %179, %177
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %182, align 1, !tbaa !2434
  %183 = trunc i128 %177 to i32
  %184 = and i32 %183, 255
  %185 = call i32 @llvm.ctpop.i32(i32 %184) #17
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %188, i8* %189, align 1, !tbaa !2447
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %190, align 1, !tbaa !2448
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %191, align 1, !tbaa !2449
  %192 = lshr i64 %178, 63
  %193 = trunc i64 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %181, i8* %195, align 1, !tbaa !2451
  %196 = load i64, i64* %RAX
  %197 = load i64, i64* %RCX
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 3
  store i64 %199, i64* %PC
  %200 = add i64 %197, %196
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = icmp ult i64 %200, %196
  %202 = icmp ult i64 %200, %197
  %203 = or i1 %201, %202
  %204 = zext i1 %203 to i8
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %204, i8* %205, align 1, !tbaa !2434
  %206 = trunc i64 %200 to i32
  %207 = and i32 %206, 255
  %208 = call i32 @llvm.ctpop.i32(i32 %207) #17
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %211, i8* %212, align 1, !tbaa !2447
  %213 = xor i64 %197, %196
  %214 = xor i64 %213, %200
  %215 = lshr i64 %214, 4
  %216 = trunc i64 %215 to i8
  %217 = and i8 %216, 1
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %217, i8* %218, align 1, !tbaa !2448
  %219 = icmp eq i64 %200, 0
  %220 = zext i1 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %220, i8* %221, align 1, !tbaa !2449
  %222 = lshr i64 %200, 63
  %223 = trunc i64 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %223, i8* %224, align 1, !tbaa !2450
  %225 = lshr i64 %196, 63
  %226 = lshr i64 %197, 63
  %227 = xor i64 %222, %225
  %228 = xor i64 %222, %226
  %229 = add nuw nsw i64 %227, %228
  %230 = icmp eq i64 %229, 2
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %231, i8* %232, align 1, !tbaa !2451
  %233 = load i64, i64* %RAX
  %234 = add i64 %233, 8
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 3
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i32*
  %238 = load i32, i32* %237
  %239 = zext i32 %238 to i64
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 2
  store i64 %241, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %242 = load i64, i64* %PC
  %243 = sub i64 %242, 1320
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 5
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 5
  store i64 %247, i64* %PC
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %249 = load i64, i64* %248, align 8, !tbaa !2428
  %250 = add i64 %249, -8
  %251 = inttoptr i64 %250 to i64*
  store i64 %245, i64* %251
  store i64 %250, i64* %248, align 8, !tbaa !2428
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %243, i64* %252, align 8, !tbaa !2428
  %253 = load i64, i64* %PC
  %254 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %253, %struct.Memory* %1026)
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 64
  %257 = load i32, i32* %EAX
  %258 = zext i32 %257 to i64
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %256 to i32*
  store i32 %257, i32* %261
  br label %block_400b60

block_400aef:                                     ; preds = %block_400aaf
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 10
  store i64 %263, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 147), i64* %RDI, align 8, !tbaa !2428
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 2
  store i64 %265, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %266 = load i64, i64* %PC
  %267 = sub i64 %266, 1227
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  store i64 %271, i64* %PC
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %273 = load i64, i64* %272, align 8, !tbaa !2428
  %274 = add i64 %273, -8
  %275 = inttoptr i64 %274 to i64*
  store i64 %269, i64* %275
  store i64 %274, i64* %272, align 8, !tbaa !2428
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %267, i64* %276, align 8, !tbaa !2428
  %277 = load i64, i64* %PC
  %278 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %277, %struct.Memory* %1026)
  %279 = load i64, i64* %RBP
  %280 = sub i64 %279, 52
  %281 = load i32, i32* %EAX
  %282 = zext i32 %281 to i64
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %280 to i32*
  store i32 %281, i32* %285
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 93
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 5
  store i64 %289, i64* %PC
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %287, i64* %290, align 8, !tbaa !2428
  br label %block_400b60

block_400a56:                                     ; preds = %block_400be3, %block_400a40
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400a40 ], [ %MEMORY.2, %block_400be3 ]
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 16
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 3
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %292 to i32*
  %296 = load i32, i32* %295
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = load i32, i32* %EAX
  %299 = zext i32 %298 to i64
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 12
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 3
  store i64 %303, i64* %PC
  %304 = inttoptr i64 %301 to i32*
  %305 = load i32, i32* %304
  %306 = sub i32 %298, %305
  %307 = icmp ult i32 %298, %305
  %308 = zext i1 %307 to i8
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %308, i8* %309, align 1, !tbaa !2434
  %310 = and i32 %306, 255
  %311 = call i32 @llvm.ctpop.i32(i32 %310) #17
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %314, i8* %315, align 1, !tbaa !2447
  %316 = xor i32 %305, %298
  %317 = xor i32 %316, %306
  %318 = lshr i32 %317, 4
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %320, i8* %321, align 1, !tbaa !2448
  %322 = icmp eq i32 %306, 0
  %323 = zext i1 %322 to i8
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %323, i8* %324, align 1, !tbaa !2449
  %325 = lshr i32 %306, 31
  %326 = trunc i32 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %326, i8* %327, align 1, !tbaa !2450
  %328 = lshr i32 %298, 31
  %329 = lshr i32 %305, 31
  %330 = xor i32 %329, %328
  %331 = xor i32 %325, %328
  %332 = add nuw nsw i32 %331, %330
  %333 = icmp eq i32 %332, 2
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %334, i8* %335, align 1, !tbaa !2451
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 410
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 6
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 6
  store i64 %341, i64* %PC
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %343 = load i8, i8* %342, align 1, !tbaa !2450
  %344 = icmp ne i8 %343, 0
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %346 = load i8, i8* %345, align 1, !tbaa !2451
  %347 = icmp ne i8 %346, 0
  %348 = xor i1 %344, %347
  %349 = xor i1 %348, true
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %352 = select i1 %348, i64 %339, i64 %337
  store i64 %352, i64* %351, align 8, !tbaa !2428
  %353 = load i8, i8* %BRANCH_TAKEN
  %354 = icmp eq i8 %353, 1
  br i1 %354, label %block_400bf6, label %block_400a62

block_400bcf:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 2
  store i64 %356, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %357 = load i64, i64* %PC
  %358 = sub i64 %357, 1451
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 5
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 5
  store i64 %362, i64* %PC
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %364 = load i64, i64* %363, align 8, !tbaa !2428
  %365 = add i64 %364, -8
  %366 = inttoptr i64 %365 to i64*
  store i64 %360, i64* %366
  store i64 %365, i64* %363, align 8, !tbaa !2428
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %358, i64* %367, align 8, !tbaa !2428
  %368 = load i64, i64* %PC
  %369 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %368, %struct.Memory* %587)
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 80
  %372 = load i32, i32* %EAX
  %373 = zext i32 %372 to i64
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 3
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %371 to i32*
  store i32 %372, i32* %376
  br label %block_400be3

block_400b60:                                     ; preds = %block_400b21, %block_400ad6, %block_400b08, %block_400aef, %block_400b3a, %block_400abd
  %MEMORY.1 = phi %struct.Memory* [ %254, %block_400b3a ], [ %819, %block_400ad6 ], [ %278, %block_400aef ], [ %124, %block_400abd ], [ %790, %block_400b08 ], [ %908, %block_400b21 ]
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 8
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i64*
  %382 = load i64, i64* %381
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 16
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i32*
  %388 = load i32, i32* %387
  %389 = sext i32 %388 to i64
  store i64 %389, i64* %RCX, align 8, !tbaa !2428
  %390 = load i64, i64* %RCX
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = sext i64 %390 to i128
  %394 = and i128 %393, -18446744073709551616
  %395 = zext i64 %390 to i128
  %396 = or i128 %394, %395
  %397 = mul nsw i128 12, %396
  %398 = trunc i128 %397 to i64
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = sext i64 %398 to i128
  %400 = icmp ne i128 %399, %397
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %401, i8* %402, align 1, !tbaa !2434
  %403 = trunc i128 %397 to i32
  %404 = and i32 %403, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #17
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %410, align 1, !tbaa !2448
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %411, align 1, !tbaa !2449
  %412 = lshr i64 %398, 63
  %413 = trunc i64 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %413, i8* %414, align 1, !tbaa !2450
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %401, i8* %415, align 1, !tbaa !2451
  %416 = load i64, i64* %RAX
  %417 = load i64, i64* %RCX
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 3
  store i64 %419, i64* %PC
  %420 = add i64 %417, %416
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = icmp ult i64 %420, %416
  %422 = icmp ult i64 %420, %417
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %424, i8* %425, align 1, !tbaa !2434
  %426 = trunc i64 %420 to i32
  %427 = and i32 %426, 255
  %428 = call i32 @llvm.ctpop.i32(i32 %427) #17
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %431, i8* %432, align 1, !tbaa !2447
  %433 = xor i64 %417, %416
  %434 = xor i64 %433, %420
  %435 = lshr i64 %434, 4
  %436 = trunc i64 %435 to i8
  %437 = and i8 %436, 1
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %437, i8* %438, align 1, !tbaa !2448
  %439 = icmp eq i64 %420, 0
  %440 = zext i1 %439 to i8
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %440, i8* %441, align 1, !tbaa !2449
  %442 = lshr i64 %420, 63
  %443 = trunc i64 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %443, i8* %444, align 1, !tbaa !2450
  %445 = lshr i64 %416, 63
  %446 = lshr i64 %417, 63
  %447 = xor i64 %442, %445
  %448 = xor i64 %442, %446
  %449 = add nuw nsw i64 %447, %448
  %450 = icmp eq i64 %449, 2
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %451, i8* %452, align 1, !tbaa !2451
  %453 = load i64, i64* %RAX
  %454 = add i64 %453, 4
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 3
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  %458 = load i32, i32* %457
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RSI, align 8, !tbaa !2428
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 8
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 4
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i64*
  %465 = load i64, i64* %464
  store i64 %465, i64* %RAX, align 8, !tbaa !2428
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 16
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 4
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %467 to i32*
  %471 = load i32, i32* %470
  %472 = sext i32 %471 to i64
  store i64 %472, i64* %RCX, align 8, !tbaa !2428
  %473 = load i64, i64* %RCX
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 4
  store i64 %475, i64* %PC
  %476 = sext i64 %473 to i128
  %477 = and i128 %476, -18446744073709551616
  %478 = zext i64 %473 to i128
  %479 = or i128 %477, %478
  %480 = mul nsw i128 12, %479
  %481 = trunc i128 %480 to i64
  store i64 %481, i64* %RCX, align 8, !tbaa !2428
  %482 = sext i64 %481 to i128
  %483 = icmp ne i128 %482, %480
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %484, i8* %485, align 1, !tbaa !2434
  %486 = trunc i128 %480 to i32
  %487 = and i32 %486, 255
  %488 = call i32 @llvm.ctpop.i32(i32 %487) #17
  %489 = trunc i32 %488 to i8
  %490 = and i8 %489, 1
  %491 = xor i8 %490, 1
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %491, i8* %492, align 1, !tbaa !2447
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %493, align 1, !tbaa !2448
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %494, align 1, !tbaa !2449
  %495 = lshr i64 %481, 63
  %496 = trunc i64 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %496, i8* %497, align 1, !tbaa !2450
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %498, align 1, !tbaa !2451
  %499 = load i64, i64* %RAX
  %500 = load i64, i64* %RCX
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC
  %503 = add i64 %500, %499
  store i64 %503, i64* %RAX, align 8, !tbaa !2428
  %504 = icmp ult i64 %503, %499
  %505 = icmp ult i64 %503, %500
  %506 = or i1 %504, %505
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %507, i8* %508, align 1, !tbaa !2434
  %509 = trunc i64 %503 to i32
  %510 = and i32 %509, 255
  %511 = call i32 @llvm.ctpop.i32(i32 %510) #17
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %514, i8* %515, align 1, !tbaa !2447
  %516 = xor i64 %500, %499
  %517 = xor i64 %516, %503
  %518 = lshr i64 %517, 4
  %519 = trunc i64 %518 to i8
  %520 = and i8 %519, 1
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %520, i8* %521, align 1, !tbaa !2448
  %522 = icmp eq i64 %503, 0
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %523, i8* %524, align 1, !tbaa !2449
  %525 = lshr i64 %503, 63
  %526 = trunc i64 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %526, i8* %527, align 1, !tbaa !2450
  %528 = lshr i64 %499, 63
  %529 = lshr i64 %500, 63
  %530 = xor i64 %525, %528
  %531 = xor i64 %525, %529
  %532 = add nuw nsw i64 %530, %531
  %533 = icmp eq i64 %532, 2
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %534, i8* %535, align 1, !tbaa !2451
  %536 = load i64, i64* %RAX
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  store i64 %536, i64* %RDI, align 8, !tbaa !2428
  %539 = load i64, i64* %RBP
  %540 = sub i64 %539, 68
  %541 = load i32, i32* %ESI
  %542 = zext i32 %541 to i64
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 3
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %540 to i32*
  store i32 %541, i32* %545
  %546 = load i64, i64* %PC
  %547 = sub i64 %546, 487
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 5
  store i64 %551, i64* %PC
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %553 = load i64, i64* %552, align 8, !tbaa !2428
  %554 = add i64 %553, -8
  %555 = inttoptr i64 %554 to i64*
  store i64 %549, i64* %555
  store i64 %554, i64* %552, align 8, !tbaa !2428
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %547, i64* %556, align 8, !tbaa !2428
  %557 = load i64, i64* %PC
  %558 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %557, %struct.Memory* %MEMORY.1)
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 10
  store i64 %560, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 159), i64* %RDI, align 8, !tbaa !2428
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 68
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 3
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i32*
  %566 = load i32, i32* %565
  %567 = zext i32 %566 to i64
  store i64 %567, i64* %RSI, align 8, !tbaa !2428
  %568 = load i32, i32* %EAX
  %569 = zext i32 %568 to i64
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 2
  store i64 %571, i64* %PC
  %572 = and i64 %569, 4294967295
  store i64 %572, i64* %RDX, align 8, !tbaa !2428
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 2
  store i64 %574, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %575 = load i64, i64* %PC
  %576 = sub i64 %575, 1389
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 5
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %582 = load i64, i64* %581, align 8, !tbaa !2428
  %583 = add i64 %582, -8
  %584 = inttoptr i64 %583 to i64*
  store i64 %578, i64* %584
  store i64 %583, i64* %581, align 8, !tbaa !2428
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %576, i64* %585, align 8, !tbaa !2428
  %586 = load i64, i64* %PC
  %587 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %586, %struct.Memory* %558)
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 16
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %589 to i32*
  %593 = load i32, i32* %592
  %594 = zext i32 %593 to i64
  store i64 %594, i64* %RDX, align 8, !tbaa !2428
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 12
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 3
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i32*
  %600 = load i32, i32* %599
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RSI, align 8, !tbaa !2428
  %602 = load i64, i64* %RSI
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 3
  store i64 %604, i64* %PC
  %605 = trunc i64 %602 to i32
  %606 = sub i32 %605, 1
  %607 = zext i32 %606 to i64
  store i64 %607, i64* %RSI, align 8, !tbaa !2428
  %608 = icmp ult i32 %605, 1
  %609 = zext i1 %608 to i8
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %609, i8* %610, align 1, !tbaa !2434
  %611 = and i32 %606, 255
  %612 = call i32 @llvm.ctpop.i32(i32 %611) #17
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %615, i8* %616, align 1, !tbaa !2447
  %617 = xor i64 1, %602
  %618 = trunc i64 %617 to i32
  %619 = xor i32 %618, %606
  %620 = lshr i32 %619, 4
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %622, i8* %623, align 1, !tbaa !2448
  %624 = icmp eq i32 %606, 0
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %625, i8* %626, align 1, !tbaa !2449
  %627 = lshr i32 %606, 31
  %628 = trunc i32 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %628, i8* %629, align 1, !tbaa !2450
  %630 = lshr i32 %605, 31
  %631 = xor i32 %627, %630
  %632 = add nuw nsw i32 %631, %630
  %633 = icmp eq i32 %632, 2
  %634 = zext i1 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %634, i8* %635, align 1, !tbaa !2451
  %636 = load i32, i32* %EDX
  %637 = zext i32 %636 to i64
  %638 = load i32, i32* %ESI
  %639 = zext i32 %638 to i64
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 2
  store i64 %641, i64* %PC
  %642 = sub i32 %636, %638
  %643 = icmp ult i32 %636, %638
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %644, i8* %645, align 1, !tbaa !2434
  %646 = and i32 %642, 255
  %647 = call i32 @llvm.ctpop.i32(i32 %646) #17
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  %650 = xor i8 %649, 1
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %650, i8* %651, align 1, !tbaa !2447
  %652 = xor i64 %639, %637
  %653 = trunc i64 %652 to i32
  %654 = xor i32 %653, %642
  %655 = lshr i32 %654, 4
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %657, i8* %658, align 1, !tbaa !2448
  %659 = icmp eq i32 %642, 0
  %660 = zext i1 %659 to i8
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %660, i8* %661, align 1, !tbaa !2449
  %662 = lshr i32 %642, 31
  %663 = trunc i32 %662 to i8
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %663, i8* %664, align 1, !tbaa !2450
  %665 = lshr i32 %636, 31
  %666 = lshr i32 %638, 31
  %667 = xor i32 %666, %665
  %668 = xor i32 %662, %665
  %669 = add nuw nsw i32 %668, %667
  %670 = icmp eq i32 %669, 2
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %671, i8* %672, align 1, !tbaa !2451
  %673 = load i64, i64* %RBP
  %674 = sub i64 %673, 72
  %675 = load i32, i32* %EAX
  %676 = zext i32 %675 to i64
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 3
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %674 to i32*
  store i32 %675, i32* %679
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 31
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 6
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 6
  store i64 %685, i64* %PC
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %687 = load i8, i8* %686, align 1, !tbaa !2450
  %688 = icmp ne i8 %687, 0
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %690 = load i8, i8* %689, align 1, !tbaa !2451
  %691 = icmp ne i8 %690, 0
  %692 = xor i1 %688, %691
  %693 = xor i1 %692, true
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %696 = select i1 %692, i64 %683, i64 %681
  store i64 %696, i64* %695, align 8, !tbaa !2428
  %697 = load i8, i8* %BRANCH_TAKEN
  %698 = icmp eq i8 %697, 1
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 10
  store i64 %700, i64* %PC
  br i1 %698, label %block_400bcf, label %block_400bb6

block_400bf6:                                     ; preds = %block_400a56
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 10
  store i64 %702, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 2
  store i64 %704, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %705 = load i64, i64* %PC
  %706 = sub i64 %705, 1490
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  store i64 %710, i64* %PC
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %712 = load i64, i64* %711, align 8, !tbaa !2428
  %713 = add i64 %712, -8
  %714 = inttoptr i64 %713 to i64*
  store i64 %708, i64* %714
  store i64 %713, i64* %711, align 8, !tbaa !2428
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %706, i64* %715, align 8, !tbaa !2428
  %716 = load i64, i64* %PC
  %717 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %716, %struct.Memory* %MEMORY.0)
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 84
  %720 = load i32, i32* %EAX
  %721 = zext i32 %720 to i64
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %719 to i32*
  store i32 %720, i32* %724
  %725 = load i64, i64* %RSP
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = add i64 96, %725
  store i64 %728, i64* %RSP, align 8, !tbaa !2428
  %729 = icmp ult i64 %728, %725
  %730 = icmp ult i64 %728, 96
  %731 = or i1 %729, %730
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %732, i8* %733, align 1, !tbaa !2434
  %734 = trunc i64 %728 to i32
  %735 = and i32 %734, 255
  %736 = call i32 @llvm.ctpop.i32(i32 %735) #17
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  %739 = xor i8 %738, 1
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %739, i8* %740, align 1, !tbaa !2447
  %741 = xor i64 96, %725
  %742 = xor i64 %741, %728
  %743 = lshr i64 %742, 4
  %744 = trunc i64 %743 to i8
  %745 = and i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %745, i8* %746, align 1, !tbaa !2448
  %747 = icmp eq i64 %728, 0
  %748 = zext i1 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %748, i8* %749, align 1, !tbaa !2449
  %750 = lshr i64 %728, 63
  %751 = trunc i64 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %751, i8* %752, align 1, !tbaa !2450
  %753 = lshr i64 %725, 63
  %754 = xor i64 %750, %753
  %755 = add nuw nsw i64 %754, %750
  %756 = icmp eq i64 %755, 2
  %757 = zext i1 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %757, i8* %758, align 1, !tbaa !2451
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 1
  store i64 %760, i64* %PC
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %762 = load i64, i64* %761, align 8, !tbaa !2428
  %763 = add i64 %762, 8
  %764 = inttoptr i64 %762 to i64*
  %765 = load i64, i64* %764
  store i64 %765, i64* %RBP, align 8, !tbaa !2428
  store i64 %763, i64* %761, align 8, !tbaa !2428
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 1
  store i64 %767, i64* %PC
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %770 = load i64, i64* %769, align 8, !tbaa !2428
  %771 = inttoptr i64 %770 to i64*
  %772 = load i64, i64* %771
  store i64 %772, i64* %768, align 8, !tbaa !2428
  %773 = add i64 %770, 8
  store i64 %773, i64* %769, align 8, !tbaa !2428
  ret %struct.Memory* %717

block_400b08:                                     ; preds = %block_400aaf
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 10
  store i64 %775, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 149), i64* %RDI, align 8, !tbaa !2428
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 2
  store i64 %777, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %778 = load i64, i64* %PC
  %779 = sub i64 %778, 1252
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 5
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 5
  store i64 %783, i64* %PC
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %785 = load i64, i64* %784, align 8, !tbaa !2428
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %781, i64* %787
  store i64 %786, i64* %784, align 8, !tbaa !2428
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %779, i64* %788, align 8, !tbaa !2428
  %789 = load i64, i64* %PC
  %790 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %789, %struct.Memory* %1026)
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 56
  %793 = load i32, i32* %EAX
  %794 = zext i32 %793 to i64
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %792 to i32*
  store i32 %793, i32* %797
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 68
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 5
  store i64 %801, i64* %PC
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %799, i64* %802, align 8, !tbaa !2428
  br label %block_400b60

block_400ad6:                                     ; preds = %block_400aaf
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 10
  store i64 %804, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 145), i64* %RDI, align 8, !tbaa !2428
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 2
  store i64 %806, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %807 = load i64, i64* %PC
  %808 = sub i64 %807, 1202
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 5
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 5
  store i64 %812, i64* %PC
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %814 = load i64, i64* %813, align 8, !tbaa !2428
  %815 = add i64 %814, -8
  %816 = inttoptr i64 %815 to i64*
  store i64 %810, i64* %816
  store i64 %815, i64* %813, align 8, !tbaa !2428
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %808, i64* %817, align 8, !tbaa !2428
  %818 = load i64, i64* %PC
  %819 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %818, %struct.Memory* %1026)
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 48
  %822 = load i32, i32* %EAX
  %823 = zext i32 %822 to i64
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 3
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %821 to i32*
  store i32 %822, i32* %826
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 118
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %828, i64* %831, align 8, !tbaa !2428
  br label %block_400b60

block_400be3:                                     ; preds = %block_400bb6, %block_400bcf
  %MEMORY.2 = phi %struct.Memory* [ %369, %block_400bcf ], [ %935, %block_400bb6 ]
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %833, i64* %836, align 8, !tbaa !2428
  %837 = load i64, i64* %RBP
  %838 = sub i64 %837, 16
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC
  %841 = inttoptr i64 %838 to i32*
  %842 = load i32, i32* %841
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  %847 = trunc i64 %844 to i32
  %848 = add i32 1, %847
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RAX, align 8, !tbaa !2428
  %850 = icmp ult i32 %848, %847
  %851 = icmp ult i32 %848, 1
  %852 = or i1 %850, %851
  %853 = zext i1 %852 to i8
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %853, i8* %854, align 1, !tbaa !2434
  %855 = and i32 %848, 255
  %856 = call i32 @llvm.ctpop.i32(i32 %855) #17
  %857 = trunc i32 %856 to i8
  %858 = and i8 %857, 1
  %859 = xor i8 %858, 1
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %859, i8* %860, align 1, !tbaa !2447
  %861 = xor i64 1, %844
  %862 = trunc i64 %861 to i32
  %863 = xor i32 %862, %848
  %864 = lshr i32 %863, 4
  %865 = trunc i32 %864 to i8
  %866 = and i8 %865, 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %866, i8* %867, align 1, !tbaa !2448
  %868 = icmp eq i32 %848, 0
  %869 = zext i1 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %869, i8* %870, align 1, !tbaa !2449
  %871 = lshr i32 %848, 31
  %872 = trunc i32 %871 to i8
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %872, i8* %873, align 1, !tbaa !2450
  %874 = lshr i32 %847, 31
  %875 = xor i32 %871, %874
  %876 = add nuw nsw i32 %875, %871
  %877 = icmp eq i32 %876, 2
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %878, i8* %879, align 1, !tbaa !2451
  %880 = load i64, i64* %RBP
  %881 = sub i64 %880, 16
  %882 = load i32, i32* %EAX
  %883 = zext i32 %882 to i64
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %881 to i32*
  store i32 %882, i32* %886
  %887 = load i64, i64* %PC
  %888 = sub i64 %887, 411
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 5
  store i64 %890, i64* %PC
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %888, i64* %891, align 8, !tbaa !2428
  br label %block_400a56

block_400b21:                                     ; preds = %block_400aaf
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 10
  store i64 %893, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 151), i64* %RDI, align 8, !tbaa !2428
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 2
  store i64 %895, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %896 = load i64, i64* %PC
  %897 = sub i64 %896, 1277
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 5
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 5
  store i64 %901, i64* %PC
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %903 = load i64, i64* %902, align 8, !tbaa !2428
  %904 = add i64 %903, -8
  %905 = inttoptr i64 %904 to i64*
  store i64 %899, i64* %905
  store i64 %904, i64* %902, align 8, !tbaa !2428
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %897, i64* %906, align 8, !tbaa !2428
  %907 = load i64, i64* %PC
  %908 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %907, %struct.Memory* %1026)
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 60
  %911 = load i32, i32* %EAX
  %912 = zext i32 %911 to i64
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 3
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %910 to i32*
  store i32 %911, i32* %915
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 43
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 5
  store i64 %919, i64* %PC
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %917, i64* %920, align 8, !tbaa !2428
  br label %block_400b60

block_400bb6:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 165), i64* %RDI, align 8, !tbaa !2428
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 2
  store i64 %922, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %923 = load i64, i64* %PC
  %924 = sub i64 %923, 1426
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 5
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 5
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %930 = load i64, i64* %929, align 8, !tbaa !2428
  %931 = add i64 %930, -8
  %932 = inttoptr i64 %931 to i64*
  store i64 %926, i64* %932
  store i64 %931, i64* %929, align 8, !tbaa !2428
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %924, i64* %933, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %934, %struct.Memory* %587)
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 76
  %938 = load i32, i32* %EAX
  %939 = zext i32 %938 to i64
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %937 to i32*
  store i32 %938, i32* %942
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 25
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 5
  store i64 %946, i64* %PC
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %944, i64* %947, align 8, !tbaa !2428
  br label %block_400be3

block_400a62:                                     ; preds = %block_400a56
  %948 = load i64, i64* %RBP
  %949 = sub i64 %948, 8
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC
  %952 = inttoptr i64 %949 to i64*
  %953 = load i64, i64* %952
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 16
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 4
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  %959 = load i32, i32* %958
  %960 = sext i32 %959 to i64
  store i64 %960, i64* %RCX, align 8, !tbaa !2428
  %961 = load i64, i64* %RCX
  %962 = load i64, i64* %RCX
  %963 = mul i64 %962, 2
  %964 = add i64 %963, %961
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 4
  store i64 %966, i64* %PC
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %967 = load i64, i64* %RAX
  %968 = load i64, i64* %RCX
  %969 = mul i64 %968, 4
  %970 = add i64 %969, %967
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 3
  store i64 %972, i64* %PC
  %973 = inttoptr i64 %970 to i32*
  %974 = load i32, i32* %973
  %975 = zext i32 %974 to i64
  store i64 %975, i64* %RSI, align 8, !tbaa !2428
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 5
  store i64 %977, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64 4294967295), i64* %RDX, align 8, !tbaa !2428
  %978 = load i32, i32* %EDX
  %979 = zext i32 %978 to i64
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 2
  store i64 %981, i64* %PC
  %982 = and i64 %979, 4294967295
  store i64 %982, i64* %RDI, align 8, !tbaa !2428
  %983 = load i64, i64* %RDX
  %984 = load i32, i32* %EDX
  %985 = zext i32 %984 to i64
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 2
  store i64 %987, i64* %PC
  %988 = xor i64 %985, %983
  %989 = trunc i64 %988 to i32
  %990 = and i64 %988, 4294967295
  store i64 %990, i64* %RDX, align 8, !tbaa !2428
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %991, align 1, !tbaa !2434
  %992 = and i32 %989, 255
  %993 = call i32 @llvm.ctpop.i32(i32 %992) #17
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %996, i8* %997, align 1, !tbaa !2447
  %998 = icmp eq i32 %989, 0
  %999 = zext i1 %998 to i8
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %999, i8* %1000, align 1, !tbaa !2449
  %1001 = lshr i32 %989, 31
  %1002 = trunc i32 %1001 to i8
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1002, i8* %1003, align 1, !tbaa !2450
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1004, align 1, !tbaa !2451
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1005, align 1, !tbaa !2448
  %1006 = load i8, i8* %DL
  %1007 = zext i8 %1006 to i64
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 3
  store i64 %1009, i64* %PC
  store i8 %1006, i8* %R8B, align 1, !tbaa !2452
  %1010 = load i8, i8* %R8B
  %1011 = zext i8 %1010 to i64
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 3
  store i64 %1013, i64* %PC
  store i8 %1010, i8* %AL, align 1, !tbaa !2452
  %1014 = load i64, i64* %PC
  %1015 = sub i64 %1014, 1104
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 5
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 5
  store i64 %1019, i64* %PC
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1021 = load i64, i64* %1020, align 8, !tbaa !2428
  %1022 = add i64 %1021, -8
  %1023 = inttoptr i64 %1022 to i64*
  store i64 %1017, i64* %1023
  store i64 %1022, i64* %1020, align 8, !tbaa !2428
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1015, i64* %1024, align 8, !tbaa !2428
  %1025 = load i64, i64* %PC
  %1026 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %1025, %struct.Memory* %MEMORY.0)
  %1027 = load i64, i64* %RBP
  %1028 = sub i64 %1027, 8
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 4
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1028 to i64*
  %1032 = load i64, i64* %1031
  store i64 %1032, i64* %RCX, align 8, !tbaa !2428
  %1033 = load i64, i64* %RBP
  %1034 = sub i64 %1033, 16
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 4
  store i64 %1036, i64* %PC
  %1037 = inttoptr i64 %1034 to i32*
  %1038 = load i32, i32* %1037
  %1039 = sext i32 %1038 to i64
  store i64 %1039, i64* %RDI, align 8, !tbaa !2428
  %1040 = load i64, i64* %RDI
  %1041 = load i64, i64* %RDI
  %1042 = mul i64 %1041, 2
  %1043 = add i64 %1042, %1040
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  store i64 %1043, i64* %RDI, align 8, !tbaa !2428
  %1046 = load i64, i64* %RCX
  %1047 = load i64, i64* %RDI
  %1048 = mul i64 %1047, 4
  %1049 = add i64 %1046, 8
  %1050 = add i64 %1049, %1048
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RDX, align 8, !tbaa !2428
  %1056 = load i32, i32* %EDX
  %1057 = zext i32 %1056 to i64
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 2
  store i64 %1059, i64* %PC
  %1060 = and i64 %1057, 4294967295
  store i64 %1060, i64* %RCX, align 8, !tbaa !2428
  %1061 = load i64, i64* %RCX
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  store i64 %1061, i64* %RDI, align 8, !tbaa !2428
  %1064 = load i64, i64* %RDI
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = sub i64 %1064, 4
  store i64 %1067, i64* %RDI, align 8, !tbaa !2428
  %1068 = icmp ult i64 %1064, 4
  %1069 = zext i1 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1069, i8* %1070, align 1, !tbaa !2434
  %1071 = trunc i64 %1067 to i32
  %1072 = and i32 %1071, 255
  %1073 = call i32 @llvm.ctpop.i32(i32 %1072) #17
  %1074 = trunc i32 %1073 to i8
  %1075 = and i8 %1074, 1
  %1076 = xor i8 %1075, 1
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1076, i8* %1077, align 1, !tbaa !2447
  %1078 = xor i64 4, %1064
  %1079 = xor i64 %1078, %1067
  %1080 = lshr i64 %1079, 4
  %1081 = trunc i64 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1082, i8* %1083, align 1, !tbaa !2448
  %1084 = icmp eq i64 %1067, 0
  %1085 = zext i1 %1084 to i8
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1085, i8* %1086, align 1, !tbaa !2449
  %1087 = lshr i64 %1067, 63
  %1088 = trunc i64 %1087 to i8
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1088, i8* %1089, align 1, !tbaa !2450
  %1090 = lshr i64 %1064, 63
  %1091 = xor i64 %1087, %1090
  %1092 = add nuw nsw i64 %1091, %1090
  %1093 = icmp eq i64 %1092, 2
  %1094 = zext i1 %1093 to i8
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1094, i8* %1095, align 1, !tbaa !2451
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 20
  %1098 = load i32, i32* %EAX
  %1099 = zext i32 %1098 to i64
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 3
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1097 to i32*
  store i32 %1098, i32* %1102
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 32
  %1105 = load i64, i64* %RCX
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 4
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1104 to i64*
  store i64 %1105, i64* %1108
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 40
  %1111 = load i64, i64* %RDI
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 4
  store i64 %1113, i64* %PC
  %1114 = inttoptr i64 %1110 to i64*
  store i64 %1111, i64* %1114
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 145
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 6
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 6
  store i64 %1120, i64* %PC
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1122 = load i8, i8* %1121, align 1, !tbaa !2434
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1124 = load i8, i8* %1123, align 1, !tbaa !2449
  %1125 = or i8 %1124, %1122
  %1126 = icmp eq i8 %1125, 0
  %1127 = zext i1 %1126 to i8
  store i8 %1127, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1129 = select i1 %1126, i64 %1116, i64 %1118
  store i64 %1129, i64* %1128, align 8, !tbaa !2428
  %1130 = load i8, i8* %BRANCH_TAKEN
  %1131 = icmp eq i8 %1130, 1
  br i1 %1131, label %block_400b3a, label %block_400aaf

; <label>:1132:                                   ; preds = %block_400aaf
  %1133 = load i64, i64* %PC
  %1134 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %1133, %struct.Memory* %1026)
  ret %struct.Memory* %1134
}

; Function Attrs: noinline
define %struct.Memory* @sub_401280_search(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401280:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 11
  store i64 %23, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 48) to i32*)
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 11
  store i64 %25, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 52) to i32*)
  %26 = load i64, i64* %PC
  %27 = sub i64 %26, 714
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 5
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 5
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %27, i64* %36, align 8, !tbaa !2428
  %37 = load i64, i64* %PC
  %38 = call %struct.Memory* @sub_400fd0_doSearch_renamed_(%struct.State* %0, i64 %37, %struct.Memory* %2)
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !2428
  %43 = add i64 %42, 8
  %44 = inttoptr i64 %42 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RBP, align 8, !tbaa !2428
  store i64 %43, i64* %41, align 8, !tbaa !2428
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !2428
  %51 = inttoptr i64 %50 to i64*
  %52 = load i64, i64* %51
  store i64 %52, i64* %48, align 8, !tbaa !2428
  %53 = add i64 %50, 8
  store i64 %53, i64* %49, align 8, !tbaa !2428
  ret %struct.Memory* %38
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009e7(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009e7:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = sub i64 %18, 16
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC
  %22 = inttoptr i64 %19 to i64*
  %23 = load i64, i64* %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = load i64, i64* %RAX
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC
  %27 = inttoptr i64 %24 to i32*
  %28 = load i32, i32* %27
  %29 = zext i32 %28 to i64
  store i64 %29, i64* %RCX, align 8, !tbaa !2428
  %30 = load i64, i64* %RBP
  %31 = sub i64 %30, 16
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = load i64, i64* %RCX
  %37 = load i64, i64* %RAX
  %38 = add i64 %37, 4
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  %41 = trunc i64 %36 to i32
  %42 = inttoptr i64 %38 to i32*
  %43 = load i32, i32* %42
  %44 = sub i32 %41, %43
  %45 = zext i32 %44 to i64
  store i64 %45, i64* %RCX, align 8, !tbaa !2428
  %46 = icmp ult i32 %41, %43
  %47 = zext i1 %46 to i8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %47, i8* %48, align 1, !tbaa !2434
  %49 = and i32 %44, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #17
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = xor i32 %43, %41
  %56 = xor i32 %55, %44
  %57 = lshr i32 %56, 4
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = icmp eq i32 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i32 %44, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = lshr i32 %41, 31
  %68 = lshr i32 %43, 31
  %69 = xor i32 %68, %67
  %70 = xor i32 %64, %67
  %71 = add nuw nsw i32 %70, %69
  %72 = icmp eq i32 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2451
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 4
  %77 = load i32, i32* %ECX
  %78 = zext i32 %77 to i64
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %76 to i32*
  store i32 %77, i32* %81
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 56
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %83, i64* %86, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 4
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %88 to i32*
  %92 = load i32, i32* %91
  %93 = zext i32 %92 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %RBP, align 8, !tbaa !2428
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 1
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %105 = load i64, i64* %104, align 8, !tbaa !2428
  %106 = inttoptr i64 %105 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %103, align 8, !tbaa !2428
  %108 = add i64 %105, 8
  store i64 %108, i64* %104, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401110_getInput(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401110:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 7
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %ECX = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 17
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %R8D = bitcast %union.anon* %26 to i32*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 1
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RAX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 5
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RCX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 7
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDX = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 9
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 11
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RDI = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 13
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RSP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 15
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %RBP = bitcast %union.anon* %47 to i64*
  %48 = load i64, i64* %RBP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 1
  store i64 %50, i64* %PC
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %48, i64* %54
  store i64 %53, i64* %51, align 8, !tbaa !2428
  %55 = load i64, i64* %RSP
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC
  store i64 %55, i64* %RBP, align 8, !tbaa !2428
  %58 = load i64, i64* %RSP
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC
  %61 = sub i64 %58, 96
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  %62 = icmp ult i64 %58, 96
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %63, i8* %64, align 1, !tbaa !2434
  %65 = trunc i64 %61 to i32
  %66 = and i32 %65, 255
  %67 = call i32 @llvm.ctpop.i32(i32 %66) #17
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %70, i8* %71, align 1, !tbaa !2447
  %72 = xor i64 96, %58
  %73 = xor i64 %72, %61
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = icmp eq i64 %61, 0
  %79 = zext i1 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %61, 63
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %82, i8* %83, align 1, !tbaa !2450
  %84 = lshr i64 %58, 63
  %85 = xor i64 %81, %84
  %86 = add nuw nsw i64 %85, %84
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %88, i8* %89, align 1, !tbaa !2451
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 68
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 7
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  store i32 0, i32* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 64
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 7
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i32*
  store i32 13, i32* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 60
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 7
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i32*
  store i32 32, i32* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 56
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 7
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %106 to i32*
  store i32 14, i32* %109
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 52
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 7
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i32*
  store i32 1412, i32* %114
  br label %block_40113b

block_40113b:                                     ; preds = %block_40116d, %block_401110
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401110 ], [ %657, %block_40116d ]
  %115 = load i64, i64* %PC
  %116 = sub i64 %115, 2795
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 5
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %122 = load i64, i64* %121, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %118, i64* %124
  store i64 %123, i64* %121, align 8, !tbaa !2428
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %116, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = call %struct.Memory* @ext_602158_getchar(%struct.State* %0, i64 %126, %struct.Memory* %MEMORY.0)
  %128 = load i64, i64* %RCX
  %129 = load i32, i32* %ECX
  %130 = zext i32 %129 to i64
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 2
  store i64 %132, i64* %PC
  %133 = xor i64 %130, %128
  %134 = trunc i64 %133 to i32
  %135 = and i64 %133, 4294967295
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %136, align 1, !tbaa !2434
  %137 = and i32 %134, 255
  %138 = call i32 @llvm.ctpop.i32(i32 %137) #17
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %141, i8* %142, align 1, !tbaa !2447
  %143 = icmp eq i32 %134, 0
  %144 = zext i1 %143 to i8
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %144, i8* %145, align 1, !tbaa !2449
  %146 = lshr i32 %134, 31
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %147, i8* %148, align 1, !tbaa !2450
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %149, align 1, !tbaa !2451
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %150, align 1, !tbaa !2448
  %151 = load i8, i8* %CL
  %152 = zext i8 %151 to i64
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  store i8 %151, i8* %DL, align 1, !tbaa !2452
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 72
  %157 = load i32, i32* %EAX
  %158 = zext i32 %157 to i64
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %156 to i32*
  store i32 %157, i32* %161
  %162 = load i32, i32* %EAX
  %163 = zext i32 %162 to i64
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 3
  store i64 %165, i64* %PC
  %166 = sub i32 %162, 10
  %167 = icmp ult i32 %162, 10
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2434
  %170 = and i32 %166, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #17
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2447
  %176 = xor i64 10, %163
  %177 = trunc i64 %176 to i32
  %178 = xor i32 %177, %166
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2448
  %183 = icmp eq i32 %166, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = lshr i32 %166, 31
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2450
  %189 = lshr i32 %162, 31
  %190 = xor i32 %186, %189
  %191 = add nuw nsw i32 %190, %189
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2451
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 73
  %197 = load i8, i8* %DL
  %198 = zext i8 %197 to i64
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %196 to i8*
  store i8 %197, i8* %201
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 16
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 6
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 6
  store i64 %207, i64* %PC
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %209 = load i8, i8* %208, align 1, !tbaa !2449
  store i8 %209, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %211 = icmp ne i8 %209, 0
  %212 = select i1 %211, i64 %203, i64 %205
  store i64 %212, i64* %210, align 8, !tbaa !2428
  %213 = load i8, i8* %BRANCH_TAKEN
  %214 = icmp eq i8 %213, 1
  br i1 %214, label %block_40115d, label %block_401153

block_401153:                                     ; preds = %block_40113b
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 72
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = sub i32 %220, -1
  %222 = icmp ult i32 %220, -1
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %223, i8* %224, align 1, !tbaa !2434
  %225 = and i32 %221, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #17
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = xor i32 %220, -1
  %232 = xor i32 %231, %221
  %233 = lshr i32 %232, 4
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %235, i8* %236, align 1, !tbaa !2448
  %237 = icmp eq i32 %221, 0
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %238, i8* %239, align 1, !tbaa !2449
  %240 = lshr i32 %221, 31
  %241 = trunc i32 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %241, i8* %242, align 1, !tbaa !2450
  %243 = lshr i32 %220, 31
  %244 = xor i32 %243, 1
  %245 = xor i32 %240, %243
  %246 = add nuw nsw i32 %245, %244
  %247 = icmp eq i32 %246, 2
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %248, i8* %249, align 1, !tbaa !2451
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 3
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %253 = load i8, i8* %252, align 1, !tbaa !2449
  %254 = icmp eq i8 %253, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %AL, align 1, !tbaa !2452
  %256 = load i64, i64* %RBP
  %257 = sub i64 %256, 73
  %258 = load i8, i8* %AL
  %259 = zext i8 %258 to i64
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 3
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %257 to i8*
  store i8 %258, i8* %262
  br label %block_40115d

block_4011d0:                                     ; preds = %block_401168, %block_4011c9
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_401168 ], [ %MEMORY.2, %block_4011c9 ]
  %263 = load i64, i64* %RBP
  %264 = sub i64 %263, 68
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 3
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %264 to i32*
  %268 = load i32, i32* %267
  %269 = zext i32 %268 to i64
  store i64 %269, i64* %RAX, align 8, !tbaa !2428
  %270 = load i64, i64* %RAX
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 3
  store i64 %272, i64* %PC
  %273 = trunc i64 %270 to i32
  %274 = sub i32 %273, 1
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = icmp ult i32 %273, 1
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %277, i8* %278, align 1, !tbaa !2434
  %279 = and i32 %274, 255
  %280 = call i32 @llvm.ctpop.i32(i32 %279) #17
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %283, i8* %284, align 1, !tbaa !2447
  %285 = xor i64 1, %270
  %286 = trunc i64 %285 to i32
  %287 = xor i32 %286, %274
  %288 = lshr i32 %287, 4
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %290, i8* %291, align 1, !tbaa !2448
  %292 = icmp eq i32 %274, 0
  %293 = zext i1 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %293, i8* %294, align 1, !tbaa !2449
  %295 = lshr i32 %274, 31
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %296, i8* %297, align 1, !tbaa !2450
  %298 = lshr i32 %273, 31
  %299 = xor i32 %295, %298
  %300 = add nuw nsw i32 %299, %298
  %301 = icmp eq i32 %300, 2
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %302, i8* %303, align 1, !tbaa !2451
  %304 = load i32, i32* %EAX
  %305 = zext i32 %304 to i64
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 7
  store i64 %307, i64* %PC
  store i32 %304, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 8
  store i64 %309, i64* %PC
  %310 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %311 = sext i32 %310 to i64
  store i64 %311, i64* %RCX, align 8, !tbaa !2428
  %312 = load i64, i64* %RBP
  %313 = load i64, i64* %RCX
  %314 = mul i64 %313, 4
  %315 = add i64 %312, -64
  %316 = add i64 %315, %314
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i32*
  %320 = load i32, i32* %319
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = load i32, i32* %EAX
  %323 = zext i32 %322 to i64
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 7
  store i64 %325, i64* %PC
  store i32 %322, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 76) to i32*)
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = trunc i64 %330 to i32
  %334 = shl i32 %333, 1
  %335 = icmp slt i32 %333, 0
  %336 = icmp slt i32 %334, 0
  %337 = xor i1 %335, %336
  %338 = zext i32 %334 to i64
  store i64 %338, i64* %RAX, align 8, !tbaa !2428
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %340 = zext i1 %335 to i8
  store i8 %340, i8* %339, align 1, !tbaa !2452
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %342 = and i32 %334, 254
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #17
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %341, align 1, !tbaa !2452
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %347, align 1, !tbaa !2452
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %349 = icmp eq i32 %334, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %348, align 1, !tbaa !2452
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %352 = lshr i32 %334, 31
  %353 = trunc i32 %352 to i8
  store i8 %353, i8* %351, align 1, !tbaa !2452
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %355 = zext i1 %337 to i8
  store i8 %355, i8* %354, align 1, !tbaa !2452
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 2
  store i64 %359, i64* %PC
  %360 = and i64 %357, 4294967295
  store i64 %360, i64* %RDI, align 8, !tbaa !2428
  %361 = load i64, i64* %PC
  %362 = sub i64 %361, 2684
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 5
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %368 = load i64, i64* %367, align 8, !tbaa !2428
  %369 = add i64 %368, -8
  %370 = inttoptr i64 %369 to i64*
  store i64 %364, i64* %370
  store i64 %369, i64* %367, align 8, !tbaa !2428
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %362, i64* %371, align 8, !tbaa !2428
  %372 = load i64, i64* %PC
  %373 = call %struct.Memory* @sub_400780_newWorkList_renamed_(%struct.State* %0, i64 %372, %struct.Memory* %MEMORY.1)
  %374 = load i64, i64* %RAX
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 8
  store i64 %376, i64* %PC
  store i64 %374, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 7
  store i64 %378, i64* %PC
  %379 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RDI, align 8, !tbaa !2428
  %381 = load i64, i64* %PC
  %382 = sub i64 %381, 2608
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 5
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 5
  store i64 %386, i64* %PC
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %388 = load i64, i64* %387, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %384, i64* %390
  store i64 %389, i64* %387, align 8, !tbaa !2428
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %382, i64* %391, align 8, !tbaa !2428
  %392 = load i64, i64* %PC
  %393 = call %struct.Memory* @sub_4007e0_newCombList_renamed_(%struct.State* %0, i64 %392, %struct.Memory* %373)
  %394 = load i64, i64* %RAX
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 8
  store i64 %396, i64* %PC
  store i64 %394, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 7
  store i64 %398, i64* %PC
  %399 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %400 = zext i32 %399 to i64
  store i64 %400, i64* %RDI, align 8, !tbaa !2428
  %401 = load i64, i64* %PC
  %402 = sub i64 %401, 2628
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 5
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  store i64 %406, i64* %PC
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %408 = load i64, i64* %407, align 8, !tbaa !2428
  %409 = add i64 %408, -8
  %410 = inttoptr i64 %409 to i64*
  store i64 %404, i64* %410
  store i64 %409, i64* %407, align 8, !tbaa !2428
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %402, i64* %411, align 8, !tbaa !2428
  %412 = load i64, i64* %PC
  %413 = call %struct.Memory* @sub_4007e0_newCombList_renamed_(%struct.State* %0, i64 %412, %struct.Memory* %393)
  %414 = load i64, i64* %RBP
  %415 = sub i64 %414, 64
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 4
  store i64 %417, i64* %PC
  store i64 %415, i64* %RSI, align 8, !tbaa !2428
  %418 = load i64, i64* %RAX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 8
  store i64 %420, i64* %PC
  store i64 %418, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 88) to i64*)
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 8
  store i64 %422, i64* %PC
  %423 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 64) to i64*)
  store i64 %423, i64* %RDI, align 8, !tbaa !2428
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 7
  store i64 %425, i64* %PC
  %426 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %427 = zext i32 %426 to i64
  store i64 %427, i64* %RDX, align 8, !tbaa !2428
  %428 = load i64, i64* %PC
  %429 = sub i64 %428, 2564
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 5
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %435 = load i64, i64* %434, align 8, !tbaa !2428
  %436 = add i64 %435, -8
  %437 = inttoptr i64 %436 to i64*
  store i64 %431, i64* %437
  store i64 %436, i64* %434, align 8, !tbaa !2428
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %429, i64* %438, align 8, !tbaa !2428
  %439 = load i64, i64* %PC
  %440 = call %struct.Memory* @sub_400840_initWorkList_renamed_(%struct.State* %0, i64 %439, %struct.Memory* %413)
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 8
  store i64 %442, i64* %PC
  %443 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 96) to i64*)
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 7
  store i64 %445, i64* %PC
  %446 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %447 = zext i32 %446 to i64
  store i64 %447, i64* %RSI, align 8, !tbaa !2428
  %448 = load i64, i64* %PC
  %449 = sub i64 %448, 2504
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 5
  store i64 %453, i64* %PC
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %455 = load i64, i64* %454, align 8, !tbaa !2428
  %456 = add i64 %455, -8
  %457 = inttoptr i64 %456 to i64*
  store i64 %451, i64* %457
  store i64 %456, i64* %454, align 8, !tbaa !2428
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %449, i64* %458, align 8, !tbaa !2428
  %459 = load i64, i64* %PC
  %460 = call %struct.Memory* @sub_400890_initCombList_renamed_(%struct.State* %0, i64 %459, %struct.Memory* %440)
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 8
  store i64 %462, i64* %PC
  %463 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 88) to i64*)
  store i64 %463, i64* %RDI, align 8, !tbaa !2428
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 7
  store i64 %465, i64* %PC
  %466 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %467 = zext i32 %466 to i64
  store i64 %467, i64* %RSI, align 8, !tbaa !2428
  %468 = load i64, i64* %PC
  %469 = sub i64 %468, 2524
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 5
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 5
  store i64 %473, i64* %PC
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %475 = load i64, i64* %474, align 8, !tbaa !2428
  %476 = add i64 %475, -8
  %477 = inttoptr i64 %476 to i64*
  store i64 %471, i64* %477
  store i64 %476, i64* %474, align 8, !tbaa !2428
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %469, i64* %478, align 8, !tbaa !2428
  %479 = load i64, i64* %PC
  %480 = call %struct.Memory* @sub_400890_initCombList_renamed_(%struct.State* %0, i64 %479, %struct.Memory* %460)
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 7
  store i64 %482, i64* %PC
  %483 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_602080__bss_type* @seg_602080__bss to i64), i64 72) to i32*)
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = load i64, i64* %RSP
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  %488 = add i64 96, %485
  store i64 %488, i64* %RSP, align 8, !tbaa !2428
  %489 = icmp ult i64 %488, %485
  %490 = icmp ult i64 %488, 96
  %491 = or i1 %489, %490
  %492 = zext i1 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %492, i8* %493, align 1, !tbaa !2434
  %494 = trunc i64 %488 to i32
  %495 = and i32 %494, 255
  %496 = call i32 @llvm.ctpop.i32(i32 %495) #17
  %497 = trunc i32 %496 to i8
  %498 = and i8 %497, 1
  %499 = xor i8 %498, 1
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %499, i8* %500, align 1, !tbaa !2447
  %501 = xor i64 96, %485
  %502 = xor i64 %501, %488
  %503 = lshr i64 %502, 4
  %504 = trunc i64 %503 to i8
  %505 = and i8 %504, 1
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %505, i8* %506, align 1, !tbaa !2448
  %507 = icmp eq i64 %488, 0
  %508 = zext i1 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %508, i8* %509, align 1, !tbaa !2449
  %510 = lshr i64 %488, 63
  %511 = trunc i64 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %511, i8* %512, align 1, !tbaa !2450
  %513 = lshr i64 %485, 63
  %514 = xor i64 %510, %513
  %515 = add nuw nsw i64 %514, %510
  %516 = icmp eq i64 %515, 2
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %517, i8* %518, align 1, !tbaa !2451
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 1
  store i64 %520, i64* %PC
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %522 = load i64, i64* %521, align 8, !tbaa !2428
  %523 = add i64 %522, 8
  %524 = inttoptr i64 %522 to i64*
  %525 = load i64, i64* %524
  store i64 %525, i64* %RBP, align 8, !tbaa !2428
  store i64 %523, i64* %521, align 8, !tbaa !2428
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 1
  store i64 %527, i64* %PC
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %530 = load i64, i64* %529, align 8, !tbaa !2428
  %531 = inttoptr i64 %530 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %528, align 8, !tbaa !2428
  %533 = add i64 %530, 8
  store i64 %533, i64* %529, align 8, !tbaa !2428
  ret %struct.Memory* %480

block_40116d:                                     ; preds = %block_40115d
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 72
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 3
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  %539 = load i32, i32* %538
  %540 = zext i32 %539 to i64
  store i64 %540, i64* %RDI, align 8, !tbaa !2428
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 8
  store i64 %542, i64* %PC
  %543 = load i64, i64* @stdin
  store i64 %543, i64* %RSI, align 8, !tbaa !2428
  %544 = load i64, i64* %PC
  %545 = sub i64 %544, 2824
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  store i64 %549, i64* %PC
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %551 = load i64, i64* %550, align 8, !tbaa !2428
  %552 = add i64 %551, -8
  %553 = inttoptr i64 %552 to i64*
  store i64 %547, i64* %553
  store i64 %552, i64* %550, align 8, !tbaa !2428
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %545, i64* %554, align 8, !tbaa !2428
  %555 = load i64, i64* %PC
  %556 = call %struct.Memory* @ext_602168_ungetc(%struct.State* %0, i64 %555, %struct.Memory* %MEMORY.2)
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 10
  store i64 %558, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64* %RSI, align 8, !tbaa !2428
  %559 = load i64, i64* %RBP
  %560 = sub i64 %559, 64
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 4
  store i64 %562, i64* %PC
  store i64 %560, i64* %RCX, align 8, !tbaa !2428
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 8
  store i64 %564, i64* %PC
  %565 = load i64, i64* @stdin
  store i64 %565, i64* %RDI, align 8, !tbaa !2428
  %566 = load i64, i64* %RBP
  %567 = sub i64 %566, 68
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 4
  store i64 %569, i64* %PC
  %570 = inttoptr i64 %567 to i32*
  %571 = load i32, i32* %570
  %572 = sext i32 %571 to i64
  store i64 %572, i64* %RDX, align 8, !tbaa !2428
  %573 = load i64, i64* %RDX
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  %576 = shl i64 %573, 1
  %577 = icmp slt i64 %576, 0
  %578 = shl i64 %576, 1
  store i64 %578, i64* %RDX, align 8, !tbaa !2428
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %580 = zext i1 %577 to i8
  store i8 %580, i8* %579, align 1, !tbaa !2452
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %582 = trunc i64 %578 to i32
  %583 = and i32 %582, 254
  %584 = call i32 @llvm.ctpop.i32(i32 %583) #17
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  %587 = xor i8 %586, 1
  store i8 %587, i8* %581, align 1, !tbaa !2452
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %588, align 1, !tbaa !2452
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %590 = icmp eq i64 %578, 0
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %589, align 1, !tbaa !2452
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %593 = lshr i64 %578, 63
  %594 = trunc i64 %593 to i8
  store i8 %594, i8* %592, align 1, !tbaa !2452
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %595, align 1, !tbaa !2452
  %596 = load i64, i64* %RCX
  %597 = load i64, i64* %RDX
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 3
  store i64 %599, i64* %PC
  %600 = add i64 %597, %596
  store i64 %600, i64* %RCX, align 8, !tbaa !2428
  %601 = icmp ult i64 %600, %596
  %602 = icmp ult i64 %600, %597
  %603 = or i1 %601, %602
  %604 = zext i1 %603 to i8
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %604, i8* %605, align 1, !tbaa !2434
  %606 = trunc i64 %600 to i32
  %607 = and i32 %606, 255
  %608 = call i32 @llvm.ctpop.i32(i32 %607) #17
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %611, i8* %612, align 1, !tbaa !2447
  %613 = xor i64 %597, %596
  %614 = xor i64 %613, %600
  %615 = lshr i64 %614, 4
  %616 = trunc i64 %615 to i8
  %617 = and i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %617, i8* %618, align 1, !tbaa !2448
  %619 = icmp eq i64 %600, 0
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = lshr i64 %600, 63
  %623 = trunc i64 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %623, i8* %624, align 1, !tbaa !2450
  %625 = lshr i64 %596, 63
  %626 = lshr i64 %597, 63
  %627 = xor i64 %622, %625
  %628 = xor i64 %622, %626
  %629 = add nuw nsw i64 %627, %628
  %630 = icmp eq i64 %629, 2
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %631, i8* %632, align 1, !tbaa !2451
  %633 = load i64, i64* %RCX
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC
  store i64 %633, i64* %RDX, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 80
  %638 = load i32, i32* %EAX
  %639 = zext i32 %638 to i64
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 3
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %637 to i32*
  store i32 %638, i32* %642
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 2
  store i64 %644, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %645 = load i64, i64* %PC
  %646 = sub i64 %645, 2966
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 5
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 5
  store i64 %650, i64* %PC
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %652 = load i64, i64* %651, align 8, !tbaa !2428
  %653 = add i64 %652, -8
  %654 = inttoptr i64 %653 to i64*
  store i64 %648, i64* %654
  store i64 %653, i64* %651, align 8, !tbaa !2428
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %646, i64* %655, align 8, !tbaa !2428
  %656 = load i64, i64* %PC
  %657 = call %struct.Memory* @ext_6020e8___isoc99_fscanf(%struct.State* %0, i64 %656, %struct.Memory* %556)
  %658 = bitcast i32* %R8D to i64*
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 68
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i32*
  %664 = load i32, i32* %663
  %665 = zext i32 %664 to i64
  store i64 %665, i64* %658, align 8, !tbaa !2428
  %666 = bitcast i32* %R8D to i64*
  %667 = load i32, i32* %R8D
  %668 = zext i32 %667 to i64
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 4
  store i64 %670, i64* %PC
  %671 = add i32 1, %667
  %672 = zext i32 %671 to i64
  store i64 %672, i64* %666, align 8, !tbaa !2428
  %673 = icmp ult i32 %671, %667
  %674 = icmp ult i32 %671, 1
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %676, i8* %677, align 1, !tbaa !2434
  %678 = and i32 %671, 255
  %679 = call i32 @llvm.ctpop.i32(i32 %678) #17
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %682, i8* %683, align 1, !tbaa !2447
  %684 = xor i64 1, %668
  %685 = trunc i64 %684 to i32
  %686 = xor i32 %685, %671
  %687 = lshr i32 %686, 4
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %689, i8* %690, align 1, !tbaa !2448
  %691 = icmp eq i32 %671, 0
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %692, i8* %693, align 1, !tbaa !2449
  %694 = lshr i32 %671, 31
  %695 = trunc i32 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %695, i8* %696, align 1, !tbaa !2450
  %697 = lshr i32 %667, 31
  %698 = xor i32 %694, %697
  %699 = add nuw nsw i32 %698, %694
  %700 = icmp eq i32 %699, 2
  %701 = zext i1 %700 to i8
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %701, i8* %702, align 1, !tbaa !2451
  %703 = load i64, i64* %RBP
  %704 = sub i64 %703, 68
  %705 = load i32, i32* %R8D
  %706 = zext i32 %705 to i64
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %704 to i32*
  store i32 %705, i32* %709
  %710 = load i64, i64* %RBP
  %711 = sub i64 %710, 84
  %712 = load i32, i32* %EAX
  %713 = zext i32 %712 to i64
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %711 to i32*
  store i32 %712, i32* %716
  %717 = load i64, i64* %PC
  %718 = sub i64 %717, 127
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 5
  store i64 %720, i64* %PC
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %718, i64* %721, align 8, !tbaa !2428
  br label %block_40113b

block_4011c9:                                     ; preds = %block_401168
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 68
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 7
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  store i32 4, i32* %726
  br label %block_4011d0

block_40115d:                                     ; preds = %block_401153, %block_40113b
  %MEMORY.2 = phi %struct.Memory* [ %127, %block_40113b ], [ %127, %block_401153 ]
  %727 = load i64, i64* %RBP
  %728 = sub i64 %727, 73
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 3
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i8*
  %732 = load i8, i8* %731
  store i8 %732, i8* %AL, align 1, !tbaa !2452
  %733 = load i8, i8* %AL
  %734 = zext i8 %733 to i64
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 2
  store i64 %736, i64* %PC
  %737 = and i64 1, %734
  %738 = trunc i64 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %739, align 1, !tbaa !2434
  %740 = trunc i64 %737 to i32
  %741 = and i32 %740, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #17
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2447
  %747 = icmp eq i8 %738, 0
  %748 = zext i1 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %748, i8* %749, align 1, !tbaa !2449
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %750, align 1, !tbaa !2450
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %751, align 1, !tbaa !2451
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %752, align 1, !tbaa !2448
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 11
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 6
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 6
  store i64 %758, i64* %PC
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %760 = load i8, i8* %759, align 1, !tbaa !2449
  %761 = icmp eq i8 %760, 0
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %764 = select i1 %761, i64 %754, i64 %756
  store i64 %764, i64* %763, align 8, !tbaa !2428
  %765 = load i8, i8* %BRANCH_TAKEN
  %766 = icmp eq i8 %765, 1
  br i1 %766, label %block_40116d, label %block_401168

block_401168:                                     ; preds = %block_40115d
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 87
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %768, i64* %771, align 8, !tbaa !2428
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 68
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 4
  store i64 %775, i64* %PC
  %776 = inttoptr i64 %773 to i32*
  %777 = load i32, i32* %776
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %778, align 1, !tbaa !2434
  %779 = and i32 %777, 255
  %780 = call i32 @llvm.ctpop.i32(i32 %779) #17
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  %783 = xor i8 %782, 1
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %783, i8* %784, align 1, !tbaa !2447
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %785, align 1, !tbaa !2448
  %786 = icmp eq i32 %777, 0
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %787, i8* %788, align 1, !tbaa !2449
  %789 = lshr i32 %777, 31
  %790 = trunc i32 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %790, i8* %791, align 1, !tbaa !2450
  %792 = lshr i32 %777, 31
  %793 = xor i32 %789, %792
  %794 = add nuw nsw i32 %793, %792
  %795 = icmp eq i32 %794, 2
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %796, i8* %797, align 1, !tbaa !2451
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 13
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 6
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 6
  store i64 %803, i64* %PC
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %805 = load i8, i8* %804, align 1, !tbaa !2449
  %806 = icmp eq i8 %805, 0
  %807 = zext i1 %806 to i8
  store i8 %807, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %809 = select i1 %806, i64 %799, i64 %801
  store i64 %809, i64* %808, align 8, !tbaa !2428
  %810 = load i8, i8* %BRANCH_TAKEN
  %811 = icmp eq i8 %810, 1
  br i1 %811, label %block_4011d0, label %block_4011c9
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012f0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2434
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #17
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2447
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2448
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2449
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2450
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2434
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #17
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2452
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #17
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2452
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2452
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2452
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2452
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2452
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 3380
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4005e8__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2434
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #17
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2447
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2449
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2450
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2451
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2448
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2449
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401346, label %block_401326

block_401346:                                     ; preds = %block_401330, %block_4012f0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4012f0 ], [ %387, %block_401330 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2434
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #17
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2448
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2449
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2451
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401326:                                     ; preds = %block_4012f0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2434
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #17
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2447
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2448
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401330

block_401330:                                     ; preds = %block_401330, %block_401326
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401326 ], [ %387, %block_401330 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2434
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #17
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2451
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2434
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #17
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2447
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2448
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2449
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2450
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2451
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2449
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401330, label %block_401346
}

; Function Attrs: noinline
define %struct.Memory* @sub_400ad6(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 0
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 7
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 0
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 0
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EAX = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDX = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %ESI = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  br label %block_400ad6

block_400b3a:                                     ; preds = %block_400a62
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 10
  store i64 %50, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 153), i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i64*
  %56 = load i64, i64* %55
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 16
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61
  %63 = sext i32 %62 to i64
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = load i64, i64* %RCX
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = sext i64 %64 to i128
  %68 = and i128 %67, -18446744073709551616
  %69 = zext i64 %64 to i128
  %70 = or i128 %68, %69
  %71 = mul nsw i128 12, %70
  %72 = trunc i128 %71 to i64
  store i64 %72, i64* %RCX, align 8, !tbaa !2428
  %73 = sext i64 %72 to i128
  %74 = icmp ne i128 %73, %71
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %75, i8* %76, align 1, !tbaa !2434
  %77 = trunc i128 %71 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #17
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2447
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %84, align 1, !tbaa !2448
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %85, align 1, !tbaa !2449
  %86 = lshr i64 %72, 63
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %75, i8* %89, align 1, !tbaa !2451
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %RCX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 3
  store i64 %93, i64* %PC
  %94 = add i64 %91, %90
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = icmp ult i64 %94, %90
  %96 = icmp ult i64 %94, %91
  %97 = or i1 %95, %96
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %98, i8* %99, align 1, !tbaa !2434
  %100 = trunc i64 %94 to i32
  %101 = and i32 %100, 255
  %102 = call i32 @llvm.ctpop.i32(i32 %101) #17
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %105, i8* %106, align 1, !tbaa !2447
  %107 = xor i64 %91, %90
  %108 = xor i64 %107, %94
  %109 = lshr i64 %108, 4
  %110 = trunc i64 %109 to i8
  %111 = and i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = icmp eq i64 %94, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i64 %94, 63
  %117 = trunc i64 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2450
  %119 = lshr i64 %90, 63
  %120 = lshr i64 %91, 63
  %121 = xor i64 %116, %119
  %122 = xor i64 %116, %120
  %123 = add nuw nsw i64 %121, %122
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %RAX
  %128 = add i64 %127, 8
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  %132 = load i32, i32* %131
  %133 = zext i32 %132 to i64
  store i64 %133, i64* %RSI, align 8, !tbaa !2428
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 2
  store i64 %135, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %136 = load i64, i64* %PC
  %137 = sub i64 %136, 1320
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 5
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  store i64 %141, i64* %PC
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = add i64 %143, -8
  %145 = inttoptr i64 %144 to i64*
  store i64 %139, i64* %145
  store i64 %144, i64* %142, align 8, !tbaa !2428
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %137, i64* %146, align 8, !tbaa !2428
  %147 = load i64, i64* %PC
  %148 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %147, %struct.Memory* %527)
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 64
  %151 = load i32, i32* %EAX
  %152 = zext i32 %151 to i64
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 3
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %150 to i32*
  store i32 %151, i32* %155
  br label %block_400b60

block_400bf6:                                     ; preds = %block_400be3
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 10
  store i64 %157, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 169), i64* %RDI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 2
  store i64 %159, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %160 = load i64, i64* %PC
  %161 = sub i64 %160, 1490
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 5
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  store i64 %165, i64* %PC
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %167 = load i64, i64* %166, align 8, !tbaa !2428
  %168 = add i64 %167, -8
  %169 = inttoptr i64 %168 to i64*
  store i64 %163, i64* %169
  store i64 %168, i64* %166, align 8, !tbaa !2428
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %161, i64* %170, align 8, !tbaa !2428
  %171 = load i64, i64* %PC
  %172 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %171, %struct.Memory* %MEMORY.1)
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 84
  %175 = load i32, i32* %EAX
  %176 = zext i32 %175 to i64
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 3
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %179
  %180 = load i64, i64* %RSP
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = add i64 96, %180
  store i64 %183, i64* %RSP, align 8, !tbaa !2428
  %184 = icmp ult i64 %183, %180
  %185 = icmp ult i64 %183, 96
  %186 = or i1 %184, %185
  %187 = zext i1 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %187, i8* %188, align 1, !tbaa !2434
  %189 = trunc i64 %183 to i32
  %190 = and i32 %189, 255
  %191 = call i32 @llvm.ctpop.i32(i32 %190) #17
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %194, i8* %195, align 1, !tbaa !2447
  %196 = xor i64 96, %180
  %197 = xor i64 %196, %183
  %198 = lshr i64 %197, 4
  %199 = trunc i64 %198 to i8
  %200 = and i8 %199, 1
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %200, i8* %201, align 1, !tbaa !2448
  %202 = icmp eq i64 %183, 0
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = lshr i64 %183, 63
  %206 = trunc i64 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %206, i8* %207, align 1, !tbaa !2450
  %208 = lshr i64 %180, 63
  %209 = xor i64 %205, %208
  %210 = add nuw nsw i64 %209, %205
  %211 = icmp eq i64 %210, 2
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %212, i8* %213, align 1, !tbaa !2451
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 1
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %217 = load i64, i64* %216, align 8, !tbaa !2428
  %218 = add i64 %217, 8
  %219 = inttoptr i64 %217 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %RBP, align 8, !tbaa !2428
  store i64 %218, i64* %216, align 8, !tbaa !2428
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 1
  store i64 %222, i64* %PC
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %225 = load i64, i64* %224, align 8, !tbaa !2428
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  store i64 %227, i64* %223, align 8, !tbaa !2428
  %228 = add i64 %225, 8
  store i64 %228, i64* %224, align 8, !tbaa !2428
  ret %struct.Memory* %172

block_400ad6:                                     ; preds = %block_400aaf, %3
  %MEMORY.0 = phi %struct.Memory* [ %2, %3 ], [ %527, %block_400aaf ]
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 10
  store i64 %230, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 145), i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 2
  store i64 %232, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %233 = load i64, i64* %PC
  %234 = sub i64 %233, 1202
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 5
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %240 = load i64, i64* %239, align 8, !tbaa !2428
  %241 = add i64 %240, -8
  %242 = inttoptr i64 %241 to i64*
  store i64 %236, i64* %242
  store i64 %241, i64* %239, align 8, !tbaa !2428
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %234, i64* %243, align 8, !tbaa !2428
  %244 = load i64, i64* %PC
  %245 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %244, %struct.Memory* %MEMORY.0)
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 48
  %248 = load i32, i32* %EAX
  %249 = zext i32 %248 to i64
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 3
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %247 to i32*
  store i32 %248, i32* %252
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 118
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 5
  store i64 %256, i64* %PC
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %254, i64* %257, align 8, !tbaa !2428
  br label %block_400b60

block_400bcf:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 168), i64* %RDI, align 8, !tbaa !2428
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  store i64 %259, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %260 = load i64, i64* %PC
  %261 = sub i64 %260, 1451
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  store i64 %265, i64* %PC
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %267 = load i64, i64* %266, align 8, !tbaa !2428
  %268 = add i64 %267, -8
  %269 = inttoptr i64 %268 to i64*
  store i64 %263, i64* %269
  store i64 %268, i64* %266, align 8, !tbaa !2428
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %261, i64* %270, align 8, !tbaa !2428
  %271 = load i64, i64* %PC
  %272 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %271, %struct.Memory* %843)
  %273 = load i64, i64* %RBP
  %274 = sub i64 %273, 80
  %275 = load i32, i32* %EAX
  %276 = zext i32 %275 to i64
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 3
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %274 to i32*
  store i32 %275, i32* %279
  br label %block_400be3

block_400bb6:                                     ; preds = %block_400b60
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 165), i64* %RDI, align 8, !tbaa !2428
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 2
  store i64 %281, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %282 = load i64, i64* %PC
  %283 = sub i64 %282, 1426
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 5
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %285, i64* %291
  store i64 %290, i64* %288, align 8, !tbaa !2428
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %292, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %293, %struct.Memory* %843)
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 76
  %297 = load i32, i32* %EAX
  %298 = zext i32 %297 to i64
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %296 to i32*
  store i32 %297, i32* %301
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 25
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %303, i64* %306, align 8, !tbaa !2428
  br label %block_400be3

block_400aaf:                                     ; preds = %block_400a62
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 32
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 4
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i64*
  %312 = load i64, i64* %311
  store i64 %312, i64* %RAX, align 8, !tbaa !2428
  %313 = load i64, i64* %RAX
  %314 = mul i64 %313, 8
  %315 = add i64 %314, add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 40)
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 8
  store i64 %317, i64* %PC
  %318 = inttoptr i64 %315 to i64*
  %319 = load i64, i64* %318
  store i64 %319, i64* %RCX, align 8, !tbaa !2428
  %320 = load i64, i64* %RCX
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 2
  store i64 %322, i64* %PC
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %320, i64* %323, align 8, !tbaa !2428
  %324 = load i64, i64* %PC
  switch i64 %324, label %965 [
    i64 4197153, label %block_400b21
    i64 4197128, label %block_400b08
    i64 4197053, label %block_400abd
    i64 4197103, label %block_400aef
    i64 4197078, label %block_400ad6
  ]

block_400be3:                                     ; preds = %block_400bb6, %block_400bcf
  %MEMORY.1 = phi %struct.Memory* [ %272, %block_400bcf ], [ %294, %block_400bb6 ]
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %326, i64* %329, align 8, !tbaa !2428
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 16
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i32*
  %335 = load i32, i32* %334
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = trunc i64 %337 to i32
  %341 = add i32 1, %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = icmp ult i32 %341, %340
  %344 = icmp ult i32 %341, 1
  %345 = or i1 %343, %344
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %346, i8* %347, align 1, !tbaa !2434
  %348 = and i32 %341, 255
  %349 = call i32 @llvm.ctpop.i32(i32 %348) #17
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  %352 = xor i8 %351, 1
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %352, i8* %353, align 1, !tbaa !2447
  %354 = xor i64 1, %337
  %355 = trunc i64 %354 to i32
  %356 = xor i32 %355, %341
  %357 = lshr i32 %356, 4
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %359, i8* %360, align 1, !tbaa !2448
  %361 = icmp eq i32 %341, 0
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %362, i8* %363, align 1, !tbaa !2449
  %364 = lshr i32 %341, 31
  %365 = trunc i32 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %365, i8* %366, align 1, !tbaa !2450
  %367 = lshr i32 %340, 31
  %368 = xor i32 %364, %367
  %369 = add nuw nsw i32 %368, %364
  %370 = icmp eq i32 %369, 2
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %371, i8* %372, align 1, !tbaa !2451
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 16
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %379
  %380 = load i64, i64* %PC
  %381 = sub i64 %380, 411
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %381, i64* %384, align 8, !tbaa !2428
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 16
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 3
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389
  %391 = zext i32 %390 to i64
  store i64 %391, i64* %RAX, align 8, !tbaa !2428
  %392 = load i32, i32* %EAX
  %393 = zext i32 %392 to i64
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 12
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sub i32 %392, %399
  %401 = icmp ult i32 %392, %399
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %402, i8* %403, align 1, !tbaa !2434
  %404 = and i32 %400, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #17
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = xor i32 %399, %392
  %411 = xor i32 %410, %400
  %412 = lshr i32 %411, 4
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = icmp eq i32 %400, 0
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %417, i8* %418, align 1, !tbaa !2449
  %419 = lshr i32 %400, 31
  %420 = trunc i32 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = lshr i32 %392, 31
  %423 = lshr i32 %399, 31
  %424 = xor i32 %423, %422
  %425 = xor i32 %419, %422
  %426 = add nuw nsw i32 %425, %424
  %427 = icmp eq i32 %426, 2
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %428, i8* %429, align 1, !tbaa !2451
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 410
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 6
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 6
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %437 = load i8, i8* %436, align 1, !tbaa !2450
  %438 = icmp ne i8 %437, 0
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %440 = load i8, i8* %439, align 1, !tbaa !2451
  %441 = icmp ne i8 %440, 0
  %442 = xor i1 %438, %441
  %443 = xor i1 %442, true
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %446 = select i1 %442, i64 %433, i64 %431
  store i64 %446, i64* %445, align 8, !tbaa !2428
  %447 = load i8, i8* %BRANCH_TAKEN
  %448 = icmp eq i8 %447, 1
  br i1 %448, label %block_400bf6, label %block_400a62

block_400a62:                                     ; preds = %block_400be3
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 8
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = load i64, i64* %RBP
  %456 = sub i64 %455, 16
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 4
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %456 to i32*
  %460 = load i32, i32* %459
  %461 = sext i32 %460 to i64
  store i64 %461, i64* %RCX, align 8, !tbaa !2428
  %462 = load i64, i64* %RCX
  %463 = load i64, i64* %RCX
  %464 = mul i64 %463, 2
  %465 = add i64 %464, %462
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %468 = load i64, i64* %RAX
  %469 = load i64, i64* %RCX
  %470 = mul i64 %469, 4
  %471 = add i64 %470, %468
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 3
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %471 to i32*
  %475 = load i32, i32* %474
  %476 = zext i32 %475 to i64
  store i64 %476, i64* %RSI, align 8, !tbaa !2428
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 5
  store i64 %478, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 162), i64 4294967295), i64* %RDX, align 8, !tbaa !2428
  %479 = load i32, i32* %EDX
  %480 = zext i32 %479 to i64
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 2
  store i64 %482, i64* %PC
  %483 = and i64 %480, 4294967295
  store i64 %483, i64* %RDI, align 8, !tbaa !2428
  %484 = load i64, i64* %RDX
  %485 = load i32, i32* %EDX
  %486 = zext i32 %485 to i64
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 2
  store i64 %488, i64* %PC
  %489 = xor i64 %486, %484
  %490 = trunc i64 %489 to i32
  %491 = and i64 %489, 4294967295
  store i64 %491, i64* %RDX, align 8, !tbaa !2428
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %492, align 1, !tbaa !2434
  %493 = and i32 %490, 255
  %494 = call i32 @llvm.ctpop.i32(i32 %493) #17
  %495 = trunc i32 %494 to i8
  %496 = and i8 %495, 1
  %497 = xor i8 %496, 1
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %497, i8* %498, align 1, !tbaa !2447
  %499 = icmp eq i32 %490, 0
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %500, i8* %501, align 1, !tbaa !2449
  %502 = lshr i32 %490, 31
  %503 = trunc i32 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %503, i8* %504, align 1, !tbaa !2450
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %505, align 1, !tbaa !2451
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %506, align 1, !tbaa !2448
  %507 = load i8, i8* %DL
  %508 = zext i8 %507 to i64
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 3
  store i64 %510, i64* %PC
  store i8 %507, i8* %R8B, align 1, !tbaa !2452
  %511 = load i8, i8* %R8B
  %512 = zext i8 %511 to i64
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 3
  store i64 %514, i64* %PC
  store i8 %511, i8* %AL, align 1, !tbaa !2452
  %515 = load i64, i64* %PC
  %516 = sub i64 %515, 1104
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 5
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 5
  store i64 %520, i64* %PC
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %522 = load i64, i64* %521, align 8, !tbaa !2428
  %523 = add i64 %522, -8
  %524 = inttoptr i64 %523 to i64*
  store i64 %518, i64* %524
  store i64 %523, i64* %521, align 8, !tbaa !2428
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %516, i64* %525, align 8, !tbaa !2428
  %526 = load i64, i64* %PC
  %527 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %526, %struct.Memory* %MEMORY.1)
  %528 = load i64, i64* %RBP
  %529 = sub i64 %528, 8
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 4
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to i64*
  %533 = load i64, i64* %532
  store i64 %533, i64* %RCX, align 8, !tbaa !2428
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 16
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 4
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  %539 = load i32, i32* %538
  %540 = sext i32 %539 to i64
  store i64 %540, i64* %RDI, align 8, !tbaa !2428
  %541 = load i64, i64* %RDI
  %542 = load i64, i64* %RDI
  %543 = mul i64 %542, 2
  %544 = add i64 %543, %541
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 4
  store i64 %546, i64* %PC
  store i64 %544, i64* %RDI, align 8, !tbaa !2428
  %547 = load i64, i64* %RCX
  %548 = load i64, i64* %RDI
  %549 = mul i64 %548, 4
  %550 = add i64 %547, 8
  %551 = add i64 %550, %549
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %551 to i32*
  %555 = load i32, i32* %554
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RDX, align 8, !tbaa !2428
  %557 = load i32, i32* %EDX
  %558 = zext i32 %557 to i64
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 2
  store i64 %560, i64* %PC
  %561 = and i64 %558, 4294967295
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = load i64, i64* %RCX
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 3
  store i64 %564, i64* %PC
  store i64 %562, i64* %RDI, align 8, !tbaa !2428
  %565 = load i64, i64* %RDI
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 4
  store i64 %567, i64* %PC
  %568 = sub i64 %565, 4
  store i64 %568, i64* %RDI, align 8, !tbaa !2428
  %569 = icmp ult i64 %565, 4
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %570, i8* %571, align 1, !tbaa !2434
  %572 = trunc i64 %568 to i32
  %573 = and i32 %572, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #17
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2447
  %579 = xor i64 4, %565
  %580 = xor i64 %579, %568
  %581 = lshr i64 %580, 4
  %582 = trunc i64 %581 to i8
  %583 = and i8 %582, 1
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %583, i8* %584, align 1, !tbaa !2448
  %585 = icmp eq i64 %568, 0
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %586, i8* %587, align 1, !tbaa !2449
  %588 = lshr i64 %568, 63
  %589 = trunc i64 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %589, i8* %590, align 1, !tbaa !2450
  %591 = lshr i64 %565, 63
  %592 = xor i64 %588, %591
  %593 = add nuw nsw i64 %592, %591
  %594 = icmp eq i64 %593, 2
  %595 = zext i1 %594 to i8
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %595, i8* %596, align 1, !tbaa !2451
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 20
  %599 = load i32, i32* %EAX
  %600 = zext i32 %599 to i64
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 3
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %598 to i32*
  store i32 %599, i32* %603
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 32
  %606 = load i64, i64* %RCX
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 4
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %605 to i64*
  store i64 %606, i64* %609
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 40
  %612 = load i64, i64* %RDI
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %611 to i64*
  store i64 %612, i64* %615
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 145
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 6
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 6
  store i64 %621, i64* %PC
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %623 = load i8, i8* %622, align 1, !tbaa !2434
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %625 = load i8, i8* %624, align 1, !tbaa !2449
  %626 = or i8 %625, %623
  %627 = icmp eq i8 %626, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %630 = select i1 %627, i64 %617, i64 %619
  store i64 %630, i64* %629, align 8, !tbaa !2428
  %631 = load i8, i8* %BRANCH_TAKEN
  %632 = icmp eq i8 %631, 1
  br i1 %632, label %block_400b3a, label %block_400aaf

block_400b60:                                     ; preds = %block_400ad6, %block_400b3a
  %MEMORY.2 = phi %struct.Memory* [ %245, %block_400ad6 ], [ %148, %block_400b3a ]
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 8
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 4
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i64*
  %638 = load i64, i64* %637
  store i64 %638, i64* %RAX, align 8, !tbaa !2428
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 16
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 4
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i32*
  %644 = load i32, i32* %643
  %645 = sext i32 %644 to i64
  store i64 %645, i64* %RCX, align 8, !tbaa !2428
  %646 = load i64, i64* %RCX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 4
  store i64 %648, i64* %PC
  %649 = sext i64 %646 to i128
  %650 = and i128 %649, -18446744073709551616
  %651 = zext i64 %646 to i128
  %652 = or i128 %650, %651
  %653 = mul nsw i128 12, %652
  %654 = trunc i128 %653 to i64
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = sext i64 %654 to i128
  %656 = icmp ne i128 %655, %653
  %657 = zext i1 %656 to i8
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %657, i8* %658, align 1, !tbaa !2434
  %659 = trunc i128 %653 to i32
  %660 = and i32 %659, 255
  %661 = call i32 @llvm.ctpop.i32(i32 %660) #17
  %662 = trunc i32 %661 to i8
  %663 = and i8 %662, 1
  %664 = xor i8 %663, 1
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %664, i8* %665, align 1, !tbaa !2447
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %666, align 1, !tbaa !2448
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %667, align 1, !tbaa !2449
  %668 = lshr i64 %654, 63
  %669 = trunc i64 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %669, i8* %670, align 1, !tbaa !2450
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %657, i8* %671, align 1, !tbaa !2451
  %672 = load i64, i64* %RAX
  %673 = load i64, i64* %RCX
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 3
  store i64 %675, i64* %PC
  %676 = add i64 %673, %672
  store i64 %676, i64* %RAX, align 8, !tbaa !2428
  %677 = icmp ult i64 %676, %672
  %678 = icmp ult i64 %676, %673
  %679 = or i1 %677, %678
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %680, i8* %681, align 1, !tbaa !2434
  %682 = trunc i64 %676 to i32
  %683 = and i32 %682, 255
  %684 = call i32 @llvm.ctpop.i32(i32 %683) #17
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  %687 = xor i8 %686, 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %687, i8* %688, align 1, !tbaa !2447
  %689 = xor i64 %673, %672
  %690 = xor i64 %689, %676
  %691 = lshr i64 %690, 4
  %692 = trunc i64 %691 to i8
  %693 = and i8 %692, 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %693, i8* %694, align 1, !tbaa !2448
  %695 = icmp eq i64 %676, 0
  %696 = zext i1 %695 to i8
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %696, i8* %697, align 1, !tbaa !2449
  %698 = lshr i64 %676, 63
  %699 = trunc i64 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %699, i8* %700, align 1, !tbaa !2450
  %701 = lshr i64 %672, 63
  %702 = lshr i64 %673, 63
  %703 = xor i64 %698, %701
  %704 = xor i64 %698, %702
  %705 = add nuw nsw i64 %703, %704
  %706 = icmp eq i64 %705, 2
  %707 = zext i1 %706 to i8
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %707, i8* %708, align 1, !tbaa !2451
  %709 = load i64, i64* %RAX
  %710 = add i64 %709, 4
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 3
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i32*
  %714 = load i32, i32* %713
  %715 = zext i32 %714 to i64
  store i64 %715, i64* %RSI, align 8, !tbaa !2428
  %716 = load i64, i64* %RBP
  %717 = sub i64 %716, 8
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %717 to i64*
  %721 = load i64, i64* %720
  store i64 %721, i64* %RAX, align 8, !tbaa !2428
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 16
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i32*
  %727 = load i32, i32* %726
  %728 = sext i32 %727 to i64
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = load i64, i64* %RCX
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 4
  store i64 %731, i64* %PC
  %732 = sext i64 %729 to i128
  %733 = and i128 %732, -18446744073709551616
  %734 = zext i64 %729 to i128
  %735 = or i128 %733, %734
  %736 = mul nsw i128 12, %735
  %737 = trunc i128 %736 to i64
  store i64 %737, i64* %RCX, align 8, !tbaa !2428
  %738 = sext i64 %737 to i128
  %739 = icmp ne i128 %738, %736
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %740, i8* %741, align 1, !tbaa !2434
  %742 = trunc i128 %736 to i32
  %743 = and i32 %742, 255
  %744 = call i32 @llvm.ctpop.i32(i32 %743) #17
  %745 = trunc i32 %744 to i8
  %746 = and i8 %745, 1
  %747 = xor i8 %746, 1
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %747, i8* %748, align 1, !tbaa !2447
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %749, align 1, !tbaa !2448
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %750, align 1, !tbaa !2449
  %751 = lshr i64 %737, 63
  %752 = trunc i64 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %752, i8* %753, align 1, !tbaa !2450
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %740, i8* %754, align 1, !tbaa !2451
  %755 = load i64, i64* %RAX
  %756 = load i64, i64* %RCX
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 3
  store i64 %758, i64* %PC
  %759 = add i64 %756, %755
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = icmp ult i64 %759, %755
  %761 = icmp ult i64 %759, %756
  %762 = or i1 %760, %761
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %763, i8* %764, align 1, !tbaa !2434
  %765 = trunc i64 %759 to i32
  %766 = and i32 %765, 255
  %767 = call i32 @llvm.ctpop.i32(i32 %766) #17
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = xor i8 %769, 1
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %770, i8* %771, align 1, !tbaa !2447
  %772 = xor i64 %756, %755
  %773 = xor i64 %772, %759
  %774 = lshr i64 %773, 4
  %775 = trunc i64 %774 to i8
  %776 = and i8 %775, 1
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %776, i8* %777, align 1, !tbaa !2448
  %778 = icmp eq i64 %759, 0
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %779, i8* %780, align 1, !tbaa !2449
  %781 = lshr i64 %759, 63
  %782 = trunc i64 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %782, i8* %783, align 1, !tbaa !2450
  %784 = lshr i64 %755, 63
  %785 = lshr i64 %756, 63
  %786 = xor i64 %781, %784
  %787 = xor i64 %781, %785
  %788 = add nuw nsw i64 %786, %787
  %789 = icmp eq i64 %788, 2
  %790 = zext i1 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %790, i8* %791, align 1, !tbaa !2451
  %792 = load i64, i64* %RAX
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  store i64 %792, i64* %RDI, align 8, !tbaa !2428
  %795 = load i64, i64* %RBP
  %796 = sub i64 %795, 68
  %797 = load i32, i32* %ESI
  %798 = zext i32 %797 to i64
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 3
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %796 to i32*
  store i32 %797, i32* %801
  %802 = load i64, i64* %PC
  %803 = sub i64 %802, 487
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 5
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 5
  store i64 %807, i64* %PC
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %809 = load i64, i64* %808, align 8, !tbaa !2428
  %810 = add i64 %809, -8
  %811 = inttoptr i64 %810 to i64*
  store i64 %805, i64* %811
  store i64 %810, i64* %808, align 8, !tbaa !2428
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %803, i64* %812, align 8, !tbaa !2428
  %813 = load i64, i64* %PC
  %814 = call %struct.Memory* @sub_4009a0_calculate_renamed_(%struct.State* %0, i64 %813, %struct.Memory* %MEMORY.2)
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 10
  store i64 %816, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 159), i64* %RDI, align 8, !tbaa !2428
  %817 = load i64, i64* %RBP
  %818 = sub i64 %817, 68
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 3
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to i32*
  %822 = load i32, i32* %821
  %823 = zext i32 %822 to i64
  store i64 %823, i64* %RSI, align 8, !tbaa !2428
  %824 = load i32, i32* %EAX
  %825 = zext i32 %824 to i64
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 2
  store i64 %827, i64* %PC
  %828 = and i64 %825, 4294967295
  store i64 %828, i64* %RDX, align 8, !tbaa !2428
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 2
  store i64 %830, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %831 = load i64, i64* %PC
  %832 = sub i64 %831, 1389
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 5
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %838 = load i64, i64* %837, align 8, !tbaa !2428
  %839 = add i64 %838, -8
  %840 = inttoptr i64 %839 to i64*
  store i64 %834, i64* %840
  store i64 %839, i64* %837, align 8, !tbaa !2428
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %832, i64* %841, align 8, !tbaa !2428
  %842 = load i64, i64* %PC
  %843 = call %struct.Memory* @ext_6020f8_printf(%struct.State* %0, i64 %842, %struct.Memory* %814)
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 16
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 3
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %845 to i32*
  %849 = load i32, i32* %848
  %850 = zext i32 %849 to i64
  store i64 %850, i64* %RDX, align 8, !tbaa !2428
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 12
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 3
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i32*
  %856 = load i32, i32* %855
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RSI, align 8, !tbaa !2428
  %858 = load i64, i64* %RSI
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 3
  store i64 %860, i64* %PC
  %861 = trunc i64 %858 to i32
  %862 = sub i32 %861, 1
  %863 = zext i32 %862 to i64
  store i64 %863, i64* %RSI, align 8, !tbaa !2428
  %864 = icmp ult i32 %861, 1
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %865, i8* %866, align 1, !tbaa !2434
  %867 = and i32 %862, 255
  %868 = call i32 @llvm.ctpop.i32(i32 %867) #17
  %869 = trunc i32 %868 to i8
  %870 = and i8 %869, 1
  %871 = xor i8 %870, 1
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %871, i8* %872, align 1, !tbaa !2447
  %873 = xor i64 1, %858
  %874 = trunc i64 %873 to i32
  %875 = xor i32 %874, %862
  %876 = lshr i32 %875, 4
  %877 = trunc i32 %876 to i8
  %878 = and i8 %877, 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = icmp eq i32 %862, 0
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i32 %862, 31
  %884 = trunc i32 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = lshr i32 %861, 31
  %887 = xor i32 %883, %886
  %888 = add nuw nsw i32 %887, %886
  %889 = icmp eq i32 %888, 2
  %890 = zext i1 %889 to i8
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %890, i8* %891, align 1, !tbaa !2451
  %892 = load i32, i32* %EDX
  %893 = zext i32 %892 to i64
  %894 = load i32, i32* %ESI
  %895 = zext i32 %894 to i64
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 2
  store i64 %897, i64* %PC
  %898 = sub i32 %892, %894
  %899 = icmp ult i32 %892, %894
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %900, i8* %901, align 1, !tbaa !2434
  %902 = and i32 %898, 255
  %903 = call i32 @llvm.ctpop.i32(i32 %902) #17
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %906, i8* %907, align 1, !tbaa !2447
  %908 = xor i64 %895, %893
  %909 = trunc i64 %908 to i32
  %910 = xor i32 %909, %898
  %911 = lshr i32 %910, 4
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %913, i8* %914, align 1, !tbaa !2448
  %915 = icmp eq i32 %898, 0
  %916 = zext i1 %915 to i8
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %916, i8* %917, align 1, !tbaa !2449
  %918 = lshr i32 %898, 31
  %919 = trunc i32 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %919, i8* %920, align 1, !tbaa !2450
  %921 = lshr i32 %892, 31
  %922 = lshr i32 %894, 31
  %923 = xor i32 %922, %921
  %924 = xor i32 %918, %921
  %925 = add nuw nsw i32 %924, %923
  %926 = icmp eq i32 %925, 2
  %927 = zext i1 %926 to i8
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %927, i8* %928, align 1, !tbaa !2451
  %929 = load i64, i64* %RBP
  %930 = sub i64 %929, 72
  %931 = load i32, i32* %EAX
  %932 = zext i32 %931 to i64
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 3
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %930 to i32*
  store i32 %931, i32* %935
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 31
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 6
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 6
  store i64 %941, i64* %PC
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %943 = load i8, i8* %942, align 1, !tbaa !2450
  %944 = icmp ne i8 %943, 0
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %946 = load i8, i8* %945, align 1, !tbaa !2451
  %947 = icmp ne i8 %946, 0
  %948 = xor i1 %944, %947
  %949 = xor i1 %948, true
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %952 = select i1 %948, i64 %939, i64 %937
  store i64 %952, i64* %951, align 8, !tbaa !2428
  %953 = load i8, i8* %BRANCH_TAKEN
  %954 = icmp eq i8 %953, 1
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 10
  store i64 %956, i64* %PC
  br i1 %954, label %block_400bcf, label %block_400bb6

block_400aef:                                     ; preds = %block_400aaf
  %957 = load i64, i64* %PC
  %958 = tail call %struct.Memory* @sub_400aef(%struct.State* %0, i64 %957, %struct.Memory* %527)
  ret %struct.Memory* %958

block_400abd:                                     ; preds = %block_400aaf
  %959 = load i64, i64* %PC
  %960 = tail call %struct.Memory* @sub_400abd(%struct.State* %0, i64 %959, %struct.Memory* %527)
  ret %struct.Memory* %960

block_400b08:                                     ; preds = %block_400aaf
  %961 = load i64, i64* %PC
  %962 = tail call %struct.Memory* @sub_400b08(%struct.State* %0, i64 %961, %struct.Memory* %527)
  ret %struct.Memory* %962

block_400b21:                                     ; preds = %block_400aaf
  %963 = load i64, i64* %PC
  %964 = tail call %struct.Memory* @sub_400b21(%struct.State* %0, i64 %963, %struct.Memory* %527)
  ret %struct.Memory* %964

; <label>:965:                                    ; preds = %block_400aaf
  %966 = load i64, i64* %PC
  %967 = tail call %struct.Memory* @__remill_missing_block(%struct.State* %0, i64 %966, %struct.Memory* %527)
  ret %struct.Memory* %967
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780_newWorkList(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400780:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %AX = bitcast %union.anon* %12 to i16*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EAX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RAX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 32
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 32
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2434
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #17
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = xor i64 32, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2451
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 5
  store i64 %77, i64* %PC
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %78 = load i32, i32* %EAX
  %79 = zext i32 %78 to i64
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 2
  store i64 %81, i64* %PC
  %82 = and i64 %79, 4294967295
  store i64 %82, i64* %RSI, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 4
  %85 = load i32, i32* %EDI
  %86 = zext i32 %85 to i64
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %84 to i32*
  store i32 %85, i32* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 4
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  %95 = load i32, i32* %94
  %96 = sext i32 %95 to i64
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %97 = load i64, i64* %PC
  %98 = sub i64 %97, 342
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %104 = load i64, i64* %103, align 8, !tbaa !2428
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %100, i64* %106
  store i64 %105, i64* %103, align 8, !tbaa !2428
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %98, i64* %107, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = call %struct.Memory* @ext_602150_calloc(%struct.State* %0, i64 %108, %struct.Memory* %2)
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 16
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %111 to i64*
  store i64 %112, i64* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 16
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %122, align 1, !tbaa !2434
  %123 = trunc i64 %121 to i32
  %124 = and i32 %123, 255
  %125 = call i32 @llvm.ctpop.i32(i32 %124) #17
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %130, align 1, !tbaa !2448
  %131 = icmp eq i64 %121, 0
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %132, i8* %133, align 1, !tbaa !2449
  %134 = lshr i64 %121, 63
  %135 = trunc i64 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %135, i8* %136, align 1, !tbaa !2450
  %137 = lshr i64 %121, 63
  %138 = xor i64 %134, %137
  %139 = add nuw nsw i64 %138, %137
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %141, i8* %142, align 1, !tbaa !2451
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 16
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 6
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = load i8, i8* %149, align 1, !tbaa !2449
  store i8 %150, i8* %BRANCH_TAKEN, align 1, !tbaa !2452
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %152 = icmp ne i8 %150, 0
  %153 = select i1 %152, i64 %144, i64 %146
  store i64 %153, i64* %151, align 8, !tbaa !2428
  %154 = load i8, i8* %BRANCH_TAKEN
  %155 = icmp eq i8 %154, 1
  br i1 %155, label %block_4007b4, label %block_4007aa

block_4007b4:                                     ; preds = %block_400780
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 10
  store i64 %157, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 80), i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 8
  store i64 %159, i64* %PC
  %160 = load i64, i64* @stderr
  store i64 %160, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 2
  store i64 %162, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2452
  %163 = load i64, i64* %PC
  %164 = sub i64 %163, 360
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %166, i64* %172
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %173, align 8, !tbaa !2428
  %174 = load i64, i64* %PC
  %175 = call %struct.Memory* @ext_400660_fprintf(%struct.State* %0, i64 %174, %struct.Memory* %109)
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 5
  store i64 %177, i64* %PC
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 20
  %180 = load i32, i32* %EAX
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %PC
  %186 = sub i64 %185, 341
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 5
  store i64 %190, i64* %PC
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %192 = load i64, i64* %191, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %188, i64* %194
  store i64 %193, i64* %191, align 8, !tbaa !2428
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %186, i64* %195, align 8, !tbaa !2428
  %196 = load i64, i64* %PC
  %197 = call %struct.Memory* @ext_602170_exit(%struct.State* %0, i64 %196, %struct.Memory* %175)
  %198 = load i64, i64* %RAX
  %199 = load i64, i64* %RAX
  %200 = add i64 %199, %198
  %201 = load i16, i16* %AX
  %202 = zext i16 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 6
  store i64 %204, i64* %PC
  %205 = load i64, i64* %PC
  %206 = tail call %struct.Memory* @sub_4007e0_newCombList(%struct.State* %0, i64 %205, %struct.Memory* %197)
  ret %struct.Memory* %206

block_4007aa:                                     ; preds = %block_400780
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 16
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = load i64, i64* %RSP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = add i64 32, %213
  store i64 %216, i64* %RSP, align 8, !tbaa !2428
  %217 = icmp ult i64 %216, %213
  %218 = icmp ult i64 %216, 32
  %219 = or i1 %217, %218
  %220 = zext i1 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %220, i8* %221, align 1, !tbaa !2434
  %222 = trunc i64 %216 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #17
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = xor i64 32, %213
  %230 = xor i64 %229, %216
  %231 = lshr i64 %230, 4
  %232 = trunc i64 %231 to i8
  %233 = and i8 %232, 1
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %233, i8* %234, align 1, !tbaa !2448
  %235 = icmp eq i64 %216, 0
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %236, i8* %237, align 1, !tbaa !2449
  %238 = lshr i64 %216, 63
  %239 = trunc i64 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = lshr i64 %213, 63
  %242 = xor i64 %238, %241
  %243 = add nuw nsw i64 %242, %238
  %244 = icmp eq i64 %243, 2
  %245 = zext i1 %244 to i8
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %245, i8* %246, align 1, !tbaa !2451
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 1
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %250 = load i64, i64* %249, align 8, !tbaa !2428
  %251 = add i64 %250, 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RBP, align 8, !tbaa !2428
  store i64 %251, i64* %249, align 8, !tbaa !2428
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 1
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %258 = load i64, i64* %257, align 8, !tbaa !2428
  %259 = inttoptr i64 %258 to i64*
  %260 = load i64, i64* %259
  store i64 %260, i64* %256, align 8, !tbaa !2428
  %261 = add i64 %258, 8
  store i64 %261, i64* %257, align 8, !tbaa !2428
  ret %struct.Memory* %109
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400770_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400770_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400770_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400740___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400740;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400740___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400740___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401360___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401360;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401360___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401360___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4012f0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4012f0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012f0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012b0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602148___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6020f8_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400660_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602170_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602150_calloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6020f0_abs(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602158_getchar(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @getchar to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_602168_ungetc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @ungetc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6020e8___isoc99_fscanf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_fscanf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005e8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005e8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @initCombList() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400890;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @initCombList_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400890_initCombList(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @recSearch() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400ca0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @recSearch_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400ca0_recSearch(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @doSearch() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @doSearch_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400fd0_doSearch(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @calculate() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4009a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @calculate_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4009a0_calculate(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @newWorkList() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @newWorkList_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400780_newWorkList(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @getInput() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @getInput_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401110_getInput(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @search() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401280;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @search_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401280_search(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @saveSolution() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4008e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @saveSolution_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4008e0_saveSolution(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @printSolution() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400a40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @printSolution_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400a40_printSolution(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @printList() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @printList_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400c10_printList(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @initWorkList() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400840;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @18, void ()** @2)
  ret void
}

define internal %struct.Memory* @initWorkList_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400840_initWorkList(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401364;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @19, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401364__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @newCombList() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4007e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @20, void ()** @2)
  ret void
}

define internal %struct.Memory* @newCombList_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4007e0_newCombList(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401360___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4012f0___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { alwaysinline nobuiltin nounwind }
attributes #17 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2433, i64 0}
!2433 = !{!"int", !2430, i64 0}
!2434 = !{!2435, !2430, i64 2065}
!2435 = !{!"_ZTS5State", !2430, i64 16, !2436, i64 2064, !2430, i64 2080, !2437, i64 2088, !2439, i64 2112, !2441, i64 2208, !2442, i64 2480, !2443, i64 2608, !2444, i64 2736, !2430, i64 2760, !2430, i64 2768, !2445, i64 3280}
!2436 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2437 = !{!"_ZTS8Segments", !2438, i64 0, !2430, i64 2, !2438, i64 4, !2430, i64 6, !2438, i64 8, !2430, i64 10, !2438, i64 12, !2430, i64 14, !2438, i64 16, !2430, i64 18, !2438, i64 20, !2430, i64 22}
!2438 = !{!"short", !2430, i64 0}
!2439 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2440, i64 8, !2429, i64 16, !2440, i64 24, !2429, i64 32, !2440, i64 40, !2429, i64 48, !2440, i64 56, !2429, i64 64, !2440, i64 72, !2429, i64 80, !2440, i64 88}
!2440 = !{!"_ZTS3Reg", !2430, i64 0}
!2441 = !{!"_ZTS3GPR", !2429, i64 0, !2440, i64 8, !2429, i64 16, !2440, i64 24, !2429, i64 32, !2440, i64 40, !2429, i64 48, !2440, i64 56, !2429, i64 64, !2440, i64 72, !2429, i64 80, !2440, i64 88, !2429, i64 96, !2440, i64 104, !2429, i64 112, !2440, i64 120, !2429, i64 128, !2440, i64 136, !2429, i64 144, !2440, i64 152, !2429, i64 160, !2440, i64 168, !2429, i64 176, !2440, i64 184, !2429, i64 192, !2440, i64 200, !2429, i64 208, !2440, i64 216, !2429, i64 224, !2440, i64 232, !2429, i64 240, !2440, i64 248, !2429, i64 256, !2440, i64 264}
!2442 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2443 = !{!"_ZTS3MMX", !2430, i64 0}
!2444 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2445 = !{!"_ZTS13SegmentCaches", !2446, i64 0, !2446, i64 16, !2446, i64 32, !2446, i64 48, !2446, i64 64, !2446, i64 80}
!2446 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2433, i64 8, !2433, i64 12}
!2447 = !{!2435, !2430, i64 2067}
!2448 = !{!2435, !2430, i64 2069}
!2449 = !{!2435, !2430, i64 2071}
!2450 = !{!2435, !2430, i64 2073}
!2451 = !{!2435, !2430, i64 2077}
!2452 = !{!2430, !2430, i64 0}
