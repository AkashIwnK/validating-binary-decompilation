; ModuleID = 'simple_types_constant_folding/test.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.one_result = type { double, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

$_Z4fillIPaaEvT_S1_T0_ = comdat any

$_Z13test_constantIa10custom_twoIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc = comdat any

$_Z4fillIPhhEvT_S1_T0_ = comdat any

$_Z13test_constantIh10custom_twoIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc = comdat any

$_Z4fillIPssEvT_S1_T0_ = comdat any

$_Z13test_constantIs10custom_twoIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc = comdat any

$_Z4fillIPttEvT_S1_T0_ = comdat any

$_Z13test_constantIt10custom_twoItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt18custom_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc = comdat any

$_Z4fillIPiiEvT_S1_T0_ = comdat any

$_Z13test_constantIi10custom_twoIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc = comdat any

$_Z4fillIPjjEvT_S1_T0_ = comdat any

$_Z13test_constantIj10custom_twoIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc = comdat any

$_Z4fillIPllEvT_S1_T0_ = comdat any

$_Z13test_constantIl10custom_twoIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc = comdat any

$_Z4fillIPmmEvT_S1_T0_ = comdat any

$_Z13test_constantIm10custom_twoImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm18custom_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc = comdat any

$_Z4fillIPffEvT_S1_T0_ = comdat any

$_Z13test_constantIf10custom_twoIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc = comdat any

$_Z4fillIPddEvT_S1_T0_ = comdat any

$_Z13test_constantId10custom_twoIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc = comdat any

$_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc = comdat any

$_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc = comdat any

$_ZN30custom_multiple_constant_mixedIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_ = comdat any

$_Z15tolerance_equalIdEbRT_S1_ = comdat any

$_ZN32custom_multiple_constant_divide2IdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_ = comdat any

$_ZN22custom_constant_divideIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId22custom_constant_divideIdEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_ = comdat any

$_ZN24custom_constant_multiplyIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_ = comdat any

$_ZN19custom_constant_subIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId19custom_constant_subIdEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_ = comdat any

$_ZN19custom_constant_addIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId19custom_constant_addIdEEvT_ = comdat any

$_ZN23custom_divide_constantsIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_ = comdat any

$_ZN25custom_multiply_constantsIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_ = comdat any

$_ZN20custom_sub_constantsIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_ = comdat any

$_ZN20custom_add_constantsIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId20custom_add_constantsIdEEvT_ = comdat any

$_ZN10custom_twoIdE8do_shiftEd = comdat any

$_Z17check_shifted_sumId10custom_twoIdEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_ = comdat any

$_Z15tolerance_equalIfEbRT_S1_ = comdat any

$_ZSt4fabsf = comdat any

$_ZN32custom_multiple_constant_divide2IfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_ = comdat any

$_ZN22custom_constant_divideIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_ = comdat any

$_ZN24custom_constant_multiplyIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_ = comdat any

$_ZN19custom_constant_subIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf19custom_constant_subIfEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_ = comdat any

$_ZN19custom_constant_addIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf19custom_constant_addIfEEvT_ = comdat any

$_ZN23custom_divide_constantsIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_ = comdat any

$_ZN25custom_multiply_constantsIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_ = comdat any

$_ZN20custom_sub_constantsIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_ = comdat any

$_ZN20custom_add_constantsIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_ = comdat any

$_ZN10custom_twoIfE8do_shiftEf = comdat any

$_Z17check_shifted_sumIf10custom_twoIfEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_ = comdat any

$_Z15tolerance_equalImEbRT_S1_ = comdat any

$_ZN19custom_constant_xorImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm19custom_constant_xorImEEvT_ = comdat any

$_ZN27custom_multiple_constant_orImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_ = comdat any

$_ZN18custom_constant_orImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm18custom_constant_orImEEvT_ = comdat any

$_ZN28custom_multiple_constant_andImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_ = comdat any

$_ZN19custom_constant_andImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm19custom_constant_andImEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2ImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_ = comdat any

$_ZN22custom_constant_divideImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm22custom_constant_divideImEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2ImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_ = comdat any

$_ZN24custom_constant_multiplyImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_ = comdat any

$_ZN28custom_multiple_constant_subImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_ = comdat any

$_ZN19custom_constant_subImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm19custom_constant_subImEEvT_ = comdat any

$_ZN28custom_multiple_constant_addImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_ = comdat any

$_ZN19custom_constant_addImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm19custom_constant_addImEEvT_ = comdat any

$_ZN20custom_xor_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_ = comdat any

$_ZN19custom_or_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm19custom_or_constantsImEEvT_ = comdat any

$_ZN20custom_and_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm20custom_and_constantsImEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm30custom_lessthanequal_constantsImEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_ = comdat any

$_ZN25custom_lessthan_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm25custom_lessthan_constantsImEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_ = comdat any

$_ZN25custom_notequal_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_ = comdat any

$_ZN22custom_equal_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm22custom_equal_constantsImEEvT_ = comdat any

$_ZN20custom_mod_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_ = comdat any

$_ZN23custom_divide_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_ = comdat any

$_ZN25custom_multiply_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_ = comdat any

$_ZN20custom_sub_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_ = comdat any

$_ZN20custom_add_constantsImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm20custom_add_constantsImEEvT_ = comdat any

$_ZN10custom_twoImE8do_shiftEm = comdat any

$_Z17check_shifted_sumIm10custom_twoImEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_ = comdat any

$_Z15tolerance_equalIlEbRT_S1_ = comdat any

$_ZN19custom_constant_xorIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_ = comdat any

$_ZN27custom_multiple_constant_orIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_ = comdat any

$_ZN18custom_constant_orIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl18custom_constant_orIlEEvT_ = comdat any

$_ZN28custom_multiple_constant_andIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_ = comdat any

$_ZN19custom_constant_andIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl19custom_constant_andIlEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2IlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_ = comdat any

$_ZN22custom_constant_divideIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_ = comdat any

$_ZN24custom_constant_multiplyIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_ = comdat any

$_ZN19custom_constant_subIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl19custom_constant_subIlEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_ = comdat any

$_ZN19custom_constant_addIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl19custom_constant_addIlEEvT_ = comdat any

$_ZN20custom_xor_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_ = comdat any

$_ZN19custom_or_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_ = comdat any

$_ZN20custom_and_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl30custom_lessthanequal_constantsIlEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_ = comdat any

$_ZN25custom_lessthan_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl25custom_lessthan_constantsIlEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_ = comdat any

$_ZN25custom_notequal_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_ = comdat any

$_ZN22custom_equal_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl22custom_equal_constantsIlEEvT_ = comdat any

$_ZN20custom_mod_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_ = comdat any

$_ZN23custom_divide_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_ = comdat any

$_ZN25custom_multiply_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_ = comdat any

$_ZN20custom_sub_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_ = comdat any

$_ZN20custom_add_constantsIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_ = comdat any

$_ZN10custom_twoIlE8do_shiftEl = comdat any

$_Z17check_shifted_sumIl10custom_twoIlEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_ = comdat any

$_Z15tolerance_equalIjEbRT_S1_ = comdat any

$_ZN19custom_constant_xorIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_ = comdat any

$_ZN27custom_multiple_constant_orIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_ = comdat any

$_ZN18custom_constant_orIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj18custom_constant_orIjEEvT_ = comdat any

$_ZN28custom_multiple_constant_andIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_ = comdat any

$_ZN19custom_constant_andIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj19custom_constant_andIjEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2IjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_ = comdat any

$_ZN22custom_constant_divideIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_ = comdat any

$_ZN24custom_constant_multiplyIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_ = comdat any

$_ZN19custom_constant_subIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj19custom_constant_subIjEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_ = comdat any

$_ZN19custom_constant_addIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj19custom_constant_addIjEEvT_ = comdat any

$_ZN20custom_xor_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_ = comdat any

$_ZN19custom_or_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_ = comdat any

$_ZN20custom_and_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj30custom_lessthanequal_constantsIjEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_ = comdat any

$_ZN25custom_lessthan_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj25custom_lessthan_constantsIjEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_ = comdat any

$_ZN25custom_notequal_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_ = comdat any

$_ZN22custom_equal_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj22custom_equal_constantsIjEEvT_ = comdat any

$_ZN20custom_mod_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_ = comdat any

$_ZN23custom_divide_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_ = comdat any

$_ZN25custom_multiply_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_ = comdat any

$_ZN20custom_sub_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_ = comdat any

$_ZN20custom_add_constantsIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_ = comdat any

$_ZN10custom_twoIjE8do_shiftEj = comdat any

$_Z17check_shifted_sumIj10custom_twoIjEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_ = comdat any

$_Z15tolerance_equalIiEbRT_S1_ = comdat any

$_ZN19custom_constant_xorIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_ = comdat any

$_ZN27custom_multiple_constant_orIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_ = comdat any

$_ZN18custom_constant_orIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi18custom_constant_orIiEEvT_ = comdat any

$_ZN28custom_multiple_constant_andIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_ = comdat any

$_ZN19custom_constant_andIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi19custom_constant_andIiEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2IiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_ = comdat any

$_ZN22custom_constant_divideIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_ = comdat any

$_ZN24custom_constant_multiplyIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_ = comdat any

$_ZN19custom_constant_subIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi19custom_constant_subIiEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_ = comdat any

$_ZN19custom_constant_addIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi19custom_constant_addIiEEvT_ = comdat any

$_ZN20custom_xor_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_ = comdat any

$_ZN19custom_or_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_ = comdat any

$_ZN20custom_and_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi30custom_lessthanequal_constantsIiEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_ = comdat any

$_ZN25custom_lessthan_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi25custom_lessthan_constantsIiEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_ = comdat any

$_ZN25custom_notequal_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_ = comdat any

$_ZN22custom_equal_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi22custom_equal_constantsIiEEvT_ = comdat any

$_ZN20custom_mod_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_ = comdat any

$_ZN23custom_divide_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_ = comdat any

$_ZN25custom_multiply_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_ = comdat any

$_ZN20custom_sub_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_ = comdat any

$_ZN20custom_add_constantsIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_ = comdat any

$_ZN10custom_twoIiE8do_shiftEi = comdat any

$_Z17check_shifted_sumIi10custom_twoIiEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_ = comdat any

$_Z15tolerance_equalItEbRT_S1_ = comdat any

$_ZN19custom_constant_xorItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt19custom_constant_xorItEEvT_ = comdat any

$_ZN27custom_multiple_constant_orItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_ = comdat any

$_ZN18custom_constant_orItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt18custom_constant_orItEEvT_ = comdat any

$_ZN28custom_multiple_constant_andItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_ = comdat any

$_ZN19custom_constant_andItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt19custom_constant_andItEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2ItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_ = comdat any

$_ZN22custom_constant_divideItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt22custom_constant_divideItEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2ItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_ = comdat any

$_ZN24custom_constant_multiplyItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_ = comdat any

$_ZN28custom_multiple_constant_subItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_ = comdat any

$_ZN19custom_constant_subItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt19custom_constant_subItEEvT_ = comdat any

$_ZN28custom_multiple_constant_addItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_ = comdat any

$_ZN19custom_constant_addItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt19custom_constant_addItEEvT_ = comdat any

$_ZN20custom_xor_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_ = comdat any

$_ZN19custom_or_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt19custom_or_constantsItEEvT_ = comdat any

$_ZN20custom_and_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt20custom_and_constantsItEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt30custom_lessthanequal_constantsItEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_ = comdat any

$_ZN25custom_lessthan_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt25custom_lessthan_constantsItEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_ = comdat any

$_ZN25custom_notequal_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_ = comdat any

$_ZN22custom_equal_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt22custom_equal_constantsItEEvT_ = comdat any

$_ZN20custom_mod_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_ = comdat any

$_ZN23custom_divide_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_ = comdat any

$_ZN25custom_multiply_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_ = comdat any

$_ZN20custom_sub_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_ = comdat any

$_ZN20custom_add_constantsItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt20custom_add_constantsItEEvT_ = comdat any

$_ZN10custom_twoItE8do_shiftEt = comdat any

$_Z17check_shifted_sumIt10custom_twoItEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_ = comdat any

$_Z15tolerance_equalIsEbRT_S1_ = comdat any

$_ZN19custom_constant_xorIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_ = comdat any

$_ZN27custom_multiple_constant_orIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_ = comdat any

$_ZN18custom_constant_orIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs18custom_constant_orIsEEvT_ = comdat any

$_ZN28custom_multiple_constant_andIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_ = comdat any

$_ZN19custom_constant_andIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs19custom_constant_andIsEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2IsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_ = comdat any

$_ZN22custom_constant_divideIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_ = comdat any

$_ZN24custom_constant_multiplyIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_ = comdat any

$_ZN19custom_constant_subIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs19custom_constant_subIsEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_ = comdat any

$_ZN19custom_constant_addIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs19custom_constant_addIsEEvT_ = comdat any

$_ZN20custom_xor_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_ = comdat any

$_ZN19custom_or_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_ = comdat any

$_ZN20custom_and_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs30custom_lessthanequal_constantsIsEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_ = comdat any

$_ZN25custom_lessthan_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs25custom_lessthan_constantsIsEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_ = comdat any

$_ZN25custom_notequal_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_ = comdat any

$_ZN22custom_equal_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs22custom_equal_constantsIsEEvT_ = comdat any

$_ZN20custom_mod_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_ = comdat any

$_ZN23custom_divide_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_ = comdat any

$_ZN25custom_multiply_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_ = comdat any

$_ZN20custom_sub_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_ = comdat any

$_ZN20custom_add_constantsIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_ = comdat any

$_ZN10custom_twoIsE8do_shiftEs = comdat any

$_Z17check_shifted_sumIs10custom_twoIsEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_ = comdat any

$_Z15tolerance_equalIhEbRT_S1_ = comdat any

$_ZN19custom_constant_xorIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_ = comdat any

$_ZN27custom_multiple_constant_orIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_ = comdat any

$_ZN18custom_constant_orIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh18custom_constant_orIhEEvT_ = comdat any

$_ZN28custom_multiple_constant_andIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_ = comdat any

$_ZN19custom_constant_andIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh19custom_constant_andIhEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2IhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_ = comdat any

$_ZN22custom_constant_divideIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_ = comdat any

$_ZN24custom_constant_multiplyIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_ = comdat any

$_ZN19custom_constant_subIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh19custom_constant_subIhEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_ = comdat any

$_ZN19custom_constant_addIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh19custom_constant_addIhEEvT_ = comdat any

$_ZN20custom_xor_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_ = comdat any

$_ZN19custom_or_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_ = comdat any

$_ZN20custom_and_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh30custom_lessthanequal_constantsIhEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_ = comdat any

$_ZN25custom_lessthan_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh25custom_lessthan_constantsIhEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_ = comdat any

$_ZN25custom_notequal_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_ = comdat any

$_ZN22custom_equal_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh22custom_equal_constantsIhEEvT_ = comdat any

$_ZN20custom_mod_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_ = comdat any

$_ZN23custom_divide_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_ = comdat any

$_ZN25custom_multiply_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_ = comdat any

$_ZN20custom_sub_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_ = comdat any

$_ZN20custom_add_constantsIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_ = comdat any

$_ZN10custom_twoIhE8do_shiftEh = comdat any

$_Z17check_shifted_sumIh10custom_twoIhEEvT_ = comdat any

$_ZN28custom_multiple_constant_xorIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_ = comdat any

$_Z15tolerance_equalIaEbRT_S1_ = comdat any

$_ZN19custom_constant_xorIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_ = comdat any

$_ZN27custom_multiple_constant_orIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_ = comdat any

$_ZN18custom_constant_orIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa18custom_constant_orIaEEvT_ = comdat any

$_ZN28custom_multiple_constant_andIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_ = comdat any

$_ZN19custom_constant_andIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa19custom_constant_andIaEEvT_ = comdat any

$_ZN30custom_multiple_constant_mixedIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_ = comdat any

$_ZN32custom_multiple_constant_divide2IaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_ = comdat any

$_ZN31custom_multiple_constant_divideIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_ = comdat any

$_ZN22custom_constant_divideIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_ = comdat any

$_ZN34custom_multiple_constant_multiply2IaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_ = comdat any

$_ZN33custom_multiple_constant_multiplyIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_ = comdat any

$_ZN24custom_constant_multiplyIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_ = comdat any

$_ZN28custom_multiple_constant_subIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_ = comdat any

$_ZN19custom_constant_subIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa19custom_constant_subIaEEvT_ = comdat any

$_ZN28custom_multiple_constant_addIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_ = comdat any

$_ZN19custom_constant_addIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa19custom_constant_addIaEEvT_ = comdat any

$_ZN20custom_xor_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_ = comdat any

$_ZN19custom_or_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_ = comdat any

$_ZN20custom_and_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_ = comdat any

$_ZN30custom_lessthanequal_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa30custom_lessthanequal_constantsIaEEvT_ = comdat any

$_ZN33custom_greaterthanequal_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_ = comdat any

$_ZN25custom_lessthan_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa25custom_lessthan_constantsIaEEvT_ = comdat any

$_ZN28custom_greaterthan_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_ = comdat any

$_ZN25custom_notequal_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_ = comdat any

$_ZN22custom_equal_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa22custom_equal_constantsIaEEvT_ = comdat any

$_ZN20custom_mod_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_ = comdat any

$_ZN23custom_divide_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_ = comdat any

$_ZN25custom_multiply_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_ = comdat any

$_ZN20custom_sub_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_ = comdat any

$_ZN20custom_add_constantsIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_ = comdat any

$_ZN10custom_twoIaE8do_shiftEa = comdat any

$_Z17check_shifted_sumIa10custom_twoIaEEvT_ = comdat any

@results = global %struct.one_result* null, align 8
@current_test = global i32 0, align 4
@allocated_results = global i32 0, align 4
@start_time = global i64 0, align 8
@end_time = global i64 0, align 8
@base_iterations = global i32 5000, align 4
@iterations = global i32 0, align 4
@init_value = global double 1.000000e+00, align 8
@dataDouble = global [8000 x double] zeroinitializer, align 16
@dataFloat = global [8000 x float] zeroinitializer, align 16
@data64unsigned = global [8000 x i64] zeroinitializer, align 16
@data64 = global [8000 x i64] zeroinitializer, align 16
@data32unsigned = global [8000 x i32] zeroinitializer, align 16
@data32 = global [8000 x i32] zeroinitializer, align 16
@data16unsigned = global [8000 x i16] zeroinitializer, align 16
@data16 = global [8000 x i16] zeroinitializer, align 16
@data8unsigned = global [8000 x i8] zeroinitializer, align 16
@data8 = global [8000 x i8] zeroinitializer, align 16
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_simple_types_constant_folding.cpp, i8* null }]
@.str = private unnamed_addr constant [31 x i8] c"Could not allocate %d results\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"number %*s time       per second   test0\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"\0Atest %*s description   absolute\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"number %*s time\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"int8_t constant\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"int8_t add constants\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"int8_t subtract constants\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"int8_t multiply constants\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"int8_t divide constants\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"int8_t mod constants\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"int8_t equal constants\00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"int8_t notequal constants\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"int8_t greater than constants\00", align 1
@.str.20 = private unnamed_addr constant [27 x i8] c"int8_t less than constants\00", align 1
@.str.21 = private unnamed_addr constant [36 x i8] c"int8_t greater than equal constants\00", align 1
@.str.22 = private unnamed_addr constant [33 x i8] c"int8_t less than equal constants\00", align 1
@.str.23 = private unnamed_addr constant [21 x i8] c"int8_t and constants\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"int8_t or constants\00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"int8_t xor constants\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"int8_t constant add\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"int8_t multiple constant adds\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"int8_t constant subtract\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant subtracts\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"int8_t constant multiply\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"int8_t multiple constant multiplies\00", align 1
@.str.32 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant multiply2\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"int8_t constant divide\00", align 1
@.str.34 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divides\00", align 1
@.str.35 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divide2\00", align 1
@.str.36 = private unnamed_addr constant [31 x i8] c"int8_t multiple constant mixed\00", align 1
@.str.37 = private unnamed_addr constant [20 x i8] c"int8_t constant and\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant and\00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c"int8_t constant or\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"int8_t multiple constant or\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"int8_t constant xor\00", align 1
@.str.42 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant xor\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"uint8_t constant\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"uint8_t add constants\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"uint8_t subtract constants\00", align 1
@.str.46 = private unnamed_addr constant [27 x i8] c"uint8_t multiply constants\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c"uint8_t divide constants\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"uint8_t mod constants\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"uint8_t equal constants\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"uint8_t notequal constants\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"uint8_t greater than constants\00", align 1
@.str.52 = private unnamed_addr constant [28 x i8] c"uint8_t less than constants\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"uint8_t greater than equal constants\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"uint8_t less than equal constants\00", align 1
@.str.55 = private unnamed_addr constant [22 x i8] c"uint8_t and constants\00", align 1
@.str.56 = private unnamed_addr constant [21 x i8] c"uint8_t or constants\00", align 1
@.str.57 = private unnamed_addr constant [22 x i8] c"uint8_t xor constants\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"uint8_t constant add\00", align 1
@.str.59 = private unnamed_addr constant [31 x i8] c"uint8_t multiple constant adds\00", align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"uint8_t constant subtract\00", align 1
@.str.61 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant subtracts\00", align 1
@.str.62 = private unnamed_addr constant [26 x i8] c"uint8_t constant multiply\00", align 1
@.str.63 = private unnamed_addr constant [37 x i8] c"uint8_t multiple constant multiplies\00", align 1
@.str.64 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant multiply2\00", align 1
@.str.65 = private unnamed_addr constant [24 x i8] c"uint8_t constant divide\00", align 1
@.str.66 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divides\00", align 1
@.str.67 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divide2\00", align 1
@.str.68 = private unnamed_addr constant [32 x i8] c"uint8_t multiple constant mixed\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"uint8_t constant and\00", align 1
@.str.70 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant and\00", align 1
@.str.71 = private unnamed_addr constant [20 x i8] c"uint8_t constant or\00", align 1
@.str.72 = private unnamed_addr constant [29 x i8] c"uint8_t multiple constant or\00", align 1
@.str.73 = private unnamed_addr constant [21 x i8] c"uint8_t constant xor\00", align 1
@.str.74 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant xor\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"int16_t constant\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"int16_t add constants\00", align 1
@.str.77 = private unnamed_addr constant [27 x i8] c"int16_t subtract constants\00", align 1
@.str.78 = private unnamed_addr constant [27 x i8] c"int16_t multiply constants\00", align 1
@.str.79 = private unnamed_addr constant [25 x i8] c"int16_t divide constants\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"int16_t mod constants\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"int16_t equal constants\00", align 1
@.str.82 = private unnamed_addr constant [27 x i8] c"int16_t notequal constants\00", align 1
@.str.83 = private unnamed_addr constant [31 x i8] c"int16_t greater than constants\00", align 1
@.str.84 = private unnamed_addr constant [28 x i8] c"int16_t less than constants\00", align 1
@.str.85 = private unnamed_addr constant [37 x i8] c"int16_t greater than equal constants\00", align 1
@.str.86 = private unnamed_addr constant [34 x i8] c"int16_t less than equal constants\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"int16_t and constants\00", align 1
@.str.88 = private unnamed_addr constant [21 x i8] c"int16_t or constants\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"int16_t xor constants\00", align 1
@.str.90 = private unnamed_addr constant [21 x i8] c"int16_t constant add\00", align 1
@.str.91 = private unnamed_addr constant [31 x i8] c"int16_t multiple constant adds\00", align 1
@.str.92 = private unnamed_addr constant [26 x i8] c"int16_t constant subtract\00", align 1
@.str.93 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant subtracts\00", align 1
@.str.94 = private unnamed_addr constant [26 x i8] c"int16_t constant multiply\00", align 1
@.str.95 = private unnamed_addr constant [37 x i8] c"int16_t multiple constant multiplies\00", align 1
@.str.96 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant multiply2\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"int16_t constant divide\00", align 1
@.str.98 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divides\00", align 1
@.str.99 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divide2\00", align 1
@.str.100 = private unnamed_addr constant [32 x i8] c"int16_t multiple constant mixed\00", align 1
@.str.101 = private unnamed_addr constant [21 x i8] c"int16_t constant and\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant and\00", align 1
@.str.103 = private unnamed_addr constant [20 x i8] c"int16_t constant or\00", align 1
@.str.104 = private unnamed_addr constant [29 x i8] c"int16_t multiple constant or\00", align 1
@.str.105 = private unnamed_addr constant [21 x i8] c"int16_t constant xor\00", align 1
@.str.106 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant xor\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"uint16_t constant\00", align 1
@.str.108 = private unnamed_addr constant [23 x i8] c"uint16_t add constants\00", align 1
@.str.109 = private unnamed_addr constant [28 x i8] c"uint16_t subtract constants\00", align 1
@.str.110 = private unnamed_addr constant [28 x i8] c"uint16_t multiply constants\00", align 1
@.str.111 = private unnamed_addr constant [26 x i8] c"uint16_t divide constants\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"uint16_t mod constants\00", align 1
@.str.113 = private unnamed_addr constant [25 x i8] c"uint16_t equal constants\00", align 1
@.str.114 = private unnamed_addr constant [28 x i8] c"uint16_t notequal constants\00", align 1
@.str.115 = private unnamed_addr constant [32 x i8] c"uint16_t greater than constants\00", align 1
@.str.116 = private unnamed_addr constant [29 x i8] c"uint16_t less than constants\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"uint16_t greater than equal constants\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"uint16_t less than equal constants\00", align 1
@.str.119 = private unnamed_addr constant [23 x i8] c"uint16_t and constants\00", align 1
@.str.120 = private unnamed_addr constant [22 x i8] c"uint16_t or constants\00", align 1
@.str.121 = private unnamed_addr constant [23 x i8] c"uint16_t xor constants\00", align 1
@.str.122 = private unnamed_addr constant [22 x i8] c"uint16_t constant add\00", align 1
@.str.123 = private unnamed_addr constant [32 x i8] c"uint16_t multiple constant adds\00", align 1
@.str.124 = private unnamed_addr constant [27 x i8] c"uint16_t constant subtract\00", align 1
@.str.125 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant subtracts\00", align 1
@.str.126 = private unnamed_addr constant [27 x i8] c"uint16_t constant multiply\00", align 1
@.str.127 = private unnamed_addr constant [38 x i8] c"uint16_t multiple constant multiplies\00", align 1
@.str.128 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant multiply2\00", align 1
@.str.129 = private unnamed_addr constant [25 x i8] c"uint16_t constant divide\00", align 1
@.str.130 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divides\00", align 1
@.str.131 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divide2\00", align 1
@.str.132 = private unnamed_addr constant [33 x i8] c"uint16_t multiple constant mixed\00", align 1
@.str.133 = private unnamed_addr constant [22 x i8] c"uint16_t constant and\00", align 1
@.str.134 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant and\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"uint16_t constant or\00", align 1
@.str.136 = private unnamed_addr constant [30 x i8] c"uint16_t multiple constant or\00", align 1
@.str.137 = private unnamed_addr constant [22 x i8] c"uint16_t constant xor\00", align 1
@.str.138 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant xor\00", align 1
@.str.139 = private unnamed_addr constant [17 x i8] c"int32_t constant\00", align 1
@.str.140 = private unnamed_addr constant [22 x i8] c"int32_t add constants\00", align 1
@.str.141 = private unnamed_addr constant [27 x i8] c"int32_t subtract constants\00", align 1
@.str.142 = private unnamed_addr constant [27 x i8] c"int32_t multiply constants\00", align 1
@.str.143 = private unnamed_addr constant [25 x i8] c"int32_t divide constants\00", align 1
@.str.144 = private unnamed_addr constant [22 x i8] c"int32_t mod constants\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c"int32_t equal constants\00", align 1
@.str.146 = private unnamed_addr constant [27 x i8] c"int32_t notequal constants\00", align 1
@.str.147 = private unnamed_addr constant [31 x i8] c"int32_t greater than constants\00", align 1
@.str.148 = private unnamed_addr constant [28 x i8] c"int32_t less than constants\00", align 1
@.str.149 = private unnamed_addr constant [37 x i8] c"int32_t greater than equal constants\00", align 1
@.str.150 = private unnamed_addr constant [34 x i8] c"int32_t less than equal constants\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"int32_t and constants\00", align 1
@.str.152 = private unnamed_addr constant [21 x i8] c"int32_t or constants\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"int32_t xor constants\00", align 1
@.str.154 = private unnamed_addr constant [21 x i8] c"int32_t constant add\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"int32_t multiple constant adds\00", align 1
@.str.156 = private unnamed_addr constant [26 x i8] c"int32_t constant subtract\00", align 1
@.str.157 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant subtracts\00", align 1
@.str.158 = private unnamed_addr constant [26 x i8] c"int32_t constant multiply\00", align 1
@.str.159 = private unnamed_addr constant [37 x i8] c"int32_t multiple constant multiplies\00", align 1
@.str.160 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant multiply2\00", align 1
@.str.161 = private unnamed_addr constant [24 x i8] c"int32_t constant divide\00", align 1
@.str.162 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divides\00", align 1
@.str.163 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divide2\00", align 1
@.str.164 = private unnamed_addr constant [32 x i8] c"int32_t multiple constant mixed\00", align 1
@.str.165 = private unnamed_addr constant [21 x i8] c"int32_t constant and\00", align 1
@.str.166 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant and\00", align 1
@.str.167 = private unnamed_addr constant [20 x i8] c"int32_t constant or\00", align 1
@.str.168 = private unnamed_addr constant [29 x i8] c"int32_t multiple constant or\00", align 1
@.str.169 = private unnamed_addr constant [21 x i8] c"int32_t constant xor\00", align 1
@.str.170 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant xor\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"uint32_t constant\00", align 1
@.str.172 = private unnamed_addr constant [23 x i8] c"uint32_t add constants\00", align 1
@.str.173 = private unnamed_addr constant [28 x i8] c"uint32_t subtract constants\00", align 1
@.str.174 = private unnamed_addr constant [28 x i8] c"uint32_t multiply constants\00", align 1
@.str.175 = private unnamed_addr constant [26 x i8] c"uint32_t divide constants\00", align 1
@.str.176 = private unnamed_addr constant [23 x i8] c"uint32_t mod constants\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"uint32_t equal constants\00", align 1
@.str.178 = private unnamed_addr constant [28 x i8] c"uint32_t notequal constants\00", align 1
@.str.179 = private unnamed_addr constant [32 x i8] c"uint32_t greater than constants\00", align 1
@.str.180 = private unnamed_addr constant [29 x i8] c"uint32_t less than constants\00", align 1
@.str.181 = private unnamed_addr constant [38 x i8] c"uint32_t greater than equal constants\00", align 1
@.str.182 = private unnamed_addr constant [35 x i8] c"uint32_t less than equal constants\00", align 1
@.str.183 = private unnamed_addr constant [23 x i8] c"uint32_t and constants\00", align 1
@.str.184 = private unnamed_addr constant [22 x i8] c"uint32_t or constants\00", align 1
@.str.185 = private unnamed_addr constant [23 x i8] c"uint32_t xor constants\00", align 1
@.str.186 = private unnamed_addr constant [22 x i8] c"uint32_t constant add\00", align 1
@.str.187 = private unnamed_addr constant [32 x i8] c"uint32_t multiple constant adds\00", align 1
@.str.188 = private unnamed_addr constant [27 x i8] c"uint32_t constant subtract\00", align 1
@.str.189 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant subtracts\00", align 1
@.str.190 = private unnamed_addr constant [27 x i8] c"uint32_t constant multiply\00", align 1
@.str.191 = private unnamed_addr constant [38 x i8] c"uint32_t multiple constant multiplies\00", align 1
@.str.192 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant multiply2\00", align 1
@.str.193 = private unnamed_addr constant [25 x i8] c"uint32_t constant divide\00", align 1
@.str.194 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divides\00", align 1
@.str.195 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divide2\00", align 1
@.str.196 = private unnamed_addr constant [33 x i8] c"uint32_t multiple constant mixed\00", align 1
@.str.197 = private unnamed_addr constant [22 x i8] c"uint32_t constant and\00", align 1
@.str.198 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant and\00", align 1
@.str.199 = private unnamed_addr constant [21 x i8] c"uint32_t constant or\00", align 1
@.str.200 = private unnamed_addr constant [30 x i8] c"uint32_t multiple constant or\00", align 1
@.str.201 = private unnamed_addr constant [22 x i8] c"uint32_t constant xor\00", align 1
@.str.202 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant xor\00", align 1
@.str.203 = private unnamed_addr constant [17 x i8] c"int64_t constant\00", align 1
@.str.204 = private unnamed_addr constant [22 x i8] c"int64_t add constants\00", align 1
@.str.205 = private unnamed_addr constant [27 x i8] c"int64_t subtract constants\00", align 1
@.str.206 = private unnamed_addr constant [27 x i8] c"int64_t multiply constants\00", align 1
@.str.207 = private unnamed_addr constant [25 x i8] c"int64_t divide constants\00", align 1
@.str.208 = private unnamed_addr constant [22 x i8] c"int64_t mod constants\00", align 1
@.str.209 = private unnamed_addr constant [24 x i8] c"int64_t equal constants\00", align 1
@.str.210 = private unnamed_addr constant [27 x i8] c"int64_t notequal constants\00", align 1
@.str.211 = private unnamed_addr constant [31 x i8] c"int64_t greater than constants\00", align 1
@.str.212 = private unnamed_addr constant [28 x i8] c"int64_t less than constants\00", align 1
@.str.213 = private unnamed_addr constant [37 x i8] c"int64_t greater than equal constants\00", align 1
@.str.214 = private unnamed_addr constant [34 x i8] c"int64_t less than equal constants\00", align 1
@.str.215 = private unnamed_addr constant [22 x i8] c"int64_t and constants\00", align 1
@.str.216 = private unnamed_addr constant [21 x i8] c"int64_t or constants\00", align 1
@.str.217 = private unnamed_addr constant [22 x i8] c"int64_t xor constants\00", align 1
@.str.218 = private unnamed_addr constant [21 x i8] c"int64_t constant add\00", align 1
@.str.219 = private unnamed_addr constant [31 x i8] c"int64_t multiple constant adds\00", align 1
@.str.220 = private unnamed_addr constant [26 x i8] c"int64_t constant subtract\00", align 1
@.str.221 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant subtracts\00", align 1
@.str.222 = private unnamed_addr constant [26 x i8] c"int64_t constant multiply\00", align 1
@.str.223 = private unnamed_addr constant [37 x i8] c"int64_t multiple constant multiplies\00", align 1
@.str.224 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant multiply2\00", align 1
@.str.225 = private unnamed_addr constant [24 x i8] c"int64_t constant divide\00", align 1
@.str.226 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divides\00", align 1
@.str.227 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divide2\00", align 1
@.str.228 = private unnamed_addr constant [32 x i8] c"int64_t multiple constant mixed\00", align 1
@.str.229 = private unnamed_addr constant [21 x i8] c"int64_t constant and\00", align 1
@.str.230 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant and\00", align 1
@.str.231 = private unnamed_addr constant [20 x i8] c"int64_t constant or\00", align 1
@.str.232 = private unnamed_addr constant [29 x i8] c"int64_t multiple constant or\00", align 1
@.str.233 = private unnamed_addr constant [21 x i8] c"int64_t constant xor\00", align 1
@.str.234 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant xor\00", align 1
@.str.235 = private unnamed_addr constant [18 x i8] c"uint64_t constant\00", align 1
@.str.236 = private unnamed_addr constant [23 x i8] c"uint64_t add constants\00", align 1
@.str.237 = private unnamed_addr constant [28 x i8] c"uint64_t subtract constants\00", align 1
@.str.238 = private unnamed_addr constant [28 x i8] c"uint64_t multiply constants\00", align 1
@.str.239 = private unnamed_addr constant [26 x i8] c"uint64_t divide constants\00", align 1
@.str.240 = private unnamed_addr constant [23 x i8] c"uint64_t mod constants\00", align 1
@.str.241 = private unnamed_addr constant [25 x i8] c"uint64_t equal constants\00", align 1
@.str.242 = private unnamed_addr constant [28 x i8] c"uint64_t notequal constants\00", align 1
@.str.243 = private unnamed_addr constant [32 x i8] c"uint64_t greater than constants\00", align 1
@.str.244 = private unnamed_addr constant [29 x i8] c"uint64_t less than constants\00", align 1
@.str.245 = private unnamed_addr constant [38 x i8] c"uint64_t greater than equal constants\00", align 1
@.str.246 = private unnamed_addr constant [35 x i8] c"uint64_t less than equal constants\00", align 1
@.str.247 = private unnamed_addr constant [23 x i8] c"uint64_t and constants\00", align 1
@.str.248 = private unnamed_addr constant [22 x i8] c"uint64_t or constants\00", align 1
@.str.249 = private unnamed_addr constant [23 x i8] c"uint64_t xor constants\00", align 1
@.str.250 = private unnamed_addr constant [22 x i8] c"uint64_t constant add\00", align 1
@.str.251 = private unnamed_addr constant [32 x i8] c"uint64_t multiple constant adds\00", align 1
@.str.252 = private unnamed_addr constant [27 x i8] c"uint64_t constant subtract\00", align 1
@.str.253 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant subtracts\00", align 1
@.str.254 = private unnamed_addr constant [27 x i8] c"uint64_t constant multiply\00", align 1
@.str.255 = private unnamed_addr constant [38 x i8] c"uint64_t multiple constant multiplies\00", align 1
@.str.256 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant multiply2\00", align 1
@.str.257 = private unnamed_addr constant [25 x i8] c"uint64_t constant divide\00", align 1
@.str.258 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divides\00", align 1
@.str.259 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divide2\00", align 1
@.str.260 = private unnamed_addr constant [33 x i8] c"uint64_t multiple constant mixed\00", align 1
@.str.261 = private unnamed_addr constant [22 x i8] c"uint64_t constant and\00", align 1
@.str.262 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant and\00", align 1
@.str.263 = private unnamed_addr constant [21 x i8] c"uint64_t constant or\00", align 1
@.str.264 = private unnamed_addr constant [30 x i8] c"uint64_t multiple constant or\00", align 1
@.str.265 = private unnamed_addr constant [22 x i8] c"uint64_t constant xor\00", align 1
@.str.266 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant xor\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"float constant\00", align 1
@.str.268 = private unnamed_addr constant [20 x i8] c"float add constants\00", align 1
@.str.269 = private unnamed_addr constant [25 x i8] c"float subtract constants\00", align 1
@.str.270 = private unnamed_addr constant [25 x i8] c"float multiply constants\00", align 1
@.str.271 = private unnamed_addr constant [23 x i8] c"float divide constants\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"float constant add\00", align 1
@.str.273 = private unnamed_addr constant [29 x i8] c"float multiple constant adds\00", align 1
@.str.274 = private unnamed_addr constant [24 x i8] c"float constant subtract\00", align 1
@.str.275 = private unnamed_addr constant [34 x i8] c"float multiple constant subtracts\00", align 1
@.str.276 = private unnamed_addr constant [24 x i8] c"float constant multiply\00", align 1
@.str.277 = private unnamed_addr constant [35 x i8] c"float multiple constant multiplies\00", align 1
@.str.278 = private unnamed_addr constant [34 x i8] c"float multiple constant multiply2\00", align 1
@.str.279 = private unnamed_addr constant [22 x i8] c"float constant divide\00", align 1
@.str.280 = private unnamed_addr constant [32 x i8] c"float multiple constant divides\00", align 1
@.str.281 = private unnamed_addr constant [32 x i8] c"float multiple constant divide2\00", align 1
@.str.282 = private unnamed_addr constant [30 x i8] c"float multiple constant mixed\00", align 1
@.str.283 = private unnamed_addr constant [16 x i8] c"double constant\00", align 1
@.str.284 = private unnamed_addr constant [21 x i8] c"double add constants\00", align 1
@.str.285 = private unnamed_addr constant [26 x i8] c"double subtract constants\00", align 1
@.str.286 = private unnamed_addr constant [26 x i8] c"double multiply constants\00", align 1
@.str.287 = private unnamed_addr constant [24 x i8] c"double divide constants\00", align 1
@.str.288 = private unnamed_addr constant [20 x i8] c"double constant add\00", align 1
@.str.289 = private unnamed_addr constant [30 x i8] c"double multiple constant adds\00", align 1
@.str.290 = private unnamed_addr constant [25 x i8] c"double constant subtract\00", align 1
@.str.291 = private unnamed_addr constant [35 x i8] c"double multiple constant subtracts\00", align 1
@.str.292 = private unnamed_addr constant [25 x i8] c"double constant multiply\00", align 1
@.str.293 = private unnamed_addr constant [36 x i8] c"double multiple constant multiplies\00", align 1
@.str.294 = private unnamed_addr constant [35 x i8] c"double multiple constant multiply2\00", align 1
@.str.295 = private unnamed_addr constant [23 x i8] c"double constant divide\00", align 1
@.str.296 = private unnamed_addr constant [33 x i8] c"double multiple constant divides\00", align 1
@.str.297 = private unnamed_addr constant [33 x i8] c"double multiple constant divide2\00", align 1
@.str.298 = private unnamed_addr constant [31 x i8] c"double multiple constant mixed\00", align 1
@.str.299 = private unnamed_addr constant [16 x i8] c"test %i failed\0A\00", align 1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_simple_types_constant_folding.cpp() #0 section ".text.startup" {
entry:
  call void @__cxx_global_var_init()
  ret void
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
entry:
  %0 = load i32, i32* @base_iterations, align 4
  store i32 %0, i32* @iterations, align 4
  ret void
}

; Function Attrs: noinline uwtable
define void @_Z13record_resultdPKc(double %time, i8* %label) #0 {
entry:
  %time.addr = alloca double, align 8
  %label.addr = alloca i8*, align 8
  store double %time, double* %time.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  %0 = load %struct.one_result*, %struct.one_result** @results, align 8
  %cmp = icmp eq %struct.one_result* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %2 = load i32, i32* @allocated_results, align 4
  %cmp1 = icmp sge i32 %1, %2
  br i1 %cmp1, label %if.then, label %if.end5

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* @allocated_results, align 4
  %add = add nsw i32 %3, 10
  store i32 %add, i32* @allocated_results, align 4
  %4 = load %struct.one_result*, %struct.one_result** @results, align 8
  %5 = bitcast %struct.one_result* %4 to i8*
  %6 = load i32, i32* @allocated_results, align 4
  %conv = sext i32 %6 to i64
  %mul = mul i64 %conv, 16
  %call = call i8* @realloc(i8* %5, i64 %mul) #9
  %7 = bitcast i8* %call to %struct.one_result*
  store %struct.one_result* %7, %struct.one_result** @results, align 8
  %8 = load %struct.one_result*, %struct.one_result** @results, align 8
  %cmp2 = icmp eq %struct.one_result* %8, null
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %9 = load i32, i32* @allocated_results, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0), i32 %9)
  call void @exit(i32 -1) #10
  unreachable

if.end:                                           ; preds = %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %lor.lhs.false
  %10 = load double, double* %time.addr, align 8
  %11 = load %struct.one_result*, %struct.one_result** @results, align 8
  %12 = load i32, i32* @current_test, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds %struct.one_result, %struct.one_result* %11, i64 %idxprom
  %time6 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx, i32 0, i32 0
  store double %10, double* %time6, align 8
  %13 = load i8*, i8** %label.addr, align 8
  %14 = load %struct.one_result*, %struct.one_result** @results, align 8
  %15 = load i32, i32* @current_test, align 4
  %idxprom7 = sext i32 %15 to i64
  %arrayidx8 = getelementptr inbounds %struct.one_result, %struct.one_result* %14, i64 %idxprom7
  %label9 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx8, i32 0, i32 1
  store i8* %13, i8** %label9, align 8
  %16 = load i32, i32* @current_test, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* @current_test, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: noinline uwtable
define void @_Z9summarizePKciiii(i8* %name, i32 %size, i32 %iterations, i32 %show_gmeans, i32 %show_penalty) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %iterations.addr = alloca i32, align 4
  %show_gmeans.addr = alloca i32, align 4
  %show_penalty.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %millions = alloca double, align 8
  %total_absolute_times = alloca double, align 8
  %gmean_ratio = alloca double, align 8
  %longest_label_len = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  store i32 %iterations, i32* %iterations.addr, align 4
  store i32 %show_gmeans, i32* %show_gmeans.addr, align 4
  store i32 %show_penalty, i32* %show_penalty.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %0 to double
  %1 = load i32, i32* %iterations.addr, align 4
  %conv1 = sitofp i32 %1 to double
  %mul = fmul double %conv, %conv1
  %div = fdiv double %mul, 1.000000e+06
  store double %div, double* %millions, align 8
  store double 0.000000e+00, double* %total_absolute_times, align 8
  store double 0.000000e+00, double* %gmean_ratio, align 8
  store i32 12, i32* %longest_label_len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* @current_test, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.one_result*, %struct.one_result** @results, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds %struct.one_result, %struct.one_result* %4, i64 %idxprom
  %label = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx, i32 0, i32 1
  %6 = load i8*, i8** %label, align 8
  %call = call i64 @strlen(i8* %6) #11
  %conv2 = trunc i64 %call to i32
  store i32 %conv2, i32* %len, align 4
  %7 = load i32, i32* %len, align 4
  %8 = load i32, i32* %longest_label_len, align 4
  %cmp3 = icmp sgt i32 %7, %8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %len, align 4
  store i32 %9, i32* %longest_label_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %longest_label_len, align 4
  %sub = sub nsw i32 %11, 12
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %12 = load i32, i32* %longest_label_len, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc32, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* @current_test, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body8, label %for.end34

for.body8:                                        ; preds = %for.cond6
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %longest_label_len, align 4
  %conv9 = sext i32 %16 to i64
  %17 = load %struct.one_result*, %struct.one_result** @results, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds %struct.one_result, %struct.one_result* %17, i64 %idxprom10
  %label12 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx11, i32 0, i32 1
  %19 = load i8*, i8** %label12, align 8
  %call13 = call i64 @strlen(i8* %19) #11
  %sub14 = sub i64 %conv9, %call13
  %conv15 = trunc i64 %sub14 to i32
  %20 = load %struct.one_result*, %struct.one_result** @results, align 8
  %21 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %21 to i64
  %arrayidx17 = getelementptr inbounds %struct.one_result, %struct.one_result* %20, i64 %idxprom16
  %label18 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx17, i32 0, i32 1
  %22 = load i8*, i8** %label18, align 8
  %23 = load %struct.one_result*, %struct.one_result** @results, align 8
  %24 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %24 to i64
  %arrayidx20 = getelementptr inbounds %struct.one_result, %struct.one_result* %23, i64 %idxprom19
  %time = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx20, i32 0, i32 0
  %25 = load double, double* %time, align 8
  %26 = load double, double* %millions, align 8
  %27 = load %struct.one_result*, %struct.one_result** @results, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %28 to i64
  %arrayidx22 = getelementptr inbounds %struct.one_result, %struct.one_result* %27, i64 %idxprom21
  %time23 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx22, i32 0, i32 0
  %29 = load double, double* %time23, align 8
  %div24 = fdiv double %26, %29
  %30 = load %struct.one_result*, %struct.one_result** @results, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %31 to i64
  %arrayidx26 = getelementptr inbounds %struct.one_result, %struct.one_result* %30, i64 %idxprom25
  %time27 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx26, i32 0, i32 0
  %32 = load double, double* %time27, align 8
  %33 = load %struct.one_result*, %struct.one_result** @results, align 8
  %arrayidx28 = getelementptr inbounds %struct.one_result, %struct.one_result* %33, i64 0
  %time29 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx28, i32 0, i32 0
  %34 = load double, double* %time29, align 8
  %div30 = fdiv double %32, %34
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i32 0, i32 0), i32 %15, i32 %conv15, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), i8* %22, double %25, double %div24, double %div30)
  br label %for.inc32

for.inc32:                                        ; preds = %for.body8
  %35 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %35, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond6

for.end34:                                        ; preds = %for.cond6
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc41, %for.end34
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* @current_test, align 4
  %cmp36 = icmp slt i32 %36, %37
  br i1 %cmp36, label %for.body37, label %for.end43

for.body37:                                       ; preds = %for.cond35
  %38 = load %struct.one_result*, %struct.one_result** @results, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %39 to i64
  %arrayidx39 = getelementptr inbounds %struct.one_result, %struct.one_result* %38, i64 %idxprom38
  %time40 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx39, i32 0, i32 0
  %40 = load double, double* %time40, align 8
  %41 = load double, double* %total_absolute_times, align 8
  %add = fadd double %41, %40
  store double %add, double* %total_absolute_times, align 8
  br label %for.inc41

for.inc41:                                        ; preds = %for.body37
  %42 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %42, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond35

for.end43:                                        ; preds = %for.cond35
  %43 = load i8*, i8** %name.addr, align 8
  %44 = load double, double* %total_absolute_times, align 8
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i32 0, i32 0), i8* %43, double %44)
  %45 = load i32, i32* @current_test, align 4
  %cmp45 = icmp sgt i32 %45, 1
  br i1 %cmp45, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %for.end43
  %46 = load i32, i32* %show_penalty.addr, align 4
  %tobool = icmp ne i32 %46, 0
  br i1 %tobool, label %if.then46, label %if.end66

if.then46:                                        ; preds = %land.lhs.true
  store i32 1, i32* %i, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc58, %if.then46
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* @current_test, align 4
  %cmp48 = icmp slt i32 %47, %48
  br i1 %cmp48, label %for.body49, label %for.end60

for.body49:                                       ; preds = %for.cond47
  %49 = load %struct.one_result*, %struct.one_result** @results, align 8
  %50 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %50 to i64
  %arrayidx51 = getelementptr inbounds %struct.one_result, %struct.one_result* %49, i64 %idxprom50
  %time52 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx51, i32 0, i32 0
  %51 = load double, double* %time52, align 8
  %52 = load %struct.one_result*, %struct.one_result** @results, align 8
  %arrayidx53 = getelementptr inbounds %struct.one_result, %struct.one_result* %52, i64 0
  %time54 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx53, i32 0, i32 0
  %53 = load double, double* %time54, align 8
  %div55 = fdiv double %51, %53
  %call56 = call double @log(double %div55) #9
  %54 = load double, double* %gmean_ratio, align 8
  %add57 = fadd double %54, %call56
  store double %add57, double* %gmean_ratio, align 8
  br label %for.inc58

for.inc58:                                        ; preds = %for.body49
  %55 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %55, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond47

for.end60:                                        ; preds = %for.cond47
  %56 = load i8*, i8** %name.addr, align 8
  %57 = load double, double* %gmean_ratio, align 8
  %58 = load i32, i32* @current_test, align 4
  %sub61 = sub nsw i32 %58, 1
  %conv62 = sitofp i32 %sub61 to double
  %div63 = fdiv double %57, %conv62
  %call64 = call double @exp(double %div63) #9
  %call65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0), i8* %56, double %call64)
  br label %if.end66

if.end66:                                         ; preds = %for.end60, %land.lhs.true, %for.end43
  store i32 0, i32* @current_test, align 4
  ret void
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind
declare double @log(double) #1

; Function Attrs: nounwind
declare double @exp(double) #1

; Function Attrs: noinline uwtable
define void @_Z17summarize_simplefP8_IO_FILEPKc(%struct._IO_FILE* %output, i8* %name) #0 {
entry:
  %output.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %total_absolute_times = alloca double, align 8
  %longest_label_len = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct._IO_FILE* %output, %struct._IO_FILE** %output.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store double 0.000000e+00, double* %total_absolute_times, align 8
  store i32 12, i32* %longest_label_len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @current_test, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.one_result*, %struct.one_result** @results, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds %struct.one_result, %struct.one_result* %2, i64 %idxprom
  %label = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx, i32 0, i32 1
  %4 = load i8*, i8** %label, align 8
  %call = call i64 @strlen(i8* %4) #11
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %longest_label_len, align 4
  %cmp1 = icmp sgt i32 %5, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %len, align 4
  store i32 %7, i32* %longest_label_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %output.addr, align 8
  %10 = load i32, i32* %longest_label_len, align 4
  %sub = sub nsw i32 %10, 12
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %output.addr, align 8
  %12 = load i32, i32* %longest_label_len, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i32 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc20, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* @current_test, align 4
  %cmp5 = icmp slt i32 %13, %14
  br i1 %cmp5, label %for.body6, label %for.end22

for.body6:                                        ; preds = %for.cond4
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %output.addr, align 8
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %longest_label_len, align 4
  %conv7 = sext i32 %17 to i64
  %18 = load %struct.one_result*, %struct.one_result** @results, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %19 to i64
  %arrayidx9 = getelementptr inbounds %struct.one_result, %struct.one_result* %18, i64 %idxprom8
  %label10 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx9, i32 0, i32 1
  %20 = load i8*, i8** %label10, align 8
  %call11 = call i64 @strlen(i8* %20) #11
  %sub12 = sub i64 %conv7, %call11
  %conv13 = trunc i64 %sub12 to i32
  %21 = load %struct.one_result*, %struct.one_result** @results, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %22 to i64
  %arrayidx15 = getelementptr inbounds %struct.one_result, %struct.one_result* %21, i64 %idxprom14
  %label16 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx15, i32 0, i32 1
  %23 = load i8*, i8** %label16, align 8
  %24 = load %struct.one_result*, %struct.one_result** @results, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %25 to i64
  %arrayidx18 = getelementptr inbounds %struct.one_result, %struct.one_result* %24, i64 %idxprom17
  %time = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx18, i32 0, i32 0
  %26 = load double, double* %time, align 8
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0), i32 %16, i32 %conv13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), i8* %23, double %26)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body6
  %27 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %27, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond4

for.end22:                                        ; preds = %for.cond4
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc29, %for.end22
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* @current_test, align 4
  %cmp24 = icmp slt i32 %28, %29
  br i1 %cmp24, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond23
  %30 = load %struct.one_result*, %struct.one_result** @results, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %31 to i64
  %arrayidx27 = getelementptr inbounds %struct.one_result, %struct.one_result* %30, i64 %idxprom26
  %time28 = getelementptr inbounds %struct.one_result, %struct.one_result* %arrayidx27, i32 0, i32 0
  %32 = load double, double* %time28, align 8
  %33 = load double, double* %total_absolute_times, align 8
  %add = fadd double %33, %32
  store double %add, double* %total_absolute_times, align 8
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %34 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %34, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond23

for.end31:                                        ; preds = %for.cond23
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %output.addr, align 8
  %36 = load i8*, i8** %name.addr, align 8
  %37 = load double, double* %total_absolute_times, align 8
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i32 0, i32 0), i8* %36, double %37)
  store i32 0, i32* @current_test, align 4
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define void @_Z11start_timerv() #5 {
entry:
  %call = call i64 @clock() #9
  store i64 %call, i64* @start_time, align 8
  ret void
}

; Function Attrs: nounwind
declare i64 @clock() #1

; Function Attrs: noinline nounwind uwtable
define double @_Z5timerv() #5 {
entry:
  %call = call i64 @clock() #9
  store i64 %call, i64* @end_time, align 8
  %0 = load i64, i64* @end_time, align 8
  %1 = load i64, i64* @start_time, align 8
  %sub = sub nsw i64 %0, %1
  %conv = sitofp i64 %sub to double
  %div = fdiv double %conv, 1.000000e+06
  ret double %div
}

; Function Attrs: noinline norecurse uwtable
define i32 @main(i32 %argc, i8** %argv) #6 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1
  %2 = load i8*, i8** %arrayidx, align 8
  %call = call i32 @atoi(i8* %2) #11
  store i32 %call, i32* @base_iterations, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp sgt i32 %3, 2
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 8
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i64 2
  %5 = load i8*, i8** %arrayidx3, align 8
  %call4 = call double @atof(i8* %5) #11
  store double %call4, double* @init_value, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %6 = load double, double* @init_value, align 8
  %conv = fptosi double %6 to i8
  call void @_Z4fillIPaaEvT_S1_T0_(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i64 8000), i8 signext %conv)
  %7 = load i32, i32* @base_iterations, align 4
  store i32 %7, i32* @iterations, align 4
  call void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0))
  call void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i32 0, i32 0))
  call void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i32 0, i32 0))
  call void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i32 0, i32 0))
  call void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i32 0, i32 0))
  call void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0))
  call void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i32 0, i32 0))
  call void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.18, i32 0, i32 0))
  call void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i32 0, i32 0))
  call void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.20, i32 0, i32 0))
  call void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.21, i32 0, i32 0))
  call void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.22, i32 0, i32 0))
  call void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i32 0, i32 0))
  call void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i32 0, i32 0))
  call void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25, i32 0, i32 0))
  %8 = load i32, i32* @base_iterations, align 4
  %div = sdiv i32 %8, 10
  store i32 %div, i32* @iterations, align 4
  call void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i32 0, i32 0))
  call void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27, i32 0, i32 0))
  call void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i32 0, i32 0))
  call void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29, i32 0, i32 0))
  call void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i32 0, i32 0))
  call void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.31, i32 0, i32 0))
  call void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.32, i32 0, i32 0))
  call void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i32 0, i32 0))
  call void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.34, i32 0, i32 0))
  call void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.35, i32 0, i32 0))
  call void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.36, i32 0, i32 0))
  call void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.37, i32 0, i32 0))
  call void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.38, i32 0, i32 0))
  call void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.39, i32 0, i32 0))
  call void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.40, i32 0, i32 0))
  call void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i32 0, i32 0))
  call void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.42, i32 0, i32 0))
  %9 = load double, double* @init_value, align 8
  %conv6 = fptoui double %9 to i8
  call void @_Z4fillIPhhEvT_S1_T0_(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i8* getelementptr inbounds (i8, i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i64 8000), i8 zeroext %conv6)
  %10 = load i32, i32* @base_iterations, align 4
  store i32 %10, i32* @iterations, align 4
  call void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i32 0, i32 0))
  call void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i32 0, i32 0))
  call void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0))
  call void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.46, i32 0, i32 0))
  call void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.47, i32 0, i32 0))
  call void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.48, i32 0, i32 0))
  call void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i32 0, i32 0))
  call void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.50, i32 0, i32 0))
  call void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.51, i32 0, i32 0))
  call void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.52, i32 0, i32 0))
  call void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.53, i32 0, i32 0))
  call void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.54, i32 0, i32 0))
  call void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.55, i32 0, i32 0))
  call void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i32 0, i32 0))
  call void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.57, i32 0, i32 0))
  %11 = load i32, i32* @base_iterations, align 4
  %div7 = sdiv i32 %11, 10
  store i32 %div7, i32* @iterations, align 4
  call void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.58, i32 0, i32 0))
  call void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.59, i32 0, i32 0))
  call void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.60, i32 0, i32 0))
  call void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.61, i32 0, i32 0))
  call void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.62, i32 0, i32 0))
  call void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.63, i32 0, i32 0))
  call void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.64, i32 0, i32 0))
  call void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.65, i32 0, i32 0))
  call void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.66, i32 0, i32 0))
  call void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.67, i32 0, i32 0))
  call void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.68, i32 0, i32 0))
  call void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.69, i32 0, i32 0))
  call void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.70, i32 0, i32 0))
  call void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.71, i32 0, i32 0))
  call void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.72, i32 0, i32 0))
  call void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.73, i32 0, i32 0))
  call void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(i8* getelementptr inbounds ([8000 x i8], [8000 x i8]* @data8unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.74, i32 0, i32 0))
  %12 = load double, double* @init_value, align 8
  %conv8 = fptosi double %12 to i16
  call void @_Z4fillIPssEvT_S1_T0_(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i16* getelementptr inbounds (i16, i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i64 8000), i16 signext %conv8)
  %13 = load i32, i32* @base_iterations, align 4
  store i32 %13, i32* @iterations, align 4
  call void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.75, i32 0, i32 0))
  call void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.76, i32 0, i32 0))
  call void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.77, i32 0, i32 0))
  call void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.78, i32 0, i32 0))
  call void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.79, i32 0, i32 0))
  call void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0))
  call void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i32 0, i32 0))
  call void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.82, i32 0, i32 0))
  call void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.83, i32 0, i32 0))
  call void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.84, i32 0, i32 0))
  call void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.85, i32 0, i32 0))
  call void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.86, i32 0, i32 0))
  call void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.87, i32 0, i32 0))
  call void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.88, i32 0, i32 0))
  call void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.89, i32 0, i32 0))
  %14 = load i32, i32* @base_iterations, align 4
  %div9 = sdiv i32 %14, 10
  store i32 %div9, i32* @iterations, align 4
  call void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.90, i32 0, i32 0))
  call void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.91, i32 0, i32 0))
  call void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.92, i32 0, i32 0))
  call void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.93, i32 0, i32 0))
  call void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.94, i32 0, i32 0))
  call void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.95, i32 0, i32 0))
  call void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.96, i32 0, i32 0))
  call void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i32 0, i32 0))
  call void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.98, i32 0, i32 0))
  call void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.99, i32 0, i32 0))
  call void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.100, i32 0, i32 0))
  call void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.101, i32 0, i32 0))
  call void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.102, i32 0, i32 0))
  call void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.103, i32 0, i32 0))
  call void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.104, i32 0, i32 0))
  call void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.105, i32 0, i32 0))
  call void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.106, i32 0, i32 0))
  %15 = load double, double* @init_value, align 8
  %conv10 = fptoui double %15 to i16
  call void @_Z4fillIPttEvT_S1_T0_(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i16* getelementptr inbounds (i16, i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i64 8000), i16 zeroext %conv10)
  %16 = load i32, i32* @base_iterations, align 4
  store i32 %16, i32* @iterations, align 4
  call void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.107, i32 0, i32 0))
  call void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.108, i32 0, i32 0))
  call void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.109, i32 0, i32 0))
  call void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.110, i32 0, i32 0))
  call void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.111, i32 0, i32 0))
  call void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.112, i32 0, i32 0))
  call void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.113, i32 0, i32 0))
  call void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.114, i32 0, i32 0))
  call void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.115, i32 0, i32 0))
  call void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.116, i32 0, i32 0))
  call void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.117, i32 0, i32 0))
  call void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.118, i32 0, i32 0))
  call void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.119, i32 0, i32 0))
  call void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.120, i32 0, i32 0))
  call void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.121, i32 0, i32 0))
  %17 = load i32, i32* @base_iterations, align 4
  %div11 = sdiv i32 %17, 10
  store i32 %div11, i32* @iterations, align 4
  call void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.122, i32 0, i32 0))
  call void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.123, i32 0, i32 0))
  call void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.124, i32 0, i32 0))
  call void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.125, i32 0, i32 0))
  call void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.126, i32 0, i32 0))
  call void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.127, i32 0, i32 0))
  call void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.128, i32 0, i32 0))
  call void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.129, i32 0, i32 0))
  call void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.130, i32 0, i32 0))
  call void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.131, i32 0, i32 0))
  call void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.132, i32 0, i32 0))
  call void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.133, i32 0, i32 0))
  call void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.134, i32 0, i32 0))
  call void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.135, i32 0, i32 0))
  call void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.136, i32 0, i32 0))
  call void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.137, i32 0, i32 0))
  call void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(i16* getelementptr inbounds ([8000 x i16], [8000 x i16]* @data16unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.138, i32 0, i32 0))
  %18 = load double, double* @init_value, align 8
  %conv12 = fptosi double %18 to i32
  call void @_Z4fillIPiiEvT_S1_T0_(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32* getelementptr inbounds (i32, i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i64 8000), i32 %conv12)
  %19 = load i32, i32* @base_iterations, align 4
  store i32 %19, i32* @iterations, align 4
  call void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.139, i32 0, i32 0))
  call void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.140, i32 0, i32 0))
  call void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.141, i32 0, i32 0))
  call void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.142, i32 0, i32 0))
  call void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.143, i32 0, i32 0))
  call void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.144, i32 0, i32 0))
  call void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.145, i32 0, i32 0))
  call void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0))
  call void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.147, i32 0, i32 0))
  call void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.148, i32 0, i32 0))
  call void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.149, i32 0, i32 0))
  call void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.150, i32 0, i32 0))
  call void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.151, i32 0, i32 0))
  call void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.152, i32 0, i32 0))
  call void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i32 0, i32 0))
  %20 = load i32, i32* @base_iterations, align 4
  %div13 = sdiv i32 %20, 10
  store i32 %div13, i32* @iterations, align 4
  call void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.154, i32 0, i32 0))
  call void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.155, i32 0, i32 0))
  call void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.156, i32 0, i32 0))
  call void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.157, i32 0, i32 0))
  call void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.158, i32 0, i32 0))
  call void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.159, i32 0, i32 0))
  call void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.160, i32 0, i32 0))
  call void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.161, i32 0, i32 0))
  call void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.162, i32 0, i32 0))
  call void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.163, i32 0, i32 0))
  call void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.164, i32 0, i32 0))
  call void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.165, i32 0, i32 0))
  call void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.166, i32 0, i32 0))
  call void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.167, i32 0, i32 0))
  call void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.168, i32 0, i32 0))
  call void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.169, i32 0, i32 0))
  call void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.170, i32 0, i32 0))
  %21 = load double, double* @init_value, align 8
  %conv14 = fptoui double %21 to i32
  call void @_Z4fillIPjjEvT_S1_T0_(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32* getelementptr inbounds (i32, i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i64 8000), i32 %conv14)
  %22 = load i32, i32* @base_iterations, align 4
  store i32 %22, i32* @iterations, align 4
  call void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.171, i32 0, i32 0))
  call void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.172, i32 0, i32 0))
  call void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.173, i32 0, i32 0))
  call void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.174, i32 0, i32 0))
  call void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.175, i32 0, i32 0))
  call void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.176, i32 0, i32 0))
  call void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.177, i32 0, i32 0))
  call void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.178, i32 0, i32 0))
  call void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.179, i32 0, i32 0))
  call void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.180, i32 0, i32 0))
  call void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.181, i32 0, i32 0))
  call void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.182, i32 0, i32 0))
  call void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.183, i32 0, i32 0))
  call void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.184, i32 0, i32 0))
  call void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.185, i32 0, i32 0))
  %23 = load i32, i32* @base_iterations, align 4
  %div15 = sdiv i32 %23, 10
  store i32 %div15, i32* @iterations, align 4
  call void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.186, i32 0, i32 0))
  call void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.187, i32 0, i32 0))
  call void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.188, i32 0, i32 0))
  call void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.189, i32 0, i32 0))
  call void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.190, i32 0, i32 0))
  call void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.191, i32 0, i32 0))
  call void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.192, i32 0, i32 0))
  call void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.193, i32 0, i32 0))
  call void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.194, i32 0, i32 0))
  call void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.195, i32 0, i32 0))
  call void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.196, i32 0, i32 0))
  call void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.197, i32 0, i32 0))
  call void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.198, i32 0, i32 0))
  call void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.199, i32 0, i32 0))
  call void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.200, i32 0, i32 0))
  call void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.201, i32 0, i32 0))
  call void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(i32* getelementptr inbounds ([8000 x i32], [8000 x i32]* @data32unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.202, i32 0, i32 0))
  %24 = load double, double* @init_value, align 8
  %conv16 = fptosi double %24 to i64
  call void @_Z4fillIPllEvT_S1_T0_(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i64* getelementptr inbounds (i64, i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i64 8000), i64 %conv16)
  %25 = load i32, i32* @base_iterations, align 4
  store i32 %25, i32* @iterations, align 4
  call void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.203, i32 0, i32 0))
  call void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.204, i32 0, i32 0))
  call void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.205, i32 0, i32 0))
  call void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.206, i32 0, i32 0))
  call void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.207, i32 0, i32 0))
  call void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.208, i32 0, i32 0))
  call void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.209, i32 0, i32 0))
  call void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.210, i32 0, i32 0))
  call void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.211, i32 0, i32 0))
  call void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.212, i32 0, i32 0))
  call void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.213, i32 0, i32 0))
  call void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.214, i32 0, i32 0))
  call void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.215, i32 0, i32 0))
  call void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.216, i32 0, i32 0))
  call void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.217, i32 0, i32 0))
  %26 = load i32, i32* @base_iterations, align 4
  %div17 = sdiv i32 %26, 10
  store i32 %div17, i32* @iterations, align 4
  call void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.218, i32 0, i32 0))
  call void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.219, i32 0, i32 0))
  call void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.220, i32 0, i32 0))
  call void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.221, i32 0, i32 0))
  call void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.222, i32 0, i32 0))
  call void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.223, i32 0, i32 0))
  call void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.224, i32 0, i32 0))
  call void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.225, i32 0, i32 0))
  call void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.226, i32 0, i32 0))
  call void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.227, i32 0, i32 0))
  call void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.228, i32 0, i32 0))
  call void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.229, i32 0, i32 0))
  call void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.230, i32 0, i32 0))
  call void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.231, i32 0, i32 0))
  call void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.232, i32 0, i32 0))
  call void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.233, i32 0, i32 0))
  call void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.234, i32 0, i32 0))
  %27 = load double, double* @init_value, align 8
  %conv18 = fptoui double %27 to i64
  call void @_Z4fillIPmmEvT_S1_T0_(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i64* getelementptr inbounds (i64, i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i64 8000), i64 %conv18)
  %28 = load i32, i32* @base_iterations, align 4
  store i32 %28, i32* @iterations, align 4
  call void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.235, i32 0, i32 0))
  call void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.236, i32 0, i32 0))
  call void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.237, i32 0, i32 0))
  call void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.238, i32 0, i32 0))
  call void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.239, i32 0, i32 0))
  call void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.240, i32 0, i32 0))
  call void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.241, i32 0, i32 0))
  call void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.242, i32 0, i32 0))
  call void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.243, i32 0, i32 0))
  call void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.244, i32 0, i32 0))
  call void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.245, i32 0, i32 0))
  call void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.246, i32 0, i32 0))
  call void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.247, i32 0, i32 0))
  call void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.248, i32 0, i32 0))
  call void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.249, i32 0, i32 0))
  %29 = load i32, i32* @base_iterations, align 4
  %div19 = sdiv i32 %29, 10
  store i32 %div19, i32* @iterations, align 4
  call void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.250, i32 0, i32 0))
  call void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.251, i32 0, i32 0))
  call void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.252, i32 0, i32 0))
  call void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.253, i32 0, i32 0))
  call void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.254, i32 0, i32 0))
  call void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.255, i32 0, i32 0))
  call void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.256, i32 0, i32 0))
  call void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.257, i32 0, i32 0))
  call void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.258, i32 0, i32 0))
  call void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.259, i32 0, i32 0))
  call void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.260, i32 0, i32 0))
  call void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.261, i32 0, i32 0))
  call void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.262, i32 0, i32 0))
  call void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.263, i32 0, i32 0))
  call void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.264, i32 0, i32 0))
  call void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.265, i32 0, i32 0))
  call void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(i64* getelementptr inbounds ([8000 x i64], [8000 x i64]* @data64unsigned, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.266, i32 0, i32 0))
  %30 = load double, double* @init_value, align 8
  %conv20 = fptrunc double %30 to float
  call void @_Z4fillIPffEvT_S1_T0_(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), float* getelementptr inbounds (float, float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i64 8000), float %conv20)
  %31 = load i32, i32* @base_iterations, align 4
  store i32 %31, i32* @iterations, align 4
  call void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.267, i32 0, i32 0))
  call void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.268, i32 0, i32 0))
  call void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.269, i32 0, i32 0))
  call void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.270, i32 0, i32 0))
  call void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.271, i32 0, i32 0))
  %32 = load i32, i32* @base_iterations, align 4
  %div21 = sdiv i32 %32, 10
  store i32 %div21, i32* @iterations, align 4
  call void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.272, i32 0, i32 0))
  call void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.273, i32 0, i32 0))
  call void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.274, i32 0, i32 0))
  call void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.275, i32 0, i32 0))
  call void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.276, i32 0, i32 0))
  call void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.277, i32 0, i32 0))
  call void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.278, i32 0, i32 0))
  call void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.279, i32 0, i32 0))
  call void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.280, i32 0, i32 0))
  call void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.281, i32 0, i32 0))
  call void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(float* getelementptr inbounds ([8000 x float], [8000 x float]* @dataFloat, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.282, i32 0, i32 0))
  %33 = load double, double* @init_value, align 8
  call void @_Z4fillIPddEvT_S1_T0_(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), double* getelementptr inbounds (double, double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i64 8000), double %33)
  %34 = load i32, i32* @base_iterations, align 4
  store i32 %34, i32* @iterations, align 4
  call void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.283, i32 0, i32 0))
  call void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.284, i32 0, i32 0))
  call void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.285, i32 0, i32 0))
  call void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.286, i32 0, i32 0))
  call void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.287, i32 0, i32 0))
  %35 = load i32, i32* @base_iterations, align 4
  %div22 = sdiv i32 %35, 10
  store i32 %div22, i32* @iterations, align 4
  call void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.288, i32 0, i32 0))
  call void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.289, i32 0, i32 0))
  call void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.290, i32 0, i32 0))
  call void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.291, i32 0, i32 0))
  call void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.292, i32 0, i32 0))
  call void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.293, i32 0, i32 0))
  call void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.294, i32 0, i32 0))
  call void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.295, i32 0, i32 0))
  call void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.296, i32 0, i32 0))
  call void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.297, i32 0, i32 0))
  call void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(double* getelementptr inbounds ([8000 x double], [8000 x double]* @dataDouble, i32 0, i32 0), i32 8000, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.298, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #4

; Function Attrs: nounwind readonly
declare double @atof(i8*) #4

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPaaEvT_S1_T0_(i8* %first, i8* %last, i8 signext %value) #5 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %last.addr = alloca i8*, align 8
  %value.addr = alloca i8, align 1
  store i8* %first, i8** %first.addr, align 8
  store i8* %last, i8** %last.addr, align 8
  store i8 %value, i8* %value.addr, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %first.addr, align 8
  %1 = load i8*, i8** %last.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8, i8* %value.addr, align 1
  %3 = load i8*, i8** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %first.addr, align 8
  store i8 %2, i8* %3, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN10custom_twoIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa10custom_twoIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN20custom_add_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN20custom_sub_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN25custom_multiply_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN23custom_divide_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN20custom_mod_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN22custom_equal_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa22custom_equal_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN25custom_notequal_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN28custom_greaterthan_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN25custom_lessthan_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa25custom_lessthan_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN33custom_greaterthanequal_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN30custom_lessthanequal_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa30custom_lessthanequal_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN20custom_and_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN19custom_or_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN20custom_xor_constantsIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN19custom_constant_addIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa19custom_constant_addIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN28custom_multiple_constant_addIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN19custom_constant_subIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa19custom_constant_subIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN28custom_multiple_constant_subIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN24custom_constant_multiplyIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN33custom_multiple_constant_multiplyIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN34custom_multiple_constant_multiply2IaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN22custom_constant_divideIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN31custom_multiple_constant_divideIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN32custom_multiple_constant_divide2IaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN30custom_multiple_constant_mixedIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN19custom_constant_andIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa19custom_constant_andIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN28custom_multiple_constant_andIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN18custom_constant_orIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa18custom_constant_orIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN27custom_multiple_constant_orIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN19custom_constant_xorIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call signext i8 @_ZN28custom_multiple_constant_xorIaE8do_shiftEa(i8 signext %6)
  %conv = sext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = sext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_(i8 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPhhEvT_S1_T0_(i8* %first, i8* %last, i8 zeroext %value) #5 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %last.addr = alloca i8*, align 8
  %value.addr = alloca i8, align 1
  store i8* %first, i8** %first.addr, align 8
  store i8* %last, i8** %last.addr, align 8
  store i8 %value, i8* %value.addr, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %first.addr, align 8
  %1 = load i8*, i8** %last.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8, i8* %value.addr, align 1
  %3 = load i8*, i8** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %first.addr, align 8
  store i8 %2, i8* %3, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN10custom_twoIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh10custom_twoIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN20custom_add_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN20custom_sub_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN25custom_multiply_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN23custom_divide_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN20custom_mod_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN22custom_equal_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh22custom_equal_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN25custom_notequal_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN28custom_greaterthan_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN25custom_lessthan_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh25custom_lessthan_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN33custom_greaterthanequal_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN30custom_lessthanequal_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh30custom_lessthanequal_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN20custom_and_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN19custom_or_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN20custom_xor_constantsIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN19custom_constant_addIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh19custom_constant_addIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN28custom_multiple_constant_addIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN19custom_constant_subIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh19custom_constant_subIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN28custom_multiple_constant_subIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN24custom_constant_multiplyIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN33custom_multiple_constant_multiplyIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN34custom_multiple_constant_multiply2IhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN22custom_constant_divideIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN31custom_multiple_constant_divideIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN32custom_multiple_constant_divide2IhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN30custom_multiple_constant_mixedIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN19custom_constant_andIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh19custom_constant_andIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN28custom_multiple_constant_andIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN18custom_constant_orIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh18custom_constant_orIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN27custom_multiple_constant_orIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN19custom_constant_xorIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(i8* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i8*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i8, align 1
  %n = alloca i32, align 4
  store i8* %first, i8** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %result, align 1
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i8*, i8** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @_ZN28custom_multiple_constant_xorIhE8do_shiftEh(i8 zeroext %6)
  %conv = zext i8 %call to i32
  %7 = load i8, i8* %result, align 1
  %conv4 = zext i8 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i8
  store i8 %conv5, i8* %result, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i8, i8* %result, align 1
  call void @_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_(i8 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPssEvT_S1_T0_(i16* %first, i16* %last, i16 signext %value) #5 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %last.addr = alloca i16*, align 8
  %value.addr = alloca i16, align 2
  store i16* %first, i16** %first.addr, align 8
  store i16* %last, i16** %last.addr, align 8
  store i16 %value, i16* %value.addr, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i16*, i16** %first.addr, align 8
  %1 = load i16*, i16** %last.addr, align 8
  %cmp = icmp ne i16* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i16, i16* %value.addr, align 2
  %3 = load i16*, i16** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %3, i32 1
  store i16* %incdec.ptr, i16** %first.addr, align 8
  store i16 %2, i16* %3, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN10custom_twoIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs10custom_twoIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN20custom_add_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN20custom_sub_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN25custom_multiply_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN23custom_divide_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN20custom_mod_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN22custom_equal_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs22custom_equal_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN25custom_notequal_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN28custom_greaterthan_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN25custom_lessthan_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs25custom_lessthan_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN33custom_greaterthanequal_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN30custom_lessthanequal_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs30custom_lessthanequal_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN20custom_and_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN19custom_or_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN20custom_xor_constantsIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN19custom_constant_addIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs19custom_constant_addIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN28custom_multiple_constant_addIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN19custom_constant_subIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs19custom_constant_subIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN28custom_multiple_constant_subIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN24custom_constant_multiplyIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN33custom_multiple_constant_multiplyIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN34custom_multiple_constant_multiply2IsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN22custom_constant_divideIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN31custom_multiple_constant_divideIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN32custom_multiple_constant_divide2IsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN30custom_multiple_constant_mixedIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN19custom_constant_andIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs19custom_constant_andIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN28custom_multiple_constant_andIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN18custom_constant_orIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs18custom_constant_orIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN27custom_multiple_constant_orIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN19custom_constant_xorIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call signext i16 @_ZN28custom_multiple_constant_xorIsE8do_shiftEs(i16 signext %6)
  %conv = sext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = sext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_(i16 signext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPttEvT_S1_T0_(i16* %first, i16* %last, i16 zeroext %value) #5 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %last.addr = alloca i16*, align 8
  %value.addr = alloca i16, align 2
  store i16* %first, i16** %first.addr, align 8
  store i16* %last, i16** %last.addr, align 8
  store i16 %value, i16* %value.addr, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i16*, i16** %first.addr, align 8
  %1 = load i16*, i16** %last.addr, align 8
  %cmp = icmp ne i16* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i16, i16* %value.addr, align 2
  %3 = load i16*, i16** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %3, i32 1
  store i16* %incdec.ptr, i16** %first.addr, align 8
  store i16 %2, i16* %3, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN10custom_twoItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt10custom_twoItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN20custom_add_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt20custom_add_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN20custom_sub_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN25custom_multiply_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN23custom_divide_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN20custom_mod_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN22custom_equal_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt22custom_equal_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN25custom_notequal_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN28custom_greaterthan_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN25custom_lessthan_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt25custom_lessthan_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN33custom_greaterthanequal_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN30custom_lessthanequal_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt30custom_lessthanequal_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN20custom_and_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt20custom_and_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN19custom_or_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt19custom_or_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN20custom_xor_constantsItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN19custom_constant_addItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt19custom_constant_addItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN28custom_multiple_constant_addItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN19custom_constant_subItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt19custom_constant_subItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN28custom_multiple_constant_subItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN24custom_constant_multiplyItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN33custom_multiple_constant_multiplyItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN34custom_multiple_constant_multiply2ItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN22custom_constant_divideItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt22custom_constant_divideItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN31custom_multiple_constant_divideItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN32custom_multiple_constant_divide2ItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN30custom_multiple_constant_mixedItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN19custom_constant_andItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt19custom_constant_andItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN28custom_multiple_constant_andItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN18custom_constant_orItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt18custom_constant_orItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN27custom_multiple_constant_orItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN19custom_constant_xorItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt19custom_constant_xorItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(i16* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i16*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i16, align 2
  %n = alloca i32, align 4
  store i16* %first, i16** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  store i16 0, i16* %result, align 2
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i16*, i16** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %call = call zeroext i16 @_ZN28custom_multiple_constant_xorItE8do_shiftEt(i16 zeroext %6)
  %conv = zext i16 %call to i32
  %7 = load i16, i16* %result, align 2
  %conv4 = zext i16 %7 to i32
  %add = add nsw i32 %conv4, %conv
  %conv5 = trunc i32 %add to i16
  store i16 %conv5, i16* %result, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i16, i16* %result, align 2
  call void @_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_(i16 zeroext %9)
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  %call9 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call9, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPiiEvT_S1_T0_(i32* %first, i32* %last, i32 %value) #5 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %last.addr = alloca i32*, align 8
  %value.addr = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32* %last, i32** %last.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %first.addr, align 8
  %1 = load i32*, i32** %last.addr, align 8
  %cmp = icmp ne i32* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %3, i32 1
  store i32* %incdec.ptr, i32** %first.addr, align 8
  store i32 %2, i32* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN10custom_twoIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi10custom_twoIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_add_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_sub_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN25custom_multiply_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN23custom_divide_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_mod_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN22custom_equal_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi22custom_equal_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN25custom_notequal_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_greaterthan_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN25custom_lessthan_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi25custom_lessthan_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN33custom_greaterthanequal_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN30custom_lessthanequal_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi30custom_lessthanequal_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_and_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_or_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_xor_constantsIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_addIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi19custom_constant_addIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_addIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_subIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi19custom_constant_subIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_subIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN24custom_constant_multiplyIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN33custom_multiple_constant_multiplyIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN34custom_multiple_constant_multiply2IiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN22custom_constant_divideIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN31custom_multiple_constant_divideIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN32custom_multiple_constant_divide2IiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN30custom_multiple_constant_mixedIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_andIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi19custom_constant_andIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_andIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN18custom_constant_orIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi18custom_constant_orIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN27custom_multiple_constant_orIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_xorIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_xorIiE8do_shiftEi(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add nsw i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPjjEvT_S1_T0_(i32* %first, i32* %last, i32 %value) #5 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %last.addr = alloca i32*, align 8
  %value.addr = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32* %last, i32** %last.addr, align 8
  store i32 %value, i32* %value.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %first.addr, align 8
  %1 = load i32*, i32** %last.addr, align 8
  %cmp = icmp ne i32* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %3, i32 1
  store i32* %incdec.ptr, i32** %first.addr, align 8
  store i32 %2, i32* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN10custom_twoIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj10custom_twoIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_add_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_sub_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN25custom_multiply_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN23custom_divide_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_mod_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN22custom_equal_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj22custom_equal_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN25custom_notequal_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_greaterthan_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN25custom_lessthan_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj25custom_lessthan_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN33custom_greaterthanequal_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN30custom_lessthanequal_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj30custom_lessthanequal_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_and_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_or_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN20custom_xor_constantsIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_addIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj19custom_constant_addIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_addIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_subIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj19custom_constant_subIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_subIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN24custom_constant_multiplyIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN33custom_multiple_constant_multiplyIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN34custom_multiple_constant_multiply2IjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN22custom_constant_divideIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN31custom_multiple_constant_divideIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN32custom_multiple_constant_divide2IjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN30custom_multiple_constant_mixedIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_andIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj19custom_constant_andIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_andIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN18custom_constant_orIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj18custom_constant_orIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN27custom_multiple_constant_orIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN19custom_constant_xorIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(i32* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %first, i32** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32*, i32** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %call = call i32 @_ZN28custom_multiple_constant_xorIjE8do_shiftEj(i32 %6)
  %7 = load i32, i32* %result, align 4
  %add = add i32 %7, %call
  store i32 %add, i32* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i32, i32* %result, align 4
  call void @_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_(i32 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPllEvT_S1_T0_(i64* %first, i64* %last, i64 %value) #5 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %last.addr = alloca i64*, align 8
  %value.addr = alloca i64, align 8
  store i64* %first, i64** %first.addr, align 8
  store i64* %last, i64** %last.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64*, i64** %first.addr, align 8
  %1 = load i64*, i64** %last.addr, align 8
  %cmp = icmp ne i64* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i64, i64* %value.addr, align 8
  %3 = load i64*, i64** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %3, i32 1
  store i64* %incdec.ptr, i64** %first.addr, align 8
  store i64 %2, i64* %3, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN10custom_twoIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl10custom_twoIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_add_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_sub_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN25custom_multiply_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN23custom_divide_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_mod_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN22custom_equal_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl22custom_equal_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN25custom_notequal_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_greaterthan_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN25custom_lessthan_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl25custom_lessthan_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN33custom_greaterthanequal_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN30custom_lessthanequal_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl30custom_lessthanequal_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_and_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_or_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_xor_constantsIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_addIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl19custom_constant_addIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_addIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_subIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl19custom_constant_subIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_subIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN24custom_constant_multiplyIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN33custom_multiple_constant_multiplyIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN34custom_multiple_constant_multiply2IlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN22custom_constant_divideIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN31custom_multiple_constant_divideIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN32custom_multiple_constant_divide2IlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN30custom_multiple_constant_mixedIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_andIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl19custom_constant_andIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_andIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN18custom_constant_orIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl18custom_constant_orIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN27custom_multiple_constant_orIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_xorIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_xorIlE8do_shiftEl(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add nsw i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPmmEvT_S1_T0_(i64* %first, i64* %last, i64 %value) #5 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %last.addr = alloca i64*, align 8
  %value.addr = alloca i64, align 8
  store i64* %first, i64** %first.addr, align 8
  store i64* %last, i64** %last.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64*, i64** %first.addr, align 8
  %1 = load i64*, i64** %last.addr, align 8
  %cmp = icmp ne i64* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i64, i64* %value.addr, align 8
  %3 = load i64*, i64** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds i64, i64* %3, i32 1
  store i64* %incdec.ptr, i64** %first.addr, align 8
  store i64 %2, i64* %3, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN10custom_twoImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm10custom_twoImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_add_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm20custom_add_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_sub_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN25custom_multiply_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN23custom_divide_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_mod_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN22custom_equal_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm22custom_equal_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN25custom_notequal_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_greaterthan_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN25custom_lessthan_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm25custom_lessthan_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN33custom_greaterthanequal_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN30custom_lessthanequal_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm30custom_lessthanequal_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_and_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm20custom_and_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_or_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm19custom_or_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN20custom_xor_constantsImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_addImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm19custom_constant_addImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_addImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_subImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm19custom_constant_subImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_subImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN24custom_constant_multiplyImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN33custom_multiple_constant_multiplyImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN34custom_multiple_constant_multiply2ImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN22custom_constant_divideImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm22custom_constant_divideImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN31custom_multiple_constant_divideImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN32custom_multiple_constant_divide2ImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN30custom_multiple_constant_mixedImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_andImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm19custom_constant_andImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_andImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN18custom_constant_orImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm18custom_constant_orImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN27custom_multiple_constant_orImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN19custom_constant_xorImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm19custom_constant_xorImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(i64* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca i64*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca i64, align 8
  %n = alloca i32, align 4
  store i64* %first, i64** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i64*, i64** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8
  %call = call i64 @_ZN28custom_multiple_constant_xorImE8do_shiftEm(i64 %6)
  %7 = load i64, i64* %result, align 8
  %add = add i64 %7, %call
  store i64 %add, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load i64, i64* %result, align 8
  call void @_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_(i64 %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPffEvT_S1_T0_(float* %first, float* %last, float %value) #5 comdat {
entry:
  %first.addr = alloca float*, align 8
  %last.addr = alloca float*, align 8
  %value.addr = alloca float, align 4
  store float* %first, float** %first.addr, align 8
  store float* %last, float** %last.addr, align 8
  store float %value, float* %value.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load float*, float** %first.addr, align 8
  %1 = load float*, float** %last.addr, align 8
  %cmp = icmp ne float* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load float, float* %value.addr, align 4
  %3 = load float*, float** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %first.addr, align 8
  store float %2, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN10custom_twoIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf10custom_twoIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN20custom_add_constantsIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN20custom_sub_constantsIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN25custom_multiply_constantsIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN23custom_divide_constantsIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN19custom_constant_addIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf19custom_constant_addIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN28custom_multiple_constant_addIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN19custom_constant_subIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf19custom_constant_subIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN28custom_multiple_constant_subIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN24custom_constant_multiplyIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN33custom_multiple_constant_multiplyIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN34custom_multiple_constant_multiply2IfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN22custom_constant_divideIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN31custom_multiple_constant_divideIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN32custom_multiple_constant_divide2IfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(float* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca float*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca float, align 4
  %n = alloca i32, align 4
  store float* %first, float** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store float 0.000000e+00, float* %result, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load float*, float** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom
  %6 = load float, float* %arrayidx, align 4
  %call = call float @_ZN30custom_multiple_constant_mixedIfE8do_shiftEf(float %6)
  %7 = load float, float* %result, align 4
  %add = fadd float %7, %call
  store float %add, float* %result, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load float, float* %result, align 4
  call void @_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_(float %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z4fillIPddEvT_S1_T0_(double* %first, double* %last, double %value) #5 comdat {
entry:
  %first.addr = alloca double*, align 8
  %last.addr = alloca double*, align 8
  %value.addr = alloca double, align 8
  store double* %first, double** %first.addr, align 8
  store double* %last, double** %last.addr, align 8
  store double %value, double* %value.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load double*, double** %first.addr, align 8
  %1 = load double*, double** %last.addr, align 8
  %cmp = icmp ne double* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load double, double* %value.addr, align 8
  %3 = load double*, double** %first.addr, align 8
  %incdec.ptr = getelementptr inbounds double, double* %3, i32 1
  store double* %incdec.ptr, double** %first.addr, align 8
  store double %2, double* %3, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN10custom_twoIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId10custom_twoIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN20custom_add_constantsIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId20custom_add_constantsIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN20custom_sub_constantsIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN25custom_multiply_constantsIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN23custom_divide_constantsIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN19custom_constant_addIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId19custom_constant_addIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN28custom_multiple_constant_addIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN19custom_constant_subIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId19custom_constant_subIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN28custom_multiple_constant_subIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN24custom_constant_multiplyIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN33custom_multiple_constant_multiplyIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN34custom_multiple_constant_multiply2IdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN22custom_constant_divideIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId22custom_constant_divideIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN31custom_multiple_constant_divideIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN32custom_multiple_constant_divide2IdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(double* %first, i32 %count, i8* %label) #0 comdat {
entry:
  %first.addr = alloca double*, align 8
  %count.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %result = alloca double, align 8
  %n = alloca i32, align 4
  store double* %first, double** %first.addr, align 8
  store i32 %count, i32* %count.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @_Z11start_timerv()
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @iterations, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %result, align 8
  store i32 0, i32* %n, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %n, align 4
  %3 = load i32, i32* %count.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %first.addr, align 8
  %5 = load i32, i32* %n, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %call = call double @_ZN30custom_multiple_constant_mixedIdE8do_shiftEd(double %6)
  %7 = load double, double* %result, align 8
  %add = fadd double %7, %call
  store double %add, double* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %n, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %9 = load double, double* %result, align 8
  call void @_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_(double %9)
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %10, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %call7 = call double @_Z5timerv()
  %11 = load i8*, i8** %label.addr, align 8
  call void @_Z13record_resultdPKc(double %call7, i8* %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN30custom_multiple_constant_mixedIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %add = fadd double %0, 2.000000e+00
  %sub = fsub double %add, 2.400000e+00
  ret double %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId30custom_multiple_constant_mixedIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN30custom_multiple_constant_mixedIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %a, double* dereferenceable(8) %b) #5 comdat {
entry:
  %a.addr = alloca double*, align 8
  %b.addr = alloca double*, align 8
  %diff = alloca double, align 8
  %reldiff = alloca double, align 8
  store double* %a, double** %a.addr, align 8
  store double* %b, double** %b.addr, align 8
  %0 = load double*, double** %a.addr, align 8
  %1 = load double, double* %0, align 8
  %2 = load double*, double** %b.addr, align 8
  %3 = load double, double* %2, align 8
  %sub = fsub double %1, %3
  store double %sub, double* %diff, align 8
  %4 = load double, double* %diff, align 8
  store double %4, double* %reldiff, align 8
  %5 = load double*, double** %a.addr, align 8
  %6 = load double, double* %5, align 8
  %call = call double @fabs(double %6) #8
  %cmp = fcmp ogt double %call, 1.000000e-08
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load double, double* %diff, align 8
  %8 = load double*, double** %a.addr, align 8
  %9 = load double, double* %8, align 8
  %div = fdiv double %7, %9
  store double %div, double* %reldiff, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load double, double* %reldiff, align 8
  %call1 = call double @fabs(double %10) #8
  %cmp2 = fcmp olt double %call1, 1.000000e-06
  ret i1 %cmp2
}

; Function Attrs: nounwind readnone
declare double @fabs(double) #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN32custom_multiple_constant_divide2IdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %add = fadd double %0, 2.000000e+00
  ret double %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId32custom_multiple_constant_divide2IdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN32custom_multiple_constant_divide2IdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN31custom_multiple_constant_divideIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %div = fdiv double %0, 2.000000e+00
  %div1 = fdiv double %div, 3.000000e+00
  %div2 = fdiv double %div1, 4.000000e+00
  %div3 = fdiv double %div2, 5.000000e+00
  ret double %div3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId31custom_multiple_constant_divideIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN31custom_multiple_constant_divideIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN22custom_constant_divideIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %div = fdiv double %0, 5.000000e+00
  ret double %div
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId22custom_constant_divideIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN22custom_constant_divideIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN34custom_multiple_constant_multiply2IdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %add = fadd double %0, 1.200000e+02
  ret double %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId34custom_multiple_constant_multiply2IdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN34custom_multiple_constant_multiply2IdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN33custom_multiple_constant_multiplyIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %mul = fmul double %0, 2.000000e+00
  %mul1 = fmul double %mul, 3.000000e+00
  %mul2 = fmul double %mul1, 4.000000e+00
  %mul3 = fmul double %mul2, 5.000000e+00
  ret double %mul3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId33custom_multiple_constant_multiplyIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN33custom_multiple_constant_multiplyIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN24custom_constant_multiplyIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %mul = fmul double %0, 1.200000e+02
  ret double %mul
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId24custom_constant_multiplyIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN24custom_constant_multiplyIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN28custom_multiple_constant_subIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %sub = fsub double %0, 1.000000e+00
  %sub1 = fsub double %sub, 2.000000e+00
  %sub2 = fsub double %sub1, 3.000000e+00
  %sub3 = fsub double %sub2, 4.000000e+00
  ret double %sub3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId28custom_multiple_constant_subIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN28custom_multiple_constant_subIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN19custom_constant_subIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %sub = fsub double %0, 1.000000e+01
  ret double %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId19custom_constant_subIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN19custom_constant_subIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN28custom_multiple_constant_addIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %add = fadd double %0, 1.000000e+00
  %add1 = fadd double %add, 2.000000e+00
  %add2 = fadd double %add1, 3.000000e+00
  %add3 = fadd double %add2, 4.000000e+00
  ret double %add3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId28custom_multiple_constant_addIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN28custom_multiple_constant_addIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN19custom_constant_addIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  %0 = load double, double* %input.addr, align 8
  %add = fadd double %0, 1.000000e+01
  ret double %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId19custom_constant_addIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN19custom_constant_addIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN23custom_divide_constantsIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  ret double 2.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId23custom_divide_constantsIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN23custom_divide_constantsIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN25custom_multiply_constantsIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  ret double 6.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId25custom_multiply_constantsIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN25custom_multiply_constantsIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN20custom_sub_constantsIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  ret double 1.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId20custom_sub_constantsIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN20custom_sub_constantsIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN20custom_add_constantsIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  ret double 3.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId20custom_add_constantsIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN20custom_add_constantsIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZN10custom_twoIdE8do_shiftEd(double %input) #5 comdat align 2 {
entry:
  %input.addr = alloca double, align 8
  store double %input, double* %input.addr, align 8
  ret double 2.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumId10custom_twoIdEEvT_(double %result) #0 comdat {
entry:
  %result.addr = alloca double, align 8
  %temp = alloca double, align 8
  store double %result, double* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %call = call double @_ZN10custom_twoIdE8do_shiftEd(double %0)
  %mul = fmul double 8.000000e+03, %call
  store double %mul, double* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIdEbRT_S1_(double* dereferenceable(8) %result.addr, double* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN30custom_multiple_constant_mixedIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %add = fadd float %0, 2.000000e+00
  %sub = fsub float %add, 0x4003333340000000
  ret float %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf30custom_multiple_constant_mixedIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN30custom_multiple_constant_mixedIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %a, float* dereferenceable(4) %b) #0 comdat {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %diff = alloca float, align 4
  %reldiff = alloca double, align 8
  store float* %a, float** %a.addr, align 8
  store float* %b, float** %b.addr, align 8
  %0 = load float*, float** %a.addr, align 8
  %1 = load float, float* %0, align 4
  %2 = load float*, float** %b.addr, align 8
  %3 = load float, float* %2, align 4
  %sub = fsub float %1, %3
  store float %sub, float* %diff, align 4
  %4 = load float, float* %diff, align 4
  %conv = fpext float %4 to double
  store double %conv, double* %reldiff, align 8
  %5 = load float*, float** %a.addr, align 8
  %6 = load float, float* %5, align 4
  %call = call float @_ZSt4fabsf(float %6)
  %conv1 = fpext float %call to double
  %cmp = fcmp ogt double %conv1, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load float, float* %diff, align 4
  %8 = load float*, float** %a.addr, align 8
  %9 = load float, float* %8, align 4
  %div = fdiv float %7, %9
  %conv2 = fpext float %div to double
  store double %conv2, double* %reldiff, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load double, double* %reldiff, align 8
  %call3 = call double @fabs(double %10) #8
  %cmp4 = fcmp olt double %call3, 1.000000e-03
  ret i1 %cmp4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZSt4fabsf(float %__x) #5 comdat {
entry:
  %__x.addr = alloca float, align 4
  store float %__x, float* %__x.addr, align 4
  %0 = load float, float* %__x.addr, align 4
  %1 = call float @llvm.fabs.f32(float %0)
  ret float %1
}

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #8

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN32custom_multiple_constant_divide2IfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %add = fadd float %0, 2.000000e+00
  ret float %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf32custom_multiple_constant_divide2IfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN32custom_multiple_constant_divide2IfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN31custom_multiple_constant_divideIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %div = fdiv float %0, 2.000000e+00
  %div1 = fdiv float %div, 3.000000e+00
  %div2 = fdiv float %div1, 4.000000e+00
  %div3 = fdiv float %div2, 5.000000e+00
  ret float %div3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf31custom_multiple_constant_divideIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN31custom_multiple_constant_divideIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN22custom_constant_divideIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %div = fdiv float %0, 5.000000e+00
  ret float %div
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf22custom_constant_divideIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN22custom_constant_divideIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN34custom_multiple_constant_multiply2IfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %add = fadd float %0, 1.200000e+02
  ret float %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf34custom_multiple_constant_multiply2IfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN34custom_multiple_constant_multiply2IfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN33custom_multiple_constant_multiplyIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %mul = fmul float %0, 2.000000e+00
  %mul1 = fmul float %mul, 3.000000e+00
  %mul2 = fmul float %mul1, 4.000000e+00
  %mul3 = fmul float %mul2, 5.000000e+00
  ret float %mul3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf33custom_multiple_constant_multiplyIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN33custom_multiple_constant_multiplyIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN24custom_constant_multiplyIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %mul = fmul float %0, 1.200000e+02
  ret float %mul
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf24custom_constant_multiplyIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN24custom_constant_multiplyIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN28custom_multiple_constant_subIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %sub = fsub float %0, 1.000000e+00
  %sub1 = fsub float %sub, 2.000000e+00
  %sub2 = fsub float %sub1, 3.000000e+00
  %sub3 = fsub float %sub2, 4.000000e+00
  ret float %sub3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf28custom_multiple_constant_subIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN28custom_multiple_constant_subIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN19custom_constant_subIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %sub = fsub float %0, 1.000000e+01
  ret float %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf19custom_constant_subIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN19custom_constant_subIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN28custom_multiple_constant_addIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %add = fadd float %0, 1.000000e+00
  %add1 = fadd float %add, 2.000000e+00
  %add2 = fadd float %add1, 3.000000e+00
  %add3 = fadd float %add2, 4.000000e+00
  ret float %add3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf28custom_multiple_constant_addIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN28custom_multiple_constant_addIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN19custom_constant_addIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  %0 = load float, float* %input.addr, align 4
  %add = fadd float %0, 1.000000e+01
  ret float %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf19custom_constant_addIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN19custom_constant_addIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN23custom_divide_constantsIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  ret float 2.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf23custom_divide_constantsIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN23custom_divide_constantsIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN25custom_multiply_constantsIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  ret float 6.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf25custom_multiply_constantsIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN25custom_multiply_constantsIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN20custom_sub_constantsIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  ret float 1.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf20custom_sub_constantsIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN20custom_sub_constantsIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN20custom_add_constantsIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  ret float 3.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf20custom_add_constantsIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN20custom_add_constantsIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr float @_ZN10custom_twoIfE8do_shiftEf(float %input) #5 comdat align 2 {
entry:
  %input.addr = alloca float, align 4
  store float %input, float* %input.addr, align 4
  ret float 2.000000e+00
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIf10custom_twoIfEEvT_(float %result) #0 comdat {
entry:
  %result.addr = alloca float, align 4
  %temp = alloca float, align 4
  store float %result, float* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptrunc double %0 to float
  %call = call float @_ZN10custom_twoIfE8do_shiftEf(float %conv)
  %mul = fmul float 8.000000e+03, %call
  store float %mul, float* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIfEbRT_S1_(float* dereferenceable(4) %result.addr, float* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_xorImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %xor = xor i64 %0, 15
  %xor1 = xor i64 %xor, 30
  %xor2 = xor i64 %xor1, 31
  %xor3 = xor i64 %xor2, 63
  ret i64 %xor3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm28custom_multiple_constant_xorImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_xorImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %a, i64* dereferenceable(8) %b) #5 comdat {
entry:
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  store i64* %a, i64** %a.addr, align 8
  store i64* %b, i64** %b.addr, align 8
  %0 = load i64*, i64** %a.addr, align 8
  %1 = load i64, i64* %0, align 8
  %2 = load i64*, i64** %b.addr, align 8
  %3 = load i64, i64* %2, align 8
  %cmp = icmp eq i64 %1, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_xorImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %xor = xor i64 %0, 10
  ret i64 %xor
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm19custom_constant_xorImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN19custom_constant_xorImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN27custom_multiple_constant_orImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %or = or i64 %0, 15
  %or1 = or i64 %or, 30
  %or2 = or i64 %or1, 31
  %or3 = or i64 %or2, 63
  ret i64 %or3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm27custom_multiple_constant_orImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN27custom_multiple_constant_orImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN18custom_constant_orImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %or = or i64 %0, 10
  ret i64 %or
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm18custom_constant_orImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN18custom_constant_orImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_andImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %and = and i64 %0, 15
  %and1 = and i64 %and, 30
  %and2 = and i64 %and1, 31
  %and3 = and i64 %and2, 63
  ret i64 %and3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm28custom_multiple_constant_andImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_andImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_andImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %and = and i64 %0, 10
  ret i64 %and
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm19custom_constant_andImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN19custom_constant_andImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN30custom_multiple_constant_mixedImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add i64 %0, 2
  %sub = sub i64 %add, 2
  ret i64 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm30custom_multiple_constant_mixedImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN30custom_multiple_constant_mixedImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN32custom_multiple_constant_divide2ImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add i64 %0, 2
  ret i64 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm32custom_multiple_constant_divide2ImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN32custom_multiple_constant_divide2ImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN31custom_multiple_constant_divideImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %div = udiv i64 %0, 2
  %div1 = udiv i64 %div, 3
  %div2 = udiv i64 %div1, 4
  %div3 = udiv i64 %div2, 5
  ret i64 %div3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm31custom_multiple_constant_divideImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN31custom_multiple_constant_divideImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN22custom_constant_divideImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %div = udiv i64 %0, 5
  ret i64 %div
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm22custom_constant_divideImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN22custom_constant_divideImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN34custom_multiple_constant_multiply2ImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add i64 %0, 120
  ret i64 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm34custom_multiple_constant_multiply2ImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN34custom_multiple_constant_multiply2ImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN33custom_multiple_constant_multiplyImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %mul = mul i64 %0, 2
  %mul1 = mul i64 %mul, 3
  %mul2 = mul i64 %mul1, 4
  %mul3 = mul i64 %mul2, 5
  ret i64 %mul3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm33custom_multiple_constant_multiplyImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN33custom_multiple_constant_multiplyImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN24custom_constant_multiplyImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %mul = mul i64 %0, 120
  ret i64 %mul
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm24custom_constant_multiplyImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN24custom_constant_multiplyImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_subImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %sub = sub i64 %0, 1
  %sub1 = sub i64 %sub, 2
  %sub2 = sub i64 %sub1, 3
  %sub3 = sub i64 %sub2, 4
  ret i64 %sub3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm28custom_multiple_constant_subImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_subImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_subImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %sub = sub i64 %0, 10
  ret i64 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm19custom_constant_subImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN19custom_constant_subImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_addImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add i64 %0, 1
  %add1 = add i64 %add, 2
  %add2 = add i64 %add1, 3
  %add3 = add i64 %add2, 4
  ret i64 %add3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm28custom_multiple_constant_addImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_addImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_addImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add i64 %0, 10
  ret i64 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm19custom_constant_addImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN19custom_constant_addImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_xor_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm20custom_xor_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN20custom_xor_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_or_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm19custom_or_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN19custom_or_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_and_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm20custom_and_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN20custom_and_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN30custom_lessthanequal_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm30custom_lessthanequal_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN30custom_lessthanequal_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN33custom_greaterthanequal_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm33custom_greaterthanequal_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN33custom_greaterthanequal_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN25custom_lessthan_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm25custom_lessthan_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN25custom_lessthan_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_greaterthan_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm28custom_greaterthan_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN28custom_greaterthan_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN25custom_notequal_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm25custom_notequal_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN25custom_notequal_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN22custom_equal_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm22custom_equal_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN22custom_equal_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_mod_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm20custom_mod_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN20custom_mod_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN23custom_divide_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm23custom_divide_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN23custom_divide_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN25custom_multiply_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm25custom_multiply_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN25custom_multiply_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_sub_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm20custom_sub_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN20custom_sub_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_add_constantsImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm20custom_add_constantsImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN20custom_add_constantsImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN10custom_twoImE8do_shiftEm(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIm10custom_twoImEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i64
  %call = call i64 @_ZN10custom_twoImE8do_shiftEm(i64 %conv)
  %mul = mul i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalImEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_xorIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %xor = xor i64 %0, 15
  %xor1 = xor i64 %xor, 30
  %xor2 = xor i64 %xor1, 31
  %xor3 = xor i64 %xor2, 63
  ret i64 %xor3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl28custom_multiple_constant_xorIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_xorIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %a, i64* dereferenceable(8) %b) #5 comdat {
entry:
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  store i64* %a, i64** %a.addr, align 8
  store i64* %b, i64** %b.addr, align 8
  %0 = load i64*, i64** %a.addr, align 8
  %1 = load i64, i64* %0, align 8
  %2 = load i64*, i64** %b.addr, align 8
  %3 = load i64, i64* %2, align 8
  %cmp = icmp eq i64 %1, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_xorIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %xor = xor i64 %0, 10
  ret i64 %xor
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl19custom_constant_xorIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN19custom_constant_xorIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN27custom_multiple_constant_orIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %or = or i64 %0, 15
  %or1 = or i64 %or, 30
  %or2 = or i64 %or1, 31
  %or3 = or i64 %or2, 63
  ret i64 %or3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl27custom_multiple_constant_orIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN27custom_multiple_constant_orIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN18custom_constant_orIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %or = or i64 %0, 10
  ret i64 %or
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl18custom_constant_orIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN18custom_constant_orIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_andIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %and = and i64 %0, 15
  %and1 = and i64 %and, 30
  %and2 = and i64 %and1, 31
  %and3 = and i64 %and2, 63
  ret i64 %and3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl28custom_multiple_constant_andIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_andIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_andIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %and = and i64 %0, 10
  ret i64 %and
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl19custom_constant_andIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN19custom_constant_andIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN30custom_multiple_constant_mixedIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add nsw i64 %0, 2
  %sub = sub nsw i64 %add, 2
  ret i64 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl30custom_multiple_constant_mixedIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN30custom_multiple_constant_mixedIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN32custom_multiple_constant_divide2IlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add nsw i64 %0, 2
  ret i64 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl32custom_multiple_constant_divide2IlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN32custom_multiple_constant_divide2IlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN31custom_multiple_constant_divideIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %div = sdiv i64 %0, 2
  %div1 = sdiv i64 %div, 3
  %div2 = sdiv i64 %div1, 4
  %div3 = sdiv i64 %div2, 5
  ret i64 %div3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl31custom_multiple_constant_divideIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN31custom_multiple_constant_divideIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN22custom_constant_divideIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %div = sdiv i64 %0, 5
  ret i64 %div
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl22custom_constant_divideIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN22custom_constant_divideIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN34custom_multiple_constant_multiply2IlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add nsw i64 %0, 120
  ret i64 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl34custom_multiple_constant_multiply2IlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN34custom_multiple_constant_multiply2IlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN33custom_multiple_constant_multiplyIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %mul = mul nsw i64 %0, 2
  %mul1 = mul nsw i64 %mul, 3
  %mul2 = mul nsw i64 %mul1, 4
  %mul3 = mul nsw i64 %mul2, 5
  ret i64 %mul3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl33custom_multiple_constant_multiplyIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN33custom_multiple_constant_multiplyIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN24custom_constant_multiplyIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %mul = mul nsw i64 %0, 120
  ret i64 %mul
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl24custom_constant_multiplyIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN24custom_constant_multiplyIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_subIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %sub = sub nsw i64 %0, 1
  %sub1 = sub nsw i64 %sub, 2
  %sub2 = sub nsw i64 %sub1, 3
  %sub3 = sub nsw i64 %sub2, 4
  ret i64 %sub3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl28custom_multiple_constant_subIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_subIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_subIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %sub = sub nsw i64 %0, 10
  ret i64 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl19custom_constant_subIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN19custom_constant_subIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_multiple_constant_addIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add nsw i64 %0, 1
  %add1 = add nsw i64 %add, 2
  %add2 = add nsw i64 %add1, 3
  %add3 = add nsw i64 %add2, 4
  ret i64 %add3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl28custom_multiple_constant_addIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN28custom_multiple_constant_addIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_constant_addIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  %0 = load i64, i64* %input.addr, align 8
  %add = add nsw i64 %0, 10
  ret i64 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl19custom_constant_addIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN19custom_constant_addIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_xor_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl20custom_xor_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN20custom_xor_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN19custom_or_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl19custom_or_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN19custom_or_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_and_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl20custom_and_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN20custom_and_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN30custom_lessthanequal_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl30custom_lessthanequal_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN30custom_lessthanequal_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN33custom_greaterthanequal_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl33custom_greaterthanequal_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN33custom_greaterthanequal_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN25custom_lessthan_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl25custom_lessthan_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN25custom_lessthan_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN28custom_greaterthan_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl28custom_greaterthan_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN28custom_greaterthan_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN25custom_notequal_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl25custom_notequal_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN25custom_notequal_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN22custom_equal_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl22custom_equal_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN22custom_equal_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_mod_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl20custom_mod_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN20custom_mod_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN23custom_divide_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl23custom_divide_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN23custom_divide_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN25custom_multiply_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl25custom_multiply_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN25custom_multiply_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_sub_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl20custom_sub_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN20custom_sub_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN20custom_add_constantsIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl20custom_add_constantsIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN20custom_add_constantsIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN10custom_twoIlE8do_shiftEl(i64 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i64, align 8
  store i64 %input, i64* %input.addr, align 8
  ret i64 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIl10custom_twoIlEEvT_(i64 %result) #0 comdat {
entry:
  %result.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i64
  %call = call i64 @_ZN10custom_twoIlE8do_shiftEl(i64 %conv)
  %mul = mul nsw i64 8000, %call
  store i64 %mul, i64* %temp, align 8
  %call1 = call zeroext i1 @_Z15tolerance_equalIlEbRT_S1_(i64* dereferenceable(8) %result.addr, i64* dereferenceable(8) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_xorIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %xor = xor i32 %0, 15
  %xor1 = xor i32 %xor, 30
  %xor2 = xor i32 %xor1, 31
  %xor3 = xor i32 %xor2, 63
  ret i32 %xor3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj28custom_multiple_constant_xorIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_xorIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %a, i32* dereferenceable(4) %b) #5 comdat {
entry:
  %a.addr = alloca i32*, align 8
  %b.addr = alloca i32*, align 8
  store i32* %a, i32** %a.addr, align 8
  store i32* %b, i32** %b.addr, align 8
  %0 = load i32*, i32** %a.addr, align 8
  %1 = load i32, i32* %0, align 4
  %2 = load i32*, i32** %b.addr, align 8
  %3 = load i32, i32* %2, align 4
  %cmp = icmp eq i32 %1, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_xorIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %xor = xor i32 %0, 10
  ret i32 %xor
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj19custom_constant_xorIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN19custom_constant_xorIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN27custom_multiple_constant_orIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %or = or i32 %0, 15
  %or1 = or i32 %or, 30
  %or2 = or i32 %or1, 31
  %or3 = or i32 %or2, 63
  ret i32 %or3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj27custom_multiple_constant_orIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN27custom_multiple_constant_orIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN18custom_constant_orIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %or = or i32 %0, 10
  ret i32 %or
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj18custom_constant_orIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN18custom_constant_orIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_andIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %and = and i32 %0, 15
  %and1 = and i32 %and, 30
  %and2 = and i32 %and1, 31
  %and3 = and i32 %and2, 63
  ret i32 %and3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj28custom_multiple_constant_andIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_andIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_andIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %and = and i32 %0, 10
  ret i32 %and
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj19custom_constant_andIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN19custom_constant_andIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN30custom_multiple_constant_mixedIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add i32 %0, 2
  %sub = sub i32 %add, 2
  ret i32 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj30custom_multiple_constant_mixedIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN30custom_multiple_constant_mixedIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN32custom_multiple_constant_divide2IjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add i32 %0, 2
  ret i32 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj32custom_multiple_constant_divide2IjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN32custom_multiple_constant_divide2IjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN31custom_multiple_constant_divideIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %div = udiv i32 %0, 2
  %div1 = udiv i32 %div, 3
  %div2 = udiv i32 %div1, 4
  %div3 = udiv i32 %div2, 5
  ret i32 %div3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj31custom_multiple_constant_divideIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN31custom_multiple_constant_divideIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN22custom_constant_divideIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %div = udiv i32 %0, 5
  ret i32 %div
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj22custom_constant_divideIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN22custom_constant_divideIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN34custom_multiple_constant_multiply2IjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add i32 %0, 120
  ret i32 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj34custom_multiple_constant_multiply2IjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN34custom_multiple_constant_multiply2IjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN33custom_multiple_constant_multiplyIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %mul = mul i32 %0, 2
  %mul1 = mul i32 %mul, 3
  %mul2 = mul i32 %mul1, 4
  %mul3 = mul i32 %mul2, 5
  ret i32 %mul3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj33custom_multiple_constant_multiplyIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN33custom_multiple_constant_multiplyIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN24custom_constant_multiplyIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %mul = mul i32 %0, 120
  ret i32 %mul
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj24custom_constant_multiplyIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN24custom_constant_multiplyIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_subIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %sub = sub i32 %0, 1
  %sub1 = sub i32 %sub, 2
  %sub2 = sub i32 %sub1, 3
  %sub3 = sub i32 %sub2, 4
  ret i32 %sub3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj28custom_multiple_constant_subIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_subIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_subIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %sub = sub i32 %0, 10
  ret i32 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj19custom_constant_subIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN19custom_constant_subIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_addIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add i32 %0, 1
  %add1 = add i32 %add, 2
  %add2 = add i32 %add1, 3
  %add3 = add i32 %add2, 4
  ret i32 %add3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj28custom_multiple_constant_addIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_addIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_addIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add i32 %0, 10
  ret i32 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj19custom_constant_addIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN19custom_constant_addIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_xor_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj20custom_xor_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN20custom_xor_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_or_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj19custom_or_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN19custom_or_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_and_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj20custom_and_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN20custom_and_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN30custom_lessthanequal_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj30custom_lessthanequal_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN30custom_lessthanequal_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN33custom_greaterthanequal_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj33custom_greaterthanequal_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN33custom_greaterthanequal_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN25custom_lessthan_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj25custom_lessthan_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN25custom_lessthan_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_greaterthan_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj28custom_greaterthan_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN28custom_greaterthan_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN25custom_notequal_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj25custom_notequal_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN25custom_notequal_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN22custom_equal_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj22custom_equal_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN22custom_equal_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_mod_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj20custom_mod_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN20custom_mod_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN23custom_divide_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj23custom_divide_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN23custom_divide_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN25custom_multiply_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj25custom_multiply_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN25custom_multiply_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_sub_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj20custom_sub_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN20custom_sub_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_add_constantsIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj20custom_add_constantsIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN20custom_add_constantsIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN10custom_twoIjE8do_shiftEj(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIj10custom_twoIjEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i32
  %call = call i32 @_ZN10custom_twoIjE8do_shiftEj(i32 %conv)
  %mul = mul i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIjEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_xorIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %xor = xor i32 %0, 15
  %xor1 = xor i32 %xor, 30
  %xor2 = xor i32 %xor1, 31
  %xor3 = xor i32 %xor2, 63
  ret i32 %xor3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi28custom_multiple_constant_xorIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_xorIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %a, i32* dereferenceable(4) %b) #5 comdat {
entry:
  %a.addr = alloca i32*, align 8
  %b.addr = alloca i32*, align 8
  store i32* %a, i32** %a.addr, align 8
  store i32* %b, i32** %b.addr, align 8
  %0 = load i32*, i32** %a.addr, align 8
  %1 = load i32, i32* %0, align 4
  %2 = load i32*, i32** %b.addr, align 8
  %3 = load i32, i32* %2, align 4
  %cmp = icmp eq i32 %1, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_xorIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %xor = xor i32 %0, 10
  ret i32 %xor
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi19custom_constant_xorIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN19custom_constant_xorIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN27custom_multiple_constant_orIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %or = or i32 %0, 15
  %or1 = or i32 %or, 30
  %or2 = or i32 %or1, 31
  %or3 = or i32 %or2, 63
  ret i32 %or3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi27custom_multiple_constant_orIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN27custom_multiple_constant_orIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN18custom_constant_orIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %or = or i32 %0, 10
  ret i32 %or
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi18custom_constant_orIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN18custom_constant_orIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_andIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %and = and i32 %0, 15
  %and1 = and i32 %and, 30
  %and2 = and i32 %and1, 31
  %and3 = and i32 %and2, 63
  ret i32 %and3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi28custom_multiple_constant_andIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_andIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_andIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %and = and i32 %0, 10
  ret i32 %and
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi19custom_constant_andIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN19custom_constant_andIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN30custom_multiple_constant_mixedIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add nsw i32 %0, 2
  %sub = sub nsw i32 %add, 2
  ret i32 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi30custom_multiple_constant_mixedIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN30custom_multiple_constant_mixedIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN32custom_multiple_constant_divide2IiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add nsw i32 %0, 2
  ret i32 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi32custom_multiple_constant_divide2IiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN32custom_multiple_constant_divide2IiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN31custom_multiple_constant_divideIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %div = sdiv i32 %0, 2
  %div1 = sdiv i32 %div, 3
  %div2 = sdiv i32 %div1, 4
  %div3 = sdiv i32 %div2, 5
  ret i32 %div3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi31custom_multiple_constant_divideIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN31custom_multiple_constant_divideIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN22custom_constant_divideIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %div = sdiv i32 %0, 5
  ret i32 %div
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi22custom_constant_divideIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN22custom_constant_divideIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN34custom_multiple_constant_multiply2IiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add nsw i32 %0, 120
  ret i32 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi34custom_multiple_constant_multiply2IiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN34custom_multiple_constant_multiply2IiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN33custom_multiple_constant_multiplyIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %mul = mul nsw i32 %0, 2
  %mul1 = mul nsw i32 %mul, 3
  %mul2 = mul nsw i32 %mul1, 4
  %mul3 = mul nsw i32 %mul2, 5
  ret i32 %mul3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi33custom_multiple_constant_multiplyIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN33custom_multiple_constant_multiplyIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN24custom_constant_multiplyIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %mul = mul nsw i32 %0, 120
  ret i32 %mul
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi24custom_constant_multiplyIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN24custom_constant_multiplyIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_subIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %sub = sub nsw i32 %0, 1
  %sub1 = sub nsw i32 %sub, 2
  %sub2 = sub nsw i32 %sub1, 3
  %sub3 = sub nsw i32 %sub2, 4
  ret i32 %sub3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi28custom_multiple_constant_subIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_subIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_subIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %sub = sub nsw i32 %0, 10
  ret i32 %sub
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi19custom_constant_subIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN19custom_constant_subIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_multiple_constant_addIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add nsw i32 %0, 1
  %add1 = add nsw i32 %add, 2
  %add2 = add nsw i32 %add1, 3
  %add3 = add nsw i32 %add2, 4
  ret i32 %add3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi28custom_multiple_constant_addIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN28custom_multiple_constant_addIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_constant_addIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  %0 = load i32, i32* %input.addr, align 4
  %add = add nsw i32 %0, 10
  ret i32 %add
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi19custom_constant_addIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN19custom_constant_addIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_xor_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi20custom_xor_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN20custom_xor_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN19custom_or_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi19custom_or_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN19custom_or_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_and_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi20custom_and_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN20custom_and_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN30custom_lessthanequal_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi30custom_lessthanequal_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN30custom_lessthanequal_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN33custom_greaterthanequal_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi33custom_greaterthanequal_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN33custom_greaterthanequal_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN25custom_lessthan_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi25custom_lessthan_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN25custom_lessthan_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN28custom_greaterthan_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi28custom_greaterthan_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN28custom_greaterthan_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN25custom_notequal_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi25custom_notequal_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN25custom_notequal_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN22custom_equal_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi22custom_equal_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN22custom_equal_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_mod_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi20custom_mod_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN20custom_mod_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN23custom_divide_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi23custom_divide_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN23custom_divide_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN25custom_multiply_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi25custom_multiply_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN25custom_multiply_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_sub_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi20custom_sub_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN20custom_sub_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN20custom_add_constantsIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi20custom_add_constantsIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN20custom_add_constantsIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZN10custom_twoIiE8do_shiftEi(i32 %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i32, align 4
  store i32 %input, i32* %input.addr, align 4
  ret i32 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIi10custom_twoIiEEvT_(i32 %result) #0 comdat {
entry:
  %result.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i32
  %call = call i32 @_ZN10custom_twoIiE8do_shiftEi(i32 %conv)
  %mul = mul nsw i32 8000, %call
  store i32 %mul, i32* %temp, align 4
  %call1 = call zeroext i1 @_Z15tolerance_equalIiEbRT_S1_(i32* dereferenceable(4) %result.addr, i32* dereferenceable(4) %temp)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN28custom_multiple_constant_xorItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %xor = xor i32 %conv, 15
  %xor1 = xor i32 %xor, 30
  %xor2 = xor i32 %xor1, 31
  %xor3 = xor i32 %xor2, 63
  %conv4 = trunc i32 %xor3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt28custom_multiple_constant_xorItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN28custom_multiple_constant_xorItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %a, i16* dereferenceable(2) %b) #5 comdat {
entry:
  %a.addr = alloca i16*, align 8
  %b.addr = alloca i16*, align 8
  %diff = alloca i16, align 2
  store i16* %a, i16** %a.addr, align 8
  store i16* %b, i16** %b.addr, align 8
  %0 = load i16*, i16** %a.addr, align 8
  %1 = load i16, i16* %0, align 2
  %conv = zext i16 %1 to i32
  %2 = load i16*, i16** %b.addr, align 8
  %3 = load i16, i16* %2, align 2
  %conv1 = zext i16 %3 to i32
  %sub = sub nsw i32 %conv, %conv1
  %conv2 = trunc i32 %sub to i16
  store i16 %conv2, i16* %diff, align 2
  %4 = load i16, i16* %diff, align 2
  %conv3 = zext i16 %4 to i32
  %call = call i32 @abs(i32 %conv3) #8
  %conv4 = sitofp i32 %call to double
  %cmp = fcmp olt double %conv4, 1.000000e-06
  ret i1 %cmp
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN19custom_constant_xorItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %xor = xor i32 %conv, 10
  %conv1 = trunc i32 %xor to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt19custom_constant_xorItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN19custom_constant_xorItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN27custom_multiple_constant_orItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %or = or i32 %conv, 15
  %or1 = or i32 %or, 30
  %or2 = or i32 %or1, 31
  %or3 = or i32 %or2, 63
  %conv4 = trunc i32 %or3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt27custom_multiple_constant_orItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN27custom_multiple_constant_orItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN18custom_constant_orItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %or = or i32 %conv, 10
  %conv1 = trunc i32 %or to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt18custom_constant_orItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN18custom_constant_orItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN28custom_multiple_constant_andItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 15
  %and1 = and i32 %and, 30
  %and2 = and i32 %and1, 31
  %and3 = and i32 %and2, 63
  %conv4 = trunc i32 %and3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt28custom_multiple_constant_andItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN28custom_multiple_constant_andItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN19custom_constant_andItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %and = and i32 %conv, 10
  %conv1 = trunc i32 %and to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt19custom_constant_andItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN19custom_constant_andItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN30custom_multiple_constant_mixedItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %add = add nsw i32 %conv, 2
  %sub = sub nsw i32 %add, 2
  %conv1 = trunc i32 %sub to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt30custom_multiple_constant_mixedItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN30custom_multiple_constant_mixedItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN32custom_multiple_constant_divide2ItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %add = add nsw i32 %conv, 2
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt32custom_multiple_constant_divide2ItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN32custom_multiple_constant_divide2ItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN31custom_multiple_constant_divideItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %div = sdiv i32 %conv, 2
  %div1 = sdiv i32 %div, 3
  %div2 = sdiv i32 %div1, 4
  %div3 = sdiv i32 %div2, 5
  %conv4 = trunc i32 %div3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt31custom_multiple_constant_divideItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN31custom_multiple_constant_divideItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN22custom_constant_divideItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %div = sdiv i32 %conv, 5
  %conv1 = trunc i32 %div to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt22custom_constant_divideItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN22custom_constant_divideItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN34custom_multiple_constant_multiply2ItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %add = add nsw i32 %conv, 120
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt34custom_multiple_constant_multiply2ItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN34custom_multiple_constant_multiply2ItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN33custom_multiple_constant_multiplyItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, 2
  %mul1 = mul nsw i32 %mul, 3
  %mul2 = mul nsw i32 %mul1, 4
  %mul3 = mul nsw i32 %mul2, 5
  %conv4 = trunc i32 %mul3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt33custom_multiple_constant_multiplyItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN33custom_multiple_constant_multiplyItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN24custom_constant_multiplyItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %mul = mul nsw i32 %conv, 120
  %conv1 = trunc i32 %mul to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt24custom_constant_multiplyItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN24custom_constant_multiplyItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN28custom_multiple_constant_subItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %sub = sub nsw i32 %conv, 1
  %sub1 = sub nsw i32 %sub, 2
  %sub2 = sub nsw i32 %sub1, 3
  %sub3 = sub nsw i32 %sub2, 4
  %conv4 = trunc i32 %sub3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt28custom_multiple_constant_subItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN28custom_multiple_constant_subItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN19custom_constant_subItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %sub = sub nsw i32 %conv, 10
  %conv1 = trunc i32 %sub to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt19custom_constant_subItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN19custom_constant_subItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN28custom_multiple_constant_addItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %add = add nsw i32 %conv, 1
  %add1 = add nsw i32 %add, 2
  %add2 = add nsw i32 %add1, 3
  %add3 = add nsw i32 %add2, 4
  %conv4 = trunc i32 %add3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt28custom_multiple_constant_addItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN28custom_multiple_constant_addItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN19custom_constant_addItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = zext i16 %0 to i32
  %add = add nsw i32 %conv, 10
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt19custom_constant_addItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN19custom_constant_addItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN20custom_xor_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt20custom_xor_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN20custom_xor_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN19custom_or_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt19custom_or_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN19custom_or_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN20custom_and_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt20custom_and_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN20custom_and_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN30custom_lessthanequal_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt30custom_lessthanequal_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN30custom_lessthanequal_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN33custom_greaterthanequal_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt33custom_greaterthanequal_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN33custom_greaterthanequal_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN25custom_lessthan_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt25custom_lessthan_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN25custom_lessthan_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN28custom_greaterthan_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt28custom_greaterthan_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN28custom_greaterthan_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN25custom_notequal_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt25custom_notequal_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN25custom_notequal_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN22custom_equal_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt22custom_equal_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN22custom_equal_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN20custom_mod_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt20custom_mod_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN20custom_mod_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN23custom_divide_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt23custom_divide_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN23custom_divide_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN25custom_multiply_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt25custom_multiply_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN25custom_multiply_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN20custom_sub_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt20custom_sub_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN20custom_sub_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN20custom_add_constantsItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt20custom_add_constantsItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN20custom_add_constantsItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i16 @_ZN10custom_twoItE8do_shiftEt(i16 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIt10custom_twoItEEvT_(i16 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i16
  %call = call zeroext i16 @_ZN10custom_twoItE8do_shiftEt(i16 zeroext %conv)
  %conv1 = zext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalItEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN28custom_multiple_constant_xorIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %xor = xor i32 %conv, 15
  %xor1 = xor i32 %xor, 30
  %xor2 = xor i32 %xor1, 31
  %xor3 = xor i32 %xor2, 63
  %conv4 = trunc i32 %xor3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs28custom_multiple_constant_xorIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN28custom_multiple_constant_xorIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %a, i16* dereferenceable(2) %b) #5 comdat {
entry:
  %a.addr = alloca i16*, align 8
  %b.addr = alloca i16*, align 8
  %diff = alloca i16, align 2
  store i16* %a, i16** %a.addr, align 8
  store i16* %b, i16** %b.addr, align 8
  %0 = load i16*, i16** %a.addr, align 8
  %1 = load i16, i16* %0, align 2
  %conv = sext i16 %1 to i32
  %2 = load i16*, i16** %b.addr, align 8
  %3 = load i16, i16* %2, align 2
  %conv1 = sext i16 %3 to i32
  %sub = sub nsw i32 %conv, %conv1
  %conv2 = trunc i32 %sub to i16
  store i16 %conv2, i16* %diff, align 2
  %4 = load i16, i16* %diff, align 2
  %conv3 = sext i16 %4 to i32
  %call = call i32 @abs(i32 %conv3) #8
  %conv4 = sitofp i32 %call to double
  %cmp = fcmp olt double %conv4, 1.000000e-06
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN19custom_constant_xorIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %xor = xor i32 %conv, 10
  %conv1 = trunc i32 %xor to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs19custom_constant_xorIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN19custom_constant_xorIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN27custom_multiple_constant_orIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %or = or i32 %conv, 15
  %or1 = or i32 %or, 30
  %or2 = or i32 %or1, 31
  %or3 = or i32 %or2, 63
  %conv4 = trunc i32 %or3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs27custom_multiple_constant_orIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN27custom_multiple_constant_orIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN18custom_constant_orIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %or = or i32 %conv, 10
  %conv1 = trunc i32 %or to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs18custom_constant_orIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN18custom_constant_orIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN28custom_multiple_constant_andIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %and = and i32 %conv, 15
  %and1 = and i32 %and, 30
  %and2 = and i32 %and1, 31
  %and3 = and i32 %and2, 63
  %conv4 = trunc i32 %and3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs28custom_multiple_constant_andIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN28custom_multiple_constant_andIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN19custom_constant_andIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %and = and i32 %conv, 10
  %conv1 = trunc i32 %and to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs19custom_constant_andIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN19custom_constant_andIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN30custom_multiple_constant_mixedIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %add = add nsw i32 %conv, 2
  %sub = sub nsw i32 %add, 2
  %conv1 = trunc i32 %sub to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs30custom_multiple_constant_mixedIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN30custom_multiple_constant_mixedIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN32custom_multiple_constant_divide2IsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %add = add nsw i32 %conv, 2
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs32custom_multiple_constant_divide2IsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN32custom_multiple_constant_divide2IsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN31custom_multiple_constant_divideIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %div = sdiv i32 %conv, 2
  %div1 = sdiv i32 %div, 3
  %div2 = sdiv i32 %div1, 4
  %div3 = sdiv i32 %div2, 5
  %conv4 = trunc i32 %div3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs31custom_multiple_constant_divideIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN31custom_multiple_constant_divideIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN22custom_constant_divideIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %div = sdiv i32 %conv, 5
  %conv1 = trunc i32 %div to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs22custom_constant_divideIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN22custom_constant_divideIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN34custom_multiple_constant_multiply2IsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %add = add nsw i32 %conv, 120
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs34custom_multiple_constant_multiply2IsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN34custom_multiple_constant_multiply2IsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN33custom_multiple_constant_multiplyIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %mul = mul nsw i32 %conv, 2
  %mul1 = mul nsw i32 %mul, 3
  %mul2 = mul nsw i32 %mul1, 4
  %mul3 = mul nsw i32 %mul2, 5
  %conv4 = trunc i32 %mul3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs33custom_multiple_constant_multiplyIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN33custom_multiple_constant_multiplyIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN24custom_constant_multiplyIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %mul = mul nsw i32 %conv, 120
  %conv1 = trunc i32 %mul to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs24custom_constant_multiplyIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN24custom_constant_multiplyIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN28custom_multiple_constant_subIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %sub = sub nsw i32 %conv, 1
  %sub1 = sub nsw i32 %sub, 2
  %sub2 = sub nsw i32 %sub1, 3
  %sub3 = sub nsw i32 %sub2, 4
  %conv4 = trunc i32 %sub3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs28custom_multiple_constant_subIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN28custom_multiple_constant_subIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN19custom_constant_subIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %sub = sub nsw i32 %conv, 10
  %conv1 = trunc i32 %sub to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs19custom_constant_subIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN19custom_constant_subIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN28custom_multiple_constant_addIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %add = add nsw i32 %conv, 1
  %add1 = add nsw i32 %add, 2
  %add2 = add nsw i32 %add1, 3
  %add3 = add nsw i32 %add2, 4
  %conv4 = trunc i32 %add3 to i16
  ret i16 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs28custom_multiple_constant_addIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN28custom_multiple_constant_addIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN19custom_constant_addIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  %0 = load i16, i16* %input.addr, align 2
  %conv = sext i16 %0 to i32
  %add = add nsw i32 %conv, 10
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs19custom_constant_addIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN19custom_constant_addIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN20custom_xor_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs20custom_xor_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN20custom_xor_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN19custom_or_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs19custom_or_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN19custom_or_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN20custom_and_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs20custom_and_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN20custom_and_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN30custom_lessthanequal_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs30custom_lessthanequal_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN30custom_lessthanequal_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN33custom_greaterthanequal_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs33custom_greaterthanequal_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN33custom_greaterthanequal_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN25custom_lessthan_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs25custom_lessthan_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN25custom_lessthan_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN28custom_greaterthan_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs28custom_greaterthan_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN28custom_greaterthan_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN25custom_notequal_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs25custom_notequal_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN25custom_notequal_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN22custom_equal_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs22custom_equal_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN22custom_equal_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN20custom_mod_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs20custom_mod_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN20custom_mod_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN23custom_divide_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs23custom_divide_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN23custom_divide_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN25custom_multiply_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs25custom_multiply_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN25custom_multiply_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN20custom_sub_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs20custom_sub_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN20custom_sub_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN20custom_add_constantsIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs20custom_add_constantsIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN20custom_add_constantsIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i16 @_ZN10custom_twoIsE8do_shiftEs(i16 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i16, align 2
  store i16 %input, i16* %input.addr, align 2
  ret i16 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIs10custom_twoIsEEvT_(i16 signext %result) #0 comdat {
entry:
  %result.addr = alloca i16, align 2
  %temp = alloca i16, align 2
  store i16 %result, i16* %result.addr, align 2
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i16
  %call = call signext i16 @_ZN10custom_twoIsE8do_shiftEs(i16 signext %conv)
  %conv1 = sext i16 %call to i32
  %mul = mul nsw i32 8000, %conv1
  %conv2 = trunc i32 %mul to i16
  store i16 %conv2, i16* %temp, align 2
  %call3 = call zeroext i1 @_Z15tolerance_equalIsEbRT_S1_(i16* dereferenceable(2) %result.addr, i16* dereferenceable(2) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN28custom_multiple_constant_xorIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %xor = xor i32 %conv, 15
  %xor1 = xor i32 %xor, 30
  %xor2 = xor i32 %xor1, 31
  %xor3 = xor i32 %xor2, 63
  %conv4 = trunc i32 %xor3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh28custom_multiple_constant_xorIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN28custom_multiple_constant_xorIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %a, i8* dereferenceable(1) %b) #5 comdat {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %diff = alloca i8, align 1
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = zext i8 %1 to i32
  %2 = load i8*, i8** %b.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv1 = zext i8 %3 to i32
  %sub = sub nsw i32 %conv, %conv1
  %conv2 = trunc i32 %sub to i8
  store i8 %conv2, i8* %diff, align 1
  %4 = load i8, i8* %diff, align 1
  %conv3 = zext i8 %4 to i32
  %call = call i32 @abs(i32 %conv3) #8
  %conv4 = sitofp i32 %call to double
  %cmp = fcmp olt double %conv4, 1.000000e-06
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN19custom_constant_xorIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %xor = xor i32 %conv, 10
  %conv1 = trunc i32 %xor to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh19custom_constant_xorIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN19custom_constant_xorIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN27custom_multiple_constant_orIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %or = or i32 %conv, 15
  %or1 = or i32 %or, 30
  %or2 = or i32 %or1, 31
  %or3 = or i32 %or2, 63
  %conv4 = trunc i32 %or3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh27custom_multiple_constant_orIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN27custom_multiple_constant_orIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN18custom_constant_orIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %or = or i32 %conv, 10
  %conv1 = trunc i32 %or to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh18custom_constant_orIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN18custom_constant_orIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN28custom_multiple_constant_andIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 15
  %and1 = and i32 %and, 30
  %and2 = and i32 %and1, 31
  %and3 = and i32 %and2, 63
  %conv4 = trunc i32 %and3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh28custom_multiple_constant_andIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN28custom_multiple_constant_andIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN19custom_constant_andIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 10
  %conv1 = trunc i32 %and to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh19custom_constant_andIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN19custom_constant_andIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN30custom_multiple_constant_mixedIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 2
  %sub = sub nsw i32 %add, 2
  %conv1 = trunc i32 %sub to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh30custom_multiple_constant_mixedIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN30custom_multiple_constant_mixedIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN32custom_multiple_constant_divide2IhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 2
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh32custom_multiple_constant_divide2IhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN32custom_multiple_constant_divide2IhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN31custom_multiple_constant_divideIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %div = sdiv i32 %conv, 2
  %div1 = sdiv i32 %div, 3
  %div2 = sdiv i32 %div1, 4
  %div3 = sdiv i32 %div2, 5
  %conv4 = trunc i32 %div3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh31custom_multiple_constant_divideIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN31custom_multiple_constant_divideIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN22custom_constant_divideIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %div = sdiv i32 %conv, 5
  %conv1 = trunc i32 %div to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh22custom_constant_divideIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN22custom_constant_divideIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN34custom_multiple_constant_multiply2IhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 120
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh34custom_multiple_constant_multiply2IhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN34custom_multiple_constant_multiply2IhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN33custom_multiple_constant_multiplyIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %mul = mul nsw i32 %conv, 2
  %mul1 = mul nsw i32 %mul, 3
  %mul2 = mul nsw i32 %mul1, 4
  %mul3 = mul nsw i32 %mul2, 5
  %conv4 = trunc i32 %mul3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh33custom_multiple_constant_multiplyIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN33custom_multiple_constant_multiplyIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN24custom_constant_multiplyIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %mul = mul nsw i32 %conv, 120
  %conv1 = trunc i32 %mul to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh24custom_constant_multiplyIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN24custom_constant_multiplyIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN28custom_multiple_constant_subIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %sub = sub nsw i32 %conv, 1
  %sub1 = sub nsw i32 %sub, 2
  %sub2 = sub nsw i32 %sub1, 3
  %sub3 = sub nsw i32 %sub2, 4
  %conv4 = trunc i32 %sub3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh28custom_multiple_constant_subIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN28custom_multiple_constant_subIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN19custom_constant_subIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %sub = sub nsw i32 %conv, 10
  %conv1 = trunc i32 %sub to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh19custom_constant_subIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN19custom_constant_subIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN28custom_multiple_constant_addIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 1
  %add1 = add nsw i32 %add, 2
  %add2 = add nsw i32 %add1, 3
  %add3 = add nsw i32 %add2, 4
  %conv4 = trunc i32 %add3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh28custom_multiple_constant_addIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN28custom_multiple_constant_addIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN19custom_constant_addIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 10
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh19custom_constant_addIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN19custom_constant_addIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN20custom_xor_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh20custom_xor_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN20custom_xor_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN19custom_or_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh19custom_or_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN19custom_or_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN20custom_and_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh20custom_and_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN20custom_and_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN30custom_lessthanequal_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh30custom_lessthanequal_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN30custom_lessthanequal_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN33custom_greaterthanequal_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh33custom_greaterthanequal_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN33custom_greaterthanequal_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN25custom_lessthan_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh25custom_lessthan_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN25custom_lessthan_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN28custom_greaterthan_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh28custom_greaterthan_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN28custom_greaterthan_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN25custom_notequal_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh25custom_notequal_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN25custom_notequal_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN22custom_equal_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh22custom_equal_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN22custom_equal_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN20custom_mod_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh20custom_mod_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN20custom_mod_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN23custom_divide_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh23custom_divide_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN23custom_divide_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN25custom_multiply_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh25custom_multiply_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN25custom_multiply_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN20custom_sub_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh20custom_sub_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN20custom_sub_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN20custom_add_constantsIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh20custom_add_constantsIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN20custom_add_constantsIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i8 @_ZN10custom_twoIhE8do_shiftEh(i8 zeroext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIh10custom_twoIhEEvT_(i8 zeroext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptoui double %0 to i8
  %call = call zeroext i8 @_ZN10custom_twoIhE8do_shiftEh(i8 zeroext %conv)
  %conv1 = zext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIhEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN28custom_multiple_constant_xorIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %xor = xor i32 %conv, 15
  %xor1 = xor i32 %xor, 30
  %xor2 = xor i32 %xor1, 31
  %xor3 = xor i32 %xor2, 63
  %conv4 = trunc i32 %xor3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa28custom_multiple_constant_xorIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN28custom_multiple_constant_xorIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %a, i8* dereferenceable(1) %b) #5 comdat {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %diff = alloca i8, align 1
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %2 = load i8*, i8** %b.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv1 = sext i8 %3 to i32
  %sub = sub nsw i32 %conv, %conv1
  %conv2 = trunc i32 %sub to i8
  store i8 %conv2, i8* %diff, align 1
  %4 = load i8, i8* %diff, align 1
  %conv3 = sext i8 %4 to i32
  %call = call i32 @abs(i32 %conv3) #8
  %conv4 = sitofp i32 %call to double
  %cmp = fcmp olt double %conv4, 1.000000e-06
  ret i1 %cmp
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN19custom_constant_xorIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %xor = xor i32 %conv, 10
  %conv1 = trunc i32 %xor to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa19custom_constant_xorIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN19custom_constant_xorIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN27custom_multiple_constant_orIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %or = or i32 %conv, 15
  %or1 = or i32 %or, 30
  %or2 = or i32 %or1, 31
  %or3 = or i32 %or2, 63
  %conv4 = trunc i32 %or3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa27custom_multiple_constant_orIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN27custom_multiple_constant_orIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN18custom_constant_orIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %or = or i32 %conv, 10
  %conv1 = trunc i32 %or to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa18custom_constant_orIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN18custom_constant_orIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN28custom_multiple_constant_andIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %and = and i32 %conv, 15
  %and1 = and i32 %and, 30
  %and2 = and i32 %and1, 31
  %and3 = and i32 %and2, 63
  %conv4 = trunc i32 %and3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa28custom_multiple_constant_andIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN28custom_multiple_constant_andIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN19custom_constant_andIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %and = and i32 %conv, 10
  %conv1 = trunc i32 %and to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa19custom_constant_andIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN19custom_constant_andIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN30custom_multiple_constant_mixedIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %add = add nsw i32 %conv, 2
  %sub = sub nsw i32 %add, 2
  %conv1 = trunc i32 %sub to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa30custom_multiple_constant_mixedIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN30custom_multiple_constant_mixedIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN32custom_multiple_constant_divide2IaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %add = add nsw i32 %conv, 2
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa32custom_multiple_constant_divide2IaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN32custom_multiple_constant_divide2IaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN31custom_multiple_constant_divideIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %div = sdiv i32 %conv, 2
  %div1 = sdiv i32 %div, 3
  %div2 = sdiv i32 %div1, 4
  %div3 = sdiv i32 %div2, 5
  %conv4 = trunc i32 %div3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa31custom_multiple_constant_divideIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN31custom_multiple_constant_divideIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN22custom_constant_divideIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %div = sdiv i32 %conv, 5
  %conv1 = trunc i32 %div to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa22custom_constant_divideIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN22custom_constant_divideIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN34custom_multiple_constant_multiply2IaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %add = add nsw i32 %conv, 120
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa34custom_multiple_constant_multiply2IaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN34custom_multiple_constant_multiply2IaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN33custom_multiple_constant_multiplyIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %mul = mul nsw i32 %conv, 2
  %mul1 = mul nsw i32 %mul, 3
  %mul2 = mul nsw i32 %mul1, 4
  %mul3 = mul nsw i32 %mul2, 5
  %conv4 = trunc i32 %mul3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa33custom_multiple_constant_multiplyIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN33custom_multiple_constant_multiplyIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN24custom_constant_multiplyIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %mul = mul nsw i32 %conv, 120
  %conv1 = trunc i32 %mul to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa24custom_constant_multiplyIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN24custom_constant_multiplyIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN28custom_multiple_constant_subIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 1
  %sub1 = sub nsw i32 %sub, 2
  %sub2 = sub nsw i32 %sub1, 3
  %sub3 = sub nsw i32 %sub2, 4
  %conv4 = trunc i32 %sub3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa28custom_multiple_constant_subIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN28custom_multiple_constant_subIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN19custom_constant_subIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 10
  %conv1 = trunc i32 %sub to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa19custom_constant_subIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN19custom_constant_subIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN28custom_multiple_constant_addIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %add = add nsw i32 %conv, 1
  %add1 = add nsw i32 %add, 2
  %add2 = add nsw i32 %add1, 3
  %add3 = add nsw i32 %add2, 4
  %conv4 = trunc i32 %add3 to i8
  ret i8 %conv4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa28custom_multiple_constant_addIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN28custom_multiple_constant_addIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN19custom_constant_addIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  %0 = load i8, i8* %input.addr, align 1
  %conv = sext i8 %0 to i32
  %add = add nsw i32 %conv, 10
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa19custom_constant_addIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN19custom_constant_addIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN20custom_xor_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa20custom_xor_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN20custom_xor_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN19custom_or_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 31
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa19custom_or_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN19custom_or_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN20custom_and_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa20custom_and_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN20custom_and_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN30custom_lessthanequal_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa30custom_lessthanequal_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN30custom_lessthanequal_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN33custom_greaterthanequal_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa33custom_greaterthanequal_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN33custom_greaterthanequal_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN25custom_lessthan_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa25custom_lessthan_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN25custom_lessthan_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN28custom_greaterthan_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa28custom_greaterthan_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN28custom_greaterthan_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN25custom_notequal_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa25custom_notequal_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN25custom_notequal_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN22custom_equal_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 0
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa22custom_equal_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN22custom_equal_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN20custom_mod_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa20custom_mod_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN20custom_mod_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN23custom_divide_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa23custom_divide_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN23custom_divide_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN25custom_multiply_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 6
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa25custom_multiply_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN25custom_multiply_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN20custom_sub_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 1
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa20custom_sub_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN20custom_sub_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN20custom_add_constantsIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa20custom_add_constantsIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN20custom_add_constantsIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr signext i8 @_ZN10custom_twoIaE8do_shiftEa(i8 signext %input) #5 comdat align 2 {
entry:
  %input.addr = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  ret i8 2
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z17check_shifted_sumIa10custom_twoIaEEvT_(i8 signext %result) #0 comdat {
entry:
  %result.addr = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8 %result, i8* %result.addr, align 1
  %0 = load double, double* @init_value, align 8
  %conv = fptosi double %0 to i8
  %call = call signext i8 @_ZN10custom_twoIaE8do_shiftEa(i8 signext %conv)
  %conv1 = sext i8 %call to i32
  %mul = mul nsw i32 64, %conv1
  %conv2 = trunc i32 %mul to i8
  store i8 %conv2, i8* %temp, align 1
  %call3 = call zeroext i1 @_Z15tolerance_equalIaEbRT_S1_(i8* dereferenceable(1) %result.addr, i8* dereferenceable(1) %temp)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @current_test, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.299, i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
