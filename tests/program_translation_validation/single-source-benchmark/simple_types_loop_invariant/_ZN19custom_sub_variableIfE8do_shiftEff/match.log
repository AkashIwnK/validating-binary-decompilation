Writing '/tmp/tmpv580dv4n.dot'...
Writing '/tmp/tmpv580dv4n.dot':Done

Reading LLVM: /tmp/tmp209w1dvj-query.ll
Extracting function [_ZN19custom_sub_variableIfE8do_shiftEff] from /tmp/tmp209w1dvj-query.ll
Dot file generated!
Writing '/tmp/tmpskpavsxo.dot'...
Writing '/tmp/tmpskpavsxo.dot':Done

Reading LLVM: /tmp/tmpm87x_ja2-target.ll
Extracting function [_ZN19custom_sub_variableIfE8do_shiftEff] from /tmp/tmpm87x_ja2-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 14 %12 = add i64 %7, -12
- 15 %13 = add i64 %10, 8
- 16 store i64 %13, i64* %3, align 8
- 17 %14 = bitcast [32 x %union.VectorReg]* %11 to \<2 x float\>*
- 18 %15 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 19 %16 = extractelement \<2 x float\> %15, i32 0
- 20 %17 = inttoptr i64 %12 to float*
- 21 store float %16, float* %17, align 4
- 22 %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 23 %19 = load i64, i64* %RBP.i, align 8
- 24 %20 = add i64 %19, -8
- 25 %21 = load i64, i64* %3, align 8
- 26 %22 = add i64 %21, 5
- 27 store i64 %22, i64* %3, align 8
- 28 %23 = bitcast %union.VectorReg* %18 to \<2 x float\>*
- 29 %24 = load \<2 x float\>, \<2 x float\>* %23, align 1
- 30 %25 = extractelement \<2 x float\> %24, i32 0
- 31 %26 = inttoptr i64 %20 to float*
- 32 store float %25, float* %26, align 4
- 33 %27 = bitcast [32 x %union.VectorReg]* %11 to i8*
- 34 %28 = load i64, i64* %RBP.i, align 8
- 35 %29 = add i64 %28, -4
- 36 %30 = load i64, i64* %3, align 8
- 37 %31 = add i64 %30, 5
- 38 store i64 %31, i64* %3, align 8
- 39 %32 = inttoptr i64 %29 to i32*
- 40 %33 = load i32, i32* %32, align 4
- 41 %34 = bitcast [32 x %union.VectorReg]* %11 to float*
- 42 %35 = bitcast [32 x %union.VectorReg]* %11 to i32*
- 43 store i32 %33, i32* %35, align 1
- 44 %36 = getelementptr inbounds i8, i8* %27, i64 4
- 45 %37 = bitcast i8* %36 to float*
- 46 store float 0.000000e+00, float* %37, align 1
- 47 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 48 %39 = bitcast i64* %38 to float*
- 49 store float 0.000000e+00, float* %39, align 1
- 50 %40 = getelementptr inbounds i8, i8* %27, i64 12
- 51 %41 = bitcast i8* %40 to float*
- 52 store float 0.000000e+00, float* %41, align 1
- 53 %42 = add i64 %28, -8
- 54 %43 = add i64 %30, 10
- 55 store i64 %43, i64* %3, align 8
- 56 %44 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 57 %45 = bitcast i64* %38 to \<2 x i32\>*
- 58 %46 = load \<2 x i32\>, \<2 x i32\>* %45, align 1
- 59 %47 = inttoptr i64 %42 to float*
- 60 %48 = load float, float* %47, align 4
- 61 %49 = extractelement \<2 x float\> %44, i32 0
- 62 %50 = fsub float %49, %48
- 63 store float %50, float* %34, align 1
- 64 %51 = bitcast \<2 x float\> %44 to \<2 x i32\>
- 65 %52 = extractelement \<2 x i32\> %51, i32 1
- 66 %53 = bitcast i8* %36 to i32*
- 67 store i32 %52, i32* %53, align 1
- 68 %54 = extractelement \<2 x i32\> %46, i32 0
- 69 %55 = bitcast i64* %38 to i32*
- 70 store i32 %54, i32* %55, align 1
- 71 %56 = extractelement \<2 x i32\> %46, i32 1
- 72 %57 = bitcast i8* %40 to i32*
- 73 store i32 %56, i32* %57, align 1
- 74 %58 = add i64 %30, 11
- 75 store i64 %58, i64* %3, align 8
- 76 %59 = load i64, i64* %6, align 8
- 77 %60 = add i64 %59, 8
- 78 %61 = inttoptr i64 %59 to i64*
- 79 %62 = load i64, i64* %61, align 8
- 80 store i64 %62, i64* %RBP.i, align 8
- 81 store i64 %60, i64* %6, align 8
- 82 %63 = add i64 %30, 12
- 83 store i64 %63, i64* %3, align 8
- 84 %64 = inttoptr i64 %60 to i64*
- 85 %65 = load i64, i64* %64, align 8
- 86 store i64 %65, i64* %3, align 8
- 87 %66 = add i64 %59, 16
- 88 store i64 %66, i64* %6, align 8
- 89 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f971f5488c8>, {0: {0}, 1: {1}, 2: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 3: {5}, 4: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 5: {7}, 6: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 7: {24, 9, 53}, 8: {39, 10, 78, 84, 21, 59, 31}, 9: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 10: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 11: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 12: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 13: {2}, 14: {15}, 15: {16, 77}, 16: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 17: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 18: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 19: {20, 61, 30, 68}, 20: {39, 10, 78, 84, 21, 59, 31}, 21: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 22: {3}, 23: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 24: {24, 9, 53}, 25: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 26: {26, 37}, 27: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 28: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 29: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 30: {20, 61, 30, 68}, 31: {39, 10, 78, 84, 21, 59, 31}, 32: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 33: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 34: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 35: {35}, 36: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 37: {26, 37}, 38: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 39: {39, 10, 78, 84, 21, 59, 31}, 40: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 41: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 42: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 43: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 44: {44}, 45: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 46: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 47: {47}, 48: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 49: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 50: {50}, 51: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 52: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 53: {24, 9, 53}, 54: {54}, 55: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 56: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 57: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 58: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 59: {39, 10, 78, 84, 21, 59, 31}, 60: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 61: {20, 61, 30, 68}, 62: {62}, 63: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 64: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 65: {65, 71}, 66: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 67: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 68: {20, 61, 30, 68}, 69: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 70: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 71: {65, 71}, 72: {64, 33, 66, 69, 72, 41, 42, 45, 48, 18, 51, 57, 28}, 73: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 74: {74}, 75: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 76: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 77: {16, 77}, 78: {39, 10, 78, 84, 21, 59, 31}, 79: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 80: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 81: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 82: {82}, 83: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 84: {39, 10, 78, 84, 21, 59, 31}, 85: {34, 4, 36, 8, 40, 76, 13, 79, 19, 85, 23, 56, 25, 58, 60, 29}, 86: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 87: {87}, 88: {6, 11, 12, 14, 17, 22, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 89: {89}})
Equivalent! frozenset({25, 36}) {25, 36}
Equivalent! frozenset({26, 37}) {26, 37}
Equivalent! frozenset({27, 38}) {27, 38}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f971f5488c8>, {0: {0}, 1: {1}, 2: {4}, 3: {5}, 4: {6}, 5: {7}, 6: {8}, 7: {9}, 8: {10}, 9: {11}, 10: {12}, 11: {13}, 12: {14}, 13: {2}, 14: {15}, 15: {16}, 16: {17}, 17: {18}, 18: {19}, 19: {20}, 20: {21}, 21: {22}, 22: {3}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {28}, 29: {29}, 30: {30}, 31: {31}, 32: {32}, 33: {33}, 34: {34}, 35: {35}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {42}, 43: {43}, 44: {44}, 45: {66, 45}, 46: {67, 46}, 47: {47}, 48: {48, 69}, 49: {49, 70}, 50: {50}, 51: {72, 51}, 52: {73, 52}, 53: {53}, 54: {54}, 55: {55}, 56: {56}, 57: {57}, 58: {58}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 add add
EXACT 16 store store
EXACT 17 bitcast bitcast
EXACT 18 load load
EXACT 19 extractelement extractelement
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 getelementptr getelementptr
EXACT 23 load load
EXACT 24 add add
EXACT 25 load load
EXACT 26 add add
EXACT 27 store store
EXACT 28 bitcast bitcast
EXACT 29 load load
EXACT 30 extractelement extractelement
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 bitcast bitcast
EXACT 34 load load
EXACT 35 add add
EXACT 36 load load
EXACT 37 add add
EXACT 38 store store
EXACT 39 inttoptr inttoptr
EXACT 40 load load
EXACT 41 bitcast bitcast
EXACT 42 bitcast bitcast
EXACT 43 store store
EXACT 44 getelementptr getelementptr
MORE 45 POT: 2
MORE 46 POT: 2
EXACT 47 getelementptr getelementptr
MORE 48 POT: 2
MORE 49 POT: 2
EXACT 50 getelementptr getelementptr
MORE 51 POT: 2
MORE 52 POT: 2
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 load load
EXACT 57 bitcast bitcast
EXACT 58 load load
EXACT 59 inttoptr inttoptr
EXACT 60 load load
EXACT 61 extractelement extractelement
EXACT 62 fsub fsub
EXACT 63 store store
EXACT 64 bitcast bitcast
EXACT 65 extractelement extractelement
EXACT 66 bitcast bitcast
EXACT 67 store store
EXACT 68 extractelement extractelement
EXACT 69 bitcast bitcast
EXACT 70 store store
EXACT 71 extractelement extractelement
EXACT 72 bitcast bitcast
EXACT 73 store store
EXACT 74 add add
EXACT 75 store store
EXACT 76 load load
EXACT 77 add add
EXACT 78 inttoptr inttoptr
EXACT 79 load load
EXACT 80 store store
EXACT 81 store store
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 load load
EXACT 86 store store
EXACT 87 add add
EXACT 88 store store
EXACT 89 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 4 %5 = load i64, i64* %RBP, align 8
- 5 %6 = add i64 %1, 1
- 6 store i64 %6, i64* %PC, align 8
- 7 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 8 %8 = load i64, i64* %7, align 8
- 9 %9 = add i64 %8, -8
- 10 %10 = inttoptr i64 %9 to i64*
- 11 store i64 %5, i64* %10, align 8
- 12 store i64 %9, i64* %7, align 8
- 13 %11 = load i64, i64* %PC, align 8
- 14 store i64 %9, i64* %RBP, align 8
- 15 %12 = add i64 %8, -12
- 16 %13 = add i64 %11, 8
- 17 store i64 %13, i64* %PC, align 8
- 18 %14 = bitcast [32 x %union.VectorReg]* %3 to \<2 x float\>*
- 19 %15 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 20 %16 = extractelement \<2 x float\> %15, i32 0
- 21 %17 = inttoptr i64 %12 to float*
- 22 store float %16, float* %17, align 4
- 23 %18 = load i64, i64* %RBP, align 8
- 24 %19 = add i64 %18, -8
- 25 %20 = load i64, i64* %PC, align 8
- 26 %21 = add i64 %20, 5
- 27 store i64 %21, i64* %PC, align 8
- 28 %22 = bitcast %union.VectorReg* %4 to \<2 x float\>*
- 29 %23 = load \<2 x float\>, \<2 x float\>* %22, align 1
- 30 %24 = extractelement \<2 x float\> %23, i32 0
- 31 %25 = inttoptr i64 %19 to float*
- 32 store float %24, float* %25, align 4
- 33 %26 = bitcast [32 x %union.VectorReg]* %3 to i8*
- 34 %27 = load i64, i64* %RBP, align 8
- 35 %28 = add i64 %27, -4
- 36 %29 = load i64, i64* %PC, align 8
- 37 %30 = add i64 %29, 5
- 38 store i64 %30, i64* %PC, align 8
- 39 %31 = inttoptr i64 %28 to i32*
- 40 %32 = load i32, i32* %31, align 4
- 41 %33 = bitcast [32 x %union.VectorReg]* %3 to float*
- 42 %34 = bitcast [32 x %union.VectorReg]* %3 to i32*
- 43 store i32 %32, i32* %34, align 1
- 44 %35 = getelementptr inbounds i8, i8* %26, i64 4
- 45 %36 = bitcast i8* %35 to float*
- 46 store float 0.000000e+00, float* %36, align 1
- 47 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 48 %38 = bitcast i64* %37 to float*
- 49 store float 0.000000e+00, float* %38, align 1
- 50 %39 = getelementptr inbounds i8, i8* %26, i64 12
- 51 %40 = bitcast i8* %39 to float*
- 52 store float 0.000000e+00, float* %40, align 1
- 53 %41 = add i64 %27, -8
- 54 %42 = add i64 %29, 10
- 55 store i64 %42, i64* %PC, align 8
- 56 %43 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 57 %44 = bitcast i64* %37 to \<2 x i32\>*
- 58 %45 = load \<2 x i32\>, \<2 x i32\>* %44, align 1
- 59 %46 = inttoptr i64 %41 to float*
- 60 %47 = load float, float* %46, align 4
- 61 %48 = extractelement \<2 x float\> %43, i32 0
- 62 %49 = fsub float %48, %47
- 63 store float %49, float* %33, align 1
- 64 %50 = bitcast \<2 x float\> %43 to \<2 x i32\>
- 65 %51 = extractelement \<2 x i32\> %50, i32 1
- 66 %52 = bitcast i8* %35 to i32*
- 67 store i32 %51, i32* %52, align 1
- 68 %53 = extractelement \<2 x i32\> %45, i32 0
- 69 %54 = bitcast i64* %37 to i32*
- 70 store i32 %53, i32* %54, align 1
- 71 %55 = extractelement \<2 x i32\> %45, i32 1
- 72 %56 = bitcast i8* %39 to i32*
- 73 store i32 %55, i32* %56, align 1
- 74 %57 = add i64 %29, 11
- 75 store i64 %57, i64* %PC, align 8
- 76 %58 = load i64, i64* %7, align 8
- 77 %59 = add i64 %58, 8
- 78 %60 = inttoptr i64 %58 to i64*
- 79 %61 = load i64, i64* %60, align 8
- 80 store i64 %61, i64* %RBP, align 8
- 81 store i64 %59, i64* %7, align 8
- 82 %62 = add i64 %29, 12
- 83 store i64 %62, i64* %PC, align 8
- 84 %63 = inttoptr i64 %59 to i64*
- 85 %64 = load i64, i64* %63, align 8
- 86 store i64 %64, i64* %PC, align 8
- 87 %65 = add i64 %58, 16
- 88 store i64 %65, i64* %7, align 8
- 89 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f971f548a60>, {0: {0}, 1: {1}, 2: {13}, 3: {22}, 4: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 5: {3}, 6: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 7: {5}, 8: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 9: {24, 53, 7}, 10: {39, 8, 78, 20, 84, 59, 31}, 11: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 12: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 13: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 14: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 15: {14}, 16: {77, 15}, 17: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 18: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 19: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 20: {19, 68, 61, 30}, 21: {39, 8, 78, 20, 84, 59, 31}, 22: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 23: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 24: {24, 53, 7}, 25: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 26: {26, 37}, 27: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 28: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 29: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 30: {19, 68, 61, 30}, 31: {39, 8, 78, 20, 84, 59, 31}, 32: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 33: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 34: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 35: {35}, 36: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 37: {26, 37}, 38: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 39: {39, 8, 78, 20, 84, 59, 31}, 40: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 41: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 42: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 43: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 44: {44}, 45: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 46: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 47: {47}, 48: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 49: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 50: {50}, 51: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 52: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 53: {24, 53, 7}, 54: {54}, 55: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 56: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 57: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 58: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 59: {39, 8, 78, 20, 84, 59, 31}, 60: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 61: {19, 68, 61, 30}, 62: {62}, 63: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 64: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 65: {65, 71}, 66: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 67: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 68: {19, 68, 61, 30}, 69: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 70: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 71: {65, 71}, 72: {64, 33, 66, 69, 72, 41, 42, 45, 48, 17, 51, 57, 28}, 73: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 74: {74}, 75: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 76: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 77: {77, 15}, 78: {39, 8, 78, 20, 84, 59, 31}, 79: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 80: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 81: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 82: {82}, 83: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 84: {39, 8, 78, 20, 84, 59, 31}, 85: {2, 34, 36, 6, 40, 11, 76, 79, 18, 85, 23, 56, 25, 58, 60, 29}, 86: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 87: {87}, 88: {4, 9, 10, 12, 16, 21, 27, 32, 38, 43, 46, 49, 52, 55, 63, 67, 70, 73, 75, 80, 81, 83, 86, 88}, 89: {89}})
Equivalent! frozenset({25, 36}) {25, 36}
Equivalent! frozenset({26, 37}) {26, 37}
Equivalent! frozenset({27, 38}) {27, 38}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f971f548a60>, {0: {0}, 1: {1}, 2: {13}, 3: {22}, 4: {2}, 5: {3}, 6: {4}, 7: {5}, 8: {6}, 9: {7}, 10: {8}, 11: {9}, 12: {10}, 13: {11}, 14: {12}, 15: {14}, 16: {15}, 17: {16}, 18: {17}, 19: {18}, 20: {19}, 21: {20}, 22: {21}, 23: {23}, 24: {24}, 25: {25}, 26: {26}, 27: {27}, 28: {28}, 29: {29}, 30: {30}, 31: {31}, 32: {32}, 33: {33}, 34: {34}, 35: {35}, 36: {36}, 37: {37}, 38: {38}, 39: {39}, 40: {40}, 41: {41}, 42: {42}, 43: {43}, 44: {44}, 45: {66, 45}, 46: {67, 46}, 47: {47}, 48: {48, 69}, 49: {49, 70}, 50: {50}, 51: {72, 51}, 52: {73, 52}, 53: {53}, 54: {54}, 55: {55}, 56: {56}, 57: {57}, 58: {58}, 59: {59}, 60: {60}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {78}, 79: {79}, 80: {80}, 81: {81}, 82: {82}, 83: {83}, 84: {84}, 85: {85}, 86: {86}, 87: {87}, 88: {88}, 89: {89}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 load load
EXACT 5 add add
EXACT 6 store store
EXACT 7 getelementptr getelementptr
EXACT 8 load load
EXACT 9 add add
EXACT 10 inttoptr inttoptr
EXACT 11 store store
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 add add
EXACT 17 store store
EXACT 18 bitcast bitcast
EXACT 19 load load
EXACT 20 extractelement extractelement
EXACT 21 inttoptr inttoptr
EXACT 22 store store
EXACT 23 load load
EXACT 24 add add
EXACT 25 load load
EXACT 26 add add
EXACT 27 store store
EXACT 28 bitcast bitcast
EXACT 29 load load
EXACT 30 extractelement extractelement
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 bitcast bitcast
EXACT 34 load load
EXACT 35 add add
EXACT 36 load load
EXACT 37 add add
EXACT 38 store store
EXACT 39 inttoptr inttoptr
EXACT 40 load load
EXACT 41 bitcast bitcast
EXACT 42 bitcast bitcast
EXACT 43 store store
EXACT 44 getelementptr getelementptr
MORE 45 POT: 2
MORE 46 POT: 2
EXACT 47 getelementptr getelementptr
MORE 48 POT: 2
MORE 49 POT: 2
EXACT 50 getelementptr getelementptr
MORE 51 POT: 2
MORE 52 POT: 2
EXACT 53 add add
EXACT 54 add add
EXACT 55 store store
EXACT 56 load load
EXACT 57 bitcast bitcast
EXACT 58 load load
EXACT 59 inttoptr inttoptr
EXACT 60 load load
EXACT 61 extractelement extractelement
EXACT 62 fsub fsub
EXACT 63 store store
EXACT 64 bitcast bitcast
EXACT 65 extractelement extractelement
EXACT 66 bitcast bitcast
EXACT 67 store store
EXACT 68 extractelement extractelement
EXACT 69 bitcast bitcast
EXACT 70 store store
EXACT 71 extractelement extractelement
EXACT 72 bitcast bitcast
EXACT 73 store store
EXACT 74 add add
EXACT 75 store store
EXACT 76 load load
EXACT 77 add add
EXACT 78 inttoptr inttoptr
EXACT 79 load load
EXACT 80 store store
EXACT 81 store store
EXACT 82 add add
EXACT 83 store store
EXACT 84 inttoptr inttoptr
EXACT 85 load load
EXACT 86 store store
EXACT 87 add add
EXACT 88 store store
EXACT 89 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%12 = add i64 %7, -12', '%13 = add i64 %10, 8', 'store i64 %13, i64* %3, align 8', '%14 = bitcast [32 x %union.VectorReg]* %11 to \\<2 x float\\>*', '%15 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%16 = extractelement \\<2 x float\\> %15, i32 0', '%17 = inttoptr i64 %12 to float*', 'store float %16, float* %17, align 4', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%19 = load i64, i64* %RBP.i, align 8', '%20 = add i64 %19, -8', '%21 = load i64, i64* %3, align 8', '%22 = add i64 %21, 5', 'store i64 %22, i64* %3, align 8', '%23 = bitcast %union.VectorReg* %18 to \\<2 x float\\>*', '%24 = load \\<2 x float\\>, \\<2 x float\\>* %23, align 1', '%25 = extractelement \\<2 x float\\> %24, i32 0', '%26 = inttoptr i64 %20 to float*', 'store float %25, float* %26, align 4', '%28 = load i64, i64* %RBP.i, align 8', '%29 = add i64 %28, -4', '%30 = load i64, i64* %3, align 8', '%31 = add i64 %30, 5', 'store i64 %31, i64* %3, align 8', '%32 = inttoptr i64 %29 to i32*', '%33 = load i32, i32* %32, align 4', '%34 = bitcast [32 x %union.VectorReg]* %11 to float*', '%35 = bitcast [32 x %union.VectorReg]* %11 to i32*', 'store i32 %33, i32* %35, align 1', '%42 = add i64 %28, -8', '%43 = add i64 %30, 10', 'store i64 %43, i64* %3, align 8', '%44 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%45 = bitcast i64* %38 to \\<2 x i32\\>*', '%46 = load \\<2 x i32\\>, \\<2 x i32\\>* %45, align 1', '%47 = inttoptr i64 %42 to float*', '%48 = load float, float* %47, align 4', '%49 = extractelement \\<2 x float\\> %44, i32 0', '%50 = fsub float %49, %48', 'store float %50, float* %34, align 1', '%51 = bitcast \\<2 x float\\> %44 to \\<2 x i32\\>', '%52 = extractelement \\<2 x i32\\> %51, i32 1', '%53 = bitcast i8* %36 to i32*', 'store i32 %52, i32* %53, align 1', '%54 = extractelement \\<2 x i32\\> %46, i32 0', '%55 = bitcast i64* %38 to i32*', 'store i32 %54, i32* %55, align 1', '%56 = extractelement \\<2 x i32\\> %46, i32 1', '%57 = bitcast i8* %40 to i32*', 'store i32 %56, i32* %57, align 1', '%58 = add i64 %30, 11', 'store i64 %58, i64* %3, align 8', '%59 = load i64, i64* %6, align 8', '%60 = add i64 %59, 8', '%61 = inttoptr i64 %59 to i64*', '%62 = load i64, i64* %61, align 8', 'store i64 %62, i64* %RBP.i, align 8', 'store i64 %60, i64* %6, align 8', '%63 = add i64 %30, 12', 'store i64 %63, i64* %3, align 8', '%64 = inttoptr i64 %60 to i64*', '%65 = load i64, i64* %64, align 8', 'store i64 %65, i64* %3, align 8', '%66 = add i64 %59, 16', 'store i64 %66, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Keep: %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = add i64 %10, 8
Found line to remove! store i64 %13, i64* %3, align 8
Keep: %14 = bitcast [32 x %union.VectorReg]* %11 to <2 x float>*
Keep: %15 = load <2 x float>, <2 x float>* %14, align 1
Keep: %16 = extractelement <2 x float> %15, i32 0
Found line to remove! %17 = inttoptr i64 %12 to float*
Found line to remove! store float %16, float* %17, align 4
Found line to remove! %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %19 = load i64, i64* %RBP.i, align 8
Found line to remove! %20 = add i64 %19, -8
Found line to remove! %21 = load i64, i64* %3, align 8
Found line to remove! %22 = add i64 %21, 5
Found line to remove! store i64 %22, i64* %3, align 8
Keep: %23 = bitcast %union.VectorReg* %18 to <2 x float>*
Keep: %24 = load <2 x float>, <2 x float>* %23, align 1
Keep: %25 = extractelement <2 x float> %24, i32 0
Found line to remove! %26 = inttoptr i64 %20 to float*
Found line to remove! store float %25, float* %26, align 4
Keep: %27 = bitcast [32 x %union.VectorReg]* %11 to i8*
Found line to remove! %28 = load i64, i64* %RBP.i, align 8
Found line to remove! %29 = add i64 %28, -4
Found line to remove! %30 = load i64, i64* %3, align 8
Found line to remove! %31 = add i64 %30, 5
Found line to remove! store i64 %31, i64* %3, align 8
Found line to remove! %32 = inttoptr i64 %29 to i32*
Found line to remove! %33 = load i32, i32* %32, align 4
Found line to remove! %34 = bitcast [32 x %union.VectorReg]* %11 to float*
Found line to remove! %35 = bitcast [32 x %union.VectorReg]* %11 to i32*
Found line to remove! store i32 %33, i32* %35, align 1
Keep: %36 = getelementptr inbounds i8, i8* %27, i64 4
Keep: %37 = bitcast i8* %36 to float*
Keep: store float 0.000000e+00, float* %37, align 1
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %39 = bitcast i64* %38 to float*
Keep: store float 0.000000e+00, float* %39, align 1
Keep: %40 = getelementptr inbounds i8, i8* %27, i64 12
Keep: %41 = bitcast i8* %40 to float*
Keep: store float 0.000000e+00, float* %41, align 1
Found line to remove! %42 = add i64 %28, -8
Found line to remove! %43 = add i64 %30, 10
Found line to remove! store i64 %43, i64* %3, align 8
Keep: %44 = load <2 x float>, <2 x float>* %14, align 1
Keep: %45 = bitcast i64* %38 to <2 x i32>*
Keep: %46 = load <2 x i32>, <2 x i32>* %45, align 1
Found line to remove! %47 = inttoptr i64 %42 to float*
Found line to remove! %48 = load float, float* %47, align 4
Keep: %49 = extractelement <2 x float> %44, i32 0
Found line to remove! %50 = fsub float %49, %48
Found line to remove! store float %50, float* %34, align 1
Keep: %51 = bitcast <2 x float> %44 to <2 x i32>
Keep: %52 = extractelement <2 x i32> %51, i32 1
Found line to remove! %53 = bitcast i8* %36 to i32*
Found line to remove! store i32 %52, i32* %53, align 1
Keep: %54 = extractelement <2 x i32> %46, i32 0
Found line to remove! %55 = bitcast i64* %38 to i32*
Found line to remove! store i32 %54, i32* %55, align 1
Keep: %56 = extractelement <2 x i32> %46, i32 1
Found line to remove! %57 = bitcast i8* %40 to i32*
Found line to remove! store i32 %56, i32* %57, align 1
Found line to remove! %58 = add i64 %30, 11
Found line to remove! store i64 %58, i64* %3, align 8
Found line to remove! %59 = load i64, i64* %6, align 8
Found line to remove! %60 = add i64 %59, 8
Found line to remove! %61 = inttoptr i64 %59 to i64*
Found line to remove! %62 = load i64, i64* %61, align 8
Found line to remove! store i64 %62, i64* %RBP.i, align 8
Found line to remove! store i64 %60, i64* %6, align 8
Found line to remove! %63 = add i64 %30, 12
Found line to remove! store i64 %63, i64* %3, align 8
Found line to remove! %64 = inttoptr i64 %60 to i64*
Found line to remove! %65 = load i64, i64* %64, align 8
Found line to remove! store i64 %65, i64* %3, align 8
Found line to remove! %66 = add i64 %59, 16
Found line to remove! store i64 %66, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%12 = add i64 %7, -12', '%13 = add i64 %10, 8', 'store i64 %13, i64* %3, align 8', '%14 = bitcast [32 x %union.VectorReg]* %11 to \\<2 x float\\>*', '%15 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%16 = extractelement \\<2 x float\\> %15, i32 0', '%17 = inttoptr i64 %12 to float*', 'store float %16, float* %17, align 4', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%19 = load i64, i64* %RBP.i, align 8', '%20 = add i64 %19, -8', '%21 = load i64, i64* %3, align 8', '%22 = add i64 %21, 5', 'store i64 %22, i64* %3, align 8', '%23 = bitcast %union.VectorReg* %18 to \\<2 x float\\>*', '%24 = load \\<2 x float\\>, \\<2 x float\\>* %23, align 1', '%25 = extractelement \\<2 x float\\> %24, i32 0', '%26 = inttoptr i64 %20 to float*', 'store float %25, float* %26, align 4', '%28 = load i64, i64* %RBP.i, align 8', '%29 = add i64 %28, -4', '%30 = load i64, i64* %3, align 8', '%31 = add i64 %30, 5', 'store i64 %31, i64* %3, align 8', '%32 = inttoptr i64 %29 to i32*', '%33 = load i32, i32* %32, align 4', '%34 = bitcast [32 x %union.VectorReg]* %11 to float*', '%35 = bitcast [32 x %union.VectorReg]* %11 to i32*', 'store i32 %33, i32* %35, align 1', '%42 = add i64 %28, -8', '%43 = add i64 %30, 10', 'store i64 %43, i64* %3, align 8', '%44 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%45 = bitcast i64* %38 to \\<2 x i32\\>*', '%46 = load \\<2 x i32\\>, \\<2 x i32\\>* %45, align 1', '%47 = inttoptr i64 %42 to float*', '%48 = load float, float* %47, align 4', '%49 = extractelement \\<2 x float\\> %44, i32 0', '%50 = fsub float %49, %48', 'store float %50, float* %34, align 1', '%51 = bitcast \\<2 x float\\> %44 to \\<2 x i32\\>', '%52 = extractelement \\<2 x i32\\> %51, i32 1', '%53 = bitcast i8* %36 to i32*', 'store i32 %52, i32* %53, align 1', '%54 = extractelement \\<2 x i32\\> %46, i32 0', '%55 = bitcast i64* %38 to i32*', 'store i32 %54, i32* %55, align 1', '%56 = extractelement \\<2 x i32\\> %46, i32 1', '%57 = bitcast i8* %40 to i32*', 'store i32 %56, i32* %57, align 1', '%58 = add i64 %30, 11', 'store i64 %58, i64* %3, align 8', '%59 = load i64, i64* %6, align 8', '%60 = add i64 %59, 8', '%61 = inttoptr i64 %59 to i64*', '%62 = load i64, i64* %61, align 8', 'store i64 %62, i64* %RBP.i, align 8', 'store i64 %60, i64* %6, align 8', '%63 = add i64 %30, 12', 'store i64 %63, i64* %3, align 8', '%64 = inttoptr i64 %60 to i64*', '%65 = load i64, i64* %64, align 8', 'store i64 %65, i64* %3, align 8', '%66 = add i64 %59, 16', 'store i64 %66, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', 'store i64 %9, i64* %7, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -12', '%13 = add i64 %11, 8', 'store i64 %13, i64* %PC, align 8', '%14 = bitcast [32 x %union.VectorReg]* %3 to \\<2 x float\\>*', '%15 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%16 = extractelement \\<2 x float\\> %15, i32 0', '%17 = inttoptr i64 %12 to float*', 'store float %16, float* %17, align 4', '%18 = load i64, i64* %RBP, align 8', '%19 = add i64 %18, -8', '%20 = load i64, i64* %PC, align 8', '%21 = add i64 %20, 5', 'store i64 %21, i64* %PC, align 8', '%22 = bitcast %union.VectorReg* %4 to \\<2 x float\\>*', '%23 = load \\<2 x float\\>, \\<2 x float\\>* %22, align 1', '%24 = extractelement \\<2 x float\\> %23, i32 0', '%25 = inttoptr i64 %19 to float*', 'store float %24, float* %25, align 4', '%27 = load i64, i64* %RBP, align 8', '%28 = add i64 %27, -4', '%29 = load i64, i64* %PC, align 8', '%30 = add i64 %29, 5', 'store i64 %30, i64* %PC, align 8', '%31 = inttoptr i64 %28 to i32*', '%32 = load i32, i32* %31, align 4', '%33 = bitcast [32 x %union.VectorReg]* %3 to float*', '%34 = bitcast [32 x %union.VectorReg]* %3 to i32*', 'store i32 %32, i32* %34, align 1', '%41 = add i64 %27, -8', '%42 = add i64 %29, 10', 'store i64 %42, i64* %PC, align 8', '%43 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%44 = bitcast i64* %37 to \\<2 x i32\\>*', '%45 = load \\<2 x i32\\>, \\<2 x i32\\>* %44, align 1', '%46 = inttoptr i64 %41 to float*', '%47 = load float, float* %46, align 4', '%48 = extractelement \\<2 x float\\> %43, i32 0', '%49 = fsub float %48, %47', 'store float %49, float* %33, align 1', '%50 = bitcast \\<2 x float\\> %43 to \\<2 x i32\\>', '%51 = extractelement \\<2 x i32\\> %50, i32 1', '%52 = bitcast i8* %35 to i32*', 'store i32 %51, i32* %52, align 1', '%53 = extractelement \\<2 x i32\\> %45, i32 0', '%54 = bitcast i64* %37 to i32*', 'store i32 %53, i32* %54, align 1', '%55 = extractelement \\<2 x i32\\> %45, i32 1', '%56 = bitcast i8* %39 to i32*', 'store i32 %55, i32* %56, align 1', '%57 = add i64 %29, 11', 'store i64 %57, i64* %PC, align 8', '%58 = load i64, i64* %7, align 8', '%59 = add i64 %58, 8', '%60 = inttoptr i64 %58 to i64*', '%61 = load i64, i64* %60, align 8', 'store i64 %61, i64* %RBP, align 8', 'store i64 %59, i64* %7, align 8', '%62 = add i64 %29, 12', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %59 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %PC, align 8', '%65 = add i64 %58, 16', 'store i64 %65, i64* %7, align 8'])
Keep: block_40ce90:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %8 = load i64, i64* %7, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %5, i64* %10, align 8
Found line to remove! store i64 %9, i64* %7, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -12
Found line to remove! %13 = add i64 %11, 8
Found line to remove! store i64 %13, i64* %PC, align 8
Keep: %14 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
Keep: %15 = load <2 x float>, <2 x float>* %14, align 1
Keep: %16 = extractelement <2 x float> %15, i32 0
Found line to remove! %17 = inttoptr i64 %12 to float*
Found line to remove! store float %16, float* %17, align 4
Found line to remove! %18 = load i64, i64* %RBP, align 8
Found line to remove! %19 = add i64 %18, -8
Found line to remove! %20 = load i64, i64* %PC, align 8
Found line to remove! %21 = add i64 %20, 5
Found line to remove! store i64 %21, i64* %PC, align 8
Keep: %22 = bitcast %union.VectorReg* %4 to <2 x float>*
Keep: %23 = load <2 x float>, <2 x float>* %22, align 1
Keep: %24 = extractelement <2 x float> %23, i32 0
Found line to remove! %25 = inttoptr i64 %19 to float*
Found line to remove! store float %24, float* %25, align 4
Keep: %26 = bitcast [32 x %union.VectorReg]* %3 to i8*
Found line to remove! %27 = load i64, i64* %RBP, align 8
Found line to remove! %28 = add i64 %27, -4
Found line to remove! %29 = load i64, i64* %PC, align 8
Found line to remove! %30 = add i64 %29, 5
Found line to remove! store i64 %30, i64* %PC, align 8
Found line to remove! %31 = inttoptr i64 %28 to i32*
Found line to remove! %32 = load i32, i32* %31, align 4
Found line to remove! %33 = bitcast [32 x %union.VectorReg]* %3 to float*
Found line to remove! %34 = bitcast [32 x %union.VectorReg]* %3 to i32*
Found line to remove! store i32 %32, i32* %34, align 1
Keep: %35 = getelementptr inbounds i8, i8* %26, i64 4
Keep: %36 = bitcast i8* %35 to float*
Keep: store float 0.000000e+00, float* %36, align 1
Keep: %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %38 = bitcast i64* %37 to float*
Keep: store float 0.000000e+00, float* %38, align 1
Keep: %39 = getelementptr inbounds i8, i8* %26, i64 12
Keep: %40 = bitcast i8* %39 to float*
Keep: store float 0.000000e+00, float* %40, align 1
Found line to remove! %41 = add i64 %27, -8
Found line to remove! %42 = add i64 %29, 10
Found line to remove! store i64 %42, i64* %PC, align 8
Keep: %43 = load <2 x float>, <2 x float>* %14, align 1
Keep: %44 = bitcast i64* %37 to <2 x i32>*
Keep: %45 = load <2 x i32>, <2 x i32>* %44, align 1
Found line to remove! %46 = inttoptr i64 %41 to float*
Found line to remove! %47 = load float, float* %46, align 4
Keep: %48 = extractelement <2 x float> %43, i32 0
Found line to remove! %49 = fsub float %48, %47
Found line to remove! store float %49, float* %33, align 1
Keep: %50 = bitcast <2 x float> %43 to <2 x i32>
Keep: %51 = extractelement <2 x i32> %50, i32 1
Found line to remove! %52 = bitcast i8* %35 to i32*
Found line to remove! store i32 %51, i32* %52, align 1
Keep: %53 = extractelement <2 x i32> %45, i32 0
Found line to remove! %54 = bitcast i64* %37 to i32*
Found line to remove! store i32 %53, i32* %54, align 1
Keep: %55 = extractelement <2 x i32> %45, i32 1
Found line to remove! %56 = bitcast i8* %39 to i32*
Found line to remove! store i32 %55, i32* %56, align 1
Found line to remove! %57 = add i64 %29, 11
Found line to remove! store i64 %57, i64* %PC, align 8
Found line to remove! %58 = load i64, i64* %7, align 8
Found line to remove! %59 = add i64 %58, 8
Found line to remove! %60 = inttoptr i64 %58 to i64*
Found line to remove! %61 = load i64, i64* %60, align 8
Found line to remove! store i64 %61, i64* %RBP, align 8
Found line to remove! store i64 %59, i64* %7, align 8
Found line to remove! %62 = add i64 %29, 12
Found line to remove! store i64 %62, i64* %PC, align 8
Found line to remove! %63 = inttoptr i64 %59 to i64*
Found line to remove! %64 = load i64, i64* %63, align 8
Found line to remove! store i64 %64, i64* %PC, align 8
Found line to remove! %65 = add i64 %58, 16
Found line to remove! store i64 %65, i64* %7, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', 'store i64 %9, i64* %7, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -12', '%13 = add i64 %11, 8', 'store i64 %13, i64* %PC, align 8', '%14 = bitcast [32 x %union.VectorReg]* %3 to \\<2 x float\\>*', '%15 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%16 = extractelement \\<2 x float\\> %15, i32 0', '%17 = inttoptr i64 %12 to float*', 'store float %16, float* %17, align 4', '%18 = load i64, i64* %RBP, align 8', '%19 = add i64 %18, -8', '%20 = load i64, i64* %PC, align 8', '%21 = add i64 %20, 5', 'store i64 %21, i64* %PC, align 8', '%22 = bitcast %union.VectorReg* %4 to \\<2 x float\\>*', '%23 = load \\<2 x float\\>, \\<2 x float\\>* %22, align 1', '%24 = extractelement \\<2 x float\\> %23, i32 0', '%25 = inttoptr i64 %19 to float*', 'store float %24, float* %25, align 4', '%27 = load i64, i64* %RBP, align 8', '%28 = add i64 %27, -4', '%29 = load i64, i64* %PC, align 8', '%30 = add i64 %29, 5', 'store i64 %30, i64* %PC, align 8', '%31 = inttoptr i64 %28 to i32*', '%32 = load i32, i32* %31, align 4', '%33 = bitcast [32 x %union.VectorReg]* %3 to float*', '%34 = bitcast [32 x %union.VectorReg]* %3 to i32*', 'store i32 %32, i32* %34, align 1', '%41 = add i64 %27, -8', '%42 = add i64 %29, 10', 'store i64 %42, i64* %PC, align 8', '%43 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%44 = bitcast i64* %37 to \\<2 x i32\\>*', '%45 = load \\<2 x i32\\>, \\<2 x i32\\>* %44, align 1', '%46 = inttoptr i64 %41 to float*', '%47 = load float, float* %46, align 4', '%48 = extractelement \\<2 x float\\> %43, i32 0', '%49 = fsub float %48, %47', 'store float %49, float* %33, align 1', '%50 = bitcast \\<2 x float\\> %43 to \\<2 x i32\\>', '%51 = extractelement \\<2 x i32\\> %50, i32 1', '%52 = bitcast i8* %35 to i32*', 'store i32 %51, i32* %52, align 1', '%53 = extractelement \\<2 x i32\\> %45, i32 0', '%54 = bitcast i64* %37 to i32*', 'store i32 %53, i32* %54, align 1', '%55 = extractelement \\<2 x i32\\> %45, i32 1', '%56 = bitcast i8* %39 to i32*', 'store i32 %55, i32* %56, align 1', '%57 = add i64 %29, 11', 'store i64 %57, i64* %PC, align 8', '%58 = load i64, i64* %7, align 8', '%59 = add i64 %58, 8', '%60 = inttoptr i64 %58 to i64*', '%61 = load i64, i64* %60, align 8', 'store i64 %61, i64* %RBP, align 8', 'store i64 %59, i64* %7, align 8', '%62 = add i64 %29, 12', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %59 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %PC, align 8', '%65 = add i64 %58, 16', 'store i64 %65, i64* %7, align 8'])/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt: /tmp/tmp209w1dvj-query.ll:97:39: error: use of undefined value '%var_2_18'
%var_2_23 = bitcast %union.VectorReg* %var_2_18 to <2 x float>*
                                      ^

[x] Failed to do opt
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/_ZN19custom_sub_variableIfE8do_shiftEff/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
Traceback (most recent call last):
  File "/usr/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 728, in <module>
    matcher.do_match()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 101, in do_match
    self.do_opt()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 582, in do_opt
    env=MYENV)
  File "/usr/lib/python3.6/subprocess.py", line 311, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt -S -inline /tmp/tmp209w1dvj-query.ll -o /tmp/tmp209w1dvj-query.ll' returned non-zero exit status 1.
