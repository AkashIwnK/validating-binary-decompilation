Writing '/tmp/tmpa5vfb3di.dot'...
Writing '/tmp/tmpa5vfb3di.dot':Done

Reading LLVM: /tmp/tmpfq7woxs1-query.ll
Extracting function [_Z15tolerance_equalIhEbRT_S1_] from /tmp/tmpfq7woxs1-query.ll
Dot file generated!
Writing '/tmp/tmp3xo1dinz.dot'...
Writing '/tmp/tmp3xo1dinz.dot':Done

Reading LLVM: /tmp/tmp8ldqntqd-target.ll
Extracting function [_Z15tolerance_equalIhEbRT_S1_] from /tmp/tmp8ldqntqd-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 %39 = add i64 %7, -16
- 49 %40 = load i64, i64* %RDI.i42, align 8
- 50 %41 = add i64 %10, 11
- 51 store i64 %41, i64* %3, align 8
- 52 %42 = inttoptr i64 %39 to i64*
- 53 store i64 %40, i64* %42, align 8
- 54 %RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 55 %43 = load i64, i64* %RBP.i, align 8
- 56 %44 = add i64 %43, -16
- 57 %45 = load i64, i64* %RSI.i39, align 8
- 58 %46 = load i64, i64* %3, align 8
- 59 %47 = add i64 %46, 4
- 60 store i64 %47, i64* %3, align 8
- 61 %48 = inttoptr i64 %44 to i64*
- 62 store i64 %45, i64* %48, align 8
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -8
- 65 %51 = load i64, i64* %3, align 8
- 66 %52 = add i64 %51, 4
- 67 store i64 %52, i64* %3, align 8
- 68 %53 = inttoptr i64 %50 to i64*
- 69 %54 = load i64, i64* %53, align 8
- 70 store i64 %54, i64* %RSI.i39, align 8
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 72 %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
- 73 %56 = add i64 %51, 7
- 74 store i64 %56, i64* %3, align 8
- 75 %57 = inttoptr i64 %54 to i8*
- 76 %58 = load i8, i8* %57, align 1
- 77 %59 = zext i8 %58 to i64
- 78 store i64 %59, i64* %RAX.i33, align 8
- 79 %60 = add i64 %49, -16
- 80 %61 = add i64 %51, 11
- 81 store i64 %61, i64* %3, align 8
- 82 %62 = inttoptr i64 %60 to i64*
- 83 %63 = load i64, i64* %62, align 8
- 84 store i64 %63, i64* %RSI.i39, align 8
- 85 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 86 %64 = add i64 %51, 14
- 87 store i64 %64, i64* %3, align 8
- 88 %65 = inttoptr i64 %63 to i8*
- 89 %66 = load i8, i8* %65, align 1
- 90 %67 = zext i8 %66 to i64
- 91 store i64 %67, i64* %RCX.i, align 8
- 92 %68 = zext i8 %66 to i32
- 93 %69 = zext i8 %58 to i32
- 94 %70 = sub nsw i32 %69, %68
- 95 %71 = zext i32 %70 to i64
- 96 store i64 %71, i64* %RAX.i33, align 8
- 97 %72 = icmp ult i8 %58, %66
- 98 %73 = zext i1 %72 to i8
- 99 store i8 %73, i8* %14, align 1
- 100 %74 = and i32 %70, 255
- 101 %75 = tail call i32 @llvm.ctpop.i32(i32 %74)
- 102 %76 = trunc i32 %75 to i8
- 103 %77 = and i8 %76, 1
- 104 %78 = xor i8 %77, 1
- 105 store i8 %78, i8* %21, align 1
- 106 %79 = xor i8 %66, %58
- 107 %80 = zext i8 %79 to i32
- 108 %81 = xor i32 %80, %70
- 109 %82 = lshr i32 %81, 4
- 110 %83 = trunc i32 %82 to i8
- 111 %84 = and i8 %83, 1
- 112 store i8 %84, i8* %26, align 1
- 113 %85 = icmp eq i32 %70, 0
- 114 %86 = zext i1 %85 to i8
- 115 store i8 %86, i8* %29, align 1
- 116 %87 = lshr i32 %70, 31
- 117 %88 = trunc i32 %87 to i8
- 118 store i8 %88, i8* %32, align 1
- 119 store i8 0, i8* %38, align 1
- 120 %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 121 %DL.i25 = bitcast %union.anon* %89 to i8*
- 122 %90 = trunc i32 %70 to i8
- 123 store i8 %90, i8* %DL.i25, align 1
- 124 %91 = add i64 %49, -17
- 125 %92 = add i64 %51, 21
- 126 store i64 %92, i64* %3, align 8
- 127 %93 = inttoptr i64 %91 to i8*
- 128 store i8 %90, i8* %93, align 1
- 129 %94 = load i64, i64* %RBP.i, align 8
- 130 %95 = add i64 %94, -17
- 131 %96 = load i64, i64* %3, align 8
- 132 %97 = add i64 %96, 4
- 133 store i64 %97, i64* %3, align 8
- 134 %98 = inttoptr i64 %95 to i8*
- 135 %99 = load i8, i8* %98, align 1
- 136 %100 = zext i8 %99 to i64
- 137 store i64 %100, i64* %RDI.i42, align 8
- 138 %101 = add i64 %96, -72757
- 139 %102 = add i64 %96, 9
- 140 %103 = load i64, i64* %6, align 8
- 141 %104 = add i64 %103, -8
- 142 %105 = inttoptr i64 %104 to i64*
- 143 store i64 %102, i64* %105, align 8
- 144 store i64 %104, i64* %6, align 8
- 145 store i64 %101, i64* %3, align 8
- 146 %106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 147 %107 = load i64, i64* %3, align 8
- 148 %108 = add i64 %107, ptrtoint (%G_0x1bd2__rip__type* @G_0x1bd2__rip_ to i64)
- 149 %109 = add i64 %107, 8
- 150 store i64 %109, i64* %3, align 8
- 151 %110 = inttoptr i64 %108 to i64*
- 152 %111 = load i64, i64* %110, align 8
- 153 %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 154 store i64 %111, i64* %112, align 1
- 155 %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 156 %114 = bitcast i64* %113 to double*
- 157 store double 0.000000e+00, double* %114, align 1
- 158 %EAX.i = bitcast %union.anon* %55 to i32*
- 159 %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 160 %116 = load i32, i32* %EAX.i, align 4
- 161 %117 = sitofp i32 %116 to double
- 162 %118 = bitcast %union.VectorReg* %115 to double*
- 163 store double %117, double* %118, align 1
- 164 %119 = add i64 %107, 16
- 165 store i64 %119, i64* %3, align 8
- 166 %120 = bitcast i64 %111 to double
- 167 %121 = fcmp uno double %120, %117
- 168 \<badref\> = br i1 %121, label %122, label %132
- 169 %123 = fadd double %117, %120
- 170 %124 = bitcast double %123 to i64
- 171 %125 = and i64 %124, 9221120237041090560
- 172 %126 = icmp eq i64 %125, 9218868437227405312
- 173 %127 = and i64 %124, 2251799813685247
- 174 %128 = icmp ne i64 %127, 0
- 175 %129 = and i1 %126, %128
- 176 \<badref\> = br i1 %129, label %130, label %138
- 177 %131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %119, %struct.Memory* %106)
- 178 %.pre = load i64, i64* %3, align 8
- 179 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 180 %133 = fcmp ogt double %120, %117
- 181 \<badref\> = br i1 %133, label %138, label %134
- 182 %135 = fcmp olt double %120, %117
- 183 \<badref\> = br i1 %135, label %138, label %136
- 184 %137 = fcmp oeq double %120, %117
- 185 \<badref\> = br i1 %137, label %138, label %142
- 186 %139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]
- 187 %140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]
- 188 %141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]
- 189 store i8 %139, i8* %29, align 1
- 190 store i8 %140, i8* %21, align 1
- 191 store i8 %141, i8* %14, align 1
- 192 \<badref\> = br label %142
- 193 store i8 0, i8* %38, align 1
- 194 store i8 0, i8* %32, align 1
- 195 store i8 0, i8* %26, align 1
- 196 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 197 %143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]
- 198 %144 = phi %struct.Memory* [ %131, %130 ], [ %106, %142 ]
- 199 %145 = load i8, i8* %14, align 1
- 200 %146 = load i8, i8* %29, align 1
- 201 %147 = or i8 %146, %145
- 202 %148 = icmp eq i8 %147, 0
- 203 %149 = zext i1 %148 to i8
- 204 store i8 %149, i8* %DL.i25, align 1
- 205 %150 = zext i1 %148 to i64
- 206 store i64 %150, i64* %RAX.i33, align 8
- 207 %151 = load i64, i64* %6, align 8
- 208 %152 = add i64 %151, 32
- 209 store i64 %152, i64* %6, align 8
- 210 %153 = icmp ugt i64 %151, -33
- 211 %154 = zext i1 %153 to i8
- 212 store i8 %154, i8* %14, align 1
- 213 %155 = trunc i64 %152 to i32
- 214 %156 = and i32 %155, 255
- 215 %157 = tail call i32 @llvm.ctpop.i32(i32 %156)
- 216 %158 = trunc i32 %157 to i8
- 217 %159 = and i8 %158, 1
- 218 %160 = xor i8 %159, 1
- 219 store i8 %160, i8* %21, align 1
- 220 %161 = xor i64 %152, %151
- 221 %162 = lshr i64 %161, 4
- 222 %163 = trunc i64 %162 to i8
- 223 %164 = and i8 %163, 1
- 224 store i8 %164, i8* %26, align 1
- 225 %165 = icmp eq i64 %152, 0
- 226 %166 = zext i1 %165 to i8
- 227 store i8 %166, i8* %29, align 1
- 228 %167 = lshr i64 %152, 63
- 229 %168 = trunc i64 %167 to i8
- 230 store i8 %168, i8* %32, align 1
- 231 %169 = lshr i64 %151, 63
- 232 %170 = xor i64 %167, %169
- 233 %171 = add nuw nsw i64 %170, %167
- 234 %172 = icmp eq i64 %171, 2
- 235 %173 = zext i1 %172 to i8
- 236 store i8 %173, i8* %38, align 1
- 237 %174 = add i64 %143, 14
- 238 store i64 %174, i64* %3, align 8
- 239 %175 = add i64 %151, 40
- 240 %176 = inttoptr i64 %152 to i64*
- 241 %177 = load i64, i64* %176, align 8
- 242 store i64 %177, i64* %RBP.i, align 8
- 243 store i64 %175, i64* %6, align 8
- 244 %178 = add i64 %143, 15
- 245 store i64 %178, i64* %3, align 8
- 246 %179 = inttoptr i64 %175 to i64*
- 247 %180 = load i64, i64* %179, align 8
- 248 store i64 %180, i64* %3, align 8
- 249 %181 = add i64 %151, 48
- 250 store i64 %181, i64* %6, align 8
- 251 ret %struct.Memory* %144
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd6778a60>, {0: {0}, 1: {10}, 2: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 3: {13}, 4: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 5: {9}, 6: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 7: {16, 143, 71}, 8: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 9: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 10: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 11: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 12: {21}, 13: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 14: {23}, 15: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 16: {25}, 17: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 18: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 19: {104, 210, 28}, 20: {105, 173, 211, 148, 29}, 21: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 22: {38, 107, 115, 213, 219, 31}, 23: {32, 108, 214}, 24: {33}, 25: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 26: {35, 228, 110, 112, 50, 216}, 27: {113, 36, 217}, 28: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 29: {38, 107, 115, 213, 219, 31}, 30: {39}, 31: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 32: {101, 198, 41, 170, 117, 221}, 33: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 34: {43}, 35: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 36: {224, 49, 227, 45}, 37: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 38: {47}, 39: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 40: {224, 49, 227, 45}, 41: {35, 228, 110, 112, 50, 216}, 42: {51, 229}, 43: {52, 230}, 44: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 45: {54}, 46: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 47: {8}, 48: {56, 84, 63}, 49: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 50: {58, 85}, 51: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 52: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 53: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 54: {7}, 55: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 56: {56, 84, 63}, 57: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 58: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 59: {73, 66, 134}, 60: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 61: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 62: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 63: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 64: {16, 143, 71}, 65: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 66: {73, 66, 134}, 67: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 68: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 69: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 70: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 71: {1}, 72: {5}, 73: {78}, 74: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 75: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 76: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 77: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 78: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 79: {56, 84, 63}, 80: {58, 85}, 81: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 82: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 83: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 84: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 85: {6}, 86: {233, 90}, 87: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 88: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 89: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 90: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 91: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 92: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 93: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 94: {98}, 95: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 96: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 97: {101, 198, 41, 170, 117, 221}, 98: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 99: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 100: {104, 210, 28}, 101: {105, 173, 211, 148, 29}, 102: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 103: {38, 107, 115, 213, 219, 31}, 104: {32, 108, 214}, 105: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 106: {35, 228, 110, 112, 50, 216}, 107: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 108: {35, 228, 110, 112, 50, 216}, 109: {113, 36, 217}, 110: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 111: {38, 107, 115, 213, 219, 31}, 112: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 113: {101, 198, 41, 170, 117, 221}, 114: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 115: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 116: {120}, 117: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 118: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 119: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 120: {2}, 121: {162, 3, 4, 166, 154, 158}, 122: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 123: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 124: {132, 126}, 125: {127}, 126: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 127: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 128: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 129: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 130: {132, 126}, 131: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 132: {73, 66, 134}, 133: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 134: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 135: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 136: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 137: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 138: {140}, 139: {141}, 140: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 141: {16, 143, 71}, 142: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 143: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 144: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 145: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 146: {105, 173, 211, 148, 29}, 147: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 148: {51, 229}, 149: set(), 150: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 151: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 152: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 153: {151}, 154: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 155: {153}, 156: {162, 3, 4, 166, 154, 158}, 157: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 158: {162, 3, 4, 166, 154, 158}, 159: {11}, 160: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 161: {157}, 162: {162, 3, 4, 166, 154, 158}, 163: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 164: {160}, 165: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 166: {162, 3, 4, 166, 154, 158}, 167: {176, 178, 163, 180}, 168: {164, 172, 177, 179, 181}, 169: {165}, 170: {162, 3, 4, 166, 154, 158}, 171: {167}, 172: {168}, 173: {169}, 174: {101, 198, 41, 170, 117, 221}, 175: {171}, 176: {164, 172, 177, 179, 181}, 177: {105, 173, 211, 148, 29}, 178: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 179: {192, 188, 175}, 180: {176, 178, 163, 180}, 181: {164, 172, 177, 179, 181}, 182: {176, 178, 163, 180}, 183: {164, 172, 177, 179, 181}, 184: {176, 178, 163, 180}, 185: {164, 172, 177, 179, 181}, 186: {182}, 187: {183}, 188: {184}, 189: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 190: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 191: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 192: {192, 188, 175}, 193: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 194: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 195: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 196: {192, 188, 175}, 197: {193, 194}, 198: {193, 194}, 199: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 200: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 201: {197}, 202: {101, 198, 41, 170, 117, 221}, 203: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 204: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 205: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 206: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 207: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 208: {204}, 209: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 210: {206}, 211: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 212: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 213: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 214: {104, 210, 28}, 215: {105, 173, 211, 148, 29}, 216: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 217: {38, 107, 115, 213, 219, 31}, 218: {32, 108, 214}, 219: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 220: {35, 228, 110, 112, 50, 216}, 221: {113, 36, 217}, 222: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 223: {38, 107, 115, 213, 219, 31}, 224: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 225: {101, 198, 41, 170, 117, 221}, 226: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 227: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 228: {224, 49, 227, 45}, 229: {225, 37, 106, 46, 209, 114, 212, 121, 218, 27, 124, 30}, 230: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 231: {224, 49, 227, 45}, 232: {35, 228, 110, 112, 50, 216}, 233: {51, 229}, 234: {52, 230}, 235: {96, 97, 99, 102, 199, 231, 201, 42, 138, 111, 207, 82, 53, 118, 24, 222, 94}, 236: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 237: {233, 90}, 238: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 239: {235}, 240: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 241: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 242: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 243: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 244: {240}, 245: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 246: {129, 68, 136, 75, 236, 92, 80, 17, 144, 242, 87, 60}, 247: {131, 133, 137, 12, 142, 15, 19, 149, 150, 156, 174, 57, 62, 64, 65, 195, 196, 70, 72, 203, 76, 81, 88, 93, 237, 243}, 248: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 249: {245}, 250: {128, 130, 135, 139, 14, 145, 18, 146, 20, 147, 22, 152, 26, 155, 159, 161, 34, 40, 44, 48, 55, 185, 186, 59, 187, 61, 189, 190, 191, 67, 69, 200, 74, 202, 77, 205, 79, 208, 83, 86, 215, 89, 91, 220, 95, 223, 226, 100, 103, 232, 234, 109, 238, 239, 241, 116, 244, 246, 119, 122, 123, 125}, 251: {247}})
Equivalent! frozenset({58, 85}) {80, 50}
Equivalent! frozenset({59, 86}) {81, 51}
Equivalent! frozenset({73, 66, 134}) {66, 59, 132}
Equivalent! frozenset({74, 67, 135}) {67, 60, 133}
Equivalent! frozenset({192, 188, 175}) {192, 179, 196}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd6778a60>, {0: {0}, 1: {10}, 2: {12}, 3: {13}, 4: {14}, 5: {9}, 6: {15}, 7: {16}, 8: {17}, 9: {18}, 10: {72, 19}, 11: {20}, 12: {21}, 13: {22}, 14: {23}, 15: {24}, 16: {25}, 17: {26}, 18: {27}, 19: {28}, 20: {29}, 21: {30}, 22: {31}, 23: {32}, 24: {33}, 25: {34}, 26: {35}, 27: {36}, 28: {37}, 29: {38}, 30: {39}, 31: {40}, 32: {41}, 33: {42}, 34: {43}, 35: {44}, 36: {45}, 37: {46}, 38: {47}, 39: {48}, 40: {49}, 41: {50}, 42: {51}, 43: {52}, 44: {53}, 45: {54}, 46: {55}, 47: {8}, 48: {56}, 49: {57}, 50: {85}, 51: {86}, 52: {60}, 53: {61}, 54: {7}, 55: {62}, 56: {63}, 57: {64}, 58: {72, 65, 133}, 59: {66}, 60: {67}, 61: {68}, 62: {69}, 63: {70}, 64: {71}, 65: {72, 65, 19, 133}, 66: {73}, 67: {74}, 68: {75}, 69: {76}, 70: {77}, 71: {1}, 72: {5}, 73: {78}, 74: {79}, 75: {80}, 76: {81}, 77: {82}, 78: {83}, 79: {84}, 80: {58}, 81: {59}, 82: {87}, 83: {88}, 84: {89}, 85: {6}, 86: {90}, 87: {91}, 88: {92}, 89: {93}, 90: {94}, 91: {95}, 92: {96}, 93: {97}, 94: {98}, 95: {99}, 96: {100}, 97: {101}, 98: {102}, 99: {103}, 100: {104}, 101: {105}, 102: {106}, 103: {107}, 104: {108}, 105: {109}, 106: {110}, 107: {111}, 108: {112}, 109: {113}, 110: {114}, 111: {115}, 112: {116}, 113: {117}, 114: {118}, 115: {119}, 116: {120}, 117: {121}, 118: {122}, 119: {232, 123, 189, 55}, 120: {2}, 121: {3}, 122: {124}, 123: {125}, 124: {126}, 125: {127}, 126: {128}, 127: {129}, 128: {130}, 129: {131}, 130: {132}, 131: {72, 65, 133}, 132: {134}, 133: {135}, 134: {136}, 135: {137}, 136: {138}, 137: {139}, 138: {140}, 139: {141}, 140: {142}, 141: {143}, 142: {144}, 143: {145}, 144: {146}, 145: {147}, 146: {173, 148}, 147: {149}, 148: set(), 149: set(), 150: set(), 151: set(), 152: set(), 153: set(), 154: set(), 155: {153}, 156: {154}, 157: {155}, 158: {4}, 159: {11}, 160: {156}, 161: {157}, 162: {158}, 163: {159}, 164: {160}, 165: {161}, 166: set(), 167: set(), 168: set(), 169: set(), 170: set(), 171: set(), 172: set(), 173: set(), 174: set(), 175: set(), 176: set(), 177: {173}, 178: {174}, 179: {188}, 180: set(), 181: set(), 182: set(), 183: set(), 184: set(), 185: set(), 186: {182}, 187: {183}, 188: {184}, 189: {185}, 190: {186}, 191: {187}, 192: {192}, 193: {232, 123, 189, 55}, 194: {48, 226, 190, 122}, 195: {40, 116, 220, 191}, 196: {175}, 197: {193}, 198: {194}, 199: {195}, 200: {196}, 201: {197}, 202: {198}, 203: {199}, 204: {200}, 205: {201}, 206: {202}, 207: {203}, 208: {204}, 209: {205}, 210: {206}, 211: {207}, 212: {208}, 213: {209}, 214: {210}, 215: {211}, 216: {212}, 217: {213}, 218: {214}, 219: {215}, 220: {216}, 221: {217}, 222: {218}, 223: {219}, 224: {220}, 225: {221}, 226: {222}, 227: {223}, 228: {224}, 229: {225}, 230: {226}, 231: {227}, 232: {228}, 233: {229}, 234: {230}, 235: {231}, 236: {232}, 237: {233}, 238: {234}, 239: {235}, 240: {236}, 241: {237}, 242: {238}, 243: {239}, 244: {240}, 245: {241}, 246: {242}, 247: {243}, 248: {244}, 249: {245}, 250: {246}, 251: {247}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
MORE 10 POT: 2
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
EXACT 54 getelementptr getelementptr
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
MORE 58 POT: 3
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
MORE 65 POT: 4
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 load load
EXACT 70 store store
EXACT 71 getelementptr getelementptr
EXACT 72 getelementptr getelementptr
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 zext zext
EXACT 78 store store
EXACT 79 add add
EXACT 80 add add
EXACT 81 store store
EXACT 82 inttoptr inttoptr
EXACT 83 load load
EXACT 84 store store
EXACT 85 getelementptr getelementptr
EXACT 86 add add
EXACT 87 store store
EXACT 88 inttoptr inttoptr
EXACT 89 load load
EXACT 90 zext zext
EXACT 91 store store
EXACT 92 zext zext
EXACT 93 zext zext
EXACT 94 sub sub
EXACT 95 zext zext
EXACT 96 store store
EXACT 97 icmp icmp
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 and and
EXACT 101 tail tail
EXACT 102 trunc trunc
EXACT 103 and and
EXACT 104 xor xor
EXACT 105 store store
EXACT 106 xor xor
EXACT 107 zext zext
EXACT 108 xor xor
EXACT 109 lshr lshr
EXACT 110 trunc trunc
EXACT 111 and and
EXACT 112 store store
EXACT 113 icmp icmp
EXACT 114 zext zext
EXACT 115 store store
EXACT 116 lshr lshr
EXACT 117 trunc trunc
EXACT 118 store store
MORE 119 POT: 4
EXACT 120 getelementptr getelementptr
EXACT 121 bitcast bitcast
EXACT 122 trunc trunc
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 store store
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 load load
EXACT 130 add add
MORE 131 POT: 3
EXACT 132 add add
EXACT 133 store store
EXACT 134 inttoptr inttoptr
EXACT 135 load load
EXACT 136 zext zext
EXACT 137 store store
EXACT 138 add add
EXACT 139 add add
EXACT 140 load load
EXACT 141 add add
EXACT 142 inttoptr inttoptr
EXACT 143 store store
EXACT 144 store store
EXACT 145 store store
MORE 146 POT: 2
EXACT 147 load load
NO MATCH 148
NO MATCH 149
NO MATCH 150
NO MATCH 151
NO MATCH 152
NO MATCH 153
NO MATCH 154
EXACT 155 getelementptr getelementptr
EXACT 156 bitcast bitcast
EXACT 157 store store
EXACT 158 bitcast bitcast
EXACT 159 getelementptr getelementptr
EXACT 160 load load
EXACT 161 sitofp sitofp
EXACT 162 bitcast bitcast
EXACT 163 store store
EXACT 164 add add
EXACT 165 store store
NO MATCH 166
NO MATCH 167
NO MATCH 168
NO MATCH 169
NO MATCH 170
NO MATCH 171
NO MATCH 172
NO MATCH 173
NO MATCH 174
NO MATCH 175
NO MATCH 176
EXACT 177 tail tail
EXACT 178 load load
EXACT 179 br br
NO MATCH 180
NO MATCH 181
NO MATCH 182
NO MATCH 183
NO MATCH 184
NO MATCH 185
EXACT 186 phi phi
EXACT 187 phi phi
EXACT 188 phi phi
EXACT 189 store store
EXACT 190 store store
EXACT 191 store store
EXACT 192 br br
MORE 193 POT: 4
MORE 194 POT: 4
MORE 195 POT: 4
EXACT 196 br br
EXACT 197 phi phi
EXACT 198 phi phi
EXACT 199 load load
EXACT 200 load load
EXACT 201 or or
EXACT 202 icmp icmp
EXACT 203 zext zext
EXACT 204 store store
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 load load
EXACT 208 add add
EXACT 209 store store
EXACT 210 icmp icmp
EXACT 211 zext zext
EXACT 212 store store
EXACT 213 trunc trunc
EXACT 214 and and
EXACT 215 tail tail
EXACT 216 trunc trunc
EXACT 217 and and
EXACT 218 xor xor
EXACT 219 store store
EXACT 220 xor xor
EXACT 221 lshr lshr
EXACT 222 trunc trunc
EXACT 223 and and
EXACT 224 store store
EXACT 225 icmp icmp
EXACT 226 zext zext
EXACT 227 store store
EXACT 228 lshr lshr
EXACT 229 trunc trunc
EXACT 230 store store
EXACT 231 lshr lshr
EXACT 232 xor xor
EXACT 233 add add
EXACT 234 icmp icmp
EXACT 235 zext zext
EXACT 236 store store
EXACT 237 add add
EXACT 238 store store
EXACT 239 add add
EXACT 240 inttoptr inttoptr
EXACT 241 load load
EXACT 242 store store
EXACT 243 store store
EXACT 244 add add
EXACT 245 store store
EXACT 246 inttoptr inttoptr
EXACT 247 load load
EXACT 248 store store
EXACT 249 add add
EXACT 250 store store
EXACT 251 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 3 %DL = bitcast %union.anon* %4 to i8*
- 4 %EAX = bitcast %union.anon* %3 to i32*
- 5 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 6 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 7 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 8 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 12 %6 = load i64, i64* %RBP, align 8
- 13 %7 = add i64 %1, 1
- 14 store i64 %7, i64* %PC, align 8
- 15 %8 = load i64, i64* %RSP, align 8
- 16 %9 = add i64 %8, -8
- 17 %10 = inttoptr i64 %9 to i64*
- 18 store i64 %6, i64* %10, align 8
- 19 %11 = load i64, i64* %PC, align 8
- 20 store i64 %9, i64* %RBP, align 8
- 21 %12 = add i64 %8, -40
- 22 store i64 %12, i64* %RSP, align 8
- 23 %13 = icmp ult i64 %9, 32
- 24 %14 = zext i1 %13 to i8
- 25 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 26 store i8 %14, i8* %15, align 1
- 27 %16 = trunc i64 %12 to i32
- 28 %17 = and i32 %16, 255
- 29 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 30 %19 = trunc i32 %18 to i8
- 31 %20 = and i8 %19, 1
- 32 %21 = xor i8 %20, 1
- 33 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 34 store i8 %21, i8* %22, align 1
- 35 %23 = xor i64 %9, %12
- 36 %24 = lshr i64 %23, 4
- 37 %25 = trunc i64 %24 to i8
- 38 %26 = and i8 %25, 1
- 39 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 40 store i8 %26, i8* %27, align 1
- 41 %28 = icmp eq i64 %12, 0
- 42 %29 = zext i1 %28 to i8
- 43 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 44 store i8 %29, i8* %30, align 1
- 45 %31 = lshr i64 %12, 63
- 46 %32 = trunc i64 %31 to i8
- 47 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 48 store i8 %32, i8* %33, align 1
- 49 %34 = lshr i64 %9, 63
- 50 %35 = xor i64 %31, %34
- 51 %36 = add nuw nsw i64 %35, %34
- 52 %37 = icmp eq i64 %36, 2
- 53 %38 = zext i1 %37 to i8
- 54 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 55 store i8 %38, i8* %39, align 1
- 56 %40 = add i64 %8, -16
- 57 %41 = load i64, i64* %RDI, align 8
- 58 %42 = add i64 %11, 11
- 59 store i64 %42, i64* %PC, align 8
- 60 %43 = inttoptr i64 %40 to i64*
- 61 store i64 %41, i64* %43, align 8
- 62 %44 = load i64, i64* %RBP, align 8
- 63 %45 = add i64 %44, -16
- 64 %46 = load i64, i64* %RSI, align 8
- 65 %47 = load i64, i64* %PC, align 8
- 66 %48 = add i64 %47, 4
- 67 store i64 %48, i64* %PC, align 8
- 68 %49 = inttoptr i64 %45 to i64*
- 69 store i64 %46, i64* %49, align 8
- 70 %50 = load i64, i64* %RBP, align 8
- 71 %51 = add i64 %50, -8
- 72 %52 = load i64, i64* %PC, align 8
- 73 %53 = add i64 %52, 4
- 74 store i64 %53, i64* %PC, align 8
- 75 %54 = inttoptr i64 %51 to i64*
- 76 %55 = load i64, i64* %54, align 8
- 77 store i64 %55, i64* %RSI, align 8
- 78 %56 = add i64 %52, 7
- 79 store i64 %56, i64* %PC, align 8
- 80 %57 = inttoptr i64 %55 to i8*
- 81 %58 = load i8, i8* %57, align 1
- 82 %59 = zext i8 %58 to i64
- 83 store i64 %59, i64* %RAX, align 8
- 84 %60 = add i64 %50, -16
- 85 %61 = add i64 %52, 11
- 86 store i64 %61, i64* %PC, align 8
- 87 %62 = inttoptr i64 %60 to i64*
- 88 %63 = load i64, i64* %62, align 8
- 89 store i64 %63, i64* %RSI, align 8
- 90 %64 = add i64 %52, 14
- 91 store i64 %64, i64* %PC, align 8
- 92 %65 = inttoptr i64 %63 to i8*
- 93 %66 = load i8, i8* %65, align 1
- 94 %67 = zext i8 %66 to i64
- 95 store i64 %67, i64* %RCX, align 8
- 96 %68 = zext i8 %66 to i32
- 97 %69 = zext i8 %58 to i32
- 98 %70 = sub nsw i32 %69, %68
- 99 %71 = zext i32 %70 to i64
- 100 store i64 %71, i64* %RAX, align 8
- 101 %72 = icmp ult i8 %58, %66
- 102 %73 = zext i1 %72 to i8
- 103 store i8 %73, i8* %15, align 1
- 104 %74 = and i32 %70, 255
- 105 %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #12
- 106 %76 = trunc i32 %75 to i8
- 107 %77 = and i8 %76, 1
- 108 %78 = xor i8 %77, 1
- 109 store i8 %78, i8* %22, align 1
- 110 %79 = xor i8 %66, %58
- 111 %80 = zext i8 %79 to i32
- 112 %81 = xor i32 %80, %70
- 113 %82 = lshr i32 %81, 4
- 114 %83 = trunc i32 %82 to i8
- 115 %84 = and i8 %83, 1
- 116 store i8 %84, i8* %27, align 1
- 117 %85 = icmp eq i32 %70, 0
- 118 %86 = zext i1 %85 to i8
- 119 store i8 %86, i8* %30, align 1
- 120 %87 = lshr i32 %70, 31
- 121 %88 = trunc i32 %87 to i8
- 122 store i8 %88, i8* %33, align 1
- 123 store i8 0, i8* %39, align 1
- 124 %89 = trunc i32 %70 to i8
- 125 store i8 %89, i8* %DL, align 1
- 126 %90 = add i64 %50, -17
- 127 %91 = add i64 %52, 21
- 128 store i64 %91, i64* %PC, align 8
- 129 %92 = inttoptr i64 %90 to i8*
- 130 store i8 %89, i8* %92, align 1
- 131 %93 = load i64, i64* %RBP, align 8
- 132 %94 = add i64 %93, -17
- 133 %95 = load i64, i64* %PC, align 8
- 134 %96 = add i64 %95, 4
- 135 store i64 %96, i64* %PC, align 8
- 136 %97 = inttoptr i64 %94 to i8*
- 137 %98 = load i8, i8* %97, align 1
- 138 %99 = zext i8 %98 to i64
- 139 store i64 %99, i64* %RDI, align 8
- 140 %100 = add i64 %95, -72757
- 141 %101 = add i64 %95, 9
- 142 %102 = load i64, i64* %RSP, align 8
- 143 %103 = add i64 %102, -8
- 144 %104 = inttoptr i64 %103 to i64*
- 145 store i64 %101, i64* %104, align 8
- 146 store i64 %103, i64* %RSP, align 8
- 147 store i64 %100, i64* %PC, align 8
- 148 %105 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 149 %106 = load i64, i64* %PC, align 8
- 150 %107 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to i64*), align 8
- 151 %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 152 store i64 %107, i64* %108, align 1
- 153 %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 154 %110 = bitcast i64* %109 to double*
- 155 store double 0.000000e+00, double* %110, align 1
- 156 %111 = load i32, i32* %EAX, align 4
- 157 %112 = sitofp i32 %111 to double
- 158 %113 = bitcast %union.VectorReg* %5 to double*
- 159 store double %112, double* %113, align 1
- 160 %114 = add i64 %106, 16
- 161 store i64 %114, i64* %PC, align 8
- 162 %115 = bitcast i64 %107 to double
- 163 %116 = fcmp uno double %115, %112
- 164 \<badref\> = br i1 %116, label %117, label %127
- 165 %118 = fadd double %112, %115
- 166 %119 = bitcast double %118 to i64
- 167 %120 = and i64 %119, 9221120237041090560
- 168 %121 = icmp eq i64 %120, 9218868437227405312
- 169 %122 = and i64 %119, 2251799813685247
- 170 %123 = icmp ne i64 %122, 0
- 171 %124 = and i1 %121, %123
- 172 \<badref\> = br i1 %124, label %125, label %133
- 173 %126 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %114, %struct.Memory* %105) #13
- 174 %.pre = load i64, i64* %PC, align 8
- 175 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 176 %128 = fcmp ogt double %115, %112
- 177 \<badref\> = br i1 %128, label %133, label %129
- 178 %130 = fcmp olt double %115, %112
- 179 \<badref\> = br i1 %130, label %133, label %131
- 180 %132 = fcmp oeq double %115, %112
- 181 \<badref\> = br i1 %132, label %133, label %137
- 182 %134 = phi i8 [ 0, %127 ], [ 0, %129 ], [ 1, %131 ], [ 1, %117 ]
- 183 %135 = phi i8 [ 0, %127 ], [ 0, %129 ], [ 0, %131 ], [ 1, %117 ]
- 184 %136 = phi i8 [ 0, %127 ], [ 1, %129 ], [ 0, %131 ], [ 1, %117 ]
- 185 store i8 %134, i8* %30, align 1
- 186 store i8 %135, i8* %22, align 1
- 187 store i8 %136, i8* %15, align 1
- 188 \<badref\> = br label %137
- 189 store i8 0, i8* %39, align 1
- 190 store i8 0, i8* %33, align 1
- 191 store i8 0, i8* %27, align 1
- 192 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 193 %138 = phi i64 [ %.pre, %125 ], [ %114, %137 ]
- 194 %139 = phi %struct.Memory* [ %126, %125 ], [ %105, %137 ]
- 195 %140 = load i8, i8* %15, align 1
- 196 %141 = load i8, i8* %30, align 1
- 197 %142 = or i8 %141, %140
- 198 %143 = icmp eq i8 %142, 0
- 199 %144 = zext i1 %143 to i8
- 200 store i8 %144, i8* %DL, align 1
- 201 %145 = zext i1 %143 to i64
- 202 store i64 %145, i64* %RAX, align 8
- 203 %146 = load i64, i64* %RSP, align 8
- 204 %147 = add i64 %146, 32
- 205 store i64 %147, i64* %RSP, align 8
- 206 %148 = icmp ugt i64 %146, -33
- 207 %149 = zext i1 %148 to i8
- 208 store i8 %149, i8* %15, align 1
- 209 %150 = trunc i64 %147 to i32
- 210 %151 = and i32 %150, 255
- 211 %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #12
- 212 %153 = trunc i32 %152 to i8
- 213 %154 = and i8 %153, 1
- 214 %155 = xor i8 %154, 1
- 215 store i8 %155, i8* %22, align 1
- 216 %156 = xor i64 %147, %146
- 217 %157 = lshr i64 %156, 4
- 218 %158 = trunc i64 %157 to i8
- 219 %159 = and i8 %158, 1
- 220 store i8 %159, i8* %27, align 1
- 221 %160 = icmp eq i64 %147, 0
- 222 %161 = zext i1 %160 to i8
- 223 store i8 %161, i8* %30, align 1
- 224 %162 = lshr i64 %147, 63
- 225 %163 = trunc i64 %162 to i8
- 226 store i8 %163, i8* %33, align 1
- 227 %164 = lshr i64 %146, 63
- 228 %165 = xor i64 %162, %164
- 229 %166 = add nuw nsw i64 %165, %162
- 230 %167 = icmp eq i64 %166, 2
- 231 %168 = zext i1 %167 to i8
- 232 store i8 %168, i8* %39, align 1
- 233 %169 = add i64 %138, 14
- 234 store i64 %169, i64* %PC, align 8
- 235 %170 = add i64 %146, 40
- 236 %171 = inttoptr i64 %147 to i64*
- 237 %172 = load i64, i64* %171, align 8
- 238 store i64 %172, i64* %RBP, align 8
- 239 store i64 %170, i64* %RSP, align 8
- 240 %173 = add i64 %138, 15
- 241 store i64 %173, i64* %PC, align 8
- 242 %174 = inttoptr i64 %170 to i64*
- 243 %175 = load i64, i64* %174, align 8
- 244 store i64 %175, i64* %PC, align 8
- 245 %176 = add i64 %146, 48
- 246 store i64 %176, i64* %RSP, align 8
- 247 ret %struct.Memory* %139
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd67788c8>, {0: {0}, 1: {71}, 2: {120}, 3: {162, 166, 170, 121, 156, 158}, 4: {162, 166, 170, 121, 156, 158}, 5: {72}, 6: {85}, 7: {54}, 8: {47}, 9: {5}, 10: {1}, 11: {159}, 12: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 13: {3}, 14: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 15: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 16: {64, 141, 7}, 17: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 18: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 19: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 20: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 21: {12}, 22: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 23: {14}, 24: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 25: {16}, 26: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 27: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 28: {19, 100, 214}, 29: {101, 177, 146, 20, 215}, 30: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 31: {103, 111, 22, 217, 29, 223}, 32: {104, 218, 23}, 33: {24}, 34: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 35: {232, 41, 106, 108, 26, 220}, 36: {221, 27, 109}, 37: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 38: {103, 111, 22, 217, 29, 223}, 39: {30}, 40: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 41: {32, 97, 225, 202, 174, 113}, 42: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 43: {34}, 44: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 45: {40, 36, 228, 231}, 46: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 47: {38}, 48: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 49: {40, 36, 228, 231}, 50: {232, 41, 106, 108, 26, 220}, 51: {233, 42, 148}, 52: {234, 43}, 53: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 54: {45}, 55: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 56: {48, 56, 79}, 57: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 58: {80, 50}, 59: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 60: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 61: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 62: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 63: {48, 56, 79}, 64: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 65: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 66: {66, 59, 132}, 67: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 68: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 69: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 70: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 71: {64, 141, 7}, 72: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 73: {66, 59, 132}, 74: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 75: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 76: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 77: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 78: {73}, 79: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 80: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 81: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 82: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 83: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 84: {48, 56, 79}, 85: {80, 50}, 86: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 87: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 88: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 89: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 90: {237, 86}, 91: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 92: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 93: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 94: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 95: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 96: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 97: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 98: {94}, 99: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 100: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 101: {32, 97, 225, 202, 174, 113}, 102: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 103: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 104: {19, 100, 214}, 105: {101, 177, 146, 20, 215}, 106: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 107: {103, 111, 22, 217, 29, 223}, 108: {104, 218, 23}, 109: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 110: {232, 41, 106, 108, 26, 220}, 111: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 112: {232, 41, 106, 108, 26, 220}, 113: {221, 27, 109}, 114: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 115: {103, 111, 22, 217, 29, 223}, 116: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 117: {32, 97, 225, 202, 174, 113}, 118: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 119: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 120: {116}, 121: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 122: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 123: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 124: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 125: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 126: {130, 124}, 127: {125}, 128: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 129: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 130: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 131: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 132: {130, 124}, 133: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 134: {66, 59, 132}, 135: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 136: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 137: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 138: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 139: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 140: {138}, 141: {139}, 142: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 143: {64, 141, 7}, 144: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 145: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 146: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 147: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 148: {101, 177, 146, 20, 215}, 149: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 150: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 151: {153}, 152: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 153: {155}, 154: {162, 166, 170, 121, 156, 158}, 155: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 156: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 157: {161}, 158: {162, 166, 170, 121, 156, 158}, 159: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 160: {164}, 161: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 162: {162, 166, 170, 121, 156, 158}, 163: {184, 180, 182, 167}, 164: {168, 176, 181, 183, 185}, 165: {169}, 166: {162, 166, 170, 121, 156, 158}, 167: {171}, 168: {172}, 169: {173}, 170: {32, 97, 225, 202, 174, 113}, 171: {175}, 172: {168, 176, 181, 183, 185}, 173: {101, 177, 146, 20, 215}, 174: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 175: {192, 179, 196}, 176: {184, 180, 182, 167}, 177: {168, 176, 181, 183, 185}, 178: {184, 180, 182, 167}, 179: {168, 176, 181, 183, 185}, 180: {184, 180, 182, 167}, 181: {168, 176, 181, 183, 185}, 182: {186}, 183: {187}, 184: {188}, 185: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 186: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 187: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 188: {192, 179, 196}, 189: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 190: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 191: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 192: {192, 179, 196}, 193: {197, 198}, 194: {197, 198}, 195: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 196: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 197: {201}, 198: {32, 97, 225, 202, 174, 113}, 199: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 200: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 201: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 202: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 203: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 204: {208}, 205: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 206: {210}, 207: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 208: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 209: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 210: {19, 100, 214}, 211: {101, 177, 146, 20, 215}, 212: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 213: {103, 111, 22, 217, 29, 223}, 214: {104, 218, 23}, 215: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 216: {232, 41, 106, 108, 26, 220}, 217: {221, 27, 109}, 218: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 219: {103, 111, 22, 217, 29, 223}, 220: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 221: {32, 97, 225, 202, 174, 113}, 222: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 223: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 224: {40, 36, 228, 231}, 225: {37, 102, 229, 110, 18, 21, 117, 213, 216, 122, 28, 222}, 226: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 227: {40, 36, 228, 231}, 228: {232, 41, 106, 108, 26, 220}, 229: {233, 42, 148}, 230: {234, 43}, 231: {33, 98, 226, 136, 107, 44, 77, 203, 15, 205, 235, 114, 211, 90, 92, 93, 95}, 232: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 233: {237, 86}, 234: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 235: {239}, 236: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 237: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 238: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 239: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 240: {244}, 241: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 242: {68, 134, 8, 75, 142, 240, 82, 52, 246, 151, 88, 61, 127}, 243: {129, 2, 131, 6, 135, 10, 140, 147, 152, 160, 49, 178, 55, 57, 58, 63, 65, 69, 199, 200, 76, 207, 83, 89, 241, 247}, 244: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 245: {249}, 246: {128, 4, 133, 9, 137, 11, 13, 143, 144, 17, 145, 150, 25, 154, 157, 31, 35, 163, 165, 39, 46, 51, 53, 60, 189, 62, 190, 191, 193, 194, 67, 195, 70, 74, 204, 78, 206, 81, 209, 84, 212, 87, 91, 219, 96, 224, 99, 227, 230, 105, 236, 238, 112, 242, 115, 243, 245, 118, 119, 248, 250, 123, 126}, 247: {251}})
Equivalent! frozenset({80, 50}) {58, 85}
Equivalent! frozenset({81, 51}) {59, 86}
Equivalent! frozenset({66, 59, 132}) {73, 66, 134}
Equivalent! frozenset({67, 60, 133}) {74, 67, 135}
Equivalent! frozenset({184, 180, 182, 167}) {176, 178, 163, 180}
Equivalent! frozenset({168, 185, 181, 183}) {177, 179, 164, 181}
Equivalent! frozenset({192, 179, 196}) {192, 188, 175}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd67788c8>, {0: {0}, 1: {71}, 2: {120}, 3: {121}, 4: {158}, 5: {72}, 6: {85}, 7: {54}, 8: {47}, 9: {5}, 10: {1}, 11: {159}, 12: {2}, 13: {3}, 14: {4}, 15: {6}, 16: {7}, 17: {8}, 18: {9}, 19: {65, 10}, 20: {11}, 21: {12}, 22: {13}, 23: {14}, 24: {15}, 25: {16}, 26: {17}, 27: {18}, 28: {19}, 29: {20}, 30: {21}, 31: {22}, 32: {23}, 33: {24}, 34: {25}, 35: {26}, 36: {27}, 37: {28}, 38: {29}, 39: {30}, 40: {31}, 41: {32}, 42: {33}, 43: {34}, 44: {35}, 45: {36}, 46: {37}, 47: {38}, 48: {39}, 49: {40}, 50: {41}, 51: {42}, 52: {43}, 53: {44}, 54: {45}, 55: {46}, 56: {48}, 57: {49}, 58: {80}, 59: {81}, 60: {52}, 61: {53}, 62: {55}, 63: {56}, 64: {57}, 65: {65, 58, 131}, 66: {59}, 67: {60}, 68: {61}, 69: {62}, 70: {63}, 71: {64}, 72: {65, 10, 131, 58}, 73: {66}, 74: {67}, 75: {68}, 76: {69}, 77: {70}, 78: {73}, 79: {74}, 80: {75}, 81: {76}, 82: {77}, 83: {78}, 84: {79}, 85: {50}, 86: {51}, 87: {82}, 88: {83}, 89: {84}, 90: {86}, 91: {87}, 92: {88}, 93: {89}, 94: {90}, 95: {91}, 96: {92}, 97: {93}, 98: {94}, 99: {95}, 100: {96}, 101: {97}, 102: {98}, 103: {99}, 104: {100}, 105: {101}, 106: {102}, 107: {103}, 108: {104}, 109: {105}, 110: {106}, 111: {107}, 112: {108}, 113: {109}, 114: {110}, 115: {111}, 116: {112}, 117: {113}, 118: {114}, 119: {115}, 120: {116}, 121: {117}, 122: {118}, 123: {193, 236, 46, 119}, 124: {122}, 125: {123}, 126: {124}, 127: {125}, 128: {126}, 129: {127}, 130: {128}, 131: {129}, 132: {130}, 133: {65, 58, 131}, 134: {132}, 135: {133}, 136: {134}, 137: {135}, 138: {136}, 139: {137}, 140: {138}, 141: {139}, 142: {140}, 143: {141}, 144: {142}, 145: {143}, 146: {144}, 147: {145}, 148: {177, 146}, 149: {147}, 150: {152}, 151: {153}, 152: {154}, 153: {155}, 154: {156}, 155: {157}, 156: {160}, 157: {161}, 158: {162}, 159: {163}, 160: {164}, 161: {165}, 162: {166}, 163: {182}, 164: {181}, 165: {169}, 166: {170}, 167: {171}, 168: {172}, 169: {173}, 170: {174}, 171: {175}, 172: {176}, 173: {177}, 174: {178}, 175: {196}, 176: {184}, 177: {168}, 178: {180}, 179: {185}, 180: {167}, 181: {183}, 182: {186}, 183: {187}, 184: {188}, 185: {189}, 186: {190}, 187: {191}, 188: {179}, 189: {193, 236, 46, 119}, 190: {194, 230, 118, 39}, 191: {224, 195, 112, 31}, 192: {192}, 193: {197}, 194: {198}, 195: {199}, 196: {200}, 197: {201}, 198: {202}, 199: {203}, 200: {204}, 201: {205}, 202: {206}, 203: {207}, 204: {208}, 205: {209}, 206: {210}, 207: {211}, 208: {212}, 209: {213}, 210: {214}, 211: {215}, 212: {216}, 213: {217}, 214: {218}, 215: {219}, 216: {220}, 217: {221}, 218: {222}, 219: {223}, 220: {224}, 221: {225}, 222: {226}, 223: {227}, 224: {228}, 225: {229}, 226: {230}, 227: {231}, 228: {232}, 229: {233}, 230: {234}, 231: {235}, 232: {236}, 233: {237}, 234: {238}, 235: {239}, 236: {240}, 237: {241}, 238: {242}, 239: {243}, 240: {244}, 241: {245}, 242: {246}, 243: {247}, 244: {248}, 245: {249}, 246: {250}, 247: {251}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 bitcast bitcast
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 store store
EXACT 15 load load
EXACT 16 add add
EXACT 17 inttoptr inttoptr
EXACT 18 store store
MORE 19 POT: 2
EXACT 20 store store
EXACT 21 add add
EXACT 22 store store
EXACT 23 icmp icmp
EXACT 24 zext zext
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 tail tail
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 xor xor
EXACT 33 getelementptr getelementptr
EXACT 34 store store
EXACT 35 xor xor
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 and and
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 icmp icmp
EXACT 42 zext zext
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 lshr lshr
EXACT 46 trunc trunc
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 xor xor
EXACT 51 add add
EXACT 52 icmp icmp
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 add add
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 load load
EXACT 63 add add
EXACT 64 load load
MORE 65 POT: 3
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 store store
EXACT 70 load load
EXACT 71 add add
MORE 72 POT: 4
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 store store
EXACT 78 add add
EXACT 79 store store
EXACT 80 inttoptr inttoptr
EXACT 81 load load
EXACT 82 zext zext
EXACT 83 store store
EXACT 84 add add
EXACT 85 add add
EXACT 86 store store
EXACT 87 inttoptr inttoptr
EXACT 88 load load
EXACT 89 store store
EXACT 90 add add
EXACT 91 store store
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 zext zext
EXACT 95 store store
EXACT 96 zext zext
EXACT 97 zext zext
EXACT 98 sub sub
EXACT 99 zext zext
EXACT 100 store store
EXACT 101 icmp icmp
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 and and
EXACT 105 tail tail
EXACT 106 trunc trunc
EXACT 107 and and
EXACT 108 xor xor
EXACT 109 store store
EXACT 110 xor xor
EXACT 111 zext zext
EXACT 112 xor xor
EXACT 113 lshr lshr
EXACT 114 trunc trunc
EXACT 115 and and
EXACT 116 store store
EXACT 117 icmp icmp
EXACT 118 zext zext
EXACT 119 store store
EXACT 120 lshr lshr
EXACT 121 trunc trunc
EXACT 122 store store
MORE 123 POT: 4
EXACT 124 trunc trunc
EXACT 125 store store
EXACT 126 add add
EXACT 127 add add
EXACT 128 store store
EXACT 129 inttoptr inttoptr
EXACT 130 store store
EXACT 131 load load
EXACT 132 add add
MORE 133 POT: 3
EXACT 134 add add
EXACT 135 store store
EXACT 136 inttoptr inttoptr
EXACT 137 load load
EXACT 138 zext zext
EXACT 139 store store
EXACT 140 add add
EXACT 141 add add
EXACT 142 load load
EXACT 143 add add
EXACT 144 inttoptr inttoptr
EXACT 145 store store
EXACT 146 store store
EXACT 147 store store
MORE 148 POT: 2
EXACT 149 load load
EXACT 150 load load
EXACT 151 getelementptr getelementptr
EXACT 152 store store
EXACT 153 getelementptr getelementptr
EXACT 154 bitcast bitcast
EXACT 155 store store
EXACT 156 load load
EXACT 157 sitofp sitofp
EXACT 158 bitcast bitcast
EXACT 159 store store
EXACT 160 add add
EXACT 161 store store
EXACT 162 bitcast bitcast
EXACT 163 fcmp fcmp
EXACT 164 br br
EXACT 165 fadd fadd
EXACT 166 bitcast bitcast
EXACT 167 and and
EXACT 168 icmp icmp
EXACT 169 and and
EXACT 170 icmp icmp
EXACT 171 and and
EXACT 172 br br
EXACT 173 tail tail
EXACT 174 load load
EXACT 175 br br
EXACT 176 fcmp fcmp
EXACT 177 br br
EXACT 178 fcmp fcmp
EXACT 179 br br
EXACT 180 fcmp fcmp
EXACT 181 br br
EXACT 182 phi phi
EXACT 183 phi phi
EXACT 184 phi phi
EXACT 185 store store
EXACT 186 store store
EXACT 187 store store
EXACT 188 br br
MORE 189 POT: 4
MORE 190 POT: 4
MORE 191 POT: 4
EXACT 192 br br
EXACT 193 phi phi
EXACT 194 phi phi
EXACT 195 load load
EXACT 196 load load
EXACT 197 or or
EXACT 198 icmp icmp
EXACT 199 zext zext
EXACT 200 store store
EXACT 201 zext zext
EXACT 202 store store
EXACT 203 load load
EXACT 204 add add
EXACT 205 store store
EXACT 206 icmp icmp
EXACT 207 zext zext
EXACT 208 store store
EXACT 209 trunc trunc
EXACT 210 and and
EXACT 211 tail tail
EXACT 212 trunc trunc
EXACT 213 and and
EXACT 214 xor xor
EXACT 215 store store
EXACT 216 xor xor
EXACT 217 lshr lshr
EXACT 218 trunc trunc
EXACT 219 and and
EXACT 220 store store
EXACT 221 icmp icmp
EXACT 222 zext zext
EXACT 223 store store
EXACT 224 lshr lshr
EXACT 225 trunc trunc
EXACT 226 store store
EXACT 227 lshr lshr
EXACT 228 xor xor
EXACT 229 add add
EXACT 230 icmp icmp
EXACT 231 zext zext
EXACT 232 store store
EXACT 233 add add
EXACT 234 store store
EXACT 235 add add
EXACT 236 inttoptr inttoptr
EXACT 237 load load
EXACT 238 store store
EXACT 239 store store
EXACT 240 add add
EXACT 241 store store
EXACT 242 inttoptr inttoptr
EXACT 243 load load
EXACT 244 store store
EXACT 245 add add
EXACT 246 store store
EXACT 247 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i42, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i39, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i39, align 8', '%RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i8*', '%58 = load i8, i8* %57, align 1', '%59 = zext i8 %58 to i64', 'store i64 %59, i64* %RAX.i33, align 8', '%60 = add i64 %49, -16', '%61 = add i64 %51, 11', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %60 to i64*', '%63 = load i64, i64* %62, align 8', 'store i64 %63, i64* %RSI.i39, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%64 = add i64 %51, 14', 'store i64 %64, i64* %3, align 8', '%65 = inttoptr i64 %63 to i8*', '%66 = load i8, i8* %65, align 1', '%67 = zext i8 %66 to i64', 'store i64 %67, i64* %RCX.i, align 8', '%68 = zext i8 %66 to i32', '%69 = zext i8 %58 to i32', '%70 = sub nsw i32 %69, %68', '%71 = zext i32 %70 to i64', 'store i64 %71, i64* %RAX.i33, align 8', '%72 = icmp ult i8 %58, %66', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %14, align 1', '%74 = and i32 %70, 255', '%75 = tail call i32 @llvm.ctpop.i32(i32 %74)', '%76 = trunc i32 %75 to i8', '%77 = and i8 %76, 1', '%78 = xor i8 %77, 1', 'store i8 %78, i8* %21, align 1', '%79 = xor i8 %66, %58', '%80 = zext i8 %79 to i32', '%81 = xor i32 %80, %70', '%82 = lshr i32 %81, 4', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', 'store i8 %84, i8* %26, align 1', '%85 = icmp eq i32 %70, 0', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %29, align 1', '%87 = lshr i32 %70, 31', '%88 = trunc i32 %87 to i8', 'store i8 %88, i8* %32, align 1', '%89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DL.i25 = bitcast %union.anon* %89 to i8*', '%90 = trunc i32 %70 to i8', 'store i8 %90, i8* %DL.i25, align 1', '%91 = add i64 %49, -17', '%92 = add i64 %51, 21', 'store i64 %92, i64* %3, align 8', '%93 = inttoptr i64 %91 to i8*', 'store i8 %90, i8* %93, align 1', '%94 = load i64, i64* %RBP.i, align 8', '%95 = add i64 %94, -17', '%97 = add i64 %96, 4', 'store i64 %97, i64* %3, align 8', '%98 = inttoptr i64 %95 to i8*', '%99 = load i8, i8* %98, align 1', '%100 = zext i8 %99 to i64', 'store i64 %100, i64* %RDI.i42, align 8', '%101 = add i64 %96, -72757', '%102 = add i64 %96, 9', '%103 = load i64, i64* %6, align 8', '%104 = add i64 %103, -8', '%105 = inttoptr i64 %104 to i64*', 'store i64 %102, i64* %105, align 8', 'store i64 %104, i64* %6, align 8', 'store i64 %101, i64* %3, align 8', '%113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%114 = bitcast i64* %113 to double*', 'store double 0.000000e+00, double* %114, align 1', '%115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%118 = bitcast %union.VectorReg* %115 to double*', 'store double %117, double* %118, align 1', '%119 = add i64 %107, 16', 'store i64 %119, i64* %3, align 8', '%131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %119, %struct.Memory* %106)', '%.pre = load i64, i64* %3, align 8', '%139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]', '%140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]', '%141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]', 'store i8 %139, i8* %29, align 1', 'store i8 %140, i8* %21, align 1', 'store i8 %141, i8* %14, align 1', '%143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]', '%144 = phi %struct.Memory* [ %131, %130 ], [ %106, %142 ]', '%145 = load i8, i8* %14, align 1', '%146 = load i8, i8* %29, align 1', '%147 = or i8 %146, %145', '%148 = icmp eq i8 %147, 0', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %DL.i25, align 1', '%150 = zext i1 %148 to i64', 'store i64 %150, i64* %RAX.i33, align 8', '%151 = load i64, i64* %6, align 8', '%152 = add i64 %151, 32', 'store i64 %152, i64* %6, align 8', '%153 = icmp ugt i64 %151, -33', '%154 = zext i1 %153 to i8', 'store i8 %154, i8* %14, align 1', '%155 = trunc i64 %152 to i32', '%156 = and i32 %155, 255', '%157 = tail call i32 @llvm.ctpop.i32(i32 %156)', '%158 = trunc i32 %157 to i8', '%159 = and i8 %158, 1', '%160 = xor i8 %159, 1', 'store i8 %160, i8* %21, align 1', '%161 = xor i64 %152, %151', '%162 = lshr i64 %161, 4', '%163 = trunc i64 %162 to i8', '%164 = and i8 %163, 1', 'store i8 %164, i8* %26, align 1', '%165 = icmp eq i64 %152, 0', '%166 = zext i1 %165 to i8', 'store i8 %166, i8* %29, align 1', '%167 = lshr i64 %152, 63', '%168 = trunc i64 %167 to i8', 'store i8 %168, i8* %32, align 1', '%169 = lshr i64 %151, 63', '%170 = xor i64 %167, %169', '%171 = add nuw nsw i64 %170, %167', '%172 = icmp eq i64 %171, 2', '%173 = zext i1 %172 to i8', 'store i8 %173, i8* %38, align 1', '%174 = add i64 %143, 14', 'store i64 %174, i64* %3, align 8', '%175 = add i64 %151, 40', '%176 = inttoptr i64 %152 to i64*', '%177 = load i64, i64* %176, align 8', 'store i64 %177, i64* %RBP.i, align 8', 'store i64 %175, i64* %6, align 8', '%178 = add i64 %143, 15', 'store i64 %178, i64* %3, align 8', '%179 = inttoptr i64 %175 to i64*', '%180 = load i64, i64* %179, align 8', 'store i64 %180, i64* %3, align 8', '%181 = add i64 %151, 48', 'store i64 %181, i64* %6, align 8', 'ret %struct.Memory* %144'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Keep: %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -16
Found line to remove! %40 = load i64, i64* %RDI.i42, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Found line to remove! %RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %RSI.i39, align 8
Keep: %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -8
Keep: %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %53 = inttoptr i64 %50 to i64*
Found line to remove! %54 = load i64, i64* %53, align 8
Found line to remove! store i64 %54, i64* %RSI.i39, align 8
Keep: %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
Found line to remove! %56 = add i64 %51, 7
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = inttoptr i64 %54 to i8*
Found line to remove! %58 = load i8, i8* %57, align 1
Found line to remove! %59 = zext i8 %58 to i64
Found line to remove! store i64 %59, i64* %RAX.i33, align 8
Found line to remove! %60 = add i64 %49, -16
Found line to remove! %61 = add i64 %51, 11
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %62 = inttoptr i64 %60 to i64*
Found line to remove! %63 = load i64, i64* %62, align 8
Found line to remove! store i64 %63, i64* %RSI.i39, align 8
Found line to remove! %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %64 = add i64 %51, 14
Found line to remove! store i64 %64, i64* %3, align 8
Found line to remove! %65 = inttoptr i64 %63 to i8*
Found line to remove! %66 = load i8, i8* %65, align 1
Found line to remove! %67 = zext i8 %66 to i64
Found line to remove! store i64 %67, i64* %RCX.i, align 8
Found line to remove! %68 = zext i8 %66 to i32
Found line to remove! %69 = zext i8 %58 to i32
Found line to remove! %70 = sub nsw i32 %69, %68
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! store i64 %71, i64* %RAX.i33, align 8
Found line to remove! %72 = icmp ult i8 %58, %66
Found line to remove! %73 = zext i1 %72 to i8
Found line to remove! store i8 %73, i8* %14, align 1
Found line to remove! %74 = and i32 %70, 255
Found line to remove! %75 = tail call i32 @llvm.ctpop.i32(i32 %74)
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! %77 = and i8 %76, 1
Found line to remove! %78 = xor i8 %77, 1
Found line to remove! store i8 %78, i8* %21, align 1
Found line to remove! %79 = xor i8 %66, %58
Found line to remove! %80 = zext i8 %79 to i32
Found line to remove! %81 = xor i32 %80, %70
Found line to remove! %82 = lshr i32 %81, 4
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! store i8 %84, i8* %26, align 1
Found line to remove! %85 = icmp eq i32 %70, 0
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %29, align 1
Found line to remove! %87 = lshr i32 %70, 31
Found line to remove! %88 = trunc i32 %87 to i8
Found line to remove! store i8 %88, i8* %32, align 1
Keep: store i8 0, i8* %38, align 1
Found line to remove! %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DL.i25 = bitcast %union.anon* %89 to i8*
Found line to remove! %90 = trunc i32 %70 to i8
Found line to remove! store i8 %90, i8* %DL.i25, align 1
Found line to remove! %91 = add i64 %49, -17
Found line to remove! %92 = add i64 %51, 21
Found line to remove! store i64 %92, i64* %3, align 8
Found line to remove! %93 = inttoptr i64 %91 to i8*
Found line to remove! store i8 %90, i8* %93, align 1
Found line to remove! %94 = load i64, i64* %RBP.i, align 8
Found line to remove! %95 = add i64 %94, -17
Keep: %96 = load i64, i64* %3, align 8
Found line to remove! %97 = add i64 %96, 4
Found line to remove! store i64 %97, i64* %3, align 8
Found line to remove! %98 = inttoptr i64 %95 to i8*
Found line to remove! %99 = load i8, i8* %98, align 1
Found line to remove! %100 = zext i8 %99 to i64
Found line to remove! store i64 %100, i64* %RDI.i42, align 8
Found line to remove! %101 = add i64 %96, -72757
Found line to remove! %102 = add i64 %96, 9
Found line to remove! %103 = load i64, i64* %6, align 8
Found line to remove! %104 = add i64 %103, -8
Found line to remove! %105 = inttoptr i64 %104 to i64*
Found line to remove! store i64 %102, i64* %105, align 8
Found line to remove! store i64 %104, i64* %6, align 8
Found line to remove! store i64 %101, i64* %3, align 8
Keep: %106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %107 = load i64, i64* %3, align 8
Keep: %108 = add i64 %107, ptrtoint (%G_0x1bd2__rip__type* @G_0x1bd2__rip_ to i64)
Keep: %109 = add i64 %107, 8
Keep: store i64 %109, i64* %3, align 8
Keep: %110 = inttoptr i64 %108 to i64*
Keep: %111 = load i64, i64* %110, align 8
Keep: %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %111, i64* %112, align 1
Found line to remove! %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %114 = bitcast i64* %113 to double*
Found line to remove! store double 0.000000e+00, double* %114, align 1
Keep: %EAX.i = bitcast %union.anon* %55 to i32*
Found line to remove! %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %116 = load i32, i32* %EAX.i, align 4
Keep: %117 = sitofp i32 %116 to double
Found line to remove! %118 = bitcast %union.VectorReg* %115 to double*
Found line to remove! store double %117, double* %118, align 1
Found line to remove! %119 = add i64 %107, 16
Found line to remove! store i64 %119, i64* %3, align 8
Keep: %120 = bitcast i64 %111 to double
Keep: %121 = fcmp uno double %120, %117
Keep: br i1 %121, label %122, label %132
Keep: 
Keep: ; <label>:122:                                    ; preds = %entry
Keep: %123 = fadd double %117, %120
Keep: %124 = bitcast double %123 to i64
Keep: %125 = and i64 %124, 9221120237041090560
Keep: %126 = icmp eq i64 %125, 9218868437227405312
Keep: %127 = and i64 %124, 2251799813685247
Keep: %128 = icmp ne i64 %127, 0
Keep: %129 = and i1 %126, %128
Keep: br i1 %129, label %130, label %138
Keep: 
Keep: ; <label>:130:                                    ; preds = %122
Found line to remove! %131 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %119, %struct.Memory* %106)
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: ; <label>:132:                                    ; preds = %entry
Keep: %133 = fcmp ogt double %120, %117
Keep: br i1 %133, label %138, label %134
Keep: 
Keep: ; <label>:134:                                    ; preds = %132
Keep: %135 = fcmp olt double %120, %117
Keep: br i1 %135, label %138, label %136
Keep: 
Keep: ; <label>:136:                                    ; preds = %134
Keep: %137 = fcmp oeq double %120, %117
Keep: br i1 %137, label %138, label %142
Keep: 
Keep: ; <label>:138:                                    ; preds = %136, %134, %132, %122
Found line to remove! %139 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 1, %136 ], [ 1, %122 ]
Found line to remove! %140 = phi i8 [ 0, %132 ], [ 0, %134 ], [ 0, %136 ], [ 1, %122 ]
Found line to remove! %141 = phi i8 [ 0, %132 ], [ 1, %134 ], [ 0, %136 ], [ 1, %122 ]
Found line to remove! store i8 %139, i8* %29, align 1
Found line to remove! store i8 %140, i8* %21, align 1
Found line to remove! store i8 %141, i8* %14, align 1
Keep: br label %142
Keep: 
Keep: ; <label>:142:                                    ; preds = %138, %136
Keep: store i8 0, i8* %38, align 1
Keep: store i8 0, i8* %32, align 1
Keep: store i8 0, i8* %26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %142, %130
Found line to remove! %143 = phi i64 [ %.pre, %130 ], [ %119, %142 ]
Found line to remove! %144 = phi %struct.Memory* [ %131, %130 ], [ %106, %142 ]
Found line to remove! %145 = load i8, i8* %14, align 1
Found line to remove! %146 = load i8, i8* %29, align 1
Found line to remove! %147 = or i8 %146, %145
Found line to remove! %148 = icmp eq i8 %147, 0
Found line to remove! %149 = zext i1 %148 to i8
Found line to remove! store i8 %149, i8* %DL.i25, align 1
Found line to remove! %150 = zext i1 %148 to i64
Found line to remove! store i64 %150, i64* %RAX.i33, align 8
Found line to remove! %151 = load i64, i64* %6, align 8
Found line to remove! %152 = add i64 %151, 32
Found line to remove! store i64 %152, i64* %6, align 8
Found line to remove! %153 = icmp ugt i64 %151, -33
Found line to remove! %154 = zext i1 %153 to i8
Found line to remove! store i8 %154, i8* %14, align 1
Found line to remove! %155 = trunc i64 %152 to i32
Found line to remove! %156 = and i32 %155, 255
Found line to remove! %157 = tail call i32 @llvm.ctpop.i32(i32 %156)
Found line to remove! %158 = trunc i32 %157 to i8
Found line to remove! %159 = and i8 %158, 1
Found line to remove! %160 = xor i8 %159, 1
Found line to remove! store i8 %160, i8* %21, align 1
Found line to remove! %161 = xor i64 %152, %151
Found line to remove! %162 = lshr i64 %161, 4
Found line to remove! %163 = trunc i64 %162 to i8
Found line to remove! %164 = and i8 %163, 1
Found line to remove! store i8 %164, i8* %26, align 1
Found line to remove! %165 = icmp eq i64 %152, 0
Found line to remove! %166 = zext i1 %165 to i8
Found line to remove! store i8 %166, i8* %29, align 1
Found line to remove! %167 = lshr i64 %152, 63
Found line to remove! %168 = trunc i64 %167 to i8
Found line to remove! store i8 %168, i8* %32, align 1
Found line to remove! %169 = lshr i64 %151, 63
Found line to remove! %170 = xor i64 %167, %169
Found line to remove! %171 = add nuw nsw i64 %170, %167
Found line to remove! %172 = icmp eq i64 %171, 2
Found line to remove! %173 = zext i1 %172 to i8
Found line to remove! store i8 %173, i8* %38, align 1
Found line to remove! %174 = add i64 %143, 14
Found line to remove! store i64 %174, i64* %3, align 8
Found line to remove! %175 = add i64 %151, 40
Found line to remove! %176 = inttoptr i64 %152 to i64*
Found line to remove! %177 = load i64, i64* %176, align 8
Found line to remove! store i64 %177, i64* %RBP.i, align 8
Found line to remove! store i64 %175, i64* %6, align 8
Found line to remove! %178 = add i64 %143, 15
Found line to remove! store i64 %178, i64* %3, align 8
Found line to remove! %179 = inttoptr i64 %175 to i64*
Found line to remove! %180 = load i64, i64* %179, align 8
Found line to remove! store i64 %180, i64* %3, align 8
Found line to remove! %181 = add i64 %151, 48
Found line to remove! store i64 %181, i64* %6, align 8
Found line to remove! ret %struct.Memory* %144
TO REMOVE: dict_keys(['%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DL = bitcast %union.anon* %4 to i8*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -16', '%41 = load i64, i64* %RDI, align 8', '%42 = add i64 %11, 11', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %RBP, align 8', '%45 = add i64 %44, -16', '%46 = load i64, i64* %RSI, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %PC, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP, align 8', '%51 = add i64 %50, -8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %51 to i64*', '%55 = load i64, i64* %54, align 8', 'store i64 %55, i64* %RSI, align 8', '%56 = add i64 %52, 7', 'store i64 %56, i64* %PC, align 8', '%57 = inttoptr i64 %55 to i8*', '%58 = load i8, i8* %57, align 1', '%59 = zext i8 %58 to i64', 'store i64 %59, i64* %RAX, align 8', '%60 = add i64 %50, -16', '%61 = add i64 %52, 11', 'store i64 %61, i64* %PC, align 8', '%62 = inttoptr i64 %60 to i64*', '%63 = load i64, i64* %62, align 8', 'store i64 %63, i64* %RSI, align 8', '%64 = add i64 %52, 14', 'store i64 %64, i64* %PC, align 8', '%65 = inttoptr i64 %63 to i8*', '%66 = load i8, i8* %65, align 1', '%67 = zext i8 %66 to i64', 'store i64 %67, i64* %RCX, align 8', '%68 = zext i8 %66 to i32', '%69 = zext i8 %58 to i32', '%70 = sub nsw i32 %69, %68', '%71 = zext i32 %70 to i64', 'store i64 %71, i64* %RAX, align 8', '%72 = icmp ult i8 %58, %66', '%73 = zext i1 %72 to i8', 'store i8 %73, i8* %15, align 1', '%74 = and i32 %70, 255', '%75 = tail call i32 @llvm.ctpop.i32(i32 %74) #12', '%76 = trunc i32 %75 to i8', '%77 = and i8 %76, 1', '%78 = xor i8 %77, 1', 'store i8 %78, i8* %22, align 1', '%79 = xor i8 %66, %58', '%80 = zext i8 %79 to i32', '%81 = xor i32 %80, %70', '%82 = lshr i32 %81, 4', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', 'store i8 %84, i8* %27, align 1', '%85 = icmp eq i32 %70, 0', '%86 = zext i1 %85 to i8', 'store i8 %86, i8* %30, align 1', '%87 = lshr i32 %70, 31', '%88 = trunc i32 %87 to i8', 'store i8 %88, i8* %33, align 1', '%89 = trunc i32 %70 to i8', 'store i8 %89, i8* %DL, align 1', '%90 = add i64 %50, -17', '%91 = add i64 %52, 21', 'store i64 %91, i64* %PC, align 8', '%92 = inttoptr i64 %90 to i8*', 'store i8 %89, i8* %92, align 1', '%93 = load i64, i64* %RBP, align 8', '%94 = add i64 %93, -17', '%96 = add i64 %95, 4', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %94 to i8*', '%98 = load i8, i8* %97, align 1', '%99 = zext i8 %98 to i64', 'store i64 %99, i64* %RDI, align 8', '%100 = add i64 %95, -72757', '%101 = add i64 %95, 9', '%102 = load i64, i64* %RSP, align 8', '%103 = add i64 %102, -8', '%104 = inttoptr i64 %103 to i64*', 'store i64 %101, i64* %104, align 8', 'store i64 %103, i64* %RSP, align 8', 'store i64 %100, i64* %PC, align 8', '%106 = load i64, i64* %PC, align 8', '%108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %107, i64* %108, align 1', '%109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%110 = bitcast i64* %109 to double*', 'store double 0.000000e+00, double* %110, align 1', '%113 = bitcast %union.VectorReg* %5 to double*', 'store double %112, double* %113, align 1', '%114 = add i64 %106, 16', 'store i64 %114, i64* %PC, align 8', '%126 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %114, %struct.Memory* %105) #13', '%.pre = load i64, i64* %PC, align 8', '%134 = phi i8 [ 0, %127 ], [ 0, %129 ], [ 1, %131 ], [ 1, %117 ]', '%135 = phi i8 [ 0, %127 ], [ 0, %129 ], [ 0, %131 ], [ 1, %117 ]', '%136 = phi i8 [ 0, %127 ], [ 1, %129 ], [ 0, %131 ], [ 1, %117 ]', 'store i8 %134, i8* %30, align 1', 'store i8 %135, i8* %22, align 1', 'store i8 %136, i8* %15, align 1', '%138 = phi i64 [ %.pre, %125 ], [ %114, %137 ]', '%139 = phi %struct.Memory* [ %126, %125 ], [ %105, %137 ]', '%140 = load i8, i8* %15, align 1', '%141 = load i8, i8* %30, align 1', '%142 = or i8 %141, %140', '%143 = icmp eq i8 %142, 0', '%144 = zext i1 %143 to i8', 'store i8 %144, i8* %DL, align 1', '%145 = zext i1 %143 to i64', 'store i64 %145, i64* %RAX, align 8', '%146 = load i64, i64* %RSP, align 8', '%147 = add i64 %146, 32', 'store i64 %147, i64* %RSP, align 8', '%148 = icmp ugt i64 %146, -33', '%149 = zext i1 %148 to i8', 'store i8 %149, i8* %15, align 1', '%150 = trunc i64 %147 to i32', '%151 = and i32 %150, 255', '%152 = tail call i32 @llvm.ctpop.i32(i32 %151) #12', '%153 = trunc i32 %152 to i8', '%154 = and i8 %153, 1', '%155 = xor i8 %154, 1', 'store i8 %155, i8* %22, align 1', '%156 = xor i64 %147, %146', '%157 = lshr i64 %156, 4', '%158 = trunc i64 %157 to i8', '%159 = and i8 %158, 1', 'store i8 %159, i8* %27, align 1', '%160 = icmp eq i64 %147, 0', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %30, align 1', '%162 = lshr i64 %147, 63', '%163 = trunc i64 %162 to i8', 'store i8 %163, i8* %33, align 1', '%164 = lshr i64 %146, 63', '%165 = xor i64 %162, %164', '%166 = add nuw nsw i64 %165, %162', '%167 = icmp eq i64 %166, 2', '%168 = zext i1 %167 to i8', 'store i8 %168, i8* %39, align 1', '%169 = add i64 %138, 14', 'store i64 %169, i64* %PC, align 8', '%170 = add i64 %146, 40', '%171 = inttoptr i64 %147 to i64*', '%172 = load i64, i64* %171, align 8', 'store i64 %172, i64* %RBP, align 8', 'store i64 %170, i64* %RSP, align 8', '%173 = add i64 %138, 15', 'store i64 %173, i64* %PC, align 8', '%174 = inttoptr i64 %170 to i64*', '%175 = load i64, i64* %174, align 8', 'store i64 %175, i64* %PC, align 8', '%176 = add i64 %146, 48', 'store i64 %176, i64* %RSP, align 8', 'ret %struct.Memory* %139'])
Keep: block_412290:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DL = bitcast %union.anon* %4 to i8*
Keep: %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Keep: %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -16
Found line to remove! %41 = load i64, i64* %RDI, align 8
Found line to remove! %42 = add i64 %11, 11
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Found line to remove! %44 = load i64, i64* %RBP, align 8
Found line to remove! %45 = add i64 %44, -16
Found line to remove! %46 = load i64, i64* %RSI, align 8
Keep: %47 = load i64, i64* %PC, align 8
Found line to remove! %48 = add i64 %47, 4
Found line to remove! store i64 %48, i64* %PC, align 8
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Found line to remove! %50 = load i64, i64* %RBP, align 8
Found line to remove! %51 = add i64 %50, -8
Keep: %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %51 to i64*
Found line to remove! %55 = load i64, i64* %54, align 8
Found line to remove! store i64 %55, i64* %RSI, align 8
Found line to remove! %56 = add i64 %52, 7
Found line to remove! store i64 %56, i64* %PC, align 8
Found line to remove! %57 = inttoptr i64 %55 to i8*
Found line to remove! %58 = load i8, i8* %57, align 1
Found line to remove! %59 = zext i8 %58 to i64
Found line to remove! store i64 %59, i64* %RAX, align 8
Found line to remove! %60 = add i64 %50, -16
Found line to remove! %61 = add i64 %52, 11
Found line to remove! store i64 %61, i64* %PC, align 8
Found line to remove! %62 = inttoptr i64 %60 to i64*
Found line to remove! %63 = load i64, i64* %62, align 8
Found line to remove! store i64 %63, i64* %RSI, align 8
Found line to remove! %64 = add i64 %52, 14
Found line to remove! store i64 %64, i64* %PC, align 8
Found line to remove! %65 = inttoptr i64 %63 to i8*
Found line to remove! %66 = load i8, i8* %65, align 1
Found line to remove! %67 = zext i8 %66 to i64
Found line to remove! store i64 %67, i64* %RCX, align 8
Found line to remove! %68 = zext i8 %66 to i32
Found line to remove! %69 = zext i8 %58 to i32
Found line to remove! %70 = sub nsw i32 %69, %68
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! store i64 %71, i64* %RAX, align 8
Found line to remove! %72 = icmp ult i8 %58, %66
Found line to remove! %73 = zext i1 %72 to i8
Found line to remove! store i8 %73, i8* %15, align 1
Found line to remove! %74 = and i32 %70, 255
Found line to remove! %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #12
Found line to remove! %76 = trunc i32 %75 to i8
Found line to remove! %77 = and i8 %76, 1
Found line to remove! %78 = xor i8 %77, 1
Found line to remove! store i8 %78, i8* %22, align 1
Found line to remove! %79 = xor i8 %66, %58
Found line to remove! %80 = zext i8 %79 to i32
Found line to remove! %81 = xor i32 %80, %70
Found line to remove! %82 = lshr i32 %81, 4
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! store i8 %84, i8* %27, align 1
Found line to remove! %85 = icmp eq i32 %70, 0
Found line to remove! %86 = zext i1 %85 to i8
Found line to remove! store i8 %86, i8* %30, align 1
Found line to remove! %87 = lshr i32 %70, 31
Found line to remove! %88 = trunc i32 %87 to i8
Found line to remove! store i8 %88, i8* %33, align 1
Keep: store i8 0, i8* %39, align 1
Found line to remove! %89 = trunc i32 %70 to i8
Found line to remove! store i8 %89, i8* %DL, align 1
Found line to remove! %90 = add i64 %50, -17
Found line to remove! %91 = add i64 %52, 21
Found line to remove! store i64 %91, i64* %PC, align 8
Found line to remove! %92 = inttoptr i64 %90 to i8*
Found line to remove! store i8 %89, i8* %92, align 1
Found line to remove! %93 = load i64, i64* %RBP, align 8
Found line to remove! %94 = add i64 %93, -17
Keep: %95 = load i64, i64* %PC, align 8
Found line to remove! %96 = add i64 %95, 4
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %94 to i8*
Found line to remove! %98 = load i8, i8* %97, align 1
Found line to remove! %99 = zext i8 %98 to i64
Found line to remove! store i64 %99, i64* %RDI, align 8
Found line to remove! %100 = add i64 %95, -72757
Found line to remove! %101 = add i64 %95, 9
Found line to remove! %102 = load i64, i64* %RSP, align 8
Found line to remove! %103 = add i64 %102, -8
Found line to remove! %104 = inttoptr i64 %103 to i64*
Found line to remove! store i64 %101, i64* %104, align 8
Found line to remove!Writing '/tmp/tmp415s7q42.dot'...
Writing '/tmp/tmp415s7q42.dot':Done

Reading LLVM: /tmp/tmpfq7woxs1-query.ll
Extracting function [_Z15tolerance_equalIhEbRT_S1_] from /tmp/tmpfq7woxs1-query.ll
Dot file generated!
Writing '/tmp/tmpabu5ajoh.dot'...
Writing '/tmp/tmpabu5ajoh.dot':Done

Reading LLVM: /tmp/tmp8ldqntqd-target.ll
Extracting function [_Z15tolerance_equalIhEbRT_S1_] from /tmp/tmp8ldqntqd-target.ll
Dot file generated!
 store i64 %103, i64* %RSP, align 8
Found line to remove! store i64 %100, i64* %PC, align 8
Keep: %105 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %106 = load i64, i64* %PC, align 8
Keep: %107 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to i64*), align 8
Found line to remove! %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %107, i64* %108, align 1
Found line to remove! %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %110 = bitcast i64* %109 to double*
Found line to remove! store double 0.000000e+00, double* %110, align 1
Keep: %111 = load i32, i32* %EAX, align 4
Keep: %112 = sitofp i32 %111 to double
Found line to remove! %113 = bitcast %union.VectorReg* %5 to double*
Found line to remove! store double %112, double* %113, align 1
Found line to remove! %114 = add i64 %106, 16
Found line to remove! store i64 %114, i64* %PC, align 8
Keep: %115 = bitcast i64 %107 to double
Keep: %116 = fcmp uno double %115, %112
Keep: br i1 %116, label %117, label %127
Keep: 
Keep: ; <label>:117:                                    ; preds = %block_412290
Keep: %118 = fadd double %112, %115
Keep: %119 = bitcast double %118 to i64
Keep: %120 = and i64 %119, 9221120237041090560
Keep: %121 = icmp eq i64 %120, 9218868437227405312
Keep: %122 = and i64 %119, 2251799813685247
Keep: %123 = icmp ne i64 %122, 0
Keep: %124 = and i1 %121, %123
Keep: br i1 %124, label %125, label %133
Keep: 
Keep: ; <label>:125:                                    ; preds = %117
Found line to remove! %126 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %114, %struct.Memory* %105) #13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: ; <label>:127:                                    ; preds = %block_412290
Keep: %128 = fcmp ogt double %115, %112
Keep: br i1 %128, label %133, label %129
Keep: 
Keep: ; <label>:129:                                    ; preds = %127
Keep: %130 = fcmp olt double %115, %112
Keep: br i1 %130, label %133, label %131
Keep: 
Keep: ; <label>:131:                                    ; preds = %129
Keep: %132 = fcmp oeq double %115, %112
Keep: br i1 %132, label %133, label %137
Keep: 
Keep: ; <label>:133:                                    ; preds = %131, %129, %127, %117
Found line to remove! %134 = phi i8 [ 0, %127 ], [ 0, %129 ], [ 1, %131 ], [ 1, %117 ]
Found line to remove! %135 = phi i8 [ 0, %127 ], [ 0, %129 ], [ 0, %131 ], [ 1, %117 ]
Found line to remove! %136 = phi i8 [ 0, %127 ], [ 1, %129 ], [ 0, %131 ], [ 1, %117 ]
Found line to remove! store i8 %134, i8* %30, align 1
Found line to remove! store i8 %135, i8* %22, align 1
Found line to remove! store i8 %136, i8* %15, align 1
Keep: br label %137
Keep: 
Keep: ; <label>:137:                                    ; preds = %133, %131
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %137, %125
Found line to remove! %138 = phi i64 [ %.pre, %125 ], [ %114, %137 ]
Found line to remove! %139 = phi %struct.Memory* [ %126, %125 ], [ %105, %137 ]
Found line to remove! %140 = load i8, i8* %15, align 1
Found line to remove! %141 = load i8, i8* %30, align 1
Found line to remove! %142 = or i8 %141, %140
Found line to remove! %143 = icmp eq i8 %142, 0
Found line to remove! %144 = zext i1 %143 to i8
Found line to remove! store i8 %144, i8* %DL, align 1
Found line to remove! %145 = zext i1 %143 to i64
Found line to remove! store i64 %145, i64* %RAX, align 8
Found line to remove! %146 = load i64, i64* %RSP, align 8
Found line to remove! %147 = add i64 %146, 32
Found line to remove! store i64 %147, i64* %RSP, align 8
Found line to remove! %148 = icmp ugt i64 %146, -33
Found line to remove! %149 = zext i1 %148 to i8
Found line to remove! store i8 %149, i8* %15, align 1
Found line to remove! %150 = trunc i64 %147 to i32
Found line to remove! %151 = and i32 %150, 255
Found line to remove! %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #12
Found line to remove! %153 = trunc i32 %152 to i8
Found line to remove! %154 = and i8 %153, 1
Found line to remove! %155 = xor i8 %154, 1
Found line to remove! store i8 %155, i8* %22, align 1
Found line to remove! %156 = xor i64 %147, %146
Found line to remove! %157 = lshr i64 %156, 4
Found line to remove! %158 = trunc i64 %157 to i8
Found line to remove! %159 = and i8 %158, 1
Found line to remove! store i8 %159, i8* %27, align 1
Found line to remove! %160 = icmp eq i64 %147, 0
Found line to remove! %161 = zext i1 %160 to i8
Found line to remove! store i8 %161, i8* %30, align 1
Found line to remove! %162 = lshr i64 %147, 63
Found line to remove! %163 = trunc i64 %162 to i8
Found line to remove! store i8 %163, i8* %33, align 1
Found line to remove! %164 = lshr i64 %146, 63
Found line to remove! %165 = xor i64 %162, %164
Found line to remove! %166 = add nuw nsw i64 %165, %162
Found line to remove! %167 = icmp eq i64 %166, 2
Found line to remove! %168 = zext i1 %167 to i8
Found line to remove! store i8 %168, i8* %39, align 1
Found line to remove! %169 = add i64 %138, 14
Found line to remove! store i64 %169, i64* %PC, align 8
Found line to remove! %170 = add i64 %146, 40
Found line to remove! %171 = inttoptr i64 %147 to i64*
Found line to remove! %172 = load i64, i64* %171, align 8
Found line to remove! store i64 %172, i64* %RBP, align 8
Found line to remove! store i64 %170, i64* %RSP, align 8
Found line to remove! %173 = add i64 %138, 15
Found line to remove! store i64 %173, i64* %PC, align 8
Found line to remove! %174 = inttoptr i64 %170 to i64*
Found line to remove! %175 = load i64, i64* %174, align 8
Found line to remove! store i64 %175, i64* %PC, align 8
Found line to remove! %176 = add i64 %146, 48
Found line to remove! store i64 %176, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %139
================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 2 %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 3 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 5 store i8 0, i8* %var_2_38, align 1
- 6 %var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 7 %var_2_107 = load i64, i64* %var_2_3, align 8
- 8 %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x1bd2__rip__type* @G_0x1bd2__rip_ to i64)
- 9 %var_2_109 = add i64 %var_2_107, 8
- 10 store i64 %var_2_109, i64* %var_2_3, align 8
- 11 %var_2_110 = inttoptr i64 %var_2_108 to i64*
- 12 %var_2_111 = load i64, i64* %var_2_110, align 8
- 13 %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 14 store i64 %var_2_111, i64* %var_2_112, align 1
- 15 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 16 %var_2_116 = load i32, i32* %EAX.i, align 4
- 17 %var_2_117 = sitofp i32 %var_2_116 to double
- 18 %var_2_120 = bitcast i64 %var_2_111 to double
- 19 %var_2_121 = fcmp uno double %var_2_120, %var_2_117
- 20 \<badref\> = br i1 %var_2_121, label %var_2_122, label %var_2_142
- 21 %var_2_123 = fadd double %var_2_120, %var_2_117
- 22 %var_2_124 = bitcast double %var_2_123 to i64
- 23 %var_2_125 = and i64 %var_2_124, 9221120237041090560
- 24 %var_2_126 = icmp eq i64 %var_2_125, 9218868437227405312
- 25 %var_2_127 = and i64 %var_2_124, 2251799813685247
- 26 %var_2_128 = icmp ne i64 %var_2_127, 0
- 27 %var_2_129 = and i1 %var_2_126, %var_2_128
- 28 \<badref\> = br i1 %var_2_129, label %routine_ucomisd__xmm1___xmm0.exit, label %var_2_142
- 29 store i8 0, i8* %var_2_38, align 1
- 30 store i8 0, i8* %var_2_32, align 1
- 31 store i8 0, i8* %var_2_26, align 1
- 32 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 33 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd69829d8>, {0: set(), 1: {2}, 2: {3}, 3: {4}, 4: {0}, 5: {21, 20, 5, 22}, 6: {6}, 7: {8, 7}, 8: set(), 9: set(), 10: {21, 20, 5, 22}, 11: set(), 12: {8, 7}, 13: set(), 14: {21, 20, 5, 22}, 15: {1, 13}, 16: {8, 7}, 17: {9}, 18: {1, 13}, 19: {10}, 20: {19, 11}, 21: {12}, 22: {1, 13}, 23: {14}, 24: {15}, 25: {16}, 26: {17}, 27: {18}, 28: {19, 11}, 29: {21, 20, 5, 22}, 30: {21, 20, 5, 22}, 31: {21, 20, 5, 22}, 32: {23}, 33: {24}})
Equivalent! frozenset({20, 5}) {29, 5}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd69829d8>, {0: set(), 1: {2}, 2: {3}, 3: {4}, 4: set(), 5: {5}, 6: {6}, 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: {20}, 30: {21}, 31: {22}, 32: {23}, 33: {24}})
NO MATCH 0
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
NO MATCH 4
EXACT 5 store store
EXACT 6 tail tail
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
EXACT 29 store store
EXACT 30 store store
EXACT 31 store store
EXACT 32 br br
EXACT 33 ret ret
================ Starting round 3
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 1 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 2 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 3 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 4 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 5 store i8 0, i8* %var_2_39, align 1
- 6 %var_2_105 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 7 %var_2_1072 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to double*), align 8
- 8 %var_2_111 = load i32, i32* %EAX, align 4
- 9 %var_2_112 = sitofp i32 %var_2_111 to double
- 10 %var_2_116 = fcmp uno double %var_2_1072, %var_2_112
- 11 \<badref\> = br i1 %var_2_116, label %var_2_117, label %var_2_137
- 12 %var_2_118 = fadd double %var_2_1072, %var_2_112
- 13 %var_2_119 = bitcast double %var_2_118 to i64
- 14 %var_2_120 = and i64 %var_2_119, 9221120237041090560
- 15 %var_2_121 = icmp eq i64 %var_2_120, 9218868437227405312
- 16 %var_2_122 = and i64 %var_2_119, 2251799813685247
- 17 %var_2_123 = icmp ne i64 %var_2_122, 0
- 18 %var_2_124 = and i1 %var_2_121, %var_2_123
- 19 \<badref\> = br i1 %var_2_124, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, label %var_2_137
- 20 store i8 0, i8* %var_2_39, align 1
- 21 store i8 0, i8* %var_2_33, align 1
- 22 store i8 0, i8* %var_2_27, align 1
- 23 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 24 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd5d75378>, {0: {4}, 1: {18, 22, 15}, 2: {1}, 3: {2}, 4: {3}, 5: {5, 10, 14, 29, 30, 31}, 6: {6}, 7: {16, 12, 7}, 8: {16, 12, 7}, 9: {17}, 10: {19}, 11: {20, 28}, 12: {21}, 13: {18, 22, 15}, 14: {23}, 15: {24}, 16: {25}, 17: {26}, 18: {27}, 19: {20, 28}, 20: {5, 10, 14, 29, 30, 31}, 21: {5, 10, 14, 29, 30, 31}, 22: {5, 10, 14, 29, 30, 31}, 23: {32}, 24: {33}})
Equivalent! frozenset({5, 29}) {20, 5}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd5d75378>, {0: set(), 1: set(), 2: {1}, 3: {2}, 4: {3}, 5: {29}, 6: {6}, 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: {5}, 21: {30}, 22: {31}, 23: {32}, 24: {33}})
NO MATCH 0
NO MATCH 1
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 store store
EXACT 6 tail tail
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
EXACT 20 store store
EXACT 21 store store
EXACT 22 store store
EXACT 23 br br
EXACT 24 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'ret %struct.Memory* %2', 'store i8 0, i8* %var_2_38, align 1', '%var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)', 'store i8 0, i8* %var_2_32, align 1', 'store i8 0, i8* %var_2_26, align 1'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! %var_2_106 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_107 = load i64, i64* %var_2_3, align 8
Keep: %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x1bd2__rip__type* @G_0x1bd2__rip_ to i64)
Keep: %var_2_109 = add i64 %var_2_107, 8
Keep: store i64 %var_2_109, i64* %var_2_3, align 8
Keep: %var_2_110 = inttoptr i64 %var_2_108 to i64*
Keep: %var_2_111 = load i64, i64* %var_2_110, align 8
Keep: %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_111, i64* %var_2_112, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_116 = load i32, i32* %EAX.i, align 4
Keep: %var_2_117 = sitofp i32 %var_2_116 to double
Keep: %var_2_120 = bitcast i64 %var_2_111 to double
Keep: %var_2_121 = fcmp uno double %var_2_120, %var_2_117
Keep: br i1 %var_2_121, label %var_2_122, label %var_2_142
Keep: 
Keep: var_2_122:                                        ; preds = %entry
Keep: %var_2_123 = fadd double %var_2_120, %var_2_117
Keep: %var_2_124 = bitcast double %var_2_123 to i64
Keep: %var_2_125 = and i64 %var_2_124, 9221120237041090560
Keep: %var_2_126 = icmp eq i64 %var_2_125, 9218868437227405312
Keep: %var_2_127 = and i64 %var_2_124, 2251799813685247
Keep: %var_2_128 = icmp ne i64 %var_2_127, 0
Keep: %var_2_129 = and i1 %var_2_126, %var_2_128
Keep: br i1 %var_2_129, label %routine_ucomisd__xmm1___xmm0.exit, label %var_2_142
Keep: 
Keep: var_2_142:                                        ; preds = %entry, %var_2_122
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! store i8 0, i8* %var_2_32, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %var_2_122, %var_2_142
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', '%var_2_105 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1', 'ret %struct.Memory* %2'])Writing '/tmp/tmpycvlmxrx.dot'...
Writing '/tmp/tmpycvlmxrx.dot':Done

Reading LLVM: /tmp/tmpfq7woxs1-query.ll
Extracting function [_Z15tolerance_equalIhEbRT_S1_] from /tmp/tmpfq7woxs1-query.ll
Dot file generated!
Writing '/tmp/tmp1_hrgjud.dot'...
Writing '/tmp/tmp1_hrgjud.dot':Done

Reading LLVM: /tmp/tmp8ldqntqd-target.ll
Extracting function [_Z15tolerance_equalIhEbRT_S1_] from /tmp/tmp8ldqntqd-target.ll
Dot file generated!

Keep: block_412290:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! %var_2_105 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_1072 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_111 = load i32, i32* %EAX, align 4
Keep: %var_2_112 = sitofp i32 %var_2_111 to double
Keep: %var_2_116 = fcmp uno double %var_2_1072, %var_2_112
Keep: br i1 %var_2_116, label %var_2_117, label %var_2_137
Keep: 
Keep: var_2_117:                                        ; preds = %block_412290
Keep: %var_2_118 = fadd double %var_2_1072, %var_2_112
Keep: %var_2_119 = bitcast double %var_2_118 to i64
Keep: %var_2_120 = and i64 %var_2_119, 9221120237041090560
Keep: %var_2_121 = icmp eq i64 %var_2_120, 9218868437227405312
Keep: %var_2_122 = and i64 %var_2_119, 2251799813685247
Keep: %var_2_123 = icmp ne i64 %var_2_122, 0
Keep: %var_2_124 = and i1 %var_2_121, %var_2_123
Keep: br i1 %var_2_124, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, label %var_2_137
Keep: 
Keep: var_2_137:                                        ; preds = %block_412290, %var_2_117
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %var_2_117, %var_2_137
Found line to remove! ret %struct.Memory* %2
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_107 = load i64, i64* %var_2_3, align 8
- 2 %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x1bd2__rip__type* @G_0x1bd2__rip_ to i64)
- 3 %var_2_109 = add i64 %var_2_107, 8
- 4 store i64 %var_2_109, i64* %var_2_3, align 8
- 5 %var_2_110 = inttoptr i64 %var_2_108 to i64*
- 6 %var_2_111 = load i64, i64* %var_2_110, align 8
- 7 %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 8 store i64 %var_2_111, i64* %var_2_112, align 1
- 9 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd65ce488>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: {0}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd65ce488>, {0: set(), 1: set(), 2: set(), 3: set(), 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: {0}})
NO MATCH 0
NO MATCH 1
NO MATCH 2
NO MATCH 3
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
EXACT 9 ret ret
================ Starting round 5
MAPPING:
- 0 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd63b4c80>, {0: {9}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f6fd63b4c80>, {0: {9}})
EXACT 0 ret ret
FP: 63 3.0 False
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_107 = load i64, i64* %var_2_3, align 8
Keep: %var_2_108 = add i64 %var_2_107, ptrtoint (%G_0x1bd2__rip__type* @G_0x1bd2__rip_ to i64)
Keep: %var_2_109 = add i64 %var_2_107, 8
Keep: store i64 %var_2_109, i64* %var_2_3, align 8
Keep: %var_2_110 = inttoptr i64 %var_2_108 to i64*
Keep: %var_2_111 = load i64, i64* %var_2_110, align 8
Keep: %var_2_112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_111, i64* %var_2_112, align 1
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_412290:
Found line to remove! ret %struct.Memory* %2
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/_Z15tolerance_equalIhEbRT_S1_/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/binary/test.mcsema.calls_renamed.ll _Z15tolerance_equalIhEbRT_S1_
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/_Z15tolerance_equalIhEbRT_S1_/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
