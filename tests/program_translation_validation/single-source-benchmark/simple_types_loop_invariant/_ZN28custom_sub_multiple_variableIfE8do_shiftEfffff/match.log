Writing '/tmp/tmprqmj147_.dot'...
Writing '/tmp/tmprqmj147_.dot':Done

Reading LLVM: /tmp/tmpe4bfn2zw-query.ll
Extracting function [_ZN28custom_sub_multiple_variableIfE8do_shiftEfffff] from /tmp/tmpe4bfn2zw-query.ll
Dot file generated!
Writing '/tmp/tmpigq79t9o.dot'...
Writing '/tmp/tmpigq79t9o.dot':Done

Reading LLVM: /tmp/tmpt158mxdf-target.ll
Extracting function [_ZN28custom_sub_multiple_variableIfE8do_shiftEfffff] from /tmp/tmpt158mxdf-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 store i64 %8, i64* %6, align 8
- 11 %10 = load i64, i64* %3, align 8
- 12 store i64 %8, i64* %RBP.i, align 8
- 13 %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 14 %12 = add i64 %7, -12
- 15 %13 = add i64 %10, 8
- 16 store i64 %13, i64* %3, align 8
- 17 %14 = bitcast [32 x %union.VectorReg]* %11 to \<2 x float\>*
- 18 %15 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 19 %16 = extractelement \<2 x float\> %15, i32 0
- 20 %17 = inttoptr i64 %12 to float*
- 21 store float %16, float* %17, align 4
- 22 %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 23 %19 = load i64, i64* %RBP.i, align 8
- 24 %20 = add i64 %19, -8
- 25 %21 = load i64, i64* %3, align 8
- 26 %22 = add i64 %21, 5
- 27 store i64 %22, i64* %3, align 8
- 28 %23 = bitcast %union.VectorReg* %18 to \<2 x float\>*
- 29 %24 = load \<2 x float\>, \<2 x float\>* %23, align 1
- 30 %25 = extractelement \<2 x float\> %24, i32 0
- 31 %26 = inttoptr i64 %20 to float*
- 32 store float %25, float* %26, align 4
- 33 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 34 %28 = load i64, i64* %RBP.i, align 8
- 35 %29 = add i64 %28, -12
- 36 %30 = load i64, i64* %3, align 8
- 37 %31 = add i64 %30, 5
- 38 store i64 %31, i64* %3, align 8
- 39 %32 = bitcast %union.VectorReg* %27 to \<2 x float\>*
- 40 %33 = load \<2 x float\>, \<2 x float\>* %32, align 1
- 41 %34 = extractelement \<2 x float\> %33, i32 0
- 42 %35 = inttoptr i64 %29 to float*
- 43 store float %34, float* %35, align 4
- 44 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 45 %37 = load i64, i64* %RBP.i, align 8
- 46 %38 = add i64 %37, -16
- 47 %39 = load i64, i64* %3, align 8
- 48 %40 = add i64 %39, 5
- 49 store i64 %40, i64* %3, align 8
- 50 %41 = bitcast %union.VectorReg* %36 to \<2 x float\>*
- 51 %42 = load \<2 x float\>, \<2 x float\>* %41, align 1
- 52 %43 = extractelement \<2 x float\> %42, i32 0
- 53 %44 = inttoptr i64 %38 to float*
- 54 store float %43, float* %44, align 4
- 55 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 56 %46 = load i64, i64* %RBP.i, align 8
- 57 %47 = add i64 %46, -20
- 58 %48 = load i64, i64* %3, align 8
- 59 %49 = add i64 %48, 5
- 60 store i64 %49, i64* %3, align 8
- 61 %50 = bitcast %union.VectorReg* %45 to \<2 x float\>*
- 62 %51 = load \<2 x float\>, \<2 x float\>* %50, align 1
- 63 %52 = extractelement \<2 x float\> %51, i32 0
- 64 %53 = inttoptr i64 %47 to float*
- 65 store float %52, float* %53, align 4
- 66 %54 = bitcast [32 x %union.VectorReg]* %11 to i8*
- 67 %55 = load i64, i64* %RBP.i, align 8
- 68 %56 = add i64 %55, -4
- 69 %57 = load i64, i64* %3, align 8
- 70 %58 = add i64 %57, 5
- 71 store i64 %58, i64* %3, align 8
- 72 %59 = inttoptr i64 %56 to i32*
- 73 %60 = load i32, i32* %59, align 4
- 74 %61 = bitcast [32 x %union.VectorReg]* %11 to float*
- 75 %62 = bitcast [32 x %union.VectorReg]* %11 to i32*
- 76 store i32 %60, i32* %62, align 1
- 77 %63 = getelementptr inbounds i8, i8* %54, i64 4
- 78 %64 = bitcast i8* %63 to float*
- 79 store float 0.000000e+00, float* %64, align 1
- 80 %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 81 %66 = bitcast i64* %65 to float*
- 82 store float 0.000000e+00, float* %66, align 1
- 83 %67 = getelementptr inbounds i8, i8* %54, i64 12
- 84 %68 = bitcast i8* %67 to float*
- 85 store float 0.000000e+00, float* %68, align 1
- 86 %69 = add i64 %55, -8
- 87 %70 = add i64 %57, 10
- 88 store i64 %70, i64* %3, align 8
- 89 %71 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 90 %72 = bitcast i64* %65 to \<2 x i32\>*
- 91 %73 = load \<2 x i32\>, \<2 x i32\>* %72, align 1
- 92 %74 = inttoptr i64 %69 to float*
- 93 %75 = load float, float* %74, align 4
- 94 %76 = extractelement \<2 x float\> %71, i32 0
- 95 %77 = fsub float %76, %75
- 96 store float %77, float* %61, align 1
- 97 %78 = bitcast \<2 x float\> %71 to \<2 x i32\>
- 98 %79 = extractelement \<2 x i32\> %78, i32 1
- 99 %80 = bitcast i8* %63 to i32*
- 100 store i32 %79, i32* %80, align 1
- 101 %81 = extractelement \<2 x i32\> %73, i32 0
- 102 %82 = bitcast i64* %65 to i32*
- 103 store i32 %81, i32* %82, align 1
- 104 %83 = extractelement \<2 x i32\> %73, i32 1
- 105 %84 = bitcast i8* %67 to i32*
- 106 store i32 %83, i32* %84, align 1
- 107 %85 = add i64 %55, -12
- 108 %86 = add i64 %57, 15
- 109 store i64 %86, i64* %3, align 8
- 110 %87 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 111 %88 = load \<2 x i32\>, \<2 x i32\>* %72, align 1
- 112 %89 = inttoptr i64 %85 to float*
- 113 %90 = load float, float* %89, align 4
- 114 %91 = extractelement \<2 x float\> %87, i32 0
- 115 %92 = fsub float %91, %90
- 116 store float %92, float* %61, align 1
- 117 %93 = bitcast \<2 x float\> %87 to \<2 x i32\>
- 118 %94 = extractelement \<2 x i32\> %93, i32 1
- 119 store i32 %94, i32* %80, align 1
- 120 %95 = extractelement \<2 x i32\> %88, i32 0
- 121 store i32 %95, i32* %82, align 1
- 122 %96 = extractelement \<2 x i32\> %88, i32 1
- 123 store i32 %96, i32* %84, align 1
- 124 %97 = add i64 %55, -16
- 125 %98 = add i64 %57, 20
- 126 store i64 %98, i64* %3, align 8
- 127 %99 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 128 %100 = load \<2 x i32\>, \<2 x i32\>* %72, align 1
- 129 %101 = inttoptr i64 %97 to float*
- 130 %102 = load float, float* %101, align 4
- 131 %103 = extractelement \<2 x float\> %99, i32 0
- 132 %104 = fsub float %103, %102
- 133 store float %104, float* %61, align 1
- 134 %105 = bitcast \<2 x float\> %99 to \<2 x i32\>
- 135 %106 = extractelement \<2 x i32\> %105, i32 1
- 136 store i32 %106, i32* %80, align 1
- 137 %107 = extractelement \<2 x i32\> %100, i32 0
- 138 store i32 %107, i32* %82, align 1
- 139 %108 = extractelement \<2 x i32\> %100, i32 1
- 140 store i32 %108, i32* %84, align 1
- 141 %109 = add i64 %55, -20
- 142 %110 = add i64 %57, 25
- 143 store i64 %110, i64* %3, align 8
- 144 %111 = load \<2 x float\>, \<2 x float\>* %14, align 1
- 145 %112 = load \<2 x i32\>, \<2 x i32\>* %72, align 1
- 146 %113 = inttoptr i64 %109 to float*
- 147 %114 = load float, float* %113, align 4
- 148 %115 = extractelement \<2 x float\> %111, i32 0
- 149 %116 = fsub float %115, %114
- 150 store float %116, float* %61, align 1
- 151 %117 = bitcast \<2 x float\> %111 to \<2 x i32\>
- 152 %118 = extractelement \<2 x i32\> %117, i32 1
- 153 store i32 %118, i32* %80, align 1
- 154 %119 = extractelement \<2 x i32\> %112, i32 0
- 155 store i32 %119, i32* %82, align 1
- 156 %120 = extractelement \<2 x i32\> %112, i32 1
- 157 store i32 %120, i32* %84, align 1
- 158 %121 = add i64 %57, 26
- 159 store i64 %121, i64* %3, align 8
- 160 %122 = load i64, i64* %6, align 8
- 161 %123 = add i64 %122, 8
- 162 %124 = inttoptr i64 %122 to i64*
- 163 %125 = load i64, i64* %124, align 8
- 164 store i64 %125, i64* %RBP.i, align 8
- 165 store i64 %123, i64* %6, align 8
- 166 %126 = add i64 %57, 27
- 167 store i64 %126, i64* %3, align 8
- 168 %127 = inttoptr i64 %123 to i64*
- 169 %128 = load i64, i64* %127, align 8
- 170 store i64 %128, i64* %3, align 8
- 171 %129 = add i64 %122, 16
- 172 store i64 %129, i64* %6, align 8
- 173 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f87cbe08400>, {0: {0}, 1: {1}, 2: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 3: {8}, 4: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 5: {10}, 6: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 7: {27, 12, 86}, 8: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 9: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 10: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 11: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 12: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 13: {2}, 14: {18, 107, 37}, 15: {161, 19}, 16: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 17: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 18: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 19: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 20: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 21: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 22: {3}, 23: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 24: {27, 12, 86}, 25: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 26: {70, 39, 49, 59, 29}, 27: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 28: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 29: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 30: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 31: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 32: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 33: {4}, 34: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 35: {18, 107, 37}, 36: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 37: {70, 39, 49, 59, 29}, 38: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 39: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 40: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 41: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 42: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 43: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 44: {5}, 45: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 46: {124, 47}, 47: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 48: {70, 39, 49, 59, 29}, 49: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 50: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 51: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 52: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 53: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 54: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 55: {6}, 56: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 57: {57, 141}, 58: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 59: {70, 39, 49, 59, 29}, 60: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 61: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 62: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 63: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 64: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 65: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 66: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 67: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 68: {68}, 69: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 70: {70, 39, 49, 59, 29}, 71: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 72: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 73: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 74: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 75: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 76: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 77: {77}, 78: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 79: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 80: {80}, 81: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 82: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 83: {83}, 84: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 85: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 86: {27, 12, 86}, 87: {87}, 88: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 89: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 90: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 91: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 92: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 93: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 94: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 95: {115, 132, 149, 95}, 96: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 97: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 98: {98, 135, 104, 139, 118, 152, 122, 156}, 99: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 100: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 101: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 102: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 103: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 104: {98, 135, 104, 139, 118, 152, 122, 156}, 105: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 106: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 107: {18, 107, 37}, 108: {108}, 109: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 110: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 111: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 112: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 113: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 114: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 115: {115, 132, 149, 95}, 116: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 117: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 118: {98, 135, 104, 139, 118, 152, 122, 156}, 119: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 120: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 121: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 122: {98, 135, 104, 139, 118, 152, 122, 156}, 123: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 124: {124, 47}, 125: {125}, 126: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 127: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 128: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 129: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 130: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 131: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 132: {115, 132, 149, 95}, 133: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 134: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 135: {98, 135, 104, 139, 118, 152, 122, 156}, 136: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 137: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 138: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 139: {98, 135, 104, 139, 118, 152, 122, 156}, 140: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 141: {57, 141}, 142: {142}, 143: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 144: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 145: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 146: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 147: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 148: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 149: {115, 132, 149, 95}, 150: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 151: {97, 66, 99, 102, 134, 41, 74, 75, 105, 78, 81, 51, 84, 21, 117, 151, 90, 61, 31}, 152: {98, 135, 104, 139, 118, 152, 122, 156}, 153: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 154: {33, 131, 101, 137, 43, 114, 148, 53, 23, 120, 154, 94, 63}, 155: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 156: {98, 135, 104, 139, 118, 152, 122, 156}, 157: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 158: {158}, 159: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 160: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 161: {161, 19}, 162: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 163: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 164: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 165: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 166: {166}, 167: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 168: {64, 129, 34, 162, 72, 168, 44, 13, 112, 146, 54, 24, 92}, 169: {128, 130, 7, 11, 16, 144, 145, 147, 22, 26, 28, 32, 160, 163, 36, 38, 169, 42, 46, 48, 52, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 170: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 171: {171}, 172: {133, 136, 9, 138, 140, 14, 15, 143, 17, 20, 150, 25, 153, 155, 157, 30, 159, 35, 164, 165, 167, 40, 170, 172, 45, 50, 55, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 173: {173}})
Equivalent! frozenset({48, 69, 38, 58, 28}) {36, 69, 47, 25, 58}
Equivalent! frozenset({49, 70, 39, 59, 29}) {37, 70, 48, 26, 59}
Equivalent! frozenset({50, 71, 40, 60, 30}) {38, 71, 49, 27, 60}
Equivalent! frozenset({144, 89, 110, 127}) {144, 89, 110, 127}
Equivalent! frozenset({128, 145, 91, 111}) {128, 145, 91, 111}
Equivalent! frozenset({97, 117, 134, 151}) {97, 117, 134, 151}
Equivalent! frozenset({152, 98, 118, 135}) {152, 98, 118, 135}
Equivalent! frozenset({136, 153, 100, 119}) {136, 153, 100, 119}
Equivalent! frozenset({120, 137, 154, 101}) {120, 137, 154, 101}
Equivalent! frozenset({121, 138, 155, 103}) {121, 138, 155, 103}
Equivalent! frozenset({104, 122, 139, 156}) {104, 122, 139, 156}
Equivalent! frozenset({106, 123, 140, 157}) {106, 123, 140, 157}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f87cbe08400>, {0: {0}, 1: {1}, 2: {7}, 3: {8}, 4: {9}, 5: {10}, 6: {11}, 7: {12}, 8: {13}, 9: {14}, 10: {15}, 11: {16}, 12: {17}, 13: {2}, 14: {18}, 15: {19}, 16: {20}, 17: {21}, 18: {22}, 19: {23}, 20: {24}, 21: {25}, 22: {3}, 23: {26}, 24: {27}, 25: {58}, 26: {59}, 27: {60}, 28: {31}, 29: {32}, 30: {33}, 31: {34}, 32: {35}, 33: {4}, 34: {36}, 35: {37}, 36: {48}, 37: {49}, 38: {50}, 39: {41}, 40: {42}, 41: {43}, 42: {44}, 43: {45}, 44: {5}, 45: {46}, 46: {47}, 47: {38}, 48: {39}, 49: {40}, 50: {51}, 51: {52}, 52: {53}, 53: {54}, 54: {55}, 55: {6}, 56: {56}, 57: {57}, 58: {28}, 59: {29}, 60: {30}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {69}, 70: {70}, 71: {71}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {99, 78}, 79: {100, 136, 79, 119, 153}, 80: {80}, 81: {81, 102}, 82: {103, 138, 82, 121, 155}, 83: {83}, 84: {105, 84}, 85: {106, 140, 85, 123, 157}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 store store
EXACT 11 load load
EXACT 12 store store
EXACT 13 getelementptr getelementptr
EXACT 14 add add
EXACT 15 add add
EXACT 16 store store
EXACT 17 bitcast bitcast
EXACT 18 load load
EXACT 19 extractelement extractelement
EXACT 20 inttoptr inttoptr
EXACT 21 store store
EXACT 22 getelementptr getelementptr
EXACT 23 load load
EXACT 24 add add
EXACT 25 load load
EXACT 26 add add
EXACT 27 store store
EXACT 28 bitcast bitcast
EXACT 29 load load
EXACT 30 extractelement extractelement
EXACT 31 inttoptr inttoptr
EXACT 32 store store
EXACT 33 getelementptr getelementptr
EXACT 34 load load
EXACT 35 add add
EXACT 36 load load
EXACT 37 add add
EXACT 38 store store
EXACT 39 bitcast bitcast
EXACT 40 load load
EXACT 41 extractelement extractelement
EXACT 42 inttoptr inttoptr
EXACT 43 store store
EXACT 44 getelementptr getelementptr
EXACT 45 load load
EXACT 46 add add
EXACT 47 load load
EXACT 48 add add
EXACT 49 store store
EXACT 50 bitcast bitcast
EXACT 51 load load
EXACT 52 extractelement extractelement
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 load load
EXACT 57 add add
EXACT 58 load load
EXACT 59 add add
EXACT 60 store store
EXACT 61 bitcast bitcast
EXACT 62 load load
EXACT 63 extractelement extractelement
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 bitcast bitcast
EXACT 67 load load
EXACT 68 add add
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 bitcast bitcast
EXACT 75 bitcast bitcast
EXACT 76 store store
EXACT 77 getelementptr getelementptr
MORE 78 POT: 2
MORE 79 POT: 5
EXACT 80 getelementptr getelementptr
MORE 81 POT: 2
MORE 82 POT: 5
EXACT 83 getelementptr getelementptr
MORE 84 POT: 2
MORE 85 POT: 5
EXACT 86 add add
EXACT 87 add add
EXACT 88 store store
EXACT 89 load load
EXACT 90 bitcast bitcast
EXACT 91 load load
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 extractelement extractelement
EXACT 95 fsub fsub
EXACT 96 store store
EXACT 97 bitcast bitcast
EXACT 98 extractelement extractelement
EXACT 99 bitcast bitcast
EXACT 100 store store
EXACT 101 extractelement extractelement
EXACT 102 bitcast bitcast
EXACT 103 store store
EXACT 104 extractelement extractelement
EXACT 105 bitcast bitcast
EXACT 106 store store
EXACT 107 add add
EXACT 108 add add
EXACT 109 store store
EXACT 110 load load
EXACT 111 load load
EXACT 112 inttoptr inttoptr
EXACT 113 load load
EXACT 114 extractelement extractelement
EXACT 115 fsub fsub
EXACT 116 store store
EXACT 117 bitcast bitcast
EXACT 118 extractelement extractelement
EXACT 119 store store
EXACT 120 extractelement extractelement
EXACT 121 store store
EXACT 122 extractelement extractelement
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 store store
EXACT 127 load load
EXACT 128 load load
EXACT 129 inttoptr inttoptr
EXACT 130 load load
EXACT 131 extractelement extractelement
EXACT 132 fsub fsub
EXACT 133 store store
EXACT 134 bitcast bitcast
EXACT 135 extractelement extractelement
EXACT 136 store store
EXACT 137 extractelement extractelement
EXACT 138 store store
EXACT 139 extractelement extractelement
EXACT 140 store store
EXACT 141 add add
EXACT 142 add add
EXACT 143 store store
EXACT 144 load load
EXACT 145 load load
EXACT 146 inttoptr inttoptr
EXACT 147 load load
EXACT 148 extractelement extractelement
EXACT 149 fsub fsub
EXACT 150 store store
EXACT 151 bitcast bitcast
EXACT 152 extractelement extractelement
EXACT 153 store store
EXACT 154 extractelement extractelement
EXACT 155 store store
EXACT 156 extractelement extractelement
EXACT 157 store store
EXACT 158 add add
EXACT 159 store store
EXACT 160 load load
EXACT 161 add add
EXACT 162 inttoptr inttoptr
EXACT 163 load load
EXACT 164 store store
EXACT 165 store store
EXACT 166 add add
EXACT 167 store store
EXACT 168 inttoptr inttoptr
EXACT 169 load load
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 3 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 4 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
- 6 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
- 7 %8 = load i64, i64* %RBP, align 8
- 8 %9 = add i64 %1, 1
- 9 store i64 %9, i64* %PC, align 8
- 10 %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 11 %11 = load i64, i64* %10, align 8
- 12 %12 = add i64 %11, -8
- 13 %13 = inttoptr i64 %12 to i64*
- 14 store i64 %8, i64* %13, align 8
- 15 store i64 %12, i64* %10, align 8
- 16 %14 = load i64, i64* %PC, align 8
- 17 store i64 %12, i64* %RBP, align 8
- 18 %15 = add i64 %11, -12
- 19 %16 = add i64 %14, 8
- 20 store i64 %16, i64* %PC, align 8
- 21 %17 = bitcast [32 x %union.VectorReg]* %3 to \<2 x float\>*
- 22 %18 = load \<2 x float\>, \<2 x float\>* %17, align 1
- 23 %19 = extractelement \<2 x float\> %18, i32 0
- 24 %20 = inttoptr i64 %15 to float*
- 25 store float %19, float* %20, align 4
- 26 %21 = load i64, i64* %RBP, align 8
- 27 %22 = add i64 %21, -8
- 28 %23 = load i64, i64* %PC, align 8
- 29 %24 = add i64 %23, 5
- 30 store i64 %24, i64* %PC, align 8
- 31 %25 = bitcast %union.VectorReg* %4 to \<2 x float\>*
- 32 %26 = load \<2 x float\>, \<2 x float\>* %25, align 1
- 33 %27 = extractelement \<2 x float\> %26, i32 0
- 34 %28 = inttoptr i64 %22 to float*
- 35 store float %27, float* %28, align 4
- 36 %29 = load i64, i64* %RBP, align 8
- 37 %30 = add i64 %29, -12
- 38 %31 = load i64, i64* %PC, align 8
- 39 %32 = add i64 %31, 5
- 40 store i64 %32, i64* %PC, align 8
- 41 %33 = bitcast %union.VectorReg* %5 to \<2 x float\>*
- 42 %34 = load \<2 x float\>, \<2 x float\>* %33, align 1
- 43 %35 = extractelement \<2 x float\> %34, i32 0
- 44 %36 = inttoptr i64 %30 to float*
- 45 store float %35, float* %36, align 4
- 46 %37 = load i64, i64* %RBP, align 8
- 47 %38 = add i64 %37, -16
- 48 %39 = load i64, i64* %PC, align 8
- 49 %40 = add i64 %39, 5
- 50 store i64 %40, i64* %PC, align 8
- 51 %41 = bitcast %union.VectorReg* %6 to \<2 x float\>*
- 52 %42 = load \<2 x float\>, \<2 x float\>* %41, align 1
- 53 %43 = extractelement \<2 x float\> %42, i32 0
- 54 %44 = inttoptr i64 %38 to float*
- 55 store float %43, float* %44, align 4
- 56 %45 = load i64, i64* %RBP, align 8
- 57 %46 = add i64 %45, -20
- 58 %47 = load i64, i64* %PC, align 8
- 59 %48 = add i64 %47, 5
- 60 store i64 %48, i64* %PC, align 8
- 61 %49 = bitcast %union.VectorReg* %7 to \<2 x float\>*
- 62 %50 = load \<2 x float\>, \<2 x float\>* %49, align 1
- 63 %51 = extractelement \<2 x float\> %50, i32 0
- 64 %52 = inttoptr i64 %46 to float*
- 65 store float %51, float* %52, align 4
- 66 %53 = bitcast [32 x %union.VectorReg]* %3 to i8*
- 67 %54 = load i64, i64* %RBP, align 8
- 68 %55 = add i64 %54, -4
- 69 %56 = load i64, i64* %PC, align 8
- 70 %57 = add i64 %56, 5
- 71 store i64 %57, i64* %PC, align 8
- 72 %58 = inttoptr i64 %55 to i32*
- 73 %59 = load i32, i32* %58, align 4
- 74 %60 = bitcast [32 x %union.VectorReg]* %3 to float*
- 75 %61 = bitcast [32 x %union.VectorReg]* %3 to i32*
- 76 store i32 %59, i32* %61, align 1
- 77 %62 = getelementptr inbounds i8, i8* %53, i64 4
- 78 %63 = bitcast i8* %62 to float*
- 79 store float 0.000000e+00, float* %63, align 1
- 80 %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 81 %65 = bitcast i64* %64 to float*
- 82 store float 0.000000e+00, float* %65, align 1
- 83 %66 = getelementptr inbounds i8, i8* %53, i64 12
- 84 %67 = bitcast i8* %66 to float*
- 85 store float 0.000000e+00, float* %67, align 1
- 86 %68 = add i64 %54, -8
- 87 %69 = add i64 %56, 10
- 88 store i64 %69, i64* %PC, align 8
- 89 %70 = load \<2 x float\>, \<2 x float\>* %17, align 1
- 90 %71 = bitcast i64* %64 to \<2 x i32\>*
- 91 %72 = load \<2 x i32\>, \<2 x i32\>* %71, align 1
- 92 %73 = inttoptr i64 %68 to float*
- 93 %74 = load float, float* %73, align 4
- 94 %75 = extractelement \<2 x float\> %70, i32 0
- 95 %76 = fsub float %75, %74
- 96 store float %76, float* %60, align 1
- 97 %77 = bitcast \<2 x float\> %70 to \<2 x i32\>
- 98 %78 = extractelement \<2 x i32\> %77, i32 1
- 99 %79 = bitcast i8* %62 to i32*
- 100 store i32 %78, i32* %79, align 1
- 101 %80 = extractelement \<2 x i32\> %72, i32 0
- 102 %81 = bitcast i64* %64 to i32*
- 103 store i32 %80, i32* %81, align 1
- 104 %82 = extractelement \<2 x i32\> %72, i32 1
- 105 %83 = bitcast i8* %66 to i32*
- 106 store i32 %82, i32* %83, align 1
- 107 %84 = add i64 %54, -12
- 108 %85 = add i64 %56, 15
- 109 store i64 %85, i64* %PC, align 8
- 110 %86 = load \<2 x float\>, \<2 x float\>* %17, align 1
- 111 %87 = load \<2 x i32\>, \<2 x i32\>* %71, align 1
- 112 %88 = inttoptr i64 %84 to float*
- 113 %89 = load float, float* %88, align 4
- 114 %90 = extractelement \<2 x float\> %86, i32 0
- 115 %91 = fsub float %90, %89
- 116 store float %91, float* %60, align 1
- 117 %92 = bitcast \<2 x float\> %86 to \<2 x i32\>
- 118 %93 = extractelement \<2 x i32\> %92, i32 1
- 119 store i32 %93, i32* %79, align 1
- 120 %94 = extractelement \<2 x i32\> %87, i32 0
- 121 store i32 %94, i32* %81, align 1
- 122 %95 = extractelement \<2 x i32\> %87, i32 1
- 123 store i32 %95, i32* %83, align 1
- 124 %96 = add i64 %54, -16
- 125 %97 = add i64 %56, 20
- 126 store i64 %97, i64* %PC, align 8
- 127 %98 = load \<2 x float\>, \<2 x float\>* %17, align 1
- 128 %99 = load \<2 x i32\>, \<2 x i32\>* %71, align 1
- 129 %100 = inttoptr i64 %96 to float*
- 130 %101 = load float, float* %100, align 4
- 131 %102 = extractelement \<2 x float\> %98, i32 0
- 132 %103 = fsub float %102, %101
- 133 store float %103, float* %60, align 1
- 134 %104 = bitcast \<2 x float\> %98 to \<2 x i32\>
- 135 %105 = extractelement \<2 x i32\> %104, i32 1
- 136 store i32 %105, i32* %79, align 1
- 137 %106 = extractelement \<2 x i32\> %99, i32 0
- 138 store i32 %106, i32* %81, align 1
- 139 %107 = extractelement \<2 x i32\> %99, i32 1
- 140 store i32 %107, i32* %83, align 1
- 141 %108 = add i64 %54, -20
- 142 %109 = add i64 %56, 25
- 143 store i64 %109, i64* %PC, align 8
- 144 %110 = load \<2 x float\>, \<2 x float\>* %17, align 1
- 145 %111 = load \<2 x i32\>, \<2 x i32\>* %71, align 1
- 146 %112 = inttoptr i64 %108 to float*
- 147 %113 = load float, float* %112, align 4
- 148 %114 = extractelement \<2 x float\> %110, i32 0
- 149 %115 = fsub float %114, %113
- 150 store float %115, float* %60, align 1
- 151 %116 = bitcast \<2 x float\> %110 to \<2 x i32\>
- 152 %117 = extractelement \<2 x i32\> %116, i32 1
- 153 store i32 %117, i32* %79, align 1
- 154 %118 = extractelement \<2 x i32\> %111, i32 0
- 155 store i32 %118, i32* %81, align 1
- 156 %119 = extractelement \<2 x i32\> %111, i32 1
- 157 store i32 %119, i32* %83, align 1
- 158 %120 = add i64 %56, 26
- 159 store i64 %120, i64* %PC, align 8
- 160 %121 = load i64, i64* %10, align 8
- 161 %122 = add i64 %121, 8
- 162 %123 = inttoptr i64 %121 to i64*
- 163 %124 = load i64, i64* %123, align 8
- 164 store i64 %124, i64* %RBP, align 8
- 165 store i64 %122, i64* %10, align 8
- 166 %125 = add i64 %56, 27
- 167 store i64 %125, i64* %PC, align 8
- 168 %126 = inttoptr i64 %122 to i64*
- 169 %127 = load i64, i64* %126, align 8
- 170 store i64 %127, i64* %PC, align 8
- 171 %128 = add i64 %121, 16
- 172 store i64 %128, i64* %10, align 8
- 173 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f87cbe08268>, {0: {0}, 1: {1}, 2: {13}, 3: {22}, 4: {33}, 5: {44}, 6: {55}, 7: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 8: {3}, 9: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 10: {5}, 11: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 12: {24, 86, 7}, 13: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 14: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 15: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 16: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 17: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 18: {107, 35, 14}, 19: {161, 15}, 20: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 21: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 22: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 23: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 24: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 25: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 26: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 27: {24, 86, 7}, 28: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 29: {37, 70, 48, 26, 59}, 30: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 31: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 32: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 33: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 34: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 35: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 36: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 37: {107, 35, 14}, 38: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 39: {37, 70, 48, 26, 59}, 40: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 41: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 42: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 43: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 44: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 45: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 46: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 47: {124, 46}, 48: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 49: {37, 70, 48, 26, 59}, 50: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 51: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 52: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 53: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 54: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 55: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 56: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 57: {57, 141}, 58: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 59: {37, 70, 48, 26, 59}, 60: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 61: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 62: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 63: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 64: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 65: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 66: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 67: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 68: {68}, 69: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 70: {37, 70, 48, 26, 59}, 71: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 72: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 73: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 74: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 75: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 76: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 77: {77}, 78: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 79: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 80: {80}, 81: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 82: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 83: {83}, 84: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 85: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 86: {24, 86, 7}, 87: {87}, 88: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 89: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 90: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 91: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 92: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 93: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 94: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 95: {115, 132, 149, 95}, 96: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 97: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 98: {98, 135, 104, 139, 118, 152, 122, 156}, 99: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 100: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 101: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 102: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 103: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 104: {98, 135, 104, 139, 118, 152, 122, 156}, 105: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 106: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 107: {107, 35, 14}, 108: {108}, 109: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 110: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 111: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 112: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 113: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 114: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 115: {115, 132, 149, 95}, 116: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 117: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 118: {98, 135, 104, 139, 118, 152, 122, 156}, 119: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 120: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 121: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 122: {98, 135, 104, 139, 118, 152, 122, 156}, 123: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 124: {124, 46}, 125: {125}, 126: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 127: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 128: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 129: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 130: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 131: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 132: {115, 132, 149, 95}, 133: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 134: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 135: {98, 135, 104, 139, 118, 152, 122, 156}, 136: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 137: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 138: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 139: {98, 135, 104, 139, 118, 152, 122, 156}, 140: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 141: {57, 141}, 142: {142}, 143: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 144: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 145: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 146: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 147: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 148: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 149: {115, 132, 149, 95}, 150: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 151: {97, 66, 99, 102, 39, 134, 105, 74, 75, 78, 17, 50, 81, 84, 117, 151, 90, 28, 61}, 152: {98, 135, 104, 139, 118, 152, 122, 156}, 153: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 154: {131, 101, 41, 137, 114, 19, 52, 148, 120, 94, 154, 30, 63}, 155: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 156: {98, 135, 104, 139, 118, 152, 122, 156}, 157: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 158: {158}, 159: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 160: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 161: {161, 15}, 162: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 163: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 164: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 165: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 166: {166}, 167: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 168: {64, 129, 162, 8, 72, 42, 168, 112, 146, 20, 53, 92, 31}, 169: {128, 2, 130, 6, 11, 144, 145, 18, 147, 23, 25, 29, 160, 34, 163, 36, 40, 169, 45, 47, 51, 56, 58, 62, 67, 69, 73, 89, 91, 93, 110, 111, 113, 127}, 170: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 171: {171}, 172: {4, 133, 136, 9, 10, 138, 12, 140, 143, 16, 21, 150, 153, 27, 155, 157, 159, 32, 164, 165, 38, 167, 170, 43, 172, 49, 54, 60, 65, 71, 76, 79, 82, 85, 88, 96, 100, 103, 106, 109, 116, 119, 121, 123, 126}, 173: {173}})
Equivalent! frozenset({36, 69, 25, 58, 47}) {69, 38, 48, 58, 28}
Equivalent! frozenset({48, 37, 70, 26, 59}) {70, 39, 49, 59, 29}
Equivalent! frozenset({49, 38, 71, 27, 60}) {71, 40, 50, 60, 30}
Equivalent! frozenset({144, 89, 110, 127}) {144, 89, 110, 127}
Equivalent! frozenset({128, 145, 91, 111}) {128, 145, 91, 111}
Equivalent! frozenset({97, 117, 134, 151}) {97, 117, 134, 151}
Equivalent! frozenset({152, 98, 118, 135}) {152, 98, 118, 135}
Equivalent! frozenset({136, 153, 100, 119}) {136, 153, 100, 119}
Equivalent! frozenset({120, 137, 154, 101}) {120, 137, 154, 101}
Equivalent! frozenset({121, 138, 155, 103}) {121, 138, 155, 103}
Equivalent! frozenset({104, 122, 139, 156}) {104, 122, 139, 156}
Equivalent! frozenset({106, 123, 140, 157}) {106, 123, 140, 157}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f87cbe08268>, {0: {0}, 1: {1}, 2: {13}, 3: {22}, 4: {33}, 5: {44}, 6: {55}, 7: {2}, 8: {3}, 9: {4}, 10: {5}, 11: {6}, 12: {7}, 13: {8}, 14: {9}, 15: {10}, 16: {11}, 17: {12}, 18: {14}, 19: {15}, 20: {16}, 21: {17}, 22: {18}, 23: {19}, 24: {20}, 25: {21}, 26: {23}, 27: {24}, 28: {47}, 29: {59}, 30: {60}, 31: {28}, 32: {29}, 33: {30}, 34: {31}, 35: {32}, 36: {34}, 37: {35}, 38: {69}, 39: {37}, 40: {38}, 41: {39}, 42: {40}, 43: {41}, 44: {42}, 45: {43}, 46: {45}, 47: {46}, 48: {25}, 49: {70}, 50: {71}, 51: {50}, 52: {51}, 53: {52}, 54: {53}, 55: {54}, 56: {56}, 57: {57}, 58: {58}, 59: {26}, 60: {27}, 61: {61}, 62: {62}, 63: {63}, 64: {64}, 65: {65}, 66: {66}, 67: {67}, 68: {68}, 69: {36}, 70: {48}, 71: {49}, 72: {72}, 73: {73}, 74: {74}, 75: {75}, 76: {76}, 77: {77}, 78: {99, 78}, 79: {100, 136, 79, 119, 153}, 80: {80}, 81: {81, 102}, 82: {103, 138, 82, 121, 155}, 83: {83}, 84: {105, 84}, 85: {106, 140, 85, 123, 157}, 86: {86}, 87: {87}, 88: {88}, 89: {89}, 90: {90}, 91: {91}, 92: {92}, 93: {93}, 94: {94}, 95: {95}, 96: {96}, 97: {97}, 98: {98}, 99: {99}, 100: {100}, 101: {101}, 102: {102}, 103: {103}, 104: {104}, 105: {105}, 106: {106}, 107: {107}, 108: {108}, 109: {109}, 110: {110}, 111: {111}, 112: {112}, 113: {113}, 114: {114}, 115: {115}, 116: {116}, 117: {117}, 118: {118}, 119: {119}, 120: {120}, 121: {121}, 122: {122}, 123: {123}, 124: {124}, 125: {125}, 126: {126}, 127: {127}, 128: {128}, 129: {129}, 130: {130}, 131: {131}, 132: {132}, 133: {133}, 134: {134}, 135: {135}, 136: {136}, 137: {137}, 138: {138}, 139: {139}, 140: {140}, 141: {141}, 142: {142}, 143: {143}, 144: {144}, 145: {145}, 146: {146}, 147: {147}, 148: {148}, 149: {149}, 150: {150}, 151: {151}, 152: {152}, 153: {153}, 154: {154}, 155: {155}, 156: {156}, 157: {157}, 158: {158}, 159: {159}, 160: {160}, 161: {161}, 162: {162}, 163: {163}, 164: {164}, 165: {165}, 166: {166}, 167: {167}, 168: {168}, 169: {169}, 170: {170}, 171: {171}, 172: {172}, 173: {173}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 load load
EXACT 8 add add
EXACT 9 store store
EXACT 10 getelementptr getelementptr
EXACT 11 load load
EXACT 12 add add
EXACT 13 inttoptr inttoptr
EXACT 14 store store
EXACT 15 store store
EXACT 16 load load
EXACT 17 store store
EXACT 18 add add
EXACT 19 add add
EXACT 20 store store
EXACT 21 bitcast bitcast
EXACT 22 load load
EXACT 23 extractelement extractelement
EXACT 24 inttoptr inttoptr
EXACT 25 store store
EXACT 26 load load
EXACT 27 add add
EXACT 28 load load
EXACT 29 add add
EXACT 30 store store
EXACT 31 bitcast bitcast
EXACT 32 load load
EXACT 33 extractelement extractelement
EXACT 34 inttoptr inttoptr
EXACT 35 store store
EXACT 36 load load
EXACT 37 add add
EXACT 38 load load
EXACT 39 add add
EXACT 40 store store
EXACT 41 bitcast bitcast
EXACT 42 load load
EXACT 43 extractelement extractelement
EXACT 44 inttoptr inttoptr
EXACT 45 store store
EXACT 46 load load
EXACT 47 add add
EXACT 48 load load
EXACT 49 add add
EXACT 50 store store
EXACT 51 bitcast bitcast
EXACT 52 load load
EXACT 53 extractelement extractelement
EXACT 54 inttoptr inttoptr
EXACT 55 store store
EXACT 56 load load
EXACT 57 add add
EXACT 58 load load
EXACT 59 add add
EXACT 60 store store
EXACT 61 bitcast bitcast
EXACT 62 load load
EXACT 63 extractelement extractelement
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 bitcast bitcast
EXACT 67 load load
EXACT 68 add add
EXACT 69 load load
EXACT 70 add add
EXACT 71 store store
EXACT 72 inttoptr inttoptr
EXACT 73 load load
EXACT 74 bitcast bitcast
EXACT 75 bitcast bitcast
EXACT 76 store store
EXACT 77 getelementptr getelementptr
MORE 78 POT: 2
MORE 79 POT: 5
EXACT 80 getelementptr getelementptr
MORE 81 POT: 2
MORE 82 POT: 5
EXACT 83 getelementptr getelementptr
MORE 84 POT: 2
MORE 85 POT: 5
EXACT 86 add add
EXACT 87 add add
EXACT 88 store store
EXACT 89 load load
EXACT 90 bitcast bitcast
EXACT 91 load load
EXACT 92 inttoptr inttoptr
EXACT 93 load load
EXACT 94 extractelement extractelement
EXACT 95 fsub fsub
EXACT 96 store store
EXACT 97 bitcast bitcast
EXACT 98 extractelement extractelement
EXACT 99 bitcast bitcast
EXACT 100 store store
EXACT 101 extractelement extractelement
EXACT 102 bitcast bitcast
EXACT 103 store store
EXACT 104 extractelement extractelement
EXACT 105 bitcast bitcast
EXACT 106 store store
EXACT 107 add add
EXACT 108 add add
EXACT 109 store store
EXACT 110 load load
EXACT 111 load load
EXACT 112 inttoptr inttoptr
EXACT 113 load load
EXACT 114 extractelement extractelement
EXACT 115 fsub fsub
EXACT 116 store store
EXACT 117 bitcast bitcast
EXACT 118 extractelement extractelement
EXACT 119 store store
EXACT 120 extractelement extractelement
EXACT 121 store store
EXACT 122 extractelement extractelement
EXACT 123 store store
EXACT 124 add add
EXACT 125 add add
EXACT 126 store store
EXACT 127 load load
EXACT 128 load load
EXACT 129 inttoptr inttoptr
EXACT 130 load load
EXACT 131 extractelement extractelement
EXACT 132 fsub fsub
EXACT 133 store store
EXACT 134 bitcast bitcast
EXACT 135 extractelement extractelement
EXACT 136 store store
EXACT 137 extractelement extractelement
EXACT 138 store store
EXACT 139 extractelement extractelement
EXACT 140 store store
EXACT 141 add add
EXACT 142 add add
EXACT 143 store store
EXACT 144 load load
EXACT 145 load load
EXACT 146 inttoptr inttoptr
EXACT 147 load load
EXACT 148 extractelement extractelement
EXACT 149 fsub fsub
EXACT 150 store store
EXACT 151 bitcast bitcast
EXACT 152 extractelement extractelement
EXACT 153 store store
EXACT 154 extractelement extractelement
EXACT 155 store store
EXACT 156 extractelement extractelement
EXACT 157 store store
EXACT 158 add add
EXACT 159 store store
EXACT 160 load load
EXACT 161 add add
EXACT 162 inttoptr inttoptr
EXACT 163 load load
EXACT 164 store store
EXACT 165 store store
EXACT 166 add add
EXACT 167 store store
EXACT 168 inttoptr inttoptr
EXACT 169 load load
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%12 = add i64 %7, -12', '%13 = add i64 %10, 8', 'store i64 %13, i64* %3, align 8', '%14 = bitcast [32 x %union.VectorReg]* %11 to \\<2 x float\\>*', '%15 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%16 = extractelement \\<2 x float\\> %15, i32 0', '%17 = inttoptr i64 %12 to float*', 'store float %16, float* %17, align 4', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%19 = load i64, i64* %RBP.i, align 8', '%20 = add i64 %19, -8', '%21 = load i64, i64* %3, align 8', '%22 = add i64 %21, 5', 'store i64 %22, i64* %3, align 8', '%23 = bitcast %union.VectorReg* %18 to \\<2 x float\\>*', '%24 = load \\<2 x float\\>, \\<2 x float\\>* %23, align 1', '%25 = extractelement \\<2 x float\\> %24, i32 0', '%26 = inttoptr i64 %20 to float*', 'store float %25, float* %26, align 4', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2', '%28 = load i64, i64* %RBP.i, align 8', '%29 = add i64 %28, -12', '%30 = load i64, i64* %3, align 8', '%31 = add i64 %30, 5', 'store i64 %31, i64* %3, align 8', '%32 = bitcast %union.VectorReg* %27 to \\<2 x float\\>*', '%33 = load \\<2 x float\\>, \\<2 x float\\>* %32, align 1', '%34 = extractelement \\<2 x float\\> %33, i32 0', '%35 = inttoptr i64 %29 to float*', 'store float %34, float* %35, align 4', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3', '%37 = load i64, i64* %RBP.i, align 8', '%38 = add i64 %37, -16', '%39 = load i64, i64* %3, align 8', '%40 = add i64 %39, 5', 'store i64 %40, i64* %3, align 8', '%41 = bitcast %union.VectorReg* %36 to \\<2 x float\\>*', '%42 = load \\<2 x float\\>, \\<2 x float\\>* %41, align 1', '%43 = extractelement \\<2 x float\\> %42, i32 0', '%44 = inttoptr i64 %38 to float*', 'store float %43, float* %44, align 4', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4', '%46 = load i64, i64* %RBP.i, align 8', '%47 = add i64 %46, -20', '%48 = load i64, i64* %3, align 8', '%49 = add i64 %48, 5', 'store i64 %49, i64* %3, align 8', '%50 = bitcast %union.VectorReg* %45 to \\<2 x float\\>*', '%51 = load \\<2 x float\\>, \\<2 x float\\>* %50, align 1', '%52 = extractelement \\<2 x float\\> %51, i32 0', '%53 = inttoptr i64 %47 to float*', 'store float %52, float* %53, align 4', '%55 = load i64, i64* %RBP.i, align 8', '%56 = add i64 %55, -4', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 5', 'store i64 %58, i64* %3, align 8', '%59 = inttoptr i64 %56 to i32*', '%60 = load i32, i32* %59, align 4', '%61 = bitcast [32 x %union.VectorReg]* %11 to float*', '%62 = bitcast [32 x %union.VectorReg]* %11 to i32*', 'store i32 %60, i32* %62, align 1', '%69 = add i64 %55, -8', '%70 = add i64 %57, 10', 'store i64 %70, i64* %3, align 8', '%71 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%72 = bitcast i64* %65 to \\<2 x i32\\>*', '%73 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%74 = inttoptr i64 %69 to float*', '%75 = load float, float* %74, align 4', '%76 = extractelement \\<2 x float\\> %71, i32 0', '%77 = fsub float %76, %75', 'store float %77, float* %61, align 1', '%78 = bitcast \\<2 x float\\> %71 to \\<2 x i32\\>', '%79 = extractelement \\<2 x i32\\> %78, i32 1', '%80 = bitcast i8* %63 to i32*', 'store i32 %79, i32* %80, align 1', '%81 = extractelement \\<2 x i32\\> %73, i32 0', '%82 = bitcast i64* %65 to i32*', 'store i32 %81, i32* %82, align 1', '%83 = extractelement \\<2 x i32\\> %73, i32 1', '%84 = bitcast i8* %67 to i32*', 'store i32 %83, i32* %84, align 1', '%85 = add i64 %55, -12', '%86 = add i64 %57, 15', 'store i64 %86, i64* %3, align 8', '%87 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%88 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%89 = inttoptr i64 %85 to float*', '%90 = load float, float* %89, align 4', '%91 = extractelement \\<2 x float\\> %87, i32 0', '%92 = fsub float %91, %90', 'store float %92, float* %61, align 1', '%93 = bitcast \\<2 x float\\> %87 to \\<2 x i32\\>', '%94 = extractelement \\<2 x i32\\> %93, i32 1', 'store i32 %94, i32* %80, align 1', '%95 = extractelement \\<2 x i32\\> %88, i32 0', 'store i32 %95, i32* %82, align 1', '%96 = extractelement \\<2 x i32\\> %88, i32 1', 'store i32 %96, i32* %84, align 1', '%97 = add i64 %55, -16', '%98 = add i64 %57, 20', 'store i64 %98, i64* %3, align 8', '%99 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%100 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%101 = inttoptr i64 %97 to float*', '%102 = load float, float* %101, align 4', '%103 = extractelement \\<2 x float\\> %99, i32 0', '%104 = fsub float %103, %102', 'store float %104, float* %61, align 1', '%105 = bitcast \\<2 x float\\> %99 to \\<2 x i32\\>', '%106 = extractelement \\<2 x i32\\> %105, i32 1', 'store i32 %106, i32* %80, align 1', '%107 = extractelement \\<2 x i32\\> %100, i32 0', 'store i32 %107, i32* %82, align 1', '%108 = extractelement \\<2 x i32\\> %100, i32 1', 'store i32 %108, i32* %84, align 1', '%109 = add i64 %55, -20', '%110 = add i64 %57, 25', 'store i64 %110, i64* %3, align 8', '%111 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%112 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%113 = inttoptr i64 %109 to float*', '%114 = load float, float* %113, align 4', '%115 = extractelement \\<2 x float\\> %111, i32 0', '%116 = fsub float %115, %114', 'store float %116, float* %61, align 1', '%117 = bitcast \\<2 x float\\> %111 to \\<2 x i32\\>', '%118 = extractelement \\<2 x i32\\> %117, i32 1', 'store i32 %118, i32* %80, align 1', '%119 = extractelement \\<2 x i32\\> %112, i32 0', 'store i32 %119, i32* %82, align 1', '%120 = extractelement \\<2 x i32\\> %112, i32 1', 'store i32 %120, i32* %84, align 1', '%121 = add i64 %57, 26', 'store i64 %121, i64* %3, align 8', '%122 = load i64, i64* %6, align 8', '%123 = add i64 %122, 8', '%124 = inttoptr i64 %122 to i64*', '%125 = load i64, i64* %124, align 8', 'store i64 %125, i64* %RBP.i, align 8', 'store i64 %123, i64* %6, align 8', '%126 = add i64 %57, 27', 'store i64 %126, i64* %3, align 8', '%127 = inttoptr i64 %123 to i64*', '%128 = load i64, i64* %127, align 8', 'store i64 %128, i64* %3, align 8', '%129 = add i64 %122, 16', 'store i64 %129, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! store i64 %8, i64* %6, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Keep: %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %12 = add i64 %7, -12
Found line to remove! %13 = add i64 %10, 8
Found line to remove! store i64 %13, i64* %3, align 8
Keep: %14 = bitcast [32 x %union.VectorReg]* %11 to <2 x float>*
Keep: %15 = load <2 x float>, <2 x float>* %14, align 1
Keep: %16 = extractelement <2 x float> %15, i32 0
Found line to remove! %17 = inttoptr i64 %12 to float*
Found line to remove! store float %16, float* %17, align 4
Found line to remove! %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %19 = load i64, i64* %RBP.i, align 8
Found line to remove! %20 = add i64 %19, -8
Found line to remove! %21 = load i64, i64* %3, align 8
Found line to remove! %22 = add i64 %21, 5
Found line to remove! store i64 %22, i64* %3, align 8
Keep: %23 = bitcast %union.VectorReg* %18 to <2 x float>*
Keep: %24 = load <2 x float>, <2 x float>* %23, align 1
Keep: %25 = extractelement <2 x float> %24, i32 0
Found line to remove! %26 = inttoptr i64 %20 to float*
Found line to remove! store float %25, float* %26, align 4
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Found line to remove! %28 = load i64, i64* %RBP.i, align 8
Found line to remove! %29 = add i64 %28, -12
Found line to remove! %30 = load i64, i64* %3, align 8
Found line to remove! %31 = add i64 %30, 5
Found line to remove! store i64 %31, i64* %3, align 8
Keep: %32 = bitcast %union.VectorReg* %27 to <2 x float>*
Keep: %33 = load <2 x float>, <2 x float>* %32, align 1
Keep: %34 = extractelement <2 x float> %33, i32 0
Found line to remove! %35 = inttoptr i64 %29 to float*
Found line to remove! store float %34, float* %35, align 4
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Found line to remove! %37 = load i64, i64* %RBP.i, align 8
Found line to remove! %38 = add i64 %37, -16
Found line to remove! %39 = load i64, i64* %3, align 8
Found line to remove! %40 = add i64 %39, 5
Found line to remove! store i64 %40, i64* %3, align 8
Keep: %41 = bitcast %union.VectorReg* %36 to <2 x float>*
Keep: %42 = load <2 x float>, <2 x float>* %41, align 1
Keep: %43 = extractelement <2 x float> %42, i32 0
Found line to remove! %44 = inttoptr i64 %38 to float*
Found line to remove! store float %43, float* %44, align 4
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Found line to remove! %46 = load i64, i64* %RBP.i, align 8
Found line to remove! %47 = add i64 %46, -20
Found line to remove! %48 = load i64, i64* %3, align 8
Found line to remove! %49 = add i64 %48, 5
Found line to remove! store i64 %49, i64* %3, align 8
Keep: %50 = bitcast %union.VectorReg* %45 to <2 x float>*
Keep: %51 = load <2 x float>, <2 x float>* %50, align 1
Keep: %52 = extractelement <2 x float> %51, i32 0
Found line to remove! %53 = inttoptr i64 %47 to float*
Found line to remove! store float %52, float* %53, align 4
Keep: %54 = bitcast [32 x %union.VectorReg]* %11 to i8*
Found line to remove! %55 = load i64, i64* %RBP.i, align 8
Found line to remove! %56 = add i64 %55, -4
Found line to remove! %57 = load i64, i64* %3, align 8
Found line to remove! %58 = add i64 %57, 5
Found line to remove! store i64 %58, i64* %3, align 8
Found line to remove! %59 = inttoptr i64 %56 to i32*
Found line to remove! %60 = load i32, i32* %59, align 4
Found line to remove! %61 = bitcast [32 x %union.VectorReg]* %11 to float*
Found line to remove! %62 = bitcast [32 x %union.VectorReg]* %11 to i32*
Found line to remove! store i32 %60, i32* %62, align 1
Keep: %63 = getelementptr inbounds i8, i8* %54, i64 4
Keep: %64 = bitcast i8* %63 to float*
Keep: store float 0.000000e+00, float* %64, align 1
Keep: %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %66 = bitcast i64* %65 to float*
Keep: store float 0.000000e+00, float* %66, align 1
Keep: %67 = getelementptr inbounds i8, i8* %54, i64 12
Keep: %68 = bitcast i8* %67 to float*
Keep: store float 0.000000e+00, float* %68, align 1
Found line to remove! %69 = add i64 %55, -8
Found line to remove! %70 = add i64 %57, 10
Found line to remove! store i64 %70, i64* %3, align 8
Keep: %71 = load <2 x float>, <2 x float>* %14, align 1
Keep: %72 = bitcast i64* %65 to <2 x i32>*
Keep: %73 = load <2 x i32>, <2 x i32>* %72, align 1
Found line to remove! %74 = inttoptr i64 %69 to float*
Found line to remove! %75 = load float, float* %74, align 4
Keep: %76 = extractelement <2 x float> %71, i32 0
Found line to remove! %77 = fsub float %76, %75
Found line to remove! store float %77, float* %61, align 1
Keep: %78 = bitcast <2 x float> %71 to <2 x i32>
Keep: %79 = extractelement <2 x i32> %78, i32 1
Found line to remove! %80 = bitcast i8* %63 to i32*
Found line to remove! store i32 %79, i32* %80, align 1
Keep: %81 = extractelement <2 x i32> %73, i32 0
Found line to remove! %82 = bitcast i64* %65 to i32*
Found line to remove! store i32 %81, i32* %82, align 1
Keep: %83 = extractelement <2 x i32> %73, i32 1
Found line to remove! %84 = bitcast i8* %67 to i32*
Found line to remove! store i32 %83, i32* %84, align 1
Found line to remove! %85 = add i64 %55, -12
Found line to remove! %86 = add i64 %57, 15
Found line to remove! store i64 %86, i64* %3, align 8
Keep: %87 = load <2 x float>, <2 x float>* %14, align 1
Keep: %88 = load <2 x i32>, <2 x i32>* %72, align 1
Found line to remove! %89 = inttoptr i64 %85 to float*
Found line to remove! %90 = load float, float* %89, align 4
Keep: %91 = extractelement <2 x float> %87, i32 0
Found line to remove! %92 = fsub float %91, %90
Found line to remove! store float %92, float* %61, align 1
Keep: %93 = bitcast <2 x float> %87 to <2 x i32>
Keep: %94 = extractelement <2 x i32> %93, i32 1
Found line to remove! store i32 %94, i32* %80, align 1
Keep: %95 = extractelement <2 x i32> %88, i32 0
Found line to remove! store i32 %95, i32* %82, align 1
Keep: %96 = extractelement <2 x i32> %88, i32 1
Found line to remove! store i32 %96, i32* %84, align 1
Found line to remove! %97 = add i64 %55, -16
Found line to remove! %98 = add i64 %57, 20
Found line to remove! store i64 %98, i64* %3, align 8
Keep: %99 = load <2 x float>, <2 x float>* %14, align 1
Keep: %100 = load <2 x i32>, <2 x i32>* %72, align 1
Found line to remove! %101 = inttoptr i64 %97 to float*
Found line to remove! %102 = load float, float* %101, align 4
Keep: %103 = extractelement <2 x float> %99, i32 0
Found line to remove! %104 = fsub float %103, %102
Found line to remove! store float %104, float* %61, align 1
Keep: %105 = bitcast <2 x float> %99 to <2 x i32>
Keep: %106 = extractelement <2 x i32> %105, i32 1
Found line to remove! store i32 %106, i32* %80, align 1
Keep: %107 = extractelement <2 x i32> %100, i32 0
Found line to remove! store i32 %107, i32* %82, align 1
Keep: %108 = extractelement <2 x i32> %100, i32 1
Found line to remove! store i32 %108, i32* %84, align 1
Found line to remove! %109 = add i64 %55, -20
Found line to remove! %110 = add i64 %57, 25
Found line to remove! store i64 %110, i64* %3, align 8
Keep: %111 = load <2 x float>, <2 x float>* %14, align 1
Keep: %112 = load <2 x i32>, <2 x i32>* %72, align 1
Found line to remove! %113 = inttoptr i64 %109 to float*
Found line to remove! %114 = load float, float* %113, align 4
Keep: %115 = extractelement <2 x float> %111, i32 0
Found line to remove! %116 = fsub float %115, %114
Found line to remove! store float %116, float* %61, align 1
Keep: %117 = bitcast <2 x float> %111 to <2 x i32>
Keep: %118 = extractelement <2 x i32> %117, i32 1
Found line to remove! store i32 %118, i32* %80, align 1
Keep: %119 = extractelement <2 x i32> %112, i32 0
Found line to remove! store i32 %119, i32* %82, align 1
Keep: %120 = extractelement <2 x i32> %112, i32 1
Found line to remove! store i32 %120, i32* %84, align 1
Found line to remove! %121 = add i64 %57, 26
Found line to remove! store i64 %121, i64* %3, align 8
Found line to remove! %122 = load i64, i64* %6, align 8
Found line to remove! %123 = add i64 %122, 8
Found line to remove! %124 = inttoptr i64 %122 to i64*
Found line to remove! %125 = load i64, i64* %124, align 8
Found line to remove! store i64 %125, i64* %RBP.i, align 8
Found line to remove! store i64 %123, i64* %6, align 8
Found line to remove! %126 = add i64 %57, 27
Found line to remove! store i64 %126, i64* %3, align 8
Found line to remove! %127 = inttoptr i64 %123 to i64*
Found line to remove! %128 = load i64, i64* %127, align 8
Found line to remove! store i64 %128, i64* %3, align 8
Found line to remove! %129 = add i64 %122, 16
Found line to remove! store i64 %129, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %6, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%12 = add i64 %7, -12', '%13 = add i64 %10, 8', 'store i64 %13, i64* %3, align 8', '%14 = bitcast [32 x %union.VectorReg]* %11 to \\<2 x float\\>*', '%15 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%16 = extractelement \\<2 x float\\> %15, i32 0', '%17 = inttoptr i64 %12 to float*', 'store float %16, float* %17, align 4', '%18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%19 = load i64, i64* %RBP.i, align 8', '%20 = add i64 %19, -8', '%21 = load i64, i64* %3, align 8', '%22 = add i64 %21, 5', 'store i64 %22, i64* %3, align 8', '%23 = bitcast %union.VectorReg* %18 to \\<2 x float\\>*', '%24 = load \\<2 x float\\>, \\<2 x float\\>* %23, align 1', '%25 = extractelement \\<2 x float\\> %24, i32 0', '%26 = inttoptr i64 %20 to float*', 'store float %25, float* %26, align 4', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2', '%28 = load i64, i64* %RBP.i, align 8', '%29 = add i64 %28, -12', '%30 = load i64, i64* %3, align 8', '%31 = add i64 %30, 5', 'store i64 %31, i64* %3, align 8', '%32 = bitcast %union.VectorReg* %27 to \\<2 x float\\>*', '%33 = load \\<2 x float\\>, \\<2 x float\\>* %32, align 1', '%34 = extractelement \\<2 x float\\> %33, i32 0', '%35 = inttoptr i64 %29 to float*', 'store float %34, float* %35, align 4', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3', '%37 = load i64, i64* %RBP.i, align 8', '%38 = add i64 %37, -16', '%39 = load i64, i64* %3, align 8', '%40 = add i64 %39, 5', 'store i64 %40, i64* %3, align 8', '%41 = bitcast %union.VectorReg* %36 to \\<2 x float\\>*', '%42 = load \\<2 x float\\>, \\<2 x float\\>* %41, align 1', '%43 = extractelement \\<2 x float\\> %42, i32 0', '%44 = inttoptr i64 %38 to float*', 'store float %43, float* %44, align 4', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4', '%46 = load i64, i64* %RBP.i, align 8', '%47 = add i64 %46, -20', '%48 = load i64, i64* %3, align 8', '%49 = add i64 %48, 5', 'store i64 %49, i64* %3, align 8', '%50 = bitcast %union.VectorReg* %45 to \\<2 x float\\>*', '%51 = load \\<2 x float\\>, \\<2 x float\\>* %50, align 1', '%52 = extractelement \\<2 x float\\> %51, i32 0', '%53 = inttoptr i64 %47 to float*', 'store float %52, float* %53, align 4', '%55 = load i64, i64* %RBP.i, align 8', '%56 = add i64 %55, -4', '%57 = load i64, i64* %3, align 8', '%58 = add i64 %57, 5', 'store i64 %58, i64* %3, align 8', '%59 = inttoptr i64 %56 to i32*', '%60 = load i32, i32* %59, align 4', '%61 = bitcast [32 x %union.VectorReg]* %11 to float*', '%62 = bitcast [32 x %union.VectorReg]* %11 to i32*', 'store i32 %60, i32* %62, align 1', '%69 = add i64 %55, -8', '%70 = add i64 %57, 10', 'store i64 %70, i64* %3, align 8', '%71 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%72 = bitcast i64* %65 to \\<2 x i32\\>*', '%73 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%74 = inttoptr i64 %69 to float*', '%75 = load float, float* %74, align 4', '%76 = extractelement \\<2 x float\\> %71, i32 0', '%77 = fsub float %76, %75', 'store float %77, float* %61, align 1', '%78 = bitcast \\<2 x float\\> %71 to \\<2 x i32\\>', '%79 = extractelement \\<2 x i32\\> %78, i32 1', '%80 = bitcast i8* %63 to i32*', 'store i32 %79, i32* %80, align 1', '%81 = extractelement \\<2 x i32\\> %73, i32 0', '%82 = bitcast i64* %65 to i32*', 'store i32 %81, i32* %82, align 1', '%83 = extractelement \\<2 x i32\\> %73, i32 1', '%84 = bitcast i8* %67 to i32*', 'store i32 %83, i32* %84, align 1', '%85 = add i64 %55, -12', '%86 = add i64 %57, 15', 'store i64 %86, i64* %3, align 8', '%87 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%88 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%89 = inttoptr i64 %85 to float*', '%90 = load float, float* %89, align 4', '%91 = extractelement \\<2 x float\\> %87, i32 0', '%92 = fsub float %91, %90', 'store float %92, float* %61, align 1', '%93 = bitcast \\<2 x float\\> %87 to \\<2 x i32\\>', '%94 = extractelement \\<2 x i32\\> %93, i32 1', 'store i32 %94, i32* %80, align 1', '%95 = extractelement \\<2 x i32\\> %88, i32 0', 'store i32 %95, i32* %82, align 1', '%96 = extractelement \\<2 x i32\\> %88, i32 1', 'store i32 %96, i32* %84, align 1', '%97 = add i64 %55, -16', '%98 = add i64 %57, 20', 'store i64 %98, i64* %3, align 8', '%99 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%100 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%101 = inttoptr i64 %97 to float*', '%102 = load float, float* %101, align 4', '%103 = extractelement \\<2 x float\\> %99, i32 0', '%104 = fsub float %103, %102', 'store float %104, float* %61, align 1', '%105 = bitcast \\<2 x float\\> %99 to \\<2 x i32\\>', '%106 = extractelement \\<2 x i32\\> %105, i32 1', 'store i32 %106, i32* %80, align 1', '%107 = extractelement \\<2 x i32\\> %100, i32 0', 'store i32 %107, i32* %82, align 1', '%108 = extractelement \\<2 x i32\\> %100, i32 1', 'store i32 %108, i32* %84, align 1', '%109 = add i64 %55, -20', '%110 = add i64 %57, 25', 'store i64 %110, i64* %3, align 8', '%111 = load \\<2 x float\\>, \\<2 x float\\>* %14, align 1', '%112 = load \\<2 x i32\\>, \\<2 x i32\\>* %72, align 1', '%113 = inttoptr i64 %109 to float*', '%114 = load float, float* %113, align 4', '%115 = extractelement \\<2 x float\\> %111, i32 0', '%116 = fsub float %115, %114', 'store float %116, float* %61, align 1', '%117 = bitcast \\<2 x float\\> %111 to \\<2 x i32\\>', '%118 = extractelement \\<2 x i32\\> %117, i32 1', 'store i32 %118, i32* %80, align 1', '%119 = extractelement \\<2 x i32\\> %112, i32 0', 'store i32 %119, i32* %82, align 1', '%120 = extractelement \\<2 x i32\\> %112, i32 1', 'store i32 %120, i32* %84, align 1', '%121 = add i64 %57, 26', 'store i64 %121, i64* %3, align 8', '%122 = load i64, i64* %6, align 8', '%123 = add i64 %122, 8', '%124 = inttoptr i64 %122 to i64*', '%125 = load i64, i64* %124, align 8', 'store i64 %125, i64* %RBP.i, align 8', 'store i64 %123, i64* %6, align 8', '%126 = add i64 %57, 27', 'store i64 %126, i64* %3, align 8', '%127 = inttoptr i64 %123 to i64*', '%128 = load i64, i64* %127, align 8', 'store i64 %128, i64* %3, align 8', '%129 = add i64 %122, 16', 'store i64 %129, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4', '%8 = load i64, i64* %RBP, align 8', '%9 = add i64 %1, 1', 'store i64 %9, i64* %PC, align 8', '%10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%11 = load i64, i64* %10, align 8', '%12 = add i64 %11, -8', '%13 = inttoptr i64 %12 to i64*', 'store i64 %8, i64* %13, align 8', 'store i64 %12, i64* %10, align 8', '%14 = load i64, i64* %PC, align 8', 'store i64 %12, i64* %RBP, align 8', '%15 = add i64 %11, -12', '%16 = add i64 %14, 8', 'store i64 %16, i64* %PC, align 8', '%17 = bitcast [32 x %union.VectorReg]* %3 to \\<2 x float\\>*', '%18 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%19 = extractelement \\<2 x float\\> %18, i32 0', '%20 = inttoptr i64 %15 to float*', 'store float %19, float* %20, align 4', '%21 = load i64, i64* %RBP, align 8', '%22 = add i64 %21, -8', '%23 = load i64, i64* %PC, align 8', '%24 = add i64 %23, 5', 'store i64 %24, i64* %PC, align 8', '%25 = bitcast %union.VectorReg* %4 to \\<2 x float\\>*', '%26 = load \\<2 x float\\>, \\<2 x float\\>* %25, align 1', '%27 = extractelement \\<2 x float\\> %26, i32 0', '%28 = inttoptr i64 %22 to float*', 'store float %27, float* %28, align 4', '%29 = load i64, i64* %RBP, align 8', '%30 = add i64 %29, -12', '%31 = load i64, i64* %PC, align 8', '%32 = add i64 %31, 5', 'store i64 %32, i64* %PC, align 8', '%33 = bitcast %union.VectorReg* %5 to \\<2 x float\\>*', '%34 = load \\<2 x float\\>, \\<2 x float\\>* %33, align 1', '%35 = extractelement \\<2 x float\\> %34, i32 0', '%36 = inttoptr i64 %30 to float*', 'store float %35, float* %36, align 4', '%37 = load i64, i64* %RBP, align 8', '%38 = add i64 %37, -16', '%39 = load i64, i64* %PC, align 8', '%40 = add i64 %39, 5', 'store i64 %40, i64* %PC, align 8', '%41 = bitcast %union.VectorReg* %6 to \\<2 x float\\>*', '%42 = load \\<2 x float\\>, \\<2 x float\\>* %41, align 1', '%43 = extractelement \\<2 x float\\> %42, i32 0', '%44 = inttoptr i64 %38 to float*', 'store float %43, float* %44, align 4', '%45 = load i64, i64* %RBP, align 8', '%46 = add i64 %45, -20', '%47 = load i64, i64* %PC, align 8', '%48 = add i64 %47, 5', 'store i64 %48, i64* %PC, align 8', '%49 = bitcast %union.VectorReg* %7 to \\<2 x float\\>*', '%50 = load \\<2 x float\\>, \\<2 x float\\>* %49, align 1', '%51 = extractelement \\<2 x float\\> %50, i32 0', '%52 = inttoptr i64 %46 to float*', 'store float %51, float* %52, align 4', '%54 = load i64, i64* %RBP, align 8', '%55 = add i64 %54, -4', '%56 = load i64, i64* %PC, align 8', '%57 = add i64 %56, 5', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %55 to i32*', '%59 = load i32, i32* %58, align 4', '%60 = bitcast [32 x %union.VectorReg]* %3 to float*', '%61 = bitcast [32 x %union.VectorReg]* %3 to i32*', 'store i32 %59, i32* %61, align 1', '%68 = add i64 %54, -8', '%69 = add i64 %56, 10', 'store i64 %69, i64* %PC, align 8', '%70 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%71 = bitcast i64* %64 to \\<2 x i32\\>*', '%72 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%73 = inttoptr i64 %68 to float*', '%74 = load float, float* %73, align 4', '%75 = extractelement \\<2 x float\\> %70, i32 0', '%76 = fsub float %75, %74', 'store float %76, float* %60, align 1', '%77 = bitcast \\<2 x float\\> %70 to \\<2 x i32\\>', '%78 = extractelement \\<2 x i32\\> %77, i32 1', '%79 = bitcast i8* %62 to i32*', 'store i32 %78, i32* %79, align 1', '%80 = extractelement \\<2 x i32\\> %72, i32 0', '%81 = bitcast i64* %64 to i32*', 'store i32 %80, i32* %81, align 1', '%82 = extractelement \\<2 x i32\\> %72, i32 1', '%83 = bitcast i8* %66 to i32*', 'store i32 %82, i32* %83, align 1', '%84 = add i64 %54, -12', '%85 = add i64 %56, 15', 'store i64 %85, i64* %PC, align 8', '%86 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%87 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%88 = inttoptr i64 %84 to float*', '%89 = load float, float* %88, align 4', '%90 = extractelement \\<2 x float\\> %86, i32 0', '%91 = fsub float %90, %89', 'store float %91, float* %60, align 1', '%92 = bitcast \\<2 x float\\> %86 to \\<2 x i32\\>', '%93 = extractelement \\<2 x i32\\> %92, i32 1', 'store i32 %93, i32* %79, align 1', '%94 = extractelement \\<2 x i32\\> %87, i32 0', 'store i32 %94, i32* %81, align 1', '%95 = extractelement \\<2 x i32\\> %87, i32 1', 'store i32 %95, i32* %83, align 1', '%96 = add i64 %54, -16', '%97 = add i64 %56, 20', 'store i64 %97, i64* %PC, align 8', '%98 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%99 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%100 = inttoptr i64 %96 to float*', '%101 = load float, float* %100, align 4', '%102 = extractelement \\<2 x float\\> %98, i32 0', '%103 = fsub float %102, %101', 'store float %103, float* %60, align 1', '%104 = bitcast \\<2 x float\\> %98 to \\<2 x i32\\>', '%105 = extractelement \\<2 x i32\\> %104, i32 1', 'store i32 %105, i32* %79, align 1', '%106 = extractelement \\<2 x i32\\> %99, i32 0', 'store i32 %106, i32* %81, align 1', '%107 = extractelement \\<2 x i32\\> %99, i32 1', 'store i32 %107, i32* %83, align 1', '%108 = add i64 %54, -20', '%109 = add i64 %56, 25', 'store i64 %109, i64* %PC, align 8', '%110 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%111 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%112 = inttoptr i64 %108 to float*', '%113 = load float, float* %112, align 4', '%114 = extractelement \\<2 x float\\> %110, i32 0', '%115 = fsub float %114, %113', 'store float %115, float* %60, align 1', '%116 = bitcast \\<2 x float\\> %110 to \\<2 x i32\\>', '%117 = extractelement \\<2 x i32\\> %116, i32 1', 'store i32 %117, i32* %79, align 1', '%118 = extractelement \\<2 x i32\\> %111, i32 0', 'store i32 %118, i32* %81, align 1', '%119 = extractelement \\<2 x i32\\> %111, i32 1', 'store i32 %119, i32* %83, align 1', '%120 = add i64 %56, 26', 'store i64 %120, i64* %PC, align 8', '%121 = load i64, i64* %10, align 8', '%122 = add i64 %121, 8', '%123 = inttoptr i64 %121 to i64*', '%124 = load i64, i64* %123, align 8', 'store i64 %124, i64* %RBP, align 8', 'store i64 %122, i64* %10, align 8', '%125 = add i64 %56, 27', 'store i64 %125, i64* %PC, align 8', '%126 = inttoptr i64 %122 to i64*', '%127 = load i64, i64* %126, align 8', 'store i64 %127, i64* %PC, align 8', '%128 = add i64 %121, 16', 'store i64 %128, i64* %10, align 8'])
Keep: block_40cdc0:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
Found line to remove! %8 = load i64, i64* %RBP, align 8
Found line to remove! %9 = add i64 %1, 1
Found line to remove! store i64 %9, i64* %PC, align 8
Found line to remove! %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %11 = load i64, i64* %10, align 8
Found line to remove! %12 = add i64 %11, -8
Found line to remove! %13 = inttoptr i64 %12 to i64*
Found line to remove! store i64 %8, i64* %13, align 8
Found line to remove! store i64 %12, i64* %10, align 8
Found line to remove! %14 = load i64, i64* %PC, align 8
Found line to remove! store i64 %12, i64* %RBP, align 8
Found line to remove! %15 = add i64 %11, -12
Found line to remove! %16 = add i64 %14, 8
Found line to remove! store i64 %16, i64* %PC, align 8
Keep: %17 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
Keep: %18 = load <2 x float>, <2 x float>* %17, align 1
Keep: %19 = extractelement <2 x float> %18, i32 0
Found line to remove! %20 = inttoptr i64 %15 to float*
Found line to remove! store float %19, float* %20, align 4
Found line to remove! %21 = load i64, i64* %RBP, align 8
Found line to remove! %22 = add i64 %21, -8
Found line to remove! %23 = load i64, i64* %PC, align 8
Found line to remove! %24 = add i64 %23, 5
Found line to remove! store i64 %24, i64* %PC, align 8
Keep: %25 = bitcast %union.VectorReg* %4 to <2 x float>*
Keep: %26 = load <2 x float>, <2 x float>* %25, align 1
Keep: %27 = extractelement <2 x float> %26, i32 0
Found line to remove! %28 = inttoptr i64 %22 to float*
Found line to remove! store float %27, float* %28, align 4
Found line to remove! %29 = load i64, i64* %RBP, align 8
Found line to remove! %30 = add i64 %29, -12
Found line to remove! %31 = load i64, i64* %PC, align 8
Found line to remove! %32 = add i64 %31, 5
Found line to remove! store i64 %32, i64* %PC, align 8
Keep: %33 = bitcast %union.VectorReg* %5 to <2 x float>*
Keep: %34 = load <2 x float>, <2 x float>* %33, align 1
Keep: %35 = extractelement <2 x float> %34, i32 0
Found line to remove! %36 = inttoptr i64 %30 to float*
Found line to remove! store float %35, float* %36, align 4
Found line to remove! %37 = load i64, i64* %RBP, align 8
Found line to remove! %38 = add i64 %37, -16
Found line to remove! %39 = load i64, i64* %PC, align 8
Found line to remove! %40 = add i64 %39, 5
Found line to remove! store i64 %40, i64* %PC, align 8
Keep: %41 = bitcast %union.VectorReg* %6 to <2 x float>*
Keep: %42 = load <2 x float>, <2 x float>* %41, align 1
Keep: %43 = extractelement <2 x float> %42, i32 0
Found line to remove! %44 = inttoptr i64 %38 to float*
Found line to remove! store float %43, float* %44, align 4
Found line to remove! %45 = load i64, i64* %RBP, align 8
Found line to remove! %46 = add i64 %45, -20
Found line to remove! %47 = load i64, i64* %PC, align 8
Found line to remove! %48 = add i64 %47, 5
Found line to remove! store i64 %48, i64* %PC, align 8
Keep: %49 = bitcast %union.VectorReg* %7 to <2 x float>*
Keep: %50 = load <2 x float>, <2 x float>* %49, align 1
Keep: %51 = extractelement <2 x float> %50, i32 0
Found line to remove! %52 = inttoptr i64 %46 to float*
Found line to remove! store float %51, float* %52, align 4
Keep: %53 = bitcast [32 x %union.VectorReg]* %3 to i8*
Found line to remove! %54 = load i64, i64* %RBP, align 8
Found line to remove! %55 = add i64 %54, -4
Found line to remove! %56 = load i64, i64* %PC, align 8
Found line to remove! %57 = add i64 %56, 5
Found line to remove! store i64 %57, i64* %PC, align 8
Found line to remove! %58 = inttoptr i64 %55 to i32*
Found line to remove! %59 = load i32, i32* %58, align 4
Found line to remove! %60 = bitcast [32 x %union.VectorReg]* %3 to float*
Found line to remove! %61 = bitcast [32 x %union.VectorReg]* %3 to i32*
Found line to remove! store i32 %59, i32* %61, align 1
Keep: %62 = getelementptr inbounds i8, i8* %53, i64 4
Keep: %63 = bitcast i8* %62 to float*
Keep: store float 0.000000e+00, float* %63, align 1
Keep: %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %65 = bitcast i64* %64 to float*
Keep: store float 0.000000e+00, float* %65, align 1
Keep: %66 = getelementptr inbounds i8, i8* %53, i64 12
Keep: %67 = bitcast i8* %66 to float*
Keep: store float 0.000000e+00, float* %67, align 1
Found line to remove! %68 = add i64 %54, -8
Found line to remove! %69 = add i64 %56, 10
Found line to remove! store i64 %69, i64* %PC, align 8
Keep: %70 = load <2 x float>, <2 x float>* %17, align 1
Keep: %71 = bitcast i64* %64 to <2 x i32>*
Keep: %72 = load <2 x i32>, <2 x i32>* %71, align 1
Found line to remove! %73 = inttoptr i64 %68 to float*
Found line to remove! %74 = load float, float* %73, align 4
Keep: %75 = extractelement <2 x float> %70, i32 0
Found line to remove! %76 = fsub float %75, %74
Found line to remove! store float %76, float* %60, align 1
Keep: %77 = bitcast <2 x float> %70 to <2 x i32>
Keep: %78 = extractelement <2 x i32> %77, i32 1
Found line to remove! %79 = bitcast i8* %62 to i32*
Found line to remove! store i32 %78, i32* %79, align 1
Keep: %80 = extractelement <2 x i32> %72, i32 0
Found line to remove! %81 = bitcast i64* %64 to i32*
Found line to remove! store i32 %80, i32* %81, align 1
Keep: %82 = extractelement <2 x i32> %72, i32 1
Found line to remove! %83 = bitcast i8* %66 to i32*
Found line to remove! store i32 %82, i32* %83, align 1
Found line to remove! %84 = add i64 %54, -12
Found line to remove! %85 = add i64 %56, 15
Found line to remove! store i64 %85, i64* %PC, align 8
Keep: %86 = load <2 x float>, <2 x float>* %17, align 1
Keep: %87 = load <2 x i32>, <2 x i32>* %71, align 1
Found line to remove! %88 = inttoptr i64 %84 to float*
Found line to remove! %89 = load float, float* %88, align 4
Keep: %90 = extractelement <2 x float> %86, i32 0
Found line to remove! %91 = fsub float %90, %89
Found line to remove! store float %91, float* %60, align 1
Keep: %92 = bitcast <2 x float> %86 to <2 x i32>
Keep: %93 = extractelement <2 x i32> %92, i32 1
Found line to remove! store i32 %93, i32* %79, align 1
Keep: %94 = extractelement <2 x i32> %87, i32 0
Found line to remove! store i32 %94, i32* %81, align 1
Keep: %95 = extractelement <2 x i32> %87, i32 1
Found line to remove! store i32 %95, i32* %83, align 1
Found line to remove! %96 = add i64 %54, -16
Found line to remove! %97 = add i64 %56, 20
Found line to remove! store i64 %97, i64* %PC, align 8
Keep: %98 = load <2 x float>, <2 x float>* %17, align 1
Keep: %99 = load <2 x i32>, <2 x i32>* %71, align 1
Found line to remove! %100 = inttoptr i64 %96 to float*
Found line to remove! %101 = load float, float* %100, align 4
Keep: %102 = extractelement <2 x float> %98, i32 0
Found line to remove! %103 = fsub float %102, %101
Found line to remove! store float %103, float* %60, align 1
Keep: %104 = bitcast <2 x float> %98 to <2 x i32>
Keep: %105 = extractelement <2 x i32> %104, i32 1
Found line to remove! store i32 %105, i32* %79, align 1
Keep: %106 = extractelement <2 x i32> %99, i32 0
Found line to remove! store i32 %106, i32* %81, align 1
Keep: %107 = extractelement <2 x i32> %99, i32 1
Found line to remove! store i32 %107, i32* %83, align 1
Found line to remove! %108 = add i64 %54, -20
Found line to remove! %109 = add i64 %56, 25
Found line to remove! store i64 %109, i64* %PC, align 8
Keep: %110 = load <2 x float>, <2 x float>* %17, align 1
Keep: %111 = load <2 x i32>, <2 x i32>* %71, align 1
Found line to remove! %112 = inttoptr i64 %108 to float*
Found line to remove! %113 = load float, float* %112, align 4
Keep: %114 = extractelement <2 x float> %110, i32 0
Found line to remove! %115 = fsub float %114, %113
Found line to remove! store float %115, float* %60, align 1
Keep: %116 = bitcast <2 x float> %110 to <2 x i32>
Keep: %117 = extractelement <2 x i32> %116, i32 1
Found line to remove! store i32 %117, i32* %79, align 1
Keep: %118 = extractelement <2 x i32> %111, i32 0
Found line to remove! store i32 %118, i32* %81, align 1
Keep: %119 = extractelement <2 x i32> %111, i32 1
Found line to remove! store i32 %119, i32* %83, align 1
Found line to remove! %120 = add i64 %56, 26
Found line to remove! store i64 %120, i64* %PC, align 8
Found line to remove! %121 = load i64, i64* %10, align 8
Found line to remove! %122 = add i64 %121, 8
Found line to remove! %123 = inttoptr i64 %121 to i64*
Found line to remove! %124 = load i64, i64* %123, align 8
Found line to remove! store i64 %124, i64* %RBP, align 8
Found line to remove! store i64 %122, i64* %10, align 8
Found line to remove! %125 = add i64 %56, 27
Found line to remove! store i64 %125, i64* %PC, align 8
Found line to remove! %126 = inttoptr i64 %122 to i64*
Found line to remove! %127 = load i64, i64* %126, align 8
Found line to remove!/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt: /tmp/tmpe4bfn2zw-query.ll:97:39: error: use of undefined value '%var_2_18'
%var_2_23 = bitcast %union.VectorReg* %var_2_18 to <2 x float>*
                                      ^
 store i64 %127, i64* %PC, align 8
Found line to remove! %128 = add i64 %121, 16
Found line to remove! store i64 %128, i64* %10, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4', '%8 = load i64, i64* %RBP, align 8', '%9 = add i64 %1, 1', 'store i64 %9, i64* %PC, align 8', '%10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%11 = load i64, i64* %10, align 8', '%12 = add i64 %11, -8', '%13 = inttoptr i64 %12 to i64*', 'store i64 %8, i64* %13, align 8', 'store i64 %12, i64* %10, align 8', '%14 = load i64, i64* %PC, align 8', 'store i64 %12, i64* %RBP, align 8', '%15 = add i64 %11, -12', '%16 = add i64 %14, 8', 'store i64 %16, i64* %PC, align 8', '%17 = bitcast [32 x %union.VectorReg]* %3 to \\<2 x float\\>*', '%18 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%19 = extractelement \\<2 x float\\> %18, i32 0', '%20 = inttoptr i64 %15 to float*', 'store float %19, float* %20, align 4', '%21 = load i64, i64* %RBP, align 8', '%22 = add i64 %21, -8', '%23 = load i64, i64* %PC, align 8', '%24 = add i64 %23, 5', 'store i64 %24, i64* %PC, align 8', '%25 = bitcast %union.VectorReg* %4 to \\<2 x float\\>*', '%26 = load \\<2 x float\\>, \\<2 x float\\>* %25, align 1', '%27 = extractelement \\<2 x float\\> %26, i32 0', '%28 = inttoptr i64 %22 to float*', 'store float %27, float* %28, align 4', '%29 = load i64, i64* %RBP, align 8', '%30 = add i64 %29, -12', '%31 = load i64, i64* %PC, align 8', '%32 = add i64 %31, 5', 'store i64 %32, i64* %PC, align 8', '%33 = bitcast %union.VectorReg* %5 to \\<2 x float\\>*', '%34 = load \\<2 x float\\>, \\<2 x float\\>* %33, align 1', '%35 = extractelement \\<2 x float\\> %34, i32 0', '%36 = inttoptr i64 %30 to float*', 'store float %35, float* %36, align 4', '%37 = load i64, i64* %RBP, align 8', '%38 = add i64 %37, -16', '%39 = load i64, i64* %PC, align 8', '%40 = add i64 %39, 5', 'store i64 %40, i64* %PC, align 8', '%41 = bitcast %union.VectorReg* %6 to \\<2 x float\\>*', '%42 = load \\<2 x float\\>, \\<2 x float\\>* %41, align 1', '%43 = extractelement \\<2 x float\\> %42, i32 0', '%44 = inttoptr i64 %38 to float*', 'store float %43, float* %44, align 4', '%45 = load i64, i64* %RBP, align 8', '%46 = add i64 %45, -20', '%47 = load i64, i64* %PC, align 8', '%48 = add i64 %47, 5', 'store i64 %48, i64* %PC, align 8', '%49 = bitcast %union.VectorReg* %7 to \\<2 x float\\>*', '%50 = load \\<2 x float\\>, \\<2 x float\\>* %49, align 1', '%51 = extractelement \\<2 x float\\> %50, i32 0', '%52 = inttoptr i64 %46 to float*', 'store float %51, float* %52, align 4', '%54 = load i64, i64* %RBP, align 8', '%55 = add i64 %54, -4', '%56 = load i64, i64* %PC, align 8', '%57 = add i64 %56, 5', 'store i64 %57, i64* %PC, align 8', '%58 = inttoptr i64 %55 to i32*', '%59 = load i32, i32* %58, align 4', '%60 = bitcast [32 x %union.VectorReg]* %3 to float*', '%61 = bitcast [32 x %union.VectorReg]* %3 to i32*', 'store i32 %59, i32* %61, align 1', '%68 = add i64 %54, -8', '%69 = add i64 %56, 10', 'store i64 %69, i64* %PC, align 8', '%70 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%71 = bitcast i64* %64 to \\<2 x i32\\>*', '%72 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%73 = inttoptr i64 %68 to float*', '%74 = load float, float* %73, align 4', '%75 = extractelement \\<2 x float\\> %70, i32 0', '%76 = fsub float %75, %74', 'store float %76, float* %60, align 1', '%77 = bitcast \\<2 x float\\> %70 to \\<2 x i32\\>', '%78 = extractelement \\<2 x i32\\> %77, i32 1', '%79 = bitcast i8* %62 to i32*', 'store i32 %78, i32* %79, align 1', '%80 = extractelement \\<2 x i32\\> %72, i32 0', '%81 = bitcast i64* %64 to i32*', 'store i32 %80, i32* %81, align 1', '%82 = extractelement \\<2 x i32\\> %72, i32 1', '%83 = bitcast i8* %66 to i32*', 'store i32 %82, i32* %83, align 1', '%84 = add i64 %54, -12', '%85 = add i64 %56, 15', 'store i64 %85, i64* %PC, align 8', '%86 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%87 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%88 = inttoptr i64 %84 to float*', '%89 = load float, float* %88, align 4', '%90 = extractelement \\<2 x float\\> %86, i32 0', '%91 = fsub float %90, %89', 'store float %91, float* %60, align 1', '%92 = bitcast \\<2 x float\\> %86 to \\<2 x i32\\>', '%93 = extractelement \\<2 x i32\\> %92, i32 1', 'store i32 %93, i32* %79, align 1', '%94 = extractelement \\<2 x i32\\> %87, i32 0', 'store i32 %94, i32* %81, align 1', '%95 = extractelement \\<2 x i32\\> %87, i32 1', 'store i32 %95, i32* %83, align 1', '%96 = add i64 %54, -16', '%97 = add i64 %56, 20', 'store i64 %97, i64* %PC, align 8', '%98 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%99 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%100 = inttoptr i64 %96 to float*', '%101 = load float, float* %100, align 4', '%102 = extractelement \\<2 x float\\> %98, i32 0', '%103 = fsub float %102, %101', 'store float %103, float* %60, align 1', '%104 = bitcast \\<2 x float\\> %98 to \\<2 x i32\\>', '%105 = extractelement \\<2 x i32\\> %104, i32 1', 'store i32 %105, i32* %79, align 1', '%106 = extractelement \\<2 x i32\\> %99, i32 0', 'store i32 %106, i32* %81, align 1', '%107 = extractelement \\<2 x i32\\> %99, i32 1', 'store i32 %107, i32* %83, align 1', '%108 = add i64 %54, -20', '%109 = add i64 %56, 25', 'store i64 %109, i64* %PC, align 8', '%110 = load \\<2 x float\\>, \\<2 x float\\>* %17, align 1', '%111 = load \\<2 x i32\\>, \\<2 x i32\\>* %71, align 1', '%112 = inttoptr i64 %108 to float*', '%113 = load float, float* %112, align 4', '%114 = extractelement \\<2 x float\\> %110, i32 0', '%115 = fsub float %114, %113', 'store float %115, float* %60, align 1', '%116 = bitcast \\<2 x float\\> %110 to \\<2 x i32\\>', '%117 = extractelement \\<2 x i32\\> %116, i32 1', 'store i32 %117, i32* %79, align 1', '%118 = extractelement \\<2 x i32\\> %111, i32 0', 'store i32 %118, i32* %81, align 1', '%119 = extractelement \\<2 x i32\\> %111, i32 1', 'store i32 %119, i32* %83, align 1', '%120 = add i64 %56, 26', 'store i64 %120, i64* %PC, align 8', '%121 = load i64, i64* %10, align 8', '%122 = add i64 %121, 8', '%123 = inttoptr i64 %121 to i64*', '%124 = load i64, i64* %123, align 8', 'store i64 %124, i64* %RBP, align 8', 'store i64 %122, i64* %10, align 8', '%125 = add i64 %56, 27', 'store i64 %125, i64* %PC, align 8', '%126 = inttoptr i64 %122 to i64*', '%127 = load i64, i64* %126, align 8', 'store i64 %127, i64* %PC, align 8', '%128 = add i64 %121, 16', 'store i64 %128, i64* %10, align 8'])
[x] Failed to do opt
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/_ZN28custom_sub_multiple_variableIfE8do_shiftEfffff/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
Traceback (most recent call last):
  File "/usr/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 728, in <module>
    matcher.do_match()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 101, in do_match
    self.do_opt()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 582, in do_opt
    env=MYENV)
  File "/usr/lib/python3.6/subprocess.py", line 311, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt -S -inline /tmp/tmpe4bfn2zw-query.ll -o /tmp/tmpe4bfn2zw-query.ll' returned non-zero exit status 1.
