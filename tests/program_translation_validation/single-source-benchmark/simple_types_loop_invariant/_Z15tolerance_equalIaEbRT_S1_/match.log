Writing '/tmp/tmp4n8i3rh6.dot'...
Writing '/tmp/tmp4n8i3rh6.dot':Done

Reading LLVM: /tmp/tmpabnwqt5m-query.ll
Extracting function [_Z15tolerance_equalIaEbRT_S1_] from /tmp/tmpabnwqt5m-query.ll
Dot file generated!
Writing '/tmp/tmproon0t3m.dot'...
Writing '/tmp/tmproon0t3m.dot':Done

Reading LLVM: /tmp/tmp7jxevywl-target.ll
Extracting function [_Z15tolerance_equalIaEbRT_S1_] from /tmp/tmp7jxevywl-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 %39 = add i64 %7, -16
- 49 %40 = load i64, i64* %RDI.i42, align 8
- 50 %41 = add i64 %10, 11
- 51 store i64 %41, i64* %3, align 8
- 52 %42 = inttoptr i64 %39 to i64*
- 53 store i64 %40, i64* %42, align 8
- 54 %RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 55 %43 = load i64, i64* %RBP.i, align 8
- 56 %44 = add i64 %43, -16
- 57 %45 = load i64, i64* %RSI.i39, align 8
- 58 %46 = load i64, i64* %3, align 8
- 59 %47 = add i64 %46, 4
- 60 store i64 %47, i64* %3, align 8
- 61 %48 = inttoptr i64 %44 to i64*
- 62 store i64 %45, i64* %48, align 8
- 63 %49 = load i64, i64* %RBP.i, align 8
- 64 %50 = add i64 %49, -8
- 65 %51 = load i64, i64* %3, align 8
- 66 %52 = add i64 %51, 4
- 67 store i64 %52, i64* %3, align 8
- 68 %53 = inttoptr i64 %50 to i64*
- 69 %54 = load i64, i64* %53, align 8
- 70 store i64 %54, i64* %RSI.i39, align 8
- 71 %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 72 %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
- 73 %56 = add i64 %51, 7
- 74 store i64 %56, i64* %3, align 8
- 75 %57 = inttoptr i64 %54 to i8*
- 76 %58 = load i8, i8* %57, align 1
- 77 %59 = sext i8 %58 to i64
- 78 %60 = and i64 %59, 4294967295
- 79 store i64 %60, i64* %RAX.i33, align 8
- 80 %61 = add i64 %49, -16
- 81 %62 = add i64 %51, 11
- 82 store i64 %62, i64* %3, align 8
- 83 %63 = inttoptr i64 %61 to i64*
- 84 %64 = load i64, i64* %63, align 8
- 85 store i64 %64, i64* %RSI.i39, align 8
- 86 %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 87 %65 = add i64 %51, 14
- 88 store i64 %65, i64* %3, align 8
- 89 %66 = inttoptr i64 %64 to i8*
- 90 %67 = load i8, i8* %66, align 1
- 91 %68 = sext i8 %67 to i64
- 92 %69 = and i64 %68, 4294967295
- 93 store i64 %69, i64* %RCX.i, align 8
- 94 %70 = sext i8 %67 to i32
- 95 %71 = zext i32 %70 to i64
- 96 %72 = sext i8 %58 to i32
- 97 %73 = sub nsw i32 %72, %70
- 98 %74 = zext i32 %73 to i64
- 99 store i64 %74, i64* %RAX.i33, align 8
- 100 %75 = icmp ult i8 %58, %67
- 101 %76 = zext i1 %75 to i8
- 102 store i8 %76, i8* %14, align 1
- 103 %77 = and i32 %73, 255
- 104 %78 = tail call i32 @llvm.ctpop.i32(i32 %77)
- 105 %79 = trunc i32 %78 to i8
- 106 %80 = and i8 %79, 1
- 107 %81 = xor i8 %80, 1
- 108 store i8 %81, i8* %21, align 1
- 109 %82 = xor i64 %71, %59
- 110 %83 = trunc i64 %82 to i32
- 111 %84 = xor i32 %83, %73
- 112 %85 = lshr i32 %84, 4
- 113 %86 = trunc i32 %85 to i8
- 114 %87 = and i8 %86, 1
- 115 store i8 %87, i8* %26, align 1
- 116 %88 = icmp eq i32 %73, 0
- 117 %89 = zext i1 %88 to i8
- 118 store i8 %89, i8* %29, align 1
- 119 %90 = lshr i32 %73, 31
- 120 %91 = trunc i32 %90 to i8
- 121 store i8 %91, i8* %32, align 1
- 122 %92 = lshr i32 %72, 31
- 123 %93 = lshr i32 %70, 31
- 124 %94 = xor i32 %93, %92
- 125 %95 = xor i32 %90, %92
- 126 %96 = add nuw nsw i32 %95, %94
- 127 %97 = icmp eq i32 %96, 2
- 128 %98 = zext i1 %97 to i8
- 129 store i8 %98, i8* %38, align 1
- 130 %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 131 %DL.i25 = bitcast %union.anon* %99 to i8*
- 132 %100 = trunc i32 %73 to i8
- 133 store i8 %100, i8* %DL.i25, align 1
- 134 %101 = add i64 %49, -17
- 135 %102 = add i64 %51, 21
- 136 store i64 %102, i64* %3, align 8
- 137 %103 = inttoptr i64 %101 to i8*
- 138 store i8 %100, i8* %103, align 1
- 139 %104 = load i64, i64* %RBP.i, align 8
- 140 %105 = add i64 %104, -17
- 141 %106 = load i64, i64* %3, align 8
- 142 %107 = add i64 %106, 4
- 143 store i64 %107, i64* %3, align 8
- 144 %108 = inttoptr i64 %105 to i8*
- 145 %109 = load i8, i8* %108, align 1
- 146 %110 = sext i8 %109 to i64
- 147 %111 = and i64 %110, 4294967295
- 148 store i64 %111, i64* %RDI.i42, align 8
- 149 %112 = add i64 %106, -76373
- 150 %113 = add i64 %106, 9
- 151 %114 = load i64, i64* %6, align 8
- 152 %115 = add i64 %114, -8
- 153 %116 = inttoptr i64 %115 to i64*
- 154 store i64 %113, i64* %116, align 8
- 155 store i64 %115, i64* %6, align 8
- 156 store i64 %112, i64* %3, align 8
- 157 %117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 158 %118 = load i64, i64* %3, align 8
- 159 %119 = add i64 %118, ptrtoint (%G_0xdb2__rip__type* @G_0xdb2__rip_ to i64)
- 160 %120 = add i64 %118, 8
- 161 store i64 %120, i64* %3, align 8
- 162 %121 = inttoptr i64 %119 to i64*
- 163 %122 = load i64, i64* %121, align 8
- 164 %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 165 store i64 %122, i64* %123, align 1
- 166 %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 167 %125 = bitcast i64* %124 to double*
- 168 store double 0.000000e+00, double* %125, align 1
- 169 %EAX.i = bitcast %union.anon* %55 to i32*
- 170 %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 171 %127 = load i32, i32* %EAX.i, align 4
- 172 %128 = sitofp i32 %127 to double
- 173 %129 = bitcast %union.VectorReg* %126 to double*
- 174 store double %128, double* %129, align 1
- 175 %130 = add i64 %118, 16
- 176 store i64 %130, i64* %3, align 8
- 177 %131 = bitcast i64 %122 to double
- 178 %132 = fcmp uno double %131, %128
- 179 \<badref\> = br i1 %132, label %133, label %143
- 180 %134 = fadd double %128, %131
- 181 %135 = bitcast double %134 to i64
- 182 %136 = and i64 %135, 9221120237041090560
- 183 %137 = icmp eq i64 %136, 9218868437227405312
- 184 %138 = and i64 %135, 2251799813685247
- 185 %139 = icmp ne i64 %138, 0
- 186 %140 = and i1 %137, %139
- 187 \<badref\> = br i1 %140, label %141, label %149
- 188 %142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %130, %struct.Memory* %117)
- 189 %.pre = load i64, i64* %3, align 8
- 190 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 191 %144 = fcmp ogt double %131, %128
- 192 \<badref\> = br i1 %144, label %149, label %145
- 193 %146 = fcmp olt double %131, %128
- 194 \<badref\> = br i1 %146, label %149, label %147
- 195 %148 = fcmp oeq double %131, %128
- 196 \<badref\> = br i1 %148, label %149, label %153
- 197 %150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]
- 198 %151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]
- 199 %152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]
- 200 store i8 %150, i8* %29, align 1
- 201 store i8 %151, i8* %21, align 1
- 202 store i8 %152, i8* %14, align 1
- 203 \<badref\> = br label %153
- 204 store i8 0, i8* %38, align 1
- 205 store i8 0, i8* %32, align 1
- 206 store i8 0, i8* %26, align 1
- 207 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 208 %154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]
- 209 %155 = phi %struct.Memory* [ %142, %141 ], [ %117, %153 ]
- 210 %156 = load i8, i8* %14, align 1
- 211 %157 = load i8, i8* %29, align 1
- 212 %158 = or i8 %157, %156
- 213 %159 = icmp eq i8 %158, 0
- 214 %160 = zext i1 %159 to i8
- 215 store i8 %160, i8* %DL.i25, align 1
- 216 %161 = zext i1 %159 to i64
- 217 store i64 %161, i64* %RAX.i33, align 8
- 218 %162 = load i64, i64* %6, align 8
- 219 %163 = add i64 %162, 32
- 220 store i64 %163, i64* %6, align 8
- 221 %164 = icmp ugt i64 %162, -33
- 222 %165 = zext i1 %164 to i8
- 223 store i8 %165, i8* %14, align 1
- 224 %166 = trunc i64 %163 to i32
- 225 %167 = and i32 %166, 255
- 226 %168 = tail call i32 @llvm.ctpop.i32(i32 %167)
- 227 %169 = trunc i32 %168 to i8
- 228 %170 = and i8 %169, 1
- 229 %171 = xor i8 %170, 1
- 230 store i8 %171, i8* %21, align 1
- 231 %172 = xor i64 %163, %162
- 232 %173 = lshr i64 %172, 4
- 233 %174 = trunc i64 %173 to i8
- 234 %175 = and i8 %174, 1
- 235 store i8 %175, i8* %26, align 1
- 236 %176 = icmp eq i64 %163, 0
- 237 %177 = zext i1 %176 to i8
- 238 store i8 %177, i8* %29, align 1
- 239 %178 = lshr i64 %163, 63
- 240 %179 = trunc i64 %178 to i8
- 241 store i8 %179, i8* %32, align 1
- 242 %180 = lshr i64 %162, 63
- 243 %181 = xor i64 %178, %180
- 244 %182 = add nuw nsw i64 %181, %178
- 245 %183 = icmp eq i64 %182, 2
- 246 %184 = zext i1 %183 to i8
- 247 store i8 %184, i8* %38, align 1
- 248 %185 = add i64 %154, 14
- 249 store i64 %185, i64* %3, align 8
- 250 %186 = add i64 %162, 40
- 251 %187 = inttoptr i64 %163 to i64*
- 252 %188 = load i64, i64* %187, align 8
- 253 store i64 %188, i64* %RBP.i, align 8
- 254 store i64 %186, i64* %6, align 8
- 255 %189 = add i64 %154, 15
- 256 store i64 %189, i64* %3, align 8
- 257 %190 = inttoptr i64 %186 to i64*
- 258 %191 = load i64, i64* %190, align 8
- 259 store i64 %191, i64* %3, align 8
- 260 %192 = add i64 %162, 48
- 261 store i64 %192, i64* %6, align 8
- 262 \<badref\> = ret %struct.Memory* %155
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b9781ae8>, {0: {0}, 1: {10}, 2: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 3: {13}, 4: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 5: {9}, 6: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 7: {16, 154, 71}, 8: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 9: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 10: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 11: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 12: {21}, 13: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 14: {23}, 15: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 16: {25}, 17: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 18: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 19: {107, 28, 221}, 20: {108, 184, 29, 222, 159}, 21: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 22: {224, 38, 230, 110, 118, 31}, 23: {32, 225, 111}, 24: {33}, 25: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 26: {128, 129, 35, 227, 239, 113, 50, 115}, 27: {116, 36, 228}, 28: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 29: {224, 38, 230, 110, 118, 31}, 30: {39}, 31: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 32: {104, 41, 232, 209, 181, 120}, 33: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 34: {43}, 35: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 36: {49, 235, 45, 238}, 37: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 38: {47}, 39: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 40: {49, 235, 45, 238}, 41: {128, 129, 35, 227, 239, 113, 50, 115}, 42: {240, 130, 51}, 43: {241, 131, 52}, 44: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 45: {54}, 46: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 47: {8}, 48: {56, 85, 63}, 49: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 50: {58, 86}, 51: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 52: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 53: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 54: {7}, 55: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 56: {56, 85, 63}, 57: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 58: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 59: {144, 73, 66}, 60: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 61: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 62: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 63: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 64: {16, 154, 71}, 65: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 66: {144, 73, 66}, 67: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 68: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 69: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 70: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 71: {1}, 72: {5}, 73: {78}, 74: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 75: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 76: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 77: {98, 100, 82, 148, 95}, 78: {96, 83, 149}, 79: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 80: {56, 85, 63}, 81: {58, 86}, 82: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 83: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 84: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 85: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 86: {6}, 87: {91, 244}, 88: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 89: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 90: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 91: {98, 100, 82, 148, 95}, 92: {96, 83, 149}, 93: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 94: {98, 100, 82, 148, 95}, 95: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 96: {98, 100, 82, 148, 95}, 97: {101}, 98: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 99: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 100: {104, 41, 232, 209, 181, 120}, 101: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 102: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 103: {107, 28, 221}, 104: {108, 184, 29, 222, 159}, 105: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 106: {224, 38, 230, 110, 118, 31}, 107: {32, 225, 111}, 108: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 109: {128, 129, 35, 227, 239, 113, 50, 115}, 110: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 111: {128, 129, 35, 227, 239, 113, 50, 115}, 112: {116, 36, 228}, 113: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 114: {224, 38, 230, 110, 118, 31}, 115: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 116: {104, 41, 232, 209, 181, 120}, 117: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 118: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 119: {123, 126, 127}, 120: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 121: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 122: {123, 126, 127}, 123: {123, 126, 127}, 124: {128, 129, 35, 227, 239, 113, 50, 115}, 125: {128, 129, 35, 227, 239, 113, 50, 115}, 126: {240, 130, 51}, 127: {241, 131, 52}, 128: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 129: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 130: {2}, 131: {3, 4, 165, 169, 173, 177}, 132: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 133: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 134: {136, 142}, 135: {137}, 136: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 137: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 138: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 139: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 140: {136, 142}, 141: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 142: {144, 73, 66}, 143: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 144: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 145: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 146: {98, 100, 82, 148, 95}, 147: {96, 83, 149}, 148: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 149: {151}, 150: {152}, 151: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 152: {16, 154, 71}, 153: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 154: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 155: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 156: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 157: {108, 184, 29, 222, 159}, 158: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 159: {240, 130, 51}, 160: set(), 161: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 162: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 163: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 164: {162}, 165: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 166: {164}, 167: {3, 4, 165, 169, 173, 177}, 168: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 169: {3, 4, 165, 169, 173, 177}, 170: {11}, 171: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 172: {168}, 173: {3, 4, 165, 169, 173, 177}, 174: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 175: {171}, 176: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 177: {3, 4, 165, 169, 173, 177}, 178: {187, 189, 174, 191}, 179: {192, 175, 183, 188, 190}, 180: {176}, 181: {3, 4, 165, 169, 173, 177}, 182: {178}, 183: {179}, 184: {180}, 185: {104, 41, 232, 209, 181, 120}, 186: {182}, 187: {192, 175, 183, 188, 190}, 188: {108, 184, 29, 222, 159}, 189: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 190: {186, 203, 199}, 191: {187, 189, 174, 191}, 192: {192, 175, 183, 188, 190}, 193: {187, 189, 174, 191}, 194: {192, 175, 183, 188, 190}, 195: {187, 189, 174, 191}, 196: {192, 175, 183, 188, 190}, 197: {193}, 198: {194}, 199: {195}, 200: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 201: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 202: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 203: {186, 203, 199}, 204: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 205: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 206: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 207: {186, 203, 199}, 208: {204, 205}, 209: {204, 205}, 210: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 211: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 212: {208}, 213: {104, 41, 232, 209, 181, 120}, 214: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 215: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 216: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 217: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 218: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 219: {215}, 220: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 221: {217}, 222: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 223: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 224: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 225: {107, 28, 221}, 226: {108, 184, 29, 222, 159}, 227: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 228: {224, 38, 230, 110, 118, 31}, 229: {32, 225, 111}, 230: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 231: {128, 129, 35, 227, 239, 113, 50, 115}, 232: {116, 36, 228}, 233: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 234: {224, 38, 230, 110, 118, 31}, 235: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 236: {104, 41, 232, 209, 181, 120}, 237: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 238: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 239: {49, 235, 45, 238}, 240: {37, 134, 229, 236, 109, 46, 114, 220, 117, 27, 124, 30, 223}, 241: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 242: {49, 235, 45, 238}, 243: {128, 129, 35, 227, 239, 113, 50, 115}, 244: {240, 130, 51}, 245: {241, 131, 52}, 246: {99, 132, 102, 105, 42, 233, 210, 242, 212, 53, 24, 121, 218}, 247: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 248: {91, 244}, 249: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 250: {246}, 251: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 252: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 253: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 254: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 255: {251}, 256: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 257: {68, 75, 139, 80, 17, 146, 247, 88, 253, 155, 60, 93}, 258: {12, 141, 15, 143, 19, 147, 153, 160, 161, 167, 185, 57, 62, 64, 65, 70, 72, 76, 206, 207, 81, 214, 89, 94, 248, 254}, 259: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 260: {256}, 261: {257, 133, 135, 138, 140, 14, 145, 18, 20, 22, 150, 26, 156, 157, 158, 34, 163, 166, 40, 170, 44, 172, 48, 55, 59, 61, 67, 196, 69, 197, 198, 200, 201, 74, 202, 77, 79, 211, 84, 213, 87, 216, 90, 219, 92, 97, 226, 103, 231, 106, 234, 250, 237, 112, 243, 245, 119, 249, 122, 252, 125, 255}, 262: {258}})
Equivalent! frozenset({58, 86}) {81, 50}
Equivalent! frozenset({59, 87}) {82, 51}
Equivalent! frozenset({144, 73, 66}) {66, 59, 142}
Equivalent! frozenset({145, 74, 67}) {67, 60, 143}
Equivalent! frozenset({186, 203, 199}) {203, 190, 207}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b9781ae8>, {0: {0}, 1: {10}, 2: {12}, 3: {13}, 4: {14}, 5: {9}, 6: {15}, 7: {16}, 8: {17}, 9: {18}, 10: {72, 19}, 11: {20}, 12: {21}, 13: {22}, 14: {23}, 15: {24}, 16: {25}, 17: {26}, 18: {27}, 19: {28}, 20: {29}, 21: {30}, 22: {31}, 23: {32}, 24: {33}, 25: {34}, 26: {35}, 27: {36}, 28: {37}, 29: {38}, 30: {39}, 31: {40}, 32: {41}, 33: {42}, 34: {43}, 35: {44}, 36: {45}, 37: {46}, 38: {47}, 39: {48}, 40: {49}, 41: {50}, 42: {51}, 43: {52}, 44: {53}, 45: {54}, 46: {55}, 47: {8}, 48: {56}, 49: {57}, 50: {86}, 51: {87}, 52: {60}, 53: {61}, 54: {7}, 55: {62}, 56: {63}, 57: {64}, 58: {72, 65, 143}, 59: {73}, 60: {74}, 61: {68}, 62: {69}, 63: {70}, 64: {71}, 65: {72, 65, 19, 143}, 66: {144}, 67: {145}, 68: {75}, 69: {76}, 70: {77}, 71: {1}, 72: {5}, 73: {78}, 74: {79}, 75: {80}, 76: {81}, 77: {82}, 78: {83}, 79: {84}, 80: {85}, 81: {58}, 82: {59}, 83: {88}, 84: {89}, 85: {90}, 86: {6}, 87: {91}, 88: {92}, 89: {93}, 90: {94}, 91: {95}, 92: {96}, 93: {97}, 94: {98}, 95: {99}, 96: {100}, 97: {101}, 98: {102}, 99: {103}, 100: {104}, 101: {105}, 102: {106}, 103: {107}, 104: {108}, 105: {109}, 106: {110}, 107: {111}, 108: {112}, 109: {113}, 110: {114}, 111: {115}, 112: {116}, 113: {117}, 114: {118}, 115: {119}, 116: {120}, 117: {121}, 118: {122}, 119: {123}, 120: {124}, 121: {125}, 122: {126}, 123: {127}, 124: {128}, 125: {129}, 126: {130}, 127: {131}, 128: {132}, 129: {133}, 130: {2}, 131: {3}, 132: {134}, 133: {135}, 134: {136}, 135: {137}, 136: {138}, 137: {139}, 138: {140}, 139: {141}, 140: {142}, 141: {72, 65, 143}, 142: {66}, 143: {67}, 144: {146}, 145: {147}, 146: {148}, 147: {149}, 148: {150}, 149: {151}, 150: {152}, 151: {153}, 152: {154}, 153: {155}, 154: {156}, 155: {157}, 156: {158}, 157: {184, 159}, 158: {160}, 159: set(), 160: set(), 161: set(), 162: set(), 163: set(), 164: set(), 165: set(), 166: {164}, 167: {165}, 168: {166}, 169: {4}, 170: {11}, 171: {167}, 172: {168}, 173: {169}, 174: {170}, 175: {171}, 176: {172}, 177: set(), 178: set(), 179: set(), 180: set(), 181: set(), 182: set(), 183: set(), 184: set(), 185: set(), 186: set(), 187: set(), 188: {184}, 189: {185}, 190: {203}, 191: set(), 192: set(), 193: set(), 194: set(), 195: set(), 196: set(), 197: {193}, 198: {194}, 199: {195}, 200: {196}, 201: {197}, 202: {198}, 203: {186}, 204: {200, 243, 133, 55}, 205: {48, 201, 125, 237}, 206: {40, 202, 119, 231}, 207: {199}, 208: {204}, 209: {205}, 210: {206}, 211: {207}, 212: {208}, 213: {209}, 214: {210}, 215: {211}, 216: {212}, 217: {213}, 218: {214}, 219: {215}, 220: {216}, 221: {217}, 222: {218}, 223: {219}, 224: {220}, 225: {221}, 226: {222}, 227: {223}, 228: {224}, 229: {225}, 230: {226}, 231: {227}, 232: {228}, 233: {229}, 234: {230}, 235: {231}, 236: {232}, 237: {233}, 238: {234}, 239: {235}, 240: {236}, 241: {237}, 242: {238}, 243: {239}, 244: {240}, 245: {241}, 246: {242}, 247: {243}, 248: {244}, 249: {245}, 250: {246}, 251: {247}, 252: {248}, 253: {249}, 254: {250}, 255: {251}, 256: {252}, 257: {253}, 258: {254}, 259: {255}, 260: {256}, 261: {257}, 262: {258}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
MORE 10 POT: 2
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
EXACT 54 getelementptr getelementptr
EXACT 55 load load
EXACT 56 add add
EXACT 57 load load
MORE 58 POT: 3
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
EXACT 63 load load
EXACT 64 add add
MORE 65 POT: 4
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 load load
EXACT 70 store store
EXACT 71 getelementptr getelementptr
EXACT 72 getelementptr getelementptr
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 sext sext
EXACT 78 and and
EXACT 79 store store
EXACT 80 add add
EXACT 81 add add
EXACT 82 store store
EXACT 83 inttoptr inttoptr
EXACT 84 load load
EXACT 85 store store
EXACT 86 getelementptr getelementptr
EXACT 87 add add
EXACT 88 store store
EXACT 89 inttoptr inttoptr
EXACT 90 load load
EXACT 91 sext sext
EXACT 92 and and
EXACT 93 store store
EXACT 94 sext sext
EXACT 95 zext zext
EXACT 96 sext sext
EXACT 97 sub sub
EXACT 98 zext zext
EXACT 99 store store
EXACT 100 icmp icmp
EXACT 101 zext zext
EXACT 102 store store
EXACT 103 and and
EXACT 104 tail tail
EXACT 105 trunc trunc
EXACT 106 and and
EXACT 107 xor xor
EXACT 108 store store
EXACT 109 xor xor
EXACT 110 trunc trunc
EXACT 111 xor xor
EXACT 112 lshr lshr
EXACT 113 trunc trunc
EXACT 114 and and
EXACT 115 store store
EXACT 116 icmp icmp
EXACT 117 zext zext
EXACT 118 store store
EXACT 119 lshr lshr
EXACT 120 trunc trunc
EXACT 121 store store
EXACT 122 lshr lshr
EXACT 123 lshr lshr
EXACT 124 xor xor
EXACT 125 xor xor
EXACT 126 add add
EXACT 127 icmp icmp
EXACT 128 zext zext
EXACT 129 store store
EXACT 130 getelementptr getelementptr
EXACT 131 bitcast bitcast
EXACT 132 trunc trunc
EXACT 133 store store
EXACT 134 add add
EXACT 135 add add
EXACT 136 store store
EXACT 137 inttoptr inttoptr
EXACT 138 store store
EXACT 139 load load
EXACT 140 add add
MORE 141 POT: 3
EXACT 142 add add
EXACT 143 store store
EXACT 144 inttoptr inttoptr
EXACT 145 load load
EXACT 146 sext sext
EXACT 147 and and
EXACT 148 store store
EXACT 149 add add
EXACT 150 add add
EXACT 151 load load
EXACT 152 add add
EXACT 153 inttoptr inttoptr
EXACT 154 store store
EXACT 155 store store
EXACT 156 store store
MORE 157 POT: 2
EXACT 158 load load
NO MATCH 159
NO MATCH 160
NO MATCH 161
NO MATCH 162
NO MATCH 163
NO MATCH 164
NO MATCH 165
EXACT 166 getelementptr getelementptr
EXACT 167 bitcast bitcast
EXACT 168 store store
EXACT 169 bitcast bitcast
EXACT 170 getelementptr getelementptr
EXACT 171 load load
EXACT 172 sitofp sitofp
EXACT 173 bitcast bitcast
EXACT 174 store store
EXACT 175 add add
EXACT 176 store store
NO MATCH 177
NO MATCH 178
NO MATCH 179
NO MATCH 180
NO MATCH 181
NO MATCH 182
NO MATCH 183
NO MATCH 184
NO MATCH 185
NO MATCH 186
NO MATCH 187
EXACT 188 tail tail
EXACT 189 load load
EXACT 190 br br
NO MATCH 191
NO MATCH 192
NO MATCH 193
NO MATCH 194
NO MATCH 195
NO MATCH 196
EXACT 197 phi phi
EXACT 198 phi phi
EXACT 199 phi phi
EXACT 200 store store
EXACT 201 store store
EXACT 202 store store
EXACT 203 br br
MORE 204 POT: 4
MORE 205 POT: 4
MORE 206 POT: 4
EXACT 207 br br
EXACT 208 phi phi
EXACT 209 phi phi
EXACT 210 load load
EXACT 211 load load
EXACT 212 or or
EXACT 213 icmp icmp
EXACT 214 zext zext
EXACT 215 store store
EXACT 216 zext zext
EXACT 217 store store
EXACT 218 load load
EXACT 219 add add
EXACT 220 store store
EXACT 221 icmp icmp
EXACT 222 zext zext
EXACT 223 store store
EXACT 224 trunc trunc
EXACT 225 and and
EXACT 226 tail tail
EXACT 227 trunc trunc
EXACT 228 and and
EXACT 229 xor xor
EXACT 230 store store
EXACT 231 xor xor
EXACT 232 lshr lshr
EXACT 233 trunc trunc
EXACT 234 and and
EXACT 235 store store
EXACT 236 icmp icmp
EXACT 237 zext zext
EXACT 238 store store
EXACT 239 lshr lshr
EXACT 240 trunc trunc
EXACT 241 store store
EXACT 242 lshr lshr
EXACT 243 xor xor
EXACT 244 add add
EXACT 245 icmp icmp
EXACT 246 zext zext
EXACT 247 store store
EXACT 248 add add
EXACT 249 store store
EXACT 250 add add
EXACT 251 inttoptr inttoptr
EXACT 252 load load
EXACT 253 store store
EXACT 254 store store
EXACT 255 add add
EXACT 256 store store
EXACT 257 inttoptr inttoptr
EXACT 258 load load
EXACT 259 store store
EXACT 260 add add
EXACT 261 store store
EXACT 262 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
- 3 %DL = bitcast %union.anon* %4 to i8*
- 4 %EAX = bitcast %union.anon* %3 to i32*
- 5 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 6 %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
- 7 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 8 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 9 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 10 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 11 %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 12 %6 = load i64, i64* %RBP, align 8
- 13 %7 = add i64 %1, 1
- 14 store i64 %7, i64* %PC, align 8
- 15 %8 = load i64, i64* %RSP, align 8
- 16 %9 = add i64 %8, -8
- 17 %10 = inttoptr i64 %9 to i64*
- 18 store i64 %6, i64* %10, align 8
- 19 %11 = load i64, i64* %PC, align 8
- 20 store i64 %9, i64* %RBP, align 8
- 21 %12 = add i64 %8, -40
- 22 store i64 %12, i64* %RSP, align 8
- 23 %13 = icmp ult i64 %9, 32
- 24 %14 = zext i1 %13 to i8
- 25 %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 26 store i8 %14, i8* %15, align 1
- 27 %16 = trunc i64 %12 to i32
- 28 %17 = and i32 %16, 255
- 29 %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
- 30 %19 = trunc i32 %18 to i8
- 31 %20 = and i8 %19, 1
- 32 %21 = xor i8 %20, 1
- 33 %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 34 store i8 %21, i8* %22, align 1
- 35 %23 = xor i64 %9, %12
- 36 %24 = lshr i64 %23, 4
- 37 %25 = trunc i64 %24 to i8
- 38 %26 = and i8 %25, 1
- 39 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 40 store i8 %26, i8* %27, align 1
- 41 %28 = icmp eq i64 %12, 0
- 42 %29 = zext i1 %28 to i8
- 43 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 44 store i8 %29, i8* %30, align 1
- 45 %31 = lshr i64 %12, 63
- 46 %32 = trunc i64 %31 to i8
- 47 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 48 store i8 %32, i8* %33, align 1
- 49 %34 = lshr i64 %9, 63
- 50 %35 = xor i64 %31, %34
- 51 %36 = add nuw nsw i64 %35, %34
- 52 %37 = icmp eq i64 %36, 2
- 53 %38 = zext i1 %37 to i8
- 54 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 55 store i8 %38, i8* %39, align 1
- 56 %40 = add i64 %8, -16
- 57 %41 = load i64, i64* %RDI, align 8
- 58 %42 = add i64 %11, 11
- 59 store i64 %42, i64* %PC, align 8
- 60 %43 = inttoptr i64 %40 to i64*
- 61 store i64 %41, i64* %43, align 8
- 62 %44 = load i64, i64* %RBP, align 8
- 63 %45 = add i64 %44, -16
- 64 %46 = load i64, i64* %RSI, align 8
- 65 %47 = load i64, i64* %PC, align 8
- 66 %48 = add i64 %47, 4
- 67 store i64 %48, i64* %PC, align 8
- 68 %49 = inttoptr i64 %45 to i64*
- 69 store i64 %46, i64* %49, align 8
- 70 %50 = load i64, i64* %RBP, align 8
- 71 %51 = add i64 %50, -8
- 72 %52 = load i64, i64* %PC, align 8
- 73 %53 = add i64 %52, 4
- 74 store i64 %53, i64* %PC, align 8
- 75 %54 = inttoptr i64 %51 to i64*
- 76 %55 = load i64, i64* %54, align 8
- 77 store i64 %55, i64* %RSI, align 8
- 78 %56 = add i64 %52, 7
- 79 store i64 %56, i64* %PC, align 8
- 80 %57 = inttoptr i64 %55 to i8*
- 81 %58 = load i8, i8* %57, align 1
- 82 %59 = sext i8 %58 to i64
- 83 %60 = and i64 %59, 4294967295
- 84 store i64 %60, i64* %RAX, align 8
- 85 %61 = add i64 %50, -16
- 86 %62 = add i64 %52, 11
- 87 store i64 %62, i64* %PC, align 8
- 88 %63 = inttoptr i64 %61 to i64*
- 89 %64 = load i64, i64* %63, align 8
- 90 store i64 %64, i64* %RSI, align 8
- 91 %65 = add i64 %52, 14
- 92 store i64 %65, i64* %PC, align 8
- 93 %66 = inttoptr i64 %64 to i8*
- 94 %67 = load i8, i8* %66, align 1
- 95 %68 = sext i8 %67 to i64
- 96 %69 = and i64 %68, 4294967295
- 97 store i64 %69, i64* %RCX, align 8
- 98 %70 = sext i8 %67 to i32
- 99 %71 = zext i32 %70 to i64
- 100 %72 = sext i8 %58 to i32
- 101 %73 = sub nsw i32 %72, %70
- 102 %74 = zext i32 %73 to i64
- 103 store i64 %74, i64* %RAX, align 8
- 104 %75 = icmp ult i8 %58, %67
- 105 %76 = zext i1 %75 to i8
- 106 store i8 %76, i8* %15, align 1
- 107 %77 = and i32 %73, 255
- 108 %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #12
- 109 %79 = trunc i32 %78 to i8
- 110 %80 = and i8 %79, 1
- 111 %81 = xor i8 %80, 1
- 112 store i8 %81, i8* %22, align 1
- 113 %82 = xor i64 %71, %59
- 114 %83 = trunc i64 %82 to i32
- 115 %84 = xor i32 %83, %73
- 116 %85 = lshr i32 %84, 4
- 117 %86 = trunc i32 %85 to i8
- 118 %87 = and i8 %86, 1
- 119 store i8 %87, i8* %27, align 1
- 120 %88 = icmp eq i32 %73, 0
- 121 %89 = zext i1 %88 to i8
- 122 store i8 %89, i8* %30, align 1
- 123 %90 = lshr i32 %73, 31
- 124 %91 = trunc i32 %90 to i8
- 125 store i8 %91, i8* %33, align 1
- 126 %92 = lshr i32 %72, 31
- 127 %93 = lshr i32 %70, 31
- 128 %94 = xor i32 %93, %92
- 129 %95 = xor i32 %90, %92
- 130 %96 = add nuw nsw i32 %95, %94
- 131 %97 = icmp eq i32 %96, 2
- 132 %98 = zext i1 %97 to i8
- 133 store i8 %98, i8* %39, align 1
- 134 %99 = trunc i32 %73 to i8
- 135 store i8 %99, i8* %DL, align 1
- 136 %100 = add i64 %50, -17
- 137 %101 = add i64 %52, 21
- 138 store i64 %101, i64* %PC, align 8
- 139 %102 = inttoptr i64 %100 to i8*
- 140 store i8 %99, i8* %102, align 1
- 141 %103 = load i64, i64* %RBP, align 8
- 142 %104 = add i64 %103, -17
- 143 %105 = load i64, i64* %PC, align 8
- 144 %106 = add i64 %105, 4
- 145 store i64 %106, i64* %PC, align 8
- 146 %107 = inttoptr i64 %104 to i8*
- 147 %108 = load i8, i8* %107, align 1
- 148 %109 = sext i8 %108 to i64
- 149 %110 = and i64 %109, 4294967295
- 150 store i64 %110, i64* %RDI, align 8
- 151 %111 = add i64 %105, -76373
- 152 %112 = add i64 %105, 9
- 153 %113 = load i64, i64* %RSP, align 8
- 154 %114 = add i64 %113, -8
- 155 %115 = inttoptr i64 %114 to i64*
- 156 store i64 %112, i64* %115, align 8
- 157 store i64 %114, i64* %RSP, align 8
- 158 store i64 %111, i64* %PC, align 8
- 159 %116 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 160 %117 = load i64, i64* %PC, align 8
- 161 %118 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to i64*), align 8
- 162 %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 163 store i64 %118, i64* %119, align 1
- 164 %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 165 %121 = bitcast i64* %120 to double*
- 166 store double 0.000000e+00, double* %121, align 1
- 167 %122 = load i32, i32* %EAX, align 4
- 168 %123 = sitofp i32 %122 to double
- 169 %124 = bitcast %union.VectorReg* %5 to double*
- 170 store double %123, double* %124, align 1
- 171 %125 = add i64 %117, 16
- 172 store i64 %125, i64* %PC, align 8
- 173 %126 = bitcast i64 %118 to double
- 174 %127 = fcmp uno double %126, %123
- 175 \<badref\> = br i1 %127, label %128, label %138
- 176 %129 = fadd double %123, %126
- 177 %130 = bitcast double %129 to i64
- 178 %131 = and i64 %130, 9221120237041090560
- 179 %132 = icmp eq i64 %131, 9218868437227405312
- 180 %133 = and i64 %130, 2251799813685247
- 181 %134 = icmp ne i64 %133, 0
- 182 %135 = and i1 %132, %134
- 183 \<badref\> = br i1 %135, label %136, label %144
- 184 %137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %125, %struct.Memory* %116) #13
- 185 %.pre = load i64, i64* %PC, align 8
- 186 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 187 %139 = fcmp ogt double %126, %123
- 188 \<badref\> = br i1 %139, label %144, label %140
- 189 %141 = fcmp olt double %126, %123
- 190 \<badref\> = br i1 %141, label %144, label %142
- 191 %143 = fcmp oeq double %126, %123
- 192 \<badref\> = br i1 %143, label %144, label %148
- 193 %145 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 1, %142 ], [ 1, %128 ]
- 194 %146 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 0, %142 ], [ 1, %128 ]
- 195 %147 = phi i8 [ 0, %138 ], [ 1, %140 ], [ 0, %142 ], [ 1, %128 ]
- 196 store i8 %145, i8* %30, align 1
- 197 store i8 %146, i8* %22, align 1
- 198 store i8 %147, i8* %15, align 1
- 199 \<badref\> = br label %148
- 200 store i8 0, i8* %39, align 1
- 201 store i8 0, i8* %33, align 1
- 202 store i8 0, i8* %27, align 1
- 203 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 204 %149 = phi i64 [ %.pre, %136 ], [ %125, %148 ]
- 205 %150 = phi %struct.Memory* [ %137, %136 ], [ %116, %148 ]
- 206 %151 = load i8, i8* %15, align 1
- 207 %152 = load i8, i8* %30, align 1
- 208 %153 = or i8 %152, %151
- 209 %154 = icmp eq i8 %153, 0
- 210 %155 = zext i1 %154 to i8
- 211 store i8 %155, i8* %DL, align 1
- 212 %156 = zext i1 %154 to i64
- 213 store i64 %156, i64* %RAX, align 8
- 214 %157 = load i64, i64* %RSP, align 8
- 215 %158 = add i64 %157, 32
- 216 store i64 %158, i64* %RSP, align 8
- 217 %159 = icmp ugt i64 %157, -33
- 218 %160 = zext i1 %159 to i8
- 219 store i8 %160, i8* %15, align 1
- 220 %161 = trunc i64 %158 to i32
- 221 %162 = and i32 %161, 255
- 222 %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #12
- 223 %164 = trunc i32 %163 to i8
- 224 %165 = and i8 %164, 1
- 225 %166 = xor i8 %165, 1
- 226 store i8 %166, i8* %22, align 1
- 227 %167 = xor i64 %158, %157
- 228 %168 = lshr i64 %167, 4
- 229 %169 = trunc i64 %168 to i8
- 230 %170 = and i8 %169, 1
- 231 store i8 %170, i8* %27, align 1
- 232 %171 = icmp eq i64 %158, 0
- 233 %172 = zext i1 %171 to i8
- 234 store i8 %172, i8* %30, align 1
- 235 %173 = lshr i64 %158, 63
- 236 %174 = trunc i64 %173 to i8
- 237 store i8 %174, i8* %33, align 1
- 238 %175 = lshr i64 %157, 63
- 239 %176 = xor i64 %173, %175
- 240 %177 = add nuw nsw i64 %176, %173
- 241 %178 = icmp eq i64 %177, 2
- 242 %179 = zext i1 %178 to i8
- 243 store i8 %179, i8* %39, align 1
- 244 %180 = add i64 %149, 14
- 245 store i64 %180, i64* %PC, align 8
- 246 %181 = add i64 %157, 40
- 247 %182 = inttoptr i64 %158 to i64*
- 248 %183 = load i64, i64* %182, align 8
- 249 store i64 %183, i64* %RBP, align 8
- 250 store i64 %181, i64* %RSP, align 8
- 251 %184 = add i64 %149, 15
- 252 store i64 %184, i64* %PC, align 8
- 253 %185 = inttoptr i64 %181 to i64*
- 254 %186 = load i64, i64* %185, align 8
- 255 store i64 %186, i64* %PC, align 8
- 256 %187 = add i64 %157, 48
- 257 store i64 %187, i64* %RSP, align 8
- 258 \<badref\> = ret %struct.Memory* %150
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b9781950>, {0: {0}, 1: {71}, 2: {130}, 3: {131, 167, 169, 173, 177, 181}, 4: {131, 167, 169, 173, 177, 181}, 5: {72}, 6: {86}, 7: {54}, 8: {47}, 9: {5}, 10: {1}, 11: {170}, 12: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 13: {3}, 14: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 15: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 16: {64, 152, 7}, 17: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 18: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 19: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 20: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 21: {12}, 22: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 23: {14}, 24: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 25: {16}, 26: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 27: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 28: {225, 19, 103}, 29: {226, 104, 20, 188, 157}, 30: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 31: {228, 106, 234, 114, 22, 29}, 32: {107, 229, 23}, 33: {24}, 34: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 35: {231, 41, 109, 111, 243, 26, 124, 125}, 36: {112, 232, 27}, 37: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 38: {228, 106, 234, 114, 22, 29}, 39: {30}, 40: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 41: {32, 100, 236, 116, 213, 185}, 42: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 43: {34}, 44: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 45: {40, 242, 36, 239}, 46: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 47: {38}, 48: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 49: {40, 242, 36, 239}, 50: {231, 41, 109, 111, 243, 26, 124, 125}, 51: {42, 244, 126, 159}, 52: {43, 245, 127}, 53: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 54: {45}, 55: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 56: {48, 56, 80}, 57: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 58: {81, 50}, 59: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 60: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 61: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 62: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 63: {48, 56, 80}, 64: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 65: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 66: {66, 59, 142}, 67: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 68: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 69: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 70: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 71: {64, 152, 7}, 72: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 73: {66, 59, 142}, 74: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 75: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 76: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 77: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 78: {73}, 79: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 80: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 81: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 82: {96, 77, 146, 91, 94}, 83: {147, 92, 78}, 84: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 85: {48, 56, 80}, 86: {81, 50}, 87: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 88: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 89: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 90: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 91: {248, 87}, 92: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 93: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 94: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 95: {96, 77, 146, 91, 94}, 96: {147, 92, 78}, 97: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 98: {96, 77, 146, 91, 94}, 99: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 100: {96, 77, 146, 91, 94}, 101: {97}, 102: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 103: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 104: {32, 100, 236, 116, 213, 185}, 105: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 106: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 107: {225, 19, 103}, 108: {226, 104, 20, 188, 157}, 109: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 110: {228, 106, 234, 114, 22, 29}, 111: {107, 229, 23}, 112: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 113: {231, 41, 109, 111, 243, 26, 124, 125}, 114: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 115: {231, 41, 109, 111, 243, 26, 124, 125}, 116: {112, 232, 27}, 117: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 118: {228, 106, 234, 114, 22, 29}, 119: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 120: {32, 100, 236, 116, 213, 185}, 121: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 122: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 123: {122, 123, 119}, 124: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 125: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 126: {122, 123, 119}, 127: {122, 123, 119}, 128: {231, 41, 109, 111, 243, 26, 124, 125}, 129: {231, 41, 109, 111, 243, 26, 124, 125}, 130: {42, 244, 126, 159}, 131: {43, 245, 127}, 132: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 133: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 134: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 135: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 136: {140, 134}, 137: {135}, 138: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 139: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 140: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 141: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 142: {140, 134}, 143: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 144: {66, 59, 142}, 145: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 146: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 147: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 148: {96, 77, 146, 91, 94}, 149: {147, 92, 78}, 150: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 151: {149}, 152: {150}, 153: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 154: {64, 152, 7}, 155: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 156: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 157: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 158: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 159: {226, 104, 20, 188, 157}, 160: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 161: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 162: {164}, 163: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 164: {166}, 165: {131, 167, 169, 173, 177, 181}, 166: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 167: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 168: {172}, 169: {131, 167, 169, 173, 177, 181}, 170: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 171: {175}, 172: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 173: {131, 167, 169, 173, 177, 181}, 174: {193, 178, 195, 191}, 175: {192, 194, 196, 179, 187}, 176: {180}, 177: {131, 167, 169, 173, 177, 181}, 178: {182}, 179: {183}, 180: {184}, 181: {32, 100, 236, 116, 213, 185}, 182: {186}, 183: {192, 194, 196, 179, 187}, 184: {226, 104, 20, 188, 157}, 185: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 186: {203, 190, 207}, 187: {193, 178, 195, 191}, 188: {192, 194, 196, 179, 187}, 189: {193, 178, 195, 191}, 190: {192, 194, 196, 179, 187}, 191: {193, 178, 195, 191}, 192: {192, 194, 196, 179, 187}, 193: {197}, 194: {198}, 195: {199}, 196: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 197: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 198: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 199: {203, 190, 207}, 200: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 201: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 202: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 203: {203, 190, 207}, 204: {208, 209}, 205: {208, 209}, 206: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 207: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 208: {212}, 209: {32, 100, 236, 116, 213, 185}, 210: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 211: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 212: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 213: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 214: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 215: {219}, 216: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 217: {221}, 218: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 219: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 220: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 221: {225, 19, 103}, 222: {226, 104, 20, 188, 157}, 223: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 224: {228, 106, 234, 114, 22, 29}, 225: {107, 229, 23}, 226: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 227: {231, 41, 109, 111, 243, 26, 124, 125}, 228: {112, 232, 27}, 229: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 230: {228, 106, 234, 114, 22, 29}, 231: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 232: {32, 100, 236, 116, 213, 185}, 233: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 234: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 235: {40, 242, 36, 239}, 236: {224, 227, 132, 37, 105, 233, 110, 240, 113, 18, 21, 120, 28}, 237: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 238: {40, 242, 36, 239}, 239: {231, 41, 109, 111, 243, 26, 124, 125}, 240: {42, 244, 126, 159}, 241: {43, 245, 127}, 242: {128, 33, 98, 101, 44, 237, 15, 117, 214, 246, 216, 222, 95}, 243: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 244: {248, 87}, 245: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 246: {250}, 247: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 248: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 249: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 250: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 251: {255}, 252: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 253: {257, 153, 162, 68, 8, 137, 75, 144, 83, 52, 89, 251, 61}, 254: {2, 258, 6, 10, 139, 141, 145, 151, 158, 163, 171, 49, 55, 57, 58, 189, 63, 65, 69, 76, 210, 211, 84, 90, 218, 252}, 255: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 256: {260}, 257: {256, 129, 259, 4, 133, 261, 136, 9, 138, 11, 13, 143, 17, 148, 25, 154, 155, 156, 31, 161, 35, 165, 39, 168, 46, 174, 176, 51, 53, 60, 62, 67, 70, 200, 201, 74, 202, 204, 205, 206, 79, 82, 85, 215, 88, 217, 220, 93, 223, 99, 249, 102, 230, 235, 108, 238, 241, 115, 118, 247, 121, 253, 254}, 258: {262}})
Equivalent! frozenset({81, 50}) {58, 86}
Equivalent! frozenset({82, 51}) {59, 87}
Equivalent! frozenset({66, 59, 142}) {144, 73, 66}
Equivalent! frozenset({67, 60, 143}) {145, 74, 67}
Equivalent! frozenset({193, 178, 195, 191}) {187, 189, 174, 191}
Equivalent! frozenset({192, 194, 179, 196}) {192, 188, 190, 175}
Equivalent! frozenset({203, 190, 207}) {186, 203, 199}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b9781950>, {0: {0}, 1: {71}, 2: {130}, 3: {131}, 4: {169}, 5: {72}, 6: {86}, 7: {54}, 8: {47}, 9: {5}, 10: {1}, 11: {170}, 12: {2}, 13: {3}, 14: {4}, 15: {6}, 16: {7}, 17: {8}, 18: {9}, 19: {65, 10}, 20: {11}, 21: {12}, 22: {13}, 23: {14}, 24: {15}, 25: {16}, 26: {17}, 27: {18}, 28: {19}, 29: {20}, 30: {21}, 31: {22}, 32: {23}, 33: {24}, 34: {25}, 35: {26}, 36: {27}, 37: {28}, 38: {29}, 39: {30}, 40: {31}, 41: {32}, 42: {33}, 43: {34}, 44: {35}, 45: {36}, 46: {37}, 47: {38}, 48: {39}, 49: {40}, 50: {41}, 51: {42}, 52: {43}, 53: {44}, 54: {45}, 55: {46}, 56: {48}, 57: {49}, 58: {81}, 59: {82}, 60: {52}, 61: {53}, 62: {55}, 63: {56}, 64: {57}, 65: {65, 58, 141}, 66: {142}, 67: {143}, 68: {61}, 69: {62}, 70: {63}, 71: {64}, 72: {65, 10, 58, 141}, 73: {59}, 74: {60}, 75: {68}, 76: {69}, 77: {70}, 78: {73}, 79: {74}, 80: {75}, 81: {76}, 82: {77}, 83: {78}, 84: {79}, 85: {80}, 86: {50}, 87: {51}, 88: {83}, 89: {84}, 90: {85}, 91: {87}, 92: {88}, 93: {89}, 94: {90}, 95: {91}, 96: {92}, 97: {93}, 98: {94}, 99: {95}, 100: {96}, 101: {97}, 102: {98}, 103: {99}, 104: {100}, 105: {101}, 106: {102}, 107: {103}, 108: {104}, 109: {105}, 110: {106}, 111: {107}, 112: {108}, 113: {109}, 114: {110}, 115: {111}, 116: {112}, 117: {113}, 118: {114}, 119: {115}, 120: {116}, 121: {117}, 122: {118}, 123: {119}, 124: {120}, 125: {121}, 126: {122}, 127: {123}, 128: {124}, 129: {125}, 130: {126}, 131: {127}, 132: {128}, 133: {129}, 134: {132}, 135: {133}, 136: {134}, 137: {135}, 138: {136}, 139: {137}, 140: {138}, 141: {139}, 142: {140}, 143: {65, 58, 141}, 144: {66}, 145: {67}, 146: {144}, 147: {145}, 148: {146}, 149: {147}, 150: {148}, 151: {149}, 152: {150}, 153: {151}, 154: {152}, 155: {153}, 156: {154}, 157: {155}, 158: {156}, 159: {188, 157}, 160: {158}, 161: {163}, 162: {164}, 163: {165}, 164: {166}, 165: {167}, 166: {168}, 167: {171}, 168: {172}, 169: {173}, 170: {174}, 171: {175}, 172: {176}, 173: {177}, 174: {195}, 175: {196}, 176: {180}, 177: {181}, 178: {182}, 179: {183}, 180: {184}, 181: {185}, 182: {186}, 183: {187}, 184: {188}, 185: {189}, 186: {203}, 187: {193}, 188: {194}, 189: {178}, 190: {179}, 191: {191}, 192: {192}, 193: {197}, 194: {198}, 195: {199}, 196: {200}, 197: {201}, 198: {202}, 199: {207}, 200: {129, 204, 46, 247}, 201: {241, 205, 121, 39}, 202: {115, 235, 206, 31}, 203: {190}, 204: {208}, 205: {209}, 206: {210}, 207: {211}, 208: {212}, 209: {213}, 210: {214}, 211: {215}, 212: {216}, 213: {217}, 214: {218}, 215: {219}, 216: {220}, 217: {221}, 218: {222}, 219: {223}, 220: {224}, 221: {225}, 222: {226}, 223: {227}, 224: {228}, 225: {229}, 226: {230}, 227: {231}, 228: {232}, 229: {233}, 230: {234}, 231: {235}, 232: {236}, 233: {237}, 234: {238}, 235: {239}, 236: {240}, 237: {241}, 238: {242}, 239: {243}, 240: {244}, 241: {245}, 242: {246}, 243: {247}, 244: {248}, 245: {249}, 246: {250}, 247: {251}, 248: {252}, 249: {253}, 250: {254}, 251: {255}, 252: {256}, 253: {257}, 254: {258}, 255: {259}, 256: {260}, 257: {261}, 258: {262}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 bitcast bitcast
EXACT 4 bitcast bitcast
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 load load
EXACT 13 add add
EXACT 14 store store
EXACT 15 load load
EXACT 16 add add
EXACT 17 inttoptr inttoptr
EXACT 18 store store
MORE 19 POT: 2
EXACT 20 store store
EXACT 21 add add
EXACT 22 store store
EXACT 23 icmp icmp
EXACT 24 zext zext
EXACT 25 getelementptr getelementptr
EXACT 26 store store
EXACT 27 trunc trunc
EXACT 28 and and
EXACT 29 tail tail
EXACT 30 trunc trunc
EXACT 31 and and
EXACT 32 xor xor
EXACT 33 getelementptr getelementptr
EXACT 34 store store
EXACT 35 xor xor
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 and and
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 icmp icmp
EXACT 42 zext zext
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 lshr lshr
EXACT 46 trunc trunc
EXACT 47 getelementptr getelementptr
EXACT 48 store store
EXACT 49 lshr lshr
EXACT 50 xor xor
EXACT 51 add add
EXACT 52 icmp icmp
EXACT 53 zext zext
EXACT 54 getelementptr getelementptr
EXACT 55 store store
EXACT 56 add add
EXACT 57 load load
EXACT 58 add add
EXACT 59 store store
EXACT 60 inttoptr inttoptr
EXACT 61 store store
EXACT 62 load load
EXACT 63 add add
EXACT 64 load load
MORE 65 POT: 3
EXACT 66 add add
EXACT 67 store store
EXACT 68 inttoptr inttoptr
EXACT 69 store store
EXACT 70 load load
EXACT 71 add add
MORE 72 POT: 4
EXACT 73 add add
EXACT 74 store store
EXACT 75 inttoptr inttoptr
EXACT 76 load load
EXACT 77 store store
EXACT 78 add add
EXACT 79 store store
EXACT 80 inttoptr inttoptr
EXACT 81 load load
EXACT 82 sext sext
EXACT 83 and and
EXACT 84 store store
EXACT 85 add add
EXACT 86 add add
EXACT 87 store store
EXACT 88 inttoptr inttoptr
EXACT 89 load load
EXACT 90 store store
EXACT 91 add add
EXACT 92 store store
EXACT 93 inttoptr inttoptr
EXACT 94 load load
EXACT 95 sext sext
EXACT 96 and and
EXACT 97 store store
EXACT 98 sext sext
EXACT 99 zext zext
EXACT 100 sext sext
EXACT 101 sub sub
EXACT 102 zext zext
EXACT 103 store store
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 and and
EXACT 108 tail tail
EXACT 109 trunc trunc
EXACT 110 and and
EXACT 111 xor xor
EXACT 112 store store
EXACT 113 xor xor
EXACT 114 trunc trunc
EXACT 115 xor xor
EXACT 116 lshr lshr
EXACT 117 trunc trunc
EXACT 118 and and
EXACT 119 store store
EXACT 120 icmp icmp
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 lshr lshr
EXACT 124 trunc trunc
EXACT 125 store store
EXACT 126 lshr lshr
EXACT 127 lshr lshr
EXACT 128 xor xor
EXACT 129 xor xor
EXACT 130 add add
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 trunc trunc
EXACT 135 store store
EXACT 136 add add
EXACT 137 add add
EXACT 138 store store
EXACT 139 inttoptr inttoptr
EXACT 140 store store
EXACT 141 load load
EXACT 142 add add
MORE 143 POT: 3
EXACT 144 add add
EXACT 145 store store
EXACT 146 inttoptr inttoptr
EXACT 147 load load
EXACT 148 sext sext
EXACT 149 and and
EXACT 150 store store
EXACT 151 add add
EXACT 152 add add
EXACT 153 load load
EXACT 154 add add
EXACT 155 inttoptr inttoptr
EXACT 156 store store
EXACT 157 store store
EXACT 158 store store
MORE 159 POT: 2
EXACT 160 load load
EXACT 161 load load
EXACT 162 getelementptr getelementptr
EXACT 163 store store
EXACT 164 getelementptr getelementptr
EXACT 165 bitcast bitcast
EXACT 166 store store
EXACT 167 load load
EXACT 168 sitofp sitofp
EXACT 169 bitcast bitcast
EXACT 170 store store
EXACT 171 add add
EXACT 172 store store
EXACT 173 bitcast bitcast
EXACT 174 fcmp fcmp
EXACT 175 br br
EXACT 176 fadd fadd
EXACT 177 bitcast bitcast
EXACT 178 and and
EXACT 179 icmp icmp
EXACT 180 and and
EXACT 181 icmp icmp
EXACT 182 and and
EXACT 183 br br
EXACT 184 tail tail
EXACT 185 load load
EXACT 186 br br
EXACT 187 fcmp fcmp
EXACT 188 br br
EXACT 189 fcmp fcmp
EXACT 190 br br
EXACT 191 fcmp fcmp
EXACT 192 br br
EXACT 193 phi phi
EXACT 194 phi phi
EXACT 195 phi phi
EXACT 196 store store
EXACT 197 store store
EXACT 198 store store
EXACT 199 br br
MORE 200 POT: 4
MORE 201 POT: 4
MORE 202 POT: 4
EXACT 203 br br
EXACT 204 phi phi
EXACT 205 phi phi
EXACT 206 load load
EXACT 207 load load
EXACT 208 or or
EXACT 209 icmp icmp
EXACT 210 zext zext
EXACT 211 store store
EXACT 212 zext zext
EXACT 213 store store
EXACT 214 load load
EXACT 215 add add
EXACT 216 store store
EXACT 217 icmp icmp
EXACT 218 zext zext
EXACT 219 store store
EXACT 220 trunc trunc
EXACT 221 and and
EXACT 222 tail tail
EXACT 223 trunc trunc
EXACT 224 and and
EXACT 225 xor xor
EXACT 226 store store
EXACT 227 xor xor
EXACT 228 lshr lshr
EXACT 229 trunc trunc
EXACT 230 and and
EXACT 231 store store
EXACT 232 icmp icmp
EXACT 233 zext zext
EXACT 234 store store
EXACT 235 lshr lshr
EXACT 236 trunc trunc
EXACT 237 store store
EXACT 238 lshr lshr
EXACT 239 xor xor
EXACT 240 add add
EXACT 241 icmp icmp
EXACT 242 zext zext
EXACT 243 store store
EXACT 244 add add
EXACT 245 store store
EXACT 246 add add
EXACT 247 inttoptr inttoptr
EXACT 248 load load
EXACT 249 store store
EXACT 250 store store
EXACT 251 add add
EXACT 252 store store
EXACT 253 inttoptr inttoptr
EXACT 254 load load
EXACT 255 store store
EXACT 256 add add
EXACT 257 store store
EXACT 258 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i42, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i39, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i39, align 8', '%RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i8*', '%58 = load i8, i8* %57, align 1', '%59 = sext i8 %58 to i64', '%60 = and i64 %59, 4294967295', 'store i64 %60, i64* %RAX.i33, align 8', '%61 = add i64 %49, -16', '%62 = add i64 %51, 11', 'store i64 %62, i64* %3, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI.i39, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%65 = add i64 %51, 14', 'store i64 %65, i64* %3, align 8', '%66 = inttoptr i64 %64 to i8*', '%67 = load i8, i8* %66, align 1', '%68 = sext i8 %67 to i64', '%69 = and i64 %68, 4294967295', 'store i64 %69, i64* %RCX.i, align 8', '%70 = sext i8 %67 to i32', '%71 = zext i32 %70 to i64', '%72 = sext i8 %58 to i32', '%73 = sub nsw i32 %72, %70', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX.i33, align 8', '%75 = icmp ult i8 %58, %67', '%76 = zext i1 %75 to i8', 'store i8 %76, i8* %14, align 1', '%77 = and i32 %73, 255', '%78 = tail call i32 @llvm.ctpop.i32(i32 %77)', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', '%81 = xor i8 %80, 1', 'store i8 %81, i8* %21, align 1', '%82 = xor i64 %71, %59', '%83 = trunc i64 %82 to i32', '%84 = xor i32 %83, %73', '%85 = lshr i32 %84, 4', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', 'store i8 %87, i8* %26, align 1', '%88 = icmp eq i32 %73, 0', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %29, align 1', '%90 = lshr i32 %73, 31', '%91 = trunc i32 %90 to i8', 'store i8 %91, i8* %32, align 1', '%92 = lshr i32 %72, 31', '%93 = lshr i32 %70, 31', '%94 = xor i32 %93, %92', '%95 = xor i32 %90, %92', '%96 = add nuw nsw i32 %95, %94', '%97 = icmp eq i32 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %38, align 1', '%99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DL.i25 = bitcast %union.anon* %99 to i8*', '%100 = trunc i32 %73 to i8', 'store i8 %100, i8* %DL.i25, align 1', '%101 = add i64 %49, -17', '%102 = add i64 %51, 21', 'store i64 %102, i64* %3, align 8', '%103 = inttoptr i64 %101 to i8*', 'store i8 %100, i8* %103, align 1', '%104 = load i64, i64* %RBP.i, align 8', '%105 = add i64 %104, -17', '%107 = add i64 %106, 4', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %105 to i8*', '%109 = load i8, i8* %108, align 1', '%110 = sext i8 %109 to i64', '%111 = and i64 %110, 4294967295', 'store i64 %111, i64* %RDI.i42, align 8', '%112 = add i64 %106, -76373', '%113 = add i64 %106, 9', '%114 = load i64, i64* %6, align 8', '%115 = add i64 %114, -8', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %6, align 8', 'store i64 %112, i64* %3, align 8', '%124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%125 = bitcast i64* %124 to double*', 'store double 0.000000e+00, double* %125, align 1', '%126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%129 = bitcast %union.VectorReg* %126 to double*', 'store double %128, double* %129, align 1', 'store i64 %130, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]', '%151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]', '%152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]', 'store i8 %150, i8* %29, align 1', 'store i8 %151, i8* %21, align 1', 'store i8 %152, i8* %14, align 1', '%154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]', '%156 = load i8, i8* %14, align 1', '%157 = load i8, i8* %29, align 1', '%158 = or i8 %157, %156', '%159 = icmp eq i8 %158, 0', '%160 = zext i1 %159 to i8', 'store i8 %160, i8* %DL.i25, align 1', '%161 = zext i1 %159 to i64', 'store i64 %161, i64* %RAX.i33, align 8', '%162 = load i64, i64* %6, align 8', '%163 = add i64 %162, 32', 'store i64 %163, i64* %6, align 8', '%164 = icmp ugt i64 %162, -33', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %14, align 1', '%166 = trunc i64 %163 to i32', '%167 = and i32 %166, 255', '%168 = tail call i32 @llvm.ctpop.i32(i32 %167)', '%169 = trunc i32 %168 to i8', '%170 = and i8 %169, 1', '%171 = xor i8 %170, 1', 'store i8 %171, i8* %21, align 1', '%172 = xor i64 %163, %162', '%173 = lshr i64 %172, 4', '%174 = trunc i64 %173 to i8', '%175 = and i8 %174, 1', 'store i8 %175, i8* %26, align 1', '%176 = icmp eq i64 %163, 0', '%177 = zext i1 %176 to i8', 'store i8 %177, i8* %29, align 1', '%178 = lshr i64 %163, 63', '%179 = trunc i64 %178 to i8', 'store i8 %179, i8* %32, align 1', '%180 = lshr i64 %162, 63', '%181 = xor i64 %178, %180', '%182 = add nuw nsw i64 %181, %178', '%183 = icmp eq i64 %182, 2', '%184 = zext i1 %183 to i8', 'store i8 %184, i8* %38, align 1', '%185 = add i64 %154, 14', 'store i64 %185, i64* %3, align 8', '%186 = add i64 %162, 40', '%187 = inttoptr i64 %163 to i64*', '%188 = load i64, i64* %187, align 8', 'store i64 %188, i64* %RBP.i, align 8', 'store i64 %186, i64* %6, align 8', '%189 = add i64 %154, 15', 'store i64 %189, i64* %3, align 8', '%190 = inttoptr i64 %186 to i64*', '%191 = load i64, i64* %190, align 8', 'store i64 %191, i64* %3, align 8', '%192 = add i64 %162, 48', 'store i64 %192, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Keep: %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Keep: %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Keep: %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Keep: %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -16
Found line to remove! %40 = load i64, i64* %RDI.i42, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Found line to remove! %RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %43 = load i64, i64* %RBP.i, align 8
Found line to remove! %44 = add i64 %43, -16
Found line to remove! %45 = load i64, i64* %RSI.i39, align 8
Keep: %46 = load i64, i64* %3, align 8
Found line to remove! %47 = add i64 %46, 4
Found line to remove! store i64 %47, i64* %3, align 8
Found line to remove! %48 = inttoptr i64 %44 to i64*
Found line to remove! store i64 %45, i64* %48, align 8
Found line to remove! %49 = load i64, i64* %RBP.i, align 8
Found line to remove! %50 = add i64 %49, -8
Keep: %51 = load i64, i64* %3, align 8
Found line to remove! %52 = add i64 %51, 4
Found line to remove! store i64 %52, i64* %3, align 8
Found line to remove! %53 = inttoptr i64 %50 to i64*
Found line to remove! %54 = load i64, i64* %53, align 8
Found line to remove! store i64 %54, i64* %RSI.i39, align 8
Keep: %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0
Found line to remove! %56 = add i64 %51, 7
Found line to remove! store i64 %56, i64* %3, align 8
Found line to remove! %57 = inttoptr i64 %54 to i8*
Found line to remove! %58 = load i8, i8* %57, align 1
Found line to remove! %59 = sext i8 %58 to i64
Found line to remove! %60 = and i64 %59, 4294967295
Found line to remove! store i64 %60, i64* %RAX.i33, align 8
Found line to remove! %61 = add i64 %49, -16
Found line to remove! %62 = add i64 %51, 11
Found line to remove! store i64 %62, i64* %3, align 8
Found line to remove! %63 = inttoptr i64 %61 to i64*
Found line to remove! %64 = load i64, i64* %63, align 8
Found line to remove! store i64 %64, i64* %RSI.i39, align 8
Found line to remove! %RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %65 = add i64 %51, 14
Found line to remove! store i64 %65, i64* %3, align 8
Found line to remove! %66 = inttoptr i64 %64 to i8*
Found line to remove! %67 = load i8, i8* %66, align 1
Found line to remove! %68 = sext i8 %67 to i64
Found line to remove! %69 = and i64 %68, 4294967295
Found line to remove! store i64 %69, i64* %RCX.i, align 8
Found line to remove! %70 = sext i8 %67 to i32
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! %72 = sext i8 %58 to i32
Found line to remove! %73 = sub nsw i32 %72, %70
Found line to remove! %74 = zext i32 %73 to i64
Found line to remove! store i64 %74, i64* %RAX.i33, align 8
Found line to remove! %75 = icmp ult i8 %58, %67
Found line to remove! %76 = zext i1 %75 to i8
Found line to remove! store i8 %76, i8* %14, align 1
Found line to remove! %77 = and i32 %73, 255
Found line to remove! %78 = tail call i32 @llvm.ctpop.i32(i32 %77)
Found line to remove! %79 = trunc i32 %78 to i8
Found line to remove! %80 = and i8 %79, 1
Found line to remove! %81 = xor i8 %80, 1
Found line to remove! store i8 %81, i8* %21, align 1
Found line to remove! %82 = xor i64 %71, %59
Found line to remove! %83 = trunc i64 %82 to i32
Found line to remove! %84 = xor i32 %83, %73
Found line to remove! %85 = lshr i32 %84, 4
Found line to remove! %86 = trunc i32 %85 to i8
Found line to remove! %87 = and i8 %86, 1
Found line to remove! store i8 %87, i8* %26, align 1
Found line to remove! %88 = icmp eq i32 %73, 0
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %29, align 1
Found line to remove! %90 = lshr i32 %73, 31
Found line to remove! %91 = trunc i32 %90 to i8
Found line to remove! store i8 %91, i8* %32, align 1
Found line to remove! %92 = lshr i32 %72, 31
Found line to remove! %93 = lshr i32 %70, 31
Found line to remove! %94 = xor i32 %93, %92
Found line to remove! %95 = xor i32 %90, %92
Found line to remove! %96 = add nuw nsw i32 %95, %94
Found line to remove! %97 = icmp eq i32 %96, 2
Found line to remove! %98 = zext i1 %97 to i8
Found line to remove! store i8 %98, i8* %38, align 1
Found line to remove! %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DL.i25 = bitcast %union.anon* %99 to i8*
Found line to remove! %100 = trunc i32 %73 to i8
Found line to remove! store i8 %100, i8* %DL.i25, align 1
Found line to remove! %101 = add i64 %49, -17
Found line to remove! %102 = add i64 %51, 21
Found line to remove! store i64 %102, i64* %3, align 8
Found line to remove! %103 = inttoptr i64 %101 to i8*
Found line to remove! store i8 %100, i8* %103, align 1
Found line to remove! %104 = load i64, i64* %RBP.i, align 8
Found line to remove! %105 = add i64 %104, -17
Keep: %106 = load i64, i64* %3, align 8
Found line to remove! %107 = add i64 %106, 4
Found line to remove! store i64 %107, i64* %3, align 8
Found line to remove! %108 = inttoptr i64 %105 to i8*
Found line to remove! %109 = load i8, i8* %108, align 1
Found line to remove! %110 = sext i8 %109 to i64
Found line to remove! %111 = and i64 %110, 4294967295
Found line to remove! store i64 %111, i64* %RDI.i42, align 8
Found line to remove! %112 = add i64 %106, -76373
Found line to remove! %113 = add i64 %106, 9
Found line to remove! %114 = load i64, i64* %6, align 8
Found line to remove! %115 = add i64 %114, -8
Found line to remove! %116 = inttoptr i64 %115 to i64*
Found line to remove! store i64 %113, i64* %116, align 8
Found line to remove! store i64 %115, i64* %6, align 8
Found line to remove! store i64 %112, i64* %3, align 8
Keep: %117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %118 = load i64, i64* %3, align 8
Keep: %119 = add i64 %118, ptrtoint (%G_0xdb2__rip__type* @G_0xdb2__rip_ to i64)
Keep: %120 = add i64 %118, 8
Keep: store i64 %120, i64* %3, align 8
Keep: %121 = inttoptr i64 %119 to i64*
Keep: %122 = load i64, i64* %121, align 8
Keep: %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %122, i64* %123, align 1
Found line to remove! %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %125 = bitcast i64* %124 to double*
Found line to remove! store double 0.000000e+00, double* %125, align 1
Keep: %EAX.i = bitcast %union.anon* %55 to i32*
Found line to remove! %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %127 = load i32, i32* %EAX.i, align 4
Keep: %128 = sitofp i32 %127 to double
Found line to remove! %129 = bitcast %union.VectorReg* %126 to double*
Found line to remove! store double %128, double* %129, align 1
Keep: %130 = add i64 %118, 16
Found line to remove! store i64 %130, i64* %3, align 8
Keep: %131 = bitcast i64 %122 to double
Keep: %132 = fcmp uno double %131, %128
Keep: br i1 %132, label %133, label %143
Keep: 
Keep: ; <label>:133:                                    ; preds = %entry
Keep: %134 = fadd double %128, %131
Keep: %135 = bitcast double %134 to i64
Keep: %136 = and i64 %135, 9221120237041090560
Keep: %137 = icmp eq i64 %136, 9218868437227405312
Keep: %138 = and i64 %135, 2251799813685247
Keep: %139 = icmp ne i64 %138, 0
Keep: %140 = and i1 %137, %139
Keep: br i1 %140, label %141, label %149
Keep: 
Keep: ; <label>:141:                                    ; preds = %133
Keep: %142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %130, %struct.Memory* %117)
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: ; <label>:143:                                    ; preds = %entry
Keep: %144 = fcmp ogt double %131, %128
Keep: br i1 %144, label %149, label %145
Keep: 
Keep: ; <label>:145:                                    ; preds = %143
Keep: %146 = fcmp olt double %131, %128
Keep: br i1 %146, label %149, label %147
Keep: 
Keep: ; <label>:147:                                    ; preds = %145
Keep: %148 = fcmp oeq double %131, %128
Keep: br i1 %148, label %149, label %153
Keep: 
Keep: ; <label>:149:                                    ; preds = %147, %145, %143, %133
Found line to remove! %150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]
Found line to remove! %151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]
Found line to remove! %152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]
Found line to remove! store i8 %150, i8* %29, align 1
Found line to remove! store i8 %151, i8* %21, align 1
Found line to remove! store i8 %152, i8* %14, align 1
Keep: br label %153
Keep: 
Keep: ; <label>:153:                                    ; preds = %149, %147
Keep: store i8 0, i8* %38, align 1
Keep: store i8 0, i8* %32, align 1
Keep: store i8 0, i8* %26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %153, %141
Found line to remove! %154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]
Keep: %155 = phi %struct.Memory* [ %142, %141 ], [ %117, %153 ]
Found line to remove! %156 = load i8, i8* %14, align 1
Found line to remove! %157 = load i8, i8* %29, align 1
Found line to remove! %158 = or i8 %157, %156
Found line to remove! %159 = icmp eq i8 %158, 0
Found line to remove! %160 = zext i1 %159 to i8
Found line to remove! store i8 %160, i8* %DL.i25, align 1
Found line to remove! %161 = zext i1 %159 to i64
Found line to remove! store i64 %161, i64* %RAX.i33, align 8
Found line to remove! %162 = load i64, i64* %6, align 8
Found line to remove! %163 = add i64 %162, 32
Found line to remove! store i64 %163, i64* %6, align 8
Found line to remove! %164 = icmp ugt i64 %162, -33
Found line to remove! %165 = zext i1 %164 to i8
Found line to remove! store i8 %165, i8* %14, align 1
Found line to remove! %166 = trunc i64 %163 to i32
Found line to remove! %167 = and i32 %166, 255
Found line to remove! %168 = tail call i32 @llvm.ctpop.i32(i32 %167)
Found line to remove! %169 = trunc i32 %168 to i8
Found line to remove! %170 = and i8 %169, 1
Found line to remove! %171 = xor i8 %170, 1
Found line to remove! store i8 %171, i8* %21, align 1
Found line to remove! %172 = xor i64 %163, %162
Found line to remove! %173 = lshr i64 %172, 4
Found line to remove! %174 = trunc i64 %173 to i8
Found line to remove! %175 = and i8 %174, 1
Found line to remove! store i8 %175, i8* %26, align 1
Found line to remove! %176 = icmp eq i64 %163, 0
Found line to remove! %177 = zext i1 %176 to i8
Found line to remove! store i8 %177, i8* %29, align 1
Found line to remove! %178 = lshr i64 %163, 63
Found line to remove! %179 = trunc i64 %178 to i8
Found line to remove! store i8 %179, i8* %32, align 1
Found line to remove! %180 = lshr i64 %162, 63
Found line to remove! %181 = xor i64 %178, %180
Found line to remove! %182 = add nuw nsw i64 %181, %178
Found line to remove! %183 = icmp eq i64 %182, 2
Found line to remove! %184 = zext i1 %183 to i8
Found line to remove! store i8 %184, i8* %38, align 1
Found line to remove! %185 = add i64 %154, 14
Found line to remove! store i64 %185, i64* %3, align 8
Found line to remove! %186 = add i64 %162, 40
Found line to remove! %187 = inttoptr i64 %163 to i64*
Found line to remove! %188 = load i64, i64* %187, align 8
Found line to remove! store i64 %188, i64* %RBP.i, align 8
Found line to remove! store i64 %186, i64* %6, align 8
Found line to remove! %189 = add i64 %154, 15
Found line to remove! store i64 %189, i64* %3, align 8
Found line to remove! %190 = inttoptr i64 %186 to i64*
Found line to remove! %191 = load i64, i64* %190, align 8
Found line to remove! store i64 %191, i64* %3, align 8
Found line to remove! %192 = add i64 %162, 48
Found line to remove! store i64 %192, i64* %6, align 8
Keep: ret %struct.Memory* %155
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', 'store i8 %37, i8* %38, align 1', '%RDI.i42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i42, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%RSI.i39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%43 = load i64, i64* %RBP.i, align 8', '%44 = add i64 %43, -16', '%45 = load i64, i64* %RSI.i39, align 8', '%47 = add i64 %46, 4', 'store i64 %47, i64* %3, align 8', '%48 = inttoptr i64 %44 to i64*', 'store i64 %45, i64* %48, align 8', '%49 = load i64, i64* %RBP.i, align 8', '%50 = add i64 %49, -8', '%52 = add i64 %51, 4', 'store i64 %52, i64* %3, align 8', '%53 = inttoptr i64 %50 to i64*', '%54 = load i64, i64* %53, align 8', 'store i64 %54, i64* %RSI.i39, align 8', '%RAX.i33 = getelementptr inbounds %union.anon, %union.anon* %55, i64 0, i32 0', '%56 = add i64 %51, 7', 'store i64 %56, i64* %3, align 8', '%57 = inttoptr i64 %54 to i8*', '%58 = load i8, i8* %57, align 1', '%59 = sext i8 %58 to i64', '%60 = and i64 %59, 4294967295', 'store i64 %60, i64* %RAX.i33, align 8', '%61 = add i64 %49, -16', '%62 = add i64 %51, 11', 'store i64 %62, i64* %3, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI.i39, align 8', '%RCX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%65 = add i64 %51, 14', 'store i64 %65, i64* %3, align 8', '%66 = inttoptr i64 %64 to i8*', '%67 = load i8, i8* %66, align 1', '%68 = sext i8 %67 to i64', '%69 = and i64 %68, 4294967295', 'store i64 %69, i64* %RCX.i, align 8', '%70 = sext i8 %67 to i32', '%71 = zext i32 %70 to i64', '%72 = sext i8 %58 to i32', '%73 = sub nsw i32 %72, %70', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX.i33, align 8', '%75 = icmp ult i8 %58, %67', '%76 = zext i1 %75 to i8', 'store i8 %76, i8* %14, align 1', '%77 = and i32 %73, 255', '%78 = tail call i32 @llvm.ctpop.i32(i32 %77)', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', '%81 = xor i8 %80, 1', 'store i8 %81, i8* %21, align 1', '%82 = xor i64 %71, %59', '%83 = trunc i64 %82 to i32', '%84 = xor i32 %83, %73', '%85 = lshr i32 %84, 4', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', 'store i8 %87, i8* %26, align 1', '%88 = icmp eq i32 %73, 0', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %29, align 1', '%90 = lshr i32 %73, 31', '%91 = trunc i32 %90 to i8', 'store i8 %91, i8* %32, align 1', '%92 = lshr i32 %72, 31', '%93 = lshr i32 %70, 31', '%94 = xor i32 %93, %92', '%95 = xor i32 %90, %92', '%96 = add nuw nsw i32 %95, %94', '%97 = icmp eq i32 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %38, align 1', '%99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DL.i25 = bitcast %union.anon* %99 to i8*', '%100 = trunc i32 %73 to i8', 'store i8 %100, i8* %DL.i25, align 1', '%101 = add i64 %49, -17', '%102 = add i64 %51, 21', 'store i64 %102, i64* %3, align 8', '%103 = inttoptr i64 %101 to i8*', 'store i8 %100, i8* %103, align 1', '%104 = load i64, i64* %RBP.i, align 8', '%105 = add i64 %104, -17', '%107 = add i64 %106, 4', 'store i64 %107, i64* %3, align 8', '%108 = inttoptr i64 %105 to i8*', '%109 = load i8, i8* %108, align 1', '%110 = sext i8 %109 to i64', '%111 = and i64 %110, 4294967295', 'store i64 %111, i64* %RDI.i42, align 8', '%112 = add i64 %106, -76373', '%113 = add i64 %106, 9', '%114 = load i64, i64* %6, align 8', '%115 = add i64 %114, -8', '%116 = inttoptr i64 %115 to i64*', 'store i64 %113, i64* %116, align 8', 'store i64 %115, i64* %6, align 8', 'store i64 %112, i64* %3, align 8', '%124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%125 = bitcast i64* %124 to double*', 'store double 0.000000e+00, double* %125, align 1', '%126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%129 = bitcast %union.VectorReg* %126 to double*', 'store double %128, double* %129, align 1', 'store i64 %130, i64* %3, align 8', '%.pre = load i64, i64* %3, align 8', '%150 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 1, %147 ], [ 1, %133 ]', '%151 = phi i8 [ 0, %143 ], [ 0, %145 ], [ 0, %147 ], [ 1, %133 ]', '%152 = phi i8 [ 0, %143 ], [ 1, %145 ], [ 0, %147 ], [ 1, %133 ]', 'store i8 %150, i8* %29, align 1', 'store i8 %151, i8* %21, align 1', 'store i8 %152, i8* %14, align 1', '%154 = phi i64 [ %.pre, %141 ], [ %130, %153 ]', '%156 = load i8, i8* %14, align 1', '%157 = load i8, i8* %29, align 1', '%158 = or i8 %157, %156', '%159 = icmp eq i8 %158, 0', '%160 = zext i1 %159 to i8', 'store i8 %160, i8* %DL.i25, align 1', '%161 = zext i1 %159 to i64', 'store i64 %161, i64* %RAX.i33, align 8', '%162 = load i64, i64* %6, align 8', '%163 = add i64 %162, 32', 'store i64 %163, i64* %6, align 8', '%164 = icmp ugt i64 %162, -33', '%165 = zext i1 %164 to i8', 'store i8 %165, i8* %14, align 1', '%166 = trunc i64 %163 to i32', '%167 = and i32 %166, 255', '%168 = tail call i32 @llvm.ctpop.i32(i32 %167)', '%169 = trunc i32 %168 to i8', '%170 = and i8 %169, 1', '%171 = xor i8 %170, 1', 'store i8 %171, i8* %21, align 1', '%172 = xor i64 %163, %162', '%173 = lshr i64 %172, 4', '%174 = trunc i64 %173 to i8', '%175 = and i8 %174, 1', 'store i8 %175, i8* %26, align 1', '%176 = icmp eq i64 %163, 0', '%177 = zext i1 %176 to i8', 'store i8 %177, i8* %29, align 1', '%178 = lshr i64 %163, 63', '%179 = trunc i64 %178 to i8', 'store i8 %179, i8* %32, align 1', '%180 = lshr i64 %162, 63', '%181 = xor i64 %178, %180', '%182 = add nuw nsw i64 %181, %178', '%183 = icmp eq i64 %182, 2', '%184 = zext i1 %183 to i8', 'store i8 %184, i8* %38, align 1', '%185 = add i64 %154, 14', 'store i64 %185, i64* %3, align 8', '%186 = add i64 %162, 40', '%187 = inttoptr i64 %163 to i64*', '%188 = load i64, i64* %187, align 8', 'store i64 %188, i64* %RBP.i, align 8', 'store i64 %186, i64* %6, align 8', '%189 = add i64 %154, 15', 'store i64 %189, i64* %3, align 8', '%190 = inttoptr i64 %186 to i64*', '%191 = load i64, i64* %190, align 8', 'store i64 %191, i64* %3, align 8', '%192 = add i64 %162, 48', 'store i64 %192, i64* %6, align 8'])
TO REMOVE: dict_keys(['%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DL = bitcast %union.anon* %4 to i8*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -16', '%41 = load i64, i64* %RDI, align 8', '%42 = add i64 %11, 11', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %RBP, align 8', '%45 = add i64 %44, -16', '%46 = load i64, i64* %RSI, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %PC, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP, align 8', '%51 = add i64 %50, -8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %51 to i64*', '%55 = load i64, i64* %54, align 8', 'store i64 %55, i64* %RSI, align 8', '%56 = add i64 %52, 7', 'store i64 %56, i64* %PC, align 8', '%57 = inttoptr i64 %55 to i8*', '%58 = load i8, i8* %57, align 1', '%59 = sext i8 %58 to i64', '%60 = and i64 %59, 4294967295', 'store i64 %60, i64* %RAX, align 8', '%61 = add i64 %50, -16', '%62 = add i64 %52, 11', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI, align 8', '%65 = add i64 %52, 14', 'store i64 %65, i64* %PC, align 8', '%66 = inttoptr i64 %64 to i8*', '%67 = load i8, i8* %66, align 1', '%68 = sext i8 %67 to i64', '%69 = and i64 %68, 4294967295', 'store i64 %69, i64* %RCX, align 8', '%70 = sext i8 %67 to i32', '%71 = zext i32 %70 to i64', '%72 = sext i8 %58 to i32', '%73 = sub nsw i32 %72, %70', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX, align 8', '%75 = icmp ult i8 %58, %67', '%76 = zext i1 %75 to i8', 'store i8 %76, i8* %15, align 1', '%77 = and i32 %73, 255', '%78 = tail call i32 @llvm.ctpop.i32(i32 %77) #12', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', '%81 = xor i8 %80, 1', 'store i8 %81, i8* %22, align 1', '%82 = xor i64 %71, %59', '%83 = trunc i64 %82 to i32', '%84 = xor i32 %83, %73', '%85 = lshr i32 %84, 4', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', 'store i8 %87, i8* %27, align 1', '%88 = icmp eq i32 %73, 0', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %30, align 1', '%90 = lshr i32 %73, 31', '%91 = trunc i32 %90 to i8', 'store i8 %91, i8* %33, align 1', '%92 = lshr i32 %72, 31', '%93 = lshr i32 %70, 31', '%94 = xor i32 %93, %92', '%95 = xor i32 %90, %92', '%96 = add nuw nsw i32 %95, %94', '%97 = icmp eq i32 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %39, align 1', '%99 = trunc i32 %73 to i8', 'store i8 %99, i8* %DL, align 1', '%100 = add i64 %50, -17', '%101 = add i64 %52, 21', 'store i64 %101, i64* %PC, align 8', '%102 = inttoptr i64 %100 to i8*', 'store i8 %99, i8* %102, align 1', '%103 = load i64, i64* %RBP, align 8', '%104 = add i64 %103, -17', '%106 = add i64 %105, 4', 'store i64 %106, i64* %PC, align 8', '%107 = inttoptr i64 %104 to i8*', '%108 = load i8, i8* %107, align 1', '%109 = sext i8 %108 to i64', '%110 = and i64 %109, 4294967295', 'store i64 %110, i64* %RDI, align 8', '%111 = add i64 %105, -76373', '%112 = add i64 %105, 9', '%113 = load i64, i64* %RSP, align 8', '%114 = add i64 %113, -8', '%115 = inttoptr i64 %114 to i64*', 'store i64 %112, i64* %115, align 8', 'store i64 %114, i64* %RSP, align 8', 'store i64 %111, i64* %PC, align 8', '%119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %118, i64* %119, align 1', '%120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%121 = bitcast i64* %120 to double*', 'store double 0.000000e+00, double* %121, align 1', '%124 = bitcast %union.VectorReg* %5 to double*', 'store double %123, double* %124, align 1', 'store i64 %125, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%145 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 1, %142 ], [ 1, %128 ]', '%146 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 0, %142 ], [ 1, %128 ]', '%147 = phi i8 [ 0, %138 ], [ 1, %140 ], [ 0, %142 ], [ 1, %128 ]', 'store i8 %145, i8* %30, align 1', 'store i8 %146, i8* %22, align 1', 'store i8 %147, i8* %15, align 1', '%149 = phi i64 [ %.pre, %136 ], [ %125, %148 ]', '%151 = load i8, i8* %15, align 1', '%152 = load i8, i8* %30, align 1', '%153 = or i8 %152, %151', '%154 = icmp eq i8 %153, 0', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %DL, align 1', '%156 = zext i1 %154 to i64', 'store i64 %156, i64* %RAX, align 8', '%157 = load i64, i64* %RSP, align 8', '%158 = add i64 %157, 32', 'store i64 %158, i64* %RSP, align 8', '%159 = icmp ugt i64 %157, -33', '%160 = zext i1 %159 to i8', 'store i8 %160, i8* %15, align 1', '%161 = trunc i64 %158 to i32', '%162 = and i32 %161, 255', '%163 = tail call i32 @llvm.ctpop.i32(i32 %162) #12', '%164 = trunc i32 %163 to i8', '%165 = and i8 %164, 1', '%166 = xor i8 %165, 1', 'store i8 %166, i8* %22, align 1', '%167 = xor i64 %158, %157', '%168 = lshr i64 %167, 4', '%169 = trunc i64 %168 to i8', '%170 = and i8 %169, 1', 'store i8 %170, i8* %27, align 1', '%171 = icmp eq i64 %158, 0', '%172 = zext i1 %171 to i8', 'store i8 %172, i8* %30, align 1', '%173 = lshr i64 %158, 63', '%174 = trunc i64 %173 to i8', 'store i8 %174, i8* %33, align 1', '%175 = lshr i64 %157, 63', '%176 = xor i64 %173, %175', '%177 = add nuw nsw i64 %176, %173', '%178 = icmp eq i64 %177, 2', '%179 = zext i1 %178 to i8', 'store i8 %179, i8* %39, align 1', '%180 = add i64 %149, 14', 'store i64 %180, i64* %PC, align 8', '%181 = add i64 %157, 40', '%182 = inttoptr i64 %158 to i64*', '%183 = load i64, i64* %182, align 8', 'store i64 %183, i64* %RBP, align 8', 'store i64 %181, i64* %RSP, align 8', '%184 = add i64 %149, 15', 'store i64 %184, i64* %PC, align 8', '%185 = inttoptr i64 %181 to i64*', '%186 = load i64, i64* %185, align 8', 'store i64 %186, i64* %PC, align 8', '%187 = add i64 %157, 48', 'store i64 %187, i64* %RSP, align 8'])
Keep: block_4130b0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
Found line to remove! %DL = bitcast %union.anon* %4 to i8*
Keep: %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %6 = load i64, i64* %RBP, align 8
Found line to remove! %7 = add i64 %1, 1
Found line to remove! store i64 %7, i64* %PC, align 8
Found line to remove! %8 = load i64, i64* %RSP, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %6, i64* %10, align 8
Keep: %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %8, -40
Found line to remove! store i64 %12, i64* %RSP, align 8
Found line to remove! %13 = icmp ult i64 %9, 32
Found line to remove! %14 = zext i1 %13 to i8
Found line to remove! %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %14, i8* %15, align 1
Found line to remove! %16 = trunc i64 %12 to i32
Found line to remove! %17 = and i32 %16, 255
Found line to remove! %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
Found line to remove! %19 = trunc i32 %18 to i8
Found line to remove! %20 = and i8 %19, 1
Found line to remove! %21 = xor i8 %20, 1
Found line to remove! %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %21, i8* %22, align 1
Found line to remove! %23 = xor i64 %9, %12
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Keep: %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %12, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %12, 63
Found line to remove! %32 = trunc i64 %31 to i8
Keep: %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %9, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Keep: %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = add i64 %8, -16
Found line to remove! %41 = load i64, i64* %RDI, align 8
Found line to remove! %42 = add i64 %11, 11
Found line to remove! store i64 %42, i64* %PC, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Found line to remove! %44 = load i64, i64* %RBP, align 8
Found line to remove! %45 = add i64 %44, -16
Found line to remove! %46 = load i64, i64* %RSI, align 8
Keep: %47 = load i64, i64* %PC, align 8
Found line to remove! %48 = add i64 %47, 4
Found line to remove! store i64 %48, i64* %PC, align 8
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Found line to remove! %50 = load i64, i64* %RBP, align 8
Found line to remove! %51 = add i64 %50, -8
Keep: %52 = load i64, i64* %PC, align 8
Found line to remove! %53 = add i64 %52, 4
Found line to remove! store i64 %53, i64* %PC, align 8
Found line to remove! %54 = inttoptr i64 %51 to i64*
Found line to remove! %55 = load i64, i64* %54, align 8
Found line to remove! store i64 %55, i64* %RSI, align 8
Found line to remove! %56 = add i64 %52, 7
Found line to remove! store i64 %56, i64* %PC, align 8
Found line to remove! %57 = inttoptr i64 %55 to i8*
Found line to remove! %58 = load i8, i8* %57, align 1
Found line to remove! %59 = sext i8 %58 to i64
Found line to remove! %60 = and i64 %59, 4294967295
Found line to remove! store i64 %60, i64* %RAX, align 8
Found line to remove! %61 = add i64 %50, -16
Found line to remove! %62 = add i64 %52, 11
Found line to remove! store i64 %62, i64* %PC, align 8
Found line to remove! %63 = inttoptr i64 %61 to i64*
Found line to remove! %64 = load i64, i64* %63, align 8
Found line to remove! store i64 %64, i64* %RSI, align 8
Found line to remove! %65 = add i64 %52, 14
Found line to remove! store i64 %65, i64* %PC, align 8
Found line to remove! %66 = inttoptr i64 %64 to i8*
Found line to remove! %67 = load i8, i8* %66, align 1
Found line to remove! %68 = sext i8 %67 to i64
Found line to remove! %69 = and i64 %68, 4294967295
Found line to remove! store i64 %69, i64* %RCX, align 8
Found line to remove! %70 = sext i8 %67 to i32
Found line to remove! %71 = zext i32 %70 to i64
Found line to remove! %72 = sext i8 %58 to i32
Found line to remove! %73 = sub nsw i32 %72, %70
Found line to remove! %74 = zext i32 %73 to i64
Found line to remove! store i64 %74, i64* %RAX, align 8
Found line to remove! %75 = icmp ult i8 %58, %67
Found line to remove! %76 = zext i1 %75 to i8
Found line to remove! store i8 %76, i8* %15, align 1
Found line to remove! %77 = and i32 %73, 255
Found line to remove! %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #12
Found line to remove! %79 = trunc i32 %78 to i8
Found line to remove! %80 = and i8 %79, 1
Found line to remove! %81 = xor i8 %80, 1
Found line to remove! store i8 %81, i8* %22, align 1
Found line to remove! %82 = xor i64 %71, %59
Found line to remove! %83 = trunc i64 %82 to i32
Found line to remove! %84 = xor i32 %83, %73
Found line to remove! %85 = lshr i32 %84, 4
Found line to remove! %86 = trunc i32 %85 to i8
Found line to remove! %87 = and i8 %86, 1
Found line to remove! store i8 %87, i8* %27, align 1
Found line to remove! %88 = icmp eq i32 %73, 0
Found line to remove! %89 = zext i1 %88 to i8
Found line to remove! store i8 %89, i8* %30, align 1
Found line to remove! %90 = lshr i32 %73, 31
Found line to remove! %91 = trunc i32 %90 to i8
Found line to remove! store i8 %91, i8* %33, align 1
Found line to remove! %92 = lshr i32 %72, 31
Found line to remove! %93 = lshr i32 %70, 31
Found line to remove! %94 = xor i32 %93, %92
Found line to remove! %95 = xor i32 %90, %92
Found line to remove! %96 = add nuw nsw i32 %95, %94
Found line to remove! %97 = icmp eq i32 %96, 2
Found line to remove! %98 = zext i1 %97 to i8
Found line to remove! store i8 %98, i8* %39, align 1
Found line to remove! %99 = trunc i32 %73 to i8
Found line to remove! store i8 %99, i8* %DL, align 1
Found line to remove! %100 = add i64 %50, -17
Found line to remove! %101 = add i64 %52, 21
Found line to remove! store i64 %101, i64* %PC, align 8
Found line to remove! %102 = inttoptr i64 %100 to i8*
Found line to remove! store i8 %99, i8* %102, align 1
Found line to remove! %103 = load i64, i64* %RBP, align 8
Found line to remove! %104 = add i64 %103, -17
Keep: %105 = load i64, i64* %PC, align 8
Found line to remove! %106 = add i64 %105, 4
Found line to remove! store i64 %106, i64* %PC, align 8
Found line to remove! %107 = inttoptr i64 %104 to i8*
Found line to remove! %108 = load i8, i8* %107, align 1
Found line to remove! %109 = sext i8 %108 to i64
Found line to remove! %110 = and i64 %109, 4294967295
Found line to remove! store i64 %110, i64* %RDI, align 8
Found line to remove! %111 = add i64 %105, -76373
Found line to remove! %112 = add i64 %105, 9
Found line to remove! %113 = load i64, i64* %RSP, align 8
Found line to remove! %114 = add i64 %113, -8
Found line to remove! %115 = inttoptr i64 %114 to i64*
Found line to remove! store i64 %112, i64* %115, align 8
Found line to remove! store i64 %114, i64* %RSP, align 8
Found line to remove! store i64 %111, i64* %PC, align 8
Keep: %116 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %117 = load i64, i64* %PC, align 8
Keep: %118 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to i64*), align 8
Found line to remove! %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! store i64 %118, i64* %119, align 1
Found line to remove! %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %121 = bitcast i64* %120 to double*
Found line to remove! store double 0.000000e+00, double* %121, align 1
Keep: %122 = load i32, i32* %EAX, align 4
Keep: %123 = sitofp i32 %122 to double
Found line to remove! %124 = bitcast %union.VectorReg* %5 to double*
Found line to remove! store double %123, double* %124, align 1
Keep: %125 = add i64 %117, 16
Found line to remove! store i64 %125, i64* %PC, align 8
Keep: %126 = bitcast i64 %118 to double
Keep: %127 = fcmp uno double %126, %123
Keep: br i1 %127, label %128, label %138
Keep: 
Keep: ; <label>:128:                                    ; preds = %block_4130b0
Keep: %129 = fadd double %123, %126
Keep: %130 = bitcast double %129 to i64
Keep: %131 = and i64 %130, 9221120237041090560
Keep: %132 = icmp eq i64 %131, 9218868437227405312
Keep: %133 = and i64 %130, 2251799813685247
Keep: %134 = icmp ne i64 %133, 0
Keep: %135 = and i1 %132, %134
Keep: br i1 %135, label %136, label %144
Keep: 
Keep: ; <label>:136:                                    ; preds = %128
Keep: %137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %125, %struct.Memory* %116) #13
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: ; <label>:138:                                    ; preds = %block_4130b0
Keep: %139 = fcmp ogt double %126, %123
Keep: br i1 %139, label %144, label %140
Keep: 
Keep: ; <label>:140:                                    ; preds = %138
Keep: %141 = fcmp olt double %126, %123
Keep: br i1 %141, label %144, label %142
Keep: 
Keep: ; <label>:142:                                    ; preds = %140
Keep: %143 = fcmp oeq double %126, %123
Keep: br i1 %143, label %144, label %148
Keep: 
Keep: ; <label>:144:                                    ; preds = %142, %140, %138, %128
Found line to remove! %145 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 1, %142 ], [ 1, %128 ]
Found line to remove! %146 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 0, %142 ], [ 1, %128 ]
Found line to remove! %147 = phi i8 [ 0, %138 ], [ 1, %140 ], [ 0, %142 ], [ 1, %128 ]
Found line to remove! store i8 %145, i8* %30, align 1
Found line to remove! store i8 %146, i8* %22, align 1
Found line to remove! store i8 %147, i8* %15, align 1
Keep: br label %148
Keep: 
Keep: ; <label>:148:                                    ; preds = %144, %142
Keep: store i8 0, i8* %39, align 1
Keep: store i8 0, i8* %33, align 1
Keep: store i8 0, i8* %27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %148, %136
Found line to remove! %149 = phi i64 [ %.pre, %136 ], [ %125, %148 ]
Keep: %150 = phi %struct.Memory* [ %137, %136 ], [ %116, %148 ]
Found line to remove! %151 = load i8, i8* %15, align 1
Found line to remove! %152 = load i8, i8* %30, align 1
Found line to remove! %153 = or i8 %152, %151
Found line to remove! %154 = icmp eq i8 %153, 0
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %DL, align 1
Found line to remove! %156 = zext i1 %154 to i64
Found line to remove! store i64 %156, i64* %RAX, align 8
Found line to remove! %157 = load i64, i64* %RSP, align 8
Found line to remove! %158 = add i64 %157, 32
Found line to remove! store i64 %158, i64* %RSP, align 8
Found line to remove! %159 = icmp ugt i64 %157, -33
Found line to remove! %160 = zext i1 %159 to i8
Found line to remove! store i8 %160, i8* %15, align 1
Found line to remove! %161 = trunc i64 %158 to i32
Found line to remove! %162 = and i32 %161, 255
Found line to remove! %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #12
Found line to remove! %164 = trunc i32 %163 to i8
Found line to remove! %165 = and i8 %164, 1
Found line to remove! %166 = xor i8 %165, 1
Found line to remove! store i8 %166, i8* %22, align 1
Found line to remove! %167 = xor i64 %158, %157
Found line to remove! %168 = lshr i64 %167, 4
Found line to remove! %169 = trunc i64 %168 to i8
Found line to remove! %170 = and i8 %169, 1
Found line to remove! store i8 %170, i8* %27, align 1
Found line to remove! %171 = icmp eq i64 %158, 0
Found line to remove! %172 = zext i1 %171 to i8
Found line to remove! store i8 %172, i8* %30, align 1
Found line to remove! %173 = lshr i64 %158, 63
Found line to remove! %174 = trunc i64 %173 to i8
Found line to remove! store i8 %174, i8* %33, align 1
Found line to remove! %175 = lshr i64 %157, 63
Found line to remove! %176 = xor i64 %173, %175
Found line to remove! %177 = add nuw nsw i64 %176, %173
Found line to remove! %178 = icmp eq i64 %177, 2
Found line to remove! %179 = zext i1 %178 to i8
Found line to remove! store i8 %179, i8* %39, align 1
Found line to remove! %180 = add i64 %149, 14
Found line to remove! store i64 %180, i64* %PC, align 8
Found line to remove! %181 = add i64 %157, 40
Found line to remove! %182 = inttoptr i64 %158 to i64*
Found line to remove! %183 = load i64, i64* %182, align 8
Found line to remove! store i64 %183, i64* %RBP, align 8
Found line to remove! store i64 %181, i64* %RSP, align 8
Found line to remove! %184 = add i64 %149, 15
Found line to remove! store i64 %184, i64* %PC, align 8
Found line to remove! %185 = inttoptr i64 %181 to i64*
Found line to remove! %186 = load i64, i64* %185, align 8
Found line to remove! store i64 %186, i64* %PC, align 8
Found line to remove! %187 = add i64 %157, 48
Found line to remove! store i64 %187, i64* %RSP, align 8
Keep: ret %struct.Memory* %150
Missed: dict_keys(['%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0', '%DL = bitcast %union.anon* %4 to i8*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%6 = load i64, i64* %RBP, align 8', '%7 = add i64 %1, 1', 'store i64 %7, i64* %PC, align 8', '%8 = load i64, i64* %RSP, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %6, i64* %10, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %8, -40', 'store i64 %12, i64* %RSP, align 8', '%13 = icmp ult i64 %9, 32', '%14 = zext i1 %13 to i8', '%15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %14, i8* %15, align 1', '%16 = trunc i64 %12 to i32', '%17 = and i32 %16, 255', '%18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12', '%19 = trunc i32 %18 to i8', '%20 = and i8 %19, 1', '%21 = xor i8 %20, 1', '%22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %21, i8* %22, align 1', '%23 = xor i64 %9, %12', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %12, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %12, 63', '%32 = trunc i64 %31 to i8', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %9, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', 'store i8 %38, i8* %39, align 1', '%40 = add i64 %8, -16', '%41 = load i64, i64* %RDI, align 8', '%42 = add i64 %11, 11', 'store i64 %42, i64* %PC, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%44 = load i64, i64* %RBP, align 8', '%45 = add i64 %44, -16', '%46 = load i64, i64* %RSI, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %PC, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP, align 8', '%51 = add i64 %50, -8', '%53 = add i64 %52, 4', 'store i64 %53, i64* %PC, align 8', '%54 = inttoptr i64 %51 to i64*', '%55 = load i64, i64* %54, align 8', 'store i64 %55, i64* %RSI, align 8', '%56 = add i64 %52, 7', 'store i64 %56, i64* %PC, align 8', '%57 = inttoptr i64 %55 to i8*', '%58 = load i8, i8* %57, align 1', '%59 = sext i8 %58 to i64', '%60 = and i64 %59, 4294967295', 'store i64 %60, i64* %RAX, align 8', '%61 = add i64 %50, -16', '%62 = add i64 %52, 11', 'store i64 %62, i64* %PC, align 8', '%63 = inttoptr i64 %61 to i64*', '%64 = load i64, i64* %63, align 8', 'store i64 %64, i64* %RSI, align 8', '%65 = add i64 %52, 14', 'store i64 %65, i64* %PC, align 8', '%66 = inttoptr i64 %64 to i8*', '%67 = load i8, i8* %66, align 1', '%68 = sext i8 %67 to i64', '%69 = and i64 %68, 4294967295', 'store i64 %69, i64* %RCX, align 8', '%70 = sext i8 %67 to i32', '%71 = zext i32 %70 to i64', '%72 = sext i8 %58 to i32', '%73 = sub nsw i32 %72, %70', '%74 = zext i32 %73 to i64', 'store i64 %74, i64* %RAX, align 8', '%75 = icmp ult i8 %58, %67', '%76 = zext i1 %75 to i8', 'store i8 %76, i8* %15, align 1', '%77 = and i32 %73, 255', '%78 = tail call i32 @llvm.ctpop.i32(i32 %77) #12', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', '%81 = xor i8 %80, 1', 'store i8 %81, i8* %22, align 1', '%82 = xor i64 %71, %59', '%83 = trunc i64 %82 to i32', '%84 = xor i32 %83, %73', '%85 = lshr i32 %84, 4', '%86 = trunc i32 %85 to i8', '%87 = and i8 %86, 1', 'store i8 %87, i8* %27, align 1', '%88 = icmp eq i32 %73, 0', '%89 = zext i1 %88 to i8', 'store i8 %89, i8* %30, align 1', '%90 = lshr i32 %73, 31', '%91 = trunc i32 %90 to i8', 'store i8 %91, i8* %33, align 1', '%92 = lshr i32 %72, 31', '%93 = lshr i32 %70, 31', '%94 = xor i32 %93, %92', '%95 = xor i32 %90, %92', '%96 = add nuw nsw i32 %95, %94', '%97 = icmp eq i32 %96, 2', '%98 = zext i1 %97 to i8', 'store i8 %98, i8* %39, align 1', '%99 = trunc i32 %73 to i8', 'store i8 %99, i8* %DL, align 1', '%100 = add i64 %50, -17', '%101 = add i64 %52, 21', 'store i64 %101, i64* %PC, align 8', '%102 = inttoptr i64 %100 to i8*', 'store i8 %99, i8* %102, align 1', '%103 = load i64, i64* %RBP, align 8', '%104 = add i64 %103, -17', '%106 = add i64 %105, 4', 'store i64 %106, i64* %PC, align 8', '%107 = inttoptr i64 %104 to i8*', '%108 = load i8, i8* %107, align 1', '%109 = sext i8 %108 to i64', '%110 = and i64 %109, 4294967295', 'store i64 %110, i64* %RDI, align 8', '%111 = add i64 %105, -76373', '%112 = add i64 %105, 9', '%113 = load i64, i64* %RSP, align 8', '%114 = add i64 %113, -8', '%115 = inttoptr i64 %114 to i64*', 'store i64 %112, i64* %115, align 8', 'store i64 %114, i64* %RSP, align 8', 'store i64 %111, i64* %PC, align 8', '%119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', 'store i64 %118, i64* %119, align 1', '%120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%121 = bitcast i64* %120 to double*', 'store double 0.000000e+00, double* %121, align 1', '%124 = bitcast %union.VectorReg* %5 to double*', 'store double %123, double* %124, align 1', 'store i64 %125, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', '%145 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 1, %142 ], [ 1, %128 ]', '%146 = phi i8 [ 0, %138 ], [ 0, %140 ], [ 0, %142 ], [ 1, %128 ]', '%147 = phi i8 [ 0, %138 ], [ 1, %140 ], [ 0, %142 ], [ 1, %128 ]', 'store i8 %145, i8* %30, align 1', 'store i8 %146, i8* %22, align 1', 'store i8 %147, i8* %15, align 1', '%149 = phi i64 [ %.pre, %136 ], [ %125, %148 ]', '%151 = load i8, i8* %15, align 1', '%152 = load i8, i8* %30, align 1', '%153 = or i8 %152, %151', '%154 = icmp eq i8 %153, 0', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %DL, align 1', '%156 = zext i1 %154 to i64', 'store i64 %156, i64* %RAX, align 8', '%157 = load i64, i64* %RSP, align 8', '%158 = add i64 %157, 32', 'store i64 %158, i64* %RSP, align 8', '%159 = icmp ugt i64 %157, -33', '%160 = zext i1 %159 to i8', 'store i8 %160, i8* %15, align 1', '%161 = trunc i64 %158 to i32', '%162 = and i32 %161, 255', '%163 = tail call i32 @llvm.ctpop.i32(i32 %162) #12', '%164 = trunc i32 %163 to i8', '%165 = and i8 %164, 1', '%166 = xor i8 %165, 1', 'store i8 %166, i8* %22, align 1', '%167 = xor i64 %158, %157', '%168 = lshr i64 %167, 4', '%169 = trunc i64 %168 to i8', '%170 = and i8 %169, 1', 'store i8 %170, i8* %27, align 1', '%171 = icmp eq i64 %158, 0', '%172 = zext i1 %171 to i8', 'store i8 %172, i8* %30, align 1', '%173 = lshr i64 %158, 63', '%174 = trunc i64 %173 to i8', 'store i8 %174, i8* %33, align 1', '%175 = lshr i64 %157, 63', '%176 = xor i64 %173, %175', '%177 = add nuw nsw i64 %176, %173', '%178 = icmp eq i64 %177, 2', '%179 = zext i1 %178 to i8', 'store i8 %179, i8* %39, align 1', '%180 = add i64 %149, 14', 'store i64 %180, i64* %PC, align 8', '%181 = add i64 %157, 40', '%182 = inttoptr i64 %158 to i64*', '%183 = load i64, i64* %182, align 8', 'store i64 %183, i64* %RBP, align 8', 'store i64 %181, i64* %RSP, align 8', '%184 = add i64 %149, 15', 'store i64 %184, i64* %PC, align 8', '%185 = inttoptr i64 %181 to i64*', '%186 = load i64, i64* %185, align 8', 'store i64 %186, i64* %PC, align 8', '%187 = add i64 %157, 48', 'store i64 %187, i64* %RSP, align 8'])Writing '/tmp/tmp4ebvrubi.dot'...
Writing '/tmp/tmp4ebvrubi.dot':Done

Reading LLVM: /tmp/tmpabnwqt5m-query.ll
Extracting function [_Z15tolerance_equalIaEbRT_S1_] from /tmp/tmpabnwqt5m-query.ll
Dot file generated!
Writing '/tmp/tmpan26p_5e.dot'...
Writing '/tmp/tmpan26p_5e.dot':Done

Reading LLVM: /tmp/tmp7jxevywl-target.ll
Extracting function [_Z15tolerance_equalIaEbRT_S1_] from /tmp/tmp7jxevywl-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 2 %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 3 %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 4 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 5 %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 6 %var_2_118 = load i64, i64* %var_2_3, align 8
- 7 %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0xdb2__rip__type* @G_0xdb2__rip_ to i64)
- 8 %var_2_120 = add i64 %var_2_118, 8
- 9 store i64 %var_2_120, i64* %var_2_3, align 8
- 10 %var_2_121 = inttoptr i64 %var_2_119 to i64*
- 11 %var_2_122 = load i64, i64* %var_2_121, align 8
- 12 %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 13 store i64 %var_2_122, i64* %var_2_123, align 1
- 14 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 15 %var_2_127 = load i32, i32* %EAX.i, align 4
- 16 %var_2_128 = sitofp i32 %var_2_127 to double
- 17 %var_2_130 = add i64 %var_2_118, 16
- 18 %var_2_131 = bitcast i64 %var_2_122 to double
- 19 %var_2_132 = fcmp uno double %var_2_131, %var_2_128
- 20 \<badref\> = br i1 %var_2_132, label %var_2_133, label %var_2_153
- 21 %var_2_134 = fadd double %var_2_131, %var_2_128
- 22 %var_2_135 = bitcast double %var_2_134 to i64
- 23 %var_2_136 = and i64 %var_2_135, 9221120237041090560
- 24 %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
- 25 %var_2_138 = and i64 %var_2_135, 2251799813685247
- 26 %var_2_139 = icmp ne i64 %var_2_138, 0
- 27 %var_2_140 = and i1 %var_2_137, %var_2_139
- 28 \<badref\> = br i1 %var_2_140, label %var_2_141, label %var_2_153
- 29 %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
- 30 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 31 store i8 0, i8* %var_2_38, align 1
- 32 store i8 0, i8* %var_2_32, align 1
- 33 store i8 0, i8* %var_2_26, align 1
- 34 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 35 %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_153 ]
- 36 \<badref\> = ret %struct.Memory* %var_2_155
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b9dc9f28>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: {1}, 5: {6, 22}, 6: {8, 9, 7}, 7: set(), 8: set(), 9: {24, 25, 26}, 10: set(), 11: {8, 9, 7}, 12: set(), 13: {24, 25, 26}, 14: {2, 15}, 15: {8, 9, 7}, 16: {10}, 17: {11}, 18: {2, 15}, 19: {12}, 20: {21, 13}, 21: {14}, 22: {2, 15}, 23: {16}, 24: {17}, 25: {18}, 26: {19}, 27: {20}, 28: {21, 13}, 29: {6, 22}, 30: {27, 23}, 31: {24, 25, 26}, 32: {24, 25, 26}, 33: {24, 25, 26}, 34: {27, 23}, 35: {28}, 36: {29}})
Equivalent! frozenset({27, 23}) {34, 30}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b9dc9f28>, {0: {0}, 1: {3}, 2: {4}, 3: {5}, 4: set(), 5: {6, 22}, 6: {7}, 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: {11}, 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: set(), 29: {22}, 30: {23}, 31: {24}, 32: {25}, 33: {26}, 34: {27}, 35: {28}, 36: {29}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
NO MATCH 4
MORE 5 POT: 2
EXACT 6 load load
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
EXACT 17 add add
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
NO MATCH 28
EXACT 29 tail tail
EXACT 30 br br
EXACT 31 store store
EXACT 32 store store
EXACT 33 store store
EXACT 34 br br
EXACT 35 phi phi
EXACT 36 ret ret
================ Starting round 3
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 4 %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 5 %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 6 %var_2_116 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 7 %var_2_117 = load i64, i64* %PC, align 8
- 8 %var_2_1182 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to double*), align 8
- 9 %var_2_122 = load i32, i32* %EAX, align 4
- 10 %var_2_123 = sitofp i32 %var_2_122 to double
- 11 %var_2_125 = add i64 %var_2_117, 16
- 12 %var_2_127 = fcmp uno double %var_2_1182, %var_2_123
- 13 \<badref\> = br i1 %var_2_127, label %var_2_128, label %var_2_148
- 14 %var_2_129 = fadd double %var_2_1182, %var_2_123
- 15 %var_2_130 = bitcast double %var_2_129 to i64
- 16 %var_2_131 = and i64 %var_2_130, 9221120237041090560
- 17 %var_2_132 = icmp eq i64 %var_2_131, 9218868437227405312
- 18 %var_2_133 = and i64 %var_2_130, 2251799813685247
- 19 %var_2_134 = icmp ne i64 %var_2_133, 0
- 20 %var_2_135 = and i1 %var_2_132, %var_2_134
- 21 \<badref\> = br i1 %var_2_135, label %var_2_136, label %var_2_148
- 22 %var_2_137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_125, %struct.Memory* %var_2_116) #13
- 23 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 24 store i8 0, i8* %var_2_39, align 1
- 25 store i8 0, i8* %var_2_33, align 1
- 26 store i8 0, i8* %var_2_27, align 1
- 27 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 28 %var_2_150 = phi %struct.Memory* [ %var_2_137, %var_2_136 ], [ %var_2_116, %var_2_148 ]
- 29 \<badref\> = ret %struct.Memory* %var_2_150
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1ba0fbae8>, {0: {0}, 1: {4}, 2: {18, 14, 22}, 3: {1}, 4: {2}, 5: {3}, 6: {29, 5}, 7: {11, 6, 15}, 8: {11, 6, 15}, 9: {11, 6, 15}, 10: {16}, 11: {17}, 12: {19}, 13: {20, 28}, 14: {21}, 15: {18, 14, 22}, 16: {23}, 17: {24}, 18: {25}, 19: {26}, 20: {27}, 21: {20, 28}, 22: {29, 5}, 23: {34, 30}, 24: {32, 33, 9, 13, 31}, 25: {32, 33, 9, 13, 31}, 26: {32, 33, 9, 13, 31}, 27: {34, 30}, 28: {35}, 29: {36}})
Equivalent! frozenset({34, 30}) {27, 23}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1ba0fbae8>, {0: {0}, 1: set(), 2: set(), 3: {1}, 4: {2}, 5: {3}, 6: {29, 5}, 7: {6}, 8: set(), 9: set(), 10: set(), 11: {17}, 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: {29}, 23: {30}, 24: {31}, 25: {32}, 26: {33}, 27: {34}, 28: {35}, 29: {36}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
NO MATCH 2
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
MORE 6 POT: 2
EXACT 7 load load
NO MATCH 8
NO MATCH 9
NO MATCH 10
EXACT 11 add add
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
EXACT 22 tail tail
EXACT 23 br br
EXACT 24 store store
EXACT 25 store store
EXACT 26 store store
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['store i8 0, i8* %var_2_32, align 1', 'store i8 0, i8* %var_2_26, align 1', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_38, align 1'])Writing '/tmp/tmprxn0cog4.dot'...
Writing '/tmp/tmprxn0cog4.dot':Done

Reading LLVM: /tmp/tmpabnwqt5m-query.ll
Extracting function [_Z15tolerance_equalIaEbRT_S1_] from /tmp/tmpabnwqt5m-query.ll
Dot file generated!
Writing '/tmp/tmpl0c7mkn1.dot'...
Writing '/tmp/tmpl0c7mkn1.dot':Done

Reading LLVM: /tmp/tmp7jxevywl-target.ll
Extracting function [_Z15tolerance_equalIaEbRT_S1_] from /tmp/tmp7jxevywl-target.ll
Dot file generated!

Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_118 = load i64, i64* %var_2_3, align 8
Keep: %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0xdb2__rip__type* @G_0xdb2__rip_ to i64)
Keep: %var_2_120 = add i64 %var_2_118, 8
Keep: store i64 %var_2_120, i64* %var_2_3, align 8
Keep: %var_2_121 = inttoptr i64 %var_2_119 to i64*
Keep: %var_2_122 = load i64, i64* %var_2_121, align 8
Keep: %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_122, i64* %var_2_123, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_127 = load i32, i32* %EAX.i, align 4
Keep: %var_2_128 = sitofp i32 %var_2_127 to double
Keep: %var_2_130 = add i64 %var_2_118, 16
Keep: %var_2_131 = bitcast i64 %var_2_122 to double
Keep: %var_2_132 = fcmp uno double %var_2_131, %var_2_128
Keep: br i1 %var_2_132, label %var_2_133, label %var_2_153
Keep: 
Keep: var_2_133:                                        ; preds = %entry
Keep: %var_2_134 = fadd double %var_2_131, %var_2_128
Keep: %var_2_135 = bitcast double %var_2_134 to i64
Keep: %var_2_136 = and i64 %var_2_135, 9221120237041090560
Keep: %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
Keep: %var_2_138 = and i64 %var_2_135, 2251799813685247
Keep: %var_2_139 = icmp ne i64 %var_2_138, 0
Keep: %var_2_140 = and i1 %var_2_137, %var_2_139
Keep: br i1 %var_2_140, label %var_2_141, label %var_2_153
Keep: 
Keep: var_2_141:                                        ; preds = %var_2_133
Keep: %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_153:                                        ; preds = %entry, %var_2_133
Found line to remove! store i8 0, i8* %var_2_38, align 1
Found line to remove! store i8 0, i8* %var_2_32, align 1
Found line to remove! store i8 0, i8* %var_2_26, align 1
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %var_2_153, %var_2_141
Keep: %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_153 ]
Keep: ret %struct.Memory* %var_2_155
Missed: dict_keys(['store i8 0, i8* %var_2_32, align 1', 'store i8 0, i8* %var_2_26, align 1', '%var_2_32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_38, align 1'])
TO REMOVE: dict_keys(['%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1'])
Keep: block_4130b0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Found line to remove! %var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! %var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! %var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Keep: %var_2_116 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_117 = load i64, i64* %PC, align 8
Keep: %var_2_1182 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_122 = load i32, i32* %EAX, align 4
Keep: %var_2_123 = sitofp i32 %var_2_122 to double
Keep: %var_2_125 = add i64 %var_2_117, 16
Keep: %var_2_127 = fcmp uno double %var_2_1182, %var_2_123
Keep: br i1 %var_2_127, label %var_2_128, label %var_2_148
Keep: 
Keep: var_2_128:                                        ; preds = %block_4130b0
Keep: %var_2_129 = fadd double %var_2_1182, %var_2_123
Keep: %var_2_130 = bitcast double %var_2_129 to i64
Keep: %var_2_131 = and i64 %var_2_130, 9221120237041090560
Keep: %var_2_132 = icmp eq i64 %var_2_131, 9218868437227405312
Keep: %var_2_133 = and i64 %var_2_130, 2251799813685247
Keep: %var_2_134 = icmp ne i64 %var_2_133, 0
Keep: %var_2_135 = and i1 %var_2_132, %var_2_134
Keep: br i1 %var_2_135, label %var_2_136, label %var_2_148
Keep: 
Keep: var_2_136:                                        ; preds = %var_2_128
Keep: %var_2_137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_125, %struct.Memory* %var_2_116) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_148:                                        ; preds = %block_4130b0, %var_2_128
Found line to remove! store i8 0, i8* %var_2_39, align 1
Found line to remove! store i8 0, i8* %var_2_33, align 1
Found line to remove! store i8 0, i8* %var_2_27, align 1
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %var_2_148, %var_2_136
Keep: %var_2_150 = phi %struct.Memory* [ %var_2_137, %var_2_136 ], [ %var_2_116, %var_2_148 ]
Keep: ret %struct.Memory* %var_2_150
Missed: dict_keys(['%var_2_27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', '%var_2_33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', '%var_2_39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 0, i8* %var_2_39, align 1', 'store i8 0, i8* %var_2_33, align 1', 'store i8 0, i8* %var_2_27, align 1'])
================ Starting round 4
MAPPING:
- 0 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
- 3 %var_2_118 = load i64, i64* %var_2_3, align 8
- 4 %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0xdb2__rip__type* @G_0xdb2__rip_ to i64)
- 5 %var_2_120 = add i64 %var_2_118, 8
- 6 store i64 %var_2_120, i64* %var_2_3, align 8
- 7 %var_2_121 = inttoptr i64 %var_2_119 to i64*
- 8 %var_2_122 = load i64, i64* %var_2_121, align 8
- 9 %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 10 store i64 %var_2_122, i64* %var_2_123, align 1
- 11 %EAX.i = bitcast %union.anon* %var_2_55 to i32*
- 12 %var_2_127 = load i32, i32* %EAX.i, align 4
- 13 %var_2_128 = sitofp i32 %var_2_127 to double
- 14 %var_2_130 = add i64 %var_2_118, 16
- 15 %var_2_131 = bitcast i64 %var_2_122 to double
- 16 %var_2_132 = fcmp uno double %var_2_131, %var_2_128
- 17 \<badref\> = br i1 %var_2_132, label %var_2_133, label %routine_ucomisd__xmm1___xmm0.exit
- 18 %var_2_134 = fadd double %var_2_131, %var_2_128
- 19 %var_2_135 = bitcast double %var_2_134 to i64
- 20 %var_2_136 = and i64 %var_2_135, 9221120237041090560
- 21 %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
- 22 %var_2_138 = and i64 %var_2_135, 2251799813685247
- 23 %var_2_139 = icmp ne i64 %var_2_138, 0
- 24 %var_2_140 = and i1 %var_2_137, %var_2_139
- 25 \<badref\> = br i1 %var_2_140, label %var_2_141, label %routine_ucomisd__xmm1___xmm0.exit
- 26 %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
- 27 \<badref\> = br label %routine_ucomisd__xmm1___xmm0.exit
- 28 %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_133 ], [ %var_2_117, %entry ]
- 29 \<badref\> = ret %struct.Memory* %var_2_155
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b8528ae8>, {0: {0}, 1: {1}, 2: {19, 3}, 3: {4, 5, 6}, 4: set(), 5: set(), 6: set(), 7: set(), 8: {4, 5, 6}, 9: set(), 10: set(), 11: {2, 12}, 12: {4, 5, 6}, 13: {7}, 14: {8}, 15: {2, 12}, 16: {9}, 17: {10, 18}, 18: {11}, 19: {2, 12}, 20: {13}, 21: {14}, 22: {15}, 23: {16}, 24: {17}, 25: {10, 18}, 26: {19, 3}, 27: {20}, 28: {21}, 29: {22}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1b8528ae8>, {0: {0}, 1: set(), 2: {19, 3}, 3: {4}, 4: set(), 5: set(), 6: set(), 7: set(), 8: set(), 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: {8}, 15: set(), 16: set(), 17: set(), 18: set(), 19: set(), 20: set(), 21: set(), 22: set(), 23: set(), 24: set(), 25: set(), 26: {19}, 27: {20}, 28: {21}, 29: {22}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
MORE 2 POT: 2
EXACT 3 load load
NO MATCH 4
NO MATCH 5
NO MATCH 6
NO MATCH 7
NO MATCH 8
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
EXACT 14 add add
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
NO MATCH 19
NO MATCH 20
NO MATCH 21
NO MATCH 22
NO MATCH 23
NO MATCH 24
NO MATCH 25
EXACT 26 tail tail
EXACT 27 br br
EXACT 28 phi phi
EXACT 29 ret ret
================ Starting round 5
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %EAX = bitcast %union.anon* %var_2_3 to i32*
- 3 %var_2_116 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
- 4 %var_2_117 = load i64, i64* %PC, align 8
- 5 %var_2_1182 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to double*), align 8
- 6 %var_2_122 = load i32, i32* %EAX, align 4
- 7 %var_2_123 = sitofp i32 %var_2_122 to double
- 8 %var_2_125 = add i64 %var_2_117, 16
- 9 %var_2_127 = fcmp uno double %var_2_1182, %var_2_123
- 10 \<badref\> = br i1 %var_2_127, label %var_2_128, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 11 %var_2_129 = fadd double %var_2_1182, %var_2_123
- 12 %var_2_130 = bitcast double %var_2_129 to i64
- 13 %var_2_131 = and i64 %var_2_130, 9221120237041090560
- 14 %var_2_132 = icmp eq i64 %var_2_131, 9218868437227405312
- 15 %var_2_133 = and i64 %var_2_130, 2251799813685247
- 16 %var_2_134 = icmp ne i64 %var_2_133, 0
- 17 %var_2_135 = and i1 %var_2_132, %var_2_134
- 18 \<badref\> = br i1 %var_2_135, label %var_2_136, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 19 %var_2_137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_125, %struct.Memory* %var_2_116) #13
- 20 \<badref\> = br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
- 21 %var_2_150 = phi %struct.Memory* [ %var_2_137, %var_2_136 ], [ %var_2_116, %var_2_128 ], [ %var_2_116, %block_4130b0 ]
- 22 \<badref\> = ret %struct.Memory* %var_2_150
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1ba0fbbf8>, {0: {0}, 1: {1}, 2: {19, 11, 15}, 3: {2, 26}, 4: {8, 3, 12}, 5: {8, 3, 12}, 6: {8, 3, 12}, 7: {13}, 8: {14}, 9: {16}, 10: {17, 25}, 11: {18}, 12: {19, 11, 15}, 13: {20}, 14: {21}, 15: {22}, 16: {23}, 17: {24}, 18: {17, 25}, 19: {2, 26}, 20: {27}, 21: {28}, 22: {29}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7fb1ba0fbbf8>, {0: {0}, 1: set(), 2: set(), 3: {2, 26}, 4: {3}, 5: set(), 6: set(), 7: set(), 8: {14}, 9: set(), 10: set(), 11: set(), 12: set(), 13: set(), 14: set(), 15: set(), 16: set(), 17: set(), 18: set(), 19: {26}, 20: {27}, 21: {28}, 22: {29}})
EXACT 0 getelementptr getelementptr
NO MATCH 1
NO MATCH 2
MORE 3 POT: 2
EXACT 4 load load
NO MATCH 5
NO MATCH 6
NO MATCH 7
EXACT 8 add add
NO MATCH 9
NO MATCH 10
NO MATCH 11
NO MATCH 12
NO MATCH 13
NO MATCH 14
NO MATCH 15
NO MATCH 16
NO MATCH 17
NO MATCH 18
EXACT 19 tail tail
EXACT 20 br br
EXACT 21 phi phi
EXACT 22 ret ret
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %var_2_117 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @abs to i64), %struct.Memory* %2)
Keep: %var_2_118 = load i64, i64* %var_2_3, align 8
Keep: %var_2_119 = add i64 %var_2_118, ptrtoint (%G_0xdb2__rip__type* @G_0xdb2__rip_ to i64)
Keep: %var_2_120 = add i64 %var_2_118, 8
Keep: store i64 %var_2_120, i64* %var_2_3, align 8
Keep: %var_2_121 = inttoptr i64 %var_2_119 to i64*
Keep: %var_2_122 = load i64, i64* %var_2_121, align 8
Keep: %var_2_123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Keep: store i64 %var_2_122, i64* %var_2_123, align 1
Keep: %EAX.i = bitcast %union.anon* %var_2_55 to i32*
Keep: %var_2_127 = load i32, i32* %EAX.i, align 4
Keep: %var_2_128 = sitofp i32 %var_2_127 to double
Keep: %var_2_130 = add i64 %var_2_118, 16
Keep: %var_2_131 = bitcast i64 %var_2_122 to double
Keep: %var_2_132 = fcmp uno double %var_2_131, %var_2_128
Keep: br i1 %var_2_132, label %var_2_133, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_133:                                        ; preds = %entry
Keep: %var_2_134 = fadd double %var_2_131, %var_2_128
Keep: %var_2_135 = bitcast double %var_2_134 to i64
Keep: %var_2_136 = and i64 %var_2_135, 9221120237041090560
Keep: %var_2_137 = icmp eq i64 %var_2_136, 9218868437227405312
Keep: %var_2_138 = and i64 %var_2_135, 2251799813685247
Keep: %var_2_139 = icmp ne i64 %var_2_138, 0
Keep: %var_2_140 = and i1 %var_2_137, %var_2_139
Keep: br i1 %var_2_140, label %var_2_141, label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: var_2_141:                                        ; preds = %var_2_133
Keep: %var_2_142 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_130, %struct.Memory* %var_2_117)
Keep: br label %routine_ucomisd__xmm1___xmm0.exit
Keep: 
Keep: routine_ucomisd__xmm1___xmm0.exit:                ; preds = %entry, %var_2_133, %var_2_141
Keep: %var_2_155 = phi %struct.Memory* [ %var_2_142, %var_2_141 ], [ %var_2_117, %var_2_133 ], [ %var_2_117, %entry ]
Keep: ret %struct.Memory* %var_2_155
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_4130b0:
Keep: %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %var_2_3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Keep: %EAX = bitcast %union.anon* %var_2_3 to i32*
Keep: %var_2_116 = tail call fastcc %struct.Memory* @ext_66c1a0_abs(%struct.State* nonnull %0, %struct.Memory* %2)
Keep: %var_2_117 = load i64, i64* %PC, align 8
Keep: %var_2_1182 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_413e60__rodata_type* @seg_413e60__rodata to i64), i64 56) to double*), align 8
Keep: %var_2_122 = load i32, i32* %EAX, align 4
Keep: %var_2_123 = sitofp i32 %var_2_122 to double
Keep: %var_2_125 = add i64 %var_2_117, 16
Keep: %var_2_127 = fcmp uno double %var_2_1182, %var_2_123
Keep: br i1 %var_2_127, label %var_2_128, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_128:                                        ; preds = %block_4130b0
Keep: %var_2_129 = fadd double %var_2_1182, %var_2_123
Keep: %var_2_130 = bitcast double %var_2_129 to i64
Keep: %var_2_131 = and i64 %var_2_130, 9221120237041090560
Keep: %var_2_132 = icmp eq i64 %var_2_131, 9218868437227405312
Keep: %var_2_133 = and i64 %var_2_130, 2251799813685247
Keep: %var_2_134 = icmp ne i64 %var_2_133, 0
Keep: %var_2_135 = and i1 %var_2_132, %var_2_134
Keep: br i1 %var_2_135, label %var_2_136, label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: var_2_136:                                        ; preds = %var_2_128
Keep: %var_2_137 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %var_2_125, %struct.Memory* %var_2_116) #13
Keep: br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
Keep: 
Keep: _ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %block_4130b0, %var_2_128, %var_2_136
Keep: %var_2_150 = phi %struct.Memory* [ %var_2_137, %var_2_136 ], [ %var_2_116, %var_2_128 ], [ %var_2_116, %block_4130b0 ]
Keep: ret %struct.Memory* %var_2_150
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/_Z15tolerance_equalIaEbRT_S1_/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/binary/test.mcsema.calls_renamed.ll _Z15tolerance_equalIaEbRT_S1_
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/_Z15tolerance_equalIaEbRT_S1_/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/simple_types_loop_invariant/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
