; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400550__init_type = type <{ [23 x i8] }>
%seg_400570__plt_type = type <{ [112 x i8] }>
%seg_4005e0__text_type = type <{ [60 x i8], i32, [2460 x i8], i32, [9212 x i8], i32, [114 x i8] }>
%seg_403434__fini_type = type <{ [9 x i8] }>
%seg_403440__rodata_type = type <{ [112 x i8], [7 x i8], [51 x i8], [8 x i8], [84 x i8] }>
%seg_403548__eh_frame_hdr_type = type <{ [164 x i8] }>
%seg_4035f0__eh_frame_type = type <{ [648 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64 }>
%seg_604048__data_type = type <{ [16 x i8] }>
%seg_604060__bss_type = type <{ [8 x i8], [8 x i8] }>
%polybench_papi_counters_threadid_type = type <{ [8 x i8] }>
%polybench_program_total_flops_type = type <{ [8 x i8] }>
%polybench_c_end_type = type <{ [8 x i8] }>
%polybench_t_end_type = type <{ [8 x i8] }>
%polybench_t_start_type = type <{ [8 x i8] }>
%polybench_c_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 32
@seg_400550__init = internal constant %seg_400550__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\9D: \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400570__plt = internal constant %seg_400570__plt_type <{ [112 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\92: \00\00\00\00\00\00\00\00\00\00\00\FF%\8A: \00\00\00\00\00\00\00\00\00\00\00\FF%\82: \00\00\00\00\00\00\00\00\00\00\00\FF%z: \00\00\00\00\00\00\00\00\00\00\00\FF%r: \00\00\00\00\00\00\00\00\00\00\00\FF%j: \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_4005e0__text = internal constant %seg_4005e0__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C004@\00H\C7\C1\C03@\00H\C7\C7\B0\08@\00\FF\15\E69 \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 trunc (i64 add (i64 ptrtoint (%seg_4005e0__text_type* @seg_4005e0__text to i64), i64 6447) to i32), [2460 x i8] c"U\B8X@`\00H=X@`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFX@`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BEX@`\00UH\81\EEX@`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFX@`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\D19 \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\BF9 \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC \B8\08\00\00\00\89\C6\C7E\FC\00\01@\00Hc}\FC\E8\B1\FE\FF\FF\0FW\C0H\89E\F0\F2\0F\11E\E0\C7E\EC\00\00\00\00\8BE\EC;E\FC\0F\8D%\00\00\00H\8BE\F0HcM\EC\F2\0F\10\04\C8\F2\0FXE\E0\F2\0F\11E\E0\8BE\EC\83\C0\01\89E\EC\E9\CF\FF\FF\FFH\8BE\F0H\89\C7\E8A\FE\FF\FFH\83\C4 ]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5\E8w\FF\FF\FF]\C3\0F\1FD\00\00UH\89\E5\E8\E7\FF\FF\FF\E8\12\00\00\00\F2\0F\11\04%\90@`\00]\C3\0F\1F\80\00\00\00\00UH\89\E5\0FW\C0]\C3\0F\1F\80\00\00\00\00UH\89\E5\E8\E7\FF\FF\FF\F2\0F\11\04%\88@`\00]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\BF\B04@\00\00\00\00\00\F2\0F\10\04%\88@`\00\F2\0F\5C\04%\90@`\00\B0\01\E8\B5\FD\FF\FF\89E\FCH\83\C4\10]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8\89u\F4H\8B}\F8H\89}\E8Hc}\F4H\0F\AF}\E8H\89}\E8H\8B}\E8\E8\13\00\00\00H\89E\E0H\8BE\E0H\83\C4 ]\C3\0F\1FD\00\00UH\89\E5H\83\EC H\8DE\F0\B9 \00\00\00\89\CEH\89}\F8H\C7E\F0\00\00\00\00H\8BU\F8H\89\C7\E8u\FD\FF\FF\89E\ECH\83}\F0\00\0F\84\0A\00\00\00\83}\EC\00\0F\84&\00\00\00H\BE\B74@\00\00\00\00\00H\8B<%`@`\00\B0\00\E8$\FD\FF\FF\BF\01\00\00\00\89E\E8\E8'\FD\FF\FFH\8BE\F0H\83\C4 ]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\81\EC\88\01\00\00\B8\81\10\00\00\89\C1\B8\08\00\00\00\C7E\D4\00\00\00\00\89}\D0H\89u\C8\C7E\C4@\00\00\00\C7E\C0@\00\00\00\C7E\BC@\00\00\00H\89\CF\89\C6\E8\F3\FE\FF\FF\BE\81\10\00\00\89\F7\BE\08\00\00\00H\89E\A0\E8\DE\FE\FF\FF\BE\81\10\00\00\89\F7\BE\08\00\00\00H\89E\98\E8\C9\FE\FF\FF\BE\81\10\00\00\89\F7\BE\08\00\00\00H\89E\90\E8\B4\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89E\88\E8\9F\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89E\80\E8\8A\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85x\FF\FF\FF\E8r\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85p\FF\FF\FF\E8Z\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85h\FF\FF\FF\E8B\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85`\FF\FF\FF\E8*\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85X\FF\FF\FF\E8\12\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85P\FF\FF\FF\E8\FA\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85H\FF\FF\FF\E8\E2\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85@\FF\FF\FF\E8\CA\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\858\FF\FF\FF\E8\B2\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\850\FF\FF\FF\E8\9A\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85(\FF\FF\FF\E8\82\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85 \FF\FF\FF\E8j\FD\FF\FFH\8DM\B0L\8DE\A8H\89\85\18\FF\FF\FF\8B}\C4\8Bu\BC\8BU\C0L\8BM\A0H\8BE\98L\8B\95x\FF\FF\FFL\8B\9Dp\FF\FF\FFH\8B\9Dh\FF\FF\FFL\8B\B5@\FF\FF\FFL\8B\BD8\FF\FF\FFL\8B\A50\FF\FF\FFL\8B\AD(\FF\FF\FFH\89\85\10\FF\FF\FFH\8B\85 \FF\FF\FFH\89\85\08\FF\FF\FFH\8B\85\18\FF\FF\FFH\89\85\00\FF\FF\FFH\8B\85\10\FF\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\08\FF\FF\FFH\89D$@H\8B\85\00\FF\FF\FFH\89D$H\E8{\04\00\00\8B}\C4\8Bu\BC\8BU\C0\F2\0F\10E\B0\F2\0F\10M\A8H\8BM\A0L\8BE\98L\8BM\90H\8BE\88L\8BU\80L\8B\9Dx\FF\FF\FFH\8B\9Dp\FF\FF\FFL\8B\B5h\FF\FF\FFL\8B\BD@\FF\FF\FFL\8B\A58\FF\FF\FFL\8B\AD0\FF\FF\FFH\89\85\F8\FE\FF\FFH\8B\85(\FF\FF\FFH\89\85\F0\FE\FF\FFH\8B\85 \FF\FF\FFH\89\85\E8\FE\FF\FFH\8B\85\18\FF\FF\FFH\89\85\E0\FE\FF\FFH\8B\85\F8\FE\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\F0\FE\FF\FFH\89D$@H\8B\85\E8\FE\FF\FFH\89D$HH\8B\85\E0\FE\FF\FFH\89D$P\E8\92\08\00\00H\8DM\B0L\8DE\A8\8B}\C4\8Bu\BC\8BU\C0L\8BM\A0H\8BE\98L\8B\95X\FF\FF\FFL\8B\9DP\FF\FF\FFH\8B\9DH\FF\FF\FFL\8B\B5@\FF\FF\FFL\8B\BD8\FF\FF\FFL\8B\A50\FF\FF\FFL\8B\AD(\FF\FF\FFH\89\85\D8\FE\FF\FFH\8B\85 \FF\FF\FFH\89\85\D0\FE\FF\FFH\8B\85\18\FF\FF\FFH\89\85\C8\FE\FF\FFH\8B\85\D8\FE\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\D0\FE\FF\FFH\89D$@H\8B\85\C8\FE\FF\FFH\89D$H\E8\EA\02\00\00\8B}\C4\8Bu\BC\8BU\C0\F2\0F\10E\B0\F2\0F\10M\A8H\8BM\A0L\8BE\98L\8BM\90H\8BE\88L\8B\95`\FF\FF\FFL\8B\9DX\FF\FF\FFH\8B\9DP\FF\FF\FFL\8B\B5H\FF\FF\FFL\8B\BD@\FF\FF\FFL\8B\A58\FF\FF\FFL\8B\AD0\FF\FF\FFH\89\85\C0\FE\FF\FFH\8B\85(\FF\FF\FFH\89\85\B8\FE\FF\FFH\8B\85 \FF\FF\FFH\89\85\B0\FE\FF\FFH\8B\85\18\FF\FF\FFH\89\85\A8\FE\FF\FFH\8B\85\C0\FE\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\B8\FE\FF\FFH\89D$@H\8B\85\B0\FE\FF\FFH\89D$HH\8B\85\A8\FE\FF\FFH\89D$P\E8\AE\14\00\00\8B}\C4\8Bu\BC\8BU\C0H\8BM\80L\8B\85`\FF\FF\FF\E8E\22\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E9\C7\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8Dx\FF\FF\FFL\8B\85X\FF\FF\FF\E8\14\22\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E9\96\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8Dp\FF\FF\FFL\8B\85P\FF\FF\FF\E8\E3!\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E9e\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8Dh\FF\FF\FFL\8B\85H\FF\FF\FF\E8\B2!\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E94\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8D`\FF\FF\FFL\8B\85X\FF\FF\FFL\8B\8DP\FF\FF\FFH\8B\85H\FF\FF\FFH\89\04$\E8\0F#\00\00H\8BE\A0H\89\C7\E8\D3\F6\FF\FFH\8BE\98H\89\C7\E8\C7\F6\FF\FFH\8BE\90H\89\C7\E8\BB\F6\FF\FFH\8BE\88H\89\C7\E8\AF\F6\FF\FFH\8BE\80H\89\C7\E8\A3\F6\FF\FFH\8B\85x\FF\FF\FFH\89\C7\E8\94\F6\FF\FFH\8B\85p\FF\FF\FFH\89\C7\E8\85\F6\FF\FFH\8B\85h\FF\FF\FFH\89\C7\E8v\F6\FF\FFH\8B\85`\FF\FF\FFH\89\C7\E8g\F6\FF\FFH\8B\85X\FF\FF\FFH\89\C7\E8X\F6\FF\FFH\8B\85P\FF\FF\FFH\89\C7\E8I\F6\FF\FFH\8B\85H\FF\FF\FFH\89\C7\E8:\F6\FF\FFH\8B\85@\FF\FF\FFH\89\C7\E8+\F6\FF\FFH\8B\858\FF\FF\FFH\89\C7\E8\1C\F6\FF\FFH\8B\850\FF\FF\FFH\89\C7\E8\0D\F6\FF\FFH\8B\85(\FF\FF\FFH\89\C7\E8\FE\F5\FF\FFH\8B\85 \FF\FF\FFH\89\C7\E8\EF\F5\FF\FFH\8B\85\18\FF\FF\FFH\89\C7\E8\E0\F5\FF\FF\C7E\D4\00\00\00\00\8BE\D4H\81\C4\88\01\00\00[A\5CA]A^A_]\C3", i32 trunc (i64 add (i64 ptrtoint (%seg_4005e0__text_type* @seg_4005e0__text to i64), i64 6447) to i32), [9212 x i8] c"UH\89\E5AWAVAUATSH\83\EC\18H\8BEXL\8BUPL\8B]HH\8B]@L\8Bu8L\8B}0L\8Be(L\8Bm H\89\85H\FF\FF\FFH\8BE\18H\89\85@\FF\FF\FFH\8BE\10\F2\0F\10\059$\00\00\F2\0F\10\0D9$\00\00\89}\D4\89u\D0\89U\CCH\89M\C0L\89E\B8L\89M\B0H\89E\A8H\8B\85@\FF\FF\FFH\89E\A0L\89m\98L\89e\90L\89}\88L\89u\80H\89\9Dx\FF\FF\FFL\89\9Dp\FF\FF\FFL\89\95h\FF\FF\FFH\8B\8DH\FF\FF\FFH\89\8D`\FF\FF\FFL\8BE\C0\F2A\0F\11\08L\8BE\B8\F2A\0F\11\00\C7\85\5C\FF\FF\FF\00\00\00\00\8B\85\5C\FF\FF\FF;E\D4\0F\8Fn\00\00\00\F2\0F\10\05\CF#\00\00\F2\0F\10\0D\CF#\00\00\F2\0F*\95\5C\FF\FF\FF\F2\0FX\D1\F2\0F*M\D0\F2\0F^\D1H\8BE\88Hc\8D\5C\FF\FF\FF\F2\0F\11\14\C8\F2\0F*\8D\5C\FF\FF\FF\F2\0FX\C8\F2\0F*E\D0\F2\0F^\C8H\8BE\80Hc\8D\5C\FF\FF\FF\F2\0F\11\0C\C8\8B\85\5C\FF\FF\FF\83\C0\01\89\85\5C\FF\FF\FF\E9\83\FF\FF\FF\C7\85\5C\FF\FF\FF\00\00\00\00\8B\85\5C\FF\FF\FF;E\D0\0F\8Ft\00\00\00\F2\0F\10\05h#\00\00\F2\0F\10\0D8#\00\00\F2\0F*\95\5C\FF\FF\FF\F2\0FX\D1\F2\0F*M\D0\F2\0F^\D1H\8B\85x\FF\FF\FFHc\8D\5C\FF\FF\FF\F2\0F\11\14\C8\F2\0F*\8D\5C\FF\FF\FF\F2\0FX\C8\F2\0F*E\D0\F2\0F^\C8H\8B\85p\FF\FF\FFHc\8D\5C\FF\FF\FF\F2\0F\11\0C\C8\8B\85\5C\FF\FF\FF\83\C0\01\89\85\5C\FF\FF\FF\E9}\FF\FF\FF\C7\85\5C\FF\FF\FF\00\00\00\00\8B\85\5C\FF\FF\FF;E\CC\0F\8Ft\00\00\00\F2\0F\10\05\CB\22\00\00\F2\0F\10\0D\CB\22\00\00\F2\0F*\95\5C\FF\FF\FF\F2\0FX\D1\F2\0F*M\D0\F2\0F^\D1H\8B\85h\FF\FF\FFHc\8D\5C\FF\FF\FF\F2\0F\11\14\C8\F2\0F*\8D\5C\FF\FF\FF\F2\0FX\C8\F2\0F*E\D0\F2\0F^\C8H\8B\85`\FF\FF\FFHc\8D\5C\FF\FF\FF\F2\0F\11\0C\C8\8B\85\5C\FF\FF\FF\83\C0\01\89\85\5C\FF\FF\FF\E9}\FF\FF\FF\C7\85\5C\FF\FF\FF\00\00\00\00\8B\85\5C\FF\FF\FF;E\D4\0F\8FZ\02\00\00\C7\85X\FF\FF\FF\00\00\00\00\8B\85X\FF\FF\FF;E\CC\0F\8F(\02\00\00\F2\0F\10\05\FD!\00\00\F2\0F\10\0D\FD!\00\00\F2\0F*\95\5C\FF\FF\FF\8B\85X\FF\FF\FF\83\C0\01\F2\0F*\D8\F2\0FY\D3\F2\0FX\D1\F2\0F*M\CC\F2\0F^\D1H\8BM\A8Hc\95\5C\FF\FF\FFHi\D2\08\02\00\00H\01\D1Hc\95X\FF\FF\FF\F2\0F\11\14\D1\F2\0F*\8D\5C\FF\FF\FF\8B\85X\FF\FF\FF\83\C0\02\F2\0F*\D0\F2\0FY\CA\F2\0FX\C8\F2\0F*E\CC\F2\0F^\C8H\8BM\B0Hc\95\5C\FF\FF\FFHi\D2\08\02\00\00H\01\D1Hc\95X\FF\FF\FF\F2\0F\11\0C\D1\C7\85T\FF\FF\FF\00\00\00\00\8B\85T\FF\FF\FF;E\D0\0F\8FX\01\00\00\F2\0F\10\05V!\00\00\F2\0F\10\0DV!\00\00\F2\0F\10\15V!\00\00\F2\0F*\9D\5C\FF\FF\FF\8B\85X\FF\FF\FF\83\C0\03\F2\0F*\E0\F2\0FY\DC\F2\0F*\A5T\FF\FF\FF\F2\0FX\DC\F2\0FX\DA\F2\0F*U\D0\F2\0F^\DAH\8BM\A0Hc\95\5C\FF\FF\FFHi\D2\08\84\00\00H\01\D1Hc\95X\FF\FF\FFHi\D2\08\02\00\00H\01\D1Hc\95T\FF\FF\FF\F2\0F\11\1C\D1\F2\0F*\95\5C\FF\FF\FF\8B\85X\FF\FF\FF\83\C0\04\F2\0F*\D8\F2\0FY\D3\F2\0F*\9DT\FF\FF\FF\F2\0FX\D3\F2\0FX\D1\F2\0F*M\CC\F2\0F^\D1H\8BM\98Hc\95\5C\FF\FF\FFHi\D2\08\84\00\00H\01\D1Hc\95X\FF\FF\FFHi\D2\08\02\00\00H\01\D1Hc\95T\FF\FF\FF\F2\0F\11\14\D1\F2\0F*\8D\5C\FF\FF\FF\8B\85X\FF\FF\FF\83\C0\05\F2\0F*\D0\F2\0FY\CA\F2\0F*\95T\FF\FF\FF\F2\0FX\CA\F2\0FX\C8\F2\0F*E\D4\F2\0F^\C8H\8BM\90Hc\95\5C\FF\FF\FFHi\D2\08\84\00\00H\01\D1Hc\95X\FF\FF\FFHi\D2\08\02\00\00H\01\D1Hc\95T\FF\FF\FF\F2\0F\11\0C\D1\8B\85T\FF\FF\FF\83\C0\01\89\85T\FF\FF\FF\E9\99\FE\FF\FF\E9\00\00\00\00\8B\85X\FF\FF\FF\83\C0\01\89\85X\FF\FF\FF\E9\C9\FD\FF\FF\E9\00\00\00\00\8B\85\5C\FF\FF\FF\83\C0\01\89\85\5C\FF\FF\FF\E9\97\FD\FF\FFH\83\C4\18[A\5CA]A^A_]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\83\EC8H\8BE`L\8BUXL\8B]PH\8B]HL\8Bu@L\8B}8L\8Be0L\8Bm(H\89\850\FF\FF\FFH\8BE H\89\85(\FF\FF\FFH\8BE\18H\89\85 \FF\FF\FFH\8BE\10\89}\D4\89u\D0\89U\CC\F2\0F\11E\C0\F2\0F\11M\B8H\89M\B0L\89E\A8L\89M\A0H\89E\98H\8B\85 \FF\FF\FFH\89E\90H\8B\8D(\FF\FF\FFH\89M\88L\89m\80L\89\A5x\FF\FF\FFL\89\BDp\FF\FF\FFL\89\B5h\FF\FF\FFH\89\9D`\FF\FF\FFL\89\9DX\FF\FF\FFL\89\95P\FF\FF\FFL\8B\850\FF\FF\FFL\89\85H\FF\FF\FF\C7\85D\FF\FF\FF\00\00\00\00\8B\85D\FF\FF\FF;E\D4\0F\8D\BB\0C\00\00\C7\85@\FF\FF\FF\00\00\00\00\8B\85@\FF\FF\FF;E\CC\0F\8D\89\0C\00\00\C7\85<\FF\FF\FF\00\00\00\00\8B\85<\FF\FF\FF;E\D0\0F\8DQ\03\00\00H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8\8B\95@\FF\FF\FF\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8\8B\95<\FF\FF\FF\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8\8B\85<\FF\FF\FF\83\C0\01\89\85<\FF\FF\FF\E9\A0\FC\FF\FFH\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8\8B\95@\FF\FF\FF\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHcM\D0\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\C7\85<\FF\FF\FF\00\00\00\00\8B\85<\FF\FF\FF;E\D0\0F\8D#\03\00\00H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8BE\B0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8\8B\95<\FF\FF\FF\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHcM\CC\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8\8B\85<\FF\FF\FF\83\C0\01\89\85<\FF\FF\FF\E9\CE\FC\FF\FFH\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE\B0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\CC\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHcM\CC\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHcM\CC\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHcM\CC\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHcM\D0\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\8B\85@\FF\FF\FF\83\C0\01\89\85@\FF\FF\FF\E9h\F3\FF\FF\E9\00\00\00\00\8B\85D\FF\FF\FF\83\C0\01\89\85D\FF\FF\FF\E96\F3\FF\FFH\83\C48[A\5CA]A^A_]\C3f\0F\1FD\00\00UH\89\E5AWAVAUATSH\83\EC8H\8BE`L\8BUXL\8B]PH\8B]HL\8Bu@L\8B}8L\8Be0L\8Bm(H\89\850\FF\FF\FFH\8BE H\89\85(\FF\FF\FFH\8BE\18H\89\85 \FF\FF\FFH\8BE\10\89}\D4\89u\D0\89U\CC\F2\0F\11E\C0\F2\0F\11M\B8H\89M\B0L\89E\A8L\89M\A0H\89E\98H\8B\85 \FF\FF\FFH\89E\90H\8B\8D(\FF\FF\FFH\89M\88L\89m\80L\89\A5x\FF\FF\FFL\89\BDp\FF\FF\FFL\89\B5h\FF\FF\FFH\89\9D`\FF\FF\FFL\89\9DX\FF\FF\FFL\89\95P\FF\FF\FFL\8B\850\FF\FF\FFL\89\85H\FF\FF\FF\C7\85D\FF\FF\FF\00\00\00\00\8B\85D\FF\FF\FF;E\D4\0F\8D\BB\0C\00\00\C7\85@\FF\FF\FF\00\00\00\00\8B\85@\FF\FF\FF;E\CC\0F\8D\89\0C\00\00\C7\85<\FF\FF\FF\00\00\00\00\8B\85<\FF\FF\FF;E\D0\0F\8DQ\03\00\00H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8\8B\95@\FF\FF\FF\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8\8B\95<\FF\FF\FF\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8\8B\85<\FF\FF\FF\83\C0\01\89\85<\FF\FF\FF\E9\A0\FC\FF\FFH\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8\8B\95@\FF\FF\FF\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHcM\D0\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\C7\85<\FF\FF\FF\00\00\00\00\8B\85<\FF\FF\FF;E\D0\0F\8D#\03\00\00H\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8BE\B0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8\8B\95<\FF\FF\FF\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHcM\CC\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8Hc\8D@\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHc\8D@\FF\FF\FF\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHc\8D<\FF\FF\FF\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8Hc\8D<\FF\FF\FF\F2\0F\11\04\C8\8B\85<\FF\FF\FF\83\C0\01\89\85<\FF\FF\FF\E9\CE\FC\FF\FFH\8BE\88Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE\B0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8HcM\CC\F2\0FX\04\C8H\8BE\80Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85P\FF\FF\FFHcM\CC\F2\0F\10\04\C8H\8B\85H\FF\FF\FFHcM\CC\F2\0F^\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8B\85H\FF\FF\FFHcM\CC\F2\0F^\0C\C8H\8BE\A0Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\11\04\C8H\8B\85`\FF\FF\FFHcM\D0\F2\0F\10\04\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\04\C8H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8B\85h\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8B\85p\FF\FF\FFHc\8DD\FF\FF\FF\F2\0FY\0C\C8H\8B\85X\FF\FF\FFHcM\D0\F2\0F^\0C\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8B\85x\FF\FF\FFHc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\98Hc\8DD\FF\FF\FFHi\C9\08\02\00\00H\01\C8Hc\8D@\FF\FF\FF\F2\0F\10\04\C8H\8BE\90Hc\8DD\FF\FF\FFHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\8B\85@\FF\FF\FF\83\C0\01\89\85@\FF\FF\FF\E9h\F3\FF\FF\E9\00\00\00\00\8B\85D\FF\FF\FF\83\C0\01\89\85D\FF\FF\FF\E96\F3\FF\FFH\83\C48[A\5CA]A^A_]\C3f\0F\1FD\00\00UH\89\E5H\83\ECp\F2\0F\10\05x\04\00\00\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0\F2\0F\11E\C8\C7E\DC\00\00\00\00\8BE\DC\8BM\F8\83\C1\019\C8\0F\8DC\01\00\00\C7E\D8\00\00\00\00\8BE\D8\8BM\F0\83\C1\019\C8\0F\8D\18\01\00\00\C7E\D4\00\00\00\00\8BE\D4\8BM\F4\83\C1\019\C8\0F\8D\ED\00\00\00H\8BE\E8HcM\DCHi\C9\08\84\00\00H\01\C8HcM\D8Hi\C9\08\02\00\00H\01\C8HcM\D4\F2\0F\10\04\C8\F2\0F\11E\C0H\8BE\E0HcM\DCHi\C9\08\84\00\00H\01\C8HcM\D8Hi\C9\08\02\00\00H\01\C8HcM\D4\F2\0F\10\04\C8\F2\0F\11E\B8\F2\0F\10E\C0\F2\0F\5CE\B8\0F(\0D\B5\03\00\00f\0F\DB\C1\F2\0F\11E\B0\F2\0F\10E\B0f\0F.E\C8\0F\86T\00\00\00H\BE\F24@\00\00\00\00\00H\8B<%`@`\00\8BU\DC\8BM\D8D\8BE\D4\F2\0F\10E\C0D\8BM\DC\8BE\D8D\8BU\D4\F2\0F\10M\B8\F2\0F\10U\C8\89\04$D\89T$\08\B0\03\E8g\D4\FF\FF\C7E\FC\00\00\00\00\89E\AC\E9@\00\00\00\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\02\FF\FF\FF\E9\00\00\00\00\8BE\D8\83\C0\01\89E\D8\E9\D7\FE\FF\FF\E9\00\00\00\00\8BE\DC\83\C0\01\89E\DC\E9\AC\FE\FF\FF\C7E\FC\01\00\00\00\8BE\FCH\83\C4p]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`H\8BE\10\89}\FC\89u\F8\89U\F4H\89M\E8L\89E\E0L\89M\D8H\89E\D0\C7E\CC\00\00\00\00\8BE\CC;E\FC\0F\8F\B2\01\00\00\C7E\C8\00\00\00\00\8BE\C8;E\F4\0F\8F\8C\01\00\00\C7E\C4\00\00\00\00\8BE\C4;E\F8\0F\8Ff\01\00\00H\BE\EA4@\00\00\00\00\00H\8B<%`@`\00H\8BE\E8HcM\CCHi\C9\08\84\00\00H\01\C8HcM\C8Hi\C9\08\02\00\00H\01\C8HcM\C4\F2\0F\10\04\C8\B0\01\E8`\D3\FF\FFH\BE\EA4@\00\00\00\00\00H\8B<%`@`\00H\8BM\E0HcU\CCHi\D2\08\84\00\00H\01\D1HcU\C8Hi\D2\08\02\00\00H\01\D1HcU\C4\F2\0F\10\04\D1\89E\C0\B0\01\E8\1B\D3\FF\FFH\BE\EA4@\00\00\00\00\00H\8B<%`@`\00H\8BM\D8HcU\CCHi\D2\08\84\00\00H\01\D1HcU\C8Hi\D2\08\02\00\00H\01\D1HcU\C4\F2\0F\10\04\D1\89E\BC\B0\01\E8\D6\D2\FF\FFH\BE\EA4@\00\00\00\00\00H\8B<%`@`\00H\8BM\D0HcU\CCHi\D2\08\84\00\00H\01\D1HcU\C8Hi\D2\08\02\00\00H\01\D1HcU\C4\F2\0F\10\04\D1\89E\B8\B0\01\E8\91\D2\FF\FFA\B8\14\00\00\00D\8BM\CCD\0F\AFM\F8D\03M\C8\89E\B4D\89\C8\99A\F7\F8\83\FA\00\0F\85\1C\00\00\00H\BE\B54@\00\00\00\00\00H\8B<%`@`\00\B0\00\E8R\D2\FF\FF\89E\B0\E9\00\00\00\00\8BE\C4\83\C0\01\89E\C4\E9\8E\FE\FF\FF\E9\00\00\00\00\8BE\C8\83\C0\01\89E\C8\E9h\FE\FF\FF\E9\00\00\00\00\8BE\CC\83\C0\01\89E\CC\E9B\FE\FF\FFH\BE\B54@\00\00\00\00\00H\8B<%`@`\00\B0\00\E8\FD\D1\FF\FF\89E\ACH\83\C4`]\C3", i32 trunc (i64 add (i64 ptrtoint (%seg_4005e0__text_type* @seg_4005e0__text to i64), i64 6447) to i32), [114 x i8] c"AWAVI\89\D7AUATL\8D%\1E\0A \00UH\8D-\1E\0A \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8_\D1\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_403434__fini = internal constant %seg_403434__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_403440__rodata = internal constant %seg_403440__rodata_type <{ [112 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00E@\00\00\00\00\00J\A2@\00\00\00\00\00\00&@\00\00\00\00\00\00$@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\00\00\00\00\00\00\18@\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\F1h\E3\88\B5\F8\E4>\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [7 x i8] c"%0.6f\0A\00", [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", [8 x i8] c"%0.2lf \00", [84 x i8] c"A[%d][%d][%d] = %lf and B[%d][%d][%d] = %lf differ more than FP_ABSTOLERANCE = %lf\0A\00" }>
@seg_403548__eh_frame_hdr = internal constant %seg_403548__eh_frame_hdr_type <{ [164 x i8] c"\01\1B\03;\A4\00\00\00\13\00\00\00(\D0\FF\FF\00\01\00\00\98\D0\FF\FF\C0\00\00\00\C8\D0\FF\FF\EC\00\00\00\88\D1\FF\FF(\01\00\00\08\D2\FF\FFD\01\00\00\18\D2\FF\FF`\01\00\008\D2\FF\FF|\01\00\00H\D2\FF\FF\98\01\00\00h\D2\FF\FF\B4\01\00\00\A8\D2\FF\FF\D0\01\00\00\E8\D2\FF\FF\EC\01\00\00h\D3\FF\FF\08\02\00\00x\DA\FF\FF,\02\00\00h\DF\FF\FFP\02\00\00\18\ED\FF\FFt\02\00\00\C8\FA\FF\FF\98\02\00\00h\FC\FF\FF\B4\02\00\00x\FE\FF\FF\D0\02\00\00\E8\FE\FF\FF\18\03\00\00" }>
@seg_4035f0__eh_frame = internal constant %seg_4035f0__eh_frame_type <{ [648 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\D0\CF\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\D4\CF\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00 \CF\FF\FFp\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00X\D0\FF\FFu\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\BC\D0\FF\FF\0B\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\B0\D0\FF\FF\19\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\B4\D0\FF\FF\09\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\A8\D0\FF\FF\14\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\AC\D0\FF\FF4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\D0\D0\FF\FF;\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\F4\D0\FF\FFs\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00 \00\00\008\01\00\00X\D1\FF\FF\0C\07\00\00\00A\0E\10\86\02C\0D\06P\83\07\8C\06\8D\05\8E\04\8F\03 \00\00\00\5C\01\00\00D\D8\FF\FF\E3\04\00\00\00A\0E\10\86\02C\0D\06M\83\07\8C\06\8D\05\8E\04\8F\03 \00\00\00\80\01\00\00\10\DD\FF\FF\AA\0D\00\00\00A\0E\10\86\02C\0D\06M\83\07\8C\06\8D\05\8E\04\8F\03 \00\00\00\A4\01\00\00\9C\EA\FF\FF\AA\0D\00\00\00A\0E\10\86\02C\0D\06M\83\07\8C\06\8D\05\8E\04\8F\03\18\00\00\00\C8\01\00\00(\F8\FF\FF\91\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\01\00\00\AC\F9\FF\FF\0C\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\00\02\00\00\A0\FB\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00H\02\00\00\C8\FB\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4006c0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400690___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604000__got_plt = internal global %seg_604000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @calloc to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64)* @exit to i64), i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64) }>
@seg_604048__data = internal global %seg_604048__data_type zeroinitializer
@seg_604060__bss = internal global %seg_604060__bss_type zeroinitializer
@polybench_papi_counters_threadid = global %polybench_papi_counters_threadid_type zeroinitializer
@polybench_program_total_flops = global %polybench_program_total_flops_type zeroinitializer
@polybench_c_end = global %polybench_c_end_type zeroinitializer
@polybench_t_end = global %polybench_t_end_type zeroinitializer
@polybench_t_start = global %polybench_t_start_type zeroinitializer
@polybench_c_start = global %polybench_c_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4006c0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400690___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_403430___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4033c0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_alloc_data_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_flush_cache_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_stop_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_print_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_prepare_instruments_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_start_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2449
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2450
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2447
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2448
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2449
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2450
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_403430___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4033c0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_6040e8___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400620_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400620:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6307928, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6307928
  %37 = icmp ult i64 %33, 6307928
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6307928, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2447
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400648, label %block_400631

block_40063b:                                     ; preds = %block_400631
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 6307928, i64* %RDI, align 8, !tbaa !2428
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %90, i64* %93, align 8, !tbaa !2428
  %94 = load i64, i64* %PC
  switch i64 %94, label %162 [
    i64 4195914, label %block_40064a
    i64 4195907, label %block_400643
  ]

block_400631:                                     ; preds = %block_400620
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = and i64 %98, %97
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %102, align 1, !tbaa !2432
  %103 = trunc i64 %101 to i32
  %104 = and i32 %103, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2446
  %110 = icmp eq i64 %101, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = lshr i64 %101, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2448
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 15
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %125 = load i8, i8* %124, align 1, !tbaa !2447
  store i8 %125, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %127 = icmp ne i8 %125, 0
  %128 = select i1 %127, i64 %119, i64 %121
  store i64 %128, i64* %126, align 8, !tbaa !2428
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  br i1 %130, label %block_400648, label %block_40063b

block_400648:                                     ; preds = %block_400643, %block_400631, %block_400620
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400620 ], [ %2, %block_400631 ], [ %2, %block_400643 ]
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40064a:                                     ; preds = %block_40063b
  %146 = load i64, i64* %RAX
  %147 = load i64, i64* %RAX
  %148 = add i64 %147, %146
  %149 = load i16, i16* %AX
  %150 = zext i16 %149 to i64
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = load i64, i64* %PC
  %154 = tail call %struct.Memory* @sub_400650_register_tm_clones(%struct.State* %0, i64 %153, %struct.Memory* %2)
  ret %struct.Memory* %154

block_400643:                                     ; preds = %block_40063b
  %155 = load i64, i64* %RAX
  %156 = load i64, i64* %RAX
  %157 = add i64 %156, %155
  %158 = load i32, i32* %EAX
  %159 = zext i32 %158 to i64
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  br label %block_400648

; <label>:162:                                    ; preds = %block_40063b
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780_rtclock(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400780:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %13 to %"class.std::bitset"*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %15 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %14, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %15 to %union.vec128_t*
  %16 = load i64, i64* %RBP
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 1
  store i64 %18, i64* %PC
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = load i64, i64* %19, align 8, !tbaa !2428
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %16, i64* %22
  store i64 %21, i64* %19, align 8, !tbaa !2428
  %23 = load i64, i64* %RSP
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 3
  store i64 %25, i64* %PC
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  %26 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %27 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %28 = bitcast %union.vec128_t* %XMM0 to i8*
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = bitcast i8* %27 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = getelementptr inbounds i8, i8* %27, i64 8
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = bitcast i8* %28 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = getelementptr inbounds i8, i8* %28, i64 8
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = xor i64 %37, %32
  %42 = xor i64 %40, %35
  %43 = trunc i64 %41 to i32
  %44 = lshr i64 %41, 32
  %45 = trunc i64 %44 to i32
  %46 = bitcast i8* %26 to i32*
  store i32 %43, i32* %46, align 1, !tbaa !2452
  %47 = getelementptr inbounds i8, i8* %26, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 %45, i32* %48, align 1, !tbaa !2452
  %49 = trunc i64 %42 to i32
  %50 = getelementptr inbounds i8, i8* %26, i64 8
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !2452
  %52 = lshr i64 %42, 32
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds i8, i8* %26, i64 12
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !2452
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 1
  store i64 %57, i64* %PC
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %58, align 8, !tbaa !2428
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 1
  store i64 %64, i64* %PC
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %67 = load i64, i64* %66, align 8, !tbaa !2428
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  store i64 %69, i64* %65, align 8, !tbaa !2428
  %70 = add i64 %67, 8
  store i64 %70, i64* %66, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400760_polybench_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400760:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %13 to %union.vec128_t*
  %14 = load i64, i64* %RBP
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %14, i64* %20
  store i64 %19, i64* %17, align 8, !tbaa !2428
  %21 = load i64, i64* %RSP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 3
  store i64 %23, i64* %PC
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  %24 = load i64, i64* %PC
  %25 = sub i64 %24, 20
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 5
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %25, i64* %34, align 8, !tbaa !2428
  %35 = load i64, i64* %PC
  %36 = call %struct.Memory* @sub_400750_polybench_prepare_instruments(%struct.State* %0, i64 %35, %struct.Memory* %2)
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 23
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 5
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %38, i64* %47, align 8, !tbaa !2428
  %48 = load i64, i64* %PC
  %49 = call %struct.Memory* @sub_400780_rtclock(%struct.State* %0, i64 %48, %struct.Memory* %36)
  %50 = bitcast %union.vec128_t* %XMM0 to i8*
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 9
  store i64 %52, i64* %PC
  %53 = bitcast i8* %50 to double*
  %54 = load double, double* %53, align 1
  store double %54, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*)
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %66 = load i64, i64* %65, align 8, !tbaa !2428
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %64, align 8, !tbaa !2428
  %69 = add i64 %66, 8
  store i64 %69, i64* %65, align 8, !tbaa !2428
  ret %struct.Memory* %49
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = sub i64 %31, 32
  store i64 %34, i64* %RSP, align 8, !tbaa !2428
  %35 = icmp ult i64 %31, 32
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %36, i8* %37, align 1, !tbaa !2432
  %38 = trunc i64 %34 to i32
  %39 = and i32 %38, 255
  %40 = call i32 @llvm.ctpop.i32(i32 %39) #16
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %43, i8* %44, align 1, !tbaa !2446
  %45 = xor i64 32, %31
  %46 = xor i64 %45, %34
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = icmp eq i64 %34, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i64 %34, 63
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i64 %31, 63
  %58 = xor i64 %54, %57
  %59 = add nuw nsw i64 %58, %57
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 12
  %71 = load i32, i32* %ESI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 8
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %RDI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 12
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i32*
  %93 = load i32, i32* %92
  %94 = sext i32 %93 to i64
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %95 = load i64, i64* %RDI
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 24
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 5
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i64*
  %101 = load i64, i64* %100
  %102 = sext i64 %95 to i128
  %103 = and i128 %102, -18446744073709551616
  %104 = sext i64 %101 to i128
  %105 = and i128 %104, -18446744073709551616
  %106 = zext i64 %95 to i128
  %107 = or i128 %103, %106
  %108 = zext i64 %101 to i128
  %109 = or i128 %105, %108
  %110 = mul nsw i128 %109, %107
  %111 = trunc i128 %110 to i64
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = sext i64 %111 to i128
  %113 = icmp ne i128 %112, %110
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %114, i8* %115, align 1, !tbaa !2432
  %116 = trunc i128 %110 to i32
  %117 = and i32 %116, 255
  %118 = call i32 @llvm.ctpop.i32(i32 %117) #16
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %121, i8* %122, align 1, !tbaa !2446
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2450
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %124, align 1, !tbaa !2447
  %125 = lshr i64 %111, 63
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %126, i8* %127, align 1, !tbaa !2448
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %128, align 1, !tbaa !2449
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 24
  %131 = load i64, i64* %RDI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 24
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 24
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %148 = load i64, i64* %147, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %144, i64* %150
  store i64 %149, i64* %147, align 8, !tbaa !2428
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %142, i64* %151, align 8, !tbaa !2428
  %152 = load i64, i64* %PC
  %153 = call %struct.Memory* @sub_400830_xmalloc(%struct.State* %0, i64 %152, %struct.Memory* %2)
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 32
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %155 to i64*
  store i64 %156, i64* %159
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 32
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 32, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 32
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2432
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = xor i64 32, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2450
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2448
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2449
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %153
}

; Function Attrs: noinline
define %struct.Memory* @sub_402260_kernel_fdtd_apml_StrictFP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402260:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 21
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R10 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 23
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R11 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R12 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 27
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R13 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 29
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R14 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 31
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R15 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %R15
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 2
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %82 = load i64, i64* %81, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %78, i64* %84
  store i64 %83, i64* %81, align 8, !tbaa !2428
  %85 = load i64, i64* %R14
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 2
  store i64 %87, i64* %PC
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %85, i64* %91
  store i64 %90, i64* %88, align 8, !tbaa !2428
  %92 = load i64, i64* %R13
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 2
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %R12
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 2
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %RBX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 1
  store i64 %108, i64* %PC
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %110 = load i64, i64* %109, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %106, i64* %112
  store i64 %111, i64* %109, align 8, !tbaa !2428
  %113 = load i64, i64* %RSP
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = sub i64 %113, 56
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  %117 = icmp ult i64 %113, 56
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %118, i8* %119, align 1, !tbaa !2432
  %120 = trunc i64 %116 to i32
  %121 = and i32 %120, 255
  %122 = call i32 @llvm.ctpop.i32(i32 %121) #16
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %125, i8* %126, align 1, !tbaa !2446
  %127 = xor i64 56, %113
  %128 = xor i64 %127, %116
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %131, i8* %132, align 1, !tbaa !2450
  %133 = icmp eq i64 %116, 0
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = lshr i64 %116, 63
  %137 = trunc i64 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %137, i8* %138, align 1, !tbaa !2448
  %139 = lshr i64 %113, 63
  %140 = xor i64 %136, %139
  %141 = add nuw nsw i64 %140, %139
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = load i64, i64* %RBP
  %146 = add i64 %145, 96
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP
  %152 = add i64 %151, 88
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %R10, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = add i64 %157, 80
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %R11, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = add i64 %163, 72
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %RBX, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP
  %170 = add i64 %169, 64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %R14, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = add i64 %175, 56
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %R15, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = add i64 %181, 48
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %R12, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = add i64 %187, 40
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %R13, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 208
  %195 = load i64, i64* %RAX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198
  %199 = load i64, i64* %RBP
  %200 = add i64 %199, 32
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 216
  %207 = load i64, i64* %RAX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210
  %211 = load i64, i64* %RBP
  %212 = add i64 %211, 24
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 224
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %RBP
  %224 = add i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 44
  %231 = load i32, i32* %EDI
  %232 = zext i32 %231 to i64
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %230 to i32*
  store i32 %231, i32* %235
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 48
  %238 = load i32, i32* %ESI
  %239 = zext i32 %238 to i64
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %237 to i32*
  store i32 %238, i32* %242
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 52
  %245 = load i32, i32* %EDX
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %244 to i32*
  store i32 %245, i32* %249
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 64
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = bitcast i8* %252 to double*
  %256 = load double, double* %255, align 1
  %257 = inttoptr i64 %251 to double*
  store double %256, double* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 72
  %260 = bitcast %union.vec128_t* %XMM1 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = bitcast i8* %260 to double*
  %264 = load double, double* %263, align 1
  %265 = inttoptr i64 %259 to double*
  store double %264, double* %265
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 80
  %268 = load i64, i64* %RCX
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %271
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 88
  %274 = load i64, i64* %R8
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 96
  %280 = load i64, i64* %R9
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 104
  %286 = load i64, i64* %RAX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %285 to i64*
  store i64 %286, i64* %289
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 224
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 7
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 112
  %298 = load i64, i64* %RAX
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %297 to i64*
  store i64 %298, i64* %301
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 216
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 7
  store i64 %305, i64* %PC
  %306 = inttoptr i64 %303 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %RCX, align 8, !tbaa !2428
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 120
  %310 = load i64, i64* %RCX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %309 to i64*
  store i64 %310, i64* %313
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 128
  %316 = load i64, i64* %R13
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %319
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 136
  %322 = load i64, i64* %R12
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 7
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %321 to i64*
  store i64 %322, i64* %325
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 144
  %328 = load i64, i64* %R15
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 7
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %327 to i64*
  store i64 %328, i64* %331
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 152
  %334 = load i64, i64* %R14
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 7
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %333 to i64*
  store i64 %334, i64* %337
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 160
  %340 = load i64, i64* %RBX
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 7
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %339 to i64*
  store i64 %340, i64* %343
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 168
  %346 = load i64, i64* %R11
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 7
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %345 to i64*
  store i64 %346, i64* %349
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 176
  %352 = load i64, i64* %R10
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 7
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %351 to i64*
  store i64 %352, i64* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 208
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 7
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %R8, align 8, !tbaa !2428
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 184
  %364 = load i64, i64* %R8
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 7
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %363 to i64*
  store i64 %364, i64* %367
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 188
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 10
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i32*
  store i32 0, i32* %372
  br label %block_402331

block_4029df:                                     ; preds = %block_4029d0
  %373 = sub i64 %9986, 196
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 7
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  store i64 %378, i64* %RCX, align 8, !tbaa !2428
  %379 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %380 = load i64, i64* %RAX
  %381 = load i64, i64* %RCX
  %382 = mul i64 %381, 8
  %383 = add i64 %382, %380
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to double*
  %387 = load double, double* %386
  %388 = bitcast i8* %379 to double*
  store double %387, double* %388, align 1, !tbaa !2453
  %389 = getelementptr inbounds i8, i8* %379, i64 8
  %390 = bitcast i8* %389 to double*
  store double 0.000000e+00, double* %390, align 1, !tbaa !2453
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 80
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 188
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 7
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i32*
  %402 = load i32, i32* %401
  %403 = sext i32 %402 to i64
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = load i64, i64* %RCX
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 7
  store i64 %406, i64* %PC
  %407 = sext i64 %404 to i128
  %408 = and i128 %407, -18446744073709551616
  %409 = zext i64 %404 to i128
  %410 = or i128 %408, %409
  %411 = mul nsw i128 520, %410
  %412 = trunc i128 %411 to i64
  store i64 %412, i64* %RCX, align 8, !tbaa !2428
  %413 = sext i64 %412 to i128
  %414 = icmp ne i128 %413, %411
  %415 = zext i1 %414 to i8
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %415, i8* %416, align 1, !tbaa !2432
  %417 = trunc i128 %411 to i32
  %418 = and i32 %417, 255
  %419 = call i32 @llvm.ctpop.i32(i32 %418) #16
  %420 = trunc i32 %419 to i8
  %421 = and i8 %420, 1
  %422 = xor i8 %421, 1
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %422, i8* %423, align 1, !tbaa !2446
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %424, align 1, !tbaa !2450
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %425, align 1, !tbaa !2447
  %426 = lshr i64 %412, 63
  %427 = trunc i64 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %427, i8* %428, align 1, !tbaa !2448
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %415, i8* %429, align 1, !tbaa !2449
  %430 = load i64, i64* %RAX
  %431 = load i64, i64* %RCX
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 3
  store i64 %433, i64* %PC
  %434 = add i64 %431, %430
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = icmp ult i64 %434, %430
  %436 = icmp ult i64 %434, %431
  %437 = or i1 %435, %436
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %438, i8* %439, align 1, !tbaa !2432
  %440 = trunc i64 %434 to i32
  %441 = and i32 %440, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2446
  %447 = xor i64 %431, %430
  %448 = xor i64 %447, %434
  %449 = lshr i64 %448, 4
  %450 = trunc i64 %449 to i8
  %451 = and i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %451, i8* %452, align 1, !tbaa !2450
  %453 = icmp eq i64 %434, 0
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %454, i8* %455, align 1, !tbaa !2447
  %456 = lshr i64 %434, 63
  %457 = trunc i64 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %457, i8* %458, align 1, !tbaa !2448
  %459 = lshr i64 %430, 63
  %460 = lshr i64 %431, 63
  %461 = xor i64 %456, %459
  %462 = xor i64 %456, %460
  %463 = add nuw nsw i64 %461, %462
  %464 = icmp eq i64 %463, 2
  %465 = zext i1 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %465, i8* %466, align 1, !tbaa !2449
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 196
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = sext i32 %472 to i64
  store i64 %473, i64* %RCX, align 8, !tbaa !2428
  %474 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %475 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %476 = load i64, i64* %RAX
  %477 = load i64, i64* %RCX
  %478 = mul i64 %477, 8
  %479 = add i64 %478, %476
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  store i64 %481, i64* %PC
  %482 = bitcast i8* %475 to double*
  %483 = load double, double* %482, align 1
  %484 = getelementptr inbounds i8, i8* %475, i64 8
  %485 = bitcast i8* %484 to i64*
  %486 = load i64, i64* %485, align 1
  %487 = inttoptr i64 %479 to double*
  %488 = load double, double* %487
  %489 = fsub double %483, %488
  %490 = bitcast i8* %474 to double*
  store double %489, double* %490, align 1, !tbaa !2453
  %491 = getelementptr inbounds i8, i8* %474, i64 8
  %492 = bitcast i8* %491 to i64*
  store i64 %486, i64* %492, align 1, !tbaa !2453
  %493 = load i64, i64* %RBP
  %494 = sub i64 %493, 128
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 4
  store i64 %496, i64* %PC
  %497 = inttoptr i64 %494 to i64*
  %498 = load i64, i64* %497
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 188
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = sext i32 %504 to i64
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = load i64, i64* %RCX
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 7
  store i64 %508, i64* %PC
  %509 = sext i64 %506 to i128
  %510 = and i128 %509, -18446744073709551616
  %511 = zext i64 %506 to i128
  %512 = or i128 %510, %511
  %513 = mul nsw i128 33800, %512
  %514 = trunc i128 %513 to i64
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = sext i64 %514 to i128
  %516 = icmp ne i128 %515, %513
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %517, i8* %518, align 1, !tbaa !2432
  %519 = trunc i128 %513 to i32
  %520 = and i32 %519, 255
  %521 = call i32 @llvm.ctpop.i32(i32 %520) #16
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  %524 = xor i8 %523, 1
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %524, i8* %525, align 1, !tbaa !2446
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %526, align 1, !tbaa !2450
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %527, align 1, !tbaa !2447
  %528 = lshr i64 %514, 63
  %529 = trunc i64 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %529, i8* %530, align 1, !tbaa !2448
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %517, i8* %531, align 1, !tbaa !2449
  %532 = load i64, i64* %RAX
  %533 = load i64, i64* %RCX
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = add i64 %533, %532
  store i64 %536, i64* %RAX, align 8, !tbaa !2428
  %537 = icmp ult i64 %536, %532
  %538 = icmp ult i64 %536, %533
  %539 = or i1 %537, %538
  %540 = zext i1 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %540, i8* %541, align 1, !tbaa !2432
  %542 = trunc i64 %536 to i32
  %543 = and i32 %542, 255
  %544 = call i32 @llvm.ctpop.i32(i32 %543) #16
  %545 = trunc i32 %544 to i8
  %546 = and i8 %545, 1
  %547 = xor i8 %546, 1
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %547, i8* %548, align 1, !tbaa !2446
  %549 = xor i64 %533, %532
  %550 = xor i64 %549, %536
  %551 = lshr i64 %550, 4
  %552 = trunc i64 %551 to i8
  %553 = and i8 %552, 1
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %553, i8* %554, align 1, !tbaa !2450
  %555 = icmp eq i64 %536, 0
  %556 = zext i1 %555 to i8
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = lshr i64 %536, 63
  %559 = trunc i64 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i64 %532, 63
  %562 = lshr i64 %533, 63
  %563 = xor i64 %558, %561
  %564 = xor i64 %558, %562
  %565 = add nuw nsw i64 %563, %564
  %566 = icmp eq i64 %565, 2
  %567 = zext i1 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %567, i8* %568, align 1, !tbaa !2449
  %569 = load i64, i64* %RBP
  %570 = sub i64 %569, 52
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 4
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %570 to i32*
  %574 = load i32, i32* %573
  %575 = sext i32 %574 to i64
  store i64 %575, i64* %RCX, align 8, !tbaa !2428
  %576 = load i64, i64* %RCX
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 7
  store i64 %578, i64* %PC
  %579 = sext i64 %576 to i128
  %580 = and i128 %579, -18446744073709551616
  %581 = zext i64 %576 to i128
  %582 = or i128 %580, %581
  %583 = mul nsw i128 520, %582
  %584 = trunc i128 %583 to i64
  store i64 %584, i64* %RCX, align 8, !tbaa !2428
  %585 = sext i64 %584 to i128
  %586 = icmp ne i128 %585, %583
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %587, i8* %588, align 1, !tbaa !2432
  %589 = trunc i128 %583 to i32
  %590 = and i32 %589, 255
  %591 = call i32 @llvm.ctpop.i32(i32 %590) #16
  %592 = trunc i32 %591 to i8
  %593 = and i8 %592, 1
  %594 = xor i8 %593, 1
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %594, i8* %595, align 1, !tbaa !2446
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %596, align 1, !tbaa !2450
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %597, align 1, !tbaa !2447
  %598 = lshr i64 %584, 63
  %599 = trunc i64 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %599, i8* %600, align 1, !tbaa !2448
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %587, i8* %601, align 1, !tbaa !2449
  %602 = load i64, i64* %RAX
  %603 = load i64, i64* %RCX
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 3
  store i64 %605, i64* %PC
  %606 = add i64 %603, %602
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = icmp ult i64 %606, %602
  %608 = icmp ult i64 %606, %603
  %609 = or i1 %607, %608
  %610 = zext i1 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %610, i8* %611, align 1, !tbaa !2432
  %612 = trunc i64 %606 to i32
  %613 = and i32 %612, 255
  %614 = call i32 @llvm.ctpop.i32(i32 %613) #16
  %615 = trunc i32 %614 to i8
  %616 = and i8 %615, 1
  %617 = xor i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %617, i8* %618, align 1, !tbaa !2446
  %619 = xor i64 %603, %602
  %620 = xor i64 %619, %606
  %621 = lshr i64 %620, 4
  %622 = trunc i64 %621 to i8
  %623 = and i8 %622, 1
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %623, i8* %624, align 1, !tbaa !2450
  %625 = icmp eq i64 %606, 0
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %626, i8* %627, align 1, !tbaa !2447
  %628 = lshr i64 %606, 63
  %629 = trunc i64 %628 to i8
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %629, i8* %630, align 1, !tbaa !2448
  %631 = lshr i64 %602, 63
  %632 = lshr i64 %603, 63
  %633 = xor i64 %628, %631
  %634 = xor i64 %628, %632
  %635 = add nuw nsw i64 %633, %634
  %636 = icmp eq i64 %635, 2
  %637 = zext i1 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %637, i8* %638, align 1, !tbaa !2449
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 196
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 6
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i32*
  %644 = load i32, i32* %643
  %645 = zext i32 %644 to i64
  store i64 %645, i64* %RDX, align 8, !tbaa !2428
  %646 = load i64, i64* %RDX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 3
  store i64 %648, i64* %PC
  %649 = trunc i64 %646 to i32
  %650 = add i32 1, %649
  %651 = zext i32 %650 to i64
  store i64 %651, i64* %RDX, align 8, !tbaa !2428
  %652 = icmp ult i32 %650, %649
  %653 = icmp ult i32 %650, 1
  %654 = or i1 %652, %653
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %655, i8* %656, align 1, !tbaa !2432
  %657 = and i32 %650, 255
  %658 = call i32 @llvm.ctpop.i32(i32 %657) #16
  %659 = trunc i32 %658 to i8
  %660 = and i8 %659, 1
  %661 = xor i8 %660, 1
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %661, i8* %662, align 1, !tbaa !2446
  %663 = xor i64 1, %646
  %664 = trunc i64 %663 to i32
  %665 = xor i32 %664, %650
  %666 = lshr i32 %665, 4
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %668, i8* %669, align 1, !tbaa !2450
  %670 = icmp eq i32 %650, 0
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %671, i8* %672, align 1, !tbaa !2447
  %673 = lshr i32 %650, 31
  %674 = trunc i32 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %674, i8* %675, align 1, !tbaa !2448
  %676 = lshr i32 %649, 31
  %677 = xor i32 %673, %676
  %678 = add nuw nsw i32 %677, %673
  %679 = icmp eq i32 %678, 2
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %680, i8* %681, align 1, !tbaa !2449
  %682 = load i32, i32* %EDX
  %683 = zext i32 %682 to i64
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 3
  store i64 %685, i64* %PC
  %686 = shl i64 %683, 32
  %687 = ashr exact i64 %686, 32
  store i64 %687, i64* %RCX, align 8, !tbaa !2428
  %688 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %689 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %690 = load i64, i64* %RAX
  %691 = load i64, i64* %RCX
  %692 = mul i64 %691, 8
  %693 = add i64 %692, %690
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 5
  store i64 %695, i64* %PC
  %696 = bitcast i8* %689 to double*
  %697 = load double, double* %696, align 1
  %698 = getelementptr inbounds i8, i8* %689, i64 8
  %699 = bitcast i8* %698 to i64*
  %700 = load i64, i64* %699, align 1
  %701 = inttoptr i64 %693 to double*
  %702 = load double, double* %701
  %703 = fadd double %697, %702
  %704 = bitcast i8* %688 to double*
  store double %703, double* %704, align 1, !tbaa !2453
  %705 = getelementptr inbounds i8, i8* %688, i64 8
  %706 = bitcast i8* %705 to i64*
  store i64 %700, i64* %706, align 1, !tbaa !2453
  %707 = load i64, i64* %RBP
  %708 = sub i64 %707, 128
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 4
  store i64 %710, i64* %PC
  %711 = inttoptr i64 %708 to i64*
  %712 = load i64, i64* %711
  store i64 %712, i64* %RAX, align 8, !tbaa !2428
  %713 = load i64, i64* %RBP
  %714 = sub i64 %713, 188
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 7
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %714 to i32*
  %718 = load i32, i32* %717
  %719 = sext i32 %718 to i64
  store i64 %719, i64* %RCX, align 8, !tbaa !2428
  %720 = load i64, i64* %RCX
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC
  %723 = sext i64 %720 to i128
  %724 = and i128 %723, -18446744073709551616
  %725 = zext i64 %720 to i128
  %726 = or i128 %724, %725
  %727 = mul nsw i128 33800, %726
  %728 = trunc i128 %727 to i64
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = sext i64 %728 to i128
  %730 = icmp ne i128 %729, %727
  %731 = zext i1 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %731, i8* %732, align 1, !tbaa !2432
  %733 = trunc i128 %727 to i32
  %734 = and i32 %733, 255
  %735 = call i32 @llvm.ctpop.i32(i32 %734) #16
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = xor i8 %737, 1
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %738, i8* %739, align 1, !tbaa !2446
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %740, align 1, !tbaa !2450
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %741, align 1, !tbaa !2447
  %742 = lshr i64 %728, 63
  %743 = trunc i64 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2448
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %731, i8* %745, align 1, !tbaa !2449
  %746 = load i64, i64* %RAX
  %747 = load i64, i64* %RCX
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 3
  store i64 %749, i64* %PC
  %750 = add i64 %747, %746
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = icmp ult i64 %750, %746
  %752 = icmp ult i64 %750, %747
  %753 = or i1 %751, %752
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %754, i8* %755, align 1, !tbaa !2432
  %756 = trunc i64 %750 to i32
  %757 = and i32 %756, 255
  %758 = call i32 @llvm.ctpop.i32(i32 %757) #16
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %761, i8* %762, align 1, !tbaa !2446
  %763 = xor i64 %747, %746
  %764 = xor i64 %763, %750
  %765 = lshr i64 %764, 4
  %766 = trunc i64 %765 to i8
  %767 = and i8 %766, 1
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %767, i8* %768, align 1, !tbaa !2450
  %769 = icmp eq i64 %750, 0
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %770, i8* %771, align 1, !tbaa !2447
  %772 = lshr i64 %750, 63
  %773 = trunc i64 %772 to i8
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %773, i8* %774, align 1, !tbaa !2448
  %775 = lshr i64 %746, 63
  %776 = lshr i64 %747, 63
  %777 = xor i64 %772, %775
  %778 = xor i64 %772, %776
  %779 = add nuw nsw i64 %777, %778
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %781, i8* %782, align 1, !tbaa !2449
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 52
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 4
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i32*
  %788 = load i32, i32* %787
  %789 = sext i32 %788 to i64
  store i64 %789, i64* %RCX, align 8, !tbaa !2428
  %790 = load i64, i64* %RCX
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 7
  store i64 %792, i64* %PC
  %793 = sext i64 %790 to i128
  %794 = and i128 %793, -18446744073709551616
  %795 = zext i64 %790 to i128
  %796 = or i128 %794, %795
  %797 = mul nsw i128 520, %796
  %798 = trunc i128 %797 to i64
  store i64 %798, i64* %RCX, align 8, !tbaa !2428
  %799 = sext i64 %798 to i128
  %800 = icmp ne i128 %799, %797
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %801, i8* %802, align 1, !tbaa !2432
  %803 = trunc i128 %797 to i32
  %804 = and i32 %803, 255
  %805 = call i32 @llvm.ctpop.i32(i32 %804) #16
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  %808 = xor i8 %807, 1
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %808, i8* %809, align 1, !tbaa !2446
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %810, align 1, !tbaa !2450
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %811, align 1, !tbaa !2447
  %812 = lshr i64 %798, 63
  %813 = trunc i64 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %813, i8* %814, align 1, !tbaa !2448
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %801, i8* %815, align 1, !tbaa !2449
  %816 = load i64, i64* %RAX
  %817 = load i64, i64* %RCX
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC
  %820 = add i64 %817, %816
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = icmp ult i64 %820, %816
  %822 = icmp ult i64 %820, %817
  %823 = or i1 %821, %822
  %824 = zext i1 %823 to i8
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %824, i8* %825, align 1, !tbaa !2432
  %826 = trunc i64 %820 to i32
  %827 = and i32 %826, 255
  %828 = call i32 @llvm.ctpop.i32(i32 %827) #16
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  %831 = xor i8 %830, 1
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %831, i8* %832, align 1, !tbaa !2446
  %833 = xor i64 %817, %816
  %834 = xor i64 %833, %820
  %835 = lshr i64 %834, 4
  %836 = trunc i64 %835 to i8
  %837 = and i8 %836, 1
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %837, i8* %838, align 1, !tbaa !2450
  %839 = icmp eq i64 %820, 0
  %840 = zext i1 %839 to i8
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %840, i8* %841, align 1, !tbaa !2447
  %842 = lshr i64 %820, 63
  %843 = trunc i64 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %843, i8* %844, align 1, !tbaa !2448
  %845 = lshr i64 %816, 63
  %846 = lshr i64 %817, 63
  %847 = xor i64 %842, %845
  %848 = xor i64 %842, %846
  %849 = add nuw nsw i64 %847, %848
  %850 = icmp eq i64 %849, 2
  %851 = zext i1 %850 to i8
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %851, i8* %852, align 1, !tbaa !2449
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 196
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 7
  store i64 %856, i64* %PC
  %857 = inttoptr i64 %854 to i32*
  %858 = load i32, i32* %857
  %859 = sext i32 %858 to i64
  store i64 %859, i64* %RCX, align 8, !tbaa !2428
  %860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %862 = load i64, i64* %RAX
  %863 = load i64, i64* %RCX
  %864 = mul i64 %863, 8
  %865 = add i64 %864, %862
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 5
  store i64 %867, i64* %PC
  %868 = bitcast i8* %861 to double*
  %869 = load double, double* %868, align 1
  %870 = getelementptr inbounds i8, i8* %861, i64 8
  %871 = bitcast i8* %870 to i64*
  %872 = load i64, i64* %871, align 1
  %873 = inttoptr i64 %865 to double*
  %874 = load double, double* %873
  %875 = fsub double %869, %874
  %876 = bitcast i8* %860 to double*
  store double %875, double* %876, align 1, !tbaa !2453
  %877 = getelementptr inbounds i8, i8* %860, i64 8
  %878 = bitcast i8* %877 to i64*
  store i64 %872, i64* %878, align 1, !tbaa !2453
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 96
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883
  store i64 %884, i64* %RAX, align 8, !tbaa !2428
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 188
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 7
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to i32*
  %890 = load i32, i32* %889
  %891 = sext i32 %890 to i64
  store i64 %891, i64* %RCX, align 8, !tbaa !2428
  %892 = load i64, i64* %RCX
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 7
  store i64 %894, i64* %PC
  %895 = sext i64 %892 to i128
  %896 = and i128 %895, -18446744073709551616
  %897 = zext i64 %892 to i128
  %898 = or i128 %896, %897
  %899 = mul nsw i128 520, %898
  %900 = trunc i128 %899 to i64
  store i64 %900, i64* %RCX, align 8, !tbaa !2428
  %901 = sext i64 %900 to i128
  %902 = icmp ne i128 %901, %899
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2432
  %905 = trunc i128 %899 to i32
  %906 = and i32 %905, 255
  %907 = call i32 @llvm.ctpop.i32(i32 %906) #16
  %908 = trunc i32 %907 to i8
  %909 = and i8 %908, 1
  %910 = xor i8 %909, 1
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %910, i8* %911, align 1, !tbaa !2446
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %912, align 1, !tbaa !2450
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %913, align 1, !tbaa !2447
  %914 = lshr i64 %900, 63
  %915 = trunc i64 %914 to i8
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %915, i8* %916, align 1, !tbaa !2448
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %903, i8* %917, align 1, !tbaa !2449
  %918 = load i64, i64* %RAX
  %919 = load i64, i64* %RCX
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC
  %922 = add i64 %919, %918
  store i64 %922, i64* %RAX, align 8, !tbaa !2428
  %923 = icmp ult i64 %922, %918
  %924 = icmp ult i64 %922, %919
  %925 = or i1 %923, %924
  %926 = zext i1 %925 to i8
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %926, i8* %927, align 1, !tbaa !2432
  %928 = trunc i64 %922 to i32
  %929 = and i32 %928, 255
  %930 = call i32 @llvm.ctpop.i32(i32 %929) #16
  %931 = trunc i32 %930 to i8
  %932 = and i8 %931, 1
  %933 = xor i8 %932, 1
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %933, i8* %934, align 1, !tbaa !2446
  %935 = xor i64 %919, %918
  %936 = xor i64 %935, %922
  %937 = lshr i64 %936, 4
  %938 = trunc i64 %937 to i8
  %939 = and i8 %938, 1
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %939, i8* %940, align 1, !tbaa !2450
  %941 = icmp eq i64 %922, 0
  %942 = zext i1 %941 to i8
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %942, i8* %943, align 1, !tbaa !2447
  %944 = lshr i64 %922, 63
  %945 = trunc i64 %944 to i8
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %945, i8* %946, align 1, !tbaa !2448
  %947 = lshr i64 %918, 63
  %948 = lshr i64 %919, 63
  %949 = xor i64 %944, %947
  %950 = xor i64 %944, %948
  %951 = add nuw nsw i64 %949, %950
  %952 = icmp eq i64 %951, 2
  %953 = zext i1 %952 to i8
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %953, i8* %954, align 1, !tbaa !2449
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 192
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 7
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to i32*
  %960 = load i32, i32* %959
  %961 = sext i32 %960 to i64
  store i64 %961, i64* %RCX, align 8, !tbaa !2428
  %962 = load i64, i64* %RAX
  %963 = load i64, i64* %RCX
  %964 = mul i64 %963, 8
  %965 = add i64 %964, %962
  %966 = bitcast %union.vec128_t* %XMM0 to i8*
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC
  %969 = bitcast i8* %966 to double*
  %970 = load double, double* %969, align 1
  %971 = inttoptr i64 %965 to double*
  store double %970, double* %971
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 176
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 7
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %RAX, align 8, !tbaa !2428
  %978 = load i64, i64* %RBP
  %979 = sub i64 %978, 52
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 4
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %979 to i32*
  %983 = load i32, i32* %982
  %984 = sext i32 %983 to i64
  store i64 %984, i64* %RCX, align 8, !tbaa !2428
  %985 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %986 = load i64, i64* %RAX
  %987 = load i64, i64* %RCX
  %988 = mul i64 %987, 8
  %989 = add i64 %988, %986
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 5
  store i64 %991, i64* %PC
  %992 = inttoptr i64 %989 to double*
  %993 = load double, double* %992
  %994 = bitcast i8* %985 to double*
  store double %993, double* %994, align 1, !tbaa !2453
  %995 = getelementptr inbounds i8, i8* %985, i64 8
  %996 = bitcast i8* %995 to double*
  store double 0.000000e+00, double* %996, align 1, !tbaa !2453
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 184
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 7
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RBP
  %1004 = sub i64 %1003, 192
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 7
  store i64 %1006, i64* %PC
  %1007 = inttoptr i64 %1004 to i32*
  %1008 = load i32, i32* %1007
  %1009 = sext i32 %1008 to i64
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1011 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1012 = load i64, i64* %RAX
  %1013 = load i64, i64* %RCX
  %1014 = mul i64 %1013, 8
  %1015 = add i64 %1014, %1012
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 5
  store i64 %1017, i64* %PC
  %1018 = bitcast i8* %1011 to double*
  %1019 = load double, double* %1018, align 1
  %1020 = getelementptr inbounds i8, i8* %1011, i64 8
  %1021 = bitcast i8* %1020 to i64*
  %1022 = load i64, i64* %1021, align 1
  %1023 = inttoptr i64 %1015 to double*
  %1024 = load double, double* %1023
  %1025 = fdiv double %1019, %1024
  %1026 = bitcast i8* %1010 to double*
  store double %1025, double* %1026, align 1, !tbaa !2453
  %1027 = getelementptr inbounds i8, i8* %1010, i64 8
  %1028 = bitcast i8* %1027 to i64*
  store i64 %1022, i64* %1028, align 1, !tbaa !2453
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 112
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 188
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 7
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = sext i32 %1040 to i64
  store i64 %1041, i64* %RCX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RCX
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 7
  store i64 %1044, i64* %PC
  %1045 = sext i64 %1042 to i128
  %1046 = and i128 %1045, -18446744073709551616
  %1047 = zext i64 %1042 to i128
  %1048 = or i128 %1046, %1047
  %1049 = mul nsw i128 33800, %1048
  %1050 = trunc i128 %1049 to i64
  store i64 %1050, i64* %RCX, align 8, !tbaa !2428
  %1051 = sext i64 %1050 to i128
  %1052 = icmp ne i128 %1051, %1049
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1053, i8* %1054, align 1, !tbaa !2432
  %1055 = trunc i128 %1049 to i32
  %1056 = and i32 %1055, 255
  %1057 = call i32 @llvm.ctpop.i32(i32 %1056) #16
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1060, i8* %1061, align 1, !tbaa !2446
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1062, align 1, !tbaa !2450
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1063, align 1, !tbaa !2447
  %1064 = lshr i64 %1050, 63
  %1065 = trunc i64 %1064 to i8
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1065, i8* %1066, align 1, !tbaa !2448
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1053, i8* %1067, align 1, !tbaa !2449
  %1068 = load i64, i64* %RAX
  %1069 = load i64, i64* %RCX
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 3
  store i64 %1071, i64* %PC
  %1072 = add i64 %1069, %1068
  store i64 %1072, i64* %RAX, align 8, !tbaa !2428
  %1073 = icmp ult i64 %1072, %1068
  %1074 = icmp ult i64 %1072, %1069
  %1075 = or i1 %1073, %1074
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2432
  %1078 = trunc i64 %1072 to i32
  %1079 = and i32 %1078, 255
  %1080 = call i32 @llvm.ctpop.i32(i32 %1079) #16
  %1081 = trunc i32 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = xor i8 %1082, 1
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1083, i8* %1084, align 1, !tbaa !2446
  %1085 = xor i64 %1069, %1068
  %1086 = xor i64 %1085, %1072
  %1087 = lshr i64 %1086, 4
  %1088 = trunc i64 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1089, i8* %1090, align 1, !tbaa !2450
  %1091 = icmp eq i64 %1072, 0
  %1092 = zext i1 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1092, i8* %1093, align 1, !tbaa !2447
  %1094 = lshr i64 %1072, 63
  %1095 = trunc i64 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1095, i8* %1096, align 1, !tbaa !2448
  %1097 = lshr i64 %1068, 63
  %1098 = lshr i64 %1069, 63
  %1099 = xor i64 %1094, %1097
  %1100 = xor i64 %1094, %1098
  %1101 = add nuw nsw i64 %1099, %1100
  %1102 = icmp eq i64 %1101, 2
  %1103 = zext i1 %1102 to i8
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1103, i8* %1104, align 1, !tbaa !2449
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 192
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 7
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i32*
  %1110 = load i32, i32* %1109
  %1111 = sext i32 %1110 to i64
  store i64 %1111, i64* %RCX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RCX
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 7
  store i64 %1114, i64* %PC
  %1115 = sext i64 %1112 to i128
  %1116 = and i128 %1115, -18446744073709551616
  %1117 = zext i64 %1112 to i128
  %1118 = or i128 %1116, %1117
  %1119 = mul nsw i128 520, %1118
  %1120 = trunc i128 %1119 to i64
  store i64 %1120, i64* %RCX, align 8, !tbaa !2428
  %1121 = sext i64 %1120 to i128
  %1122 = icmp ne i128 %1121, %1119
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1123, i8* %1124, align 1, !tbaa !2432
  %1125 = trunc i128 %1119 to i32
  %1126 = and i32 %1125, 255
  %1127 = call i32 @llvm.ctpop.i32(i32 %1126) #16
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1130, i8* %1131, align 1, !tbaa !2446
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1132, align 1, !tbaa !2450
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1133, align 1, !tbaa !2447
  %1134 = lshr i64 %1120, 63
  %1135 = trunc i64 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1135, i8* %1136, align 1, !tbaa !2448
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1123, i8* %1137, align 1, !tbaa !2449
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %RCX
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 3
  store i64 %1141, i64* %PC
  %1142 = add i64 %1139, %1138
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = icmp ult i64 %1142, %1138
  %1144 = icmp ult i64 %1142, %1139
  %1145 = or i1 %1143, %1144
  %1146 = zext i1 %1145 to i8
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1146, i8* %1147, align 1, !tbaa !2432
  %1148 = trunc i64 %1142 to i32
  %1149 = and i32 %1148, 255
  %1150 = call i32 @llvm.ctpop.i32(i32 %1149) #16
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1153, i8* %1154, align 1, !tbaa !2446
  %1155 = xor i64 %1139, %1138
  %1156 = xor i64 %1155, %1142
  %1157 = lshr i64 %1156, 4
  %1158 = trunc i64 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1159, i8* %1160, align 1, !tbaa !2450
  %1161 = icmp eq i64 %1142, 0
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1162, i8* %1163, align 1, !tbaa !2447
  %1164 = lshr i64 %1142, 63
  %1165 = trunc i64 %1164 to i8
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1165, i8* %1166, align 1, !tbaa !2448
  %1167 = lshr i64 %1138, 63
  %1168 = lshr i64 %1139, 63
  %1169 = xor i64 %1164, %1167
  %1170 = xor i64 %1164, %1168
  %1171 = add nuw nsw i64 %1169, %1170
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2449
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 196
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 7
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1184 = load i64, i64* %RAX
  %1185 = load i64, i64* %RCX
  %1186 = mul i64 %1185, 8
  %1187 = add i64 %1186, %1184
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 5
  store i64 %1189, i64* %PC
  %1190 = bitcast i8* %1183 to double*
  %1191 = load double, double* %1190, align 1
  %1192 = getelementptr inbounds i8, i8* %1183, i64 8
  %1193 = bitcast i8* %1192 to i64*
  %1194 = load i64, i64* %1193, align 1
  %1195 = inttoptr i64 %1187 to double*
  %1196 = load double, double* %1195
  %1197 = fmul double %1191, %1196
  %1198 = bitcast i8* %1182 to double*
  store double %1197, double* %1198, align 1, !tbaa !2453
  %1199 = getelementptr inbounds i8, i8* %1182, i64 8
  %1200 = bitcast i8* %1199 to i64*
  store i64 %1194, i64* %1200, align 1, !tbaa !2453
  %1201 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 72
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 5
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to double*
  %1207 = load double, double* %1206
  %1208 = bitcast i8* %1201 to double*
  store double %1207, double* %1208, align 1, !tbaa !2453
  %1209 = getelementptr inbounds i8, i8* %1201, i64 8
  %1210 = bitcast i8* %1209 to double*
  store double 0.000000e+00, double* %1210, align 1, !tbaa !2453
  %1211 = load i64, i64* %RBP
  %1212 = sub i64 %1211, 184
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 7
  store i64 %1214, i64* %PC
  %1215 = inttoptr i64 %1212 to i64*
  %1216 = load i64, i64* %1215
  store i64 %1216, i64* %RAX, align 8, !tbaa !2428
  %1217 = load i64, i64* %RBP
  %1218 = sub i64 %1217, 192
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 7
  store i64 %1220, i64* %PC
  %1221 = inttoptr i64 %1218 to i32*
  %1222 = load i32, i32* %1221
  %1223 = sext i32 %1222 to i64
  store i64 %1223, i64* %RCX, align 8, !tbaa !2428
  %1224 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1225 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1226 = load i64, i64* %RAX
  %1227 = load i64, i64* %RCX
  %1228 = mul i64 %1227, 8
  %1229 = add i64 %1228, %1226
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 5
  store i64 %1231, i64* %PC
  %1232 = bitcast i8* %1225 to double*
  %1233 = load double, double* %1232, align 1
  %1234 = getelementptr inbounds i8, i8* %1225, i64 8
  %1235 = bitcast i8* %1234 to i64*
  %1236 = load i64, i64* %1235, align 1
  %1237 = inttoptr i64 %1229 to double*
  %1238 = load double, double* %1237
  %1239 = fdiv double %1233, %1238
  %1240 = bitcast i8* %1224 to double*
  store double %1239, double* %1240, align 1, !tbaa !2453
  %1241 = getelementptr inbounds i8, i8* %1224, i64 8
  %1242 = bitcast i8* %1241 to i64*
  store i64 %1236, i64* %1242, align 1, !tbaa !2453
  %1243 = load i64, i64* %RBP
  %1244 = sub i64 %1243, 96
  %1245 = load i64, i64* %PC
  %1246 = add i64 %1245, 4
  store i64 %1246, i64* %PC
  %1247 = inttoptr i64 %1244 to i64*
  %1248 = load i64, i64* %1247
  store i64 %1248, i64* %RAX, align 8, !tbaa !2428
  %1249 = load i64, i64* %RBP
  %1250 = sub i64 %1249, 188
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 7
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to i32*
  %1254 = load i32, i32* %1253
  %1255 = sext i32 %1254 to i64
  store i64 %1255, i64* %RCX, align 8, !tbaa !2428
  %1256 = load i64, i64* %RCX
  %1257 = load i64, i64* %PC
  %1258 = add i64 %1257, 7
  store i64 %1258, i64* %PC
  %1259 = sext i64 %1256 to i128
  %1260 = and i128 %1259, -18446744073709551616
  %1261 = zext i64 %1256 to i128
  %1262 = or i128 %1260, %1261
  %1263 = mul nsw i128 520, %1262
  %1264 = trunc i128 %1263 to i64
  store i64 %1264, i64* %RCX, align 8, !tbaa !2428
  %1265 = sext i64 %1264 to i128
  %1266 = icmp ne i128 %1265, %1263
  %1267 = zext i1 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1267, i8* %1268, align 1, !tbaa !2432
  %1269 = trunc i128 %1263 to i32
  %1270 = and i32 %1269, 255
  %1271 = call i32 @llvm.ctpop.i32(i32 %1270) #16
  %1272 = trunc i32 %1271 to i8
  %1273 = and i8 %1272, 1
  %1274 = xor i8 %1273, 1
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1274, i8* %1275, align 1, !tbaa !2446
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1276, align 1, !tbaa !2450
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1277, align 1, !tbaa !2447
  %1278 = lshr i64 %1264, 63
  %1279 = trunc i64 %1278 to i8
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1279, i8* %1280, align 1, !tbaa !2448
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1267, i8* %1281, align 1, !tbaa !2449
  %1282 = load i64, i64* %RAX
  %1283 = load i64, i64* %RCX
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 3
  store i64 %1285, i64* %PC
  %1286 = add i64 %1283, %1282
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = icmp ult i64 %1286, %1282
  %1288 = icmp ult i64 %1286, %1283
  %1289 = or i1 %1287, %1288
  %1290 = zext i1 %1289 to i8
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1290, i8* %1291, align 1, !tbaa !2432
  %1292 = trunc i64 %1286 to i32
  %1293 = and i32 %1292, 255
  %1294 = call i32 @llvm.ctpop.i32(i32 %1293) #16
  %1295 = trunc i32 %1294 to i8
  %1296 = and i8 %1295, 1
  %1297 = xor i8 %1296, 1
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1297, i8* %1298, align 1, !tbaa !2446
  %1299 = xor i64 %1283, %1282
  %1300 = xor i64 %1299, %1286
  %1301 = lshr i64 %1300, 4
  %1302 = trunc i64 %1301 to i8
  %1303 = and i8 %1302, 1
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1303, i8* %1304, align 1, !tbaa !2450
  %1305 = icmp eq i64 %1286, 0
  %1306 = zext i1 %1305 to i8
  %1307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1306, i8* %1307, align 1, !tbaa !2447
  %1308 = lshr i64 %1286, 63
  %1309 = trunc i64 %1308 to i8
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1309, i8* %1310, align 1, !tbaa !2448
  %1311 = lshr i64 %1282, 63
  %1312 = lshr i64 %1283, 63
  %1313 = xor i64 %1308, %1311
  %1314 = xor i64 %1308, %1312
  %1315 = add nuw nsw i64 %1313, %1314
  %1316 = icmp eq i64 %1315, 2
  %1317 = zext i1 %1316 to i8
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1317, i8* %1318, align 1, !tbaa !2449
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 192
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 7
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  %1324 = load i32, i32* %1323
  %1325 = sext i32 %1324 to i64
  store i64 %1325, i64* %RCX, align 8, !tbaa !2428
  %1326 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1327 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1328 = load i64, i64* %RAX
  %1329 = load i64, i64* %RCX
  %1330 = mul i64 %1329, 8
  %1331 = add i64 %1330, %1328
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 5
  store i64 %1333, i64* %PC
  %1334 = bitcast i8* %1327 to double*
  %1335 = load double, double* %1334, align 1
  %1336 = getelementptr inbounds i8, i8* %1327, i64 8
  %1337 = bitcast i8* %1336 to i64*
  %1338 = load i64, i64* %1337, align 1
  %1339 = inttoptr i64 %1331 to double*
  %1340 = load double, double* %1339
  %1341 = fmul double %1335, %1340
  %1342 = bitcast i8* %1326 to double*
  store double %1341, double* %1342, align 1, !tbaa !2453
  %1343 = getelementptr inbounds i8, i8* %1326, i64 8
  %1344 = bitcast i8* %1343 to i64*
  store i64 %1338, i64* %1344, align 1, !tbaa !2453
  %1345 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1346 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1347 = bitcast %union.vec128_t* %XMM1 to i8*
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 4
  store i64 %1349, i64* %PC
  %1350 = bitcast i8* %1346 to double*
  %1351 = load double, double* %1350, align 1
  %1352 = getelementptr inbounds i8, i8* %1346, i64 8
  %1353 = bitcast i8* %1352 to i64*
  %1354 = load i64, i64* %1353, align 1
  %1355 = bitcast i8* %1347 to double*
  %1356 = load double, double* %1355, align 1
  %1357 = fsub double %1351, %1356
  %1358 = bitcast i8* %1345 to double*
  store double %1357, double* %1358, align 1, !tbaa !2453
  %1359 = getelementptr inbounds i8, i8* %1345, i64 8
  %1360 = bitcast i8* %1359 to i64*
  store i64 %1354, i64* %1360, align 1, !tbaa !2453
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 104
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1362 to i64*
  %1366 = load i64, i64* %1365
  store i64 %1366, i64* %RAX, align 8, !tbaa !2428
  %1367 = load i64, i64* %RBP
  %1368 = sub i64 %1367, 188
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 7
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1368 to i32*
  %1372 = load i32, i32* %1371
  %1373 = sext i32 %1372 to i64
  store i64 %1373, i64* %RCX, align 8, !tbaa !2428
  %1374 = load i64, i64* %RCX
  %1375 = load i64, i64* %PC
  %1376 = add i64 %1375, 7
  store i64 %1376, i64* %PC
  %1377 = sext i64 %1374 to i128
  %1378 = and i128 %1377, -18446744073709551616
  %1379 = zext i64 %1374 to i128
  %1380 = or i128 %1378, %1379
  %1381 = mul nsw i128 520, %1380
  %1382 = trunc i128 %1381 to i64
  store i64 %1382, i64* %RCX, align 8, !tbaa !2428
  %1383 = sext i64 %1382 to i128
  %1384 = icmp ne i128 %1383, %1381
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1385, i8* %1386, align 1, !tbaa !2432
  %1387 = trunc i128 %1381 to i32
  %1388 = and i32 %1387, 255
  %1389 = call i32 @llvm.ctpop.i32(i32 %1388) #16
  %1390 = trunc i32 %1389 to i8
  %1391 = and i8 %1390, 1
  %1392 = xor i8 %1391, 1
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1392, i8* %1393, align 1, !tbaa !2446
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1394, align 1, !tbaa !2450
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1395, align 1, !tbaa !2447
  %1396 = lshr i64 %1382, 63
  %1397 = trunc i64 %1396 to i8
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1397, i8* %1398, align 1, !tbaa !2448
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1399, align 1, !tbaa !2449
  %1400 = load i64, i64* %RAX
  %1401 = load i64, i64* %RCX
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 3
  store i64 %1403, i64* %PC
  %1404 = add i64 %1401, %1400
  store i64 %1404, i64* %RAX, align 8, !tbaa !2428
  %1405 = icmp ult i64 %1404, %1400
  %1406 = icmp ult i64 %1404, %1401
  %1407 = or i1 %1405, %1406
  %1408 = zext i1 %1407 to i8
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1408, i8* %1409, align 1, !tbaa !2432
  %1410 = trunc i64 %1404 to i32
  %1411 = and i32 %1410, 255
  %1412 = call i32 @llvm.ctpop.i32(i32 %1411) #16
  %1413 = trunc i32 %1412 to i8
  %1414 = and i8 %1413, 1
  %1415 = xor i8 %1414, 1
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1415, i8* %1416, align 1, !tbaa !2446
  %1417 = xor i64 %1401, %1400
  %1418 = xor i64 %1417, %1404
  %1419 = lshr i64 %1418, 4
  %1420 = trunc i64 %1419 to i8
  %1421 = and i8 %1420, 1
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1421, i8* %1422, align 1, !tbaa !2450
  %1423 = icmp eq i64 %1404, 0
  %1424 = zext i1 %1423 to i8
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1424, i8* %1425, align 1, !tbaa !2447
  %1426 = lshr i64 %1404, 63
  %1427 = trunc i64 %1426 to i8
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1427, i8* %1428, align 1, !tbaa !2448
  %1429 = lshr i64 %1400, 63
  %1430 = lshr i64 %1401, 63
  %1431 = xor i64 %1426, %1429
  %1432 = xor i64 %1426, %1430
  %1433 = add nuw nsw i64 %1431, %1432
  %1434 = icmp eq i64 %1433, 2
  %1435 = zext i1 %1434 to i8
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1435, i8* %1436, align 1, !tbaa !2449
  %1437 = load i64, i64* %RBP
  %1438 = sub i64 %1437, 192
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 7
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i32*
  %1442 = load i32, i32* %1441
  %1443 = sext i32 %1442 to i64
  store i64 %1443, i64* %RCX, align 8, !tbaa !2428
  %1444 = load i64, i64* %RAX
  %1445 = load i64, i64* %RCX
  %1446 = mul i64 %1445, 8
  %1447 = add i64 %1446, %1444
  %1448 = bitcast %union.vec128_t* %XMM0 to i8*
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 5
  store i64 %1450, i64* %PC
  %1451 = bitcast i8* %1448 to double*
  %1452 = load double, double* %1451, align 1
  %1453 = inttoptr i64 %1447 to double*
  store double %1452, double* %1453
  %1454 = load i64, i64* %RBP
  %1455 = sub i64 %1454, 160
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 7
  store i64 %1457, i64* %PC
  %1458 = inttoptr i64 %1455 to i64*
  %1459 = load i64, i64* %1458
  store i64 %1459, i64* %RAX, align 8, !tbaa !2428
  %1460 = load i64, i64* %RBP
  %1461 = sub i64 %1460, 196
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 7
  store i64 %1463, i64* %PC
  %1464 = inttoptr i64 %1461 to i32*
  %1465 = load i32, i32* %1464
  %1466 = sext i32 %1465 to i64
  store i64 %1466, i64* %RCX, align 8, !tbaa !2428
  %1467 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1468 = load i64, i64* %RAX
  %1469 = load i64, i64* %RCX
  %1470 = mul i64 %1469, 8
  %1471 = add i64 %1470, %1468
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 5
  store i64 %1473, i64* %PC
  %1474 = inttoptr i64 %1471 to double*
  %1475 = load double, double* %1474
  %1476 = bitcast i8* %1467 to double*
  store double %1475, double* %1476, align 1, !tbaa !2453
  %1477 = getelementptr inbounds i8, i8* %1467, i64 8
  %1478 = bitcast i8* %1477 to double*
  store double 0.000000e+00, double* %1478, align 1, !tbaa !2453
  %1479 = load i64, i64* %RBP
  %1480 = sub i64 %1479, 168
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 7
  store i64 %1482, i64* %PC
  %1483 = inttoptr i64 %1480 to i64*
  %1484 = load i64, i64* %1483
  store i64 %1484, i64* %RAX, align 8, !tbaa !2428
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 196
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 7
  store i64 %1488, i64* %PC
  %1489 = inttoptr i64 %1486 to i32*
  %1490 = load i32, i32* %1489
  %1491 = sext i32 %1490 to i64
  store i64 %1491, i64* %RCX, align 8, !tbaa !2428
  %1492 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1493 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1494 = load i64, i64* %RAX
  %1495 = load i64, i64* %RCX
  %1496 = mul i64 %1495, 8
  %1497 = add i64 %1496, %1494
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 5
  store i64 %1499, i64* %PC
  %1500 = bitcast i8* %1493 to double*
  %1501 = load double, double* %1500, align 1
  %1502 = getelementptr inbounds i8, i8* %1493, i64 8
  %1503 = bitcast i8* %1502 to i64*
  %1504 = load i64, i64* %1503, align 1
  %1505 = inttoptr i64 %1497 to double*
  %1506 = load double, double* %1505
  %1507 = fdiv double %1501, %1506
  %1508 = bitcast i8* %1492 to double*
  store double %1507, double* %1508, align 1, !tbaa !2453
  %1509 = getelementptr inbounds i8, i8* %1492, i64 8
  %1510 = bitcast i8* %1509 to i64*
  store i64 %1504, i64* %1510, align 1, !tbaa !2453
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 136
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 7
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i64*
  %1516 = load i64, i64* %1515
  store i64 %1516, i64* %RAX, align 8, !tbaa !2428
  %1517 = load i64, i64* %RBP
  %1518 = sub i64 %1517, 188
  %1519 = load i64, i64* %PC
  %1520 = add i64 %1519, 7
  store i64 %1520, i64* %PC
  %1521 = inttoptr i64 %1518 to i32*
  %1522 = load i32, i32* %1521
  %1523 = sext i32 %1522 to i64
  store i64 %1523, i64* %RCX, align 8, !tbaa !2428
  %1524 = load i64, i64* %RCX
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 7
  store i64 %1526, i64* %PC
  %1527 = sext i64 %1524 to i128
  %1528 = and i128 %1527, -18446744073709551616
  %1529 = zext i64 %1524 to i128
  %1530 = or i128 %1528, %1529
  %1531 = mul nsw i128 33800, %1530
  %1532 = trunc i128 %1531 to i64
  store i64 %1532, i64* %RCX, align 8, !tbaa !2428
  %1533 = sext i64 %1532 to i128
  %1534 = icmp ne i128 %1533, %1531
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1535, i8* %1536, align 1, !tbaa !2432
  %1537 = trunc i128 %1531 to i32
  %1538 = and i32 %1537, 255
  %1539 = call i32 @llvm.ctpop.i32(i32 %1538) #16
  %1540 = trunc i32 %1539 to i8
  %1541 = and i8 %1540, 1
  %1542 = xor i8 %1541, 1
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1542, i8* %1543, align 1, !tbaa !2446
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1544, align 1, !tbaa !2450
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1545, align 1, !tbaa !2447
  %1546 = lshr i64 %1532, 63
  %1547 = trunc i64 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1547, i8* %1548, align 1, !tbaa !2448
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1535, i8* %1549, align 1, !tbaa !2449
  %1550 = load i64, i64* %RAX
  %1551 = load i64, i64* %RCX
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 3
  store i64 %1553, i64* %PC
  %1554 = add i64 %1551, %1550
  store i64 %1554, i64* %RAX, align 8, !tbaa !2428
  %1555 = icmp ult i64 %1554, %1550
  %1556 = icmp ult i64 %1554, %1551
  %1557 = or i1 %1555, %1556
  %1558 = zext i1 %1557 to i8
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1558, i8* %1559, align 1, !tbaa !2432
  %1560 = trunc i64 %1554 to i32
  %1561 = and i32 %1560, 255
  %1562 = call i32 @llvm.ctpop.i32(i32 %1561) #16
  %1563 = trunc i32 %1562 to i8
  %1564 = and i8 %1563, 1
  %1565 = xor i8 %1564, 1
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1565, i8* %1566, align 1, !tbaa !2446
  %1567 = xor i64 %1551, %1550
  %1568 = xor i64 %1567, %1554
  %1569 = lshr i64 %1568, 4
  %1570 = trunc i64 %1569 to i8
  %1571 = and i8 %1570, 1
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1571, i8* %1572, align 1, !tbaa !2450
  %1573 = icmp eq i64 %1554, 0
  %1574 = zext i1 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1574, i8* %1575, align 1, !tbaa !2447
  %1576 = lshr i64 %1554, 63
  %1577 = trunc i64 %1576 to i8
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1577, i8* %1578, align 1, !tbaa !2448
  %1579 = lshr i64 %1550, 63
  %1580 = lshr i64 %1551, 63
  %1581 = xor i64 %1576, %1579
  %1582 = xor i64 %1576, %1580
  %1583 = add nuw nsw i64 %1581, %1582
  %1584 = icmp eq i64 %1583, 2
  %1585 = zext i1 %1584 to i8
  %1586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1585, i8* %1586, align 1, !tbaa !2449
  %1587 = load i64, i64* %RBP
  %1588 = sub i64 %1587, 52
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 4
  store i64 %1590, i64* %PC
  %1591 = inttoptr i64 %1588 to i32*
  %1592 = load i32, i32* %1591
  %1593 = sext i32 %1592 to i64
  store i64 %1593, i64* %RCX, align 8, !tbaa !2428
  %1594 = load i64, i64* %RCX
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 7
  store i64 %1596, i64* %PC
  %1597 = sext i64 %1594 to i128
  %1598 = and i128 %1597, -18446744073709551616
  %1599 = zext i64 %1594 to i128
  %1600 = or i128 %1598, %1599
  %1601 = mul nsw i128 520, %1600
  %1602 = trunc i128 %1601 to i64
  store i64 %1602, i64* %RCX, align 8, !tbaa !2428
  %1603 = sext i64 %1602 to i128
  %1604 = icmp ne i128 %1603, %1601
  %1605 = zext i1 %1604 to i8
  %1606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1605, i8* %1606, align 1, !tbaa !2432
  %1607 = trunc i128 %1601 to i32
  %1608 = and i32 %1607, 255
  %1609 = call i32 @llvm.ctpop.i32(i32 %1608) #16
  %1610 = trunc i32 %1609 to i8
  %1611 = and i8 %1610, 1
  %1612 = xor i8 %1611, 1
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1612, i8* %1613, align 1, !tbaa !2446
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1614, align 1, !tbaa !2450
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1615, align 1, !tbaa !2447
  %1616 = lshr i64 %1602, 63
  %1617 = trunc i64 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1617, i8* %1618, align 1, !tbaa !2448
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1605, i8* %1619, align 1, !tbaa !2449
  %1620 = load i64, i64* %RAX
  %1621 = load i64, i64* %RCX
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 3
  store i64 %1623, i64* %PC
  %1624 = add i64 %1621, %1620
  store i64 %1624, i64* %RAX, align 8, !tbaa !2428
  %1625 = icmp ult i64 %1624, %1620
  %1626 = icmp ult i64 %1624, %1621
  %1627 = or i1 %1625, %1626
  %1628 = zext i1 %1627 to i8
  %1629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1628, i8* %1629, align 1, !tbaa !2432
  %1630 = trunc i64 %1624 to i32
  %1631 = and i32 %1630, 255
  %1632 = call i32 @llvm.ctpop.i32(i32 %1631) #16
  %1633 = trunc i32 %1632 to i8
  %1634 = and i8 %1633, 1
  %1635 = xor i8 %1634, 1
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1635, i8* %1636, align 1, !tbaa !2446
  %1637 = xor i64 %1621, %1620
  %1638 = xor i64 %1637, %1624
  %1639 = lshr i64 %1638, 4
  %1640 = trunc i64 %1639 to i8
  %1641 = and i8 %1640, 1
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1641, i8* %1642, align 1, !tbaa !2450
  %1643 = icmp eq i64 %1624, 0
  %1644 = zext i1 %1643 to i8
  %1645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1644, i8* %1645, align 1, !tbaa !2447
  %1646 = lshr i64 %1624, 63
  %1647 = trunc i64 %1646 to i8
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1647, i8* %1648, align 1, !tbaa !2448
  %1649 = lshr i64 %1620, 63
  %1650 = lshr i64 %1621, 63
  %1651 = xor i64 %1646, %1649
  %1652 = xor i64 %1646, %1650
  %1653 = add nuw nsw i64 %1651, %1652
  %1654 = icmp eq i64 %1653, 2
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1655, i8* %1656, align 1, !tbaa !2449
  %1657 = load i64, i64* %RBP
  %1658 = sub i64 %1657, 196
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 7
  store i64 %1660, i64* %PC
  %1661 = inttoptr i64 %1658 to i32*
  %1662 = load i32, i32* %1661
  %1663 = sext i32 %1662 to i64
  store i64 %1663, i64* %RCX, align 8, !tbaa !2428
  %1664 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1665 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1666 = load i64, i64* %RAX
  %1667 = load i64, i64* %RCX
  %1668 = mul i64 %1667, 8
  %1669 = add i64 %1668, %1666
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 5
  store i64 %1671, i64* %PC
  %1672 = bitcast i8* %1665 to double*
  %1673 = load double, double* %1672, align 1
  %1674 = getelementptr inbounds i8, i8* %1665, i64 8
  %1675 = bitcast i8* %1674 to i64*
  %1676 = load i64, i64* %1675, align 1
  %1677 = inttoptr i64 %1669 to double*
  %1678 = load double, double* %1677
  %1679 = fmul double %1673, %1678
  %1680 = bitcast i8* %1664 to double*
  store double %1679, double* %1680, align 1, !tbaa !2453
  %1681 = getelementptr inbounds i8, i8* %1664, i64 8
  %1682 = bitcast i8* %1681 to i64*
  store i64 %1676, i64* %1682, align 1, !tbaa !2453
  %1683 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1684 = load i64, i64* %RBP
  %1685 = sub i64 %1684, 64
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 5
  store i64 %1687, i64* %PC
  %1688 = inttoptr i64 %1685 to double*
  %1689 = load double, double* %1688
  %1690 = bitcast i8* %1683 to double*
  store double %1689, double* %1690, align 1, !tbaa !2453
  %1691 = getelementptr inbounds i8, i8* %1683, i64 8
  %1692 = bitcast i8* %1691 to double*
  store double 0.000000e+00, double* %1692, align 1, !tbaa !2453
  %1693 = load i64, i64* %RBP
  %1694 = sub i64 %1693, 152
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 7
  store i64 %1696, i64* %PC
  %1697 = inttoptr i64 %1694 to i64*
  %1698 = load i64, i64* %1697
  store i64 %1698, i64* %RAX, align 8, !tbaa !2428
  %1699 = load i64, i64* %RBP
  %1700 = sub i64 %1699, 188
  %1701 = load i64, i64* %PC
  %1702 = add i64 %1701, 7
  store i64 %1702, i64* %PC
  %1703 = inttoptr i64 %1700 to i32*
  %1704 = load i32, i32* %1703
  %1705 = sext i32 %1704 to i64
  store i64 %1705, i64* %RCX, align 8, !tbaa !2428
  %1706 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1707 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1708 = load i64, i64* %RAX
  %1709 = load i64, i64* %RCX
  %1710 = mul i64 %1709, 8
  %1711 = add i64 %1710, %1708
  %1712 = load i64, i64* %PC
  %1713 = add i64 %1712, 5
  store i64 %1713, i64* %PC
  %1714 = bitcast i8* %1707 to double*
  %1715 = load double, double* %1714, align 1
  %1716 = getelementptr inbounds i8, i8* %1707, i64 8
  %1717 = bitcast i8* %1716 to i64*
  %1718 = load i64, i64* %1717, align 1
  %1719 = inttoptr i64 %1711 to double*
  %1720 = load double, double* %1719
  %1721 = fmul double %1715, %1720
  %1722 = bitcast i8* %1706 to double*
  store double %1721, double* %1722, align 1, !tbaa !2453
  %1723 = getelementptr inbounds i8, i8* %1706, i64 8
  %1724 = bitcast i8* %1723 to i64*
  store i64 %1718, i64* %1724, align 1, !tbaa !2453
  %1725 = load i64, i64* %RBP
  %1726 = sub i64 %1725, 168
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 7
  store i64 %1728, i64* %PC
  %1729 = inttoptr i64 %1726 to i64*
  %1730 = load i64, i64* %1729
  store i64 %1730, i64* %RAX, align 8, !tbaa !2428
  %1731 = load i64, i64* %RBP
  %1732 = sub i64 %1731, 196
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 7
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i32*
  %1736 = load i32, i32* %1735
  %1737 = sext i32 %1736 to i64
  store i64 %1737, i64* %RCX, align 8, !tbaa !2428
  %1738 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1740 = load i64, i64* %RAX
  %1741 = load i64, i64* %RCX
  %1742 = mul i64 %1741, 8
  %1743 = add i64 %1742, %1740
  %1744 = load i64, i64* %PC
  %1745 = add i64 %1744, 5
  store i64 %1745, i64* %PC
  %1746 = bitcast i8* %1739 to double*
  %1747 = load double, double* %1746, align 1
  %1748 = getelementptr inbounds i8, i8* %1739, i64 8
  %1749 = bitcast i8* %1748 to i64*
  %1750 = load i64, i64* %1749, align 1
  %1751 = inttoptr i64 %1743 to double*
  %1752 = load double, double* %1751
  %1753 = fdiv double %1747, %1752
  %1754 = bitcast i8* %1738 to double*
  store double %1753, double* %1754, align 1, !tbaa !2453
  %1755 = getelementptr inbounds i8, i8* %1738, i64 8
  %1756 = bitcast i8* %1755 to i64*
  store i64 %1750, i64* %1756, align 1, !tbaa !2453
  %1757 = load i64, i64* %RBP
  %1758 = sub i64 %1757, 104
  %1759 = load i64, i64* %PC
  %1760 = add i64 %1759, 4
  store i64 %1760, i64* %PC
  %1761 = inttoptr i64 %1758 to i64*
  %1762 = load i64, i64* %1761
  store i64 %1762, i64* %RAX, align 8, !tbaa !2428
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 188
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 7
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RCX, align 8, !tbaa !2428
  %1770 = load i64, i64* %RCX
  %1771 = load i64, i64* %PC
  %1772 = add i64 %1771, 7
  store i64 %1772, i64* %PC
  %1773 = sext i64 %1770 to i128
  %1774 = and i128 %1773, -18446744073709551616
  %1775 = zext i64 %1770 to i128
  %1776 = or i128 %1774, %1775
  %1777 = mul nsw i128 520, %1776
  %1778 = trunc i128 %1777 to i64
  store i64 %1778, i64* %RCX, align 8, !tbaa !2428
  %1779 = sext i64 %1778 to i128
  %1780 = icmp ne i128 %1779, %1777
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1781, i8* %1782, align 1, !tbaa !2432
  %1783 = trunc i128 %1777 to i32
  %1784 = and i32 %1783, 255
  %1785 = call i32 @llvm.ctpop.i32(i32 %1784) #16
  %1786 = trunc i32 %1785 to i8
  %1787 = and i8 %1786, 1
  %1788 = xor i8 %1787, 1
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1788, i8* %1789, align 1, !tbaa !2446
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1790, align 1, !tbaa !2450
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1791, align 1, !tbaa !2447
  %1792 = lshr i64 %1778, 63
  %1793 = trunc i64 %1792 to i8
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1793, i8* %1794, align 1, !tbaa !2448
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1781, i8* %1795, align 1, !tbaa !2449
  %1796 = load i64, i64* %RAX
  %1797 = load i64, i64* %RCX
  %1798 = load i64, i64* %PC
  %1799 = add i64 %1798, 3
  store i64 %1799, i64* %PC
  %1800 = add i64 %1797, %1796
  store i64 %1800, i64* %RAX, align 8, !tbaa !2428
  %1801 = icmp ult i64 %1800, %1796
  %1802 = icmp ult i64 %1800, %1797
  %1803 = or i1 %1801, %1802
  %1804 = zext i1 %1803 to i8
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1804, i8* %1805, align 1, !tbaa !2432
  %1806 = trunc i64 %1800 to i32
  %1807 = and i32 %1806, 255
  %1808 = call i32 @llvm.ctpop.i32(i32 %1807) #16
  %1809 = trunc i32 %1808 to i8
  %1810 = and i8 %1809, 1
  %1811 = xor i8 %1810, 1
  %1812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1811, i8* %1812, align 1, !tbaa !2446
  %1813 = xor i64 %1797, %1796
  %1814 = xor i64 %1813, %1800
  %1815 = lshr i64 %1814, 4
  %1816 = trunc i64 %1815 to i8
  %1817 = and i8 %1816, 1
  %1818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1817, i8* %1818, align 1, !tbaa !2450
  %1819 = icmp eq i64 %1800, 0
  %1820 = zext i1 %1819 to i8
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1820, i8* %1821, align 1, !tbaa !2447
  %1822 = lshr i64 %1800, 63
  %1823 = trunc i64 %1822 to i8
  %1824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1823, i8* %1824, align 1, !tbaa !2448
  %1825 = lshr i64 %1796, 63
  %1826 = lshr i64 %1797, 63
  %1827 = xor i64 %1822, %1825
  %1828 = xor i64 %1822, %1826
  %1829 = add nuw nsw i64 %1827, %1828
  %1830 = icmp eq i64 %1829, 2
  %1831 = zext i1 %1830 to i8
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1831, i8* %1832, align 1, !tbaa !2449
  %1833 = load i64, i64* %RBP
  %1834 = sub i64 %1833, 192
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 7
  store i64 %1836, i64* %PC
  %1837 = inttoptr i64 %1834 to i32*
  %1838 = load i32, i32* %1837
  %1839 = sext i32 %1838 to i64
  store i64 %1839, i64* %RCX, align 8, !tbaa !2428
  %1840 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1841 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1842 = load i64, i64* %RAX
  %1843 = load i64, i64* %RCX
  %1844 = mul i64 %1843, 8
  %1845 = add i64 %1844, %1842
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 5
  store i64 %1847, i64* %PC
  %1848 = bitcast i8* %1841 to double*
  %1849 = load double, double* %1848, align 1
  %1850 = getelementptr inbounds i8, i8* %1841, i64 8
  %1851 = bitcast i8* %1850 to i64*
  %1852 = load i64, i64* %1851, align 1
  %1853 = inttoptr i64 %1845 to double*
  %1854 = load double, double* %1853
  %1855 = fmul double %1849, %1854
  %1856 = bitcast i8* %1840 to double*
  store double %1855, double* %1856, align 1, !tbaa !2453
  %1857 = getelementptr inbounds i8, i8* %1840, i64 8
  %1858 = bitcast i8* %1857 to i64*
  store i64 %1852, i64* %1858, align 1, !tbaa !2453
  %1859 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1861 = bitcast %union.vec128_t* %XMM1 to i8*
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 4
  store i64 %1863, i64* %PC
  %1864 = bitcast i8* %1860 to double*
  %1865 = load double, double* %1864, align 1
  %1866 = getelementptr inbounds i8, i8* %1860, i64 8
  %1867 = bitcast i8* %1866 to i64*
  %1868 = load i64, i64* %1867, align 1
  %1869 = bitcast i8* %1861 to double*
  %1870 = load double, double* %1869, align 1
  %1871 = fadd double %1865, %1870
  %1872 = bitcast i8* %1859 to double*
  store double %1871, double* %1872, align 1, !tbaa !2453
  %1873 = getelementptr inbounds i8, i8* %1859, i64 8
  %1874 = bitcast i8* %1873 to i64*
  store i64 %1868, i64* %1874, align 1, !tbaa !2453
  %1875 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1876 = load i64, i64* %RBP
  %1877 = sub i64 %1876, 64
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 5
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1877 to double*
  %1881 = load double, double* %1880
  %1882 = bitcast i8* %1875 to double*
  store double %1881, double* %1882, align 1, !tbaa !2453
  %1883 = getelementptr inbounds i8, i8* %1875, i64 8
  %1884 = bitcast i8* %1883 to double*
  store double 0.000000e+00, double* %1884, align 1, !tbaa !2453
  %1885 = load i64, i64* %RBP
  %1886 = sub i64 %1885, 144
  %1887 = load i64, i64* %PC
  %1888 = add i64 %1887, 7
  store i64 %1888, i64* %PC
  %1889 = inttoptr i64 %1886 to i64*
  %1890 = load i64, i64* %1889
  store i64 %1890, i64* %RAX, align 8, !tbaa !2428
  %1891 = load i64, i64* %RBP
  %1892 = sub i64 %1891, 188
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 7
  store i64 %1894, i64* %PC
  %1895 = inttoptr i64 %1892 to i32*
  %1896 = load i32, i32* %1895
  %1897 = sext i32 %1896 to i64
  store i64 %1897, i64* %RCX, align 8, !tbaa !2428
  %1898 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1899 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1900 = load i64, i64* %RAX
  %1901 = load i64, i64* %RCX
  %1902 = mul i64 %1901, 8
  %1903 = add i64 %1902, %1900
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 5
  store i64 %1905, i64* %PC
  %1906 = bitcast i8* %1899 to double*
  %1907 = load double, double* %1906, align 1
  %1908 = getelementptr inbounds i8, i8* %1899, i64 8
  %1909 = bitcast i8* %1908 to i64*
  %1910 = load i64, i64* %1909, align 1
  %1911 = inttoptr i64 %1903 to double*
  %1912 = load double, double* %1911
  %1913 = fmul double %1907, %1912
  %1914 = bitcast i8* %1898 to double*
  store double %1913, double* %1914, align 1, !tbaa !2453
  %1915 = getelementptr inbounds i8, i8* %1898, i64 8
  %1916 = bitcast i8* %1915 to i64*
  store i64 %1910, i64* %1916, align 1, !tbaa !2453
  %1917 = load i64, i64* %RBP
  %1918 = sub i64 %1917, 168
  %1919 = load i64, i64* %PC
  %1920 = add i64 %1919, 7
  store i64 %1920, i64* %PC
  %1921 = inttoptr i64 %1918 to i64*
  %1922 = load i64, i64* %1921
  store i64 %1922, i64* %RAX, align 8, !tbaa !2428
  %1923 = load i64, i64* %RBP
  %1924 = sub i64 %1923, 196
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 7
  store i64 %1926, i64* %PC
  %1927 = inttoptr i64 %1924 to i32*
  %1928 = load i32, i32* %1927
  %1929 = sext i32 %1928 to i64
  store i64 %1929, i64* %RCX, align 8, !tbaa !2428
  %1930 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1931 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1932 = load i64, i64* %RAX
  %1933 = load i64, i64* %RCX
  %1934 = mul i64 %1933, 8
  %1935 = add i64 %1934, %1932
  %1936 = load i64, i64* %PC
  %1937 = add i64 %1936, 5
  store i64 %1937, i64* %PC
  %1938 = bitcast i8* %1931 to double*
  %1939 = load double, double* %1938, align 1
  %1940 = getelementptr inbounds i8, i8* %1931, i64 8
  %1941 = bitcast i8* %1940 to i64*
  %1942 = load i64, i64* %1941, align 1
  %1943 = inttoptr i64 %1935 to double*
  %1944 = load double, double* %1943
  %1945 = fdiv double %1939, %1944
  %1946 = bitcast i8* %1930 to double*
  store double %1945, double* %1946, align 1, !tbaa !2453
  %1947 = getelementptr inbounds i8, i8* %1930, i64 8
  %1948 = bitcast i8* %1947 to i64*
  store i64 %1942, i64* %1948, align 1, !tbaa !2453
  %1949 = load i64, i64* %RBP
  %1950 = sub i64 %1949, 112
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 4
  store i64 %1952, i64* %PC
  %1953 = inttoptr i64 %1950 to i64*
  %1954 = load i64, i64* %1953
  store i64 %1954, i64* %RAX, align 8, !tbaa !2428
  %1955 = load i64, i64* %RBP
  %1956 = sub i64 %1955, 188
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 7
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1956 to i32*
  %1960 = load i32, i32* %1959
  %1961 = sext i32 %1960 to i64
  store i64 %1961, i64* %RCX, align 8, !tbaa !2428
  %1962 = load i64, i64* %RCX
  %1963 = load i64, i64* %PC
  %1964 = add i64 %1963, 7
  store i64 %1964, i64* %PC
  %1965 = sext i64 %1962 to i128
  %1966 = and i128 %1965, -18446744073709551616
  %1967 = zext i64 %1962 to i128
  %1968 = or i128 %1966, %1967
  %1969 = mul nsw i128 33800, %1968
  %1970 = trunc i128 %1969 to i64
  store i64 %1970, i64* %RCX, align 8, !tbaa !2428
  %1971 = sext i64 %1970 to i128
  %1972 = icmp ne i128 %1971, %1969
  %1973 = zext i1 %1972 to i8
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1973, i8* %1974, align 1, !tbaa !2432
  %1975 = trunc i128 %1969 to i32
  %1976 = and i32 %1975, 255
  %1977 = call i32 @llvm.ctpop.i32(i32 %1976) #16
  %1978 = trunc i32 %1977 to i8
  %1979 = and i8 %1978, 1
  %1980 = xor i8 %1979, 1
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1980, i8* %1981, align 1, !tbaa !2446
  %1982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1982, align 1, !tbaa !2450
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1983, align 1, !tbaa !2447
  %1984 = lshr i64 %1970, 63
  %1985 = trunc i64 %1984 to i8
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1985, i8* %1986, align 1, !tbaa !2448
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1973, i8* %1987, align 1, !tbaa !2449
  %1988 = load i64, i64* %RAX
  %1989 = load i64, i64* %RCX
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 3
  store i64 %1991, i64* %PC
  %1992 = add i64 %1989, %1988
  store i64 %1992, i64* %RAX, align 8, !tbaa !2428
  %1993 = icmp ult i64 %1992, %1988
  %1994 = icmp ult i64 %1992, %1989
  %1995 = or i1 %1993, %1994
  %1996 = zext i1 %1995 to i8
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1996, i8* %1997, align 1, !tbaa !2432
  %1998 = trunc i64 %1992 to i32
  %1999 = and i32 %1998, 255
  %2000 = call i32 @llvm.ctpop.i32(i32 %1999) #16
  %2001 = trunc i32 %2000 to i8
  %2002 = and i8 %2001, 1
  %2003 = xor i8 %2002, 1
  %2004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2003, i8* %2004, align 1, !tbaa !2446
  %2005 = xor i64 %1989, %1988
  %2006 = xor i64 %2005, %1992
  %2007 = lshr i64 %2006, 4
  %2008 = trunc i64 %2007 to i8
  %2009 = and i8 %2008, 1
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2009, i8* %2010, align 1, !tbaa !2450
  %2011 = icmp eq i64 %1992, 0
  %2012 = zext i1 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2012, i8* %2013, align 1, !tbaa !2447
  %2014 = lshr i64 %1992, 63
  %2015 = trunc i64 %2014 to i8
  %2016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2015, i8* %2016, align 1, !tbaa !2448
  %2017 = lshr i64 %1988, 63
  %2018 = lshr i64 %1989, 63
  %2019 = xor i64 %2014, %2017
  %2020 = xor i64 %2014, %2018
  %2021 = add nuw nsw i64 %2019, %2020
  %2022 = icmp eq i64 %2021, 2
  %2023 = zext i1 %2022 to i8
  %2024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2023, i8* %2024, align 1, !tbaa !2449
  %2025 = load i64, i64* %RBP
  %2026 = sub i64 %2025, 52
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 4
  store i64 %2028, i64* %PC
  %2029 = inttoptr i64 %2026 to i32*
  %2030 = load i32, i32* %2029
  %2031 = sext i32 %2030 to i64
  store i64 %2031, i64* %RCX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RCX
  %2033 = load i64, i64* %PC
  %2034 = add i64 %2033, 7
  store i64 %2034, i64* %PC
  %2035 = sext i64 %2032 to i128
  %2036 = and i128 %2035, -18446744073709551616
  %2037 = zext i64 %2032 to i128
  %2038 = or i128 %2036, %2037
  %2039 = mul nsw i128 520, %2038
  %2040 = trunc i128 %2039 to i64
  store i64 %2040, i64* %RCX, align 8, !tbaa !2428
  %2041 = sext i64 %2040 to i128
  %2042 = icmp ne i128 %2041, %2039
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2043, i8* %2044, align 1, !tbaa !2432
  %2045 = trunc i128 %2039 to i32
  %2046 = and i32 %2045, 255
  %2047 = call i32 @llvm.ctpop.i32(i32 %2046) #16
  %2048 = trunc i32 %2047 to i8
  %2049 = and i8 %2048, 1
  %2050 = xor i8 %2049, 1
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2050, i8* %2051, align 1, !tbaa !2446
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2052, align 1, !tbaa !2450
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2053, align 1, !tbaa !2447
  %2054 = lshr i64 %2040, 63
  %2055 = trunc i64 %2054 to i8
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2055, i8* %2056, align 1, !tbaa !2448
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2043, i8* %2057, align 1, !tbaa !2449
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %RCX
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 3
  store i64 %2061, i64* %PC
  %2062 = add i64 %2059, %2058
  store i64 %2062, i64* %RAX, align 8, !tbaa !2428
  %2063 = icmp ult i64 %2062, %2058
  %2064 = icmp ult i64 %2062, %2059
  %2065 = or i1 %2063, %2064
  %2066 = zext i1 %2065 to i8
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2066, i8* %2067, align 1, !tbaa !2432
  %2068 = trunc i64 %2062 to i32
  %2069 = and i32 %2068, 255
  %2070 = call i32 @llvm.ctpop.i32(i32 %2069) #16
  %2071 = trunc i32 %2070 to i8
  %2072 = and i8 %2071, 1
  %2073 = xor i8 %2072, 1
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2073, i8* %2074, align 1, !tbaa !2446
  %2075 = xor i64 %2059, %2058
  %2076 = xor i64 %2075, %2062
  %2077 = lshr i64 %2076, 4
  %2078 = trunc i64 %2077 to i8
  %2079 = and i8 %2078, 1
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2079, i8* %2080, align 1, !tbaa !2450
  %2081 = icmp eq i64 %2062, 0
  %2082 = zext i1 %2081 to i8
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2082, i8* %2083, align 1, !tbaa !2447
  %2084 = lshr i64 %2062, 63
  %2085 = trunc i64 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2085, i8* %2086, align 1, !tbaa !2448
  %2087 = lshr i64 %2058, 63
  %2088 = lshr i64 %2059, 63
  %2089 = xor i64 %2084, %2087
  %2090 = xor i64 %2084, %2088
  %2091 = add nuw nsw i64 %2089, %2090
  %2092 = icmp eq i64 %2091, 2
  %2093 = zext i1 %2092 to i8
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2093, i8* %2094, align 1, !tbaa !2449
  %2095 = load i64, i64* %RBP
  %2096 = sub i64 %2095, 196
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 7
  store i64 %2098, i64* %PC
  %2099 = inttoptr i64 %2096 to i32*
  %2100 = load i32, i32* %2099
  %2101 = sext i32 %2100 to i64
  store i64 %2101, i64* %RCX, align 8, !tbaa !2428
  %2102 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2103 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2104 = load i64, i64* %RAX
  %2105 = load i64, i64* %RCX
  %2106 = mul i64 %2105, 8
  %2107 = add i64 %2106, %2104
  %2108 = load i64, i64* %PC
  %2109 = add i64 %2108, 5
  store i64 %2109, i64* %PC
  %2110 = bitcast i8* %2103 to double*
  %2111 = load double, double* %2110, align 1
  %2112 = getelementptr inbounds i8, i8* %2103, i64 8
  %2113 = bitcast i8* %2112 to i64*
  %2114 = load i64, i64* %2113, align 1
  %2115 = inttoptr i64 %2107 to double*
  %2116 = load double, double* %2115
  %2117 = fmul double %2111, %2116
  %2118 = bitcast i8* %2102 to double*
  store double %2117, double* %2118, align 1, !tbaa !2453
  %2119 = getelementptr inbounds i8, i8* %2102, i64 8
  %2120 = bitcast i8* %2119 to i64*
  store i64 %2114, i64* %2120, align 1, !tbaa !2453
  %2121 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2122 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2123 = bitcast %union.vec128_t* %XMM1 to i8*
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 4
  store i64 %2125, i64* %PC
  %2126 = bitcast i8* %2122 to double*
  %2127 = load double, double* %2126, align 1
  %2128 = getelementptr inbounds i8, i8* %2122, i64 8
  %2129 = bitcast i8* %2128 to i64*
  %2130 = load i64, i64* %2129, align 1
  %2131 = bitcast i8* %2123 to double*
  %2132 = load double, double* %2131, align 1
  %2133 = fsub double %2127, %2132
  %2134 = bitcast i8* %2121 to double*
  store double %2133, double* %2134, align 1, !tbaa !2453
  %2135 = getelementptr inbounds i8, i8* %2121, i64 8
  %2136 = bitcast i8* %2135 to i64*
  store i64 %2130, i64* %2136, align 1, !tbaa !2453
  %2137 = load i64, i64* %RBP
  %2138 = sub i64 %2137, 136
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 7
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2138 to i64*
  %2142 = load i64, i64* %2141
  store i64 %2142, i64* %RAX, align 8, !tbaa !2428
  %2143 = load i64, i64* %RBP
  %2144 = sub i64 %2143, 188
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 7
  store i64 %2146, i64* %PC
  %2147 = inttoptr i64 %2144 to i32*
  %2148 = load i32, i32* %2147
  %2149 = sext i32 %2148 to i64
  store i64 %2149, i64* %RCX, align 8, !tbaa !2428
  %2150 = load i64, i64* %RCX
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 7
  store i64 %2152, i64* %PC
  %2153 = sext i64 %2150 to i128
  %2154 = and i128 %2153, -18446744073709551616
  %2155 = zext i64 %2150 to i128
  %2156 = or i128 %2154, %2155
  %2157 = mul nsw i128 33800, %2156
  %2158 = trunc i128 %2157 to i64
  store i64 %2158, i64* %RCX, align 8, !tbaa !2428
  %2159 = sext i64 %2158 to i128
  %2160 = icmp ne i128 %2159, %2157
  %2161 = zext i1 %2160 to i8
  %2162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2161, i8* %2162, align 1, !tbaa !2432
  %2163 = trunc i128 %2157 to i32
  %2164 = and i32 %2163, 255
  %2165 = call i32 @llvm.ctpop.i32(i32 %2164) #16
  %2166 = trunc i32 %2165 to i8
  %2167 = and i8 %2166, 1
  %2168 = xor i8 %2167, 1
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2168, i8* %2169, align 1, !tbaa !2446
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2170, align 1, !tbaa !2450
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2171, align 1, !tbaa !2447
  %2172 = lshr i64 %2158, 63
  %2173 = trunc i64 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2173, i8* %2174, align 1, !tbaa !2448
  %2175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2161, i8* %2175, align 1, !tbaa !2449
  %2176 = load i64, i64* %RAX
  %2177 = load i64, i64* %RCX
  %2178 = load i64, i64* %PC
  %2179 = add i64 %2178, 3
  store i64 %2179, i64* %PC
  %2180 = add i64 %2177, %2176
  store i64 %2180, i64* %RAX, align 8, !tbaa !2428
  %2181 = icmp ult i64 %2180, %2176
  %2182 = icmp ult i64 %2180, %2177
  %2183 = or i1 %2181, %2182
  %2184 = zext i1 %2183 to i8
  %2185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2184, i8* %2185, align 1, !tbaa !2432
  %2186 = trunc i64 %2180 to i32
  %2187 = and i32 %2186, 255
  %2188 = call i32 @llvm.ctpop.i32(i32 %2187) #16
  %2189 = trunc i32 %2188 to i8
  %2190 = and i8 %2189, 1
  %2191 = xor i8 %2190, 1
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2191, i8* %2192, align 1, !tbaa !2446
  %2193 = xor i64 %2177, %2176
  %2194 = xor i64 %2193, %2180
  %2195 = lshr i64 %2194, 4
  %2196 = trunc i64 %2195 to i8
  %2197 = and i8 %2196, 1
  %2198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2197, i8* %2198, align 1, !tbaa !2450
  %2199 = icmp eq i64 %2180, 0
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2200, i8* %2201, align 1, !tbaa !2447
  %2202 = lshr i64 %2180, 63
  %2203 = trunc i64 %2202 to i8
  %2204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2203, i8* %2204, align 1, !tbaa !2448
  %2205 = lshr i64 %2176, 63
  %2206 = lshr i64 %2177, 63
  %2207 = xor i64 %2202, %2205
  %2208 = xor i64 %2202, %2206
  %2209 = add nuw nsw i64 %2207, %2208
  %2210 = icmp eq i64 %2209, 2
  %2211 = zext i1 %2210 to i8
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2211, i8* %2212, align 1, !tbaa !2449
  %2213 = load i64, i64* %RBP
  %2214 = sub i64 %2213, 52
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 4
  store i64 %2216, i64* %PC
  %2217 = inttoptr i64 %2214 to i32*
  %2218 = load i32, i32* %2217
  %2219 = sext i32 %2218 to i64
  store i64 %2219, i64* %RCX, align 8, !tbaa !2428
  %2220 = load i64, i64* %RCX
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 7
  store i64 %2222, i64* %PC
  %2223 = sext i64 %2220 to i128
  %2224 = and i128 %2223, -18446744073709551616
  %2225 = zext i64 %2220 to i128
  %2226 = or i128 %2224, %2225
  %2227 = mul nsw i128 520, %2226
  %2228 = trunc i128 %2227 to i64
  store i64 %2228, i64* %RCX, align 8, !tbaa !2428
  %2229 = sext i64 %2228 to i128
  %2230 = icmp ne i128 %2229, %2227
  %2231 = zext i1 %2230 to i8
  %2232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2231, i8* %2232, align 1, !tbaa !2432
  %2233 = trunc i128 %2227 to i32
  %2234 = and i32 %2233, 255
  %2235 = call i32 @llvm.ctpop.i32(i32 %2234) #16
  %2236 = trunc i32 %2235 to i8
  %2237 = and i8 %2236, 1
  %2238 = xor i8 %2237, 1
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2238, i8* %2239, align 1, !tbaa !2446
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2240, align 1, !tbaa !2450
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2241, align 1, !tbaa !2447
  %2242 = lshr i64 %2228, 63
  %2243 = trunc i64 %2242 to i8
  %2244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2243, i8* %2244, align 1, !tbaa !2448
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2231, i8* %2245, align 1, !tbaa !2449
  %2246 = load i64, i64* %RAX
  %2247 = load i64, i64* %RCX
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = add i64 %2247, %2246
  store i64 %2250, i64* %RAX, align 8, !tbaa !2428
  %2251 = icmp ult i64 %2250, %2246
  %2252 = icmp ult i64 %2250, %2247
  %2253 = or i1 %2251, %2252
  %2254 = zext i1 %2253 to i8
  %2255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2254, i8* %2255, align 1, !tbaa !2432
  %2256 = trunc i64 %2250 to i32
  %2257 = and i32 %2256, 255
  %2258 = call i32 @llvm.ctpop.i32(i32 %2257) #16
  %2259 = trunc i32 %2258 to i8
  %2260 = and i8 %2259, 1
  %2261 = xor i8 %2260, 1
  %2262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2261, i8* %2262, align 1, !tbaa !2446
  %2263 = xor i64 %2247, %2246
  %2264 = xor i64 %2263, %2250
  %2265 = lshr i64 %2264, 4
  %2266 = trunc i64 %2265 to i8
  %2267 = and i8 %2266, 1
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2267, i8* %2268, align 1, !tbaa !2450
  %2269 = icmp eq i64 %2250, 0
  %2270 = zext i1 %2269 to i8
  %2271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2270, i8* %2271, align 1, !tbaa !2447
  %2272 = lshr i64 %2250, 63
  %2273 = trunc i64 %2272 to i8
  %2274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2273, i8* %2274, align 1, !tbaa !2448
  %2275 = lshr i64 %2246, 63
  %2276 = lshr i64 %2247, 63
  %2277 = xor i64 %2272, %2275
  %2278 = xor i64 %2272, %2276
  %2279 = add nuw nsw i64 %2277, %2278
  %2280 = icmp eq i64 %2279, 2
  %2281 = zext i1 %2280 to i8
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2281, i8* %2282, align 1, !tbaa !2449
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 196
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 7
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2284 to i32*
  %2288 = load i32, i32* %2287
  %2289 = sext i32 %2288 to i64
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = load i64, i64* %RAX
  %2291 = load i64, i64* %RCX
  %2292 = mul i64 %2291, 8
  %2293 = add i64 %2292, %2290
  %2294 = bitcast %union.vec128_t* %XMM0 to i8*
  %2295 = load i64, i64* %PC
  %2296 = add i64 %2295, 5
  store i64 %2296, i64* %PC
  %2297 = bitcast i8* %2294 to double*
  %2298 = load double, double* %2297, align 1
  %2299 = inttoptr i64 %2293 to double*
  store double %2298, double* %2299
  %2300 = load i64, i64* %RBP
  %2301 = sub i64 %2300, 104
  %2302 = load i64, i64* %PC
  %2303 = add i64 %2302, 4
  store i64 %2303, i64* %PC
  %2304 = inttoptr i64 %2301 to i64*
  %2305 = load i64, i64* %2304
  store i64 %2305, i64* %RAX, align 8, !tbaa !2428
  %2306 = load i64, i64* %RBP
  %2307 = sub i64 %2306, 188
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 7
  store i64 %2309, i64* %PC
  %2310 = inttoptr i64 %2307 to i32*
  %2311 = load i32, i32* %2310
  %2312 = sext i32 %2311 to i64
  store i64 %2312, i64* %RCX, align 8, !tbaa !2428
  %2313 = load i64, i64* %RCX
  %2314 = load i64, i64* %PC
  %2315 = add i64 %2314, 7
  store i64 %2315, i64* %PC
  %2316 = sext i64 %2313 to i128
  %2317 = and i128 %2316, -18446744073709551616
  %2318 = zext i64 %2313 to i128
  %2319 = or i128 %2317, %2318
  %2320 = mul nsw i128 520, %2319
  %2321 = trunc i128 %2320 to i64
  store i64 %2321, i64* %RCX, align 8, !tbaa !2428
  %2322 = sext i64 %2321 to i128
  %2323 = icmp ne i128 %2322, %2320
  %2324 = zext i1 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2324, i8* %2325, align 1, !tbaa !2432
  %2326 = trunc i128 %2320 to i32
  %2327 = and i32 %2326, 255
  %2328 = call i32 @llvm.ctpop.i32(i32 %2327) #16
  %2329 = trunc i32 %2328 to i8
  %2330 = and i8 %2329, 1
  %2331 = xor i8 %2330, 1
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2331, i8* %2332, align 1, !tbaa !2446
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2333, align 1, !tbaa !2450
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2334, align 1, !tbaa !2447
  %2335 = lshr i64 %2321, 63
  %2336 = trunc i64 %2335 to i8
  %2337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2336, i8* %2337, align 1, !tbaa !2448
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2324, i8* %2338, align 1, !tbaa !2449
  %2339 = load i64, i64* %RAX
  %2340 = load i64, i64* %RCX
  %2341 = load i64, i64* %PC
  %2342 = add i64 %2341, 3
  store i64 %2342, i64* %PC
  %2343 = add i64 %2340, %2339
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = icmp ult i64 %2343, %2339
  %2345 = icmp ult i64 %2343, %2340
  %2346 = or i1 %2344, %2345
  %2347 = zext i1 %2346 to i8
  %2348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2347, i8* %2348, align 1, !tbaa !2432
  %2349 = trunc i64 %2343 to i32
  %2350 = and i32 %2349, 255
  %2351 = call i32 @llvm.ctpop.i32(i32 %2350) #16
  %2352 = trunc i32 %2351 to i8
  %2353 = and i8 %2352, 1
  %2354 = xor i8 %2353, 1
  %2355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2354, i8* %2355, align 1, !tbaa !2446
  %2356 = xor i64 %2340, %2339
  %2357 = xor i64 %2356, %2343
  %2358 = lshr i64 %2357, 4
  %2359 = trunc i64 %2358 to i8
  %2360 = and i8 %2359, 1
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2360, i8* %2361, align 1, !tbaa !2450
  %2362 = icmp eq i64 %2343, 0
  %2363 = zext i1 %2362 to i8
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2363, i8* %2364, align 1, !tbaa !2447
  %2365 = lshr i64 %2343, 63
  %2366 = trunc i64 %2365 to i8
  %2367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2366, i8* %2367, align 1, !tbaa !2448
  %2368 = lshr i64 %2339, 63
  %2369 = lshr i64 %2340, 63
  %2370 = xor i64 %2365, %2368
  %2371 = xor i64 %2365, %2369
  %2372 = add nuw nsw i64 %2370, %2371
  %2373 = icmp eq i64 %2372, 2
  %2374 = zext i1 %2373 to i8
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2374, i8* %2375, align 1, !tbaa !2449
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 192
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 7
  store i64 %2379, i64* %PC
  %2380 = inttoptr i64 %2377 to i32*
  %2381 = load i32, i32* %2380
  %2382 = sext i32 %2381 to i64
  store i64 %2382, i64* %RCX, align 8, !tbaa !2428
  %2383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2384 = load i64, i64* %RAX
  %2385 = load i64, i64* %RCX
  %2386 = mul i64 %2385, 8
  %2387 = add i64 %2386, %2384
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 5
  store i64 %2389, i64* %PC
  %2390 = inttoptr i64 %2387 to double*
  %2391 = load double, double* %2390
  %2392 = bitcast i8* %2383 to double*
  store double %2391, double* %2392, align 1, !tbaa !2453
  %2393 = getelementptr inbounds i8, i8* %2383, i64 8
  %2394 = bitcast i8* %2393 to double*
  store double 0.000000e+00, double* %2394, align 1, !tbaa !2453
  %2395 = load i64, i64* %RBP
  %2396 = sub i64 %2395, 112
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 4
  store i64 %2398, i64* %PC
  %2399 = inttoptr i64 %2396 to i64*
  %2400 = load i64, i64* %2399
  store i64 %2400, i64* %RAX, align 8, !tbaa !2428
  %2401 = load i64, i64* %RBP
  %2402 = sub i64 %2401, 188
  %2403 = load i64, i64* %PC
  %2404 = add i64 %2403, 7
  store i64 %2404, i64* %PC
  %2405 = inttoptr i64 %2402 to i32*
  %2406 = load i32, i32* %2405
  %2407 = sext i32 %2406 to i64
  store i64 %2407, i64* %RCX, align 8, !tbaa !2428
  %2408 = load i64, i64* %RCX
  %2409 = load i64, i64* %PC
  %2410 = add i64 %2409, 7
  store i64 %2410, i64* %PC
  %2411 = sext i64 %2408 to i128
  %2412 = and i128 %2411, -18446744073709551616
  %2413 = zext i64 %2408 to i128
  %2414 = or i128 %2412, %2413
  %2415 = mul nsw i128 33800, %2414
  %2416 = trunc i128 %2415 to i64
  store i64 %2416, i64* %RCX, align 8, !tbaa !2428
  %2417 = sext i64 %2416 to i128
  %2418 = icmp ne i128 %2417, %2415
  %2419 = zext i1 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2419, i8* %2420, align 1, !tbaa !2432
  %2421 = trunc i128 %2415 to i32
  %2422 = and i32 %2421, 255
  %2423 = call i32 @llvm.ctpop.i32(i32 %2422) #16
  %2424 = trunc i32 %2423 to i8
  %2425 = and i8 %2424, 1
  %2426 = xor i8 %2425, 1
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2426, i8* %2427, align 1, !tbaa !2446
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2428, align 1, !tbaa !2450
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2429, align 1, !tbaa !2447
  %2430 = lshr i64 %2416, 63
  %2431 = trunc i64 %2430 to i8
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2431, i8* %2432, align 1, !tbaa !2448
  %2433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2419, i8* %2433, align 1, !tbaa !2449
  %2434 = load i64, i64* %RAX
  %2435 = load i64, i64* %RCX
  %2436 = load i64, i64* %PC
  %2437 = add i64 %2436, 3
  store i64 %2437, i64* %PC
  %2438 = add i64 %2435, %2434
  store i64 %2438, i64* %RAX, align 8, !tbaa !2428
  %2439 = icmp ult i64 %2438, %2434
  %2440 = icmp ult i64 %2438, %2435
  %2441 = or i1 %2439, %2440
  %2442 = zext i1 %2441 to i8
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2442, i8* %2443, align 1, !tbaa !2432
  %2444 = trunc i64 %2438 to i32
  %2445 = and i32 %2444, 255
  %2446 = call i32 @llvm.ctpop.i32(i32 %2445) #16
  %2447 = trunc i32 %2446 to i8
  %2448 = and i8 %2447, 1
  %2449 = xor i8 %2448, 1
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2449, i8* %2450, align 1, !tbaa !2446
  %2451 = xor i64 %2435, %2434
  %2452 = xor i64 %2451, %2438
  %2453 = lshr i64 %2452, 4
  %2454 = trunc i64 %2453 to i8
  %2455 = and i8 %2454, 1
  %2456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2455, i8* %2456, align 1, !tbaa !2450
  %2457 = icmp eq i64 %2438, 0
  %2458 = zext i1 %2457 to i8
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2458, i8* %2459, align 1, !tbaa !2447
  %2460 = lshr i64 %2438, 63
  %2461 = trunc i64 %2460 to i8
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2461, i8* %2462, align 1, !tbaa !2448
  %2463 = lshr i64 %2434, 63
  %2464 = lshr i64 %2435, 63
  %2465 = xor i64 %2460, %2463
  %2466 = xor i64 %2460, %2464
  %2467 = add nuw nsw i64 %2465, %2466
  %2468 = icmp eq i64 %2467, 2
  %2469 = zext i1 %2468 to i8
  %2470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2469, i8* %2470, align 1, !tbaa !2449
  %2471 = load i64, i64* %RBP
  %2472 = sub i64 %2471, 52
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 4
  store i64 %2474, i64* %PC
  %2475 = inttoptr i64 %2472 to i32*
  %2476 = load i32, i32* %2475
  %2477 = sext i32 %2476 to i64
  store i64 %2477, i64* %RCX, align 8, !tbaa !2428
  %2478 = load i64, i64* %RCX
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 7
  store i64 %2480, i64* %PC
  %2481 = sext i64 %2478 to i128
  %2482 = and i128 %2481, -18446744073709551616
  %2483 = zext i64 %2478 to i128
  %2484 = or i128 %2482, %2483
  %2485 = mul nsw i128 520, %2484
  %2486 = trunc i128 %2485 to i64
  store i64 %2486, i64* %RCX, align 8, !tbaa !2428
  %2487 = sext i64 %2486 to i128
  %2488 = icmp ne i128 %2487, %2485
  %2489 = zext i1 %2488 to i8
  %2490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2489, i8* %2490, align 1, !tbaa !2432
  %2491 = trunc i128 %2485 to i32
  %2492 = and i32 %2491, 255
  %2493 = call i32 @llvm.ctpop.i32(i32 %2492) #16
  %2494 = trunc i32 %2493 to i8
  %2495 = and i8 %2494, 1
  %2496 = xor i8 %2495, 1
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2496, i8* %2497, align 1, !tbaa !2446
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2498, align 1, !tbaa !2450
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2499, align 1, !tbaa !2447
  %2500 = lshr i64 %2486, 63
  %2501 = trunc i64 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2501, i8* %2502, align 1, !tbaa !2448
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2489, i8* %2503, align 1, !tbaa !2449
  %2504 = load i64, i64* %RAX
  %2505 = load i64, i64* %RCX
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 3
  store i64 %2507, i64* %PC
  %2508 = add i64 %2505, %2504
  store i64 %2508, i64* %RAX, align 8, !tbaa !2428
  %2509 = icmp ult i64 %2508, %2504
  %2510 = icmp ult i64 %2508, %2505
  %2511 = or i1 %2509, %2510
  %2512 = zext i1 %2511 to i8
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2512, i8* %2513, align 1, !tbaa !2432
  %2514 = trunc i64 %2508 to i32
  %2515 = and i32 %2514, 255
  %2516 = call i32 @llvm.ctpop.i32(i32 %2515) #16
  %2517 = trunc i32 %2516 to i8
  %2518 = and i8 %2517, 1
  %2519 = xor i8 %2518, 1
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2519, i8* %2520, align 1, !tbaa !2446
  %2521 = xor i64 %2505, %2504
  %2522 = xor i64 %2521, %2508
  %2523 = lshr i64 %2522, 4
  %2524 = trunc i64 %2523 to i8
  %2525 = and i8 %2524, 1
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2525, i8* %2526, align 1, !tbaa !2450
  %2527 = icmp eq i64 %2508, 0
  %2528 = zext i1 %2527 to i8
  %2529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2528, i8* %2529, align 1, !tbaa !2447
  %2530 = lshr i64 %2508, 63
  %2531 = trunc i64 %2530 to i8
  %2532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2531, i8* %2532, align 1, !tbaa !2448
  %2533 = lshr i64 %2504, 63
  %2534 = lshr i64 %2505, 63
  %2535 = xor i64 %2530, %2533
  %2536 = xor i64 %2530, %2534
  %2537 = add nuw nsw i64 %2535, %2536
  %2538 = icmp eq i64 %2537, 2
  %2539 = zext i1 %2538 to i8
  %2540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2539, i8* %2540, align 1, !tbaa !2449
  %2541 = load i64, i64* %RBP
  %2542 = sub i64 %2541, 196
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 7
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2542 to i32*
  %2546 = load i32, i32* %2545
  %2547 = sext i32 %2546 to i64
  store i64 %2547, i64* %RCX, align 8, !tbaa !2428
  %2548 = load i64, i64* %RAX
  %2549 = load i64, i64* %RCX
  %2550 = mul i64 %2549, 8
  %2551 = add i64 %2550, %2548
  %2552 = bitcast %union.vec128_t* %XMM0 to i8*
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 5
  store i64 %2554, i64* %PC
  %2555 = bitcast i8* %2552 to double*
  %2556 = load double, double* %2555, align 1
  %2557 = inttoptr i64 %2551 to double*
  store double %2556, double* %2557
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 196
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 6
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  %2563 = load i32, i32* %2562
  %2564 = zext i32 %2563 to i64
  store i64 %2564, i64* %RAX, align 8, !tbaa !2428
  %2565 = load i64, i64* %RAX
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 3
  store i64 %2567, i64* %PC
  %2568 = trunc i64 %2565 to i32
  %2569 = add i32 1, %2568
  %2570 = zext i32 %2569 to i64
  store i64 %2570, i64* %RAX, align 8, !tbaa !2428
  %2571 = icmp ult i32 %2569, %2568
  %2572 = icmp ult i32 %2569, 1
  %2573 = or i1 %2571, %2572
  %2574 = zext i1 %2573 to i8
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2574, i8* %2575, align 1, !tbaa !2432
  %2576 = and i32 %2569, 255
  %2577 = call i32 @llvm.ctpop.i32(i32 %2576) #16
  %2578 = trunc i32 %2577 to i8
  %2579 = and i8 %2578, 1
  %2580 = xor i8 %2579, 1
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2580, i8* %2581, align 1, !tbaa !2446
  %2582 = xor i64 1, %2565
  %2583 = trunc i64 %2582 to i32
  %2584 = xor i32 %2583, %2569
  %2585 = lshr i32 %2584, 4
  %2586 = trunc i32 %2585 to i8
  %2587 = and i8 %2586, 1
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2587, i8* %2588, align 1, !tbaa !2450
  %2589 = icmp eq i32 %2569, 0
  %2590 = zext i1 %2589 to i8
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2590, i8* %2591, align 1, !tbaa !2447
  %2592 = lshr i32 %2569, 31
  %2593 = trunc i32 %2592 to i8
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2593, i8* %2594, align 1, !tbaa !2448
  %2595 = lshr i32 %2568, 31
  %2596 = xor i32 %2592, %2595
  %2597 = add nuw nsw i32 %2596, %2592
  %2598 = icmp eq i32 %2597, 2
  %2599 = zext i1 %2598 to i8
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2599, i8* %2600, align 1, !tbaa !2449
  %2601 = load i64, i64* %RBP
  %2602 = sub i64 %2601, 196
  %2603 = load i32, i32* %EAX
  %2604 = zext i32 %2603 to i64
  %2605 = load i64, i64* %PC
  %2606 = add i64 %2605, 6
  store i64 %2606, i64* %PC
  %2607 = inttoptr i64 %2602 to i32*
  store i32 %2603, i32* %2607
  %2608 = load i64, i64* %PC
  %2609 = sub i64 %2608, 813
  %2610 = load i64, i64* %PC
  %2611 = add i64 %2610, 5
  store i64 %2611, i64* %PC
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2609, i64* %2612, align 8, !tbaa !2428
  br label %block_4029d0

block_402ffb:                                     ; preds = %block_402331
  %2613 = load i64, i64* %RSP
  %2614 = load i64, i64* %PC
  %2615 = add i64 %2614, 4
  store i64 %2615, i64* %PC
  %2616 = add i64 56, %2613
  store i64 %2616, i64* %RSP, align 8, !tbaa !2428
  %2617 = icmp ult i64 %2616, %2613
  %2618 = icmp ult i64 %2616, 56
  %2619 = or i1 %2617, %2618
  %2620 = zext i1 %2619 to i8
  %2621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2620, i8* %2621, align 1, !tbaa !2432
  %2622 = trunc i64 %2616 to i32
  %2623 = and i32 %2622, 255
  %2624 = call i32 @llvm.ctpop.i32(i32 %2623) #16
  %2625 = trunc i32 %2624 to i8
  %2626 = and i8 %2625, 1
  %2627 = xor i8 %2626, 1
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2627, i8* %2628, align 1, !tbaa !2446
  %2629 = xor i64 56, %2613
  %2630 = xor i64 %2629, %2616
  %2631 = lshr i64 %2630, 4
  %2632 = trunc i64 %2631 to i8
  %2633 = and i8 %2632, 1
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2633, i8* %2634, align 1, !tbaa !2450
  %2635 = icmp eq i64 %2616, 0
  %2636 = zext i1 %2635 to i8
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2636, i8* %2637, align 1, !tbaa !2447
  %2638 = lshr i64 %2616, 63
  %2639 = trunc i64 %2638 to i8
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2639, i8* %2640, align 1, !tbaa !2448
  %2641 = lshr i64 %2613, 63
  %2642 = xor i64 %2638, %2641
  %2643 = add nuw nsw i64 %2642, %2638
  %2644 = icmp eq i64 %2643, 2
  %2645 = zext i1 %2644 to i8
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2645, i8* %2646, align 1, !tbaa !2449
  %2647 = load i64, i64* %PC
  %2648 = add i64 %2647, 1
  store i64 %2648, i64* %PC
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2650 = load i64, i64* %2649, align 8, !tbaa !2428
  %2651 = add i64 %2650, 8
  %2652 = inttoptr i64 %2650 to i64*
  %2653 = load i64, i64* %2652
  store i64 %2653, i64* %RBX, align 8, !tbaa !2428
  store i64 %2651, i64* %2649, align 8, !tbaa !2428
  %2654 = load i64, i64* %PC
  %2655 = add i64 %2654, 2
  store i64 %2655, i64* %PC
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2657 = load i64, i64* %2656, align 8, !tbaa !2428
  %2658 = add i64 %2657, 8
  %2659 = inttoptr i64 %2657 to i64*
  %2660 = load i64, i64* %2659
  store i64 %2660, i64* %R12, align 8, !tbaa !2428
  store i64 %2658, i64* %2656, align 8, !tbaa !2428
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 2
  store i64 %2662, i64* %PC
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2664 = load i64, i64* %2663, align 8, !tbaa !2428
  %2665 = add i64 %2664, 8
  %2666 = inttoptr i64 %2664 to i64*
  %2667 = load i64, i64* %2666
  store i64 %2667, i64* %R13, align 8, !tbaa !2428
  store i64 %2665, i64* %2663, align 8, !tbaa !2428
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 2
  store i64 %2669, i64* %PC
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2671 = load i64, i64* %2670, align 8, !tbaa !2428
  %2672 = add i64 %2671, 8
  %2673 = inttoptr i64 %2671 to i64*
  %2674 = load i64, i64* %2673
  store i64 %2674, i64* %R14, align 8, !tbaa !2428
  store i64 %2672, i64* %2670, align 8, !tbaa !2428
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 2
  store i64 %2676, i64* %PC
  %2677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2678 = load i64, i64* %2677, align 8, !tbaa !2428
  %2679 = add i64 %2678, 8
  %2680 = inttoptr i64 %2678 to i64*
  %2681 = load i64, i64* %2680
  store i64 %2681, i64* %R15, align 8, !tbaa !2428
  store i64 %2679, i64* %2677, align 8, !tbaa !2428
  %2682 = load i64, i64* %PC
  %2683 = add i64 %2682, 1
  store i64 %2683, i64* %PC
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2685 = load i64, i64* %2684, align 8, !tbaa !2428
  %2686 = add i64 %2685, 8
  %2687 = inttoptr i64 %2685 to i64*
  %2688 = load i64, i64* %2687
  store i64 %2688, i64* %RBP, align 8, !tbaa !2428
  store i64 %2686, i64* %2684, align 8, !tbaa !2428
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 1
  store i64 %2690, i64* %PC
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2693 = load i64, i64* %2692, align 8, !tbaa !2428
  %2694 = inttoptr i64 %2693 to i64*
  %2695 = load i64, i64* %2694
  store i64 %2695, i64* %2691, align 8, !tbaa !2428
  %2696 = add i64 %2693, 8
  store i64 %2696, i64* %2692, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402359:                                     ; preds = %block_40234a
  %2697 = load i64, i64* %RBP
  %2698 = sub i64 %2697, 196
  %2699 = load i64, i64* %PC
  %2700 = add i64 %2699, 10
  store i64 %2700, i64* %PC
  %2701 = inttoptr i64 %2698 to i32*
  store i32 0, i32* %2701
  br label %block_402363

block_4026c3:                                     ; preds = %block_402363
  %2702 = sub i64 %5290, 48
  %2703 = load i64, i64* %PC
  %2704 = add i64 %2703, 4
  store i64 %2704, i64* %PC
  %2705 = inttoptr i64 %2702 to i32*
  %2706 = load i32, i32* %2705
  %2707 = sext i32 %2706 to i64
  store i64 %2707, i64* %RCX, align 8, !tbaa !2428
  %2708 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2709 = load i64, i64* %RAX
  %2710 = load i64, i64* %RCX
  %2711 = mul i64 %2710, 8
  %2712 = add i64 %2711, %2709
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 5
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to double*
  %2716 = load double, double* %2715
  %2717 = bitcast i8* %2708 to double*
  store double %2716, double* %2717, align 1, !tbaa !2453
  %2718 = getelementptr inbounds i8, i8* %2708, i64 8
  %2719 = bitcast i8* %2718 to double*
  store double 0.000000e+00, double* %2719, align 1, !tbaa !2453
  %2720 = load i64, i64* %RBP
  %2721 = sub i64 %2720, 120
  %2722 = load i64, i64* %PC
  %2723 = add i64 %2722, 4
  store i64 %2723, i64* %PC
  %2724 = inttoptr i64 %2721 to i64*
  %2725 = load i64, i64* %2724
  store i64 %2725, i64* %RAX, align 8, !tbaa !2428
  %2726 = load i64, i64* %RBP
  %2727 = sub i64 %2726, 188
  %2728 = load i64, i64* %PC
  %2729 = add i64 %2728, 7
  store i64 %2729, i64* %PC
  %2730 = inttoptr i64 %2727 to i32*
  %2731 = load i32, i32* %2730
  %2732 = sext i32 %2731 to i64
  store i64 %2732, i64* %RCX, align 8, !tbaa !2428
  %2733 = load i64, i64* %RCX
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 7
  store i64 %2735, i64* %PC
  %2736 = sext i64 %2733 to i128
  %2737 = and i128 %2736, -18446744073709551616
  %2738 = zext i64 %2733 to i128
  %2739 = or i128 %2737, %2738
  %2740 = mul nsw i128 33800, %2739
  %2741 = trunc i128 %2740 to i64
  store i64 %2741, i64* %RCX, align 8, !tbaa !2428
  %2742 = sext i64 %2741 to i128
  %2743 = icmp ne i128 %2742, %2740
  %2744 = zext i1 %2743 to i8
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2744, i8* %2745, align 1, !tbaa !2432
  %2746 = trunc i128 %2740 to i32
  %2747 = and i32 %2746, 255
  %2748 = call i32 @llvm.ctpop.i32(i32 %2747) #16
  %2749 = trunc i32 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = xor i8 %2750, 1
  %2752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2751, i8* %2752, align 1, !tbaa !2446
  %2753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2753, align 1, !tbaa !2450
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2754, align 1, !tbaa !2447
  %2755 = lshr i64 %2741, 63
  %2756 = trunc i64 %2755 to i8
  %2757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2756, i8* %2757, align 1, !tbaa !2448
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2744, i8* %2758, align 1, !tbaa !2449
  %2759 = load i64, i64* %RAX
  %2760 = load i64, i64* %RCX
  %2761 = load i64, i64* %PC
  %2762 = add i64 %2761, 3
  store i64 %2762, i64* %PC
  %2763 = add i64 %2760, %2759
  store i64 %2763, i64* %RAX, align 8, !tbaa !2428
  %2764 = icmp ult i64 %2763, %2759
  %2765 = icmp ult i64 %2763, %2760
  %2766 = or i1 %2764, %2765
  %2767 = zext i1 %2766 to i8
  %2768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2767, i8* %2768, align 1, !tbaa !2432
  %2769 = trunc i64 %2763 to i32
  %2770 = and i32 %2769, 255
  %2771 = call i32 @llvm.ctpop.i32(i32 %2770) #16
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  %2774 = xor i8 %2773, 1
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2774, i8* %2775, align 1, !tbaa !2446
  %2776 = xor i64 %2760, %2759
  %2777 = xor i64 %2776, %2763
  %2778 = lshr i64 %2777, 4
  %2779 = trunc i64 %2778 to i8
  %2780 = and i8 %2779, 1
  %2781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2780, i8* %2781, align 1, !tbaa !2450
  %2782 = icmp eq i64 %2763, 0
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2783, i8* %2784, align 1, !tbaa !2447
  %2785 = lshr i64 %2763, 63
  %2786 = trunc i64 %2785 to i8
  %2787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2786, i8* %2787, align 1, !tbaa !2448
  %2788 = lshr i64 %2759, 63
  %2789 = lshr i64 %2760, 63
  %2790 = xor i64 %2785, %2788
  %2791 = xor i64 %2785, %2789
  %2792 = add nuw nsw i64 %2790, %2791
  %2793 = icmp eq i64 %2792, 2
  %2794 = zext i1 %2793 to i8
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2794, i8* %2795, align 1, !tbaa !2449
  %2796 = load i64, i64* %RBP
  %2797 = sub i64 %2796, 192
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 6
  store i64 %2799, i64* %PC
  %2800 = inttoptr i64 %2797 to i32*
  %2801 = load i32, i32* %2800
  %2802 = zext i32 %2801 to i64
  store i64 %2802, i64* %RDX, align 8, !tbaa !2428
  %2803 = load i64, i64* %RDX
  %2804 = load i64, i64* %PC
  %2805 = add i64 %2804, 3
  store i64 %2805, i64* %PC
  %2806 = trunc i64 %2803 to i32
  %2807 = add i32 1, %2806
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RDX, align 8, !tbaa !2428
  %2809 = icmp ult i32 %2807, %2806
  %2810 = icmp ult i32 %2807, 1
  %2811 = or i1 %2809, %2810
  %2812 = zext i1 %2811 to i8
  %2813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2812, i8* %2813, align 1, !tbaa !2432
  %2814 = and i32 %2807, 255
  %2815 = call i32 @llvm.ctpop.i32(i32 %2814) #16
  %2816 = trunc i32 %2815 to i8
  %2817 = and i8 %2816, 1
  %2818 = xor i8 %2817, 1
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2818, i8* %2819, align 1, !tbaa !2446
  %2820 = xor i64 1, %2803
  %2821 = trunc i64 %2820 to i32
  %2822 = xor i32 %2821, %2807
  %2823 = lshr i32 %2822, 4
  %2824 = trunc i32 %2823 to i8
  %2825 = and i8 %2824, 1
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2825, i8* %2826, align 1, !tbaa !2450
  %2827 = icmp eq i32 %2807, 0
  %2828 = zext i1 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2828, i8* %2829, align 1, !tbaa !2447
  %2830 = lshr i32 %2807, 31
  %2831 = trunc i32 %2830 to i8
  %2832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2831, i8* %2832, align 1, !tbaa !2448
  %2833 = lshr i32 %2806, 31
  %2834 = xor i32 %2830, %2833
  %2835 = add nuw nsw i32 %2834, %2830
  %2836 = icmp eq i32 %2835, 2
  %2837 = zext i1 %2836 to i8
  %2838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2837, i8* %2838, align 1, !tbaa !2449
  %2839 = load i32, i32* %EDX
  %2840 = zext i32 %2839 to i64
  %2841 = load i64, i64* %PC
  %2842 = add i64 %2841, 3
  store i64 %2842, i64* %PC
  %2843 = shl i64 %2840, 32
  %2844 = ashr exact i64 %2843, 32
  store i64 %2844, i64* %RCX, align 8, !tbaa !2428
  %2845 = load i64, i64* %RCX
  %2846 = load i64, i64* %PC
  %2847 = add i64 %2846, 7
  store i64 %2847, i64* %PC
  %2848 = sext i64 %2845 to i128
  %2849 = and i128 %2848, -18446744073709551616
  %2850 = zext i64 %2845 to i128
  %2851 = or i128 %2849, %2850
  %2852 = mul nsw i128 520, %2851
  %2853 = trunc i128 %2852 to i64
  store i64 %2853, i64* %RCX, align 8, !tbaa !2428
  %2854 = sext i64 %2853 to i128
  %2855 = icmp ne i128 %2854, %2852
  %2856 = zext i1 %2855 to i8
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2856, i8* %2857, align 1, !tbaa !2432
  %2858 = trunc i128 %2852 to i32
  %2859 = and i32 %2858, 255
  %2860 = call i32 @llvm.ctpop.i32(i32 %2859) #16
  %2861 = trunc i32 %2860 to i8
  %2862 = and i8 %2861, 1
  %2863 = xor i8 %2862, 1
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2863, i8* %2864, align 1, !tbaa !2446
  %2865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2865, align 1, !tbaa !2450
  %2866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2866, align 1, !tbaa !2447
  %2867 = lshr i64 %2853, 63
  %2868 = trunc i64 %2867 to i8
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2868, i8* %2869, align 1, !tbaa !2448
  %2870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2856, i8* %2870, align 1, !tbaa !2449
  %2871 = load i64, i64* %RAX
  %2872 = load i64, i64* %RCX
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 3
  store i64 %2874, i64* %PC
  %2875 = add i64 %2872, %2871
  store i64 %2875, i64* %RAX, align 8, !tbaa !2428
  %2876 = icmp ult i64 %2875, %2871
  %2877 = icmp ult i64 %2875, %2872
  %2878 = or i1 %2876, %2877
  %2879 = zext i1 %2878 to i8
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2879, i8* %2880, align 1, !tbaa !2432
  %2881 = trunc i64 %2875 to i32
  %2882 = and i32 %2881, 255
  %2883 = call i32 @llvm.ctpop.i32(i32 %2882) #16
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = xor i8 %2885, 1
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2886, i8* %2887, align 1, !tbaa !2446
  %2888 = xor i64 %2872, %2871
  %2889 = xor i64 %2888, %2875
  %2890 = lshr i64 %2889, 4
  %2891 = trunc i64 %2890 to i8
  %2892 = and i8 %2891, 1
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2892, i8* %2893, align 1, !tbaa !2450
  %2894 = icmp eq i64 %2875, 0
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2895, i8* %2896, align 1, !tbaa !2447
  %2897 = lshr i64 %2875, 63
  %2898 = trunc i64 %2897 to i8
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2898, i8* %2899, align 1, !tbaa !2448
  %2900 = lshr i64 %2871, 63
  %2901 = lshr i64 %2872, 63
  %2902 = xor i64 %2897, %2900
  %2903 = xor i64 %2897, %2901
  %2904 = add nuw nsw i64 %2902, %2903
  %2905 = icmp eq i64 %2904, 2
  %2906 = zext i1 %2905 to i8
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2906, i8* %2907, align 1, !tbaa !2449
  %2908 = load i64, i64* %RBP
  %2909 = sub i64 %2908, 48
  %2910 = load i64, i64* %PC
  %2911 = add i64 %2910, 4
  store i64 %2911, i64* %PC
  %2912 = inttoptr i64 %2909 to i32*
  %2913 = load i32, i32* %2912
  %2914 = sext i32 %2913 to i64
  store i64 %2914, i64* %RCX, align 8, !tbaa !2428
  %2915 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2916 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2917 = load i64, i64* %RAX
  %2918 = load i64, i64* %RCX
  %2919 = mul i64 %2918, 8
  %2920 = add i64 %2919, %2917
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 5
  store i64 %2922, i64* %PC
  %2923 = bitcast i8* %2916 to double*
  %2924 = load double, double* %2923, align 1
  %2925 = getelementptr inbounds i8, i8* %2916, i64 8
  %2926 = bitcast i8* %2925 to i64*
  %2927 = load i64, i64* %2926, align 1
  %2928 = inttoptr i64 %2920 to double*
  %2929 = load double, double* %2928
  %2930 = fsub double %2924, %2929
  %2931 = bitcast i8* %2915 to double*
  store double %2930, double* %2931, align 1, !tbaa !2453
  %2932 = getelementptr inbounds i8, i8* %2915, i64 8
  %2933 = bitcast i8* %2932 to i64*
  store i64 %2927, i64* %2933, align 1, !tbaa !2453
  %2934 = load i64, i64* %RBP
  %2935 = sub i64 %2934, 88
  %2936 = load i64, i64* %PC
  %2937 = add i64 %2936, 4
  store i64 %2937, i64* %PC
  %2938 = inttoptr i64 %2935 to i64*
  %2939 = load i64, i64* %2938
  store i64 %2939, i64* %RAX, align 8, !tbaa !2428
  %2940 = load i64, i64* %RBP
  %2941 = sub i64 %2940, 188
  %2942 = load i64, i64* %PC
  %2943 = add i64 %2942, 7
  store i64 %2943, i64* %PC
  %2944 = inttoptr i64 %2941 to i32*
  %2945 = load i32, i32* %2944
  %2946 = sext i32 %2945 to i64
  store i64 %2946, i64* %RCX, align 8, !tbaa !2428
  %2947 = load i64, i64* %RCX
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 7
  store i64 %2949, i64* %PC
  %2950 = sext i64 %2947 to i128
  %2951 = and i128 %2950, -18446744073709551616
  %2952 = zext i64 %2947 to i128
  %2953 = or i128 %2951, %2952
  %2954 = mul nsw i128 520, %2953
  %2955 = trunc i128 %2954 to i64
  store i64 %2955, i64* %RCX, align 8, !tbaa !2428
  %2956 = sext i64 %2955 to i128
  %2957 = icmp ne i128 %2956, %2954
  %2958 = zext i1 %2957 to i8
  %2959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2958, i8* %2959, align 1, !tbaa !2432
  %2960 = trunc i128 %2954 to i32
  %2961 = and i32 %2960, 255
  %2962 = call i32 @llvm.ctpop.i32(i32 %2961) #16
  %2963 = trunc i32 %2962 to i8
  %2964 = and i8 %2963, 1
  %2965 = xor i8 %2964, 1
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2965, i8* %2966, align 1, !tbaa !2446
  %2967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2967, align 1, !tbaa !2450
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2968, align 1, !tbaa !2447
  %2969 = lshr i64 %2955, 63
  %2970 = trunc i64 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2970, i8* %2971, align 1, !tbaa !2448
  %2972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2958, i8* %2972, align 1, !tbaa !2449
  %2973 = load i64, i64* %RAX
  %2974 = load i64, i64* %RCX
  %2975 = load i64, i64* %PC
  %2976 = add i64 %2975, 3
  store i64 %2976, i64* %PC
  %2977 = add i64 %2974, %2973
  store i64 %2977, i64* %RAX, align 8, !tbaa !2428
  %2978 = icmp ult i64 %2977, %2973
  %2979 = icmp ult i64 %2977, %2974
  %2980 = or i1 %2978, %2979
  %2981 = zext i1 %2980 to i8
  %2982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2981, i8* %2982, align 1, !tbaa !2432
  %2983 = trunc i64 %2977 to i32
  %2984 = and i32 %2983, 255
  %2985 = call i32 @llvm.ctpop.i32(i32 %2984) #16
  %2986 = trunc i32 %2985 to i8
  %2987 = and i8 %2986, 1
  %2988 = xor i8 %2987, 1
  %2989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2988, i8* %2989, align 1, !tbaa !2446
  %2990 = xor i64 %2974, %2973
  %2991 = xor i64 %2990, %2977
  %2992 = lshr i64 %2991, 4
  %2993 = trunc i64 %2992 to i8
  %2994 = and i8 %2993, 1
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2994, i8* %2995, align 1, !tbaa !2450
  %2996 = icmp eq i64 %2977, 0
  %2997 = zext i1 %2996 to i8
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2997, i8* %2998, align 1, !tbaa !2447
  %2999 = lshr i64 %2977, 63
  %3000 = trunc i64 %2999 to i8
  %3001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3000, i8* %3001, align 1, !tbaa !2448
  %3002 = lshr i64 %2973, 63
  %3003 = lshr i64 %2974, 63
  %3004 = xor i64 %2999, %3002
  %3005 = xor i64 %2999, %3003
  %3006 = add nuw nsw i64 %3004, %3005
  %3007 = icmp eq i64 %3006, 2
  %3008 = zext i1 %3007 to i8
  %3009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3008, i8* %3009, align 1, !tbaa !2449
  %3010 = load i64, i64* %RBP
  %3011 = sub i64 %3010, 192
  %3012 = load i64, i64* %PC
  %3013 = add i64 %3012, 7
  store i64 %3013, i64* %PC
  %3014 = inttoptr i64 %3011 to i32*
  %3015 = load i32, i32* %3014
  %3016 = sext i32 %3015 to i64
  store i64 %3016, i64* %RCX, align 8, !tbaa !2428
  %3017 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3018 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3019 = load i64, i64* %RAX
  %3020 = load i64, i64* %RCX
  %3021 = mul i64 %3020, 8
  %3022 = add i64 %3021, %3019
  %3023 = load i64, i64* %PC
  %3024 = add i64 %3023, 5
  store i64 %3024, i64* %PC
  %3025 = bitcast i8* %3018 to double*
  %3026 = load double, double* %3025, align 1
  %3027 = getelementptr inbounds i8, i8* %3018, i64 8
  %3028 = bitcast i8* %3027 to i64*
  %3029 = load i64, i64* %3028, align 1
  %3030 = inttoptr i64 %3022 to double*
  %3031 = load double, double* %3030
  %3032 = fadd double %3026, %3031
  %3033 = bitcast i8* %3017 to double*
  store double %3032, double* %3033, align 1, !tbaa !2453
  %3034 = getelementptr inbounds i8, i8* %3017, i64 8
  %3035 = bitcast i8* %3034 to i64*
  store i64 %3029, i64* %3035, align 1, !tbaa !2453
  %3036 = load i64, i64* %RBP
  %3037 = sub i64 %3036, 128
  %3038 = load i64, i64* %PC
  %3039 = add i64 %3038, 4
  store i64 %3039, i64* %PC
  %3040 = inttoptr i64 %3037 to i64*
  %3041 = load i64, i64* %3040
  store i64 %3041, i64* %RAX, align 8, !tbaa !2428
  %3042 = load i64, i64* %RBP
  %3043 = sub i64 %3042, 188
  %3044 = load i64, i64* %PC
  %3045 = add i64 %3044, 7
  store i64 %3045, i64* %PC
  %3046 = inttoptr i64 %3043 to i32*
  %3047 = load i32, i32* %3046
  %3048 = sext i32 %3047 to i64
  store i64 %3048, i64* %RCX, align 8, !tbaa !2428
  %3049 = load i64, i64* %RCX
  %3050 = load i64, i64* %PC
  %3051 = add i64 %3050, 7
  store i64 %3051, i64* %PC
  %3052 = sext i64 %3049 to i128
  %3053 = and i128 %3052, -18446744073709551616
  %3054 = zext i64 %3049 to i128
  %3055 = or i128 %3053, %3054
  %3056 = mul nsw i128 33800, %3055
  %3057 = trunc i128 %3056 to i64
  store i64 %3057, i64* %RCX, align 8, !tbaa !2428
  %3058 = sext i64 %3057 to i128
  %3059 = icmp ne i128 %3058, %3056
  %3060 = zext i1 %3059 to i8
  %3061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3060, i8* %3061, align 1, !tbaa !2432
  %3062 = trunc i128 %3056 to i32
  %3063 = and i32 %3062, 255
  %3064 = call i32 @llvm.ctpop.i32(i32 %3063) #16
  %3065 = trunc i32 %3064 to i8
  %3066 = and i8 %3065, 1
  %3067 = xor i8 %3066, 1
  %3068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3067, i8* %3068, align 1, !tbaa !2446
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3069, align 1, !tbaa !2450
  %3070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3070, align 1, !tbaa !2447
  %3071 = lshr i64 %3057, 63
  %3072 = trunc i64 %3071 to i8
  %3073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3072, i8* %3073, align 1, !tbaa !2448
  %3074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3060, i8* %3074, align 1, !tbaa !2449
  %3075 = load i64, i64* %RAX
  %3076 = load i64, i64* %RCX
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 3
  store i64 %3078, i64* %PC
  %3079 = add i64 %3076, %3075
  store i64 %3079, i64* %RAX, align 8, !tbaa !2428
  %3080 = icmp ult i64 %3079, %3075
  %3081 = icmp ult i64 %3079, %3076
  %3082 = or i1 %3080, %3081
  %3083 = zext i1 %3082 to i8
  %3084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3083, i8* %3084, align 1, !tbaa !2432
  %3085 = trunc i64 %3079 to i32
  %3086 = and i32 %3085, 255
  %3087 = call i32 @llvm.ctpop.i32(i32 %3086) #16
  %3088 = trunc i32 %3087 to i8
  %3089 = and i8 %3088, 1
  %3090 = xor i8 %3089, 1
  %3091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3090, i8* %3091, align 1, !tbaa !2446
  %3092 = xor i64 %3076, %3075
  %3093 = xor i64 %3092, %3079
  %3094 = lshr i64 %3093, 4
  %3095 = trunc i64 %3094 to i8
  %3096 = and i8 %3095, 1
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3096, i8* %3097, align 1, !tbaa !2450
  %3098 = icmp eq i64 %3079, 0
  %3099 = zext i1 %3098 to i8
  %3100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3099, i8* %3100, align 1, !tbaa !2447
  %3101 = lshr i64 %3079, 63
  %3102 = trunc i64 %3101 to i8
  %3103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3102, i8* %3103, align 1, !tbaa !2448
  %3104 = lshr i64 %3075, 63
  %3105 = lshr i64 %3076, 63
  %3106 = xor i64 %3101, %3104
  %3107 = xor i64 %3101, %3105
  %3108 = add nuw nsw i64 %3106, %3107
  %3109 = icmp eq i64 %3108, 2
  %3110 = zext i1 %3109 to i8
  %3111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3110, i8* %3111, align 1, !tbaa !2449
  %3112 = load i64, i64* %RBP
  %3113 = sub i64 %3112, 192
  %3114 = load i64, i64* %PC
  %3115 = add i64 %3114, 7
  store i64 %3115, i64* %PC
  %3116 = inttoptr i64 %3113 to i32*
  %3117 = load i32, i32* %3116
  %3118 = sext i32 %3117 to i64
  store i64 %3118, i64* %RCX, align 8, !tbaa !2428
  %3119 = load i64, i64* %RCX
  %3120 = load i64, i64* %PC
  %3121 = add i64 %3120, 7
  store i64 %3121, i64* %PC
  %3122 = sext i64 %3119 to i128
  %3123 = and i128 %3122, -18446744073709551616
  %3124 = zext i64 %3119 to i128
  %3125 = or i128 %3123, %3124
  %3126 = mul nsw i128 520, %3125
  %3127 = trunc i128 %3126 to i64
  store i64 %3127, i64* %RCX, align 8, !tbaa !2428
  %3128 = sext i64 %3127 to i128
  %3129 = icmp ne i128 %3128, %3126
  %3130 = zext i1 %3129 to i8
  %3131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3130, i8* %3131, align 1, !tbaa !2432
  %3132 = trunc i128 %3126 to i32
  %3133 = and i32 %3132, 255
  %3134 = call i32 @llvm.ctpop.i32(i32 %3133) #16
  %3135 = trunc i32 %3134 to i8
  %3136 = and i8 %3135, 1
  %3137 = xor i8 %3136, 1
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3137, i8* %3138, align 1, !tbaa !2446
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3139, align 1, !tbaa !2450
  %3140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3140, align 1, !tbaa !2447
  %3141 = lshr i64 %3127, 63
  %3142 = trunc i64 %3141 to i8
  %3143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3142, i8* %3143, align 1, !tbaa !2448
  %3144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3130, i8* %3144, align 1, !tbaa !2449
  %3145 = load i64, i64* %RAX
  %3146 = load i64, i64* %RCX
  %3147 = load i64, i64* %PC
  %3148 = add i64 %3147, 3
  store i64 %3148, i64* %PC
  %3149 = add i64 %3146, %3145
  store i64 %3149, i64* %RAX, align 8, !tbaa !2428
  %3150 = icmp ult i64 %3149, %3145
  %3151 = icmp ult i64 %3149, %3146
  %3152 = or i1 %3150, %3151
  %3153 = zext i1 %3152 to i8
  %3154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3153, i8* %3154, align 1, !tbaa !2432
  %3155 = trunc i64 %3149 to i32
  %3156 = and i32 %3155, 255
  %3157 = call i32 @llvm.ctpop.i32(i32 %3156) #16
  %3158 = trunc i32 %3157 to i8
  %3159 = and i8 %3158, 1
  %3160 = xor i8 %3159, 1
  %3161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3160, i8* %3161, align 1, !tbaa !2446
  %3162 = xor i64 %3146, %3145
  %3163 = xor i64 %3162, %3149
  %3164 = lshr i64 %3163, 4
  %3165 = trunc i64 %3164 to i8
  %3166 = and i8 %3165, 1
  %3167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3166, i8* %3167, align 1, !tbaa !2450
  %3168 = icmp eq i64 %3149, 0
  %3169 = zext i1 %3168 to i8
  %3170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3169, i8* %3170, align 1, !tbaa !2447
  %3171 = lshr i64 %3149, 63
  %3172 = trunc i64 %3171 to i8
  %3173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3172, i8* %3173, align 1, !tbaa !2448
  %3174 = lshr i64 %3145, 63
  %3175 = lshr i64 %3146, 63
  %3176 = xor i64 %3171, %3174
  %3177 = xor i64 %3171, %3175
  %3178 = add nuw nsw i64 %3176, %3177
  %3179 = icmp eq i64 %3178, 2
  %3180 = zext i1 %3179 to i8
  %3181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3180, i8* %3181, align 1, !tbaa !2449
  %3182 = load i64, i64* %RBP
  %3183 = sub i64 %3182, 48
  %3184 = load i64, i64* %PC
  %3185 = add i64 %3184, 4
  store i64 %3185, i64* %PC
  %3186 = inttoptr i64 %3183 to i32*
  %3187 = load i32, i32* %3186
  %3188 = sext i32 %3187 to i64
  store i64 %3188, i64* %RCX, align 8, !tbaa !2428
  %3189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3190 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3191 = load i64, i64* %RAX
  %3192 = load i64, i64* %RCX
  %3193 = mul i64 %3192, 8
  %3194 = add i64 %3193, %3191
  %3195 = load i64, i64* %PC
  %3196 = add i64 %3195, 5
  store i64 %3196, i64* %PC
  %3197 = bitcast i8* %3190 to double*
  %3198 = load double, double* %3197, align 1
  %3199 = getelementptr inbounds i8, i8* %3190, i64 8
  %3200 = bitcast i8* %3199 to i64*
  %3201 = load i64, i64* %3200, align 1
  %3202 = inttoptr i64 %3194 to double*
  %3203 = load double, double* %3202
  %3204 = fsub double %3198, %3203
  %3205 = bitcast i8* %3189 to double*
  store double %3204, double* %3205, align 1, !tbaa !2453
  %3206 = getelementptr inbounds i8, i8* %3189, i64 8
  %3207 = bitcast i8* %3206 to i64*
  store i64 %3201, i64* %3207, align 1, !tbaa !2453
  %3208 = load i64, i64* %RBP
  %3209 = sub i64 %3208, 96
  %3210 = load i64, i64* %PC
  %3211 = add i64 %3210, 4
  store i64 %3211, i64* %PC
  %3212 = inttoptr i64 %3209 to i64*
  %3213 = load i64, i64* %3212
  store i64 %3213, i64* %RAX, align 8, !tbaa !2428
  %3214 = load i64, i64* %RBP
  %3215 = sub i64 %3214, 188
  %3216 = load i64, i64* %PC
  %3217 = add i64 %3216, 7
  store i64 %3217, i64* %PC
  %3218 = inttoptr i64 %3215 to i32*
  %3219 = load i32, i32* %3218
  %3220 = sext i32 %3219 to i64
  store i64 %3220, i64* %RCX, align 8, !tbaa !2428
  %3221 = load i64, i64* %RCX
  %3222 = load i64, i64* %PC
  %3223 = add i64 %3222, 7
  store i64 %3223, i64* %PC
  %3224 = sext i64 %3221 to i128
  %3225 = and i128 %3224, -18446744073709551616
  %3226 = zext i64 %3221 to i128
  %3227 = or i128 %3225, %3226
  %3228 = mul nsw i128 520, %3227
  %3229 = trunc i128 %3228 to i64
  store i64 %3229, i64* %RCX, align 8, !tbaa !2428
  %3230 = sext i64 %3229 to i128
  %3231 = icmp ne i128 %3230, %3228
  %3232 = zext i1 %3231 to i8
  %3233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3232, i8* %3233, align 1, !tbaa !2432
  %3234 = trunc i128 %3228 to i32
  %3235 = and i32 %3234, 255
  %3236 = call i32 @llvm.ctpop.i32(i32 %3235) #16
  %3237 = trunc i32 %3236 to i8
  %3238 = and i8 %3237, 1
  %3239 = xor i8 %3238, 1
  %3240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3239, i8* %3240, align 1, !tbaa !2446
  %3241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3241, align 1, !tbaa !2450
  %3242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3242, align 1, !tbaa !2447
  %3243 = lshr i64 %3229, 63
  %3244 = trunc i64 %3243 to i8
  %3245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3244, i8* %3245, align 1, !tbaa !2448
  %3246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3232, i8* %3246, align 1, !tbaa !2449
  %3247 = load i64, i64* %RAX
  %3248 = load i64, i64* %RCX
  %3249 = load i64, i64* %PC
  %3250 = add i64 %3249, 3
  store i64 %3250, i64* %PC
  %3251 = add i64 %3248, %3247
  store i64 %3251, i64* %RAX, align 8, !tbaa !2428
  %3252 = icmp ult i64 %3251, %3247
  %3253 = icmp ult i64 %3251, %3248
  %3254 = or i1 %3252, %3253
  %3255 = zext i1 %3254 to i8
  %3256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3255, i8* %3256, align 1, !tbaa !2432
  %3257 = trunc i64 %3251 to i32
  %3258 = and i32 %3257, 255
  %3259 = call i32 @llvm.ctpop.i32(i32 %3258) #16
  %3260 = trunc i32 %3259 to i8
  %3261 = and i8 %3260, 1
  %3262 = xor i8 %3261, 1
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3262, i8* %3263, align 1, !tbaa !2446
  %3264 = xor i64 %3248, %3247
  %3265 = xor i64 %3264, %3251
  %3266 = lshr i64 %3265, 4
  %3267 = trunc i64 %3266 to i8
  %3268 = and i8 %3267, 1
  %3269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3268, i8* %3269, align 1, !tbaa !2450
  %3270 = icmp eq i64 %3251, 0
  %3271 = zext i1 %3270 to i8
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3271, i8* %3272, align 1, !tbaa !2447
  %3273 = lshr i64 %3251, 63
  %3274 = trunc i64 %3273 to i8
  %3275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3274, i8* %3275, align 1, !tbaa !2448
  %3276 = lshr i64 %3247, 63
  %3277 = lshr i64 %3248, 63
  %3278 = xor i64 %3273, %3276
  %3279 = xor i64 %3273, %3277
  %3280 = add nuw nsw i64 %3278, %3279
  %3281 = icmp eq i64 %3280, 2
  %3282 = zext i1 %3281 to i8
  %3283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3282, i8* %3283, align 1, !tbaa !2449
  %3284 = load i64, i64* %RBP
  %3285 = sub i64 %3284, 192
  %3286 = load i64, i64* %PC
  %3287 = add i64 %3286, 7
  store i64 %3287, i64* %PC
  %3288 = inttoptr i64 %3285 to i32*
  %3289 = load i32, i32* %3288
  %3290 = sext i32 %3289 to i64
  store i64 %3290, i64* %RCX, align 8, !tbaa !2428
  %3291 = load i64, i64* %RAX
  %3292 = load i64, i64* %RCX
  %3293 = mul i64 %3292, 8
  %3294 = add i64 %3293, %3291
  %3295 = bitcast %union.vec128_t* %XMM0 to i8*
  %3296 = load i64, i64* %PC
  %3297 = add i64 %3296, 5
  store i64 %3297, i64* %PC
  %3298 = bitcast i8* %3295 to double*
  %3299 = load double, double* %3298, align 1
  %3300 = inttoptr i64 %3294 to double*
  store double %3299, double* %3300
  %3301 = load i64, i64* %RBP
  %3302 = sub i64 %3301, 176
  %3303 = load i64, i64* %PC
  %3304 = add i64 %3303, 7
  store i64 %3304, i64* %PC
  %3305 = inttoptr i64 %3302 to i64*
  %3306 = load i64, i64* %3305
  store i64 %3306, i64* %RAX, align 8, !tbaa !2428
  %3307 = load i64, i64* %RBP
  %3308 = sub i64 %3307, 192
  %3309 = load i64, i64* %PC
  %3310 = add i64 %3309, 7
  store i64 %3310, i64* %PC
  %3311 = inttoptr i64 %3308 to i32*
  %3312 = load i32, i32* %3311
  %3313 = sext i32 %3312 to i64
  store i64 %3313, i64* %RCX, align 8, !tbaa !2428
  %3314 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3315 = load i64, i64* %RAX
  %3316 = load i64, i64* %RCX
  %3317 = mul i64 %3316, 8
  %3318 = add i64 %3317, %3315
  %3319 = load i64, i64* %PC
  %3320 = add i64 %3319, 5
  store i64 %3320, i64* %PC
  %3321 = inttoptr i64 %3318 to double*
  %3322 = load double, double* %3321
  %3323 = bitcast i8* %3314 to double*
  store double %3322, double* %3323, align 1, !tbaa !2453
  %3324 = getelementptr inbounds i8, i8* %3314, i64 8
  %3325 = bitcast i8* %3324 to double*
  store double 0.000000e+00, double* %3325, align 1, !tbaa !2453
  %3326 = load i64, i64* %RBP
  %3327 = sub i64 %3326, 184
  %3328 = load i64, i64* %PC
  %3329 = add i64 %3328, 7
  store i64 %3329, i64* %PC
  %3330 = inttoptr i64 %3327 to i64*
  %3331 = load i64, i64* %3330
  store i64 %3331, i64* %RAX, align 8, !tbaa !2428
  %3332 = load i64, i64* %RBP
  %3333 = sub i64 %3332, 192
  %3334 = load i64, i64* %PC
  %3335 = add i64 %3334, 7
  store i64 %3335, i64* %PC
  %3336 = inttoptr i64 %3333 to i32*
  %3337 = load i32, i32* %3336
  %3338 = sext i32 %3337 to i64
  store i64 %3338, i64* %RCX, align 8, !tbaa !2428
  %3339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3341 = load i64, i64* %RAX
  %3342 = load i64, i64* %RCX
  %3343 = mul i64 %3342, 8
  %3344 = add i64 %3343, %3341
  %3345 = load i64, i64* %PC
  %3346 = add i64 %3345, 5
  store i64 %3346, i64* %PC
  %3347 = bitcast i8* %3340 to double*
  %3348 = load double, double* %3347, align 1
  %3349 = getelementptr inbounds i8, i8* %3340, i64 8
  %3350 = bitcast i8* %3349 to i64*
  %3351 = load i64, i64* %3350, align 1
  %3352 = inttoptr i64 %3344 to double*
  %3353 = load double, double* %3352
  %3354 = fdiv double %3348, %3353
  %3355 = bitcast i8* %3339 to double*
  store double %3354, double* %3355, align 1, !tbaa !2453
  %3356 = getelementptr inbounds i8, i8* %3339, i64 8
  %3357 = bitcast i8* %3356 to i64*
  store i64 %3351, i64* %3357, align 1, !tbaa !2453
  %3358 = load i64, i64* %RBP
  %3359 = sub i64 %3358, 112
  %3360 = load i64, i64* %PC
  %3361 = add i64 %3360, 4
  store i64 %3361, i64* %PC
  %3362 = inttoptr i64 %3359 to i64*
  %3363 = load i64, i64* %3362
  store i64 %3363, i64* %RAX, align 8, !tbaa !2428
  %3364 = load i64, i64* %RBP
  %3365 = sub i64 %3364, 188
  %3366 = load i64, i64* %PC
  %3367 = add i64 %3366, 7
  store i64 %3367, i64* %PC
  %3368 = inttoptr i64 %3365 to i32*
  %3369 = load i32, i32* %3368
  %3370 = sext i32 %3369 to i64
  store i64 %3370, i64* %RCX, align 8, !tbaa !2428
  %3371 = load i64, i64* %RCX
  %3372 = load i64, i64* %PC
  %3373 = add i64 %3372, 7
  store i64 %3373, i64* %PC
  %3374 = sext i64 %3371 to i128
  %3375 = and i128 %3374, -18446744073709551616
  %3376 = zext i64 %3371 to i128
  %3377 = or i128 %3375, %3376
  %3378 = mul nsw i128 33800, %3377
  %3379 = trunc i128 %3378 to i64
  store i64 %3379, i64* %RCX, align 8, !tbaa !2428
  %3380 = sext i64 %3379 to i128
  %3381 = icmp ne i128 %3380, %3378
  %3382 = zext i1 %3381 to i8
  %3383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3382, i8* %3383, align 1, !tbaa !2432
  %3384 = trunc i128 %3378 to i32
  %3385 = and i32 %3384, 255
  %3386 = call i32 @llvm.ctpop.i32(i32 %3385) #16
  %3387 = trunc i32 %3386 to i8
  %3388 = and i8 %3387, 1
  %3389 = xor i8 %3388, 1
  %3390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3389, i8* %3390, align 1, !tbaa !2446
  %3391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3391, align 1, !tbaa !2450
  %3392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3392, align 1, !tbaa !2447
  %3393 = lshr i64 %3379, 63
  %3394 = trunc i64 %3393 to i8
  %3395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3394, i8* %3395, align 1, !tbaa !2448
  %3396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3382, i8* %3396, align 1, !tbaa !2449
  %3397 = load i64, i64* %RAX
  %3398 = load i64, i64* %RCX
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 3
  store i64 %3400, i64* %PC
  %3401 = add i64 %3398, %3397
  store i64 %3401, i64* %RAX, align 8, !tbaa !2428
  %3402 = icmp ult i64 %3401, %3397
  %3403 = icmp ult i64 %3401, %3398
  %3404 = or i1 %3402, %3403
  %3405 = zext i1 %3404 to i8
  %3406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3405, i8* %3406, align 1, !tbaa !2432
  %3407 = trunc i64 %3401 to i32
  %3408 = and i32 %3407, 255
  %3409 = call i32 @llvm.ctpop.i32(i32 %3408) #16
  %3410 = trunc i32 %3409 to i8
  %3411 = and i8 %3410, 1
  %3412 = xor i8 %3411, 1
  %3413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3412, i8* %3413, align 1, !tbaa !2446
  %3414 = xor i64 %3398, %3397
  %3415 = xor i64 %3414, %3401
  %3416 = lshr i64 %3415, 4
  %3417 = trunc i64 %3416 to i8
  %3418 = and i8 %3417, 1
  %3419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3418, i8* %3419, align 1, !tbaa !2450
  %3420 = icmp eq i64 %3401, 0
  %3421 = zext i1 %3420 to i8
  %3422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3421, i8* %3422, align 1, !tbaa !2447
  %3423 = lshr i64 %3401, 63
  %3424 = trunc i64 %3423 to i8
  %3425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3424, i8* %3425, align 1, !tbaa !2448
  %3426 = lshr i64 %3397, 63
  %3427 = lshr i64 %3398, 63
  %3428 = xor i64 %3423, %3426
  %3429 = xor i64 %3423, %3427
  %3430 = add nuw nsw i64 %3428, %3429
  %3431 = icmp eq i64 %3430, 2
  %3432 = zext i1 %3431 to i8
  %3433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3432, i8* %3433, align 1, !tbaa !2449
  %3434 = load i64, i64* %RBP
  %3435 = sub i64 %3434, 192
  %3436 = load i64, i64* %PC
  %3437 = add i64 %3436, 7
  store i64 %3437, i64* %PC
  %3438 = inttoptr i64 %3435 to i32*
  %3439 = load i32, i32* %3438
  %3440 = sext i32 %3439 to i64
  store i64 %3440, i64* %RCX, align 8, !tbaa !2428
  %3441 = load i64, i64* %RCX
  %3442 = load i64, i64* %PC
  %3443 = add i64 %3442, 7
  store i64 %3443, i64* %PC
  %3444 = sext i64 %3441 to i128
  %3445 = and i128 %3444, -18446744073709551616
  %3446 = zext i64 %3441 to i128
  %3447 = or i128 %3445, %3446
  %3448 = mul nsw i128 520, %3447
  %3449 = trunc i128 %3448 to i64
  store i64 %3449, i64* %RCX, align 8, !tbaa !2428
  %3450 = sext i64 %3449 to i128
  %3451 = icmp ne i128 %3450, %3448
  %3452 = zext i1 %3451 to i8
  %3453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3452, i8* %3453, align 1, !tbaa !2432
  %3454 = trunc i128 %3448 to i32
  %3455 = and i32 %3454, 255
  %3456 = call i32 @llvm.ctpop.i32(i32 %3455) #16
  %3457 = trunc i32 %3456 to i8
  %3458 = and i8 %3457, 1
  %3459 = xor i8 %3458, 1
  %3460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3459, i8* %3460, align 1, !tbaa !2446
  %3461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3461, align 1, !tbaa !2450
  %3462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3462, align 1, !tbaa !2447
  %3463 = lshr i64 %3449, 63
  %3464 = trunc i64 %3463 to i8
  %3465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3464, i8* %3465, align 1, !tbaa !2448
  %3466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3452, i8* %3466, align 1, !tbaa !2449
  %3467 = load i64, i64* %RAX
  %3468 = load i64, i64* %RCX
  %3469 = load i64, i64* %PC
  %3470 = add i64 %3469, 3
  store i64 %3470, i64* %PC
  %3471 = add i64 %3468, %3467
  store i64 %3471, i64* %RAX, align 8, !tbaa !2428
  %3472 = icmp ult i64 %3471, %3467
  %3473 = icmp ult i64 %3471, %3468
  %3474 = or i1 %3472, %3473
  %3475 = zext i1 %3474 to i8
  %3476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3475, i8* %3476, align 1, !tbaa !2432
  %3477 = trunc i64 %3471 to i32
  %3478 = and i32 %3477, 255
  %3479 = call i32 @llvm.ctpop.i32(i32 %3478) #16
  %3480 = trunc i32 %3479 to i8
  %3481 = and i8 %3480, 1
  %3482 = xor i8 %3481, 1
  %3483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3482, i8* %3483, align 1, !tbaa !2446
  %3484 = xor i64 %3468, %3467
  %3485 = xor i64 %3484, %3471
  %3486 = lshr i64 %3485, 4
  %3487 = trunc i64 %3486 to i8
  %3488 = and i8 %3487, 1
  %3489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3488, i8* %3489, align 1, !tbaa !2450
  %3490 = icmp eq i64 %3471, 0
  %3491 = zext i1 %3490 to i8
  %3492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3491, i8* %3492, align 1, !tbaa !2447
  %3493 = lshr i64 %3471, 63
  %3494 = trunc i64 %3493 to i8
  %3495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3494, i8* %3495, align 1, !tbaa !2448
  %3496 = lshr i64 %3467, 63
  %3497 = lshr i64 %3468, 63
  %3498 = xor i64 %3493, %3496
  %3499 = xor i64 %3493, %3497
  %3500 = add nuw nsw i64 %3498, %3499
  %3501 = icmp eq i64 %3500, 2
  %3502 = zext i1 %3501 to i8
  %3503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3502, i8* %3503, align 1, !tbaa !2449
  %3504 = load i64, i64* %RBP
  %3505 = sub i64 %3504, 48
  %3506 = load i64, i64* %PC
  %3507 = add i64 %3506, 4
  store i64 %3507, i64* %PC
  %3508 = inttoptr i64 %3505 to i32*
  %3509 = load i32, i32* %3508
  %3510 = sext i32 %3509 to i64
  store i64 %3510, i64* %RCX, align 8, !tbaa !2428
  %3511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3512 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3513 = load i64, i64* %RAX
  %3514 = load i64, i64* %RCX
  %3515 = mul i64 %3514, 8
  %3516 = add i64 %3515, %3513
  %3517 = load i64, i64* %PC
  %3518 = add i64 %3517, 5
  store i64 %3518, i64* %PC
  %3519 = bitcast i8* %3512 to double*
  %3520 = load double, double* %3519, align 1
  %3521 = getelementptr inbounds i8, i8* %3512, i64 8
  %3522 = bitcast i8* %3521 to i64*
  %3523 = load i64, i64* %3522, align 1
  %3524 = inttoptr i64 %3516 to double*
  %3525 = load double, double* %3524
  %3526 = fmul double %3520, %3525
  %3527 = bitcast i8* %3511 to double*
  store double %3526, double* %3527, align 1, !tbaa !2453
  %3528 = getelementptr inbounds i8, i8* %3511, i64 8
  %3529 = bitcast i8* %3528 to i64*
  store i64 %3523, i64* %3529, align 1, !tbaa !2453
  %3530 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3531 = load i64, i64* %RBP
  %3532 = sub i64 %3531, 72
  %3533 = load i64, i64* %PC
  %3534 = add i64 %3533, 5
  store i64 %3534, i64* %PC
  %3535 = inttoptr i64 %3532 to double*
  %3536 = load double, double* %3535
  %3537 = bitcast i8* %3530 to double*
  store double %3536, double* %3537, align 1, !tbaa !2453
  %3538 = getelementptr inbounds i8, i8* %3530, i64 8
  %3539 = bitcast i8* %3538 to double*
  store double 0.000000e+00, double* %3539, align 1, !tbaa !2453
  %3540 = load i64, i64* %RBP
  %3541 = sub i64 %3540, 184
  %3542 = load i64, i64* %PC
  %3543 = add i64 %3542, 7
  store i64 %3543, i64* %PC
  %3544 = inttoptr i64 %3541 to i64*
  %3545 = load i64, i64* %3544
  store i64 %3545, i64* %RAX, align 8, !tbaa !2428
  %3546 = load i64, i64* %RBP
  %3547 = sub i64 %3546, 192
  %3548 = load i64, i64* %PC
  %3549 = add i64 %3548, 7
  store i64 %3549, i64* %PC
  %3550 = inttoptr i64 %3547 to i32*
  %3551 = load i32, i32* %3550
  %3552 = sext i32 %3551 to i64
  store i64 %3552, i64* %RCX, align 8, !tbaa !2428
  %3553 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3554 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3555 = load i64, i64* %RAX
  %3556 = load i64, i64* %RCX
  %3557 = mul i64 %3556, 8
  %3558 = add i64 %3557, %3555
  %3559 = load i64, i64* %PC
  %3560 = add i64 %3559, 5
  store i64 %3560, i64* %PC
  %3561 = bitcast i8* %3554 to double*
  %3562 = load double, double* %3561, align 1
  %3563 = getelementptr inbounds i8, i8* %3554, i64 8
  %3564 = bitcast i8* %3563 to i64*
  %3565 = load i64, i64* %3564, align 1
  %3566 = inttoptr i64 %3558 to double*
  %3567 = load double, double* %3566
  %3568 = fdiv double %3562, %3567
  %3569 = bitcast i8* %3553 to double*
  store double %3568, double* %3569, align 1, !tbaa !2453
  %3570 = getelementptr inbounds i8, i8* %3553, i64 8
  %3571 = bitcast i8* %3570 to i64*
  store i64 %3565, i64* %3571, align 1, !tbaa !2453
  %3572 = load i64, i64* %RBP
  %3573 = sub i64 %3572, 96
  %3574 = load i64, i64* %PC
  %3575 = add i64 %3574, 4
  store i64 %3575, i64* %PC
  %3576 = inttoptr i64 %3573 to i64*
  %3577 = load i64, i64* %3576
  store i64 %3577, i64* %RAX, align 8, !tbaa !2428
  %3578 = load i64, i64* %RBP
  %3579 = sub i64 %3578, 188
  %3580 = load i64, i64* %PC
  %3581 = add i64 %3580, 7
  store i64 %3581, i64* %PC
  %3582 = inttoptr i64 %3579 to i32*
  %3583 = load i32, i32* %3582
  %3584 = sext i32 %3583 to i64
  store i64 %3584, i64* %RCX, align 8, !tbaa !2428
  %3585 = load i64, i64* %RCX
  %3586 = load i64, i64* %PC
  %3587 = add i64 %3586, 7
  store i64 %3587, i64* %PC
  %3588 = sext i64 %3585 to i128
  %3589 = and i128 %3588, -18446744073709551616
  %3590 = zext i64 %3585 to i128
  %3591 = or i128 %3589, %3590
  %3592 = mul nsw i128 520, %3591
  %3593 = trunc i128 %3592 to i64
  store i64 %3593, i64* %RCX, align 8, !tbaa !2428
  %3594 = sext i64 %3593 to i128
  %3595 = icmp ne i128 %3594, %3592
  %3596 = zext i1 %3595 to i8
  %3597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3596, i8* %3597, align 1, !tbaa !2432
  %3598 = trunc i128 %3592 to i32
  %3599 = and i32 %3598, 255
  %3600 = call i32 @llvm.ctpop.i32(i32 %3599) #16
  %3601 = trunc i32 %3600 to i8
  %3602 = and i8 %3601, 1
  %3603 = xor i8 %3602, 1
  %3604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3603, i8* %3604, align 1, !tbaa !2446
  %3605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3605, align 1, !tbaa !2450
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3606, align 1, !tbaa !2447
  %3607 = lshr i64 %3593, 63
  %3608 = trunc i64 %3607 to i8
  %3609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3608, i8* %3609, align 1, !tbaa !2448
  %3610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3596, i8* %3610, align 1, !tbaa !2449
  %3611 = load i64, i64* %RAX
  %3612 = load i64, i64* %RCX
  %3613 = load i64, i64* %PC
  %3614 = add i64 %3613, 3
  store i64 %3614, i64* %PC
  %3615 = add i64 %3612, %3611
  store i64 %3615, i64* %RAX, align 8, !tbaa !2428
  %3616 = icmp ult i64 %3615, %3611
  %3617 = icmp ult i64 %3615, %3612
  %3618 = or i1 %3616, %3617
  %3619 = zext i1 %3618 to i8
  %3620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3619, i8* %3620, align 1, !tbaa !2432
  %3621 = trunc i64 %3615 to i32
  %3622 = and i32 %3621, 255
  %3623 = call i32 @llvm.ctpop.i32(i32 %3622) #16
  %3624 = trunc i32 %3623 to i8
  %3625 = and i8 %3624, 1
  %3626 = xor i8 %3625, 1
  %3627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3626, i8* %3627, align 1, !tbaa !2446
  %3628 = xor i64 %3612, %3611
  %3629 = xor i64 %3628, %3615
  %3630 = lshr i64 %3629, 4
  %3631 = trunc i64 %3630 to i8
  %3632 = and i8 %3631, 1
  %3633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3632, i8* %3633, align 1, !tbaa !2450
  %3634 = icmp eq i64 %3615, 0
  %3635 = zext i1 %3634 to i8
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3635, i8* %3636, align 1, !tbaa !2447
  %3637 = lshr i64 %3615, 63
  %3638 = trunc i64 %3637 to i8
  %3639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3638, i8* %3639, align 1, !tbaa !2448
  %3640 = lshr i64 %3611, 63
  %3641 = lshr i64 %3612, 63
  %3642 = xor i64 %3637, %3640
  %3643 = xor i64 %3637, %3641
  %3644 = add nuw nsw i64 %3642, %3643
  %3645 = icmp eq i64 %3644, 2
  %3646 = zext i1 %3645 to i8
  %3647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3646, i8* %3647, align 1, !tbaa !2449
  %3648 = load i64, i64* %RBP
  %3649 = sub i64 %3648, 192
  %3650 = load i64, i64* %PC
  %3651 = add i64 %3650, 7
  store i64 %3651, i64* %PC
  %3652 = inttoptr i64 %3649 to i32*
  %3653 = load i32, i32* %3652
  %3654 = sext i32 %3653 to i64
  store i64 %3654, i64* %RCX, align 8, !tbaa !2428
  %3655 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3656 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3657 = load i64, i64* %RAX
  %3658 = load i64, i64* %RCX
  %3659 = mul i64 %3658, 8
  %3660 = add i64 %3659, %3657
  %3661 = load i64, i64* %PC
  %3662 = add i64 %3661, 5
  store i64 %3662, i64* %PC
  %3663 = bitcast i8* %3656 to double*
  %3664 = load double, double* %3663, align 1
  %3665 = getelementptr inbounds i8, i8* %3656, i64 8
  %3666 = bitcast i8* %3665 to i64*
  %3667 = load i64, i64* %3666, align 1
  %3668 = inttoptr i64 %3660 to double*
  %3669 = load double, double* %3668
  %3670 = fmul double %3664, %3669
  %3671 = bitcast i8* %3655 to double*
  store double %3670, double* %3671, align 1, !tbaa !2453
  %3672 = getelementptr inbounds i8, i8* %3655, i64 8
  %3673 = bitcast i8* %3672 to i64*
  store i64 %3667, i64* %3673, align 1, !tbaa !2453
  %3674 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3675 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3676 = bitcast %union.vec128_t* %XMM1 to i8*
  %3677 = load i64, i64* %PC
  %3678 = add i64 %3677, 4
  store i64 %3678, i64* %PC
  %3679 = bitcast i8* %3675 to double*
  %3680 = load double, double* %3679, align 1
  %3681 = getelementptr inbounds i8, i8* %3675, i64 8
  %3682 = bitcast i8* %3681 to i64*
  %3683 = load i64, i64* %3682, align 1
  %3684 = bitcast i8* %3676 to double*
  %3685 = load double, double* %3684, align 1
  %3686 = fsub double %3680, %3685
  %3687 = bitcast i8* %3674 to double*
  store double %3686, double* %3687, align 1, !tbaa !2453
  %3688 = getelementptr inbounds i8, i8* %3674, i64 8
  %3689 = bitcast i8* %3688 to i64*
  store i64 %3683, i64* %3689, align 1, !tbaa !2453
  %3690 = load i64, i64* %RBP
  %3691 = sub i64 %3690, 104
  %3692 = load i64, i64* %PC
  %3693 = add i64 %3692, 4
  store i64 %3693, i64* %PC
  %3694 = inttoptr i64 %3691 to i64*
  %3695 = load i64, i64* %3694
  store i64 %3695, i64* %RAX, align 8, !tbaa !2428
  %3696 = load i64, i64* %RBP
  %3697 = sub i64 %3696, 188
  %3698 = load i64, i64* %PC
  %3699 = add i64 %3698, 7
  store i64 %3699, i64* %PC
  %3700 = inttoptr i64 %3697 to i32*
  %3701 = load i32, i32* %3700
  %3702 = sext i32 %3701 to i64
  store i64 %3702, i64* %RCX, align 8, !tbaa !2428
  %3703 = load i64, i64* %RCX
  %3704 = load i64, i64* %PC
  %3705 = add i64 %3704, 7
  store i64 %3705, i64* %PC
  %3706 = sext i64 %3703 to i128
  %3707 = and i128 %3706, -18446744073709551616
  %3708 = zext i64 %3703 to i128
  %3709 = or i128 %3707, %3708
  %3710 = mul nsw i128 520, %3709
  %3711 = trunc i128 %3710 to i64
  store i64 %3711, i64* %RCX, align 8, !tbaa !2428
  %3712 = sext i64 %3711 to i128
  %3713 = icmp ne i128 %3712, %3710
  %3714 = zext i1 %3713 to i8
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3714, i8* %3715, align 1, !tbaa !2432
  %3716 = trunc i128 %3710 to i32
  %3717 = and i32 %3716, 255
  %3718 = call i32 @llvm.ctpop.i32(i32 %3717) #16
  %3719 = trunc i32 %3718 to i8
  %3720 = and i8 %3719, 1
  %3721 = xor i8 %3720, 1
  %3722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3721, i8* %3722, align 1, !tbaa !2446
  %3723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3723, align 1, !tbaa !2450
  %3724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3724, align 1, !tbaa !2447
  %3725 = lshr i64 %3711, 63
  %3726 = trunc i64 %3725 to i8
  %3727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3726, i8* %3727, align 1, !tbaa !2448
  %3728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3714, i8* %3728, align 1, !tbaa !2449
  %3729 = load i64, i64* %RAX
  %3730 = load i64, i64* %RCX
  %3731 = load i64, i64* %PC
  %3732 = add i64 %3731, 3
  store i64 %3732, i64* %PC
  %3733 = add i64 %3730, %3729
  store i64 %3733, i64* %RAX, align 8, !tbaa !2428
  %3734 = icmp ult i64 %3733, %3729
  %3735 = icmp ult i64 %3733, %3730
  %3736 = or i1 %3734, %3735
  %3737 = zext i1 %3736 to i8
  %3738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3737, i8* %3738, align 1, !tbaa !2432
  %3739 = trunc i64 %3733 to i32
  %3740 = and i32 %3739, 255
  %3741 = call i32 @llvm.ctpop.i32(i32 %3740) #16
  %3742 = trunc i32 %3741 to i8
  %3743 = and i8 %3742, 1
  %3744 = xor i8 %3743, 1
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3744, i8* %3745, align 1, !tbaa !2446
  %3746 = xor i64 %3730, %3729
  %3747 = xor i64 %3746, %3733
  %3748 = lshr i64 %3747, 4
  %3749 = trunc i64 %3748 to i8
  %3750 = and i8 %3749, 1
  %3751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3750, i8* %3751, align 1, !tbaa !2450
  %3752 = icmp eq i64 %3733, 0
  %3753 = zext i1 %3752 to i8
  %3754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3753, i8* %3754, align 1, !tbaa !2447
  %3755 = lshr i64 %3733, 63
  %3756 = trunc i64 %3755 to i8
  %3757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3756, i8* %3757, align 1, !tbaa !2448
  %3758 = lshr i64 %3729, 63
  %3759 = lshr i64 %3730, 63
  %3760 = xor i64 %3755, %3758
  %3761 = xor i64 %3755, %3759
  %3762 = add nuw nsw i64 %3760, %3761
  %3763 = icmp eq i64 %3762, 2
  %3764 = zext i1 %3763 to i8
  %3765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3764, i8* %3765, align 1, !tbaa !2449
  %3766 = load i64, i64* %RBP
  %3767 = sub i64 %3766, 192
  %3768 = load i64, i64* %PC
  %3769 = add i64 %3768, 7
  store i64 %3769, i64* %PC
  %3770 = inttoptr i64 %3767 to i32*
  %3771 = load i32, i32* %3770
  %3772 = sext i32 %3771 to i64
  store i64 %3772, i64* %RCX, align 8, !tbaa !2428
  %3773 = load i64, i64* %RAX
  %3774 = load i64, i64* %RCX
  %3775 = mul i64 %3774, 8
  %3776 = add i64 %3775, %3773
  %3777 = bitcast %union.vec128_t* %XMM0 to i8*
  %3778 = load i64, i64* %PC
  %3779 = add i64 %3778, 5
  store i64 %3779, i64* %PC
  %3780 = bitcast i8* %3777 to double*
  %3781 = load double, double* %3780, align 1
  %3782 = inttoptr i64 %3776 to double*
  store double %3781, double* %3782
  %3783 = load i64, i64* %RBP
  %3784 = sub i64 %3783, 160
  %3785 = load i64, i64* %PC
  %3786 = add i64 %3785, 7
  store i64 %3786, i64* %PC
  %3787 = inttoptr i64 %3784 to i64*
  %3788 = load i64, i64* %3787
  store i64 %3788, i64* %RAX, align 8, !tbaa !2428
  %3789 = load i64, i64* %RBP
  %3790 = sub i64 %3789, 48
  %3791 = load i64, i64* %PC
  %3792 = add i64 %3791, 4
  store i64 %3792, i64* %PC
  %3793 = inttoptr i64 %3790 to i32*
  %3794 = load i32, i32* %3793
  %3795 = sext i32 %3794 to i64
  store i64 %3795, i64* %RCX, align 8, !tbaa !2428
  %3796 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3797 = load i64, i64* %RAX
  %3798 = load i64, i64* %RCX
  %3799 = mul i64 %3798, 8
  %3800 = add i64 %3799, %3797
  %3801 = load i64, i64* %PC
  %3802 = add i64 %3801, 5
  store i64 %3802, i64* %PC
  %3803 = inttoptr i64 %3800 to double*
  %3804 = load double, double* %3803
  %3805 = bitcast i8* %3796 to double*
  store double %3804, double* %3805, align 1, !tbaa !2453
  %3806 = getelementptr inbounds i8, i8* %3796, i64 8
  %3807 = bitcast i8* %3806 to double*
  store double 0.000000e+00, double* %3807, align 1, !tbaa !2453
  %3808 = load i64, i64* %RBP
  %3809 = sub i64 %3808, 168
  %3810 = load i64, i64* %PC
  %3811 = add i64 %3810, 7
  store i64 %3811, i64* %PC
  %3812 = inttoptr i64 %3809 to i64*
  %3813 = load i64, i64* %3812
  store i64 %3813, i64* %RAX, align 8, !tbaa !2428
  %3814 = load i64, i64* %RBP
  %3815 = sub i64 %3814, 48
  %3816 = load i64, i64* %PC
  %3817 = add i64 %3816, 4
  store i64 %3817, i64* %PC
  %3818 = inttoptr i64 %3815 to i32*
  %3819 = load i32, i32* %3818
  %3820 = sext i32 %3819 to i64
  store i64 %3820, i64* %RCX, align 8, !tbaa !2428
  %3821 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3823 = load i64, i64* %RAX
  %3824 = load i64, i64* %RCX
  %3825 = mul i64 %3824, 8
  %3826 = add i64 %3825, %3823
  %3827 = load i64, i64* %PC
  %3828 = add i64 %3827, 5
  store i64 %3828, i64* %PC
  %3829 = bitcast i8* %3822 to double*
  %3830 = load double, double* %3829, align 1
  %3831 = getelementptr inbounds i8, i8* %3822, i64 8
  %3832 = bitcast i8* %3831 to i64*
  %3833 = load i64, i64* %3832, align 1
  %3834 = inttoptr i64 %3826 to double*
  %3835 = load double, double* %3834
  %3836 = fdiv double %3830, %3835
  %3837 = bitcast i8* %3821 to double*
  store double %3836, double* %3837, align 1, !tbaa !2453
  %3838 = getelementptr inbounds i8, i8* %3821, i64 8
  %3839 = bitcast i8* %3838 to i64*
  store i64 %3833, i64* %3839, align 1, !tbaa !2453
  %3840 = load i64, i64* %RBP
  %3841 = sub i64 %3840, 136
  %3842 = load i64, i64* %PC
  %3843 = add i64 %3842, 7
  store i64 %3843, i64* %PC
  %3844 = inttoptr i64 %3841 to i64*
  %3845 = load i64, i64* %3844
  store i64 %3845, i64* %RAX, align 8, !tbaa !2428
  %3846 = load i64, i64* %RBP
  %3847 = sub i64 %3846, 188
  %3848 = load i64, i64* %PC
  %3849 = add i64 %3848, 7
  store i64 %3849, i64* %PC
  %3850 = inttoptr i64 %3847 to i32*
  %3851 = load i32, i32* %3850
  %3852 = sext i32 %3851 to i64
  store i64 %3852, i64* %RCX, align 8, !tbaa !2428
  %3853 = load i64, i64* %RCX
  %3854 = load i64, i64* %PC
  %3855 = add i64 %3854, 7
  store i64 %3855, i64* %PC
  %3856 = sext i64 %3853 to i128
  %3857 = and i128 %3856, -18446744073709551616
  %3858 = zext i64 %3853 to i128
  %3859 = or i128 %3857, %3858
  %3860 = mul nsw i128 33800, %3859
  %3861 = trunc i128 %3860 to i64
  store i64 %3861, i64* %RCX, align 8, !tbaa !2428
  %3862 = sext i64 %3861 to i128
  %3863 = icmp ne i128 %3862, %3860
  %3864 = zext i1 %3863 to i8
  %3865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3864, i8* %3865, align 1, !tbaa !2432
  %3866 = trunc i128 %3860 to i32
  %3867 = and i32 %3866, 255
  %3868 = call i32 @llvm.ctpop.i32(i32 %3867) #16
  %3869 = trunc i32 %3868 to i8
  %3870 = and i8 %3869, 1
  %3871 = xor i8 %3870, 1
  %3872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3871, i8* %3872, align 1, !tbaa !2446
  %3873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3873, align 1, !tbaa !2450
  %3874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3874, align 1, !tbaa !2447
  %3875 = lshr i64 %3861, 63
  %3876 = trunc i64 %3875 to i8
  %3877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3876, i8* %3877, align 1, !tbaa !2448
  %3878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3864, i8* %3878, align 1, !tbaa !2449
  %3879 = load i64, i64* %RAX
  %3880 = load i64, i64* %RCX
  %3881 = load i64, i64* %PC
  %3882 = add i64 %3881, 3
  store i64 %3882, i64* %PC
  %3883 = add i64 %3880, %3879
  store i64 %3883, i64* %RAX, align 8, !tbaa !2428
  %3884 = icmp ult i64 %3883, %3879
  %3885 = icmp ult i64 %3883, %3880
  %3886 = or i1 %3884, %3885
  %3887 = zext i1 %3886 to i8
  %3888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3887, i8* %3888, align 1, !tbaa !2432
  %3889 = trunc i64 %3883 to i32
  %3890 = and i32 %3889, 255
  %3891 = call i32 @llvm.ctpop.i32(i32 %3890) #16
  %3892 = trunc i32 %3891 to i8
  %3893 = and i8 %3892, 1
  %3894 = xor i8 %3893, 1
  %3895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3894, i8* %3895, align 1, !tbaa !2446
  %3896 = xor i64 %3880, %3879
  %3897 = xor i64 %3896, %3883
  %3898 = lshr i64 %3897, 4
  %3899 = trunc i64 %3898 to i8
  %3900 = and i8 %3899, 1
  %3901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3900, i8* %3901, align 1, !tbaa !2450
  %3902 = icmp eq i64 %3883, 0
  %3903 = zext i1 %3902 to i8
  %3904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3903, i8* %3904, align 1, !tbaa !2447
  %3905 = lshr i64 %3883, 63
  %3906 = trunc i64 %3905 to i8
  %3907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3906, i8* %3907, align 1, !tbaa !2448
  %3908 = lshr i64 %3879, 63
  %3909 = lshr i64 %3880, 63
  %3910 = xor i64 %3905, %3908
  %3911 = xor i64 %3905, %3909
  %3912 = add nuw nsw i64 %3910, %3911
  %3913 = icmp eq i64 %3912, 2
  %3914 = zext i1 %3913 to i8
  %3915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3914, i8* %3915, align 1, !tbaa !2449
  %3916 = load i64, i64* %RBP
  %3917 = sub i64 %3916, 192
  %3918 = load i64, i64* %PC
  %3919 = add i64 %3918, 7
  store i64 %3919, i64* %PC
  %3920 = inttoptr i64 %3917 to i32*
  %3921 = load i32, i32* %3920
  %3922 = sext i32 %3921 to i64
  store i64 %3922, i64* %RCX, align 8, !tbaa !2428
  %3923 = load i64, i64* %RCX
  %3924 = load i64, i64* %PC
  %3925 = add i64 %3924, 7
  store i64 %3925, i64* %PC
  %3926 = sext i64 %3923 to i128
  %3927 = and i128 %3926, -18446744073709551616
  %3928 = zext i64 %3923 to i128
  %3929 = or i128 %3927, %3928
  %3930 = mul nsw i128 520, %3929
  %3931 = trunc i128 %3930 to i64
  store i64 %3931, i64* %RCX, align 8, !tbaa !2428
  %3932 = sext i64 %3931 to i128
  %3933 = icmp ne i128 %3932, %3930
  %3934 = zext i1 %3933 to i8
  %3935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3934, i8* %3935, align 1, !tbaa !2432
  %3936 = trunc i128 %3930 to i32
  %3937 = and i32 %3936, 255
  %3938 = call i32 @llvm.ctpop.i32(i32 %3937) #16
  %3939 = trunc i32 %3938 to i8
  %3940 = and i8 %3939, 1
  %3941 = xor i8 %3940, 1
  %3942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3941, i8* %3942, align 1, !tbaa !2446
  %3943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3943, align 1, !tbaa !2450
  %3944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3944, align 1, !tbaa !2447
  %3945 = lshr i64 %3931, 63
  %3946 = trunc i64 %3945 to i8
  %3947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3946, i8* %3947, align 1, !tbaa !2448
  %3948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3934, i8* %3948, align 1, !tbaa !2449
  %3949 = load i64, i64* %RAX
  %3950 = load i64, i64* %RCX
  %3951 = load i64, i64* %PC
  %3952 = add i64 %3951, 3
  store i64 %3952, i64* %PC
  %3953 = add i64 %3950, %3949
  store i64 %3953, i64* %RAX, align 8, !tbaa !2428
  %3954 = icmp ult i64 %3953, %3949
  %3955 = icmp ult i64 %3953, %3950
  %3956 = or i1 %3954, %3955
  %3957 = zext i1 %3956 to i8
  %3958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3957, i8* %3958, align 1, !tbaa !2432
  %3959 = trunc i64 %3953 to i32
  %3960 = and i32 %3959, 255
  %3961 = call i32 @llvm.ctpop.i32(i32 %3960) #16
  %3962 = trunc i32 %3961 to i8
  %3963 = and i8 %3962, 1
  %3964 = xor i8 %3963, 1
  %3965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3964, i8* %3965, align 1, !tbaa !2446
  %3966 = xor i64 %3950, %3949
  %3967 = xor i64 %3966, %3953
  %3968 = lshr i64 %3967, 4
  %3969 = trunc i64 %3968 to i8
  %3970 = and i8 %3969, 1
  %3971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3970, i8* %3971, align 1, !tbaa !2450
  %3972 = icmp eq i64 %3953, 0
  %3973 = zext i1 %3972 to i8
  %3974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3973, i8* %3974, align 1, !tbaa !2447
  %3975 = lshr i64 %3953, 63
  %3976 = trunc i64 %3975 to i8
  %3977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3976, i8* %3977, align 1, !tbaa !2448
  %3978 = lshr i64 %3949, 63
  %3979 = lshr i64 %3950, 63
  %3980 = xor i64 %3975, %3978
  %3981 = xor i64 %3975, %3979
  %3982 = add nuw nsw i64 %3980, %3981
  %3983 = icmp eq i64 %3982, 2
  %3984 = zext i1 %3983 to i8
  %3985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3984, i8* %3985, align 1, !tbaa !2449
  %3986 = load i64, i64* %RBP
  %3987 = sub i64 %3986, 48
  %3988 = load i64, i64* %PC
  %3989 = add i64 %3988, 4
  store i64 %3989, i64* %PC
  %3990 = inttoptr i64 %3987 to i32*
  %3991 = load i32, i32* %3990
  %3992 = sext i32 %3991 to i64
  store i64 %3992, i64* %RCX, align 8, !tbaa !2428
  %3993 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3994 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3995 = load i64, i64* %RAX
  %3996 = load i64, i64* %RCX
  %3997 = mul i64 %3996, 8
  %3998 = add i64 %3997, %3995
  %3999 = load i64, i64* %PC
  %4000 = add i64 %3999, 5
  store i64 %4000, i64* %PC
  %4001 = bitcast i8* %3994 to double*
  %4002 = load double, double* %4001, align 1
  %4003 = getelementptr inbounds i8, i8* %3994, i64 8
  %4004 = bitcast i8* %4003 to i64*
  %4005 = load i64, i64* %4004, align 1
  %4006 = inttoptr i64 %3998 to double*
  %4007 = load double, double* %4006
  %4008 = fmul double %4002, %4007
  %4009 = bitcast i8* %3993 to double*
  store double %4008, double* %4009, align 1, !tbaa !2453
  %4010 = getelementptr inbounds i8, i8* %3993, i64 8
  %4011 = bitcast i8* %4010 to i64*
  store i64 %4005, i64* %4011, align 1, !tbaa !2453
  %4012 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4013 = load i64, i64* %RBP
  %4014 = sub i64 %4013, 64
  %4015 = load i64, i64* %PC
  %4016 = add i64 %4015, 5
  store i64 %4016, i64* %PC
  %4017 = inttoptr i64 %4014 to double*
  %4018 = load double, double* %4017
  %4019 = bitcast i8* %4012 to double*
  store double %4018, double* %4019, align 1, !tbaa !2453
  %4020 = getelementptr inbounds i8, i8* %4012, i64 8
  %4021 = bitcast i8* %4020 to double*
  store double 0.000000e+00, double* %4021, align 1, !tbaa !2453
  %4022 = load i64, i64* %RBP
  %4023 = sub i64 %4022, 152
  %4024 = load i64, i64* %PC
  %4025 = add i64 %4024, 7
  store i64 %4025, i64* %PC
  %4026 = inttoptr i64 %4023 to i64*
  %4027 = load i64, i64* %4026
  store i64 %4027, i64* %RAX, align 8, !tbaa !2428
  %4028 = load i64, i64* %RBP
  %4029 = sub i64 %4028, 188
  %4030 = load i64, i64* %PC
  %4031 = add i64 %4030, 7
  store i64 %4031, i64* %PC
  %4032 = inttoptr i64 %4029 to i32*
  %4033 = load i32, i32* %4032
  %4034 = sext i32 %4033 to i64
  store i64 %4034, i64* %RCX, align 8, !tbaa !2428
  %4035 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4036 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4037 = load i64, i64* %RAX
  %4038 = load i64, i64* %RCX
  %4039 = mul i64 %4038, 8
  %4040 = add i64 %4039, %4037
  %4041 = load i64, i64* %PC
  %4042 = add i64 %4041, 5
  store i64 %4042, i64* %PC
  %4043 = bitcast i8* %4036 to double*
  %4044 = load double, double* %4043, align 1
  %4045 = getelementptr inbounds i8, i8* %4036, i64 8
  %4046 = bitcast i8* %4045 to i64*
  %4047 = load i64, i64* %4046, align 1
  %4048 = inttoptr i64 %4040 to double*
  %4049 = load double, double* %4048
  %4050 = fmul double %4044, %4049
  %4051 = bitcast i8* %4035 to double*
  store double %4050, double* %4051, align 1, !tbaa !2453
  %4052 = getelementptr inbounds i8, i8* %4035, i64 8
  %4053 = bitcast i8* %4052 to i64*
  store i64 %4047, i64* %4053, align 1, !tbaa !2453
  %4054 = load i64, i64* %RBP
  %4055 = sub i64 %4054, 168
  %4056 = load i64, i64* %PC
  %4057 = add i64 %4056, 7
  store i64 %4057, i64* %PC
  %4058 = inttoptr i64 %4055 to i64*
  %4059 = load i64, i64* %4058
  store i64 %4059, i64* %RAX, align 8, !tbaa !2428
  %4060 = load i64, i64* %RBP
  %4061 = sub i64 %4060, 48
  %4062 = load i64, i64* %PC
  %4063 = add i64 %4062, 4
  store i64 %4063, i64* %PC
  %4064 = inttoptr i64 %4061 to i32*
  %4065 = load i32, i32* %4064
  %4066 = sext i32 %4065 to i64
  store i64 %4066, i64* %RCX, align 8, !tbaa !2428
  %4067 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4068 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4069 = load i64, i64* %RAX
  %4070 = load i64, i64* %RCX
  %4071 = mul i64 %4070, 8
  %4072 = add i64 %4071, %4069
  %4073 = load i64, i64* %PC
  %4074 = add i64 %4073, 5
  store i64 %4074, i64* %PC
  %4075 = bitcast i8* %4068 to double*
  %4076 = load double, double* %4075, align 1
  %4077 = getelementptr inbounds i8, i8* %4068, i64 8
  %4078 = bitcast i8* %4077 to i64*
  %4079 = load i64, i64* %4078, align 1
  %4080 = inttoptr i64 %4072 to double*
  %4081 = load double, double* %4080
  %4082 = fdiv double %4076, %4081
  %4083 = bitcast i8* %4067 to double*
  store double %4082, double* %4083, align 1, !tbaa !2453
  %4084 = getelementptr inbounds i8, i8* %4067, i64 8
  %4085 = bitcast i8* %4084 to i64*
  store i64 %4079, i64* %4085, align 1, !tbaa !2453
  %4086 = load i64, i64* %RBP
  %4087 = sub i64 %4086, 104
  %4088 = load i64, i64* %PC
  %4089 = add i64 %4088, 4
  store i64 %4089, i64* %PC
  %4090 = inttoptr i64 %4087 to i64*
  %4091 = load i64, i64* %4090
  store i64 %4091, i64* %RAX, align 8, !tbaa !2428
  %4092 = load i64, i64* %RBP
  %4093 = sub i64 %4092, 188
  %4094 = load i64, i64* %PC
  %4095 = add i64 %4094, 7
  store i64 %4095, i64* %PC
  %4096 = inttoptr i64 %4093 to i32*
  %4097 = load i32, i32* %4096
  %4098 = sext i32 %4097 to i64
  store i64 %4098, i64* %RCX, align 8, !tbaa !2428
  %4099 = load i64, i64* %RCX
  %4100 = load i64, i64* %PC
  %4101 = add i64 %4100, 7
  store i64 %4101, i64* %PC
  %4102 = sext i64 %4099 to i128
  %4103 = and i128 %4102, -18446744073709551616
  %4104 = zext i64 %4099 to i128
  %4105 = or i128 %4103, %4104
  %4106 = mul nsw i128 520, %4105
  %4107 = trunc i128 %4106 to i64
  store i64 %4107, i64* %RCX, align 8, !tbaa !2428
  %4108 = sext i64 %4107 to i128
  %4109 = icmp ne i128 %4108, %4106
  %4110 = zext i1 %4109 to i8
  %4111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4110, i8* %4111, align 1, !tbaa !2432
  %4112 = trunc i128 %4106 to i32
  %4113 = and i32 %4112, 255
  %4114 = call i32 @llvm.ctpop.i32(i32 %4113) #16
  %4115 = trunc i32 %4114 to i8
  %4116 = and i8 %4115, 1
  %4117 = xor i8 %4116, 1
  %4118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4117, i8* %4118, align 1, !tbaa !2446
  %4119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4119, align 1, !tbaa !2450
  %4120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4120, align 1, !tbaa !2447
  %4121 = lshr i64 %4107, 63
  %4122 = trunc i64 %4121 to i8
  %4123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4122, i8* %4123, align 1, !tbaa !2448
  %4124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4110, i8* %4124, align 1, !tbaa !2449
  %4125 = load i64, i64* %RAX
  %4126 = load i64, i64* %RCX
  %4127 = load i64, i64* %PC
  %4128 = add i64 %4127, 3
  store i64 %4128, i64* %PC
  %4129 = add i64 %4126, %4125
  store i64 %4129, i64* %RAX, align 8, !tbaa !2428
  %4130 = icmp ult i64 %4129, %4125
  %4131 = icmp ult i64 %4129, %4126
  %4132 = or i1 %4130, %4131
  %4133 = zext i1 %4132 to i8
  %4134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4133, i8* %4134, align 1, !tbaa !2432
  %4135 = trunc i64 %4129 to i32
  %4136 = and i32 %4135, 255
  %4137 = call i32 @llvm.ctpop.i32(i32 %4136) #16
  %4138 = trunc i32 %4137 to i8
  %4139 = and i8 %4138, 1
  %4140 = xor i8 %4139, 1
  %4141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4140, i8* %4141, align 1, !tbaa !2446
  %4142 = xor i64 %4126, %4125
  %4143 = xor i64 %4142, %4129
  %4144 = lshr i64 %4143, 4
  %4145 = trunc i64 %4144 to i8
  %4146 = and i8 %4145, 1
  %4147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4146, i8* %4147, align 1, !tbaa !2450
  %4148 = icmp eq i64 %4129, 0
  %4149 = zext i1 %4148 to i8
  %4150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4149, i8* %4150, align 1, !tbaa !2447
  %4151 = lshr i64 %4129, 63
  %4152 = trunc i64 %4151 to i8
  %4153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4152, i8* %4153, align 1, !tbaa !2448
  %4154 = lshr i64 %4125, 63
  %4155 = lshr i64 %4126, 63
  %4156 = xor i64 %4151, %4154
  %4157 = xor i64 %4151, %4155
  %4158 = add nuw nsw i64 %4156, %4157
  %4159 = icmp eq i64 %4158, 2
  %4160 = zext i1 %4159 to i8
  %4161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4160, i8* %4161, align 1, !tbaa !2449
  %4162 = load i64, i64* %RBP
  %4163 = sub i64 %4162, 192
  %4164 = load i64, i64* %PC
  %4165 = add i64 %4164, 7
  store i64 %4165, i64* %PC
  %4166 = inttoptr i64 %4163 to i32*
  %4167 = load i32, i32* %4166
  %4168 = sext i32 %4167 to i64
  store i64 %4168, i64* %RCX, align 8, !tbaa !2428
  %4169 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4171 = load i64, i64* %RAX
  %4172 = load i64, i64* %RCX
  %4173 = mul i64 %4172, 8
  %4174 = add i64 %4173, %4171
  %4175 = load i64, i64* %PC
  %4176 = add i64 %4175, 5
  store i64 %4176, i64* %PC
  %4177 = bitcast i8* %4170 to double*
  %4178 = load double, double* %4177, align 1
  %4179 = getelementptr inbounds i8, i8* %4170, i64 8
  %4180 = bitcast i8* %4179 to i64*
  %4181 = load i64, i64* %4180, align 1
  %4182 = inttoptr i64 %4174 to double*
  %4183 = load double, double* %4182
  %4184 = fmul double %4178, %4183
  %4185 = bitcast i8* %4169 to double*
  store double %4184, double* %4185, align 1, !tbaa !2453
  %4186 = getelementptr inbounds i8, i8* %4169, i64 8
  %4187 = bitcast i8* %4186 to i64*
  store i64 %4181, i64* %4187, align 1, !tbaa !2453
  %4188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4190 = bitcast %union.vec128_t* %XMM1 to i8*
  %4191 = load i64, i64* %PC
  %4192 = add i64 %4191, 4
  store i64 %4192, i64* %PC
  %4193 = bitcast i8* %4189 to double*
  %4194 = load double, double* %4193, align 1
  %4195 = getelementptr inbounds i8, i8* %4189, i64 8
  %4196 = bitcast i8* %4195 to i64*
  %4197 = load i64, i64* %4196, align 1
  %4198 = bitcast i8* %4190 to double*
  %4199 = load double, double* %4198, align 1
  %4200 = fadd double %4194, %4199
  %4201 = bitcast i8* %4188 to double*
  store double %4200, double* %4201, align 1, !tbaa !2453
  %4202 = getelementptr inbounds i8, i8* %4188, i64 8
  %4203 = bitcast i8* %4202 to i64*
  store i64 %4197, i64* %4203, align 1, !tbaa !2453
  %4204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4205 = load i64, i64* %RBP
  %4206 = sub i64 %4205, 64
  %4207 = load i64, i64* %PC
  %4208 = add i64 %4207, 5
  store i64 %4208, i64* %PC
  %4209 = inttoptr i64 %4206 to double*
  %4210 = load double, double* %4209
  %4211 = bitcast i8* %4204 to double*
  store double %4210, double* %4211, align 1, !tbaa !2453
  %4212 = getelementptr inbounds i8, i8* %4204, i64 8
  %4213 = bitcast i8* %4212 to double*
  store double 0.000000e+00, double* %4213, align 1, !tbaa !2453
  %4214 = load i64, i64* %RBP
  %4215 = sub i64 %4214, 144
  %4216 = load i64, i64* %PC
  %4217 = add i64 %4216, 7
  store i64 %4217, i64* %PC
  %4218 = inttoptr i64 %4215 to i64*
  %4219 = load i64, i64* %4218
  store i64 %4219, i64* %RAX, align 8, !tbaa !2428
  %4220 = load i64, i64* %RBP
  %4221 = sub i64 %4220, 188
  %4222 = load i64, i64* %PC
  %4223 = add i64 %4222, 7
  store i64 %4223, i64* %PC
  %4224 = inttoptr i64 %4221 to i32*
  %4225 = load i32, i32* %4224
  %4226 = sext i32 %4225 to i64
  store i64 %4226, i64* %RCX, align 8, !tbaa !2428
  %4227 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4229 = load i64, i64* %RAX
  %4230 = load i64, i64* %RCX
  %4231 = mul i64 %4230, 8
  %4232 = add i64 %4231, %4229
  %4233 = load i64, i64* %PC
  %4234 = add i64 %4233, 5
  store i64 %4234, i64* %PC
  %4235 = bitcast i8* %4228 to double*
  %4236 = load double, double* %4235, align 1
  %4237 = getelementptr inbounds i8, i8* %4228, i64 8
  %4238 = bitcast i8* %4237 to i64*
  %4239 = load i64, i64* %4238, align 1
  %4240 = inttoptr i64 %4232 to double*
  %4241 = load double, double* %4240
  %4242 = fmul double %4236, %4241
  %4243 = bitcast i8* %4227 to double*
  store double %4242, double* %4243, align 1, !tbaa !2453
  %4244 = getelementptr inbounds i8, i8* %4227, i64 8
  %4245 = bitcast i8* %4244 to i64*
  store i64 %4239, i64* %4245, align 1, !tbaa !2453
  %4246 = load i64, i64* %RBP
  %4247 = sub i64 %4246, 168
  %4248 = load i64, i64* %PC
  %4249 = add i64 %4248, 7
  store i64 %4249, i64* %PC
  %4250 = inttoptr i64 %4247 to i64*
  %4251 = load i64, i64* %4250
  store i64 %4251, i64* %RAX, align 8, !tbaa !2428
  %4252 = load i64, i64* %RBP
  %4253 = sub i64 %4252, 48
  %4254 = load i64, i64* %PC
  %4255 = add i64 %4254, 4
  store i64 %4255, i64* %PC
  %4256 = inttoptr i64 %4253 to i32*
  %4257 = load i32, i32* %4256
  %4258 = sext i32 %4257 to i64
  store i64 %4258, i64* %RCX, align 8, !tbaa !2428
  %4259 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4260 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4261 = load i64, i64* %RAX
  %4262 = load i64, i64* %RCX
  %4263 = mul i64 %4262, 8
  %4264 = add i64 %4263, %4261
  %4265 = load i64, i64* %PC
  %4266 = add i64 %4265, 5
  store i64 %4266, i64* %PC
  %4267 = bitcast i8* %4260 to double*
  %4268 = load double, double* %4267, align 1
  %4269 = getelementptr inbounds i8, i8* %4260, i64 8
  %4270 = bitcast i8* %4269 to i64*
  %4271 = load i64, i64* %4270, align 1
  %4272 = inttoptr i64 %4264 to double*
  %4273 = load double, double* %4272
  %4274 = fdiv double %4268, %4273
  %4275 = bitcast i8* %4259 to double*
  store double %4274, double* %4275, align 1, !tbaa !2453
  %4276 = getelementptr inbounds i8, i8* %4259, i64 8
  %4277 = bitcast i8* %4276 to i64*
  store i64 %4271, i64* %4277, align 1, !tbaa !2453
  %4278 = load i64, i64* %RBP
  %4279 = sub i64 %4278, 112
  %4280 = load i64, i64* %PC
  %4281 = add i64 %4280, 4
  store i64 %4281, i64* %PC
  %4282 = inttoptr i64 %4279 to i64*
  %4283 = load i64, i64* %4282
  store i64 %4283, i64* %RAX, align 8, !tbaa !2428
  %4284 = load i64, i64* %RBP
  %4285 = sub i64 %4284, 188
  %4286 = load i64, i64* %PC
  %4287 = add i64 %4286, 7
  store i64 %4287, i64* %PC
  %4288 = inttoptr i64 %4285 to i32*
  %4289 = load i32, i32* %4288
  %4290 = sext i32 %4289 to i64
  store i64 %4290, i64* %RCX, align 8, !tbaa !2428
  %4291 = load i64, i64* %RCX
  %4292 = load i64, i64* %PC
  %4293 = add i64 %4292, 7
  store i64 %4293, i64* %PC
  %4294 = sext i64 %4291 to i128
  %4295 = and i128 %4294, -18446744073709551616
  %4296 = zext i64 %4291 to i128
  %4297 = or i128 %4295, %4296
  %4298 = mul nsw i128 33800, %4297
  %4299 = trunc i128 %4298 to i64
  store i64 %4299, i64* %RCX, align 8, !tbaa !2428
  %4300 = sext i64 %4299 to i128
  %4301 = icmp ne i128 %4300, %4298
  %4302 = zext i1 %4301 to i8
  %4303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4302, i8* %4303, align 1, !tbaa !2432
  %4304 = trunc i128 %4298 to i32
  %4305 = and i32 %4304, 255
  %4306 = call i32 @llvm.ctpop.i32(i32 %4305) #16
  %4307 = trunc i32 %4306 to i8
  %4308 = and i8 %4307, 1
  %4309 = xor i8 %4308, 1
  %4310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4309, i8* %4310, align 1, !tbaa !2446
  %4311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4311, align 1, !tbaa !2450
  %4312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4312, align 1, !tbaa !2447
  %4313 = lshr i64 %4299, 63
  %4314 = trunc i64 %4313 to i8
  %4315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4314, i8* %4315, align 1, !tbaa !2448
  %4316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4302, i8* %4316, align 1, !tbaa !2449
  %4317 = load i64, i64* %RAX
  %4318 = load i64, i64* %RCX
  %4319 = load i64, i64* %PC
  %4320 = add i64 %4319, 3
  store i64 %4320, i64* %PC
  %4321 = add i64 %4318, %4317
  store i64 %4321, i64* %RAX, align 8, !tbaa !2428
  %4322 = icmp ult i64 %4321, %4317
  %4323 = icmp ult i64 %4321, %4318
  %4324 = or i1 %4322, %4323
  %4325 = zext i1 %4324 to i8
  %4326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4325, i8* %4326, align 1, !tbaa !2432
  %4327 = trunc i64 %4321 to i32
  %4328 = and i32 %4327, 255
  %4329 = call i32 @llvm.ctpop.i32(i32 %4328) #16
  %4330 = trunc i32 %4329 to i8
  %4331 = and i8 %4330, 1
  %4332 = xor i8 %4331, 1
  %4333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4332, i8* %4333, align 1, !tbaa !2446
  %4334 = xor i64 %4318, %4317
  %4335 = xor i64 %4334, %4321
  %4336 = lshr i64 %4335, 4
  %4337 = trunc i64 %4336 to i8
  %4338 = and i8 %4337, 1
  %4339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4338, i8* %4339, align 1, !tbaa !2450
  %4340 = icmp eq i64 %4321, 0
  %4341 = zext i1 %4340 to i8
  %4342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4341, i8* %4342, align 1, !tbaa !2447
  %4343 = lshr i64 %4321, 63
  %4344 = trunc i64 %4343 to i8
  %4345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4344, i8* %4345, align 1, !tbaa !2448
  %4346 = lshr i64 %4317, 63
  %4347 = lshr i64 %4318, 63
  %4348 = xor i64 %4343, %4346
  %4349 = xor i64 %4343, %4347
  %4350 = add nuw nsw i64 %4348, %4349
  %4351 = icmp eq i64 %4350, 2
  %4352 = zext i1 %4351 to i8
  %4353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4352, i8* %4353, align 1, !tbaa !2449
  %4354 = load i64, i64* %RBP
  %4355 = sub i64 %4354, 192
  %4356 = load i64, i64* %PC
  %4357 = add i64 %4356, 7
  store i64 %4357, i64* %PC
  %4358 = inttoptr i64 %4355 to i32*
  %4359 = load i32, i32* %4358
  %4360 = sext i32 %4359 to i64
  store i64 %4360, i64* %RCX, align 8, !tbaa !2428
  %4361 = load i64, i64* %RCX
  %4362 = load i64, i64* %PC
  %4363 = add i64 %4362, 7
  store i64 %4363, i64* %PC
  %4364 = sext i64 %4361 to i128
  %4365 = and i128 %4364, -18446744073709551616
  %4366 = zext i64 %4361 to i128
  %4367 = or i128 %4365, %4366
  %4368 = mul nsw i128 520, %4367
  %4369 = trunc i128 %4368 to i64
  store i64 %4369, i64* %RCX, align 8, !tbaa !2428
  %4370 = sext i64 %4369 to i128
  %4371 = icmp ne i128 %4370, %4368
  %4372 = zext i1 %4371 to i8
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4372, i8* %4373, align 1, !tbaa !2432
  %4374 = trunc i128 %4368 to i32
  %4375 = and i32 %4374, 255
  %4376 = call i32 @llvm.ctpop.i32(i32 %4375) #16
  %4377 = trunc i32 %4376 to i8
  %4378 = and i8 %4377, 1
  %4379 = xor i8 %4378, 1
  %4380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4379, i8* %4380, align 1, !tbaa !2446
  %4381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4381, align 1, !tbaa !2450
  %4382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4382, align 1, !tbaa !2447
  %4383 = lshr i64 %4369, 63
  %4384 = trunc i64 %4383 to i8
  %4385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4384, i8* %4385, align 1, !tbaa !2448
  %4386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4372, i8* %4386, align 1, !tbaa !2449
  %4387 = load i64, i64* %RAX
  %4388 = load i64, i64* %RCX
  %4389 = load i64, i64* %PC
  %4390 = add i64 %4389, 3
  store i64 %4390, i64* %PC
  %4391 = add i64 %4388, %4387
  store i64 %4391, i64* %RAX, align 8, !tbaa !2428
  %4392 = icmp ult i64 %4391, %4387
  %4393 = icmp ult i64 %4391, %4388
  %4394 = or i1 %4392, %4393
  %4395 = zext i1 %4394 to i8
  %4396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4395, i8* %4396, align 1, !tbaa !2432
  %4397 = trunc i64 %4391 to i32
  %4398 = and i32 %4397, 255
  %4399 = call i32 @llvm.ctpop.i32(i32 %4398) #16
  %4400 = trunc i32 %4399 to i8
  %4401 = and i8 %4400, 1
  %4402 = xor i8 %4401, 1
  %4403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4402, i8* %4403, align 1, !tbaa !2446
  %4404 = xor i64 %4388, %4387
  %4405 = xor i64 %4404, %4391
  %4406 = lshr i64 %4405, 4
  %4407 = trunc i64 %4406 to i8
  %4408 = and i8 %4407, 1
  %4409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4408, i8* %4409, align 1, !tbaa !2450
  %4410 = icmp eq i64 %4391, 0
  %4411 = zext i1 %4410 to i8
  %4412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4411, i8* %4412, align 1, !tbaa !2447
  %4413 = lshr i64 %4391, 63
  %4414 = trunc i64 %4413 to i8
  %4415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4414, i8* %4415, align 1, !tbaa !2448
  %4416 = lshr i64 %4387, 63
  %4417 = lshr i64 %4388, 63
  %4418 = xor i64 %4413, %4416
  %4419 = xor i64 %4413, %4417
  %4420 = add nuw nsw i64 %4418, %4419
  %4421 = icmp eq i64 %4420, 2
  %4422 = zext i1 %4421 to i8
  %4423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4422, i8* %4423, align 1, !tbaa !2449
  %4424 = load i64, i64* %RBP
  %4425 = sub i64 %4424, 48
  %4426 = load i64, i64* %PC
  %4427 = add i64 %4426, 4
  store i64 %4427, i64* %PC
  %4428 = inttoptr i64 %4425 to i32*
  %4429 = load i32, i32* %4428
  %4430 = sext i32 %4429 to i64
  store i64 %4430, i64* %RCX, align 8, !tbaa !2428
  %4431 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4432 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4433 = load i64, i64* %RAX
  %4434 = load i64, i64* %RCX
  %4435 = mul i64 %4434, 8
  %4436 = add i64 %4435, %4433
  %4437 = load i64, i64* %PC
  %4438 = add i64 %4437, 5
  store i64 %4438, i64* %PC
  %4439 = bitcast i8* %4432 to double*
  %4440 = load double, double* %4439, align 1
  %4441 = getelementptr inbounds i8, i8* %4432, i64 8
  %4442 = bitcast i8* %4441 to i64*
  %4443 = load i64, i64* %4442, align 1
  %4444 = inttoptr i64 %4436 to double*
  %4445 = load double, double* %4444
  %4446 = fmul double %4440, %4445
  %4447 = bitcast i8* %4431 to double*
  store double %4446, double* %4447, align 1, !tbaa !2453
  %4448 = getelementptr inbounds i8, i8* %4431, i64 8
  %4449 = bitcast i8* %4448 to i64*
  store i64 %4443, i64* %4449, align 1, !tbaa !2453
  %4450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4451 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4452 = bitcast %union.vec128_t* %XMM1 to i8*
  %4453 = load i64, i64* %PC
  %4454 = add i64 %4453, 4
  store i64 %4454, i64* %PC
  %4455 = bitcast i8* %4451 to double*
  %4456 = load double, double* %4455, align 1
  %4457 = getelementptr inbounds i8, i8* %4451, i64 8
  %4458 = bitcast i8* %4457 to i64*
  %4459 = load i64, i64* %4458, align 1
  %4460 = bitcast i8* %4452 to double*
  %4461 = load double, double* %4460, align 1
  %4462 = fsub double %4456, %4461
  %4463 = bitcast i8* %4450 to double*
  store double %4462, double* %4463, align 1, !tbaa !2453
  %4464 = getelementptr inbounds i8, i8* %4450, i64 8
  %4465 = bitcast i8* %4464 to i64*
  store i64 %4459, i64* %4465, align 1, !tbaa !2453
  %4466 = load i64, i64* %RBP
  %4467 = sub i64 %4466, 136
  %4468 = load i64, i64* %PC
  %4469 = add i64 %4468, 7
  store i64 %4469, i64* %PC
  %4470 = inttoptr i64 %4467 to i64*
  %4471 = load i64, i64* %4470
  store i64 %4471, i64* %RAX, align 8, !tbaa !2428
  %4472 = load i64, i64* %RBP
  %4473 = sub i64 %4472, 188
  %4474 = load i64, i64* %PC
  %4475 = add i64 %4474, 7
  store i64 %4475, i64* %PC
  %4476 = inttoptr i64 %4473 to i32*
  %4477 = load i32, i32* %4476
  %4478 = sext i32 %4477 to i64
  store i64 %4478, i64* %RCX, align 8, !tbaa !2428
  %4479 = load i64, i64* %RCX
  %4480 = load i64, i64* %PC
  %4481 = add i64 %4480, 7
  store i64 %4481, i64* %PC
  %4482 = sext i64 %4479 to i128
  %4483 = and i128 %4482, -18446744073709551616
  %4484 = zext i64 %4479 to i128
  %4485 = or i128 %4483, %4484
  %4486 = mul nsw i128 33800, %4485
  %4487 = trunc i128 %4486 to i64
  store i64 %4487, i64* %RCX, align 8, !tbaa !2428
  %4488 = sext i64 %4487 to i128
  %4489 = icmp ne i128 %4488, %4486
  %4490 = zext i1 %4489 to i8
  %4491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4490, i8* %4491, align 1, !tbaa !2432
  %4492 = trunc i128 %4486 to i32
  %4493 = and i32 %4492, 255
  %4494 = call i32 @llvm.ctpop.i32(i32 %4493) #16
  %4495 = trunc i32 %4494 to i8
  %4496 = and i8 %4495, 1
  %4497 = xor i8 %4496, 1
  %4498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4497, i8* %4498, align 1, !tbaa !2446
  %4499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4499, align 1, !tbaa !2450
  %4500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4500, align 1, !tbaa !2447
  %4501 = lshr i64 %4487, 63
  %4502 = trunc i64 %4501 to i8
  %4503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4502, i8* %4503, align 1, !tbaa !2448
  %4504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4490, i8* %4504, align 1, !tbaa !2449
  %4505 = load i64, i64* %RAX
  %4506 = load i64, i64* %RCX
  %4507 = load i64, i64* %PC
  %4508 = add i64 %4507, 3
  store i64 %4508, i64* %PC
  %4509 = add i64 %4506, %4505
  store i64 %4509, i64* %RAX, align 8, !tbaa !2428
  %4510 = icmp ult i64 %4509, %4505
  %4511 = icmp ult i64 %4509, %4506
  %4512 = or i1 %4510, %4511
  %4513 = zext i1 %4512 to i8
  %4514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4513, i8* %4514, align 1, !tbaa !2432
  %4515 = trunc i64 %4509 to i32
  %4516 = and i32 %4515, 255
  %4517 = call i32 @llvm.ctpop.i32(i32 %4516) #16
  %4518 = trunc i32 %4517 to i8
  %4519 = and i8 %4518, 1
  %4520 = xor i8 %4519, 1
  %4521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4520, i8* %4521, align 1, !tbaa !2446
  %4522 = xor i64 %4506, %4505
  %4523 = xor i64 %4522, %4509
  %4524 = lshr i64 %4523, 4
  %4525 = trunc i64 %4524 to i8
  %4526 = and i8 %4525, 1
  %4527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4526, i8* %4527, align 1, !tbaa !2450
  %4528 = icmp eq i64 %4509, 0
  %4529 = zext i1 %4528 to i8
  %4530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4529, i8* %4530, align 1, !tbaa !2447
  %4531 = lshr i64 %4509, 63
  %4532 = trunc i64 %4531 to i8
  %4533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4532, i8* %4533, align 1, !tbaa !2448
  %4534 = lshr i64 %4505, 63
  %4535 = lshr i64 %4506, 63
  %4536 = xor i64 %4531, %4534
  %4537 = xor i64 %4531, %4535
  %4538 = add nuw nsw i64 %4536, %4537
  %4539 = icmp eq i64 %4538, 2
  %4540 = zext i1 %4539 to i8
  %4541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4540, i8* %4541, align 1, !tbaa !2449
  %4542 = load i64, i64* %RBP
  %4543 = sub i64 %4542, 192
  %4544 = load i64, i64* %PC
  %4545 = add i64 %4544, 7
  store i64 %4545, i64* %PC
  %4546 = inttoptr i64 %4543 to i32*
  %4547 = load i32, i32* %4546
  %4548 = sext i32 %4547 to i64
  store i64 %4548, i64* %RCX, align 8, !tbaa !2428
  %4549 = load i64, i64* %RCX
  %4550 = load i64, i64* %PC
  %4551 = add i64 %4550, 7
  store i64 %4551, i64* %PC
  %4552 = sext i64 %4549 to i128
  %4553 = and i128 %4552, -18446744073709551616
  %4554 = zext i64 %4549 to i128
  %4555 = or i128 %4553, %4554
  %4556 = mul nsw i128 520, %4555
  %4557 = trunc i128 %4556 to i64
  store i64 %4557, i64* %RCX, align 8, !tbaa !2428
  %4558 = sext i64 %4557 to i128
  %4559 = icmp ne i128 %4558, %4556
  %4560 = zext i1 %4559 to i8
  %4561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4560, i8* %4561, align 1, !tbaa !2432
  %4562 = trunc i128 %4556 to i32
  %4563 = and i32 %4562, 255
  %4564 = call i32 @llvm.ctpop.i32(i32 %4563) #16
  %4565 = trunc i32 %4564 to i8
  %4566 = and i8 %4565, 1
  %4567 = xor i8 %4566, 1
  %4568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4567, i8* %4568, align 1, !tbaa !2446
  %4569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4569, align 1, !tbaa !2450
  %4570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4570, align 1, !tbaa !2447
  %4571 = lshr i64 %4557, 63
  %4572 = trunc i64 %4571 to i8
  %4573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4572, i8* %4573, align 1, !tbaa !2448
  %4574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4560, i8* %4574, align 1, !tbaa !2449
  %4575 = load i64, i64* %RAX
  %4576 = load i64, i64* %RCX
  %4577 = load i64, i64* %PC
  %4578 = add i64 %4577, 3
  store i64 %4578, i64* %PC
  %4579 = add i64 %4576, %4575
  store i64 %4579, i64* %RAX, align 8, !tbaa !2428
  %4580 = icmp ult i64 %4579, %4575
  %4581 = icmp ult i64 %4579, %4576
  %4582 = or i1 %4580, %4581
  %4583 = zext i1 %4582 to i8
  %4584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4583, i8* %4584, align 1, !tbaa !2432
  %4585 = trunc i64 %4579 to i32
  %4586 = and i32 %4585, 255
  %4587 = call i32 @llvm.ctpop.i32(i32 %4586) #16
  %4588 = trunc i32 %4587 to i8
  %4589 = and i8 %4588, 1
  %4590 = xor i8 %4589, 1
  %4591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4590, i8* %4591, align 1, !tbaa !2446
  %4592 = xor i64 %4576, %4575
  %4593 = xor i64 %4592, %4579
  %4594 = lshr i64 %4593, 4
  %4595 = trunc i64 %4594 to i8
  %4596 = and i8 %4595, 1
  %4597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4596, i8* %4597, align 1, !tbaa !2450
  %4598 = icmp eq i64 %4579, 0
  %4599 = zext i1 %4598 to i8
  %4600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4599, i8* %4600, align 1, !tbaa !2447
  %4601 = lshr i64 %4579, 63
  %4602 = trunc i64 %4601 to i8
  %4603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4602, i8* %4603, align 1, !tbaa !2448
  %4604 = lshr i64 %4575, 63
  %4605 = lshr i64 %4576, 63
  %4606 = xor i64 %4601, %4604
  %4607 = xor i64 %4601, %4605
  %4608 = add nuw nsw i64 %4606, %4607
  %4609 = icmp eq i64 %4608, 2
  %4610 = zext i1 %4609 to i8
  %4611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4610, i8* %4611, align 1, !tbaa !2449
  %4612 = load i64, i64* %RBP
  %4613 = sub i64 %4612, 48
  %4614 = load i64, i64* %PC
  %4615 = add i64 %4614, 4
  store i64 %4615, i64* %PC
  %4616 = inttoptr i64 %4613 to i32*
  %4617 = load i32, i32* %4616
  %4618 = sext i32 %4617 to i64
  store i64 %4618, i64* %RCX, align 8, !tbaa !2428
  %4619 = load i64, i64* %RAX
  %4620 = load i64, i64* %RCX
  %4621 = mul i64 %4620, 8
  %4622 = add i64 %4621, %4619
  %4623 = bitcast %union.vec128_t* %XMM0 to i8*
  %4624 = load i64, i64* %PC
  %4625 = add i64 %4624, 5
  store i64 %4625, i64* %PC
  %4626 = bitcast i8* %4623 to double*
  %4627 = load double, double* %4626, align 1
  %4628 = inttoptr i64 %4622 to double*
  store double %4627, double* %4628
  %4629 = load i64, i64* %RBP
  %4630 = sub i64 %4629, 104
  %4631 = load i64, i64* %PC
  %4632 = add i64 %4631, 4
  store i64 %4632, i64* %PC
  %4633 = inttoptr i64 %4630 to i64*
  %4634 = load i64, i64* %4633
  store i64 %4634, i64* %RAX, align 8, !tbaa !2428
  %4635 = load i64, i64* %RBP
  %4636 = sub i64 %4635, 188
  %4637 = load i64, i64* %PC
  %4638 = add i64 %4637, 7
  store i64 %4638, i64* %PC
  %4639 = inttoptr i64 %4636 to i32*
  %4640 = load i32, i32* %4639
  %4641 = sext i32 %4640 to i64
  store i64 %4641, i64* %RCX, align 8, !tbaa !2428
  %4642 = load i64, i64* %RCX
  %4643 = load i64, i64* %PC
  %4644 = add i64 %4643, 7
  store i64 %4644, i64* %PC
  %4645 = sext i64 %4642 to i128
  %4646 = and i128 %4645, -18446744073709551616
  %4647 = zext i64 %4642 to i128
  %4648 = or i128 %4646, %4647
  %4649 = mul nsw i128 520, %4648
  %4650 = trunc i128 %4649 to i64
  store i64 %4650, i64* %RCX, align 8, !tbaa !2428
  %4651 = sext i64 %4650 to i128
  %4652 = icmp ne i128 %4651, %4649
  %4653 = zext i1 %4652 to i8
  %4654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4653, i8* %4654, align 1, !tbaa !2432
  %4655 = trunc i128 %4649 to i32
  %4656 = and i32 %4655, 255
  %4657 = call i32 @llvm.ctpop.i32(i32 %4656) #16
  %4658 = trunc i32 %4657 to i8
  %4659 = and i8 %4658, 1
  %4660 = xor i8 %4659, 1
  %4661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4660, i8* %4661, align 1, !tbaa !2446
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4662, align 1, !tbaa !2450
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4663, align 1, !tbaa !2447
  %4664 = lshr i64 %4650, 63
  %4665 = trunc i64 %4664 to i8
  %4666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4665, i8* %4666, align 1, !tbaa !2448
  %4667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4653, i8* %4667, align 1, !tbaa !2449
  %4668 = load i64, i64* %RAX
  %4669 = load i64, i64* %RCX
  %4670 = load i64, i64* %PC
  %4671 = add i64 %4670, 3
  store i64 %4671, i64* %PC
  %4672 = add i64 %4669, %4668
  store i64 %4672, i64* %RAX, align 8, !tbaa !2428
  %4673 = icmp ult i64 %4672, %4668
  %4674 = icmp ult i64 %4672, %4669
  %4675 = or i1 %4673, %4674
  %4676 = zext i1 %4675 to i8
  %4677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4676, i8* %4677, align 1, !tbaa !2432
  %4678 = trunc i64 %4672 to i32
  %4679 = and i32 %4678, 255
  %4680 = call i32 @llvm.ctpop.i32(i32 %4679) #16
  %4681 = trunc i32 %4680 to i8
  %4682 = and i8 %4681, 1
  %4683 = xor i8 %4682, 1
  %4684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4683, i8* %4684, align 1, !tbaa !2446
  %4685 = xor i64 %4669, %4668
  %4686 = xor i64 %4685, %4672
  %4687 = lshr i64 %4686, 4
  %4688 = trunc i64 %4687 to i8
  %4689 = and i8 %4688, 1
  %4690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4689, i8* %4690, align 1, !tbaa !2450
  %4691 = icmp eq i64 %4672, 0
  %4692 = zext i1 %4691 to i8
  %4693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4692, i8* %4693, align 1, !tbaa !2447
  %4694 = lshr i64 %4672, 63
  %4695 = trunc i64 %4694 to i8
  %4696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4695, i8* %4696, align 1, !tbaa !2448
  %4697 = lshr i64 %4668, 63
  %4698 = lshr i64 %4669, 63
  %4699 = xor i64 %4694, %4697
  %4700 = xor i64 %4694, %4698
  %4701 = add nuw nsw i64 %4699, %4700
  %4702 = icmp eq i64 %4701, 2
  %4703 = zext i1 %4702 to i8
  %4704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4703, i8* %4704, align 1, !tbaa !2449
  %4705 = load i64, i64* %RBP
  %4706 = sub i64 %4705, 192
  %4707 = load i64, i64* %PC
  %4708 = add i64 %4707, 7
  store i64 %4708, i64* %PC
  %4709 = inttoptr i64 %4706 to i32*
  %4710 = load i32, i32* %4709
  %4711 = sext i32 %4710 to i64
  store i64 %4711, i64* %RCX, align 8, !tbaa !2428
  %4712 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4713 = load i64, i64* %RAX
  %4714 = load i64, i64* %RCX
  %4715 = mul i64 %4714, 8
  %4716 = add i64 %4715, %4713
  %4717 = load i64, i64* %PC
  %4718 = add i64 %4717, 5
  store i64 %4718, i64* %PC
  %4719 = inttoptr i64 %4716 to double*
  %4720 = load double, double* %4719
  %4721 = bitcast i8* %4712 to double*
  store double %4720, double* %4721, align 1, !tbaa !2453
  %4722 = getelementptr inbounds i8, i8* %4712, i64 8
  %4723 = bitcast i8* %4722 to double*
  store double 0.000000e+00, double* %4723, align 1, !tbaa !2453
  %4724 = load i64, i64* %RBP
  %4725 = sub i64 %4724, 112
  %4726 = load i64, i64* %PC
  %4727 = add i64 %4726, 4
  store i64 %4727, i64* %PC
  %4728 = inttoptr i64 %4725 to i64*
  %4729 = load i64, i64* %4728
  store i64 %4729, i64* %RAX, align 8, !tbaa !2428
  %4730 = load i64, i64* %RBP
  %4731 = sub i64 %4730, 188
  %4732 = load i64, i64* %PC
  %4733 = add i64 %4732, 7
  store i64 %4733, i64* %PC
  %4734 = inttoptr i64 %4731 to i32*
  %4735 = load i32, i32* %4734
  %4736 = sext i32 %4735 to i64
  store i64 %4736, i64* %RCX, align 8, !tbaa !2428
  %4737 = load i64, i64* %RCX
  %4738 = load i64, i64* %PC
  %4739 = add i64 %4738, 7
  store i64 %4739, i64* %PC
  %4740 = sext i64 %4737 to i128
  %4741 = and i128 %4740, -18446744073709551616
  %4742 = zext i64 %4737 to i128
  %4743 = or i128 %4741, %4742
  %4744 = mul nsw i128 33800, %4743
  %4745 = trunc i128 %4744 to i64
  store i64 %4745, i64* %RCX, align 8, !tbaa !2428
  %4746 = sext i64 %4745 to i128
  %4747 = icmp ne i128 %4746, %4744
  %4748 = zext i1 %4747 to i8
  %4749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4748, i8* %4749, align 1, !tbaa !2432
  %4750 = trunc i128 %4744 to i32
  %4751 = and i32 %4750, 255
  %4752 = call i32 @llvm.ctpop.i32(i32 %4751) #16
  %4753 = trunc i32 %4752 to i8
  %4754 = and i8 %4753, 1
  %4755 = xor i8 %4754, 1
  %4756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4755, i8* %4756, align 1, !tbaa !2446
  %4757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4757, align 1, !tbaa !2450
  %4758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4758, align 1, !tbaa !2447
  %4759 = lshr i64 %4745, 63
  %4760 = trunc i64 %4759 to i8
  %4761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4760, i8* %4761, align 1, !tbaa !2448
  %4762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4748, i8* %4762, align 1, !tbaa !2449
  %4763 = load i64, i64* %RAX
  %4764 = load i64, i64* %RCX
  %4765 = load i64, i64* %PC
  %4766 = add i64 %4765, 3
  store i64 %4766, i64* %PC
  %4767 = add i64 %4764, %4763
  store i64 %4767, i64* %RAX, align 8, !tbaa !2428
  %4768 = icmp ult i64 %4767, %4763
  %4769 = icmp ult i64 %4767, %4764
  %4770 = or i1 %4768, %4769
  %4771 = zext i1 %4770 to i8
  %4772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4771, i8* %4772, align 1, !tbaa !2432
  %4773 = trunc i64 %4767 to i32
  %4774 = and i32 %4773, 255
  %4775 = call i32 @llvm.ctpop.i32(i32 %4774) #16
  %4776 = trunc i32 %4775 to i8
  %4777 = and i8 %4776, 1
  %4778 = xor i8 %4777, 1
  %4779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4778, i8* %4779, align 1, !tbaa !2446
  %4780 = xor i64 %4764, %4763
  %4781 = xor i64 %4780, %4767
  %4782 = lshr i64 %4781, 4
  %4783 = trunc i64 %4782 to i8
  %4784 = and i8 %4783, 1
  %4785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4784, i8* %4785, align 1, !tbaa !2450
  %4786 = icmp eq i64 %4767, 0
  %4787 = zext i1 %4786 to i8
  %4788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4787, i8* %4788, align 1, !tbaa !2447
  %4789 = lshr i64 %4767, 63
  %4790 = trunc i64 %4789 to i8
  %4791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4790, i8* %4791, align 1, !tbaa !2448
  %4792 = lshr i64 %4763, 63
  %4793 = lshr i64 %4764, 63
  %4794 = xor i64 %4789, %4792
  %4795 = xor i64 %4789, %4793
  %4796 = add nuw nsw i64 %4794, %4795
  %4797 = icmp eq i64 %4796, 2
  %4798 = zext i1 %4797 to i8
  %4799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4798, i8* %4799, align 1, !tbaa !2449
  %4800 = load i64, i64* %RBP
  %4801 = sub i64 %4800, 192
  %4802 = load i64, i64* %PC
  %4803 = add i64 %4802, 7
  store i64 %4803, i64* %PC
  %4804 = inttoptr i64 %4801 to i32*
  %4805 = load i32, i32* %4804
  %4806 = sext i32 %4805 to i64
  store i64 %4806, i64* %RCX, align 8, !tbaa !2428
  %4807 = load i64, i64* %RCX
  %4808 = load i64, i64* %PC
  %4809 = add i64 %4808, 7
  store i64 %4809, i64* %PC
  %4810 = sext i64 %4807 to i128
  %4811 = and i128 %4810, -18446744073709551616
  %4812 = zext i64 %4807 to i128
  %4813 = or i128 %4811, %4812
  %4814 = mul nsw i128 520, %4813
  %4815 = trunc i128 %4814 to i64
  store i64 %4815, i64* %RCX, align 8, !tbaa !2428
  %4816 = sext i64 %4815 to i128
  %4817 = icmp ne i128 %4816, %4814
  %4818 = zext i1 %4817 to i8
  %4819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4818, i8* %4819, align 1, !tbaa !2432
  %4820 = trunc i128 %4814 to i32
  %4821 = and i32 %4820, 255
  %4822 = call i32 @llvm.ctpop.i32(i32 %4821) #16
  %4823 = trunc i32 %4822 to i8
  %4824 = and i8 %4823, 1
  %4825 = xor i8 %4824, 1
  %4826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4825, i8* %4826, align 1, !tbaa !2446
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4827, align 1, !tbaa !2450
  %4828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4828, align 1, !tbaa !2447
  %4829 = lshr i64 %4815, 63
  %4830 = trunc i64 %4829 to i8
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4830, i8* %4831, align 1, !tbaa !2448
  %4832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4818, i8* %4832, align 1, !tbaa !2449
  %4833 = load i64, i64* %RAX
  %4834 = load i64, i64* %RCX
  %4835 = load i64, i64* %PC
  %4836 = add i64 %4835, 3
  store i64 %4836, i64* %PC
  %4837 = add i64 %4834, %4833
  store i64 %4837, i64* %RAX, align 8, !tbaa !2428
  %4838 = icmp ult i64 %4837, %4833
  %4839 = icmp ult i64 %4837, %4834
  %4840 = or i1 %4838, %4839
  %4841 = zext i1 %4840 to i8
  %4842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4841, i8* %4842, align 1, !tbaa !2432
  %4843 = trunc i64 %4837 to i32
  %4844 = and i32 %4843, 255
  %4845 = call i32 @llvm.ctpop.i32(i32 %4844) #16
  %4846 = trunc i32 %4845 to i8
  %4847 = and i8 %4846, 1
  %4848 = xor i8 %4847, 1
  %4849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4848, i8* %4849, align 1, !tbaa !2446
  %4850 = xor i64 %4834, %4833
  %4851 = xor i64 %4850, %4837
  %4852 = lshr i64 %4851, 4
  %4853 = trunc i64 %4852 to i8
  %4854 = and i8 %4853, 1
  %4855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4854, i8* %4855, align 1, !tbaa !2450
  %4856 = icmp eq i64 %4837, 0
  %4857 = zext i1 %4856 to i8
  %4858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4857, i8* %4858, align 1, !tbaa !2447
  %4859 = lshr i64 %4837, 63
  %4860 = trunc i64 %4859 to i8
  %4861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4860, i8* %4861, align 1, !tbaa !2448
  %4862 = lshr i64 %4833, 63
  %4863 = lshr i64 %4834, 63
  %4864 = xor i64 %4859, %4862
  %4865 = xor i64 %4859, %4863
  %4866 = add nuw nsw i64 %4864, %4865
  %4867 = icmp eq i64 %4866, 2
  %4868 = zext i1 %4867 to i8
  %4869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4868, i8* %4869, align 1, !tbaa !2449
  %4870 = load i64, i64* %RBP
  %4871 = sub i64 %4870, 48
  %4872 = load i64, i64* %PC
  %4873 = add i64 %4872, 4
  store i64 %4873, i64* %PC
  %4874 = inttoptr i64 %4871 to i32*
  %4875 = load i32, i32* %4874
  %4876 = sext i32 %4875 to i64
  store i64 %4876, i64* %RCX, align 8, !tbaa !2428
  %4877 = load i64, i64* %RAX
  %4878 = load i64, i64* %RCX
  %4879 = mul i64 %4878, 8
  %4880 = add i64 %4879, %4877
  %4881 = bitcast %union.vec128_t* %XMM0 to i8*
  %4882 = load i64, i64* %PC
  %4883 = add i64 %4882, 5
  store i64 %4883, i64* %PC
  %4884 = bitcast i8* %4881 to double*
  %4885 = load double, double* %4884, align 1
  %4886 = inttoptr i64 %4880 to double*
  store double %4885, double* %4886
  %4887 = load i64, i64* %RBP
  %4888 = sub i64 %4887, 196
  %4889 = load i64, i64* %PC
  %4890 = add i64 %4889, 10
  store i64 %4890, i64* %PC
  %4891 = inttoptr i64 %4888 to i32*
  store i32 0, i32* %4891
  br label %block_4029d0

block_402331:                                     ; preds = %block_402fe2, %block_402260
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402260 ], [ %MEMORY.1, %block_402fe2 ]
  %4892 = load i64, i64* %RBP
  %4893 = sub i64 %4892, 188
  %4894 = load i64, i64* %PC
  %4895 = add i64 %4894, 6
  store i64 %4895, i64* %PC
  %4896 = inttoptr i64 %4893 to i32*
  %4897 = load i32, i32* %4896
  %4898 = zext i32 %4897 to i64
  store i64 %4898, i64* %RAX, align 8, !tbaa !2428
  %4899 = load i32, i32* %EAX
  %4900 = zext i32 %4899 to i64
  %4901 = load i64, i64* %RBP
  %4902 = sub i64 %4901, 44
  %4903 = load i64, i64* %PC
  %4904 = add i64 %4903, 3
  store i64 %4904, i64* %PC
  %4905 = inttoptr i64 %4902 to i32*
  %4906 = load i32, i32* %4905
  %4907 = sub i32 %4899, %4906
  %4908 = icmp ult i32 %4899, %4906
  %4909 = zext i1 %4908 to i8
  %4910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4909, i8* %4910, align 1, !tbaa !2432
  %4911 = and i32 %4907, 255
  %4912 = call i32 @llvm.ctpop.i32(i32 %4911) #16
  %4913 = trunc i32 %4912 to i8
  %4914 = and i8 %4913, 1
  %4915 = xor i8 %4914, 1
  %4916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4915, i8* %4916, align 1, !tbaa !2446
  %4917 = xor i32 %4906, %4899
  %4918 = xor i32 %4917, %4907
  %4919 = lshr i32 %4918, 4
  %4920 = trunc i32 %4919 to i8
  %4921 = and i8 %4920, 1
  %4922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4921, i8* %4922, align 1, !tbaa !2450
  %4923 = icmp eq i32 %4907, 0
  %4924 = zext i1 %4923 to i8
  %4925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4924, i8* %4925, align 1, !tbaa !2447
  %4926 = lshr i32 %4907, 31
  %4927 = trunc i32 %4926 to i8
  %4928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4927, i8* %4928, align 1, !tbaa !2448
  %4929 = lshr i32 %4899, 31
  %4930 = lshr i32 %4906, 31
  %4931 = xor i32 %4930, %4929
  %4932 = xor i32 %4926, %4929
  %4933 = add nuw nsw i32 %4932, %4931
  %4934 = icmp eq i32 %4933, 2
  %4935 = zext i1 %4934 to i8
  %4936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4935, i8* %4936, align 1, !tbaa !2449
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 3265
  %4939 = load i64, i64* %PC
  %4940 = add i64 %4939, 6
  %4941 = load i64, i64* %PC
  %4942 = add i64 %4941, 6
  store i64 %4942, i64* %PC
  %4943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4944 = load i8, i8* %4943, align 1, !tbaa !2448
  %4945 = icmp ne i8 %4944, 0
  %4946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4947 = load i8, i8* %4946, align 1, !tbaa !2449
  %4948 = icmp ne i8 %4947, 0
  %4949 = xor i1 %4945, %4948
  %4950 = xor i1 %4949, true
  %4951 = zext i1 %4950 to i8
  store i8 %4951, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4953 = select i1 %4949, i64 %4940, i64 %4938
  store i64 %4953, i64* %4952, align 8, !tbaa !2428
  %4954 = load i8, i8* %BRANCH_TAKEN
  %4955 = icmp eq i8 %4954, 1
  br i1 %4955, label %block_402ffb, label %block_402340

block_402fe2:                                     ; preds = %block_40234a
  %4956 = load i64, i64* %PC
  %4957 = add i64 %4956, 5
  %4958 = load i64, i64* %PC
  %4959 = add i64 %4958, 5
  store i64 %4959, i64* %PC
  %4960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4957, i64* %4960, align 8, !tbaa !2428
  %4961 = load i64, i64* %RBP
  %4962 = sub i64 %4961, 188
  %4963 = load i64, i64* %PC
  %4964 = add i64 %4963, 6
  store i64 %4964, i64* %PC
  %4965 = inttoptr i64 %4962 to i32*
  %4966 = load i32, i32* %4965
  %4967 = zext i32 %4966 to i64
  store i64 %4967, i64* %RAX, align 8, !tbaa !2428
  %4968 = load i64, i64* %RAX
  %4969 = load i64, i64* %PC
  %4970 = add i64 %4969, 3
  store i64 %4970, i64* %PC
  %4971 = trunc i64 %4968 to i32
  %4972 = add i32 1, %4971
  %4973 = zext i32 %4972 to i64
  store i64 %4973, i64* %RAX, align 8, !tbaa !2428
  %4974 = icmp ult i32 %4972, %4971
  %4975 = icmp ult i32 %4972, 1
  %4976 = or i1 %4974, %4975
  %4977 = zext i1 %4976 to i8
  %4978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4977, i8* %4978, align 1, !tbaa !2432
  %4979 = and i32 %4972, 255
  %4980 = call i32 @llvm.ctpop.i32(i32 %4979) #16
  %4981 = trunc i32 %4980 to i8
  %4982 = and i8 %4981, 1
  %4983 = xor i8 %4982, 1
  %4984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4983, i8* %4984, align 1, !tbaa !2446
  %4985 = xor i64 1, %4968
  %4986 = trunc i64 %4985 to i32
  %4987 = xor i32 %4986, %4972
  %4988 = lshr i32 %4987, 4
  %4989 = trunc i32 %4988 to i8
  %4990 = and i8 %4989, 1
  %4991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4990, i8* %4991, align 1, !tbaa !2450
  %4992 = icmp eq i32 %4972, 0
  %4993 = zext i1 %4992 to i8
  %4994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4993, i8* %4994, align 1, !tbaa !2447
  %4995 = lshr i32 %4972, 31
  %4996 = trunc i32 %4995 to i8
  %4997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4996, i8* %4997, align 1, !tbaa !2448
  %4998 = lshr i32 %4971, 31
  %4999 = xor i32 %4995, %4998
  %5000 = add nuw nsw i32 %4999, %4995
  %5001 = icmp eq i32 %5000, 2
  %5002 = zext i1 %5001 to i8
  %5003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5002, i8* %5003, align 1, !tbaa !2449
  %5004 = load i64, i64* %RBP
  %5005 = sub i64 %5004, 188
  %5006 = load i32, i32* %EAX
  %5007 = zext i32 %5006 to i64
  %5008 = load i64, i64* %PC
  %5009 = add i64 %5008, 6
  store i64 %5009, i64* %PC
  %5010 = inttoptr i64 %5005 to i32*
  store i32 %5006, i32* %5010
  %5011 = load i64, i64* %PC
  %5012 = sub i64 %5011, 3269
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 5
  store i64 %5014, i64* %PC
  %5015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5012, i64* %5015, align 8, !tbaa !2428
  br label %block_402331

block_40234a:                                     ; preds = %block_402340, %block_402d02
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_402340 ], [ %MEMORY.3, %block_402d02 ]
  %5016 = load i64, i64* %RBP
  %5017 = sub i64 %5016, 192
  %5018 = load i64, i64* %PC
  %5019 = add i64 %5018, 6
  store i64 %5019, i64* %PC
  %5020 = inttoptr i64 %5017 to i32*
  %5021 = load i32, i32* %5020
  %5022 = zext i32 %5021 to i64
  store i64 %5022, i64* %RAX, align 8, !tbaa !2428
  %5023 = load i32, i32* %EAX
  %5024 = zext i32 %5023 to i64
  %5025 = load i64, i64* %RBP
  %5026 = sub i64 %5025, 52
  %5027 = load i64, i64* %PC
  %5028 = add i64 %5027, 3
  store i64 %5028, i64* %PC
  %5029 = inttoptr i64 %5026 to i32*
  %5030 = load i32, i32* %5029
  %5031 = sub i32 %5023, %5030
  %5032 = icmp ult i32 %5023, %5030
  %5033 = zext i1 %5032 to i8
  %5034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5033, i8* %5034, align 1, !tbaa !2432
  %5035 = and i32 %5031, 255
  %5036 = call i32 @llvm.ctpop.i32(i32 %5035) #16
  %5037 = trunc i32 %5036 to i8
  %5038 = and i8 %5037, 1
  %5039 = xor i8 %5038, 1
  %5040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5039, i8* %5040, align 1, !tbaa !2446
  %5041 = xor i32 %5030, %5023
  %5042 = xor i32 %5041, %5031
  %5043 = lshr i32 %5042, 4
  %5044 = trunc i32 %5043 to i8
  %5045 = and i8 %5044, 1
  %5046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5045, i8* %5046, align 1, !tbaa !2450
  %5047 = icmp eq i32 %5031, 0
  %5048 = zext i1 %5047 to i8
  %5049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5048, i8* %5049, align 1, !tbaa !2447
  %5050 = lshr i32 %5031, 31
  %5051 = trunc i32 %5050 to i8
  %5052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5051, i8* %5052, align 1, !tbaa !2448
  %5053 = lshr i32 %5023, 31
  %5054 = lshr i32 %5030, 31
  %5055 = xor i32 %5054, %5053
  %5056 = xor i32 %5050, %5053
  %5057 = add nuw nsw i32 %5056, %5055
  %5058 = icmp eq i32 %5057, 2
  %5059 = zext i1 %5058 to i8
  %5060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5059, i8* %5060, align 1, !tbaa !2449
  %5061 = load i64, i64* %PC
  %5062 = add i64 %5061, 3215
  %5063 = load i64, i64* %PC
  %5064 = add i64 %5063, 6
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 6
  store i64 %5066, i64* %PC
  %5067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5068 = load i8, i8* %5067, align 1, !tbaa !2448
  %5069 = icmp ne i8 %5068, 0
  %5070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5071 = load i8, i8* %5070, align 1, !tbaa !2449
  %5072 = icmp ne i8 %5071, 0
  %5073 = xor i1 %5069, %5072
  %5074 = xor i1 %5073, true
  %5075 = zext i1 %5074 to i8
  store i8 %5075, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5077 = select i1 %5073, i64 %5064, i64 %5062
  store i64 %5077, i64* %5076, align 8, !tbaa !2428
  %5078 = load i8, i8* %BRANCH_TAKEN
  %5079 = icmp eq i8 %5078, 1
  br i1 %5079, label %block_402fe2, label %block_402359

block_402363:                                     ; preds = %block_402372, %block_402359
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_402359 ], [ %MEMORY.2, %block_402372 ]
  %5080 = load i64, i64* %RBP
  %5081 = sub i64 %5080, 196
  %5082 = load i64, i64* %PC
  %5083 = add i64 %5082, 6
  store i64 %5083, i64* %PC
  %5084 = inttoptr i64 %5081 to i32*
  %5085 = load i32, i32* %5084
  %5086 = zext i32 %5085 to i64
  store i64 %5086, i64* %RAX, align 8, !tbaa !2428
  %5087 = load i32, i32* %EAX
  %5088 = zext i32 %5087 to i64
  %5089 = load i64, i64* %RBP
  %5090 = sub i64 %5089, 48
  %5091 = load i64, i64* %PC
  %5092 = add i64 %5091, 3
  store i64 %5092, i64* %PC
  %5093 = inttoptr i64 %5090 to i32*
  %5094 = load i32, i32* %5093
  %5095 = sub i32 %5087, %5094
  %5096 = icmp ult i32 %5087, %5094
  %5097 = zext i1 %5096 to i8
  %5098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5097, i8* %5098, align 1, !tbaa !2432
  %5099 = and i32 %5095, 255
  %5100 = call i32 @llvm.ctpop.i32(i32 %5099) #16
  %5101 = trunc i32 %5100 to i8
  %5102 = and i8 %5101, 1
  %5103 = xor i8 %5102, 1
  %5104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5103, i8* %5104, align 1, !tbaa !2446
  %5105 = xor i32 %5094, %5087
  %5106 = xor i32 %5105, %5095
  %5107 = lshr i32 %5106, 4
  %5108 = trunc i32 %5107 to i8
  %5109 = and i8 %5108, 1
  %5110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5109, i8* %5110, align 1, !tbaa !2450
  %5111 = icmp eq i32 %5095, 0
  %5112 = zext i1 %5111 to i8
  %5113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5112, i8* %5113, align 1, !tbaa !2447
  %5114 = lshr i32 %5095, 31
  %5115 = trunc i32 %5114 to i8
  %5116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5115, i8* %5116, align 1, !tbaa !2448
  %5117 = lshr i32 %5087, 31
  %5118 = lshr i32 %5094, 31
  %5119 = xor i32 %5118, %5117
  %5120 = xor i32 %5114, %5117
  %5121 = add nuw nsw i32 %5120, %5119
  %5122 = icmp eq i32 %5121, 2
  %5123 = zext i1 %5122 to i8
  %5124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5123, i8* %5124, align 1, !tbaa !2449
  %5125 = load i64, i64* %PC
  %5126 = add i64 %5125, 855
  %5127 = load i64, i64* %PC
  %5128 = add i64 %5127, 6
  %5129 = load i64, i64* %PC
  %5130 = add i64 %5129, 6
  store i64 %5130, i64* %PC
  %5131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5132 = load i8, i8* %5131, align 1, !tbaa !2448
  %5133 = icmp ne i8 %5132, 0
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5135 = load i8, i8* %5134, align 1, !tbaa !2449
  %5136 = icmp ne i8 %5135, 0
  %5137 = xor i1 %5133, %5136
  %5138 = xor i1 %5137, true
  %5139 = zext i1 %5138 to i8
  store i8 %5139, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5141 = select i1 %5137, i64 %5128, i64 %5126
  store i64 %5141, i64* %5140, align 8, !tbaa !2428
  %5142 = load i8, i8* %BRANCH_TAKEN
  %5143 = icmp eq i8 %5142, 1
  %5144 = load i64, i64* %RBP
  %5145 = sub i64 %5144, 120
  %5146 = load i64, i64* %PC
  %5147 = add i64 %5146, 4
  store i64 %5147, i64* %PC
  %5148 = inttoptr i64 %5145 to i64*
  %5149 = load i64, i64* %5148
  store i64 %5149, i64* %RAX, align 8, !tbaa !2428
  %5150 = load i64, i64* %RBP
  %5151 = sub i64 %5150, 188
  %5152 = load i64, i64* %PC
  %5153 = add i64 %5152, 7
  store i64 %5153, i64* %PC
  %5154 = inttoptr i64 %5151 to i32*
  %5155 = load i32, i32* %5154
  %5156 = sext i32 %5155 to i64
  store i64 %5156, i64* %RCX, align 8, !tbaa !2428
  %5157 = load i64, i64* %RCX
  %5158 = load i64, i64* %PC
  %5159 = add i64 %5158, 7
  store i64 %5159, i64* %PC
  %5160 = sext i64 %5157 to i128
  %5161 = and i128 %5160, -18446744073709551616
  %5162 = zext i64 %5157 to i128
  %5163 = or i128 %5161, %5162
  %5164 = mul nsw i128 33800, %5163
  %5165 = trunc i128 %5164 to i64
  store i64 %5165, i64* %RCX, align 8, !tbaa !2428
  %5166 = sext i64 %5165 to i128
  %5167 = icmp ne i128 %5166, %5164
  %5168 = zext i1 %5167 to i8
  %5169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5168, i8* %5169, align 1, !tbaa !2432
  %5170 = trunc i128 %5164 to i32
  %5171 = and i32 %5170, 255
  %5172 = call i32 @llvm.ctpop.i32(i32 %5171) #16
  %5173 = trunc i32 %5172 to i8
  %5174 = and i8 %5173, 1
  %5175 = xor i8 %5174, 1
  %5176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5175, i8* %5176, align 1, !tbaa !2446
  %5177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5177, align 1, !tbaa !2450
  %5178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5178, align 1, !tbaa !2447
  %5179 = lshr i64 %5165, 63
  %5180 = trunc i64 %5179 to i8
  %5181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5180, i8* %5181, align 1, !tbaa !2448
  %5182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5168, i8* %5182, align 1, !tbaa !2449
  %5183 = load i64, i64* %RAX
  %5184 = load i64, i64* %RCX
  %5185 = load i64, i64* %PC
  %5186 = add i64 %5185, 3
  store i64 %5186, i64* %PC
  %5187 = add i64 %5184, %5183
  store i64 %5187, i64* %RAX, align 8, !tbaa !2428
  %5188 = icmp ult i64 %5187, %5183
  %5189 = icmp ult i64 %5187, %5184
  %5190 = or i1 %5188, %5189
  %5191 = zext i1 %5190 to i8
  %5192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5191, i8* %5192, align 1, !tbaa !2432
  %5193 = trunc i64 %5187 to i32
  %5194 = and i32 %5193, 255
  %5195 = call i32 @llvm.ctpop.i32(i32 %5194) #16
  %5196 = trunc i32 %5195 to i8
  %5197 = and i8 %5196, 1
  %5198 = xor i8 %5197, 1
  %5199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5198, i8* %5199, align 1, !tbaa !2446
  %5200 = xor i64 %5184, %5183
  %5201 = xor i64 %5200, %5187
  %5202 = lshr i64 %5201, 4
  %5203 = trunc i64 %5202 to i8
  %5204 = and i8 %5203, 1
  %5205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5204, i8* %5205, align 1, !tbaa !2450
  %5206 = icmp eq i64 %5187, 0
  %5207 = zext i1 %5206 to i8
  %5208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5207, i8* %5208, align 1, !tbaa !2447
  %5209 = lshr i64 %5187, 63
  %5210 = trunc i64 %5209 to i8
  %5211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5210, i8* %5211, align 1, !tbaa !2448
  %5212 = lshr i64 %5183, 63
  %5213 = lshr i64 %5184, 63
  %5214 = xor i64 %5209, %5212
  %5215 = xor i64 %5209, %5213
  %5216 = add nuw nsw i64 %5214, %5215
  %5217 = icmp eq i64 %5216, 2
  %5218 = zext i1 %5217 to i8
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5218, i8* %5219, align 1, !tbaa !2449
  %5220 = load i64, i64* %RBP
  %5221 = sub i64 %5220, 192
  %5222 = load i64, i64* %PC
  %5223 = add i64 %5222, 7
  store i64 %5223, i64* %PC
  %5224 = inttoptr i64 %5221 to i32*
  %5225 = load i32, i32* %5224
  %5226 = sext i32 %5225 to i64
  store i64 %5226, i64* %RCX, align 8, !tbaa !2428
  %5227 = load i64, i64* %RCX
  %5228 = load i64, i64* %PC
  %5229 = add i64 %5228, 7
  store i64 %5229, i64* %PC
  %5230 = sext i64 %5227 to i128
  %5231 = and i128 %5230, -18446744073709551616
  %5232 = zext i64 %5227 to i128
  %5233 = or i128 %5231, %5232
  %5234 = mul nsw i128 520, %5233
  %5235 = trunc i128 %5234 to i64
  store i64 %5235, i64* %RCX, align 8, !tbaa !2428
  %5236 = sext i64 %5235 to i128
  %5237 = icmp ne i128 %5236, %5234
  %5238 = zext i1 %5237 to i8
  %5239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5238, i8* %5239, align 1, !tbaa !2432
  %5240 = trunc i128 %5234 to i32
  %5241 = and i32 %5240, 255
  %5242 = call i32 @llvm.ctpop.i32(i32 %5241) #16
  %5243 = trunc i32 %5242 to i8
  %5244 = and i8 %5243, 1
  %5245 = xor i8 %5244, 1
  %5246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5245, i8* %5246, align 1, !tbaa !2446
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5247, align 1, !tbaa !2450
  %5248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5248, align 1, !tbaa !2447
  %5249 = lshr i64 %5235, 63
  %5250 = trunc i64 %5249 to i8
  %5251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5250, i8* %5251, align 1, !tbaa !2448
  %5252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5238, i8* %5252, align 1, !tbaa !2449
  %5253 = load i64, i64* %RAX
  %5254 = load i64, i64* %RCX
  %5255 = load i64, i64* %PC
  %5256 = add i64 %5255, 3
  store i64 %5256, i64* %PC
  %5257 = add i64 %5254, %5253
  store i64 %5257, i64* %RAX, align 8, !tbaa !2428
  %5258 = icmp ult i64 %5257, %5253
  %5259 = icmp ult i64 %5257, %5254
  %5260 = or i1 %5258, %5259
  %5261 = zext i1 %5260 to i8
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5261, i8* %5262, align 1, !tbaa !2432
  %5263 = trunc i64 %5257 to i32
  %5264 = and i32 %5263, 255
  %5265 = call i32 @llvm.ctpop.i32(i32 %5264) #16
  %5266 = trunc i32 %5265 to i8
  %5267 = and i8 %5266, 1
  %5268 = xor i8 %5267, 1
  %5269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5268, i8* %5269, align 1, !tbaa !2446
  %5270 = xor i64 %5254, %5253
  %5271 = xor i64 %5270, %5257
  %5272 = lshr i64 %5271, 4
  %5273 = trunc i64 %5272 to i8
  %5274 = and i8 %5273, 1
  %5275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5274, i8* %5275, align 1, !tbaa !2450
  %5276 = icmp eq i64 %5257, 0
  %5277 = zext i1 %5276 to i8
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5277, i8* %5278, align 1, !tbaa !2447
  %5279 = lshr i64 %5257, 63
  %5280 = trunc i64 %5279 to i8
  %5281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5280, i8* %5281, align 1, !tbaa !2448
  %5282 = lshr i64 %5253, 63
  %5283 = lshr i64 %5254, 63
  %5284 = xor i64 %5279, %5282
  %5285 = xor i64 %5279, %5283
  %5286 = add nuw nsw i64 %5284, %5285
  %5287 = icmp eq i64 %5286, 2
  %5288 = zext i1 %5287 to i8
  %5289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5288, i8* %5289, align 1, !tbaa !2449
  %5290 = load i64, i64* %RBP
  br i1 %5143, label %block_4026c3, label %block_402372

block_402372:                                     ; preds = %block_402363
  %5291 = sub i64 %5290, 196
  %5292 = load i64, i64* %PC
  %5293 = add i64 %5292, 7
  store i64 %5293, i64* %PC
  %5294 = inttoptr i64 %5291 to i32*
  %5295 = load i32, i32* %5294
  %5296 = sext i32 %5295 to i64
  store i64 %5296, i64* %RCX, align 8, !tbaa !2428
  %5297 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5298 = load i64, i64* %RAX
  %5299 = load i64, i64* %RCX
  %5300 = mul i64 %5299, 8
  %5301 = add i64 %5300, %5298
  %5302 = load i64, i64* %PC
  %5303 = add i64 %5302, 5
  store i64 %5303, i64* %PC
  %5304 = inttoptr i64 %5301 to double*
  %5305 = load double, double* %5304
  %5306 = bitcast i8* %5297 to double*
  store double %5305, double* %5306, align 1, !tbaa !2453
  %5307 = getelementptr inbounds i8, i8* %5297, i64 8
  %5308 = bitcast i8* %5307 to double*
  store double 0.000000e+00, double* %5308, align 1, !tbaa !2453
  %5309 = load i64, i64* %RBP
  %5310 = sub i64 %5309, 120
  %5311 = load i64, i64* %PC
  %5312 = add i64 %5311, 4
  store i64 %5312, i64* %PC
  %5313 = inttoptr i64 %5310 to i64*
  %5314 = load i64, i64* %5313
  store i64 %5314, i64* %RAX, align 8, !tbaa !2428
  %5315 = load i64, i64* %RBP
  %5316 = sub i64 %5315, 188
  %5317 = load i64, i64* %PC
  %5318 = add i64 %5317, 7
  store i64 %5318, i64* %PC
  %5319 = inttoptr i64 %5316 to i32*
  %5320 = load i32, i32* %5319
  %5321 = sext i32 %5320 to i64
  store i64 %5321, i64* %RCX, align 8, !tbaa !2428
  %5322 = load i64, i64* %RCX
  %5323 = load i64, i64* %PC
  %5324 = add i64 %5323, 7
  store i64 %5324, i64* %PC
  %5325 = sext i64 %5322 to i128
  %5326 = and i128 %5325, -18446744073709551616
  %5327 = zext i64 %5322 to i128
  %5328 = or i128 %5326, %5327
  %5329 = mul nsw i128 33800, %5328
  %5330 = trunc i128 %5329 to i64
  store i64 %5330, i64* %RCX, align 8, !tbaa !2428
  %5331 = sext i64 %5330 to i128
  %5332 = icmp ne i128 %5331, %5329
  %5333 = zext i1 %5332 to i8
  %5334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5333, i8* %5334, align 1, !tbaa !2432
  %5335 = trunc i128 %5329 to i32
  %5336 = and i32 %5335, 255
  %5337 = call i32 @llvm.ctpop.i32(i32 %5336) #16
  %5338 = trunc i32 %5337 to i8
  %5339 = and i8 %5338, 1
  %5340 = xor i8 %5339, 1
  %5341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5340, i8* %5341, align 1, !tbaa !2446
  %5342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5342, align 1, !tbaa !2450
  %5343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5343, align 1, !tbaa !2447
  %5344 = lshr i64 %5330, 63
  %5345 = trunc i64 %5344 to i8
  %5346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5345, i8* %5346, align 1, !tbaa !2448
  %5347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5333, i8* %5347, align 1, !tbaa !2449
  %5348 = load i64, i64* %RAX
  %5349 = load i64, i64* %RCX
  %5350 = load i64, i64* %PC
  %5351 = add i64 %5350, 3
  store i64 %5351, i64* %PC
  %5352 = add i64 %5349, %5348
  store i64 %5352, i64* %RAX, align 8, !tbaa !2428
  %5353 = icmp ult i64 %5352, %5348
  %5354 = icmp ult i64 %5352, %5349
  %5355 = or i1 %5353, %5354
  %5356 = zext i1 %5355 to i8
  %5357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5356, i8* %5357, align 1, !tbaa !2432
  %5358 = trunc i64 %5352 to i32
  %5359 = and i32 %5358, 255
  %5360 = call i32 @llvm.ctpop.i32(i32 %5359) #16
  %5361 = trunc i32 %5360 to i8
  %5362 = and i8 %5361, 1
  %5363 = xor i8 %5362, 1
  %5364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5363, i8* %5364, align 1, !tbaa !2446
  %5365 = xor i64 %5349, %5348
  %5366 = xor i64 %5365, %5352
  %5367 = lshr i64 %5366, 4
  %5368 = trunc i64 %5367 to i8
  %5369 = and i8 %5368, 1
  %5370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5369, i8* %5370, align 1, !tbaa !2450
  %5371 = icmp eq i64 %5352, 0
  %5372 = zext i1 %5371 to i8
  %5373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5372, i8* %5373, align 1, !tbaa !2447
  %5374 = lshr i64 %5352, 63
  %5375 = trunc i64 %5374 to i8
  %5376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5375, i8* %5376, align 1, !tbaa !2448
  %5377 = lshr i64 %5348, 63
  %5378 = lshr i64 %5349, 63
  %5379 = xor i64 %5374, %5377
  %5380 = xor i64 %5374, %5378
  %5381 = add nuw nsw i64 %5379, %5380
  %5382 = icmp eq i64 %5381, 2
  %5383 = zext i1 %5382 to i8
  %5384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5383, i8* %5384, align 1, !tbaa !2449
  %5385 = load i64, i64* %RBP
  %5386 = sub i64 %5385, 192
  %5387 = load i64, i64* %PC
  %5388 = add i64 %5387, 6
  store i64 %5388, i64* %PC
  %5389 = inttoptr i64 %5386 to i32*
  %5390 = load i32, i32* %5389
  %5391 = zext i32 %5390 to i64
  store i64 %5391, i64* %RDX, align 8, !tbaa !2428
  %5392 = load i64, i64* %RDX
  %5393 = load i64, i64* %PC
  %5394 = add i64 %5393, 3
  store i64 %5394, i64* %PC
  %5395 = trunc i64 %5392 to i32
  %5396 = add i32 1, %5395
  %5397 = zext i32 %5396 to i64
  store i64 %5397, i64* %RDX, align 8, !tbaa !2428
  %5398 = icmp ult i32 %5396, %5395
  %5399 = icmp ult i32 %5396, 1
  %5400 = or i1 %5398, %5399
  %5401 = zext i1 %5400 to i8
  %5402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5401, i8* %5402, align 1, !tbaa !2432
  %5403 = and i32 %5396, 255
  %5404 = call i32 @llvm.ctpop.i32(i32 %5403) #16
  %5405 = trunc i32 %5404 to i8
  %5406 = and i8 %5405, 1
  %5407 = xor i8 %5406, 1
  %5408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5407, i8* %5408, align 1, !tbaa !2446
  %5409 = xor i64 1, %5392
  %5410 = trunc i64 %5409 to i32
  %5411 = xor i32 %5410, %5396
  %5412 = lshr i32 %5411, 4
  %5413 = trunc i32 %5412 to i8
  %5414 = and i8 %5413, 1
  %5415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5414, i8* %5415, align 1, !tbaa !2450
  %5416 = icmp eq i32 %5396, 0
  %5417 = zext i1 %5416 to i8
  %5418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5417, i8* %5418, align 1, !tbaa !2447
  %5419 = lshr i32 %5396, 31
  %5420 = trunc i32 %5419 to i8
  %5421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5420, i8* %5421, align 1, !tbaa !2448
  %5422 = lshr i32 %5395, 31
  %5423 = xor i32 %5419, %5422
  %5424 = add nuw nsw i32 %5423, %5419
  %5425 = icmp eq i32 %5424, 2
  %5426 = zext i1 %5425 to i8
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5426, i8* %5427, align 1, !tbaa !2449
  %5428 = load i32, i32* %EDX
  %5429 = zext i32 %5428 to i64
  %5430 = load i64, i64* %PC
  %5431 = add i64 %5430, 3
  store i64 %5431, i64* %PC
  %5432 = shl i64 %5429, 32
  %5433 = ashr exact i64 %5432, 32
  store i64 %5433, i64* %RCX, align 8, !tbaa !2428
  %5434 = load i64, i64* %RCX
  %5435 = load i64, i64* %PC
  %5436 = add i64 %5435, 7
  store i64 %5436, i64* %PC
  %5437 = sext i64 %5434 to i128
  %5438 = and i128 %5437, -18446744073709551616
  %5439 = zext i64 %5434 to i128
  %5440 = or i128 %5438, %5439
  %5441 = mul nsw i128 520, %5440
  %5442 = trunc i128 %5441 to i64
  store i64 %5442, i64* %RCX, align 8, !tbaa !2428
  %5443 = sext i64 %5442 to i128
  %5444 = icmp ne i128 %5443, %5441
  %5445 = zext i1 %5444 to i8
  %5446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5445, i8* %5446, align 1, !tbaa !2432
  %5447 = trunc i128 %5441 to i32
  %5448 = and i32 %5447, 255
  %5449 = call i32 @llvm.ctpop.i32(i32 %5448) #16
  %5450 = trunc i32 %5449 to i8
  %5451 = and i8 %5450, 1
  %5452 = xor i8 %5451, 1
  %5453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5452, i8* %5453, align 1, !tbaa !2446
  %5454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5454, align 1, !tbaa !2450
  %5455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5455, align 1, !tbaa !2447
  %5456 = lshr i64 %5442, 63
  %5457 = trunc i64 %5456 to i8
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5457, i8* %5458, align 1, !tbaa !2448
  %5459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5445, i8* %5459, align 1, !tbaa !2449
  %5460 = load i64, i64* %RAX
  %5461 = load i64, i64* %RCX
  %5462 = load i64, i64* %PC
  %5463 = add i64 %5462, 3
  store i64 %5463, i64* %PC
  %5464 = add i64 %5461, %5460
  store i64 %5464, i64* %RAX, align 8, !tbaa !2428
  %5465 = icmp ult i64 %5464, %5460
  %5466 = icmp ult i64 %5464, %5461
  %5467 = or i1 %5465, %5466
  %5468 = zext i1 %5467 to i8
  %5469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5468, i8* %5469, align 1, !tbaa !2432
  %5470 = trunc i64 %5464 to i32
  %5471 = and i32 %5470, 255
  %5472 = call i32 @llvm.ctpop.i32(i32 %5471) #16
  %5473 = trunc i32 %5472 to i8
  %5474 = and i8 %5473, 1
  %5475 = xor i8 %5474, 1
  %5476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5475, i8* %5476, align 1, !tbaa !2446
  %5477 = xor i64 %5461, %5460
  %5478 = xor i64 %5477, %5464
  %5479 = lshr i64 %5478, 4
  %5480 = trunc i64 %5479 to i8
  %5481 = and i8 %5480, 1
  %5482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5481, i8* %5482, align 1, !tbaa !2450
  %5483 = icmp eq i64 %5464, 0
  %5484 = zext i1 %5483 to i8
  %5485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5484, i8* %5485, align 1, !tbaa !2447
  %5486 = lshr i64 %5464, 63
  %5487 = trunc i64 %5486 to i8
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5487, i8* %5488, align 1, !tbaa !2448
  %5489 = lshr i64 %5460, 63
  %5490 = lshr i64 %5461, 63
  %5491 = xor i64 %5486, %5489
  %5492 = xor i64 %5486, %5490
  %5493 = add nuw nsw i64 %5491, %5492
  %5494 = icmp eq i64 %5493, 2
  %5495 = zext i1 %5494 to i8
  %5496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5495, i8* %5496, align 1, !tbaa !2449
  %5497 = load i64, i64* %RBP
  %5498 = sub i64 %5497, 196
  %5499 = load i64, i64* %PC
  %5500 = add i64 %5499, 7
  store i64 %5500, i64* %PC
  %5501 = inttoptr i64 %5498 to i32*
  %5502 = load i32, i32* %5501
  %5503 = sext i32 %5502 to i64
  store i64 %5503, i64* %RCX, align 8, !tbaa !2428
  %5504 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5505 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5506 = load i64, i64* %RAX
  %5507 = load i64, i64* %RCX
  %5508 = mul i64 %5507, 8
  %5509 = add i64 %5508, %5506
  %5510 = load i64, i64* %PC
  %5511 = add i64 %5510, 5
  store i64 %5511, i64* %PC
  %5512 = bitcast i8* %5505 to double*
  %5513 = load double, double* %5512, align 1
  %5514 = getelementptr inbounds i8, i8* %5505, i64 8
  %5515 = bitcast i8* %5514 to i64*
  %5516 = load i64, i64* %5515, align 1
  %5517 = inttoptr i64 %5509 to double*
  %5518 = load double, double* %5517
  %5519 = fsub double %5513, %5518
  %5520 = bitcast i8* %5504 to double*
  store double %5519, double* %5520, align 1, !tbaa !2453
  %5521 = getelementptr inbounds i8, i8* %5504, i64 8
  %5522 = bitcast i8* %5521 to i64*
  store i64 %5516, i64* %5522, align 1, !tbaa !2453
  %5523 = load i64, i64* %RBP
  %5524 = sub i64 %5523, 128
  %5525 = load i64, i64* %PC
  %5526 = add i64 %5525, 4
  store i64 %5526, i64* %PC
  %5527 = inttoptr i64 %5524 to i64*
  %5528 = load i64, i64* %5527
  store i64 %5528, i64* %RAX, align 8, !tbaa !2428
  %5529 = load i64, i64* %RBP
  %5530 = sub i64 %5529, 188
  %5531 = load i64, i64* %PC
  %5532 = add i64 %5531, 7
  store i64 %5532, i64* %PC
  %5533 = inttoptr i64 %5530 to i32*
  %5534 = load i32, i32* %5533
  %5535 = sext i32 %5534 to i64
  store i64 %5535, i64* %RCX, align 8, !tbaa !2428
  %5536 = load i64, i64* %RCX
  %5537 = load i64, i64* %PC
  %5538 = add i64 %5537, 7
  store i64 %5538, i64* %PC
  %5539 = sext i64 %5536 to i128
  %5540 = and i128 %5539, -18446744073709551616
  %5541 = zext i64 %5536 to i128
  %5542 = or i128 %5540, %5541
  %5543 = mul nsw i128 33800, %5542
  %5544 = trunc i128 %5543 to i64
  store i64 %5544, i64* %RCX, align 8, !tbaa !2428
  %5545 = sext i64 %5544 to i128
  %5546 = icmp ne i128 %5545, %5543
  %5547 = zext i1 %5546 to i8
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5547, i8* %5548, align 1, !tbaa !2432
  %5549 = trunc i128 %5543 to i32
  %5550 = and i32 %5549, 255
  %5551 = call i32 @llvm.ctpop.i32(i32 %5550) #16
  %5552 = trunc i32 %5551 to i8
  %5553 = and i8 %5552, 1
  %5554 = xor i8 %5553, 1
  %5555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5554, i8* %5555, align 1, !tbaa !2446
  %5556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5556, align 1, !tbaa !2450
  %5557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5557, align 1, !tbaa !2447
  %5558 = lshr i64 %5544, 63
  %5559 = trunc i64 %5558 to i8
  %5560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5559, i8* %5560, align 1, !tbaa !2448
  %5561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5547, i8* %5561, align 1, !tbaa !2449
  %5562 = load i64, i64* %RAX
  %5563 = load i64, i64* %RCX
  %5564 = load i64, i64* %PC
  %5565 = add i64 %5564, 3
  store i64 %5565, i64* %PC
  %5566 = add i64 %5563, %5562
  store i64 %5566, i64* %RAX, align 8, !tbaa !2428
  %5567 = icmp ult i64 %5566, %5562
  %5568 = icmp ult i64 %5566, %5563
  %5569 = or i1 %5567, %5568
  %5570 = zext i1 %5569 to i8
  %5571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5570, i8* %5571, align 1, !tbaa !2432
  %5572 = trunc i64 %5566 to i32
  %5573 = and i32 %5572, 255
  %5574 = call i32 @llvm.ctpop.i32(i32 %5573) #16
  %5575 = trunc i32 %5574 to i8
  %5576 = and i8 %5575, 1
  %5577 = xor i8 %5576, 1
  %5578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5577, i8* %5578, align 1, !tbaa !2446
  %5579 = xor i64 %5563, %5562
  %5580 = xor i64 %5579, %5566
  %5581 = lshr i64 %5580, 4
  %5582 = trunc i64 %5581 to i8
  %5583 = and i8 %5582, 1
  %5584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5583, i8* %5584, align 1, !tbaa !2450
  %5585 = icmp eq i64 %5566, 0
  %5586 = zext i1 %5585 to i8
  %5587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5586, i8* %5587, align 1, !tbaa !2447
  %5588 = lshr i64 %5566, 63
  %5589 = trunc i64 %5588 to i8
  %5590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5589, i8* %5590, align 1, !tbaa !2448
  %5591 = lshr i64 %5562, 63
  %5592 = lshr i64 %5563, 63
  %5593 = xor i64 %5588, %5591
  %5594 = xor i64 %5588, %5592
  %5595 = add nuw nsw i64 %5593, %5594
  %5596 = icmp eq i64 %5595, 2
  %5597 = zext i1 %5596 to i8
  %5598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5597, i8* %5598, align 1, !tbaa !2449
  %5599 = load i64, i64* %RBP
  %5600 = sub i64 %5599, 192
  %5601 = load i64, i64* %PC
  %5602 = add i64 %5601, 7
  store i64 %5602, i64* %PC
  %5603 = inttoptr i64 %5600 to i32*
  %5604 = load i32, i32* %5603
  %5605 = sext i32 %5604 to i64
  store i64 %5605, i64* %RCX, align 8, !tbaa !2428
  %5606 = load i64, i64* %RCX
  %5607 = load i64, i64* %PC
  %5608 = add i64 %5607, 7
  store i64 %5608, i64* %PC
  %5609 = sext i64 %5606 to i128
  %5610 = and i128 %5609, -18446744073709551616
  %5611 = zext i64 %5606 to i128
  %5612 = or i128 %5610, %5611
  %5613 = mul nsw i128 520, %5612
  %5614 = trunc i128 %5613 to i64
  store i64 %5614, i64* %RCX, align 8, !tbaa !2428
  %5615 = sext i64 %5614 to i128
  %5616 = icmp ne i128 %5615, %5613
  %5617 = zext i1 %5616 to i8
  %5618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5617, i8* %5618, align 1, !tbaa !2432
  %5619 = trunc i128 %5613 to i32
  %5620 = and i32 %5619, 255
  %5621 = call i32 @llvm.ctpop.i32(i32 %5620) #16
  %5622 = trunc i32 %5621 to i8
  %5623 = and i8 %5622, 1
  %5624 = xor i8 %5623, 1
  %5625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5624, i8* %5625, align 1, !tbaa !2446
  %5626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5626, align 1, !tbaa !2450
  %5627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5627, align 1, !tbaa !2447
  %5628 = lshr i64 %5614, 63
  %5629 = trunc i64 %5628 to i8
  %5630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5629, i8* %5630, align 1, !tbaa !2448
  %5631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5617, i8* %5631, align 1, !tbaa !2449
  %5632 = load i64, i64* %RAX
  %5633 = load i64, i64* %RCX
  %5634 = load i64, i64* %PC
  %5635 = add i64 %5634, 3
  store i64 %5635, i64* %PC
  %5636 = add i64 %5633, %5632
  store i64 %5636, i64* %RAX, align 8, !tbaa !2428
  %5637 = icmp ult i64 %5636, %5632
  %5638 = icmp ult i64 %5636, %5633
  %5639 = or i1 %5637, %5638
  %5640 = zext i1 %5639 to i8
  %5641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5640, i8* %5641, align 1, !tbaa !2432
  %5642 = trunc i64 %5636 to i32
  %5643 = and i32 %5642, 255
  %5644 = call i32 @llvm.ctpop.i32(i32 %5643) #16
  %5645 = trunc i32 %5644 to i8
  %5646 = and i8 %5645, 1
  %5647 = xor i8 %5646, 1
  %5648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5647, i8* %5648, align 1, !tbaa !2446
  %5649 = xor i64 %5633, %5632
  %5650 = xor i64 %5649, %5636
  %5651 = lshr i64 %5650, 4
  %5652 = trunc i64 %5651 to i8
  %5653 = and i8 %5652, 1
  %5654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5653, i8* %5654, align 1, !tbaa !2450
  %5655 = icmp eq i64 %5636, 0
  %5656 = zext i1 %5655 to i8
  %5657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5656, i8* %5657, align 1, !tbaa !2447
  %5658 = lshr i64 %5636, 63
  %5659 = trunc i64 %5658 to i8
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5659, i8* %5660, align 1, !tbaa !2448
  %5661 = lshr i64 %5632, 63
  %5662 = lshr i64 %5633, 63
  %5663 = xor i64 %5658, %5661
  %5664 = xor i64 %5658, %5662
  %5665 = add nuw nsw i64 %5663, %5664
  %5666 = icmp eq i64 %5665, 2
  %5667 = zext i1 %5666 to i8
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5667, i8* %5668, align 1, !tbaa !2449
  %5669 = load i64, i64* %RBP
  %5670 = sub i64 %5669, 196
  %5671 = load i64, i64* %PC
  %5672 = add i64 %5671, 6
  store i64 %5672, i64* %PC
  %5673 = inttoptr i64 %5670 to i32*
  %5674 = load i32, i32* %5673
  %5675 = zext i32 %5674 to i64
  store i64 %5675, i64* %RDX, align 8, !tbaa !2428
  %5676 = load i64, i64* %RDX
  %5677 = load i64, i64* %PC
  %5678 = add i64 %5677, 3
  store i64 %5678, i64* %PC
  %5679 = trunc i64 %5676 to i32
  %5680 = add i32 1, %5679
  %5681 = zext i32 %5680 to i64
  store i64 %5681, i64* %RDX, align 8, !tbaa !2428
  %5682 = icmp ult i32 %5680, %5679
  %5683 = icmp ult i32 %5680, 1
  %5684 = or i1 %5682, %5683
  %5685 = zext i1 %5684 to i8
  %5686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5685, i8* %5686, align 1, !tbaa !2432
  %5687 = and i32 %5680, 255
  %5688 = call i32 @llvm.ctpop.i32(i32 %5687) #16
  %5689 = trunc i32 %5688 to i8
  %5690 = and i8 %5689, 1
  %5691 = xor i8 %5690, 1
  %5692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5691, i8* %5692, align 1, !tbaa !2446
  %5693 = xor i64 1, %5676
  %5694 = trunc i64 %5693 to i32
  %5695 = xor i32 %5694, %5680
  %5696 = lshr i32 %5695, 4
  %5697 = trunc i32 %5696 to i8
  %5698 = and i8 %5697, 1
  %5699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5698, i8* %5699, align 1, !tbaa !2450
  %5700 = icmp eq i32 %5680, 0
  %5701 = zext i1 %5700 to i8
  %5702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5701, i8* %5702, align 1, !tbaa !2447
  %5703 = lshr i32 %5680, 31
  %5704 = trunc i32 %5703 to i8
  %5705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5704, i8* %5705, align 1, !tbaa !2448
  %5706 = lshr i32 %5679, 31
  %5707 = xor i32 %5703, %5706
  %5708 = add nuw nsw i32 %5707, %5703
  %5709 = icmp eq i32 %5708, 2
  %5710 = zext i1 %5709 to i8
  %5711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5710, i8* %5711, align 1, !tbaa !2449
  %5712 = load i32, i32* %EDX
  %5713 = zext i32 %5712 to i64
  %5714 = load i64, i64* %PC
  %5715 = add i64 %5714, 3
  store i64 %5715, i64* %PC
  %5716 = shl i64 %5713, 32
  %5717 = ashr exact i64 %5716, 32
  store i64 %5717, i64* %RCX, align 8, !tbaa !2428
  %5718 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5719 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5720 = load i64, i64* %RAX
  %5721 = load i64, i64* %RCX
  %5722 = mul i64 %5721, 8
  %5723 = add i64 %5722, %5720
  %5724 = load i64, i64* %PC
  %5725 = add i64 %5724, 5
  store i64 %5725, i64* %PC
  %5726 = bitcast i8* %5719 to double*
  %5727 = load double, double* %5726, align 1
  %5728 = getelementptr inbounds i8, i8* %5719, i64 8
  %5729 = bitcast i8* %5728 to i64*
  %5730 = load i64, i64* %5729, align 1
  %5731 = inttoptr i64 %5723 to double*
  %5732 = load double, double* %5731
  %5733 = fadd double %5727, %5732
  %5734 = bitcast i8* %5718 to double*
  store double %5733, double* %5734, align 1, !tbaa !2453
  %5735 = getelementptr inbounds i8, i8* %5718, i64 8
  %5736 = bitcast i8* %5735 to i64*
  store i64 %5730, i64* %5736, align 1, !tbaa !2453
  %5737 = load i64, i64* %RBP
  %5738 = sub i64 %5737, 128
  %5739 = load i64, i64* %PC
  %5740 = add i64 %5739, 4
  store i64 %5740, i64* %PC
  %5741 = inttoptr i64 %5738 to i64*
  %5742 = load i64, i64* %5741
  store i64 %5742, i64* %RAX, align 8, !tbaa !2428
  %5743 = load i64, i64* %RBP
  %5744 = sub i64 %5743, 188
  %5745 = load i64, i64* %PC
  %5746 = add i64 %5745, 7
  store i64 %5746, i64* %PC
  %5747 = inttoptr i64 %5744 to i32*
  %5748 = load i32, i32* %5747
  %5749 = sext i32 %5748 to i64
  store i64 %5749, i64* %RCX, align 8, !tbaa !2428
  %5750 = load i64, i64* %RCX
  %5751 = load i64, i64* %PC
  %5752 = add i64 %5751, 7
  store i64 %5752, i64* %PC
  %5753 = sext i64 %5750 to i128
  %5754 = and i128 %5753, -18446744073709551616
  %5755 = zext i64 %5750 to i128
  %5756 = or i128 %5754, %5755
  %5757 = mul nsw i128 33800, %5756
  %5758 = trunc i128 %5757 to i64
  store i64 %5758, i64* %RCX, align 8, !tbaa !2428
  %5759 = sext i64 %5758 to i128
  %5760 = icmp ne i128 %5759, %5757
  %5761 = zext i1 %5760 to i8
  %5762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5761, i8* %5762, align 1, !tbaa !2432
  %5763 = trunc i128 %5757 to i32
  %5764 = and i32 %5763, 255
  %5765 = call i32 @llvm.ctpop.i32(i32 %5764) #16
  %5766 = trunc i32 %5765 to i8
  %5767 = and i8 %5766, 1
  %5768 = xor i8 %5767, 1
  %5769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5768, i8* %5769, align 1, !tbaa !2446
  %5770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5770, align 1, !tbaa !2450
  %5771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5771, align 1, !tbaa !2447
  %5772 = lshr i64 %5758, 63
  %5773 = trunc i64 %5772 to i8
  %5774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5773, i8* %5774, align 1, !tbaa !2448
  %5775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5761, i8* %5775, align 1, !tbaa !2449
  %5776 = load i64, i64* %RAX
  %5777 = load i64, i64* %RCX
  %5778 = load i64, i64* %PC
  %5779 = add i64 %5778, 3
  store i64 %5779, i64* %PC
  %5780 = add i64 %5777, %5776
  store i64 %5780, i64* %RAX, align 8, !tbaa !2428
  %5781 = icmp ult i64 %5780, %5776
  %5782 = icmp ult i64 %5780, %5777
  %5783 = or i1 %5781, %5782
  %5784 = zext i1 %5783 to i8
  %5785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5784, i8* %5785, align 1, !tbaa !2432
  %5786 = trunc i64 %5780 to i32
  %5787 = and i32 %5786, 255
  %5788 = call i32 @llvm.ctpop.i32(i32 %5787) #16
  %5789 = trunc i32 %5788 to i8
  %5790 = and i8 %5789, 1
  %5791 = xor i8 %5790, 1
  %5792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5791, i8* %5792, align 1, !tbaa !2446
  %5793 = xor i64 %5777, %5776
  %5794 = xor i64 %5793, %5780
  %5795 = lshr i64 %5794, 4
  %5796 = trunc i64 %5795 to i8
  %5797 = and i8 %5796, 1
  %5798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5797, i8* %5798, align 1, !tbaa !2450
  %5799 = icmp eq i64 %5780, 0
  %5800 = zext i1 %5799 to i8
  %5801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5800, i8* %5801, align 1, !tbaa !2447
  %5802 = lshr i64 %5780, 63
  %5803 = trunc i64 %5802 to i8
  %5804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5803, i8* %5804, align 1, !tbaa !2448
  %5805 = lshr i64 %5776, 63
  %5806 = lshr i64 %5777, 63
  %5807 = xor i64 %5802, %5805
  %5808 = xor i64 %5802, %5806
  %5809 = add nuw nsw i64 %5807, %5808
  %5810 = icmp eq i64 %5809, 2
  %5811 = zext i1 %5810 to i8
  %5812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5811, i8* %5812, align 1, !tbaa !2449
  %5813 = load i64, i64* %RBP
  %5814 = sub i64 %5813, 192
  %5815 = load i64, i64* %PC
  %5816 = add i64 %5815, 7
  store i64 %5816, i64* %PC
  %5817 = inttoptr i64 %5814 to i32*
  %5818 = load i32, i32* %5817
  %5819 = sext i32 %5818 to i64
  store i64 %5819, i64* %RCX, align 8, !tbaa !2428
  %5820 = load i64, i64* %RCX
  %5821 = load i64, i64* %PC
  %5822 = add i64 %5821, 7
  store i64 %5822, i64* %PC
  %5823 = sext i64 %5820 to i128
  %5824 = and i128 %5823, -18446744073709551616
  %5825 = zext i64 %5820 to i128
  %5826 = or i128 %5824, %5825
  %5827 = mul nsw i128 520, %5826
  %5828 = trunc i128 %5827 to i64
  store i64 %5828, i64* %RCX, align 8, !tbaa !2428
  %5829 = sext i64 %5828 to i128
  %5830 = icmp ne i128 %5829, %5827
  %5831 = zext i1 %5830 to i8
  %5832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5831, i8* %5832, align 1, !tbaa !2432
  %5833 = trunc i128 %5827 to i32
  %5834 = and i32 %5833, 255
  %5835 = call i32 @llvm.ctpop.i32(i32 %5834) #16
  %5836 = trunc i32 %5835 to i8
  %5837 = and i8 %5836, 1
  %5838 = xor i8 %5837, 1
  %5839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5838, i8* %5839, align 1, !tbaa !2446
  %5840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5840, align 1, !tbaa !2450
  %5841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5841, align 1, !tbaa !2447
  %5842 = lshr i64 %5828, 63
  %5843 = trunc i64 %5842 to i8
  %5844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5843, i8* %5844, align 1, !tbaa !2448
  %5845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5831, i8* %5845, align 1, !tbaa !2449
  %5846 = load i64, i64* %RAX
  %5847 = load i64, i64* %RCX
  %5848 = load i64, i64* %PC
  %5849 = add i64 %5848, 3
  store i64 %5849, i64* %PC
  %5850 = add i64 %5847, %5846
  store i64 %5850, i64* %RAX, align 8, !tbaa !2428
  %5851 = icmp ult i64 %5850, %5846
  %5852 = icmp ult i64 %5850, %5847
  %5853 = or i1 %5851, %5852
  %5854 = zext i1 %5853 to i8
  %5855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5854, i8* %5855, align 1, !tbaa !2432
  %5856 = trunc i64 %5850 to i32
  %5857 = and i32 %5856, 255
  %5858 = call i32 @llvm.ctpop.i32(i32 %5857) #16
  %5859 = trunc i32 %5858 to i8
  %5860 = and i8 %5859, 1
  %5861 = xor i8 %5860, 1
  %5862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5861, i8* %5862, align 1, !tbaa !2446
  %5863 = xor i64 %5847, %5846
  %5864 = xor i64 %5863, %5850
  %5865 = lshr i64 %5864, 4
  %5866 = trunc i64 %5865 to i8
  %5867 = and i8 %5866, 1
  %5868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5867, i8* %5868, align 1, !tbaa !2450
  %5869 = icmp eq i64 %5850, 0
  %5870 = zext i1 %5869 to i8
  %5871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5870, i8* %5871, align 1, !tbaa !2447
  %5872 = lshr i64 %5850, 63
  %5873 = trunc i64 %5872 to i8
  %5874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5873, i8* %5874, align 1, !tbaa !2448
  %5875 = lshr i64 %5846, 63
  %5876 = lshr i64 %5847, 63
  %5877 = xor i64 %5872, %5875
  %5878 = xor i64 %5872, %5876
  %5879 = add nuw nsw i64 %5877, %5878
  %5880 = icmp eq i64 %5879, 2
  %5881 = zext i1 %5880 to i8
  %5882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5881, i8* %5882, align 1, !tbaa !2449
  %5883 = load i64, i64* %RBP
  %5884 = sub i64 %5883, 196
  %5885 = load i64, i64* %PC
  %5886 = add i64 %5885, 7
  store i64 %5886, i64* %PC
  %5887 = inttoptr i64 %5884 to i32*
  %5888 = load i32, i32* %5887
  %5889 = sext i32 %5888 to i64
  store i64 %5889, i64* %RCX, align 8, !tbaa !2428
  %5890 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5891 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5892 = load i64, i64* %RAX
  %5893 = load i64, i64* %RCX
  %5894 = mul i64 %5893, 8
  %5895 = add i64 %5894, %5892
  %5896 = load i64, i64* %PC
  %5897 = add i64 %5896, 5
  store i64 %5897, i64* %PC
  %5898 = bitcast i8* %5891 to double*
  %5899 = load double, double* %5898, align 1
  %5900 = getelementptr inbounds i8, i8* %5891, i64 8
  %5901 = bitcast i8* %5900 to i64*
  %5902 = load i64, i64* %5901, align 1
  %5903 = inttoptr i64 %5895 to double*
  %5904 = load double, double* %5903
  %5905 = fsub double %5899, %5904
  %5906 = bitcast i8* %5890 to double*
  store double %5905, double* %5906, align 1, !tbaa !2453
  %5907 = getelementptr inbounds i8, i8* %5890, i64 8
  %5908 = bitcast i8* %5907 to i64*
  store i64 %5902, i64* %5908, align 1, !tbaa !2453
  %5909 = load i64, i64* %RBP
  %5910 = sub i64 %5909, 96
  %5911 = load i64, i64* %PC
  %5912 = add i64 %5911, 4
  store i64 %5912, i64* %PC
  %5913 = inttoptr i64 %5910 to i64*
  %5914 = load i64, i64* %5913
  store i64 %5914, i64* %RAX, align 8, !tbaa !2428
  %5915 = load i64, i64* %RBP
  %5916 = sub i64 %5915, 188
  %5917 = load i64, i64* %PC
  %5918 = add i64 %5917, 7
  store i64 %5918, i64* %PC
  %5919 = inttoptr i64 %5916 to i32*
  %5920 = load i32, i32* %5919
  %5921 = sext i32 %5920 to i64
  store i64 %5921, i64* %RCX, align 8, !tbaa !2428
  %5922 = load i64, i64* %RCX
  %5923 = load i64, i64* %PC
  %5924 = add i64 %5923, 7
  store i64 %5924, i64* %PC
  %5925 = sext i64 %5922 to i128
  %5926 = and i128 %5925, -18446744073709551616
  %5927 = zext i64 %5922 to i128
  %5928 = or i128 %5926, %5927
  %5929 = mul nsw i128 520, %5928
  %5930 = trunc i128 %5929 to i64
  store i64 %5930, i64* %RCX, align 8, !tbaa !2428
  %5931 = sext i64 %5930 to i128
  %5932 = icmp ne i128 %5931, %5929
  %5933 = zext i1 %5932 to i8
  %5934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5933, i8* %5934, align 1, !tbaa !2432
  %5935 = trunc i128 %5929 to i32
  %5936 = and i32 %5935, 255
  %5937 = call i32 @llvm.ctpop.i32(i32 %5936) #16
  %5938 = trunc i32 %5937 to i8
  %5939 = and i8 %5938, 1
  %5940 = xor i8 %5939, 1
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5940, i8* %5941, align 1, !tbaa !2446
  %5942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5942, align 1, !tbaa !2450
  %5943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5943, align 1, !tbaa !2447
  %5944 = lshr i64 %5930, 63
  %5945 = trunc i64 %5944 to i8
  %5946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5945, i8* %5946, align 1, !tbaa !2448
  %5947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5933, i8* %5947, align 1, !tbaa !2449
  %5948 = load i64, i64* %RAX
  %5949 = load i64, i64* %RCX
  %5950 = load i64, i64* %PC
  %5951 = add i64 %5950, 3
  store i64 %5951, i64* %PC
  %5952 = add i64 %5949, %5948
  store i64 %5952, i64* %RAX, align 8, !tbaa !2428
  %5953 = icmp ult i64 %5952, %5948
  %5954 = icmp ult i64 %5952, %5949
  %5955 = or i1 %5953, %5954
  %5956 = zext i1 %5955 to i8
  %5957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5956, i8* %5957, align 1, !tbaa !2432
  %5958 = trunc i64 %5952 to i32
  %5959 = and i32 %5958, 255
  %5960 = call i32 @llvm.ctpop.i32(i32 %5959) #16
  %5961 = trunc i32 %5960 to i8
  %5962 = and i8 %5961, 1
  %5963 = xor i8 %5962, 1
  %5964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5963, i8* %5964, align 1, !tbaa !2446
  %5965 = xor i64 %5949, %5948
  %5966 = xor i64 %5965, %5952
  %5967 = lshr i64 %5966, 4
  %5968 = trunc i64 %5967 to i8
  %5969 = and i8 %5968, 1
  %5970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5969, i8* %5970, align 1, !tbaa !2450
  %5971 = icmp eq i64 %5952, 0
  %5972 = zext i1 %5971 to i8
  %5973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5972, i8* %5973, align 1, !tbaa !2447
  %5974 = lshr i64 %5952, 63
  %5975 = trunc i64 %5974 to i8
  %5976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5975, i8* %5976, align 1, !tbaa !2448
  %5977 = lshr i64 %5948, 63
  %5978 = lshr i64 %5949, 63
  %5979 = xor i64 %5974, %5977
  %5980 = xor i64 %5974, %5978
  %5981 = add nuw nsw i64 %5979, %5980
  %5982 = icmp eq i64 %5981, 2
  %5983 = zext i1 %5982 to i8
  %5984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5983, i8* %5984, align 1, !tbaa !2449
  %5985 = load i64, i64* %RBP
  %5986 = sub i64 %5985, 192
  %5987 = load i64, i64* %PC
  %5988 = add i64 %5987, 7
  store i64 %5988, i64* %PC
  %5989 = inttoptr i64 %5986 to i32*
  %5990 = load i32, i32* %5989
  %5991 = sext i32 %5990 to i64
  store i64 %5991, i64* %RCX, align 8, !tbaa !2428
  %5992 = load i64, i64* %RAX
  %5993 = load i64, i64* %RCX
  %5994 = mul i64 %5993, 8
  %5995 = add i64 %5994, %5992
  %5996 = bitcast %union.vec128_t* %XMM0 to i8*
  %5997 = load i64, i64* %PC
  %5998 = add i64 %5997, 5
  store i64 %5998, i64* %PC
  %5999 = bitcast i8* %5996 to double*
  %6000 = load double, double* %5999, align 1
  %6001 = inttoptr i64 %5995 to double*
  store double %6000, double* %6001
  %6002 = load i64, i64* %RBP
  %6003 = sub i64 %6002, 176
  %6004 = load i64, i64* %PC
  %6005 = add i64 %6004, 7
  store i64 %6005, i64* %PC
  %6006 = inttoptr i64 %6003 to i64*
  %6007 = load i64, i64* %6006
  store i64 %6007, i64* %RAX, align 8, !tbaa !2428
  %6008 = load i64, i64* %RBP
  %6009 = sub i64 %6008, 192
  %6010 = load i64, i64* %PC
  %6011 = add i64 %6010, 7
  store i64 %6011, i64* %PC
  %6012 = inttoptr i64 %6009 to i32*
  %6013 = load i32, i32* %6012
  %6014 = sext i32 %6013 to i64
  store i64 %6014, i64* %RCX, align 8, !tbaa !2428
  %6015 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6016 = load i64, i64* %RAX
  %6017 = load i64, i64* %RCX
  %6018 = mul i64 %6017, 8
  %6019 = add i64 %6018, %6016
  %6020 = load i64, i64* %PC
  %6021 = add i64 %6020, 5
  store i64 %6021, i64* %PC
  %6022 = inttoptr i64 %6019 to double*
  %6023 = load double, double* %6022
  %6024 = bitcast i8* %6015 to double*
  store double %6023, double* %6024, align 1, !tbaa !2453
  %6025 = getelementptr inbounds i8, i8* %6015, i64 8
  %6026 = bitcast i8* %6025 to double*
  store double 0.000000e+00, double* %6026, align 1, !tbaa !2453
  %6027 = load i64, i64* %RBP
  %6028 = sub i64 %6027, 184
  %6029 = load i64, i64* %PC
  %6030 = add i64 %6029, 7
  store i64 %6030, i64* %PC
  %6031 = inttoptr i64 %6028 to i64*
  %6032 = load i64, i64* %6031
  store i64 %6032, i64* %RAX, align 8, !tbaa !2428
  %6033 = load i64, i64* %RBP
  %6034 = sub i64 %6033, 192
  %6035 = load i64, i64* %PC
  %6036 = add i64 %6035, 7
  store i64 %6036, i64* %PC
  %6037 = inttoptr i64 %6034 to i32*
  %6038 = load i32, i32* %6037
  %6039 = sext i32 %6038 to i64
  store i64 %6039, i64* %RCX, align 8, !tbaa !2428
  %6040 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6042 = load i64, i64* %RAX
  %6043 = load i64, i64* %RCX
  %6044 = mul i64 %6043, 8
  %6045 = add i64 %6044, %6042
  %6046 = load i64, i64* %PC
  %6047 = add i64 %6046, 5
  store i64 %6047, i64* %PC
  %6048 = bitcast i8* %6041 to double*
  %6049 = load double, double* %6048, align 1
  %6050 = getelementptr inbounds i8, i8* %6041, i64 8
  %6051 = bitcast i8* %6050 to i64*
  %6052 = load i64, i64* %6051, align 1
  %6053 = inttoptr i64 %6045 to double*
  %6054 = load double, double* %6053
  %6055 = fdiv double %6049, %6054
  %6056 = bitcast i8* %6040 to double*
  store double %6055, double* %6056, align 1, !tbaa !2453
  %6057 = getelementptr inbounds i8, i8* %6040, i64 8
  %6058 = bitcast i8* %6057 to i64*
  store i64 %6052, i64* %6058, align 1, !tbaa !2453
  %6059 = load i64, i64* %RBP
  %6060 = sub i64 %6059, 112
  %6061 = load i64, i64* %PC
  %6062 = add i64 %6061, 4
  store i64 %6062, i64* %PC
  %6063 = inttoptr i64 %6060 to i64*
  %6064 = load i64, i64* %6063
  store i64 %6064, i64* %RAX, align 8, !tbaa !2428
  %6065 = load i64, i64* %RBP
  %6066 = sub i64 %6065, 188
  %6067 = load i64, i64* %PC
  %6068 = add i64 %6067, 7
  store i64 %6068, i64* %PC
  %6069 = inttoptr i64 %6066 to i32*
  %6070 = load i32, i32* %6069
  %6071 = sext i32 %6070 to i64
  store i64 %6071, i64* %RCX, align 8, !tbaa !2428
  %6072 = load i64, i64* %RCX
  %6073 = load i64, i64* %PC
  %6074 = add i64 %6073, 7
  store i64 %6074, i64* %PC
  %6075 = sext i64 %6072 to i128
  %6076 = and i128 %6075, -18446744073709551616
  %6077 = zext i64 %6072 to i128
  %6078 = or i128 %6076, %6077
  %6079 = mul nsw i128 33800, %6078
  %6080 = trunc i128 %6079 to i64
  store i64 %6080, i64* %RCX, align 8, !tbaa !2428
  %6081 = sext i64 %6080 to i128
  %6082 = icmp ne i128 %6081, %6079
  %6083 = zext i1 %6082 to i8
  %6084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6083, i8* %6084, align 1, !tbaa !2432
  %6085 = trunc i128 %6079 to i32
  %6086 = and i32 %6085, 255
  %6087 = call i32 @llvm.ctpop.i32(i32 %6086) #16
  %6088 = trunc i32 %6087 to i8
  %6089 = and i8 %6088, 1
  %6090 = xor i8 %6089, 1
  %6091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6090, i8* %6091, align 1, !tbaa !2446
  %6092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6092, align 1, !tbaa !2450
  %6093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6093, align 1, !tbaa !2447
  %6094 = lshr i64 %6080, 63
  %6095 = trunc i64 %6094 to i8
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6095, i8* %6096, align 1, !tbaa !2448
  %6097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6083, i8* %6097, align 1, !tbaa !2449
  %6098 = load i64, i64* %RAX
  %6099 = load i64, i64* %RCX
  %6100 = load i64, i64* %PC
  %6101 = add i64 %6100, 3
  store i64 %6101, i64* %PC
  %6102 = add i64 %6099, %6098
  store i64 %6102, i64* %RAX, align 8, !tbaa !2428
  %6103 = icmp ult i64 %6102, %6098
  %6104 = icmp ult i64 %6102, %6099
  %6105 = or i1 %6103, %6104
  %6106 = zext i1 %6105 to i8
  %6107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6106, i8* %6107, align 1, !tbaa !2432
  %6108 = trunc i64 %6102 to i32
  %6109 = and i32 %6108, 255
  %6110 = call i32 @llvm.ctpop.i32(i32 %6109) #16
  %6111 = trunc i32 %6110 to i8
  %6112 = and i8 %6111, 1
  %6113 = xor i8 %6112, 1
  %6114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6113, i8* %6114, align 1, !tbaa !2446
  %6115 = xor i64 %6099, %6098
  %6116 = xor i64 %6115, %6102
  %6117 = lshr i64 %6116, 4
  %6118 = trunc i64 %6117 to i8
  %6119 = and i8 %6118, 1
  %6120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6119, i8* %6120, align 1, !tbaa !2450
  %6121 = icmp eq i64 %6102, 0
  %6122 = zext i1 %6121 to i8
  %6123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6122, i8* %6123, align 1, !tbaa !2447
  %6124 = lshr i64 %6102, 63
  %6125 = trunc i64 %6124 to i8
  %6126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6125, i8* %6126, align 1, !tbaa !2448
  %6127 = lshr i64 %6098, 63
  %6128 = lshr i64 %6099, 63
  %6129 = xor i64 %6124, %6127
  %6130 = xor i64 %6124, %6128
  %6131 = add nuw nsw i64 %6129, %6130
  %6132 = icmp eq i64 %6131, 2
  %6133 = zext i1 %6132 to i8
  %6134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6133, i8* %6134, align 1, !tbaa !2449
  %6135 = load i64, i64* %RBP
  %6136 = sub i64 %6135, 192
  %6137 = load i64, i64* %PC
  %6138 = add i64 %6137, 7
  store i64 %6138, i64* %PC
  %6139 = inttoptr i64 %6136 to i32*
  %6140 = load i32, i32* %6139
  %6141 = sext i32 %6140 to i64
  store i64 %6141, i64* %RCX, align 8, !tbaa !2428
  %6142 = load i64, i64* %RCX
  %6143 = load i64, i64* %PC
  %6144 = add i64 %6143, 7
  store i64 %6144, i64* %PC
  %6145 = sext i64 %6142 to i128
  %6146 = and i128 %6145, -18446744073709551616
  %6147 = zext i64 %6142 to i128
  %6148 = or i128 %6146, %6147
  %6149 = mul nsw i128 520, %6148
  %6150 = trunc i128 %6149 to i64
  store i64 %6150, i64* %RCX, align 8, !tbaa !2428
  %6151 = sext i64 %6150 to i128
  %6152 = icmp ne i128 %6151, %6149
  %6153 = zext i1 %6152 to i8
  %6154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6153, i8* %6154, align 1, !tbaa !2432
  %6155 = trunc i128 %6149 to i32
  %6156 = and i32 %6155, 255
  %6157 = call i32 @llvm.ctpop.i32(i32 %6156) #16
  %6158 = trunc i32 %6157 to i8
  %6159 = and i8 %6158, 1
  %6160 = xor i8 %6159, 1
  %6161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6160, i8* %6161, align 1, !tbaa !2446
  %6162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6162, align 1, !tbaa !2450
  %6163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6163, align 1, !tbaa !2447
  %6164 = lshr i64 %6150, 63
  %6165 = trunc i64 %6164 to i8
  %6166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6165, i8* %6166, align 1, !tbaa !2448
  %6167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6153, i8* %6167, align 1, !tbaa !2449
  %6168 = load i64, i64* %RAX
  %6169 = load i64, i64* %RCX
  %6170 = load i64, i64* %PC
  %6171 = add i64 %6170, 3
  store i64 %6171, i64* %PC
  %6172 = add i64 %6169, %6168
  store i64 %6172, i64* %RAX, align 8, !tbaa !2428
  %6173 = icmp ult i64 %6172, %6168
  %6174 = icmp ult i64 %6172, %6169
  %6175 = or i1 %6173, %6174
  %6176 = zext i1 %6175 to i8
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6176, i8* %6177, align 1, !tbaa !2432
  %6178 = trunc i64 %6172 to i32
  %6179 = and i32 %6178, 255
  %6180 = call i32 @llvm.ctpop.i32(i32 %6179) #16
  %6181 = trunc i32 %6180 to i8
  %6182 = and i8 %6181, 1
  %6183 = xor i8 %6182, 1
  %6184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6183, i8* %6184, align 1, !tbaa !2446
  %6185 = xor i64 %6169, %6168
  %6186 = xor i64 %6185, %6172
  %6187 = lshr i64 %6186, 4
  %6188 = trunc i64 %6187 to i8
  %6189 = and i8 %6188, 1
  %6190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6189, i8* %6190, align 1, !tbaa !2450
  %6191 = icmp eq i64 %6172, 0
  %6192 = zext i1 %6191 to i8
  %6193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6192, i8* %6193, align 1, !tbaa !2447
  %6194 = lshr i64 %6172, 63
  %6195 = trunc i64 %6194 to i8
  %6196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6195, i8* %6196, align 1, !tbaa !2448
  %6197 = lshr i64 %6168, 63
  %6198 = lshr i64 %6169, 63
  %6199 = xor i64 %6194, %6197
  %6200 = xor i64 %6194, %6198
  %6201 = add nuw nsw i64 %6199, %6200
  %6202 = icmp eq i64 %6201, 2
  %6203 = zext i1 %6202 to i8
  %6204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6203, i8* %6204, align 1, !tbaa !2449
  %6205 = load i64, i64* %RBP
  %6206 = sub i64 %6205, 196
  %6207 = load i64, i64* %PC
  %6208 = add i64 %6207, 7
  store i64 %6208, i64* %PC
  %6209 = inttoptr i64 %6206 to i32*
  %6210 = load i32, i32* %6209
  %6211 = sext i32 %6210 to i64
  store i64 %6211, i64* %RCX, align 8, !tbaa !2428
  %6212 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6214 = load i64, i64* %RAX
  %6215 = load i64, i64* %RCX
  %6216 = mul i64 %6215, 8
  %6217 = add i64 %6216, %6214
  %6218 = load i64, i64* %PC
  %6219 = add i64 %6218, 5
  store i64 %6219, i64* %PC
  %6220 = bitcast i8* %6213 to double*
  %6221 = load double, double* %6220, align 1
  %6222 = getelementptr inbounds i8, i8* %6213, i64 8
  %6223 = bitcast i8* %6222 to i64*
  %6224 = load i64, i64* %6223, align 1
  %6225 = inttoptr i64 %6217 to double*
  %6226 = load double, double* %6225
  %6227 = fmul double %6221, %6226
  %6228 = bitcast i8* %6212 to double*
  store double %6227, double* %6228, align 1, !tbaa !2453
  %6229 = getelementptr inbounds i8, i8* %6212, i64 8
  %6230 = bitcast i8* %6229 to i64*
  store i64 %6224, i64* %6230, align 1, !tbaa !2453
  %6231 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6232 = load i64, i64* %RBP
  %6233 = sub i64 %6232, 72
  %6234 = load i64, i64* %PC
  %6235 = add i64 %6234, 5
  store i64 %6235, i64* %PC
  %6236 = inttoptr i64 %6233 to double*
  %6237 = load double, double* %6236
  %6238 = bitcast i8* %6231 to double*
  store double %6237, double* %6238, align 1, !tbaa !2453
  %6239 = getelementptr inbounds i8, i8* %6231, i64 8
  %6240 = bitcast i8* %6239 to double*
  store double 0.000000e+00, double* %6240, align 1, !tbaa !2453
  %6241 = load i64, i64* %RBP
  %6242 = sub i64 %6241, 184
  %6243 = load i64, i64* %PC
  %6244 = add i64 %6243, 7
  store i64 %6244, i64* %PC
  %6245 = inttoptr i64 %6242 to i64*
  %6246 = load i64, i64* %6245
  store i64 %6246, i64* %RAX, align 8, !tbaa !2428
  %6247 = load i64, i64* %RBP
  %6248 = sub i64 %6247, 192
  %6249 = load i64, i64* %PC
  %6250 = add i64 %6249, 7
  store i64 %6250, i64* %PC
  %6251 = inttoptr i64 %6248 to i32*
  %6252 = load i32, i32* %6251
  %6253 = sext i32 %6252 to i64
  store i64 %6253, i64* %RCX, align 8, !tbaa !2428
  %6254 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6255 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6256 = load i64, i64* %RAX
  %6257 = load i64, i64* %RCX
  %6258 = mul i64 %6257, 8
  %6259 = add i64 %6258, %6256
  %6260 = load i64, i64* %PC
  %6261 = add i64 %6260, 5
  store i64 %6261, i64* %PC
  %6262 = bitcast i8* %6255 to double*
  %6263 = load double, double* %6262, align 1
  %6264 = getelementptr inbounds i8, i8* %6255, i64 8
  %6265 = bitcast i8* %6264 to i64*
  %6266 = load i64, i64* %6265, align 1
  %6267 = inttoptr i64 %6259 to double*
  %6268 = load double, double* %6267
  %6269 = fdiv double %6263, %6268
  %6270 = bitcast i8* %6254 to double*
  store double %6269, double* %6270, align 1, !tbaa !2453
  %6271 = getelementptr inbounds i8, i8* %6254, i64 8
  %6272 = bitcast i8* %6271 to i64*
  store i64 %6266, i64* %6272, align 1, !tbaa !2453
  %6273 = load i64, i64* %RBP
  %6274 = sub i64 %6273, 96
  %6275 = load i64, i64* %PC
  %6276 = add i64 %6275, 4
  store i64 %6276, i64* %PC
  %6277 = inttoptr i64 %6274 to i64*
  %6278 = load i64, i64* %6277
  store i64 %6278, i64* %RAX, align 8, !tbaa !2428
  %6279 = load i64, i64* %RBP
  %6280 = sub i64 %6279, 188
  %6281 = load i64, i64* %PC
  %6282 = add i64 %6281, 7
  store i64 %6282, i64* %PC
  %6283 = inttoptr i64 %6280 to i32*
  %6284 = load i32, i32* %6283
  %6285 = sext i32 %6284 to i64
  store i64 %6285, i64* %RCX, align 8, !tbaa !2428
  %6286 = load i64, i64* %RCX
  %6287 = load i64, i64* %PC
  %6288 = add i64 %6287, 7
  store i64 %6288, i64* %PC
  %6289 = sext i64 %6286 to i128
  %6290 = and i128 %6289, -18446744073709551616
  %6291 = zext i64 %6286 to i128
  %6292 = or i128 %6290, %6291
  %6293 = mul nsw i128 520, %6292
  %6294 = trunc i128 %6293 to i64
  store i64 %6294, i64* %RCX, align 8, !tbaa !2428
  %6295 = sext i64 %6294 to i128
  %6296 = icmp ne i128 %6295, %6293
  %6297 = zext i1 %6296 to i8
  %6298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6297, i8* %6298, align 1, !tbaa !2432
  %6299 = trunc i128 %6293 to i32
  %6300 = and i32 %6299, 255
  %6301 = call i32 @llvm.ctpop.i32(i32 %6300) #16
  %6302 = trunc i32 %6301 to i8
  %6303 = and i8 %6302, 1
  %6304 = xor i8 %6303, 1
  %6305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6304, i8* %6305, align 1, !tbaa !2446
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6306, align 1, !tbaa !2450
  %6307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6307, align 1, !tbaa !2447
  %6308 = lshr i64 %6294, 63
  %6309 = trunc i64 %6308 to i8
  %6310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6309, i8* %6310, align 1, !tbaa !2448
  %6311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6297, i8* %6311, align 1, !tbaa !2449
  %6312 = load i64, i64* %RAX
  %6313 = load i64, i64* %RCX
  %6314 = load i64, i64* %PC
  %6315 = add i64 %6314, 3
  store i64 %6315, i64* %PC
  %6316 = add i64 %6313, %6312
  store i64 %6316, i64* %RAX, align 8, !tbaa !2428
  %6317 = icmp ult i64 %6316, %6312
  %6318 = icmp ult i64 %6316, %6313
  %6319 = or i1 %6317, %6318
  %6320 = zext i1 %6319 to i8
  %6321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6320, i8* %6321, align 1, !tbaa !2432
  %6322 = trunc i64 %6316 to i32
  %6323 = and i32 %6322, 255
  %6324 = call i32 @llvm.ctpop.i32(i32 %6323) #16
  %6325 = trunc i32 %6324 to i8
  %6326 = and i8 %6325, 1
  %6327 = xor i8 %6326, 1
  %6328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6327, i8* %6328, align 1, !tbaa !2446
  %6329 = xor i64 %6313, %6312
  %6330 = xor i64 %6329, %6316
  %6331 = lshr i64 %6330, 4
  %6332 = trunc i64 %6331 to i8
  %6333 = and i8 %6332, 1
  %6334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6333, i8* %6334, align 1, !tbaa !2450
  %6335 = icmp eq i64 %6316, 0
  %6336 = zext i1 %6335 to i8
  %6337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6336, i8* %6337, align 1, !tbaa !2447
  %6338 = lshr i64 %6316, 63
  %6339 = trunc i64 %6338 to i8
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6339, i8* %6340, align 1, !tbaa !2448
  %6341 = lshr i64 %6312, 63
  %6342 = lshr i64 %6313, 63
  %6343 = xor i64 %6338, %6341
  %6344 = xor i64 %6338, %6342
  %6345 = add nuw nsw i64 %6343, %6344
  %6346 = icmp eq i64 %6345, 2
  %6347 = zext i1 %6346 to i8
  %6348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6347, i8* %6348, align 1, !tbaa !2449
  %6349 = load i64, i64* %RBP
  %6350 = sub i64 %6349, 192
  %6351 = load i64, i64* %PC
  %6352 = add i64 %6351, 7
  store i64 %6352, i64* %PC
  %6353 = inttoptr i64 %6350 to i32*
  %6354 = load i32, i32* %6353
  %6355 = sext i32 %6354 to i64
  store i64 %6355, i64* %RCX, align 8, !tbaa !2428
  %6356 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6357 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6358 = load i64, i64* %RAX
  %6359 = load i64, i64* %RCX
  %6360 = mul i64 %6359, 8
  %6361 = add i64 %6360, %6358
  %6362 = load i64, i64* %PC
  %6363 = add i64 %6362, 5
  store i64 %6363, i64* %PC
  %6364 = bitcast i8* %6357 to double*
  %6365 = load double, double* %6364, align 1
  %6366 = getelementptr inbounds i8, i8* %6357, i64 8
  %6367 = bitcast i8* %6366 to i64*
  %6368 = load i64, i64* %6367, align 1
  %6369 = inttoptr i64 %6361 to double*
  %6370 = load double, double* %6369
  %6371 = fmul double %6365, %6370
  %6372 = bitcast i8* %6356 to double*
  store double %6371, double* %6372, align 1, !tbaa !2453
  %6373 = getelementptr inbounds i8, i8* %6356, i64 8
  %6374 = bitcast i8* %6373 to i64*
  store i64 %6368, i64* %6374, align 1, !tbaa !2453
  %6375 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6376 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6377 = bitcast %union.vec128_t* %XMM1 to i8*
  %6378 = load i64, i64* %PC
  %6379 = add i64 %6378, 4
  store i64 %6379, i64* %PC
  %6380 = bitcast i8* %6376 to double*
  %6381 = load double, double* %6380, align 1
  %6382 = getelementptr inbounds i8, i8* %6376, i64 8
  %6383 = bitcast i8* %6382 to i64*
  %6384 = load i64, i64* %6383, align 1
  %6385 = bitcast i8* %6377 to double*
  %6386 = load double, double* %6385, align 1
  %6387 = fsub double %6381, %6386
  %6388 = bitcast i8* %6375 to double*
  store double %6387, double* %6388, align 1, !tbaa !2453
  %6389 = getelementptr inbounds i8, i8* %6375, i64 8
  %6390 = bitcast i8* %6389 to i64*
  store i64 %6384, i64* %6390, align 1, !tbaa !2453
  %6391 = load i64, i64* %RBP
  %6392 = sub i64 %6391, 104
  %6393 = load i64, i64* %PC
  %6394 = add i64 %6393, 4
  store i64 %6394, i64* %PC
  %6395 = inttoptr i64 %6392 to i64*
  %6396 = load i64, i64* %6395
  store i64 %6396, i64* %RAX, align 8, !tbaa !2428
  %6397 = load i64, i64* %RBP
  %6398 = sub i64 %6397, 188
  %6399 = load i64, i64* %PC
  %6400 = add i64 %6399, 7
  store i64 %6400, i64* %PC
  %6401 = inttoptr i64 %6398 to i32*
  %6402 = load i32, i32* %6401
  %6403 = sext i32 %6402 to i64
  store i64 %6403, i64* %RCX, align 8, !tbaa !2428
  %6404 = load i64, i64* %RCX
  %6405 = load i64, i64* %PC
  %6406 = add i64 %6405, 7
  store i64 %6406, i64* %PC
  %6407 = sext i64 %6404 to i128
  %6408 = and i128 %6407, -18446744073709551616
  %6409 = zext i64 %6404 to i128
  %6410 = or i128 %6408, %6409
  %6411 = mul nsw i128 520, %6410
  %6412 = trunc i128 %6411 to i64
  store i64 %6412, i64* %RCX, align 8, !tbaa !2428
  %6413 = sext i64 %6412 to i128
  %6414 = icmp ne i128 %6413, %6411
  %6415 = zext i1 %6414 to i8
  %6416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6415, i8* %6416, align 1, !tbaa !2432
  %6417 = trunc i128 %6411 to i32
  %6418 = and i32 %6417, 255
  %6419 = call i32 @llvm.ctpop.i32(i32 %6418) #16
  %6420 = trunc i32 %6419 to i8
  %6421 = and i8 %6420, 1
  %6422 = xor i8 %6421, 1
  %6423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6422, i8* %6423, align 1, !tbaa !2446
  %6424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6424, align 1, !tbaa !2450
  %6425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6425, align 1, !tbaa !2447
  %6426 = lshr i64 %6412, 63
  %6427 = trunc i64 %6426 to i8
  %6428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6427, i8* %6428, align 1, !tbaa !2448
  %6429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6415, i8* %6429, align 1, !tbaa !2449
  %6430 = load i64, i64* %RAX
  %6431 = load i64, i64* %RCX
  %6432 = load i64, i64* %PC
  %6433 = add i64 %6432, 3
  store i64 %6433, i64* %PC
  %6434 = add i64 %6431, %6430
  store i64 %6434, i64* %RAX, align 8, !tbaa !2428
  %6435 = icmp ult i64 %6434, %6430
  %6436 = icmp ult i64 %6434, %6431
  %6437 = or i1 %6435, %6436
  %6438 = zext i1 %6437 to i8
  %6439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6438, i8* %6439, align 1, !tbaa !2432
  %6440 = trunc i64 %6434 to i32
  %6441 = and i32 %6440, 255
  %6442 = call i32 @llvm.ctpop.i32(i32 %6441) #16
  %6443 = trunc i32 %6442 to i8
  %6444 = and i8 %6443, 1
  %6445 = xor i8 %6444, 1
  %6446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6445, i8* %6446, align 1, !tbaa !2446
  %6447 = xor i64 %6431, %6430
  %6448 = xor i64 %6447, %6434
  %6449 = lshr i64 %6448, 4
  %6450 = trunc i64 %6449 to i8
  %6451 = and i8 %6450, 1
  %6452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6451, i8* %6452, align 1, !tbaa !2450
  %6453 = icmp eq i64 %6434, 0
  %6454 = zext i1 %6453 to i8
  %6455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6454, i8* %6455, align 1, !tbaa !2447
  %6456 = lshr i64 %6434, 63
  %6457 = trunc i64 %6456 to i8
  %6458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6457, i8* %6458, align 1, !tbaa !2448
  %6459 = lshr i64 %6430, 63
  %6460 = lshr i64 %6431, 63
  %6461 = xor i64 %6456, %6459
  %6462 = xor i64 %6456, %6460
  %6463 = add nuw nsw i64 %6461, %6462
  %6464 = icmp eq i64 %6463, 2
  %6465 = zext i1 %6464 to i8
  %6466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6465, i8* %6466, align 1, !tbaa !2449
  %6467 = load i64, i64* %RBP
  %6468 = sub i64 %6467, 192
  %6469 = load i64, i64* %PC
  %6470 = add i64 %6469, 7
  store i64 %6470, i64* %PC
  %6471 = inttoptr i64 %6468 to i32*
  %6472 = load i32, i32* %6471
  %6473 = sext i32 %6472 to i64
  store i64 %6473, i64* %RCX, align 8, !tbaa !2428
  %6474 = load i64, i64* %RAX
  %6475 = load i64, i64* %RCX
  %6476 = mul i64 %6475, 8
  %6477 = add i64 %6476, %6474
  %6478 = bitcast %union.vec128_t* %XMM0 to i8*
  %6479 = load i64, i64* %PC
  %6480 = add i64 %6479, 5
  store i64 %6480, i64* %PC
  %6481 = bitcast i8* %6478 to double*
  %6482 = load double, double* %6481, align 1
  %6483 = inttoptr i64 %6477 to double*
  store double %6482, double* %6483
  %6484 = load i64, i64* %RBP
  %6485 = sub i64 %6484, 160
  %6486 = load i64, i64* %PC
  %6487 = add i64 %6486, 7
  store i64 %6487, i64* %PC
  %6488 = inttoptr i64 %6485 to i64*
  %6489 = load i64, i64* %6488
  store i64 %6489, i64* %RAX, align 8, !tbaa !2428
  %6490 = load i64, i64* %RBP
  %6491 = sub i64 %6490, 196
  %6492 = load i64, i64* %PC
  %6493 = add i64 %6492, 7
  store i64 %6493, i64* %PC
  %6494 = inttoptr i64 %6491 to i32*
  %6495 = load i32, i32* %6494
  %6496 = sext i32 %6495 to i64
  store i64 %6496, i64* %RCX, align 8, !tbaa !2428
  %6497 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6498 = load i64, i64* %RAX
  %6499 = load i64, i64* %RCX
  %6500 = mul i64 %6499, 8
  %6501 = add i64 %6500, %6498
  %6502 = load i64, i64* %PC
  %6503 = add i64 %6502, 5
  store i64 %6503, i64* %PC
  %6504 = inttoptr i64 %6501 to double*
  %6505 = load double, double* %6504
  %6506 = bitcast i8* %6497 to double*
  store double %6505, double* %6506, align 1, !tbaa !2453
  %6507 = getelementptr inbounds i8, i8* %6497, i64 8
  %6508 = bitcast i8* %6507 to double*
  store double 0.000000e+00, double* %6508, align 1, !tbaa !2453
  %6509 = load i64, i64* %RBP
  %6510 = sub i64 %6509, 168
  %6511 = load i64, i64* %PC
  %6512 = add i64 %6511, 7
  store i64 %6512, i64* %PC
  %6513 = inttoptr i64 %6510 to i64*
  %6514 = load i64, i64* %6513
  store i64 %6514, i64* %RAX, align 8, !tbaa !2428
  %6515 = load i64, i64* %RBP
  %6516 = sub i64 %6515, 196
  %6517 = load i64, i64* %PC
  %6518 = add i64 %6517, 7
  store i64 %6518, i64* %PC
  %6519 = inttoptr i64 %6516 to i32*
  %6520 = load i32, i32* %6519
  %6521 = sext i32 %6520 to i64
  store i64 %6521, i64* %RCX, align 8, !tbaa !2428
  %6522 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6523 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6524 = load i64, i64* %RAX
  %6525 = load i64, i64* %RCX
  %6526 = mul i64 %6525, 8
  %6527 = add i64 %6526, %6524
  %6528 = load i64, i64* %PC
  %6529 = add i64 %6528, 5
  store i64 %6529, i64* %PC
  %6530 = bitcast i8* %6523 to double*
  %6531 = load double, double* %6530, align 1
  %6532 = getelementptr inbounds i8, i8* %6523, i64 8
  %6533 = bitcast i8* %6532 to i64*
  %6534 = load i64, i64* %6533, align 1
  %6535 = inttoptr i64 %6527 to double*
  %6536 = load double, double* %6535
  %6537 = fdiv double %6531, %6536
  %6538 = bitcast i8* %6522 to double*
  store double %6537, double* %6538, align 1, !tbaa !2453
  %6539 = getelementptr inbounds i8, i8* %6522, i64 8
  %6540 = bitcast i8* %6539 to i64*
  store i64 %6534, i64* %6540, align 1, !tbaa !2453
  %6541 = load i64, i64* %RBP
  %6542 = sub i64 %6541, 136
  %6543 = load i64, i64* %PC
  %6544 = add i64 %6543, 7
  store i64 %6544, i64* %PC
  %6545 = inttoptr i64 %6542 to i64*
  %6546 = load i64, i64* %6545
  store i64 %6546, i64* %RAX, align 8, !tbaa !2428
  %6547 = load i64, i64* %RBP
  %6548 = sub i64 %6547, 188
  %6549 = load i64, i64* %PC
  %6550 = add i64 %6549, 7
  store i64 %6550, i64* %PC
  %6551 = inttoptr i64 %6548 to i32*
  %6552 = load i32, i32* %6551
  %6553 = sext i32 %6552 to i64
  store i64 %6553, i64* %RCX, align 8, !tbaa !2428
  %6554 = load i64, i64* %RCX
  %6555 = load i64, i64* %PC
  %6556 = add i64 %6555, 7
  store i64 %6556, i64* %PC
  %6557 = sext i64 %6554 to i128
  %6558 = and i128 %6557, -18446744073709551616
  %6559 = zext i64 %6554 to i128
  %6560 = or i128 %6558, %6559
  %6561 = mul nsw i128 33800, %6560
  %6562 = trunc i128 %6561 to i64
  store i64 %6562, i64* %RCX, align 8, !tbaa !2428
  %6563 = sext i64 %6562 to i128
  %6564 = icmp ne i128 %6563, %6561
  %6565 = zext i1 %6564 to i8
  %6566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6565, i8* %6566, align 1, !tbaa !2432
  %6567 = trunc i128 %6561 to i32
  %6568 = and i32 %6567, 255
  %6569 = call i32 @llvm.ctpop.i32(i32 %6568) #16
  %6570 = trunc i32 %6569 to i8
  %6571 = and i8 %6570, 1
  %6572 = xor i8 %6571, 1
  %6573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6572, i8* %6573, align 1, !tbaa !2446
  %6574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6574, align 1, !tbaa !2450
  %6575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6575, align 1, !tbaa !2447
  %6576 = lshr i64 %6562, 63
  %6577 = trunc i64 %6576 to i8
  %6578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6577, i8* %6578, align 1, !tbaa !2448
  %6579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6565, i8* %6579, align 1, !tbaa !2449
  %6580 = load i64, i64* %RAX
  %6581 = load i64, i64* %RCX
  %6582 = load i64, i64* %PC
  %6583 = add i64 %6582, 3
  store i64 %6583, i64* %PC
  %6584 = add i64 %6581, %6580
  store i64 %6584, i64* %RAX, align 8, !tbaa !2428
  %6585 = icmp ult i64 %6584, %6580
  %6586 = icmp ult i64 %6584, %6581
  %6587 = or i1 %6585, %6586
  %6588 = zext i1 %6587 to i8
  %6589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6588, i8* %6589, align 1, !tbaa !2432
  %6590 = trunc i64 %6584 to i32
  %6591 = and i32 %6590, 255
  %6592 = call i32 @llvm.ctpop.i32(i32 %6591) #16
  %6593 = trunc i32 %6592 to i8
  %6594 = and i8 %6593, 1
  %6595 = xor i8 %6594, 1
  %6596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6595, i8* %6596, align 1, !tbaa !2446
  %6597 = xor i64 %6581, %6580
  %6598 = xor i64 %6597, %6584
  %6599 = lshr i64 %6598, 4
  %6600 = trunc i64 %6599 to i8
  %6601 = and i8 %6600, 1
  %6602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6601, i8* %6602, align 1, !tbaa !2450
  %6603 = icmp eq i64 %6584, 0
  %6604 = zext i1 %6603 to i8
  %6605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6604, i8* %6605, align 1, !tbaa !2447
  %6606 = lshr i64 %6584, 63
  %6607 = trunc i64 %6606 to i8
  %6608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6607, i8* %6608, align 1, !tbaa !2448
  %6609 = lshr i64 %6580, 63
  %6610 = lshr i64 %6581, 63
  %6611 = xor i64 %6606, %6609
  %6612 = xor i64 %6606, %6610
  %6613 = add nuw nsw i64 %6611, %6612
  %6614 = icmp eq i64 %6613, 2
  %6615 = zext i1 %6614 to i8
  %6616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6615, i8* %6616, align 1, !tbaa !2449
  %6617 = load i64, i64* %RBP
  %6618 = sub i64 %6617, 192
  %6619 = load i64, i64* %PC
  %6620 = add i64 %6619, 7
  store i64 %6620, i64* %PC
  %6621 = inttoptr i64 %6618 to i32*
  %6622 = load i32, i32* %6621
  %6623 = sext i32 %6622 to i64
  store i64 %6623, i64* %RCX, align 8, !tbaa !2428
  %6624 = load i64, i64* %RCX
  %6625 = load i64, i64* %PC
  %6626 = add i64 %6625, 7
  store i64 %6626, i64* %PC
  %6627 = sext i64 %6624 to i128
  %6628 = and i128 %6627, -18446744073709551616
  %6629 = zext i64 %6624 to i128
  %6630 = or i128 %6628, %6629
  %6631 = mul nsw i128 520, %6630
  %6632 = trunc i128 %6631 to i64
  store i64 %6632, i64* %RCX, align 8, !tbaa !2428
  %6633 = sext i64 %6632 to i128
  %6634 = icmp ne i128 %6633, %6631
  %6635 = zext i1 %6634 to i8
  %6636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6635, i8* %6636, align 1, !tbaa !2432
  %6637 = trunc i128 %6631 to i32
  %6638 = and i32 %6637, 255
  %6639 = call i32 @llvm.ctpop.i32(i32 %6638) #16
  %6640 = trunc i32 %6639 to i8
  %6641 = and i8 %6640, 1
  %6642 = xor i8 %6641, 1
  %6643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6642, i8* %6643, align 1, !tbaa !2446
  %6644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6644, align 1, !tbaa !2450
  %6645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6645, align 1, !tbaa !2447
  %6646 = lshr i64 %6632, 63
  %6647 = trunc i64 %6646 to i8
  %6648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6647, i8* %6648, align 1, !tbaa !2448
  %6649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6635, i8* %6649, align 1, !tbaa !2449
  %6650 = load i64, i64* %RAX
  %6651 = load i64, i64* %RCX
  %6652 = load i64, i64* %PC
  %6653 = add i64 %6652, 3
  store i64 %6653, i64* %PC
  %6654 = add i64 %6651, %6650
  store i64 %6654, i64* %RAX, align 8, !tbaa !2428
  %6655 = icmp ult i64 %6654, %6650
  %6656 = icmp ult i64 %6654, %6651
  %6657 = or i1 %6655, %6656
  %6658 = zext i1 %6657 to i8
  %6659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6658, i8* %6659, align 1, !tbaa !2432
  %6660 = trunc i64 %6654 to i32
  %6661 = and i32 %6660, 255
  %6662 = call i32 @llvm.ctpop.i32(i32 %6661) #16
  %6663 = trunc i32 %6662 to i8
  %6664 = and i8 %6663, 1
  %6665 = xor i8 %6664, 1
  %6666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6665, i8* %6666, align 1, !tbaa !2446
  %6667 = xor i64 %6651, %6650
  %6668 = xor i64 %6667, %6654
  %6669 = lshr i64 %6668, 4
  %6670 = trunc i64 %6669 to i8
  %6671 = and i8 %6670, 1
  %6672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6671, i8* %6672, align 1, !tbaa !2450
  %6673 = icmp eq i64 %6654, 0
  %6674 = zext i1 %6673 to i8
  %6675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6674, i8* %6675, align 1, !tbaa !2447
  %6676 = lshr i64 %6654, 63
  %6677 = trunc i64 %6676 to i8
  %6678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6677, i8* %6678, align 1, !tbaa !2448
  %6679 = lshr i64 %6650, 63
  %6680 = lshr i64 %6651, 63
  %6681 = xor i64 %6676, %6679
  %6682 = xor i64 %6676, %6680
  %6683 = add nuw nsw i64 %6681, %6682
  %6684 = icmp eq i64 %6683, 2
  %6685 = zext i1 %6684 to i8
  %6686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6685, i8* %6686, align 1, !tbaa !2449
  %6687 = load i64, i64* %RBP
  %6688 = sub i64 %6687, 196
  %6689 = load i64, i64* %PC
  %6690 = add i64 %6689, 7
  store i64 %6690, i64* %PC
  %6691 = inttoptr i64 %6688 to i32*
  %6692 = load i32, i32* %6691
  %6693 = sext i32 %6692 to i64
  store i64 %6693, i64* %RCX, align 8, !tbaa !2428
  %6694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6696 = load i64, i64* %RAX
  %6697 = load i64, i64* %RCX
  %6698 = mul i64 %6697, 8
  %6699 = add i64 %6698, %6696
  %6700 = load i64, i64* %PC
  %6701 = add i64 %6700, 5
  store i64 %6701, i64* %PC
  %6702 = bitcast i8* %6695 to double*
  %6703 = load double, double* %6702, align 1
  %6704 = getelementptr inbounds i8, i8* %6695, i64 8
  %6705 = bitcast i8* %6704 to i64*
  %6706 = load i64, i64* %6705, align 1
  %6707 = inttoptr i64 %6699 to double*
  %6708 = load double, double* %6707
  %6709 = fmul double %6703, %6708
  %6710 = bitcast i8* %6694 to double*
  store double %6709, double* %6710, align 1, !tbaa !2453
  %6711 = getelementptr inbounds i8, i8* %6694, i64 8
  %6712 = bitcast i8* %6711 to i64*
  store i64 %6706, i64* %6712, align 1, !tbaa !2453
  %6713 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6714 = load i64, i64* %RBP
  %6715 = sub i64 %6714, 64
  %6716 = load i64, i64* %PC
  %6717 = add i64 %6716, 5
  store i64 %6717, i64* %PC
  %6718 = inttoptr i64 %6715 to double*
  %6719 = load double, double* %6718
  %6720 = bitcast i8* %6713 to double*
  store double %6719, double* %6720, align 1, !tbaa !2453
  %6721 = getelementptr inbounds i8, i8* %6713, i64 8
  %6722 = bitcast i8* %6721 to double*
  store double 0.000000e+00, double* %6722, align 1, !tbaa !2453
  %6723 = load i64, i64* %RBP
  %6724 = sub i64 %6723, 152
  %6725 = load i64, i64* %PC
  %6726 = add i64 %6725, 7
  store i64 %6726, i64* %PC
  %6727 = inttoptr i64 %6724 to i64*
  %6728 = load i64, i64* %6727
  store i64 %6728, i64* %RAX, align 8, !tbaa !2428
  %6729 = load i64, i64* %RBP
  %6730 = sub i64 %6729, 188
  %6731 = load i64, i64* %PC
  %6732 = add i64 %6731, 7
  store i64 %6732, i64* %PC
  %6733 = inttoptr i64 %6730 to i32*
  %6734 = load i32, i32* %6733
  %6735 = sext i32 %6734 to i64
  store i64 %6735, i64* %RCX, align 8, !tbaa !2428
  %6736 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6737 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6738 = load i64, i64* %RAX
  %6739 = load i64, i64* %RCX
  %6740 = mul i64 %6739, 8
  %6741 = add i64 %6740, %6738
  %6742 = load i64, i64* %PC
  %6743 = add i64 %6742, 5
  store i64 %6743, i64* %PC
  %6744 = bitcast i8* %6737 to double*
  %6745 = load double, double* %6744, align 1
  %6746 = getelementptr inbounds i8, i8* %6737, i64 8
  %6747 = bitcast i8* %6746 to i64*
  %6748 = load i64, i64* %6747, align 1
  %6749 = inttoptr i64 %6741 to double*
  %6750 = load double, double* %6749
  %6751 = fmul double %6745, %6750
  %6752 = bitcast i8* %6736 to double*
  store double %6751, double* %6752, align 1, !tbaa !2453
  %6753 = getelementptr inbounds i8, i8* %6736, i64 8
  %6754 = bitcast i8* %6753 to i64*
  store i64 %6748, i64* %6754, align 1, !tbaa !2453
  %6755 = load i64, i64* %RBP
  %6756 = sub i64 %6755, 168
  %6757 = load i64, i64* %PC
  %6758 = add i64 %6757, 7
  store i64 %6758, i64* %PC
  %6759 = inttoptr i64 %6756 to i64*
  %6760 = load i64, i64* %6759
  store i64 %6760, i64* %RAX, align 8, !tbaa !2428
  %6761 = load i64, i64* %RBP
  %6762 = sub i64 %6761, 196
  %6763 = load i64, i64* %PC
  %6764 = add i64 %6763, 7
  store i64 %6764, i64* %PC
  %6765 = inttoptr i64 %6762 to i32*
  %6766 = load i32, i32* %6765
  %6767 = sext i32 %6766 to i64
  store i64 %6767, i64* %RCX, align 8, !tbaa !2428
  %6768 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6769 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6770 = load i64, i64* %RAX
  %6771 = load i64, i64* %RCX
  %6772 = mul i64 %6771, 8
  %6773 = add i64 %6772, %6770
  %6774 = load i64, i64* %PC
  %6775 = add i64 %6774, 5
  store i64 %6775, i64* %PC
  %6776 = bitcast i8* %6769 to double*
  %6777 = load double, double* %6776, align 1
  %6778 = getelementptr inbounds i8, i8* %6769, i64 8
  %6779 = bitcast i8* %6778 to i64*
  %6780 = load i64, i64* %6779, align 1
  %6781 = inttoptr i64 %6773 to double*
  %6782 = load double, double* %6781
  %6783 = fdiv double %6777, %6782
  %6784 = bitcast i8* %6768 to double*
  store double %6783, double* %6784, align 1, !tbaa !2453
  %6785 = getelementptr inbounds i8, i8* %6768, i64 8
  %6786 = bitcast i8* %6785 to i64*
  store i64 %6780, i64* %6786, align 1, !tbaa !2453
  %6787 = load i64, i64* %RBP
  %6788 = sub i64 %6787, 104
  %6789 = load i64, i64* %PC
  %6790 = add i64 %6789, 4
  store i64 %6790, i64* %PC
  %6791 = inttoptr i64 %6788 to i64*
  %6792 = load i64, i64* %6791
  store i64 %6792, i64* %RAX, align 8, !tbaa !2428
  %6793 = load i64, i64* %RBP
  %6794 = sub i64 %6793, 188
  %6795 = load i64, i64* %PC
  %6796 = add i64 %6795, 7
  store i64 %6796, i64* %PC
  %6797 = inttoptr i64 %6794 to i32*
  %6798 = load i32, i32* %6797
  %6799 = sext i32 %6798 to i64
  store i64 %6799, i64* %RCX, align 8, !tbaa !2428
  %6800 = load i64, i64* %RCX
  %6801 = load i64, i64* %PC
  %6802 = add i64 %6801, 7
  store i64 %6802, i64* %PC
  %6803 = sext i64 %6800 to i128
  %6804 = and i128 %6803, -18446744073709551616
  %6805 = zext i64 %6800 to i128
  %6806 = or i128 %6804, %6805
  %6807 = mul nsw i128 520, %6806
  %6808 = trunc i128 %6807 to i64
  store i64 %6808, i64* %RCX, align 8, !tbaa !2428
  %6809 = sext i64 %6808 to i128
  %6810 = icmp ne i128 %6809, %6807
  %6811 = zext i1 %6810 to i8
  %6812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6811, i8* %6812, align 1, !tbaa !2432
  %6813 = trunc i128 %6807 to i32
  %6814 = and i32 %6813, 255
  %6815 = call i32 @llvm.ctpop.i32(i32 %6814) #16
  %6816 = trunc i32 %6815 to i8
  %6817 = and i8 %6816, 1
  %6818 = xor i8 %6817, 1
  %6819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6818, i8* %6819, align 1, !tbaa !2446
  %6820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6820, align 1, !tbaa !2450
  %6821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6821, align 1, !tbaa !2447
  %6822 = lshr i64 %6808, 63
  %6823 = trunc i64 %6822 to i8
  %6824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6823, i8* %6824, align 1, !tbaa !2448
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6811, i8* %6825, align 1, !tbaa !2449
  %6826 = load i64, i64* %RAX
  %6827 = load i64, i64* %RCX
  %6828 = load i64, i64* %PC
  %6829 = add i64 %6828, 3
  store i64 %6829, i64* %PC
  %6830 = add i64 %6827, %6826
  store i64 %6830, i64* %RAX, align 8, !tbaa !2428
  %6831 = icmp ult i64 %6830, %6826
  %6832 = icmp ult i64 %6830, %6827
  %6833 = or i1 %6831, %6832
  %6834 = zext i1 %6833 to i8
  %6835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6834, i8* %6835, align 1, !tbaa !2432
  %6836 = trunc i64 %6830 to i32
  %6837 = and i32 %6836, 255
  %6838 = call i32 @llvm.ctpop.i32(i32 %6837) #16
  %6839 = trunc i32 %6838 to i8
  %6840 = and i8 %6839, 1
  %6841 = xor i8 %6840, 1
  %6842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6841, i8* %6842, align 1, !tbaa !2446
  %6843 = xor i64 %6827, %6826
  %6844 = xor i64 %6843, %6830
  %6845 = lshr i64 %6844, 4
  %6846 = trunc i64 %6845 to i8
  %6847 = and i8 %6846, 1
  %6848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6847, i8* %6848, align 1, !tbaa !2450
  %6849 = icmp eq i64 %6830, 0
  %6850 = zext i1 %6849 to i8
  %6851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6850, i8* %6851, align 1, !tbaa !2447
  %6852 = lshr i64 %6830, 63
  %6853 = trunc i64 %6852 to i8
  %6854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6853, i8* %6854, align 1, !tbaa !2448
  %6855 = lshr i64 %6826, 63
  %6856 = lshr i64 %6827, 63
  %6857 = xor i64 %6852, %6855
  %6858 = xor i64 %6852, %6856
  %6859 = add nuw nsw i64 %6857, %6858
  %6860 = icmp eq i64 %6859, 2
  %6861 = zext i1 %6860 to i8
  %6862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6861, i8* %6862, align 1, !tbaa !2449
  %6863 = load i64, i64* %RBP
  %6864 = sub i64 %6863, 192
  %6865 = load i64, i64* %PC
  %6866 = add i64 %6865, 7
  store i64 %6866, i64* %PC
  %6867 = inttoptr i64 %6864 to i32*
  %6868 = load i32, i32* %6867
  %6869 = sext i32 %6868 to i64
  store i64 %6869, i64* %RCX, align 8, !tbaa !2428
  %6870 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6871 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6872 = load i64, i64* %RAX
  %6873 = load i64, i64* %RCX
  %6874 = mul i64 %6873, 8
  %6875 = add i64 %6874, %6872
  %6876 = load i64, i64* %PC
  %6877 = add i64 %6876, 5
  store i64 %6877, i64* %PC
  %6878 = bitcast i8* %6871 to double*
  %6879 = load double, double* %6878, align 1
  %6880 = getelementptr inbounds i8, i8* %6871, i64 8
  %6881 = bitcast i8* %6880 to i64*
  %6882 = load i64, i64* %6881, align 1
  %6883 = inttoptr i64 %6875 to double*
  %6884 = load double, double* %6883
  %6885 = fmul double %6879, %6884
  %6886 = bitcast i8* %6870 to double*
  store double %6885, double* %6886, align 1, !tbaa !2453
  %6887 = getelementptr inbounds i8, i8* %6870, i64 8
  %6888 = bitcast i8* %6887 to i64*
  store i64 %6882, i64* %6888, align 1, !tbaa !2453
  %6889 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6890 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6891 = bitcast %union.vec128_t* %XMM1 to i8*
  %6892 = load i64, i64* %PC
  %6893 = add i64 %6892, 4
  store i64 %6893, i64* %PC
  %6894 = bitcast i8* %6890 to double*
  %6895 = load double, double* %6894, align 1
  %6896 = getelementptr inbounds i8, i8* %6890, i64 8
  %6897 = bitcast i8* %6896 to i64*
  %6898 = load i64, i64* %6897, align 1
  %6899 = bitcast i8* %6891 to double*
  %6900 = load double, double* %6899, align 1
  %6901 = fadd double %6895, %6900
  %6902 = bitcast i8* %6889 to double*
  store double %6901, double* %6902, align 1, !tbaa !2453
  %6903 = getelementptr inbounds i8, i8* %6889, i64 8
  %6904 = bitcast i8* %6903 to i64*
  store i64 %6898, i64* %6904, align 1, !tbaa !2453
  %6905 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6906 = load i64, i64* %RBP
  %6907 = sub i64 %6906, 64
  %6908 = load i64, i64* %PC
  %6909 = add i64 %6908, 5
  store i64 %6909, i64* %PC
  %6910 = inttoptr i64 %6907 to double*
  %6911 = load double, double* %6910
  %6912 = bitcast i8* %6905 to double*
  store double %6911, double* %6912, align 1, !tbaa !2453
  %6913 = getelementptr inbounds i8, i8* %6905, i64 8
  %6914 = bitcast i8* %6913 to double*
  store double 0.000000e+00, double* %6914, align 1, !tbaa !2453
  %6915 = load i64, i64* %RBP
  %6916 = sub i64 %6915, 144
  %6917 = load i64, i64* %PC
  %6918 = add i64 %6917, 7
  store i64 %6918, i64* %PC
  %6919 = inttoptr i64 %6916 to i64*
  %6920 = load i64, i64* %6919
  store i64 %6920, i64* %RAX, align 8, !tbaa !2428
  %6921 = load i64, i64* %RBP
  %6922 = sub i64 %6921, 188
  %6923 = load i64, i64* %PC
  %6924 = add i64 %6923, 7
  store i64 %6924, i64* %PC
  %6925 = inttoptr i64 %6922 to i32*
  %6926 = load i32, i32* %6925
  %6927 = sext i32 %6926 to i64
  store i64 %6927, i64* %RCX, align 8, !tbaa !2428
  %6928 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6929 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6930 = load i64, i64* %RAX
  %6931 = load i64, i64* %RCX
  %6932 = mul i64 %6931, 8
  %6933 = add i64 %6932, %6930
  %6934 = load i64, i64* %PC
  %6935 = add i64 %6934, 5
  store i64 %6935, i64* %PC
  %6936 = bitcast i8* %6929 to double*
  %6937 = load double, double* %6936, align 1
  %6938 = getelementptr inbounds i8, i8* %6929, i64 8
  %6939 = bitcast i8* %6938 to i64*
  %6940 = load i64, i64* %6939, align 1
  %6941 = inttoptr i64 %6933 to double*
  %6942 = load double, double* %6941
  %6943 = fmul double %6937, %6942
  %6944 = bitcast i8* %6928 to double*
  store double %6943, double* %6944, align 1, !tbaa !2453
  %6945 = getelementptr inbounds i8, i8* %6928, i64 8
  %6946 = bitcast i8* %6945 to i64*
  store i64 %6940, i64* %6946, align 1, !tbaa !2453
  %6947 = load i64, i64* %RBP
  %6948 = sub i64 %6947, 168
  %6949 = load i64, i64* %PC
  %6950 = add i64 %6949, 7
  store i64 %6950, i64* %PC
  %6951 = inttoptr i64 %6948 to i64*
  %6952 = load i64, i64* %6951
  store i64 %6952, i64* %RAX, align 8, !tbaa !2428
  %6953 = load i64, i64* %RBP
  %6954 = sub i64 %6953, 196
  %6955 = load i64, i64* %PC
  %6956 = add i64 %6955, 7
  store i64 %6956, i64* %PC
  %6957 = inttoptr i64 %6954 to i32*
  %6958 = load i32, i32* %6957
  %6959 = sext i32 %6958 to i64
  store i64 %6959, i64* %RCX, align 8, !tbaa !2428
  %6960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6961 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6962 = load i64, i64* %RAX
  %6963 = load i64, i64* %RCX
  %6964 = mul i64 %6963, 8
  %6965 = add i64 %6964, %6962
  %6966 = load i64, i64* %PC
  %6967 = add i64 %6966, 5
  store i64 %6967, i64* %PC
  %6968 = bitcast i8* %6961 to double*
  %6969 = load double, double* %6968, align 1
  %6970 = getelementptr inbounds i8, i8* %6961, i64 8
  %6971 = bitcast i8* %6970 to i64*
  %6972 = load i64, i64* %6971, align 1
  %6973 = inttoptr i64 %6965 to double*
  %6974 = load double, double* %6973
  %6975 = fdiv double %6969, %6974
  %6976 = bitcast i8* %6960 to double*
  store double %6975, double* %6976, align 1, !tbaa !2453
  %6977 = getelementptr inbounds i8, i8* %6960, i64 8
  %6978 = bitcast i8* %6977 to i64*
  store i64 %6972, i64* %6978, align 1, !tbaa !2453
  %6979 = load i64, i64* %RBP
  %6980 = sub i64 %6979, 112
  %6981 = load i64, i64* %PC
  %6982 = add i64 %6981, 4
  store i64 %6982, i64* %PC
  %6983 = inttoptr i64 %6980 to i64*
  %6984 = load i64, i64* %6983
  store i64 %6984, i64* %RAX, align 8, !tbaa !2428
  %6985 = load i64, i64* %RBP
  %6986 = sub i64 %6985, 188
  %6987 = load i64, i64* %PC
  %6988 = add i64 %6987, 7
  store i64 %6988, i64* %PC
  %6989 = inttoptr i64 %6986 to i32*
  %6990 = load i32, i32* %6989
  %6991 = sext i32 %6990 to i64
  store i64 %6991, i64* %RCX, align 8, !tbaa !2428
  %6992 = load i64, i64* %RCX
  %6993 = load i64, i64* %PC
  %6994 = add i64 %6993, 7
  store i64 %6994, i64* %PC
  %6995 = sext i64 %6992 to i128
  %6996 = and i128 %6995, -18446744073709551616
  %6997 = zext i64 %6992 to i128
  %6998 = or i128 %6996, %6997
  %6999 = mul nsw i128 33800, %6998
  %7000 = trunc i128 %6999 to i64
  store i64 %7000, i64* %RCX, align 8, !tbaa !2428
  %7001 = sext i64 %7000 to i128
  %7002 = icmp ne i128 %7001, %6999
  %7003 = zext i1 %7002 to i8
  %7004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7003, i8* %7004, align 1, !tbaa !2432
  %7005 = trunc i128 %6999 to i32
  %7006 = and i32 %7005, 255
  %7007 = call i32 @llvm.ctpop.i32(i32 %7006) #16
  %7008 = trunc i32 %7007 to i8
  %7009 = and i8 %7008, 1
  %7010 = xor i8 %7009, 1
  %7011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7010, i8* %7011, align 1, !tbaa !2446
  %7012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7012, align 1, !tbaa !2450
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7013, align 1, !tbaa !2447
  %7014 = lshr i64 %7000, 63
  %7015 = trunc i64 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7015, i8* %7016, align 1, !tbaa !2448
  %7017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7003, i8* %7017, align 1, !tbaa !2449
  %7018 = load i64, i64* %RAX
  %7019 = load i64, i64* %RCX
  %7020 = load i64, i64* %PC
  %7021 = add i64 %7020, 3
  store i64 %7021, i64* %PC
  %7022 = add i64 %7019, %7018
  store i64 %7022, i64* %RAX, align 8, !tbaa !2428
  %7023 = icmp ult i64 %7022, %7018
  %7024 = icmp ult i64 %7022, %7019
  %7025 = or i1 %7023, %7024
  %7026 = zext i1 %7025 to i8
  %7027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7026, i8* %7027, align 1, !tbaa !2432
  %7028 = trunc i64 %7022 to i32
  %7029 = and i32 %7028, 255
  %7030 = call i32 @llvm.ctpop.i32(i32 %7029) #16
  %7031 = trunc i32 %7030 to i8
  %7032 = and i8 %7031, 1
  %7033 = xor i8 %7032, 1
  %7034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7033, i8* %7034, align 1, !tbaa !2446
  %7035 = xor i64 %7019, %7018
  %7036 = xor i64 %7035, %7022
  %7037 = lshr i64 %7036, 4
  %7038 = trunc i64 %7037 to i8
  %7039 = and i8 %7038, 1
  %7040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7039, i8* %7040, align 1, !tbaa !2450
  %7041 = icmp eq i64 %7022, 0
  %7042 = zext i1 %7041 to i8
  %7043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7042, i8* %7043, align 1, !tbaa !2447
  %7044 = lshr i64 %7022, 63
  %7045 = trunc i64 %7044 to i8
  %7046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7045, i8* %7046, align 1, !tbaa !2448
  %7047 = lshr i64 %7018, 63
  %7048 = lshr i64 %7019, 63
  %7049 = xor i64 %7044, %7047
  %7050 = xor i64 %7044, %7048
  %7051 = add nuw nsw i64 %7049, %7050
  %7052 = icmp eq i64 %7051, 2
  %7053 = zext i1 %7052 to i8
  %7054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7053, i8* %7054, align 1, !tbaa !2449
  %7055 = load i64, i64* %RBP
  %7056 = sub i64 %7055, 192
  %7057 = load i64, i64* %PC
  %7058 = add i64 %7057, 7
  store i64 %7058, i64* %PC
  %7059 = inttoptr i64 %7056 to i32*
  %7060 = load i32, i32* %7059
  %7061 = sext i32 %7060 to i64
  store i64 %7061, i64* %RCX, align 8, !tbaa !2428
  %7062 = load i64, i64* %RCX
  %7063 = load i64, i64* %PC
  %7064 = add i64 %7063, 7
  store i64 %7064, i64* %PC
  %7065 = sext i64 %7062 to i128
  %7066 = and i128 %7065, -18446744073709551616
  %7067 = zext i64 %7062 to i128
  %7068 = or i128 %7066, %7067
  %7069 = mul nsw i128 520, %7068
  %7070 = trunc i128 %7069 to i64
  store i64 %7070, i64* %RCX, align 8, !tbaa !2428
  %7071 = sext i64 %7070 to i128
  %7072 = icmp ne i128 %7071, %7069
  %7073 = zext i1 %7072 to i8
  %7074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7073, i8* %7074, align 1, !tbaa !2432
  %7075 = trunc i128 %7069 to i32
  %7076 = and i32 %7075, 255
  %7077 = call i32 @llvm.ctpop.i32(i32 %7076) #16
  %7078 = trunc i32 %7077 to i8
  %7079 = and i8 %7078, 1
  %7080 = xor i8 %7079, 1
  %7081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7080, i8* %7081, align 1, !tbaa !2446
  %7082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7082, align 1, !tbaa !2450
  %7083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7083, align 1, !tbaa !2447
  %7084 = lshr i64 %7070, 63
  %7085 = trunc i64 %7084 to i8
  %7086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7085, i8* %7086, align 1, !tbaa !2448
  %7087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7073, i8* %7087, align 1, !tbaa !2449
  %7088 = load i64, i64* %RAX
  %7089 = load i64, i64* %RCX
  %7090 = load i64, i64* %PC
  %7091 = add i64 %7090, 3
  store i64 %7091, i64* %PC
  %7092 = add i64 %7089, %7088
  store i64 %7092, i64* %RAX, align 8, !tbaa !2428
  %7093 = icmp ult i64 %7092, %7088
  %7094 = icmp ult i64 %7092, %7089
  %7095 = or i1 %7093, %7094
  %7096 = zext i1 %7095 to i8
  %7097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7096, i8* %7097, align 1, !tbaa !2432
  %7098 = trunc i64 %7092 to i32
  %7099 = and i32 %7098, 255
  %7100 = call i32 @llvm.ctpop.i32(i32 %7099) #16
  %7101 = trunc i32 %7100 to i8
  %7102 = and i8 %7101, 1
  %7103 = xor i8 %7102, 1
  %7104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7103, i8* %7104, align 1, !tbaa !2446
  %7105 = xor i64 %7089, %7088
  %7106 = xor i64 %7105, %7092
  %7107 = lshr i64 %7106, 4
  %7108 = trunc i64 %7107 to i8
  %7109 = and i8 %7108, 1
  %7110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7109, i8* %7110, align 1, !tbaa !2450
  %7111 = icmp eq i64 %7092, 0
  %7112 = zext i1 %7111 to i8
  %7113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7112, i8* %7113, align 1, !tbaa !2447
  %7114 = lshr i64 %7092, 63
  %7115 = trunc i64 %7114 to i8
  %7116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7115, i8* %7116, align 1, !tbaa !2448
  %7117 = lshr i64 %7088, 63
  %7118 = lshr i64 %7089, 63
  %7119 = xor i64 %7114, %7117
  %7120 = xor i64 %7114, %7118
  %7121 = add nuw nsw i64 %7119, %7120
  %7122 = icmp eq i64 %7121, 2
  %7123 = zext i1 %7122 to i8
  %7124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7123, i8* %7124, align 1, !tbaa !2449
  %7125 = load i64, i64* %RBP
  %7126 = sub i64 %7125, 196
  %7127 = load i64, i64* %PC
  %7128 = add i64 %7127, 7
  store i64 %7128, i64* %PC
  %7129 = inttoptr i64 %7126 to i32*
  %7130 = load i32, i32* %7129
  %7131 = sext i32 %7130 to i64
  store i64 %7131, i64* %RCX, align 8, !tbaa !2428
  %7132 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7133 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7134 = load i64, i64* %RAX
  %7135 = load i64, i64* %RCX
  %7136 = mul i64 %7135, 8
  %7137 = add i64 %7136, %7134
  %7138 = load i64, i64* %PC
  %7139 = add i64 %7138, 5
  store i64 %7139, i64* %PC
  %7140 = bitcast i8* %7133 to double*
  %7141 = load double, double* %7140, align 1
  %7142 = getelementptr inbounds i8, i8* %7133, i64 8
  %7143 = bitcast i8* %7142 to i64*
  %7144 = load i64, i64* %7143, align 1
  %7145 = inttoptr i64 %7137 to double*
  %7146 = load double, double* %7145
  %7147 = fmul double %7141, %7146
  %7148 = bitcast i8* %7132 to double*
  store double %7147, double* %7148, align 1, !tbaa !2453
  %7149 = getelementptr inbounds i8, i8* %7132, i64 8
  %7150 = bitcast i8* %7149 to i64*
  store i64 %7144, i64* %7150, align 1, !tbaa !2453
  %7151 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7153 = bitcast %union.vec128_t* %XMM1 to i8*
  %7154 = load i64, i64* %PC
  %7155 = add i64 %7154, 4
  store i64 %7155, i64* %PC
  %7156 = bitcast i8* %7152 to double*
  %7157 = load double, double* %7156, align 1
  %7158 = getelementptr inbounds i8, i8* %7152, i64 8
  %7159 = bitcast i8* %7158 to i64*
  %7160 = load i64, i64* %7159, align 1
  %7161 = bitcast i8* %7153 to double*
  %7162 = load double, double* %7161, align 1
  %7163 = fsub double %7157, %7162
  %7164 = bitcast i8* %7151 to double*
  store double %7163, double* %7164, align 1, !tbaa !2453
  %7165 = getelementptr inbounds i8, i8* %7151, i64 8
  %7166 = bitcast i8* %7165 to i64*
  store i64 %7160, i64* %7166, align 1, !tbaa !2453
  %7167 = load i64, i64* %RBP
  %7168 = sub i64 %7167, 136
  %7169 = load i64, i64* %PC
  %7170 = add i64 %7169, 7
  store i64 %7170, i64* %PC
  %7171 = inttoptr i64 %7168 to i64*
  %7172 = load i64, i64* %7171
  store i64 %7172, i64* %RAX, align 8, !tbaa !2428
  %7173 = load i64, i64* %RBP
  %7174 = sub i64 %7173, 188
  %7175 = load i64, i64* %PC
  %7176 = add i64 %7175, 7
  store i64 %7176, i64* %PC
  %7177 = inttoptr i64 %7174 to i32*
  %7178 = load i32, i32* %7177
  %7179 = sext i32 %7178 to i64
  store i64 %7179, i64* %RCX, align 8, !tbaa !2428
  %7180 = load i64, i64* %RCX
  %7181 = load i64, i64* %PC
  %7182 = add i64 %7181, 7
  store i64 %7182, i64* %PC
  %7183 = sext i64 %7180 to i128
  %7184 = and i128 %7183, -18446744073709551616
  %7185 = zext i64 %7180 to i128
  %7186 = or i128 %7184, %7185
  %7187 = mul nsw i128 33800, %7186
  %7188 = trunc i128 %7187 to i64
  store i64 %7188, i64* %RCX, align 8, !tbaa !2428
  %7189 = sext i64 %7188 to i128
  %7190 = icmp ne i128 %7189, %7187
  %7191 = zext i1 %7190 to i8
  %7192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7191, i8* %7192, align 1, !tbaa !2432
  %7193 = trunc i128 %7187 to i32
  %7194 = and i32 %7193, 255
  %7195 = call i32 @llvm.ctpop.i32(i32 %7194) #16
  %7196 = trunc i32 %7195 to i8
  %7197 = and i8 %7196, 1
  %7198 = xor i8 %7197, 1
  %7199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7198, i8* %7199, align 1, !tbaa !2446
  %7200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7200, align 1, !tbaa !2450
  %7201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7201, align 1, !tbaa !2447
  %7202 = lshr i64 %7188, 63
  %7203 = trunc i64 %7202 to i8
  %7204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7203, i8* %7204, align 1, !tbaa !2448
  %7205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7191, i8* %7205, align 1, !tbaa !2449
  %7206 = load i64, i64* %RAX
  %7207 = load i64, i64* %RCX
  %7208 = load i64, i64* %PC
  %7209 = add i64 %7208, 3
  store i64 %7209, i64* %PC
  %7210 = add i64 %7207, %7206
  store i64 %7210, i64* %RAX, align 8, !tbaa !2428
  %7211 = icmp ult i64 %7210, %7206
  %7212 = icmp ult i64 %7210, %7207
  %7213 = or i1 %7211, %7212
  %7214 = zext i1 %7213 to i8
  %7215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7214, i8* %7215, align 1, !tbaa !2432
  %7216 = trunc i64 %7210 to i32
  %7217 = and i32 %7216, 255
  %7218 = call i32 @llvm.ctpop.i32(i32 %7217) #16
  %7219 = trunc i32 %7218 to i8
  %7220 = and i8 %7219, 1
  %7221 = xor i8 %7220, 1
  %7222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7221, i8* %7222, align 1, !tbaa !2446
  %7223 = xor i64 %7207, %7206
  %7224 = xor i64 %7223, %7210
  %7225 = lshr i64 %7224, 4
  %7226 = trunc i64 %7225 to i8
  %7227 = and i8 %7226, 1
  %7228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7227, i8* %7228, align 1, !tbaa !2450
  %7229 = icmp eq i64 %7210, 0
  %7230 = zext i1 %7229 to i8
  %7231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7230, i8* %7231, align 1, !tbaa !2447
  %7232 = lshr i64 %7210, 63
  %7233 = trunc i64 %7232 to i8
  %7234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7233, i8* %7234, align 1, !tbaa !2448
  %7235 = lshr i64 %7206, 63
  %7236 = lshr i64 %7207, 63
  %7237 = xor i64 %7232, %7235
  %7238 = xor i64 %7232, %7236
  %7239 = add nuw nsw i64 %7237, %7238
  %7240 = icmp eq i64 %7239, 2
  %7241 = zext i1 %7240 to i8
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7241, i8* %7242, align 1, !tbaa !2449
  %7243 = load i64, i64* %RBP
  %7244 = sub i64 %7243, 192
  %7245 = load i64, i64* %PC
  %7246 = add i64 %7245, 7
  store i64 %7246, i64* %PC
  %7247 = inttoptr i64 %7244 to i32*
  %7248 = load i32, i32* %7247
  %7249 = sext i32 %7248 to i64
  store i64 %7249, i64* %RCX, align 8, !tbaa !2428
  %7250 = load i64, i64* %RCX
  %7251 = load i64, i64* %PC
  %7252 = add i64 %7251, 7
  store i64 %7252, i64* %PC
  %7253 = sext i64 %7250 to i128
  %7254 = and i128 %7253, -18446744073709551616
  %7255 = zext i64 %7250 to i128
  %7256 = or i128 %7254, %7255
  %7257 = mul nsw i128 520, %7256
  %7258 = trunc i128 %7257 to i64
  store i64 %7258, i64* %RCX, align 8, !tbaa !2428
  %7259 = sext i64 %7258 to i128
  %7260 = icmp ne i128 %7259, %7257
  %7261 = zext i1 %7260 to i8
  %7262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7261, i8* %7262, align 1, !tbaa !2432
  %7263 = trunc i128 %7257 to i32
  %7264 = and i32 %7263, 255
  %7265 = call i32 @llvm.ctpop.i32(i32 %7264) #16
  %7266 = trunc i32 %7265 to i8
  %7267 = and i8 %7266, 1
  %7268 = xor i8 %7267, 1
  %7269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7268, i8* %7269, align 1, !tbaa !2446
  %7270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7270, align 1, !tbaa !2450
  %7271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7271, align 1, !tbaa !2447
  %7272 = lshr i64 %7258, 63
  %7273 = trunc i64 %7272 to i8
  %7274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7273, i8* %7274, align 1, !tbaa !2448
  %7275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7261, i8* %7275, align 1, !tbaa !2449
  %7276 = load i64, i64* %RAX
  %7277 = load i64, i64* %RCX
  %7278 = load i64, i64* %PC
  %7279 = add i64 %7278, 3
  store i64 %7279, i64* %PC
  %7280 = add i64 %7277, %7276
  store i64 %7280, i64* %RAX, align 8, !tbaa !2428
  %7281 = icmp ult i64 %7280, %7276
  %7282 = icmp ult i64 %7280, %7277
  %7283 = or i1 %7281, %7282
  %7284 = zext i1 %7283 to i8
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7284, i8* %7285, align 1, !tbaa !2432
  %7286 = trunc i64 %7280 to i32
  %7287 = and i32 %7286, 255
  %7288 = call i32 @llvm.ctpop.i32(i32 %7287) #16
  %7289 = trunc i32 %7288 to i8
  %7290 = and i8 %7289, 1
  %7291 = xor i8 %7290, 1
  %7292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7291, i8* %7292, align 1, !tbaa !2446
  %7293 = xor i64 %7277, %7276
  %7294 = xor i64 %7293, %7280
  %7295 = lshr i64 %7294, 4
  %7296 = trunc i64 %7295 to i8
  %7297 = and i8 %7296, 1
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7297, i8* %7298, align 1, !tbaa !2450
  %7299 = icmp eq i64 %7280, 0
  %7300 = zext i1 %7299 to i8
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7300, i8* %7301, align 1, !tbaa !2447
  %7302 = lshr i64 %7280, 63
  %7303 = trunc i64 %7302 to i8
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7303, i8* %7304, align 1, !tbaa !2448
  %7305 = lshr i64 %7276, 63
  %7306 = lshr i64 %7277, 63
  %7307 = xor i64 %7302, %7305
  %7308 = xor i64 %7302, %7306
  %7309 = add nuw nsw i64 %7307, %7308
  %7310 = icmp eq i64 %7309, 2
  %7311 = zext i1 %7310 to i8
  %7312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7311, i8* %7312, align 1, !tbaa !2449
  %7313 = load i64, i64* %RBP
  %7314 = sub i64 %7313, 196
  %7315 = load i64, i64* %PC
  %7316 = add i64 %7315, 7
  store i64 %7316, i64* %PC
  %7317 = inttoptr i64 %7314 to i32*
  %7318 = load i32, i32* %7317
  %7319 = sext i32 %7318 to i64
  store i64 %7319, i64* %RCX, align 8, !tbaa !2428
  %7320 = load i64, i64* %RAX
  %7321 = load i64, i64* %RCX
  %7322 = mul i64 %7321, 8
  %7323 = add i64 %7322, %7320
  %7324 = bitcast %union.vec128_t* %XMM0 to i8*
  %7325 = load i64, i64* %PC
  %7326 = add i64 %7325, 5
  store i64 %7326, i64* %PC
  %7327 = bitcast i8* %7324 to double*
  %7328 = load double, double* %7327, align 1
  %7329 = inttoptr i64 %7323 to double*
  store double %7328, double* %7329
  %7330 = load i64, i64* %RBP
  %7331 = sub i64 %7330, 104
  %7332 = load i64, i64* %PC
  %7333 = add i64 %7332, 4
  store i64 %7333, i64* %PC
  %7334 = inttoptr i64 %7331 to i64*
  %7335 = load i64, i64* %7334
  store i64 %7335, i64* %RAX, align 8, !tbaa !2428
  %7336 = load i64, i64* %RBP
  %7337 = sub i64 %7336, 188
  %7338 = load i64, i64* %PC
  %7339 = add i64 %7338, 7
  store i64 %7339, i64* %PC
  %7340 = inttoptr i64 %7337 to i32*
  %7341 = load i32, i32* %7340
  %7342 = sext i32 %7341 to i64
  store i64 %7342, i64* %RCX, align 8, !tbaa !2428
  %7343 = load i64, i64* %RCX
  %7344 = load i64, i64* %PC
  %7345 = add i64 %7344, 7
  store i64 %7345, i64* %PC
  %7346 = sext i64 %7343 to i128
  %7347 = and i128 %7346, -18446744073709551616
  %7348 = zext i64 %7343 to i128
  %7349 = or i128 %7347, %7348
  %7350 = mul nsw i128 520, %7349
  %7351 = trunc i128 %7350 to i64
  store i64 %7351, i64* %RCX, align 8, !tbaa !2428
  %7352 = sext i64 %7351 to i128
  %7353 = icmp ne i128 %7352, %7350
  %7354 = zext i1 %7353 to i8
  %7355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7354, i8* %7355, align 1, !tbaa !2432
  %7356 = trunc i128 %7350 to i32
  %7357 = and i32 %7356, 255
  %7358 = call i32 @llvm.ctpop.i32(i32 %7357) #16
  %7359 = trunc i32 %7358 to i8
  %7360 = and i8 %7359, 1
  %7361 = xor i8 %7360, 1
  %7362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7361, i8* %7362, align 1, !tbaa !2446
  %7363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7363, align 1, !tbaa !2450
  %7364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7364, align 1, !tbaa !2447
  %7365 = lshr i64 %7351, 63
  %7366 = trunc i64 %7365 to i8
  %7367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7366, i8* %7367, align 1, !tbaa !2448
  %7368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7354, i8* %7368, align 1, !tbaa !2449
  %7369 = load i64, i64* %RAX
  %7370 = load i64, i64* %RCX
  %7371 = load i64, i64* %PC
  %7372 = add i64 %7371, 3
  store i64 %7372, i64* %PC
  %7373 = add i64 %7370, %7369
  store i64 %7373, i64* %RAX, align 8, !tbaa !2428
  %7374 = icmp ult i64 %7373, %7369
  %7375 = icmp ult i64 %7373, %7370
  %7376 = or i1 %7374, %7375
  %7377 = zext i1 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7377, i8* %7378, align 1, !tbaa !2432
  %7379 = trunc i64 %7373 to i32
  %7380 = and i32 %7379, 255
  %7381 = call i32 @llvm.ctpop.i32(i32 %7380) #16
  %7382 = trunc i32 %7381 to i8
  %7383 = and i8 %7382, 1
  %7384 = xor i8 %7383, 1
  %7385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7384, i8* %7385, align 1, !tbaa !2446
  %7386 = xor i64 %7370, %7369
  %7387 = xor i64 %7386, %7373
  %7388 = lshr i64 %7387, 4
  %7389 = trunc i64 %7388 to i8
  %7390 = and i8 %7389, 1
  %7391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7390, i8* %7391, align 1, !tbaa !2450
  %7392 = icmp eq i64 %7373, 0
  %7393 = zext i1 %7392 to i8
  %7394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7393, i8* %7394, align 1, !tbaa !2447
  %7395 = lshr i64 %7373, 63
  %7396 = trunc i64 %7395 to i8
  %7397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7396, i8* %7397, align 1, !tbaa !2448
  %7398 = lshr i64 %7369, 63
  %7399 = lshr i64 %7370, 63
  %7400 = xor i64 %7395, %7398
  %7401 = xor i64 %7395, %7399
  %7402 = add nuw nsw i64 %7400, %7401
  %7403 = icmp eq i64 %7402, 2
  %7404 = zext i1 %7403 to i8
  %7405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7404, i8* %7405, align 1, !tbaa !2449
  %7406 = load i64, i64* %RBP
  %7407 = sub i64 %7406, 192
  %7408 = load i64, i64* %PC
  %7409 = add i64 %7408, 7
  store i64 %7409, i64* %PC
  %7410 = inttoptr i64 %7407 to i32*
  %7411 = load i32, i32* %7410
  %7412 = sext i32 %7411 to i64
  store i64 %7412, i64* %RCX, align 8, !tbaa !2428
  %7413 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7414 = load i64, i64* %RAX
  %7415 = load i64, i64* %RCX
  %7416 = mul i64 %7415, 8
  %7417 = add i64 %7416, %7414
  %7418 = load i64, i64* %PC
  %7419 = add i64 %7418, 5
  store i64 %7419, i64* %PC
  %7420 = inttoptr i64 %7417 to double*
  %7421 = load double, double* %7420
  %7422 = bitcast i8* %7413 to double*
  store double %7421, double* %7422, align 1, !tbaa !2453
  %7423 = getelementptr inbounds i8, i8* %7413, i64 8
  %7424 = bitcast i8* %7423 to double*
  store double 0.000000e+00, double* %7424, align 1, !tbaa !2453
  %7425 = load i64, i64* %RBP
  %7426 = sub i64 %7425, 112
  %7427 = load i64, i64* %PC
  %7428 = add i64 %7427, 4
  store i64 %7428, i64* %PC
  %7429 = inttoptr i64 %7426 to i64*
  %7430 = load i64, i64* %7429
  store i64 %7430, i64* %RAX, align 8, !tbaa !2428
  %7431 = load i64, i64* %RBP
  %7432 = sub i64 %7431, 188
  %7433 = load i64, i64* %PC
  %7434 = add i64 %7433, 7
  store i64 %7434, i64* %PC
  %7435 = inttoptr i64 %7432 to i32*
  %7436 = load i32, i32* %7435
  %7437 = sext i32 %7436 to i64
  store i64 %7437, i64* %RCX, align 8, !tbaa !2428
  %7438 = load i64, i64* %RCX
  %7439 = load i64, i64* %PC
  %7440 = add i64 %7439, 7
  store i64 %7440, i64* %PC
  %7441 = sext i64 %7438 to i128
  %7442 = and i128 %7441, -18446744073709551616
  %7443 = zext i64 %7438 to i128
  %7444 = or i128 %7442, %7443
  %7445 = mul nsw i128 33800, %7444
  %7446 = trunc i128 %7445 to i64
  store i64 %7446, i64* %RCX, align 8, !tbaa !2428
  %7447 = sext i64 %7446 to i128
  %7448 = icmp ne i128 %7447, %7445
  %7449 = zext i1 %7448 to i8
  %7450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7449, i8* %7450, align 1, !tbaa !2432
  %7451 = trunc i128 %7445 to i32
  %7452 = and i32 %7451, 255
  %7453 = call i32 @llvm.ctpop.i32(i32 %7452) #16
  %7454 = trunc i32 %7453 to i8
  %7455 = and i8 %7454, 1
  %7456 = xor i8 %7455, 1
  %7457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7456, i8* %7457, align 1, !tbaa !2446
  %7458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7458, align 1, !tbaa !2450
  %7459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7459, align 1, !tbaa !2447
  %7460 = lshr i64 %7446, 63
  %7461 = trunc i64 %7460 to i8
  %7462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7461, i8* %7462, align 1, !tbaa !2448
  %7463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7449, i8* %7463, align 1, !tbaa !2449
  %7464 = load i64, i64* %RAX
  %7465 = load i64, i64* %RCX
  %7466 = load i64, i64* %PC
  %7467 = add i64 %7466, 3
  store i64 %7467, i64* %PC
  %7468 = add i64 %7465, %7464
  store i64 %7468, i64* %RAX, align 8, !tbaa !2428
  %7469 = icmp ult i64 %7468, %7464
  %7470 = icmp ult i64 %7468, %7465
  %7471 = or i1 %7469, %7470
  %7472 = zext i1 %7471 to i8
  %7473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7472, i8* %7473, align 1, !tbaa !2432
  %7474 = trunc i64 %7468 to i32
  %7475 = and i32 %7474, 255
  %7476 = call i32 @llvm.ctpop.i32(i32 %7475) #16
  %7477 = trunc i32 %7476 to i8
  %7478 = and i8 %7477, 1
  %7479 = xor i8 %7478, 1
  %7480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7479, i8* %7480, align 1, !tbaa !2446
  %7481 = xor i64 %7465, %7464
  %7482 = xor i64 %7481, %7468
  %7483 = lshr i64 %7482, 4
  %7484 = trunc i64 %7483 to i8
  %7485 = and i8 %7484, 1
  %7486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7485, i8* %7486, align 1, !tbaa !2450
  %7487 = icmp eq i64 %7468, 0
  %7488 = zext i1 %7487 to i8
  %7489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7488, i8* %7489, align 1, !tbaa !2447
  %7490 = lshr i64 %7468, 63
  %7491 = trunc i64 %7490 to i8
  %7492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7491, i8* %7492, align 1, !tbaa !2448
  %7493 = lshr i64 %7464, 63
  %7494 = lshr i64 %7465, 63
  %7495 = xor i64 %7490, %7493
  %7496 = xor i64 %7490, %7494
  %7497 = add nuw nsw i64 %7495, %7496
  %7498 = icmp eq i64 %7497, 2
  %7499 = zext i1 %7498 to i8
  %7500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7499, i8* %7500, align 1, !tbaa !2449
  %7501 = load i64, i64* %RBP
  %7502 = sub i64 %7501, 192
  %7503 = load i64, i64* %PC
  %7504 = add i64 %7503, 7
  store i64 %7504, i64* %PC
  %7505 = inttoptr i64 %7502 to i32*
  %7506 = load i32, i32* %7505
  %7507 = sext i32 %7506 to i64
  store i64 %7507, i64* %RCX, align 8, !tbaa !2428
  %7508 = load i64, i64* %RCX
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 7
  store i64 %7510, i64* %PC
  %7511 = sext i64 %7508 to i128
  %7512 = and i128 %7511, -18446744073709551616
  %7513 = zext i64 %7508 to i128
  %7514 = or i128 %7512, %7513
  %7515 = mul nsw i128 520, %7514
  %7516 = trunc i128 %7515 to i64
  store i64 %7516, i64* %RCX, align 8, !tbaa !2428
  %7517 = sext i64 %7516 to i128
  %7518 = icmp ne i128 %7517, %7515
  %7519 = zext i1 %7518 to i8
  %7520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7519, i8* %7520, align 1, !tbaa !2432
  %7521 = trunc i128 %7515 to i32
  %7522 = and i32 %7521, 255
  %7523 = call i32 @llvm.ctpop.i32(i32 %7522) #16
  %7524 = trunc i32 %7523 to i8
  %7525 = and i8 %7524, 1
  %7526 = xor i8 %7525, 1
  %7527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7526, i8* %7527, align 1, !tbaa !2446
  %7528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7528, align 1, !tbaa !2450
  %7529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7529, align 1, !tbaa !2447
  %7530 = lshr i64 %7516, 63
  %7531 = trunc i64 %7530 to i8
  %7532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7531, i8* %7532, align 1, !tbaa !2448
  %7533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7519, i8* %7533, align 1, !tbaa !2449
  %7534 = load i64, i64* %RAX
  %7535 = load i64, i64* %RCX
  %7536 = load i64, i64* %PC
  %7537 = add i64 %7536, 3
  store i64 %7537, i64* %PC
  %7538 = add i64 %7535, %7534
  store i64 %7538, i64* %RAX, align 8, !tbaa !2428
  %7539 = icmp ult i64 %7538, %7534
  %7540 = icmp ult i64 %7538, %7535
  %7541 = or i1 %7539, %7540
  %7542 = zext i1 %7541 to i8
  %7543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7542, i8* %7543, align 1, !tbaa !2432
  %7544 = trunc i64 %7538 to i32
  %7545 = and i32 %7544, 255
  %7546 = call i32 @llvm.ctpop.i32(i32 %7545) #16
  %7547 = trunc i32 %7546 to i8
  %7548 = and i8 %7547, 1
  %7549 = xor i8 %7548, 1
  %7550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7549, i8* %7550, align 1, !tbaa !2446
  %7551 = xor i64 %7535, %7534
  %7552 = xor i64 %7551, %7538
  %7553 = lshr i64 %7552, 4
  %7554 = trunc i64 %7553 to i8
  %7555 = and i8 %7554, 1
  %7556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7555, i8* %7556, align 1, !tbaa !2450
  %7557 = icmp eq i64 %7538, 0
  %7558 = zext i1 %7557 to i8
  %7559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7558, i8* %7559, align 1, !tbaa !2447
  %7560 = lshr i64 %7538, 63
  %7561 = trunc i64 %7560 to i8
  %7562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7561, i8* %7562, align 1, !tbaa !2448
  %7563 = lshr i64 %7534, 63
  %7564 = lshr i64 %7535, 63
  %7565 = xor i64 %7560, %7563
  %7566 = xor i64 %7560, %7564
  %7567 = add nuw nsw i64 %7565, %7566
  %7568 = icmp eq i64 %7567, 2
  %7569 = zext i1 %7568 to i8
  %7570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7569, i8* %7570, align 1, !tbaa !2449
  %7571 = load i64, i64* %RBP
  %7572 = sub i64 %7571, 196
  %7573 = load i64, i64* %PC
  %7574 = add i64 %7573, 7
  store i64 %7574, i64* %PC
  %7575 = inttoptr i64 %7572 to i32*
  %7576 = load i32, i32* %7575
  %7577 = sext i32 %7576 to i64
  store i64 %7577, i64* %RCX, align 8, !tbaa !2428
  %7578 = load i64, i64* %RAX
  %7579 = load i64, i64* %RCX
  %7580 = mul i64 %7579, 8
  %7581 = add i64 %7580, %7578
  %7582 = bitcast %union.vec128_t* %XMM0 to i8*
  %7583 = load i64, i64* %PC
  %7584 = add i64 %7583, 5
  store i64 %7584, i64* %PC
  %7585 = bitcast i8* %7582 to double*
  %7586 = load double, double* %7585, align 1
  %7587 = inttoptr i64 %7581 to double*
  store double %7586, double* %7587
  %7588 = load i64, i64* %RBP
  %7589 = sub i64 %7588, 196
  %7590 = load i64, i64* %PC
  %7591 = add i64 %7590, 6
  store i64 %7591, i64* %PC
  %7592 = inttoptr i64 %7589 to i32*
  %7593 = load i32, i32* %7592
  %7594 = zext i32 %7593 to i64
  store i64 %7594, i64* %RAX, align 8, !tbaa !2428
  %7595 = load i64, i64* %RAX
  %7596 = load i64, i64* %PC
  %7597 = add i64 %7596, 3
  store i64 %7597, i64* %PC
  %7598 = trunc i64 %7595 to i32
  %7599 = add i32 1, %7598
  %7600 = zext i32 %7599 to i64
  store i64 %7600, i64* %RAX, align 8, !tbaa !2428
  %7601 = icmp ult i32 %7599, %7598
  %7602 = icmp ult i32 %7599, 1
  %7603 = or i1 %7601, %7602
  %7604 = zext i1 %7603 to i8
  %7605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7604, i8* %7605, align 1, !tbaa !2432
  %7606 = and i32 %7599, 255
  %7607 = call i32 @llvm.ctpop.i32(i32 %7606) #16
  %7608 = trunc i32 %7607 to i8
  %7609 = and i8 %7608, 1
  %7610 = xor i8 %7609, 1
  %7611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7610, i8* %7611, align 1, !tbaa !2446
  %7612 = xor i64 1, %7595
  %7613 = trunc i64 %7612 to i32
  %7614 = xor i32 %7613, %7599
  %7615 = lshr i32 %7614, 4
  %7616 = trunc i32 %7615 to i8
  %7617 = and i8 %7616, 1
  %7618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7617, i8* %7618, align 1, !tbaa !2450
  %7619 = icmp eq i32 %7599, 0
  %7620 = zext i1 %7619 to i8
  %7621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7620, i8* %7621, align 1, !tbaa !2447
  %7622 = lshr i32 %7599, 31
  %7623 = trunc i32 %7622 to i8
  %7624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7623, i8* %7624, align 1, !tbaa !2448
  %7625 = lshr i32 %7598, 31
  %7626 = xor i32 %7622, %7625
  %7627 = add nuw nsw i32 %7626, %7622
  %7628 = icmp eq i32 %7627, 2
  %7629 = zext i1 %7628 to i8
  %7630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7629, i8* %7630, align 1, !tbaa !2449
  %7631 = load i64, i64* %RBP
  %7632 = sub i64 %7631, 196
  %7633 = load i32, i32* %EAX
  %7634 = zext i32 %7633 to i64
  %7635 = load i64, i64* %PC
  %7636 = add i64 %7635, 6
  store i64 %7636, i64* %PC
  %7637 = inttoptr i64 %7632 to i32*
  store i32 %7633, i32* %7637
  %7638 = load i64, i64* %PC
  %7639 = sub i64 %7638, 859
  %7640 = load i64, i64* %PC
  %7641 = add i64 %7640, 5
  store i64 %7641, i64* %PC
  %7642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7639, i64* %7642, align 8, !tbaa !2428
  br label %block_402363

block_402d02:                                     ; preds = %block_4029d0
  %7643 = sub i64 %9986, 48
  %7644 = load i64, i64* %PC
  %7645 = add i64 %7644, 4
  store i64 %7645, i64* %PC
  %7646 = inttoptr i64 %7643 to i32*
  %7647 = load i32, i32* %7646
  %7648 = sext i32 %7647 to i64
  store i64 %7648, i64* %RCX, align 8, !tbaa !2428
  %7649 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7650 = load i64, i64* %RAX
  %7651 = load i64, i64* %RCX
  %7652 = mul i64 %7651, 8
  %7653 = add i64 %7652, %7650
  %7654 = load i64, i64* %PC
  %7655 = add i64 %7654, 5
  store i64 %7655, i64* %PC
  %7656 = inttoptr i64 %7653 to double*
  %7657 = load double, double* %7656
  %7658 = bitcast i8* %7649 to double*
  store double %7657, double* %7658, align 1, !tbaa !2453
  %7659 = getelementptr inbounds i8, i8* %7649, i64 8
  %7660 = bitcast i8* %7659 to double*
  store double 0.000000e+00, double* %7660, align 1, !tbaa !2453
  %7661 = load i64, i64* %RBP
  %7662 = sub i64 %7661, 80
  %7663 = load i64, i64* %PC
  %7664 = add i64 %7663, 4
  store i64 %7664, i64* %PC
  %7665 = inttoptr i64 %7662 to i64*
  %7666 = load i64, i64* %7665
  store i64 %7666, i64* %RAX, align 8, !tbaa !2428
  %7667 = load i64, i64* %RBP
  %7668 = sub i64 %7667, 188
  %7669 = load i64, i64* %PC
  %7670 = add i64 %7669, 7
  store i64 %7670, i64* %PC
  %7671 = inttoptr i64 %7668 to i32*
  %7672 = load i32, i32* %7671
  %7673 = sext i32 %7672 to i64
  store i64 %7673, i64* %RCX, align 8, !tbaa !2428
  %7674 = load i64, i64* %RCX
  %7675 = load i64, i64* %PC
  %7676 = add i64 %7675, 7
  store i64 %7676, i64* %PC
  %7677 = sext i64 %7674 to i128
  %7678 = and i128 %7677, -18446744073709551616
  %7679 = zext i64 %7674 to i128
  %7680 = or i128 %7678, %7679
  %7681 = mul nsw i128 520, %7680
  %7682 = trunc i128 %7681 to i64
  store i64 %7682, i64* %RCX, align 8, !tbaa !2428
  %7683 = sext i64 %7682 to i128
  %7684 = icmp ne i128 %7683, %7681
  %7685 = zext i1 %7684 to i8
  %7686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7685, i8* %7686, align 1, !tbaa !2432
  %7687 = trunc i128 %7681 to i32
  %7688 = and i32 %7687, 255
  %7689 = call i32 @llvm.ctpop.i32(i32 %7688) #16
  %7690 = trunc i32 %7689 to i8
  %7691 = and i8 %7690, 1
  %7692 = xor i8 %7691, 1
  %7693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7692, i8* %7693, align 1, !tbaa !2446
  %7694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7694, align 1, !tbaa !2450
  %7695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7695, align 1, !tbaa !2447
  %7696 = lshr i64 %7682, 63
  %7697 = trunc i64 %7696 to i8
  %7698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7697, i8* %7698, align 1, !tbaa !2448
  %7699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7685, i8* %7699, align 1, !tbaa !2449
  %7700 = load i64, i64* %RAX
  %7701 = load i64, i64* %RCX
  %7702 = load i64, i64* %PC
  %7703 = add i64 %7702, 3
  store i64 %7703, i64* %PC
  %7704 = add i64 %7701, %7700
  store i64 %7704, i64* %RAX, align 8, !tbaa !2428
  %7705 = icmp ult i64 %7704, %7700
  %7706 = icmp ult i64 %7704, %7701
  %7707 = or i1 %7705, %7706
  %7708 = zext i1 %7707 to i8
  %7709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7708, i8* %7709, align 1, !tbaa !2432
  %7710 = trunc i64 %7704 to i32
  %7711 = and i32 %7710, 255
  %7712 = call i32 @llvm.ctpop.i32(i32 %7711) #16
  %7713 = trunc i32 %7712 to i8
  %7714 = and i8 %7713, 1
  %7715 = xor i8 %7714, 1
  %7716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7715, i8* %7716, align 1, !tbaa !2446
  %7717 = xor i64 %7701, %7700
  %7718 = xor i64 %7717, %7704
  %7719 = lshr i64 %7718, 4
  %7720 = trunc i64 %7719 to i8
  %7721 = and i8 %7720, 1
  %7722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7721, i8* %7722, align 1, !tbaa !2450
  %7723 = icmp eq i64 %7704, 0
  %7724 = zext i1 %7723 to i8
  %7725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7724, i8* %7725, align 1, !tbaa !2447
  %7726 = lshr i64 %7704, 63
  %7727 = trunc i64 %7726 to i8
  %7728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7727, i8* %7728, align 1, !tbaa !2448
  %7729 = lshr i64 %7700, 63
  %7730 = lshr i64 %7701, 63
  %7731 = xor i64 %7726, %7729
  %7732 = xor i64 %7726, %7730
  %7733 = add nuw nsw i64 %7731, %7732
  %7734 = icmp eq i64 %7733, 2
  %7735 = zext i1 %7734 to i8
  %7736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7735, i8* %7736, align 1, !tbaa !2449
  %7737 = load i64, i64* %RBP
  %7738 = sub i64 %7737, 48
  %7739 = load i64, i64* %PC
  %7740 = add i64 %7739, 4
  store i64 %7740, i64* %PC
  %7741 = inttoptr i64 %7738 to i32*
  %7742 = load i32, i32* %7741
  %7743 = sext i32 %7742 to i64
  store i64 %7743, i64* %RCX, align 8, !tbaa !2428
  %7744 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7745 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7746 = load i64, i64* %RAX
  %7747 = load i64, i64* %RCX
  %7748 = mul i64 %7747, 8
  %7749 = add i64 %7748, %7746
  %7750 = load i64, i64* %PC
  %7751 = add i64 %7750, 5
  store i64 %7751, i64* %PC
  %7752 = bitcast i8* %7745 to double*
  %7753 = load double, double* %7752, align 1
  %7754 = getelementptr inbounds i8, i8* %7745, i64 8
  %7755 = bitcast i8* %7754 to i64*
  %7756 = load i64, i64* %7755, align 1
  %7757 = inttoptr i64 %7749 to double*
  %7758 = load double, double* %7757
  %7759 = fsub double %7753, %7758
  %7760 = bitcast i8* %7744 to double*
  store double %7759, double* %7760, align 1, !tbaa !2453
  %7761 = getelementptr inbounds i8, i8* %7744, i64 8
  %7762 = bitcast i8* %7761 to i64*
  store i64 %7756, i64* %7762, align 1, !tbaa !2453
  %7763 = load i64, i64* %RBP
  %7764 = sub i64 %7763, 88
  %7765 = load i64, i64* %PC
  %7766 = add i64 %7765, 4
  store i64 %7766, i64* %PC
  %7767 = inttoptr i64 %7764 to i64*
  %7768 = load i64, i64* %7767
  store i64 %7768, i64* %RAX, align 8, !tbaa !2428
  %7769 = load i64, i64* %RBP
  %7770 = sub i64 %7769, 188
  %7771 = load i64, i64* %PC
  %7772 = add i64 %7771, 7
  store i64 %7772, i64* %PC
  %7773 = inttoptr i64 %7770 to i32*
  %7774 = load i32, i32* %7773
  %7775 = sext i32 %7774 to i64
  store i64 %7775, i64* %RCX, align 8, !tbaa !2428
  %7776 = load i64, i64* %RCX
  %7777 = load i64, i64* %PC
  %7778 = add i64 %7777, 7
  store i64 %7778, i64* %PC
  %7779 = sext i64 %7776 to i128
  %7780 = and i128 %7779, -18446744073709551616
  %7781 = zext i64 %7776 to i128
  %7782 = or i128 %7780, %7781
  %7783 = mul nsw i128 520, %7782
  %7784 = trunc i128 %7783 to i64
  store i64 %7784, i64* %RCX, align 8, !tbaa !2428
  %7785 = sext i64 %7784 to i128
  %7786 = icmp ne i128 %7785, %7783
  %7787 = zext i1 %7786 to i8
  %7788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7787, i8* %7788, align 1, !tbaa !2432
  %7789 = trunc i128 %7783 to i32
  %7790 = and i32 %7789, 255
  %7791 = call i32 @llvm.ctpop.i32(i32 %7790) #16
  %7792 = trunc i32 %7791 to i8
  %7793 = and i8 %7792, 1
  %7794 = xor i8 %7793, 1
  %7795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7794, i8* %7795, align 1, !tbaa !2446
  %7796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7796, align 1, !tbaa !2450
  %7797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7797, align 1, !tbaa !2447
  %7798 = lshr i64 %7784, 63
  %7799 = trunc i64 %7798 to i8
  %7800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7799, i8* %7800, align 1, !tbaa !2448
  %7801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7787, i8* %7801, align 1, !tbaa !2449
  %7802 = load i64, i64* %RAX
  %7803 = load i64, i64* %RCX
  %7804 = load i64, i64* %PC
  %7805 = add i64 %7804, 3
  store i64 %7805, i64* %PC
  %7806 = add i64 %7803, %7802
  store i64 %7806, i64* %RAX, align 8, !tbaa !2428
  %7807 = icmp ult i64 %7806, %7802
  %7808 = icmp ult i64 %7806, %7803
  %7809 = or i1 %7807, %7808
  %7810 = zext i1 %7809 to i8
  %7811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7810, i8* %7811, align 1, !tbaa !2432
  %7812 = trunc i64 %7806 to i32
  %7813 = and i32 %7812, 255
  %7814 = call i32 @llvm.ctpop.i32(i32 %7813) #16
  %7815 = trunc i32 %7814 to i8
  %7816 = and i8 %7815, 1
  %7817 = xor i8 %7816, 1
  %7818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7817, i8* %7818, align 1, !tbaa !2446
  %7819 = xor i64 %7803, %7802
  %7820 = xor i64 %7819, %7806
  %7821 = lshr i64 %7820, 4
  %7822 = trunc i64 %7821 to i8
  %7823 = and i8 %7822, 1
  %7824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7823, i8* %7824, align 1, !tbaa !2450
  %7825 = icmp eq i64 %7806, 0
  %7826 = zext i1 %7825 to i8
  %7827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7826, i8* %7827, align 1, !tbaa !2447
  %7828 = lshr i64 %7806, 63
  %7829 = trunc i64 %7828 to i8
  %7830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7829, i8* %7830, align 1, !tbaa !2448
  %7831 = lshr i64 %7802, 63
  %7832 = lshr i64 %7803, 63
  %7833 = xor i64 %7828, %7831
  %7834 = xor i64 %7828, %7832
  %7835 = add nuw nsw i64 %7833, %7834
  %7836 = icmp eq i64 %7835, 2
  %7837 = zext i1 %7836 to i8
  %7838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7837, i8* %7838, align 1, !tbaa !2449
  %7839 = load i64, i64* %RBP
  %7840 = sub i64 %7839, 52
  %7841 = load i64, i64* %PC
  %7842 = add i64 %7841, 4
  store i64 %7842, i64* %PC
  %7843 = inttoptr i64 %7840 to i32*
  %7844 = load i32, i32* %7843
  %7845 = sext i32 %7844 to i64
  store i64 %7845, i64* %RCX, align 8, !tbaa !2428
  %7846 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7847 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7848 = load i64, i64* %RAX
  %7849 = load i64, i64* %RCX
  %7850 = mul i64 %7849, 8
  %7851 = add i64 %7850, %7848
  %7852 = load i64, i64* %PC
  %7853 = add i64 %7852, 5
  store i64 %7853, i64* %PC
  %7854 = bitcast i8* %7847 to double*
  %7855 = load double, double* %7854, align 1
  %7856 = getelementptr inbounds i8, i8* %7847, i64 8
  %7857 = bitcast i8* %7856 to i64*
  %7858 = load i64, i64* %7857, align 1
  %7859 = inttoptr i64 %7851 to double*
  %7860 = load double, double* %7859
  %7861 = fadd double %7855, %7860
  %7862 = bitcast i8* %7846 to double*
  store double %7861, double* %7862, align 1, !tbaa !2453
  %7863 = getelementptr inbounds i8, i8* %7846, i64 8
  %7864 = bitcast i8* %7863 to i64*
  store i64 %7858, i64* %7864, align 1, !tbaa !2453
  %7865 = load i64, i64* %RBP
  %7866 = sub i64 %7865, 128
  %7867 = load i64, i64* %PC
  %7868 = add i64 %7867, 4
  store i64 %7868, i64* %PC
  %7869 = inttoptr i64 %7866 to i64*
  %7870 = load i64, i64* %7869
  store i64 %7870, i64* %RAX, align 8, !tbaa !2428
  %7871 = load i64, i64* %RBP
  %7872 = sub i64 %7871, 188
  %7873 = load i64, i64* %PC
  %7874 = add i64 %7873, 7
  store i64 %7874, i64* %PC
  %7875 = inttoptr i64 %7872 to i32*
  %7876 = load i32, i32* %7875
  %7877 = sext i32 %7876 to i64
  store i64 %7877, i64* %RCX, align 8, !tbaa !2428
  %7878 = load i64, i64* %RCX
  %7879 = load i64, i64* %PC
  %7880 = add i64 %7879, 7
  store i64 %7880, i64* %PC
  %7881 = sext i64 %7878 to i128
  %7882 = and i128 %7881, -18446744073709551616
  %7883 = zext i64 %7878 to i128
  %7884 = or i128 %7882, %7883
  %7885 = mul nsw i128 33800, %7884
  %7886 = trunc i128 %7885 to i64
  store i64 %7886, i64* %RCX, align 8, !tbaa !2428
  %7887 = sext i64 %7886 to i128
  %7888 = icmp ne i128 %7887, %7885
  %7889 = zext i1 %7888 to i8
  %7890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7889, i8* %7890, align 1, !tbaa !2432
  %7891 = trunc i128 %7885 to i32
  %7892 = and i32 %7891, 255
  %7893 = call i32 @llvm.ctpop.i32(i32 %7892) #16
  %7894 = trunc i32 %7893 to i8
  %7895 = and i8 %7894, 1
  %7896 = xor i8 %7895, 1
  %7897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7896, i8* %7897, align 1, !tbaa !2446
  %7898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7898, align 1, !tbaa !2450
  %7899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7899, align 1, !tbaa !2447
  %7900 = lshr i64 %7886, 63
  %7901 = trunc i64 %7900 to i8
  %7902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7901, i8* %7902, align 1, !tbaa !2448
  %7903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7889, i8* %7903, align 1, !tbaa !2449
  %7904 = load i64, i64* %RAX
  %7905 = load i64, i64* %RCX
  %7906 = load i64, i64* %PC
  %7907 = add i64 %7906, 3
  store i64 %7907, i64* %PC
  %7908 = add i64 %7905, %7904
  store i64 %7908, i64* %RAX, align 8, !tbaa !2428
  %7909 = icmp ult i64 %7908, %7904
  %7910 = icmp ult i64 %7908, %7905
  %7911 = or i1 %7909, %7910
  %7912 = zext i1 %7911 to i8
  %7913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7912, i8* %7913, align 1, !tbaa !2432
  %7914 = trunc i64 %7908 to i32
  %7915 = and i32 %7914, 255
  %7916 = call i32 @llvm.ctpop.i32(i32 %7915) #16
  %7917 = trunc i32 %7916 to i8
  %7918 = and i8 %7917, 1
  %7919 = xor i8 %7918, 1
  %7920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7919, i8* %7920, align 1, !tbaa !2446
  %7921 = xor i64 %7905, %7904
  %7922 = xor i64 %7921, %7908
  %7923 = lshr i64 %7922, 4
  %7924 = trunc i64 %7923 to i8
  %7925 = and i8 %7924, 1
  %7926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7925, i8* %7926, align 1, !tbaa !2450
  %7927 = icmp eq i64 %7908, 0
  %7928 = zext i1 %7927 to i8
  %7929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7928, i8* %7929, align 1, !tbaa !2447
  %7930 = lshr i64 %7908, 63
  %7931 = trunc i64 %7930 to i8
  %7932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7931, i8* %7932, align 1, !tbaa !2448
  %7933 = lshr i64 %7904, 63
  %7934 = lshr i64 %7905, 63
  %7935 = xor i64 %7930, %7933
  %7936 = xor i64 %7930, %7934
  %7937 = add nuw nsw i64 %7935, %7936
  %7938 = icmp eq i64 %7937, 2
  %7939 = zext i1 %7938 to i8
  %7940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7939, i8* %7940, align 1, !tbaa !2449
  %7941 = load i64, i64* %RBP
  %7942 = sub i64 %7941, 52
  %7943 = load i64, i64* %PC
  %7944 = add i64 %7943, 4
  store i64 %7944, i64* %PC
  %7945 = inttoptr i64 %7942 to i32*
  %7946 = load i32, i32* %7945
  %7947 = sext i32 %7946 to i64
  store i64 %7947, i64* %RCX, align 8, !tbaa !2428
  %7948 = load i64, i64* %RCX
  %7949 = load i64, i64* %PC
  %7950 = add i64 %7949, 7
  store i64 %7950, i64* %PC
  %7951 = sext i64 %7948 to i128
  %7952 = and i128 %7951, -18446744073709551616
  %7953 = zext i64 %7948 to i128
  %7954 = or i128 %7952, %7953
  %7955 = mul nsw i128 520, %7954
  %7956 = trunc i128 %7955 to i64
  store i64 %7956, i64* %RCX, align 8, !tbaa !2428
  %7957 = sext i64 %7956 to i128
  %7958 = icmp ne i128 %7957, %7955
  %7959 = zext i1 %7958 to i8
  %7960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7959, i8* %7960, align 1, !tbaa !2432
  %7961 = trunc i128 %7955 to i32
  %7962 = and i32 %7961, 255
  %7963 = call i32 @llvm.ctpop.i32(i32 %7962) #16
  %7964 = trunc i32 %7963 to i8
  %7965 = and i8 %7964, 1
  %7966 = xor i8 %7965, 1
  %7967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7966, i8* %7967, align 1, !tbaa !2446
  %7968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7968, align 1, !tbaa !2450
  %7969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7969, align 1, !tbaa !2447
  %7970 = lshr i64 %7956, 63
  %7971 = trunc i64 %7970 to i8
  %7972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7971, i8* %7972, align 1, !tbaa !2448
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7959, i8* %7973, align 1, !tbaa !2449
  %7974 = load i64, i64* %RAX
  %7975 = load i64, i64* %RCX
  %7976 = load i64, i64* %PC
  %7977 = add i64 %7976, 3
  store i64 %7977, i64* %PC
  %7978 = add i64 %7975, %7974
  store i64 %7978, i64* %RAX, align 8, !tbaa !2428
  %7979 = icmp ult i64 %7978, %7974
  %7980 = icmp ult i64 %7978, %7975
  %7981 = or i1 %7979, %7980
  %7982 = zext i1 %7981 to i8
  %7983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7982, i8* %7983, align 1, !tbaa !2432
  %7984 = trunc i64 %7978 to i32
  %7985 = and i32 %7984, 255
  %7986 = call i32 @llvm.ctpop.i32(i32 %7985) #16
  %7987 = trunc i32 %7986 to i8
  %7988 = and i8 %7987, 1
  %7989 = xor i8 %7988, 1
  %7990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7989, i8* %7990, align 1, !tbaa !2446
  %7991 = xor i64 %7975, %7974
  %7992 = xor i64 %7991, %7978
  %7993 = lshr i64 %7992, 4
  %7994 = trunc i64 %7993 to i8
  %7995 = and i8 %7994, 1
  %7996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7995, i8* %7996, align 1, !tbaa !2450
  %7997 = icmp eq i64 %7978, 0
  %7998 = zext i1 %7997 to i8
  %7999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7998, i8* %7999, align 1, !tbaa !2447
  %8000 = lshr i64 %7978, 63
  %8001 = trunc i64 %8000 to i8
  %8002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8001, i8* %8002, align 1, !tbaa !2448
  %8003 = lshr i64 %7974, 63
  %8004 = lshr i64 %7975, 63
  %8005 = xor i64 %8000, %8003
  %8006 = xor i64 %8000, %8004
  %8007 = add nuw nsw i64 %8005, %8006
  %8008 = icmp eq i64 %8007, 2
  %8009 = zext i1 %8008 to i8
  %8010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8009, i8* %8010, align 1, !tbaa !2449
  %8011 = load i64, i64* %RBP
  %8012 = sub i64 %8011, 48
  %8013 = load i64, i64* %PC
  %8014 = add i64 %8013, 4
  store i64 %8014, i64* %PC
  %8015 = inttoptr i64 %8012 to i32*
  %8016 = load i32, i32* %8015
  %8017 = sext i32 %8016 to i64
  store i64 %8017, i64* %RCX, align 8, !tbaa !2428
  %8018 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8019 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8020 = load i64, i64* %RAX
  %8021 = load i64, i64* %RCX
  %8022 = mul i64 %8021, 8
  %8023 = add i64 %8022, %8020
  %8024 = load i64, i64* %PC
  %8025 = add i64 %8024, 5
  store i64 %8025, i64* %PC
  %8026 = bitcast i8* %8019 to double*
  %8027 = load double, double* %8026, align 1
  %8028 = getelementptr inbounds i8, i8* %8019, i64 8
  %8029 = bitcast i8* %8028 to i64*
  %8030 = load i64, i64* %8029, align 1
  %8031 = inttoptr i64 %8023 to double*
  %8032 = load double, double* %8031
  %8033 = fsub double %8027, %8032
  %8034 = bitcast i8* %8018 to double*
  store double %8033, double* %8034, align 1, !tbaa !2453
  %8035 = getelementptr inbounds i8, i8* %8018, i64 8
  %8036 = bitcast i8* %8035 to i64*
  store i64 %8030, i64* %8036, align 1, !tbaa !2453
  %8037 = load i64, i64* %RBP
  %8038 = sub i64 %8037, 96
  %8039 = load i64, i64* %PC
  %8040 = add i64 %8039, 4
  store i64 %8040, i64* %PC
  %8041 = inttoptr i64 %8038 to i64*
  %8042 = load i64, i64* %8041
  store i64 %8042, i64* %RAX, align 8, !tbaa !2428
  %8043 = load i64, i64* %RBP
  %8044 = sub i64 %8043, 188
  %8045 = load i64, i64* %PC
  %8046 = add i64 %8045, 7
  store i64 %8046, i64* %PC
  %8047 = inttoptr i64 %8044 to i32*
  %8048 = load i32, i32* %8047
  %8049 = sext i32 %8048 to i64
  store i64 %8049, i64* %RCX, align 8, !tbaa !2428
  %8050 = load i64, i64* %RCX
  %8051 = load i64, i64* %PC
  %8052 = add i64 %8051, 7
  store i64 %8052, i64* %PC
  %8053 = sext i64 %8050 to i128
  %8054 = and i128 %8053, -18446744073709551616
  %8055 = zext i64 %8050 to i128
  %8056 = or i128 %8054, %8055
  %8057 = mul nsw i128 520, %8056
  %8058 = trunc i128 %8057 to i64
  store i64 %8058, i64* %RCX, align 8, !tbaa !2428
  %8059 = sext i64 %8058 to i128
  %8060 = icmp ne i128 %8059, %8057
  %8061 = zext i1 %8060 to i8
  %8062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8061, i8* %8062, align 1, !tbaa !2432
  %8063 = trunc i128 %8057 to i32
  %8064 = and i32 %8063, 255
  %8065 = call i32 @llvm.ctpop.i32(i32 %8064) #16
  %8066 = trunc i32 %8065 to i8
  %8067 = and i8 %8066, 1
  %8068 = xor i8 %8067, 1
  %8069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8068, i8* %8069, align 1, !tbaa !2446
  %8070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8070, align 1, !tbaa !2450
  %8071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8071, align 1, !tbaa !2447
  %8072 = lshr i64 %8058, 63
  %8073 = trunc i64 %8072 to i8
  %8074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8073, i8* %8074, align 1, !tbaa !2448
  %8075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8061, i8* %8075, align 1, !tbaa !2449
  %8076 = load i64, i64* %RAX
  %8077 = load i64, i64* %RCX
  %8078 = load i64, i64* %PC
  %8079 = add i64 %8078, 3
  store i64 %8079, i64* %PC
  %8080 = add i64 %8077, %8076
  store i64 %8080, i64* %RAX, align 8, !tbaa !2428
  %8081 = icmp ult i64 %8080, %8076
  %8082 = icmp ult i64 %8080, %8077
  %8083 = or i1 %8081, %8082
  %8084 = zext i1 %8083 to i8
  %8085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8084, i8* %8085, align 1, !tbaa !2432
  %8086 = trunc i64 %8080 to i32
  %8087 = and i32 %8086, 255
  %8088 = call i32 @llvm.ctpop.i32(i32 %8087) #16
  %8089 = trunc i32 %8088 to i8
  %8090 = and i8 %8089, 1
  %8091 = xor i8 %8090, 1
  %8092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8091, i8* %8092, align 1, !tbaa !2446
  %8093 = xor i64 %8077, %8076
  %8094 = xor i64 %8093, %8080
  %8095 = lshr i64 %8094, 4
  %8096 = trunc i64 %8095 to i8
  %8097 = and i8 %8096, 1
  %8098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8097, i8* %8098, align 1, !tbaa !2450
  %8099 = icmp eq i64 %8080, 0
  %8100 = zext i1 %8099 to i8
  %8101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8100, i8* %8101, align 1, !tbaa !2447
  %8102 = lshr i64 %8080, 63
  %8103 = trunc i64 %8102 to i8
  %8104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8103, i8* %8104, align 1, !tbaa !2448
  %8105 = lshr i64 %8076, 63
  %8106 = lshr i64 %8077, 63
  %8107 = xor i64 %8102, %8105
  %8108 = xor i64 %8102, %8106
  %8109 = add nuw nsw i64 %8107, %8108
  %8110 = icmp eq i64 %8109, 2
  %8111 = zext i1 %8110 to i8
  %8112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8111, i8* %8112, align 1, !tbaa !2449
  %8113 = load i64, i64* %RBP
  %8114 = sub i64 %8113, 192
  %8115 = load i64, i64* %PC
  %8116 = add i64 %8115, 7
  store i64 %8116, i64* %PC
  %8117 = inttoptr i64 %8114 to i32*
  %8118 = load i32, i32* %8117
  %8119 = sext i32 %8118 to i64
  store i64 %8119, i64* %RCX, align 8, !tbaa !2428
  %8120 = load i64, i64* %RAX
  %8121 = load i64, i64* %RCX
  %8122 = mul i64 %8121, 8
  %8123 = add i64 %8122, %8120
  %8124 = bitcast %union.vec128_t* %XMM0 to i8*
  %8125 = load i64, i64* %PC
  %8126 = add i64 %8125, 5
  store i64 %8126, i64* %PC
  %8127 = bitcast i8* %8124 to double*
  %8128 = load double, double* %8127, align 1
  %8129 = inttoptr i64 %8123 to double*
  store double %8128, double* %8129
  %8130 = load i64, i64* %RBP
  %8131 = sub i64 %8130, 176
  %8132 = load i64, i64* %PC
  %8133 = add i64 %8132, 7
  store i64 %8133, i64* %PC
  %8134 = inttoptr i64 %8131 to i64*
  %8135 = load i64, i64* %8134
  store i64 %8135, i64* %RAX, align 8, !tbaa !2428
  %8136 = load i64, i64* %RBP
  %8137 = sub i64 %8136, 52
  %8138 = load i64, i64* %PC
  %8139 = add i64 %8138, 4
  store i64 %8139, i64* %PC
  %8140 = inttoptr i64 %8137 to i32*
  %8141 = load i32, i32* %8140
  %8142 = sext i32 %8141 to i64
  store i64 %8142, i64* %RCX, align 8, !tbaa !2428
  %8143 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8144 = load i64, i64* %RAX
  %8145 = load i64, i64* %RCX
  %8146 = mul i64 %8145, 8
  %8147 = add i64 %8146, %8144
  %8148 = load i64, i64* %PC
  %8149 = add i64 %8148, 5
  store i64 %8149, i64* %PC
  %8150 = inttoptr i64 %8147 to double*
  %8151 = load double, double* %8150
  %8152 = bitcast i8* %8143 to double*
  store double %8151, double* %8152, align 1, !tbaa !2453
  %8153 = getelementptr inbounds i8, i8* %8143, i64 8
  %8154 = bitcast i8* %8153 to double*
  store double 0.000000e+00, double* %8154, align 1, !tbaa !2453
  %8155 = load i64, i64* %RBP
  %8156 = sub i64 %8155, 184
  %8157 = load i64, i64* %PC
  %8158 = add i64 %8157, 7
  store i64 %8158, i64* %PC
  %8159 = inttoptr i64 %8156 to i64*
  %8160 = load i64, i64* %8159
  store i64 %8160, i64* %RAX, align 8, !tbaa !2428
  %8161 = load i64, i64* %RBP
  %8162 = sub i64 %8161, 52
  %8163 = load i64, i64* %PC
  %8164 = add i64 %8163, 4
  store i64 %8164, i64* %PC
  %8165 = inttoptr i64 %8162 to i32*
  %8166 = load i32, i32* %8165
  %8167 = sext i32 %8166 to i64
  store i64 %8167, i64* %RCX, align 8, !tbaa !2428
  %8168 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8169 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8170 = load i64, i64* %RAX
  %8171 = load i64, i64* %RCX
  %8172 = mul i64 %8171, 8
  %8173 = add i64 %8172, %8170
  %8174 = load i64, i64* %PC
  %8175 = add i64 %8174, 5
  store i64 %8175, i64* %PC
  %8176 = bitcast i8* %8169 to double*
  %8177 = load double, double* %8176, align 1
  %8178 = getelementptr inbounds i8, i8* %8169, i64 8
  %8179 = bitcast i8* %8178 to i64*
  %8180 = load i64, i64* %8179, align 1
  %8181 = inttoptr i64 %8173 to double*
  %8182 = load double, double* %8181
  %8183 = fdiv double %8177, %8182
  %8184 = bitcast i8* %8168 to double*
  store double %8183, double* %8184, align 1, !tbaa !2453
  %8185 = getelementptr inbounds i8, i8* %8168, i64 8
  %8186 = bitcast i8* %8185 to i64*
  store i64 %8180, i64* %8186, align 1, !tbaa !2453
  %8187 = load i64, i64* %RBP
  %8188 = sub i64 %8187, 112
  %8189 = load i64, i64* %PC
  %8190 = add i64 %8189, 4
  store i64 %8190, i64* %PC
  %8191 = inttoptr i64 %8188 to i64*
  %8192 = load i64, i64* %8191
  store i64 %8192, i64* %RAX, align 8, !tbaa !2428
  %8193 = load i64, i64* %RBP
  %8194 = sub i64 %8193, 188
  %8195 = load i64, i64* %PC
  %8196 = add i64 %8195, 7
  store i64 %8196, i64* %PC
  %8197 = inttoptr i64 %8194 to i32*
  %8198 = load i32, i32* %8197
  %8199 = sext i32 %8198 to i64
  store i64 %8199, i64* %RCX, align 8, !tbaa !2428
  %8200 = load i64, i64* %RCX
  %8201 = load i64, i64* %PC
  %8202 = add i64 %8201, 7
  store i64 %8202, i64* %PC
  %8203 = sext i64 %8200 to i128
  %8204 = and i128 %8203, -18446744073709551616
  %8205 = zext i64 %8200 to i128
  %8206 = or i128 %8204, %8205
  %8207 = mul nsw i128 33800, %8206
  %8208 = trunc i128 %8207 to i64
  store i64 %8208, i64* %RCX, align 8, !tbaa !2428
  %8209 = sext i64 %8208 to i128
  %8210 = icmp ne i128 %8209, %8207
  %8211 = zext i1 %8210 to i8
  %8212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8211, i8* %8212, align 1, !tbaa !2432
  %8213 = trunc i128 %8207 to i32
  %8214 = and i32 %8213, 255
  %8215 = call i32 @llvm.ctpop.i32(i32 %8214) #16
  %8216 = trunc i32 %8215 to i8
  %8217 = and i8 %8216, 1
  %8218 = xor i8 %8217, 1
  %8219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8218, i8* %8219, align 1, !tbaa !2446
  %8220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8220, align 1, !tbaa !2450
  %8221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8221, align 1, !tbaa !2447
  %8222 = lshr i64 %8208, 63
  %8223 = trunc i64 %8222 to i8
  %8224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8223, i8* %8224, align 1, !tbaa !2448
  %8225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8211, i8* %8225, align 1, !tbaa !2449
  %8226 = load i64, i64* %RAX
  %8227 = load i64, i64* %RCX
  %8228 = load i64, i64* %PC
  %8229 = add i64 %8228, 3
  store i64 %8229, i64* %PC
  %8230 = add i64 %8227, %8226
  store i64 %8230, i64* %RAX, align 8, !tbaa !2428
  %8231 = icmp ult i64 %8230, %8226
  %8232 = icmp ult i64 %8230, %8227
  %8233 = or i1 %8231, %8232
  %8234 = zext i1 %8233 to i8
  %8235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8234, i8* %8235, align 1, !tbaa !2432
  %8236 = trunc i64 %8230 to i32
  %8237 = and i32 %8236, 255
  %8238 = call i32 @llvm.ctpop.i32(i32 %8237) #16
  %8239 = trunc i32 %8238 to i8
  %8240 = and i8 %8239, 1
  %8241 = xor i8 %8240, 1
  %8242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8241, i8* %8242, align 1, !tbaa !2446
  %8243 = xor i64 %8227, %8226
  %8244 = xor i64 %8243, %8230
  %8245 = lshr i64 %8244, 4
  %8246 = trunc i64 %8245 to i8
  %8247 = and i8 %8246, 1
  %8248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8247, i8* %8248, align 1, !tbaa !2450
  %8249 = icmp eq i64 %8230, 0
  %8250 = zext i1 %8249 to i8
  %8251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8250, i8* %8251, align 1, !tbaa !2447
  %8252 = lshr i64 %8230, 63
  %8253 = trunc i64 %8252 to i8
  %8254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8253, i8* %8254, align 1, !tbaa !2448
  %8255 = lshr i64 %8226, 63
  %8256 = lshr i64 %8227, 63
  %8257 = xor i64 %8252, %8255
  %8258 = xor i64 %8252, %8256
  %8259 = add nuw nsw i64 %8257, %8258
  %8260 = icmp eq i64 %8259, 2
  %8261 = zext i1 %8260 to i8
  %8262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8261, i8* %8262, align 1, !tbaa !2449
  %8263 = load i64, i64* %RBP
  %8264 = sub i64 %8263, 52
  %8265 = load i64, i64* %PC
  %8266 = add i64 %8265, 4
  store i64 %8266, i64* %PC
  %8267 = inttoptr i64 %8264 to i32*
  %8268 = load i32, i32* %8267
  %8269 = sext i32 %8268 to i64
  store i64 %8269, i64* %RCX, align 8, !tbaa !2428
  %8270 = load i64, i64* %RCX
  %8271 = load i64, i64* %PC
  %8272 = add i64 %8271, 7
  store i64 %8272, i64* %PC
  %8273 = sext i64 %8270 to i128
  %8274 = and i128 %8273, -18446744073709551616
  %8275 = zext i64 %8270 to i128
  %8276 = or i128 %8274, %8275
  %8277 = mul nsw i128 520, %8276
  %8278 = trunc i128 %8277 to i64
  store i64 %8278, i64* %RCX, align 8, !tbaa !2428
  %8279 = sext i64 %8278 to i128
  %8280 = icmp ne i128 %8279, %8277
  %8281 = zext i1 %8280 to i8
  %8282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8281, i8* %8282, align 1, !tbaa !2432
  %8283 = trunc i128 %8277 to i32
  %8284 = and i32 %8283, 255
  %8285 = call i32 @llvm.ctpop.i32(i32 %8284) #16
  %8286 = trunc i32 %8285 to i8
  %8287 = and i8 %8286, 1
  %8288 = xor i8 %8287, 1
  %8289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8288, i8* %8289, align 1, !tbaa !2446
  %8290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8290, align 1, !tbaa !2450
  %8291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8291, align 1, !tbaa !2447
  %8292 = lshr i64 %8278, 63
  %8293 = trunc i64 %8292 to i8
  %8294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8293, i8* %8294, align 1, !tbaa !2448
  %8295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8281, i8* %8295, align 1, !tbaa !2449
  %8296 = load i64, i64* %RAX
  %8297 = load i64, i64* %RCX
  %8298 = load i64, i64* %PC
  %8299 = add i64 %8298, 3
  store i64 %8299, i64* %PC
  %8300 = add i64 %8297, %8296
  store i64 %8300, i64* %RAX, align 8, !tbaa !2428
  %8301 = icmp ult i64 %8300, %8296
  %8302 = icmp ult i64 %8300, %8297
  %8303 = or i1 %8301, %8302
  %8304 = zext i1 %8303 to i8
  %8305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8304, i8* %8305, align 1, !tbaa !2432
  %8306 = trunc i64 %8300 to i32
  %8307 = and i32 %8306, 255
  %8308 = call i32 @llvm.ctpop.i32(i32 %8307) #16
  %8309 = trunc i32 %8308 to i8
  %8310 = and i8 %8309, 1
  %8311 = xor i8 %8310, 1
  %8312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8311, i8* %8312, align 1, !tbaa !2446
  %8313 = xor i64 %8297, %8296
  %8314 = xor i64 %8313, %8300
  %8315 = lshr i64 %8314, 4
  %8316 = trunc i64 %8315 to i8
  %8317 = and i8 %8316, 1
  %8318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8317, i8* %8318, align 1, !tbaa !2450
  %8319 = icmp eq i64 %8300, 0
  %8320 = zext i1 %8319 to i8
  %8321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8320, i8* %8321, align 1, !tbaa !2447
  %8322 = lshr i64 %8300, 63
  %8323 = trunc i64 %8322 to i8
  %8324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8323, i8* %8324, align 1, !tbaa !2448
  %8325 = lshr i64 %8296, 63
  %8326 = lshr i64 %8297, 63
  %8327 = xor i64 %8322, %8325
  %8328 = xor i64 %8322, %8326
  %8329 = add nuw nsw i64 %8327, %8328
  %8330 = icmp eq i64 %8329, 2
  %8331 = zext i1 %8330 to i8
  %8332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8331, i8* %8332, align 1, !tbaa !2449
  %8333 = load i64, i64* %RBP
  %8334 = sub i64 %8333, 48
  %8335 = load i64, i64* %PC
  %8336 = add i64 %8335, 4
  store i64 %8336, i64* %PC
  %8337 = inttoptr i64 %8334 to i32*
  %8338 = load i32, i32* %8337
  %8339 = sext i32 %8338 to i64
  store i64 %8339, i64* %RCX, align 8, !tbaa !2428
  %8340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8341 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8342 = load i64, i64* %RAX
  %8343 = load i64, i64* %RCX
  %8344 = mul i64 %8343, 8
  %8345 = add i64 %8344, %8342
  %8346 = load i64, i64* %PC
  %8347 = add i64 %8346, 5
  store i64 %8347, i64* %PC
  %8348 = bitcast i8* %8341 to double*
  %8349 = load double, double* %8348, align 1
  %8350 = getelementptr inbounds i8, i8* %8341, i64 8
  %8351 = bitcast i8* %8350 to i64*
  %8352 = load i64, i64* %8351, align 1
  %8353 = inttoptr i64 %8345 to double*
  %8354 = load double, double* %8353
  %8355 = fmul double %8349, %8354
  %8356 = bitcast i8* %8340 to double*
  store double %8355, double* %8356, align 1, !tbaa !2453
  %8357 = getelementptr inbounds i8, i8* %8340, i64 8
  %8358 = bitcast i8* %8357 to i64*
  store i64 %8352, i64* %8358, align 1, !tbaa !2453
  %8359 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8360 = load i64, i64* %RBP
  %8361 = sub i64 %8360, 72
  %8362 = load i64, i64* %PC
  %8363 = add i64 %8362, 5
  store i64 %8363, i64* %PC
  %8364 = inttoptr i64 %8361 to double*
  %8365 = load double, double* %8364
  %8366 = bitcast i8* %8359 to double*
  store double %8365, double* %8366, align 1, !tbaa !2453
  %8367 = getelementptr inbounds i8, i8* %8359, i64 8
  %8368 = bitcast i8* %8367 to double*
  store double 0.000000e+00, double* %8368, align 1, !tbaa !2453
  %8369 = load i64, i64* %RBP
  %8370 = sub i64 %8369, 184
  %8371 = load i64, i64* %PC
  %8372 = add i64 %8371, 7
  store i64 %8372, i64* %PC
  %8373 = inttoptr i64 %8370 to i64*
  %8374 = load i64, i64* %8373
  store i64 %8374, i64* %RAX, align 8, !tbaa !2428
  %8375 = load i64, i64* %RBP
  %8376 = sub i64 %8375, 52
  %8377 = load i64, i64* %PC
  %8378 = add i64 %8377, 4
  store i64 %8378, i64* %PC
  %8379 = inttoptr i64 %8376 to i32*
  %8380 = load i32, i32* %8379
  %8381 = sext i32 %8380 to i64
  store i64 %8381, i64* %RCX, align 8, !tbaa !2428
  %8382 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8383 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8384 = load i64, i64* %RAX
  %8385 = load i64, i64* %RCX
  %8386 = mul i64 %8385, 8
  %8387 = add i64 %8386, %8384
  %8388 = load i64, i64* %PC
  %8389 = add i64 %8388, 5
  store i64 %8389, i64* %PC
  %8390 = bitcast i8* %8383 to double*
  %8391 = load double, double* %8390, align 1
  %8392 = getelementptr inbounds i8, i8* %8383, i64 8
  %8393 = bitcast i8* %8392 to i64*
  %8394 = load i64, i64* %8393, align 1
  %8395 = inttoptr i64 %8387 to double*
  %8396 = load double, double* %8395
  %8397 = fdiv double %8391, %8396
  %8398 = bitcast i8* %8382 to double*
  store double %8397, double* %8398, align 1, !tbaa !2453
  %8399 = getelementptr inbounds i8, i8* %8382, i64 8
  %8400 = bitcast i8* %8399 to i64*
  store i64 %8394, i64* %8400, align 1, !tbaa !2453
  %8401 = load i64, i64* %RBP
  %8402 = sub i64 %8401, 96
  %8403 = load i64, i64* %PC
  %8404 = add i64 %8403, 4
  store i64 %8404, i64* %PC
  %8405 = inttoptr i64 %8402 to i64*
  %8406 = load i64, i64* %8405
  store i64 %8406, i64* %RAX, align 8, !tbaa !2428
  %8407 = load i64, i64* %RBP
  %8408 = sub i64 %8407, 188
  %8409 = load i64, i64* %PC
  %8410 = add i64 %8409, 7
  store i64 %8410, i64* %PC
  %8411 = inttoptr i64 %8408 to i32*
  %8412 = load i32, i32* %8411
  %8413 = sext i32 %8412 to i64
  store i64 %8413, i64* %RCX, align 8, !tbaa !2428
  %8414 = load i64, i64* %RCX
  %8415 = load i64, i64* %PC
  %8416 = add i64 %8415, 7
  store i64 %8416, i64* %PC
  %8417 = sext i64 %8414 to i128
  %8418 = and i128 %8417, -18446744073709551616
  %8419 = zext i64 %8414 to i128
  %8420 = or i128 %8418, %8419
  %8421 = mul nsw i128 520, %8420
  %8422 = trunc i128 %8421 to i64
  store i64 %8422, i64* %RCX, align 8, !tbaa !2428
  %8423 = sext i64 %8422 to i128
  %8424 = icmp ne i128 %8423, %8421
  %8425 = zext i1 %8424 to i8
  %8426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8425, i8* %8426, align 1, !tbaa !2432
  %8427 = trunc i128 %8421 to i32
  %8428 = and i32 %8427, 255
  %8429 = call i32 @llvm.ctpop.i32(i32 %8428) #16
  %8430 = trunc i32 %8429 to i8
  %8431 = and i8 %8430, 1
  %8432 = xor i8 %8431, 1
  %8433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8432, i8* %8433, align 1, !tbaa !2446
  %8434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8434, align 1, !tbaa !2450
  %8435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8435, align 1, !tbaa !2447
  %8436 = lshr i64 %8422, 63
  %8437 = trunc i64 %8436 to i8
  %8438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8437, i8* %8438, align 1, !tbaa !2448
  %8439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8425, i8* %8439, align 1, !tbaa !2449
  %8440 = load i64, i64* %RAX
  %8441 = load i64, i64* %RCX
  %8442 = load i64, i64* %PC
  %8443 = add i64 %8442, 3
  store i64 %8443, i64* %PC
  %8444 = add i64 %8441, %8440
  store i64 %8444, i64* %RAX, align 8, !tbaa !2428
  %8445 = icmp ult i64 %8444, %8440
  %8446 = icmp ult i64 %8444, %8441
  %8447 = or i1 %8445, %8446
  %8448 = zext i1 %8447 to i8
  %8449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8448, i8* %8449, align 1, !tbaa !2432
  %8450 = trunc i64 %8444 to i32
  %8451 = and i32 %8450, 255
  %8452 = call i32 @llvm.ctpop.i32(i32 %8451) #16
  %8453 = trunc i32 %8452 to i8
  %8454 = and i8 %8453, 1
  %8455 = xor i8 %8454, 1
  %8456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8455, i8* %8456, align 1, !tbaa !2446
  %8457 = xor i64 %8441, %8440
  %8458 = xor i64 %8457, %8444
  %8459 = lshr i64 %8458, 4
  %8460 = trunc i64 %8459 to i8
  %8461 = and i8 %8460, 1
  %8462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8461, i8* %8462, align 1, !tbaa !2450
  %8463 = icmp eq i64 %8444, 0
  %8464 = zext i1 %8463 to i8
  %8465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8464, i8* %8465, align 1, !tbaa !2447
  %8466 = lshr i64 %8444, 63
  %8467 = trunc i64 %8466 to i8
  %8468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8467, i8* %8468, align 1, !tbaa !2448
  %8469 = lshr i64 %8440, 63
  %8470 = lshr i64 %8441, 63
  %8471 = xor i64 %8466, %8469
  %8472 = xor i64 %8466, %8470
  %8473 = add nuw nsw i64 %8471, %8472
  %8474 = icmp eq i64 %8473, 2
  %8475 = zext i1 %8474 to i8
  %8476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8475, i8* %8476, align 1, !tbaa !2449
  %8477 = load i64, i64* %RBP
  %8478 = sub i64 %8477, 192
  %8479 = load i64, i64* %PC
  %8480 = add i64 %8479, 7
  store i64 %8480, i64* %PC
  %8481 = inttoptr i64 %8478 to i32*
  %8482 = load i32, i32* %8481
  %8483 = sext i32 %8482 to i64
  store i64 %8483, i64* %RCX, align 8, !tbaa !2428
  %8484 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8485 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8486 = load i64, i64* %RAX
  %8487 = load i64, i64* %RCX
  %8488 = mul i64 %8487, 8
  %8489 = add i64 %8488, %8486
  %8490 = load i64, i64* %PC
  %8491 = add i64 %8490, 5
  store i64 %8491, i64* %PC
  %8492 = bitcast i8* %8485 to double*
  %8493 = load double, double* %8492, align 1
  %8494 = getelementptr inbounds i8, i8* %8485, i64 8
  %8495 = bitcast i8* %8494 to i64*
  %8496 = load i64, i64* %8495, align 1
  %8497 = inttoptr i64 %8489 to double*
  %8498 = load double, double* %8497
  %8499 = fmul double %8493, %8498
  %8500 = bitcast i8* %8484 to double*
  store double %8499, double* %8500, align 1, !tbaa !2453
  %8501 = getelementptr inbounds i8, i8* %8484, i64 8
  %8502 = bitcast i8* %8501 to i64*
  store i64 %8496, i64* %8502, align 1, !tbaa !2453
  %8503 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8504 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8505 = bitcast %union.vec128_t* %XMM1 to i8*
  %8506 = load i64, i64* %PC
  %8507 = add i64 %8506, 4
  store i64 %8507, i64* %PC
  %8508 = bitcast i8* %8504 to double*
  %8509 = load double, double* %8508, align 1
  %8510 = getelementptr inbounds i8, i8* %8504, i64 8
  %8511 = bitcast i8* %8510 to i64*
  %8512 = load i64, i64* %8511, align 1
  %8513 = bitcast i8* %8505 to double*
  %8514 = load double, double* %8513, align 1
  %8515 = fsub double %8509, %8514
  %8516 = bitcast i8* %8503 to double*
  store double %8515, double* %8516, align 1, !tbaa !2453
  %8517 = getelementptr inbounds i8, i8* %8503, i64 8
  %8518 = bitcast i8* %8517 to i64*
  store i64 %8512, i64* %8518, align 1, !tbaa !2453
  %8519 = load i64, i64* %RBP
  %8520 = sub i64 %8519, 104
  %8521 = load i64, i64* %PC
  %8522 = add i64 %8521, 4
  store i64 %8522, i64* %PC
  %8523 = inttoptr i64 %8520 to i64*
  %8524 = load i64, i64* %8523
  store i64 %8524, i64* %RAX, align 8, !tbaa !2428
  %8525 = load i64, i64* %RBP
  %8526 = sub i64 %8525, 188
  %8527 = load i64, i64* %PC
  %8528 = add i64 %8527, 7
  store i64 %8528, i64* %PC
  %8529 = inttoptr i64 %8526 to i32*
  %8530 = load i32, i32* %8529
  %8531 = sext i32 %8530 to i64
  store i64 %8531, i64* %RCX, align 8, !tbaa !2428
  %8532 = load i64, i64* %RCX
  %8533 = load i64, i64* %PC
  %8534 = add i64 %8533, 7
  store i64 %8534, i64* %PC
  %8535 = sext i64 %8532 to i128
  %8536 = and i128 %8535, -18446744073709551616
  %8537 = zext i64 %8532 to i128
  %8538 = or i128 %8536, %8537
  %8539 = mul nsw i128 520, %8538
  %8540 = trunc i128 %8539 to i64
  store i64 %8540, i64* %RCX, align 8, !tbaa !2428
  %8541 = sext i64 %8540 to i128
  %8542 = icmp ne i128 %8541, %8539
  %8543 = zext i1 %8542 to i8
  %8544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8543, i8* %8544, align 1, !tbaa !2432
  %8545 = trunc i128 %8539 to i32
  %8546 = and i32 %8545, 255
  %8547 = call i32 @llvm.ctpop.i32(i32 %8546) #16
  %8548 = trunc i32 %8547 to i8
  %8549 = and i8 %8548, 1
  %8550 = xor i8 %8549, 1
  %8551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8550, i8* %8551, align 1, !tbaa !2446
  %8552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8552, align 1, !tbaa !2450
  %8553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8553, align 1, !tbaa !2447
  %8554 = lshr i64 %8540, 63
  %8555 = trunc i64 %8554 to i8
  %8556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8555, i8* %8556, align 1, !tbaa !2448
  %8557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8543, i8* %8557, align 1, !tbaa !2449
  %8558 = load i64, i64* %RAX
  %8559 = load i64, i64* %RCX
  %8560 = load i64, i64* %PC
  %8561 = add i64 %8560, 3
  store i64 %8561, i64* %PC
  %8562 = add i64 %8559, %8558
  store i64 %8562, i64* %RAX, align 8, !tbaa !2428
  %8563 = icmp ult i64 %8562, %8558
  %8564 = icmp ult i64 %8562, %8559
  %8565 = or i1 %8563, %8564
  %8566 = zext i1 %8565 to i8
  %8567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8566, i8* %8567, align 1, !tbaa !2432
  %8568 = trunc i64 %8562 to i32
  %8569 = and i32 %8568, 255
  %8570 = call i32 @llvm.ctpop.i32(i32 %8569) #16
  %8571 = trunc i32 %8570 to i8
  %8572 = and i8 %8571, 1
  %8573 = xor i8 %8572, 1
  %8574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8573, i8* %8574, align 1, !tbaa !2446
  %8575 = xor i64 %8559, %8558
  %8576 = xor i64 %8575, %8562
  %8577 = lshr i64 %8576, 4
  %8578 = trunc i64 %8577 to i8
  %8579 = and i8 %8578, 1
  %8580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8579, i8* %8580, align 1, !tbaa !2450
  %8581 = icmp eq i64 %8562, 0
  %8582 = zext i1 %8581 to i8
  %8583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8582, i8* %8583, align 1, !tbaa !2447
  %8584 = lshr i64 %8562, 63
  %8585 = trunc i64 %8584 to i8
  %8586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8585, i8* %8586, align 1, !tbaa !2448
  %8587 = lshr i64 %8558, 63
  %8588 = lshr i64 %8559, 63
  %8589 = xor i64 %8584, %8587
  %8590 = xor i64 %8584, %8588
  %8591 = add nuw nsw i64 %8589, %8590
  %8592 = icmp eq i64 %8591, 2
  %8593 = zext i1 %8592 to i8
  %8594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8593, i8* %8594, align 1, !tbaa !2449
  %8595 = load i64, i64* %RBP
  %8596 = sub i64 %8595, 192
  %8597 = load i64, i64* %PC
  %8598 = add i64 %8597, 7
  store i64 %8598, i64* %PC
  %8599 = inttoptr i64 %8596 to i32*
  %8600 = load i32, i32* %8599
  %8601 = sext i32 %8600 to i64
  store i64 %8601, i64* %RCX, align 8, !tbaa !2428
  %8602 = load i64, i64* %RAX
  %8603 = load i64, i64* %RCX
  %8604 = mul i64 %8603, 8
  %8605 = add i64 %8604, %8602
  %8606 = bitcast %union.vec128_t* %XMM0 to i8*
  %8607 = load i64, i64* %PC
  %8608 = add i64 %8607, 5
  store i64 %8608, i64* %PC
  %8609 = bitcast i8* %8606 to double*
  %8610 = load double, double* %8609, align 1
  %8611 = inttoptr i64 %8605 to double*
  store double %8610, double* %8611
  %8612 = load i64, i64* %RBP
  %8613 = sub i64 %8612, 160
  %8614 = load i64, i64* %PC
  %8615 = add i64 %8614, 7
  store i64 %8615, i64* %PC
  %8616 = inttoptr i64 %8613 to i64*
  %8617 = load i64, i64* %8616
  store i64 %8617, i64* %RAX, align 8, !tbaa !2428
  %8618 = load i64, i64* %RBP
  %8619 = sub i64 %8618, 48
  %8620 = load i64, i64* %PC
  %8621 = add i64 %8620, 4
  store i64 %8621, i64* %PC
  %8622 = inttoptr i64 %8619 to i32*
  %8623 = load i32, i32* %8622
  %8624 = sext i32 %8623 to i64
  store i64 %8624, i64* %RCX, align 8, !tbaa !2428
  %8625 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8626 = load i64, i64* %RAX
  %8627 = load i64, i64* %RCX
  %8628 = mul i64 %8627, 8
  %8629 = add i64 %8628, %8626
  %8630 = load i64, i64* %PC
  %8631 = add i64 %8630, 5
  store i64 %8631, i64* %PC
  %8632 = inttoptr i64 %8629 to double*
  %8633 = load double, double* %8632
  %8634 = bitcast i8* %8625 to double*
  store double %8633, double* %8634, align 1, !tbaa !2453
  %8635 = getelementptr inbounds i8, i8* %8625, i64 8
  %8636 = bitcast i8* %8635 to double*
  store double 0.000000e+00, double* %8636, align 1, !tbaa !2453
  %8637 = load i64, i64* %RBP
  %8638 = sub i64 %8637, 168
  %8639 = load i64, i64* %PC
  %8640 = add i64 %8639, 7
  store i64 %8640, i64* %PC
  %8641 = inttoptr i64 %8638 to i64*
  %8642 = load i64, i64* %8641
  store i64 %8642, i64* %RAX, align 8, !tbaa !2428
  %8643 = load i64, i64* %RBP
  %8644 = sub i64 %8643, 48
  %8645 = load i64, i64* %PC
  %8646 = add i64 %8645, 4
  store i64 %8646, i64* %PC
  %8647 = inttoptr i64 %8644 to i32*
  %8648 = load i32, i32* %8647
  %8649 = sext i32 %8648 to i64
  store i64 %8649, i64* %RCX, align 8, !tbaa !2428
  %8650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8651 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8652 = load i64, i64* %RAX
  %8653 = load i64, i64* %RCX
  %8654 = mul i64 %8653, 8
  %8655 = add i64 %8654, %8652
  %8656 = load i64, i64* %PC
  %8657 = add i64 %8656, 5
  store i64 %8657, i64* %PC
  %8658 = bitcast i8* %8651 to double*
  %8659 = load double, double* %8658, align 1
  %8660 = getelementptr inbounds i8, i8* %8651, i64 8
  %8661 = bitcast i8* %8660 to i64*
  %8662 = load i64, i64* %8661, align 1
  %8663 = inttoptr i64 %8655 to double*
  %8664 = load double, double* %8663
  %8665 = fdiv double %8659, %8664
  %8666 = bitcast i8* %8650 to double*
  store double %8665, double* %8666, align 1, !tbaa !2453
  %8667 = getelementptr inbounds i8, i8* %8650, i64 8
  %8668 = bitcast i8* %8667 to i64*
  store i64 %8662, i64* %8668, align 1, !tbaa !2453
  %8669 = load i64, i64* %RBP
  %8670 = sub i64 %8669, 136
  %8671 = load i64, i64* %PC
  %8672 = add i64 %8671, 7
  store i64 %8672, i64* %PC
  %8673 = inttoptr i64 %8670 to i64*
  %8674 = load i64, i64* %8673
  store i64 %8674, i64* %RAX, align 8, !tbaa !2428
  %8675 = load i64, i64* %RBP
  %8676 = sub i64 %8675, 188
  %8677 = load i64, i64* %PC
  %8678 = add i64 %8677, 7
  store i64 %8678, i64* %PC
  %8679 = inttoptr i64 %8676 to i32*
  %8680 = load i32, i32* %8679
  %8681 = sext i32 %8680 to i64
  store i64 %8681, i64* %RCX, align 8, !tbaa !2428
  %8682 = load i64, i64* %RCX
  %8683 = load i64, i64* %PC
  %8684 = add i64 %8683, 7
  store i64 %8684, i64* %PC
  %8685 = sext i64 %8682 to i128
  %8686 = and i128 %8685, -18446744073709551616
  %8687 = zext i64 %8682 to i128
  %8688 = or i128 %8686, %8687
  %8689 = mul nsw i128 33800, %8688
  %8690 = trunc i128 %8689 to i64
  store i64 %8690, i64* %RCX, align 8, !tbaa !2428
  %8691 = sext i64 %8690 to i128
  %8692 = icmp ne i128 %8691, %8689
  %8693 = zext i1 %8692 to i8
  %8694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8693, i8* %8694, align 1, !tbaa !2432
  %8695 = trunc i128 %8689 to i32
  %8696 = and i32 %8695, 255
  %8697 = call i32 @llvm.ctpop.i32(i32 %8696) #16
  %8698 = trunc i32 %8697 to i8
  %8699 = and i8 %8698, 1
  %8700 = xor i8 %8699, 1
  %8701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8700, i8* %8701, align 1, !tbaa !2446
  %8702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8702, align 1, !tbaa !2450
  %8703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8703, align 1, !tbaa !2447
  %8704 = lshr i64 %8690, 63
  %8705 = trunc i64 %8704 to i8
  %8706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8705, i8* %8706, align 1, !tbaa !2448
  %8707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8693, i8* %8707, align 1, !tbaa !2449
  %8708 = load i64, i64* %RAX
  %8709 = load i64, i64* %RCX
  %8710 = load i64, i64* %PC
  %8711 = add i64 %8710, 3
  store i64 %8711, i64* %PC
  %8712 = add i64 %8709, %8708
  store i64 %8712, i64* %RAX, align 8, !tbaa !2428
  %8713 = icmp ult i64 %8712, %8708
  %8714 = icmp ult i64 %8712, %8709
  %8715 = or i1 %8713, %8714
  %8716 = zext i1 %8715 to i8
  %8717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8716, i8* %8717, align 1, !tbaa !2432
  %8718 = trunc i64 %8712 to i32
  %8719 = and i32 %8718, 255
  %8720 = call i32 @llvm.ctpop.i32(i32 %8719) #16
  %8721 = trunc i32 %8720 to i8
  %8722 = and i8 %8721, 1
  %8723 = xor i8 %8722, 1
  %8724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8723, i8* %8724, align 1, !tbaa !2446
  %8725 = xor i64 %8709, %8708
  %8726 = xor i64 %8725, %8712
  %8727 = lshr i64 %8726, 4
  %8728 = trunc i64 %8727 to i8
  %8729 = and i8 %8728, 1
  %8730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8729, i8* %8730, align 1, !tbaa !2450
  %8731 = icmp eq i64 %8712, 0
  %8732 = zext i1 %8731 to i8
  %8733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8732, i8* %8733, align 1, !tbaa !2447
  %8734 = lshr i64 %8712, 63
  %8735 = trunc i64 %8734 to i8
  %8736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8735, i8* %8736, align 1, !tbaa !2448
  %8737 = lshr i64 %8708, 63
  %8738 = lshr i64 %8709, 63
  %8739 = xor i64 %8734, %8737
  %8740 = xor i64 %8734, %8738
  %8741 = add nuw nsw i64 %8739, %8740
  %8742 = icmp eq i64 %8741, 2
  %8743 = zext i1 %8742 to i8
  %8744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8743, i8* %8744, align 1, !tbaa !2449
  %8745 = load i64, i64* %RBP
  %8746 = sub i64 %8745, 52
  %8747 = load i64, i64* %PC
  %8748 = add i64 %8747, 4
  store i64 %8748, i64* %PC
  %8749 = inttoptr i64 %8746 to i32*
  %8750 = load i32, i32* %8749
  %8751 = sext i32 %8750 to i64
  store i64 %8751, i64* %RCX, align 8, !tbaa !2428
  %8752 = load i64, i64* %RCX
  %8753 = load i64, i64* %PC
  %8754 = add i64 %8753, 7
  store i64 %8754, i64* %PC
  %8755 = sext i64 %8752 to i128
  %8756 = and i128 %8755, -18446744073709551616
  %8757 = zext i64 %8752 to i128
  %8758 = or i128 %8756, %8757
  %8759 = mul nsw i128 520, %8758
  %8760 = trunc i128 %8759 to i64
  store i64 %8760, i64* %RCX, align 8, !tbaa !2428
  %8761 = sext i64 %8760 to i128
  %8762 = icmp ne i128 %8761, %8759
  %8763 = zext i1 %8762 to i8
  %8764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8763, i8* %8764, align 1, !tbaa !2432
  %8765 = trunc i128 %8759 to i32
  %8766 = and i32 %8765, 255
  %8767 = call i32 @llvm.ctpop.i32(i32 %8766) #16
  %8768 = trunc i32 %8767 to i8
  %8769 = and i8 %8768, 1
  %8770 = xor i8 %8769, 1
  %8771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8770, i8* %8771, align 1, !tbaa !2446
  %8772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8772, align 1, !tbaa !2450
  %8773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8773, align 1, !tbaa !2447
  %8774 = lshr i64 %8760, 63
  %8775 = trunc i64 %8774 to i8
  %8776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8775, i8* %8776, align 1, !tbaa !2448
  %8777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8763, i8* %8777, align 1, !tbaa !2449
  %8778 = load i64, i64* %RAX
  %8779 = load i64, i64* %RCX
  %8780 = load i64, i64* %PC
  %8781 = add i64 %8780, 3
  store i64 %8781, i64* %PC
  %8782 = add i64 %8779, %8778
  store i64 %8782, i64* %RAX, align 8, !tbaa !2428
  %8783 = icmp ult i64 %8782, %8778
  %8784 = icmp ult i64 %8782, %8779
  %8785 = or i1 %8783, %8784
  %8786 = zext i1 %8785 to i8
  %8787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8786, i8* %8787, align 1, !tbaa !2432
  %8788 = trunc i64 %8782 to i32
  %8789 = and i32 %8788, 255
  %8790 = call i32 @llvm.ctpop.i32(i32 %8789) #16
  %8791 = trunc i32 %8790 to i8
  %8792 = and i8 %8791, 1
  %8793 = xor i8 %8792, 1
  %8794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8793, i8* %8794, align 1, !tbaa !2446
  %8795 = xor i64 %8779, %8778
  %8796 = xor i64 %8795, %8782
  %8797 = lshr i64 %8796, 4
  %8798 = trunc i64 %8797 to i8
  %8799 = and i8 %8798, 1
  %8800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8799, i8* %8800, align 1, !tbaa !2450
  %8801 = icmp eq i64 %8782, 0
  %8802 = zext i1 %8801 to i8
  %8803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8802, i8* %8803, align 1, !tbaa !2447
  %8804 = lshr i64 %8782, 63
  %8805 = trunc i64 %8804 to i8
  %8806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8805, i8* %8806, align 1, !tbaa !2448
  %8807 = lshr i64 %8778, 63
  %8808 = lshr i64 %8779, 63
  %8809 = xor i64 %8804, %8807
  %8810 = xor i64 %8804, %8808
  %8811 = add nuw nsw i64 %8809, %8810
  %8812 = icmp eq i64 %8811, 2
  %8813 = zext i1 %8812 to i8
  %8814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8813, i8* %8814, align 1, !tbaa !2449
  %8815 = load i64, i64* %RBP
  %8816 = sub i64 %8815, 48
  %8817 = load i64, i64* %PC
  %8818 = add i64 %8817, 4
  store i64 %8818, i64* %PC
  %8819 = inttoptr i64 %8816 to i32*
  %8820 = load i32, i32* %8819
  %8821 = sext i32 %8820 to i64
  store i64 %8821, i64* %RCX, align 8, !tbaa !2428
  %8822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8823 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8824 = load i64, i64* %RAX
  %8825 = load i64, i64* %RCX
  %8826 = mul i64 %8825, 8
  %8827 = add i64 %8826, %8824
  %8828 = load i64, i64* %PC
  %8829 = add i64 %8828, 5
  store i64 %8829, i64* %PC
  %8830 = bitcast i8* %8823 to double*
  %8831 = load double, double* %8830, align 1
  %8832 = getelementptr inbounds i8, i8* %8823, i64 8
  %8833 = bitcast i8* %8832 to i64*
  %8834 = load i64, i64* %8833, align 1
  %8835 = inttoptr i64 %8827 to double*
  %8836 = load double, double* %8835
  %8837 = fmul double %8831, %8836
  %8838 = bitcast i8* %8822 to double*
  store double %8837, double* %8838, align 1, !tbaa !2453
  %8839 = getelementptr inbounds i8, i8* %8822, i64 8
  %8840 = bitcast i8* %8839 to i64*
  store i64 %8834, i64* %8840, align 1, !tbaa !2453
  %8841 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8842 = load i64, i64* %RBP
  %8843 = sub i64 %8842, 64
  %8844 = load i64, i64* %PC
  %8845 = add i64 %8844, 5
  store i64 %8845, i64* %PC
  %8846 = inttoptr i64 %8843 to double*
  %8847 = load double, double* %8846
  %8848 = bitcast i8* %8841 to double*
  store double %8847, double* %8848, align 1, !tbaa !2453
  %8849 = getelementptr inbounds i8, i8* %8841, i64 8
  %8850 = bitcast i8* %8849 to double*
  store double 0.000000e+00, double* %8850, align 1, !tbaa !2453
  %8851 = load i64, i64* %RBP
  %8852 = sub i64 %8851, 152
  %8853 = load i64, i64* %PC
  %8854 = add i64 %8853, 7
  store i64 %8854, i64* %PC
  %8855 = inttoptr i64 %8852 to i64*
  %8856 = load i64, i64* %8855
  store i64 %8856, i64* %RAX, align 8, !tbaa !2428
  %8857 = load i64, i64* %RBP
  %8858 = sub i64 %8857, 188
  %8859 = load i64, i64* %PC
  %8860 = add i64 %8859, 7
  store i64 %8860, i64* %PC
  %8861 = inttoptr i64 %8858 to i32*
  %8862 = load i32, i32* %8861
  %8863 = sext i32 %8862 to i64
  store i64 %8863, i64* %RCX, align 8, !tbaa !2428
  %8864 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8865 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8866 = load i64, i64* %RAX
  %8867 = load i64, i64* %RCX
  %8868 = mul i64 %8867, 8
  %8869 = add i64 %8868, %8866
  %8870 = load i64, i64* %PC
  %8871 = add i64 %8870, 5
  store i64 %8871, i64* %PC
  %8872 = bitcast i8* %8865 to double*
  %8873 = load double, double* %8872, align 1
  %8874 = getelementptr inbounds i8, i8* %8865, i64 8
  %8875 = bitcast i8* %8874 to i64*
  %8876 = load i64, i64* %8875, align 1
  %8877 = inttoptr i64 %8869 to double*
  %8878 = load double, double* %8877
  %8879 = fmul double %8873, %8878
  %8880 = bitcast i8* %8864 to double*
  store double %8879, double* %8880, align 1, !tbaa !2453
  %8881 = getelementptr inbounds i8, i8* %8864, i64 8
  %8882 = bitcast i8* %8881 to i64*
  store i64 %8876, i64* %8882, align 1, !tbaa !2453
  %8883 = load i64, i64* %RBP
  %8884 = sub i64 %8883, 168
  %8885 = load i64, i64* %PC
  %8886 = add i64 %8885, 7
  store i64 %8886, i64* %PC
  %8887 = inttoptr i64 %8884 to i64*
  %8888 = load i64, i64* %8887
  store i64 %8888, i64* %RAX, align 8, !tbaa !2428
  %8889 = load i64, i64* %RBP
  %8890 = sub i64 %8889, 48
  %8891 = load i64, i64* %PC
  %8892 = add i64 %8891, 4
  store i64 %8892, i64* %PC
  %8893 = inttoptr i64 %8890 to i32*
  %8894 = load i32, i32* %8893
  %8895 = sext i32 %8894 to i64
  store i64 %8895, i64* %RCX, align 8, !tbaa !2428
  %8896 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8897 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8898 = load i64, i64* %RAX
  %8899 = load i64, i64* %RCX
  %8900 = mul i64 %8899, 8
  %8901 = add i64 %8900, %8898
  %8902 = load i64, i64* %PC
  %8903 = add i64 %8902, 5
  store i64 %8903, i64* %PC
  %8904 = bitcast i8* %8897 to double*
  %8905 = load double, double* %8904, align 1
  %8906 = getelementptr inbounds i8, i8* %8897, i64 8
  %8907 = bitcast i8* %8906 to i64*
  %8908 = load i64, i64* %8907, align 1
  %8909 = inttoptr i64 %8901 to double*
  %8910 = load double, double* %8909
  %8911 = fdiv double %8905, %8910
  %8912 = bitcast i8* %8896 to double*
  store double %8911, double* %8912, align 1, !tbaa !2453
  %8913 = getelementptr inbounds i8, i8* %8896, i64 8
  %8914 = bitcast i8* %8913 to i64*
  store i64 %8908, i64* %8914, align 1, !tbaa !2453
  %8915 = load i64, i64* %RBP
  %8916 = sub i64 %8915, 104
  %8917 = load i64, i64* %PC
  %8918 = add i64 %8917, 4
  store i64 %8918, i64* %PC
  %8919 = inttoptr i64 %8916 to i64*
  %8920 = load i64, i64* %8919
  store i64 %8920, i64* %RAX, align 8, !tbaa !2428
  %8921 = load i64, i64* %RBP
  %8922 = sub i64 %8921, 188
  %8923 = load i64, i64* %PC
  %8924 = add i64 %8923, 7
  store i64 %8924, i64* %PC
  %8925 = inttoptr i64 %8922 to i32*
  %8926 = load i32, i32* %8925
  %8927 = sext i32 %8926 to i64
  store i64 %8927, i64* %RCX, align 8, !tbaa !2428
  %8928 = load i64, i64* %RCX
  %8929 = load i64, i64* %PC
  %8930 = add i64 %8929, 7
  store i64 %8930, i64* %PC
  %8931 = sext i64 %8928 to i128
  %8932 = and i128 %8931, -18446744073709551616
  %8933 = zext i64 %8928 to i128
  %8934 = or i128 %8932, %8933
  %8935 = mul nsw i128 520, %8934
  %8936 = trunc i128 %8935 to i64
  store i64 %8936, i64* %RCX, align 8, !tbaa !2428
  %8937 = sext i64 %8936 to i128
  %8938 = icmp ne i128 %8937, %8935
  %8939 = zext i1 %8938 to i8
  %8940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8939, i8* %8940, align 1, !tbaa !2432
  %8941 = trunc i128 %8935 to i32
  %8942 = and i32 %8941, 255
  %8943 = call i32 @llvm.ctpop.i32(i32 %8942) #16
  %8944 = trunc i32 %8943 to i8
  %8945 = and i8 %8944, 1
  %8946 = xor i8 %8945, 1
  %8947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8946, i8* %8947, align 1, !tbaa !2446
  %8948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8948, align 1, !tbaa !2450
  %8949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8949, align 1, !tbaa !2447
  %8950 = lshr i64 %8936, 63
  %8951 = trunc i64 %8950 to i8
  %8952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8951, i8* %8952, align 1, !tbaa !2448
  %8953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8939, i8* %8953, align 1, !tbaa !2449
  %8954 = load i64, i64* %RAX
  %8955 = load i64, i64* %RCX
  %8956 = load i64, i64* %PC
  %8957 = add i64 %8956, 3
  store i64 %8957, i64* %PC
  %8958 = add i64 %8955, %8954
  store i64 %8958, i64* %RAX, align 8, !tbaa !2428
  %8959 = icmp ult i64 %8958, %8954
  %8960 = icmp ult i64 %8958, %8955
  %8961 = or i1 %8959, %8960
  %8962 = zext i1 %8961 to i8
  %8963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8962, i8* %8963, align 1, !tbaa !2432
  %8964 = trunc i64 %8958 to i32
  %8965 = and i32 %8964, 255
  %8966 = call i32 @llvm.ctpop.i32(i32 %8965) #16
  %8967 = trunc i32 %8966 to i8
  %8968 = and i8 %8967, 1
  %8969 = xor i8 %8968, 1
  %8970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8969, i8* %8970, align 1, !tbaa !2446
  %8971 = xor i64 %8955, %8954
  %8972 = xor i64 %8971, %8958
  %8973 = lshr i64 %8972, 4
  %8974 = trunc i64 %8973 to i8
  %8975 = and i8 %8974, 1
  %8976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8975, i8* %8976, align 1, !tbaa !2450
  %8977 = icmp eq i64 %8958, 0
  %8978 = zext i1 %8977 to i8
  %8979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8978, i8* %8979, align 1, !tbaa !2447
  %8980 = lshr i64 %8958, 63
  %8981 = trunc i64 %8980 to i8
  %8982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8981, i8* %8982, align 1, !tbaa !2448
  %8983 = lshr i64 %8954, 63
  %8984 = lshr i64 %8955, 63
  %8985 = xor i64 %8980, %8983
  %8986 = xor i64 %8980, %8984
  %8987 = add nuw nsw i64 %8985, %8986
  %8988 = icmp eq i64 %8987, 2
  %8989 = zext i1 %8988 to i8
  %8990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8989, i8* %8990, align 1, !tbaa !2449
  %8991 = load i64, i64* %RBP
  %8992 = sub i64 %8991, 192
  %8993 = load i64, i64* %PC
  %8994 = add i64 %8993, 7
  store i64 %8994, i64* %PC
  %8995 = inttoptr i64 %8992 to i32*
  %8996 = load i32, i32* %8995
  %8997 = sext i32 %8996 to i64
  store i64 %8997, i64* %RCX, align 8, !tbaa !2428
  %8998 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8999 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9000 = load i64, i64* %RAX
  %9001 = load i64, i64* %RCX
  %9002 = mul i64 %9001, 8
  %9003 = add i64 %9002, %9000
  %9004 = load i64, i64* %PC
  %9005 = add i64 %9004, 5
  store i64 %9005, i64* %PC
  %9006 = bitcast i8* %8999 to double*
  %9007 = load double, double* %9006, align 1
  %9008 = getelementptr inbounds i8, i8* %8999, i64 8
  %9009 = bitcast i8* %9008 to i64*
  %9010 = load i64, i64* %9009, align 1
  %9011 = inttoptr i64 %9003 to double*
  %9012 = load double, double* %9011
  %9013 = fmul double %9007, %9012
  %9014 = bitcast i8* %8998 to double*
  store double %9013, double* %9014, align 1, !tbaa !2453
  %9015 = getelementptr inbounds i8, i8* %8998, i64 8
  %9016 = bitcast i8* %9015 to i64*
  store i64 %9010, i64* %9016, align 1, !tbaa !2453
  %9017 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9018 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9019 = bitcast %union.vec128_t* %XMM1 to i8*
  %9020 = load i64, i64* %PC
  %9021 = add i64 %9020, 4
  store i64 %9021, i64* %PC
  %9022 = bitcast i8* %9018 to double*
  %9023 = load double, double* %9022, align 1
  %9024 = getelementptr inbounds i8, i8* %9018, i64 8
  %9025 = bitcast i8* %9024 to i64*
  %9026 = load i64, i64* %9025, align 1
  %9027 = bitcast i8* %9019 to double*
  %9028 = load double, double* %9027, align 1
  %9029 = fadd double %9023, %9028
  %9030 = bitcast i8* %9017 to double*
  store double %9029, double* %9030, align 1, !tbaa !2453
  %9031 = getelementptr inbounds i8, i8* %9017, i64 8
  %9032 = bitcast i8* %9031 to i64*
  store i64 %9026, i64* %9032, align 1, !tbaa !2453
  %9033 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9034 = load i64, i64* %RBP
  %9035 = sub i64 %9034, 64
  %9036 = load i64, i64* %PC
  %9037 = add i64 %9036, 5
  store i64 %9037, i64* %PC
  %9038 = inttoptr i64 %9035 to double*
  %9039 = load double, double* %9038
  %9040 = bitcast i8* %9033 to double*
  store double %9039, double* %9040, align 1, !tbaa !2453
  %9041 = getelementptr inbounds i8, i8* %9033, i64 8
  %9042 = bitcast i8* %9041 to double*
  store double 0.000000e+00, double* %9042, align 1, !tbaa !2453
  %9043 = load i64, i64* %RBP
  %9044 = sub i64 %9043, 144
  %9045 = load i64, i64* %PC
  %9046 = add i64 %9045, 7
  store i64 %9046, i64* %PC
  %9047 = inttoptr i64 %9044 to i64*
  %9048 = load i64, i64* %9047
  store i64 %9048, i64* %RAX, align 8, !tbaa !2428
  %9049 = load i64, i64* %RBP
  %9050 = sub i64 %9049, 188
  %9051 = load i64, i64* %PC
  %9052 = add i64 %9051, 7
  store i64 %9052, i64* %PC
  %9053 = inttoptr i64 %9050 to i32*
  %9054 = load i32, i32* %9053
  %9055 = sext i32 %9054 to i64
  store i64 %9055, i64* %RCX, align 8, !tbaa !2428
  %9056 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9057 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9058 = load i64, i64* %RAX
  %9059 = load i64, i64* %RCX
  %9060 = mul i64 %9059, 8
  %9061 = add i64 %9060, %9058
  %9062 = load i64, i64* %PC
  %9063 = add i64 %9062, 5
  store i64 %9063, i64* %PC
  %9064 = bitcast i8* %9057 to double*
  %9065 = load double, double* %9064, align 1
  %9066 = getelementptr inbounds i8, i8* %9057, i64 8
  %9067 = bitcast i8* %9066 to i64*
  %9068 = load i64, i64* %9067, align 1
  %9069 = inttoptr i64 %9061 to double*
  %9070 = load double, double* %9069
  %9071 = fmul double %9065, %9070
  %9072 = bitcast i8* %9056 to double*
  store double %9071, double* %9072, align 1, !tbaa !2453
  %9073 = getelementptr inbounds i8, i8* %9056, i64 8
  %9074 = bitcast i8* %9073 to i64*
  store i64 %9068, i64* %9074, align 1, !tbaa !2453
  %9075 = load i64, i64* %RBP
  %9076 = sub i64 %9075, 168
  %9077 = load i64, i64* %PC
  %9078 = add i64 %9077, 7
  store i64 %9078, i64* %PC
  %9079 = inttoptr i64 %9076 to i64*
  %9080 = load i64, i64* %9079
  store i64 %9080, i64* %RAX, align 8, !tbaa !2428
  %9081 = load i64, i64* %RBP
  %9082 = sub i64 %9081, 48
  %9083 = load i64, i64* %PC
  %9084 = add i64 %9083, 4
  store i64 %9084, i64* %PC
  %9085 = inttoptr i64 %9082 to i32*
  %9086 = load i32, i32* %9085
  %9087 = sext i32 %9086 to i64
  store i64 %9087, i64* %RCX, align 8, !tbaa !2428
  %9088 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9089 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9090 = load i64, i64* %RAX
  %9091 = load i64, i64* %RCX
  %9092 = mul i64 %9091, 8
  %9093 = add i64 %9092, %9090
  %9094 = load i64, i64* %PC
  %9095 = add i64 %9094, 5
  store i64 %9095, i64* %PC
  %9096 = bitcast i8* %9089 to double*
  %9097 = load double, double* %9096, align 1
  %9098 = getelementptr inbounds i8, i8* %9089, i64 8
  %9099 = bitcast i8* %9098 to i64*
  %9100 = load i64, i64* %9099, align 1
  %9101 = inttoptr i64 %9093 to double*
  %9102 = load double, double* %9101
  %9103 = fdiv double %9097, %9102
  %9104 = bitcast i8* %9088 to double*
  store double %9103, double* %9104, align 1, !tbaa !2453
  %9105 = getelementptr inbounds i8, i8* %9088, i64 8
  %9106 = bitcast i8* %9105 to i64*
  store i64 %9100, i64* %9106, align 1, !tbaa !2453
  %9107 = load i64, i64* %RBP
  %9108 = sub i64 %9107, 112
  %9109 = load i64, i64* %PC
  %9110 = add i64 %9109, 4
  store i64 %9110, i64* %PC
  %9111 = inttoptr i64 %9108 to i64*
  %9112 = load i64, i64* %9111
  store i64 %9112, i64* %RAX, align 8, !tbaa !2428
  %9113 = load i64, i64* %RBP
  %9114 = sub i64 %9113, 188
  %9115 = load i64, i64* %PC
  %9116 = add i64 %9115, 7
  store i64 %9116, i64* %PC
  %9117 = inttoptr i64 %9114 to i32*
  %9118 = load i32, i32* %9117
  %9119 = sext i32 %9118 to i64
  store i64 %9119, i64* %RCX, align 8, !tbaa !2428
  %9120 = load i64, i64* %RCX
  %9121 = load i64, i64* %PC
  %9122 = add i64 %9121, 7
  store i64 %9122, i64* %PC
  %9123 = sext i64 %9120 to i128
  %9124 = and i128 %9123, -18446744073709551616
  %9125 = zext i64 %9120 to i128
  %9126 = or i128 %9124, %9125
  %9127 = mul nsw i128 33800, %9126
  %9128 = trunc i128 %9127 to i64
  store i64 %9128, i64* %RCX, align 8, !tbaa !2428
  %9129 = sext i64 %9128 to i128
  %9130 = icmp ne i128 %9129, %9127
  %9131 = zext i1 %9130 to i8
  %9132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9131, i8* %9132, align 1, !tbaa !2432
  %9133 = trunc i128 %9127 to i32
  %9134 = and i32 %9133, 255
  %9135 = call i32 @llvm.ctpop.i32(i32 %9134) #16
  %9136 = trunc i32 %9135 to i8
  %9137 = and i8 %9136, 1
  %9138 = xor i8 %9137, 1
  %9139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9138, i8* %9139, align 1, !tbaa !2446
  %9140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9140, align 1, !tbaa !2450
  %9141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9141, align 1, !tbaa !2447
  %9142 = lshr i64 %9128, 63
  %9143 = trunc i64 %9142 to i8
  %9144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9143, i8* %9144, align 1, !tbaa !2448
  %9145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9131, i8* %9145, align 1, !tbaa !2449
  %9146 = load i64, i64* %RAX
  %9147 = load i64, i64* %RCX
  %9148 = load i64, i64* %PC
  %9149 = add i64 %9148, 3
  store i64 %9149, i64* %PC
  %9150 = add i64 %9147, %9146
  store i64 %9150, i64* %RAX, align 8, !tbaa !2428
  %9151 = icmp ult i64 %9150, %9146
  %9152 = icmp ult i64 %9150, %9147
  %9153 = or i1 %9151, %9152
  %9154 = zext i1 %9153 to i8
  %9155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9154, i8* %9155, align 1, !tbaa !2432
  %9156 = trunc i64 %9150 to i32
  %9157 = and i32 %9156, 255
  %9158 = call i32 @llvm.ctpop.i32(i32 %9157) #16
  %9159 = trunc i32 %9158 to i8
  %9160 = and i8 %9159, 1
  %9161 = xor i8 %9160, 1
  %9162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9161, i8* %9162, align 1, !tbaa !2446
  %9163 = xor i64 %9147, %9146
  %9164 = xor i64 %9163, %9150
  %9165 = lshr i64 %9164, 4
  %9166 = trunc i64 %9165 to i8
  %9167 = and i8 %9166, 1
  %9168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9167, i8* %9168, align 1, !tbaa !2450
  %9169 = icmp eq i64 %9150, 0
  %9170 = zext i1 %9169 to i8
  %9171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9170, i8* %9171, align 1, !tbaa !2447
  %9172 = lshr i64 %9150, 63
  %9173 = trunc i64 %9172 to i8
  %9174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9173, i8* %9174, align 1, !tbaa !2448
  %9175 = lshr i64 %9146, 63
  %9176 = lshr i64 %9147, 63
  %9177 = xor i64 %9172, %9175
  %9178 = xor i64 %9172, %9176
  %9179 = add nuw nsw i64 %9177, %9178
  %9180 = icmp eq i64 %9179, 2
  %9181 = zext i1 %9180 to i8
  %9182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9181, i8* %9182, align 1, !tbaa !2449
  %9183 = load i64, i64* %RBP
  %9184 = sub i64 %9183, 52
  %9185 = load i64, i64* %PC
  %9186 = add i64 %9185, 4
  store i64 %9186, i64* %PC
  %9187 = inttoptr i64 %9184 to i32*
  %9188 = load i32, i32* %9187
  %9189 = sext i32 %9188 to i64
  store i64 %9189, i64* %RCX, align 8, !tbaa !2428
  %9190 = load i64, i64* %RCX
  %9191 = load i64, i64* %PC
  %9192 = add i64 %9191, 7
  store i64 %9192, i64* %PC
  %9193 = sext i64 %9190 to i128
  %9194 = and i128 %9193, -18446744073709551616
  %9195 = zext i64 %9190 to i128
  %9196 = or i128 %9194, %9195
  %9197 = mul nsw i128 520, %9196
  %9198 = trunc i128 %9197 to i64
  store i64 %9198, i64* %RCX, align 8, !tbaa !2428
  %9199 = sext i64 %9198 to i128
  %9200 = icmp ne i128 %9199, %9197
  %9201 = zext i1 %9200 to i8
  %9202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9201, i8* %9202, align 1, !tbaa !2432
  %9203 = trunc i128 %9197 to i32
  %9204 = and i32 %9203, 255
  %9205 = call i32 @llvm.ctpop.i32(i32 %9204) #16
  %9206 = trunc i32 %9205 to i8
  %9207 = and i8 %9206, 1
  %9208 = xor i8 %9207, 1
  %9209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9208, i8* %9209, align 1, !tbaa !2446
  %9210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9210, align 1, !tbaa !2450
  %9211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9211, align 1, !tbaa !2447
  %9212 = lshr i64 %9198, 63
  %9213 = trunc i64 %9212 to i8
  %9214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9213, i8* %9214, align 1, !tbaa !2448
  %9215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9201, i8* %9215, align 1, !tbaa !2449
  %9216 = load i64, i64* %RAX
  %9217 = load i64, i64* %RCX
  %9218 = load i64, i64* %PC
  %9219 = add i64 %9218, 3
  store i64 %9219, i64* %PC
  %9220 = add i64 %9217, %9216
  store i64 %9220, i64* %RAX, align 8, !tbaa !2428
  %9221 = icmp ult i64 %9220, %9216
  %9222 = icmp ult i64 %9220, %9217
  %9223 = or i1 %9221, %9222
  %9224 = zext i1 %9223 to i8
  %9225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9224, i8* %9225, align 1, !tbaa !2432
  %9226 = trunc i64 %9220 to i32
  %9227 = and i32 %9226, 255
  %9228 = call i32 @llvm.ctpop.i32(i32 %9227) #16
  %9229 = trunc i32 %9228 to i8
  %9230 = and i8 %9229, 1
  %9231 = xor i8 %9230, 1
  %9232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9231, i8* %9232, align 1, !tbaa !2446
  %9233 = xor i64 %9217, %9216
  %9234 = xor i64 %9233, %9220
  %9235 = lshr i64 %9234, 4
  %9236 = trunc i64 %9235 to i8
  %9237 = and i8 %9236, 1
  %9238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9237, i8* %9238, align 1, !tbaa !2450
  %9239 = icmp eq i64 %9220, 0
  %9240 = zext i1 %9239 to i8
  %9241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9240, i8* %9241, align 1, !tbaa !2447
  %9242 = lshr i64 %9220, 63
  %9243 = trunc i64 %9242 to i8
  %9244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9243, i8* %9244, align 1, !tbaa !2448
  %9245 = lshr i64 %9216, 63
  %9246 = lshr i64 %9217, 63
  %9247 = xor i64 %9242, %9245
  %9248 = xor i64 %9242, %9246
  %9249 = add nuw nsw i64 %9247, %9248
  %9250 = icmp eq i64 %9249, 2
  %9251 = zext i1 %9250 to i8
  %9252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9251, i8* %9252, align 1, !tbaa !2449
  %9253 = load i64, i64* %RBP
  %9254 = sub i64 %9253, 48
  %9255 = load i64, i64* %PC
  %9256 = add i64 %9255, 4
  store i64 %9256, i64* %PC
  %9257 = inttoptr i64 %9254 to i32*
  %9258 = load i32, i32* %9257
  %9259 = sext i32 %9258 to i64
  store i64 %9259, i64* %RCX, align 8, !tbaa !2428
  %9260 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9261 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9262 = load i64, i64* %RAX
  %9263 = load i64, i64* %RCX
  %9264 = mul i64 %9263, 8
  %9265 = add i64 %9264, %9262
  %9266 = load i64, i64* %PC
  %9267 = add i64 %9266, 5
  store i64 %9267, i64* %PC
  %9268 = bitcast i8* %9261 to double*
  %9269 = load double, double* %9268, align 1
  %9270 = getelementptr inbounds i8, i8* %9261, i64 8
  %9271 = bitcast i8* %9270 to i64*
  %9272 = load i64, i64* %9271, align 1
  %9273 = inttoptr i64 %9265 to double*
  %9274 = load double, double* %9273
  %9275 = fmul double %9269, %9274
  %9276 = bitcast i8* %9260 to double*
  store double %9275, double* %9276, align 1, !tbaa !2453
  %9277 = getelementptr inbounds i8, i8* %9260, i64 8
  %9278 = bitcast i8* %9277 to i64*
  store i64 %9272, i64* %9278, align 1, !tbaa !2453
  %9279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9280 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9281 = bitcast %union.vec128_t* %XMM1 to i8*
  %9282 = load i64, i64* %PC
  %9283 = add i64 %9282, 4
  store i64 %9283, i64* %PC
  %9284 = bitcast i8* %9280 to double*
  %9285 = load double, double* %9284, align 1
  %9286 = getelementptr inbounds i8, i8* %9280, i64 8
  %9287 = bitcast i8* %9286 to i64*
  %9288 = load i64, i64* %9287, align 1
  %9289 = bitcast i8* %9281 to double*
  %9290 = load double, double* %9289, align 1
  %9291 = fsub double %9285, %9290
  %9292 = bitcast i8* %9279 to double*
  store double %9291, double* %9292, align 1, !tbaa !2453
  %9293 = getelementptr inbounds i8, i8* %9279, i64 8
  %9294 = bitcast i8* %9293 to i64*
  store i64 %9288, i64* %9294, align 1, !tbaa !2453
  %9295 = load i64, i64* %RBP
  %9296 = sub i64 %9295, 136
  %9297 = load i64, i64* %PC
  %9298 = add i64 %9297, 7
  store i64 %9298, i64* %PC
  %9299 = inttoptr i64 %9296 to i64*
  %9300 = load i64, i64* %9299
  store i64 %9300, i64* %RAX, align 8, !tbaa !2428
  %9301 = load i64, i64* %RBP
  %9302 = sub i64 %9301, 188
  %9303 = load i64, i64* %PC
  %9304 = add i64 %9303, 7
  store i64 %9304, i64* %PC
  %9305 = inttoptr i64 %9302 to i32*
  %9306 = load i32, i32* %9305
  %9307 = sext i32 %9306 to i64
  store i64 %9307, i64* %RCX, align 8, !tbaa !2428
  %9308 = load i64, i64* %RCX
  %9309 = load i64, i64* %PC
  %9310 = add i64 %9309, 7
  store i64 %9310, i64* %PC
  %9311 = sext i64 %9308 to i128
  %9312 = and i128 %9311, -18446744073709551616
  %9313 = zext i64 %9308 to i128
  %9314 = or i128 %9312, %9313
  %9315 = mul nsw i128 33800, %9314
  %9316 = trunc i128 %9315 to i64
  store i64 %9316, i64* %RCX, align 8, !tbaa !2428
  %9317 = sext i64 %9316 to i128
  %9318 = icmp ne i128 %9317, %9315
  %9319 = zext i1 %9318 to i8
  %9320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9319, i8* %9320, align 1, !tbaa !2432
  %9321 = trunc i128 %9315 to i32
  %9322 = and i32 %9321, 255
  %9323 = call i32 @llvm.ctpop.i32(i32 %9322) #16
  %9324 = trunc i32 %9323 to i8
  %9325 = and i8 %9324, 1
  %9326 = xor i8 %9325, 1
  %9327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9326, i8* %9327, align 1, !tbaa !2446
  %9328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9328, align 1, !tbaa !2450
  %9329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9329, align 1, !tbaa !2447
  %9330 = lshr i64 %9316, 63
  %9331 = trunc i64 %9330 to i8
  %9332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9331, i8* %9332, align 1, !tbaa !2448
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9319, i8* %9333, align 1, !tbaa !2449
  %9334 = load i64, i64* %RAX
  %9335 = load i64, i64* %RCX
  %9336 = load i64, i64* %PC
  %9337 = add i64 %9336, 3
  store i64 %9337, i64* %PC
  %9338 = add i64 %9335, %9334
  store i64 %9338, i64* %RAX, align 8, !tbaa !2428
  %9339 = icmp ult i64 %9338, %9334
  %9340 = icmp ult i64 %9338, %9335
  %9341 = or i1 %9339, %9340
  %9342 = zext i1 %9341 to i8
  %9343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9342, i8* %9343, align 1, !tbaa !2432
  %9344 = trunc i64 %9338 to i32
  %9345 = and i32 %9344, 255
  %9346 = call i32 @llvm.ctpop.i32(i32 %9345) #16
  %9347 = trunc i32 %9346 to i8
  %9348 = and i8 %9347, 1
  %9349 = xor i8 %9348, 1
  %9350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9349, i8* %9350, align 1, !tbaa !2446
  %9351 = xor i64 %9335, %9334
  %9352 = xor i64 %9351, %9338
  %9353 = lshr i64 %9352, 4
  %9354 = trunc i64 %9353 to i8
  %9355 = and i8 %9354, 1
  %9356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9355, i8* %9356, align 1, !tbaa !2450
  %9357 = icmp eq i64 %9338, 0
  %9358 = zext i1 %9357 to i8
  %9359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9358, i8* %9359, align 1, !tbaa !2447
  %9360 = lshr i64 %9338, 63
  %9361 = trunc i64 %9360 to i8
  %9362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9361, i8* %9362, align 1, !tbaa !2448
  %9363 = lshr i64 %9334, 63
  %9364 = lshr i64 %9335, 63
  %9365 = xor i64 %9360, %9363
  %9366 = xor i64 %9360, %9364
  %9367 = add nuw nsw i64 %9365, %9366
  %9368 = icmp eq i64 %9367, 2
  %9369 = zext i1 %9368 to i8
  %9370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9369, i8* %9370, align 1, !tbaa !2449
  %9371 = load i64, i64* %RBP
  %9372 = sub i64 %9371, 52
  %9373 = load i64, i64* %PC
  %9374 = add i64 %9373, 4
  store i64 %9374, i64* %PC
  %9375 = inttoptr i64 %9372 to i32*
  %9376 = load i32, i32* %9375
  %9377 = sext i32 %9376 to i64
  store i64 %9377, i64* %RCX, align 8, !tbaa !2428
  %9378 = load i64, i64* %RCX
  %9379 = load i64, i64* %PC
  %9380 = add i64 %9379, 7
  store i64 %9380, i64* %PC
  %9381 = sext i64 %9378 to i128
  %9382 = and i128 %9381, -18446744073709551616
  %9383 = zext i64 %9378 to i128
  %9384 = or i128 %9382, %9383
  %9385 = mul nsw i128 520, %9384
  %9386 = trunc i128 %9385 to i64
  store i64 %9386, i64* %RCX, align 8, !tbaa !2428
  %9387 = sext i64 %9386 to i128
  %9388 = icmp ne i128 %9387, %9385
  %9389 = zext i1 %9388 to i8
  %9390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9389, i8* %9390, align 1, !tbaa !2432
  %9391 = trunc i128 %9385 to i32
  %9392 = and i32 %9391, 255
  %9393 = call i32 @llvm.ctpop.i32(i32 %9392) #16
  %9394 = trunc i32 %9393 to i8
  %9395 = and i8 %9394, 1
  %9396 = xor i8 %9395, 1
  %9397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9396, i8* %9397, align 1, !tbaa !2446
  %9398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9398, align 1, !tbaa !2450
  %9399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9399, align 1, !tbaa !2447
  %9400 = lshr i64 %9386, 63
  %9401 = trunc i64 %9400 to i8
  %9402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9401, i8* %9402, align 1, !tbaa !2448
  %9403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9389, i8* %9403, align 1, !tbaa !2449
  %9404 = load i64, i64* %RAX
  %9405 = load i64, i64* %RCX
  %9406 = load i64, i64* %PC
  %9407 = add i64 %9406, 3
  store i64 %9407, i64* %PC
  %9408 = add i64 %9405, %9404
  store i64 %9408, i64* %RAX, align 8, !tbaa !2428
  %9409 = icmp ult i64 %9408, %9404
  %9410 = icmp ult i64 %9408, %9405
  %9411 = or i1 %9409, %9410
  %9412 = zext i1 %9411 to i8
  %9413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9412, i8* %9413, align 1, !tbaa !2432
  %9414 = trunc i64 %9408 to i32
  %9415 = and i32 %9414, 255
  %9416 = call i32 @llvm.ctpop.i32(i32 %9415) #16
  %9417 = trunc i32 %9416 to i8
  %9418 = and i8 %9417, 1
  %9419 = xor i8 %9418, 1
  %9420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9419, i8* %9420, align 1, !tbaa !2446
  %9421 = xor i64 %9405, %9404
  %9422 = xor i64 %9421, %9408
  %9423 = lshr i64 %9422, 4
  %9424 = trunc i64 %9423 to i8
  %9425 = and i8 %9424, 1
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9425, i8* %9426, align 1, !tbaa !2450
  %9427 = icmp eq i64 %9408, 0
  %9428 = zext i1 %9427 to i8
  %9429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9428, i8* %9429, align 1, !tbaa !2447
  %9430 = lshr i64 %9408, 63
  %9431 = trunc i64 %9430 to i8
  %9432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9431, i8* %9432, align 1, !tbaa !2448
  %9433 = lshr i64 %9404, 63
  %9434 = lshr i64 %9405, 63
  %9435 = xor i64 %9430, %9433
  %9436 = xor i64 %9430, %9434
  %9437 = add nuw nsw i64 %9435, %9436
  %9438 = icmp eq i64 %9437, 2
  %9439 = zext i1 %9438 to i8
  %9440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9439, i8* %9440, align 1, !tbaa !2449
  %9441 = load i64, i64* %RBP
  %9442 = sub i64 %9441, 48
  %9443 = load i64, i64* %PC
  %9444 = add i64 %9443, 4
  store i64 %9444, i64* %PC
  %9445 = inttoptr i64 %9442 to i32*
  %9446 = load i32, i32* %9445
  %9447 = sext i32 %9446 to i64
  store i64 %9447, i64* %RCX, align 8, !tbaa !2428
  %9448 = load i64, i64* %RAX
  %9449 = load i64, i64* %RCX
  %9450 = mul i64 %9449, 8
  %9451 = add i64 %9450, %9448
  %9452 = bitcast %union.vec128_t* %XMM0 to i8*
  %9453 = load i64, i64* %PC
  %9454 = add i64 %9453, 5
  store i64 %9454, i64* %PC
  %9455 = bitcast i8* %9452 to double*
  %9456 = load double, double* %9455, align 1
  %9457 = inttoptr i64 %9451 to double*
  store double %9456, double* %9457
  %9458 = load i64, i64* %RBP
  %9459 = sub i64 %9458, 104
  %9460 = load i64, i64* %PC
  %9461 = add i64 %9460, 4
  store i64 %9461, i64* %PC
  %9462 = inttoptr i64 %9459 to i64*
  %9463 = load i64, i64* %9462
  store i64 %9463, i64* %RAX, align 8, !tbaa !2428
  %9464 = load i64, i64* %RBP
  %9465 = sub i64 %9464, 188
  %9466 = load i64, i64* %PC
  %9467 = add i64 %9466, 7
  store i64 %9467, i64* %PC
  %9468 = inttoptr i64 %9465 to i32*
  %9469 = load i32, i32* %9468
  %9470 = sext i32 %9469 to i64
  store i64 %9470, i64* %RCX, align 8, !tbaa !2428
  %9471 = load i64, i64* %RCX
  %9472 = load i64, i64* %PC
  %9473 = add i64 %9472, 7
  store i64 %9473, i64* %PC
  %9474 = sext i64 %9471 to i128
  %9475 = and i128 %9474, -18446744073709551616
  %9476 = zext i64 %9471 to i128
  %9477 = or i128 %9475, %9476
  %9478 = mul nsw i128 520, %9477
  %9479 = trunc i128 %9478 to i64
  store i64 %9479, i64* %RCX, align 8, !tbaa !2428
  %9480 = sext i64 %9479 to i128
  %9481 = icmp ne i128 %9480, %9478
  %9482 = zext i1 %9481 to i8
  %9483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9482, i8* %9483, align 1, !tbaa !2432
  %9484 = trunc i128 %9478 to i32
  %9485 = and i32 %9484, 255
  %9486 = call i32 @llvm.ctpop.i32(i32 %9485) #16
  %9487 = trunc i32 %9486 to i8
  %9488 = and i8 %9487, 1
  %9489 = xor i8 %9488, 1
  %9490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9489, i8* %9490, align 1, !tbaa !2446
  %9491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9491, align 1, !tbaa !2450
  %9492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9492, align 1, !tbaa !2447
  %9493 = lshr i64 %9479, 63
  %9494 = trunc i64 %9493 to i8
  %9495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9494, i8* %9495, align 1, !tbaa !2448
  %9496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9482, i8* %9496, align 1, !tbaa !2449
  %9497 = load i64, i64* %RAX
  %9498 = load i64, i64* %RCX
  %9499 = load i64, i64* %PC
  %9500 = add i64 %9499, 3
  store i64 %9500, i64* %PC
  %9501 = add i64 %9498, %9497
  store i64 %9501, i64* %RAX, align 8, !tbaa !2428
  %9502 = icmp ult i64 %9501, %9497
  %9503 = icmp ult i64 %9501, %9498
  %9504 = or i1 %9502, %9503
  %9505 = zext i1 %9504 to i8
  %9506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9505, i8* %9506, align 1, !tbaa !2432
  %9507 = trunc i64 %9501 to i32
  %9508 = and i32 %9507, 255
  %9509 = call i32 @llvm.ctpop.i32(i32 %9508) #16
  %9510 = trunc i32 %9509 to i8
  %9511 = and i8 %9510, 1
  %9512 = xor i8 %9511, 1
  %9513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9512, i8* %9513, align 1, !tbaa !2446
  %9514 = xor i64 %9498, %9497
  %9515 = xor i64 %9514, %9501
  %9516 = lshr i64 %9515, 4
  %9517 = trunc i64 %9516 to i8
  %9518 = and i8 %9517, 1
  %9519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9518, i8* %9519, align 1, !tbaa !2450
  %9520 = icmp eq i64 %9501, 0
  %9521 = zext i1 %9520 to i8
  %9522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9521, i8* %9522, align 1, !tbaa !2447
  %9523 = lshr i64 %9501, 63
  %9524 = trunc i64 %9523 to i8
  %9525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9524, i8* %9525, align 1, !tbaa !2448
  %9526 = lshr i64 %9497, 63
  %9527 = lshr i64 %9498, 63
  %9528 = xor i64 %9523, %9526
  %9529 = xor i64 %9523, %9527
  %9530 = add nuw nsw i64 %9528, %9529
  %9531 = icmp eq i64 %9530, 2
  %9532 = zext i1 %9531 to i8
  %9533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9532, i8* %9533, align 1, !tbaa !2449
  %9534 = load i64, i64* %RBP
  %9535 = sub i64 %9534, 192
  %9536 = load i64, i64* %PC
  %9537 = add i64 %9536, 7
  store i64 %9537, i64* %PC
  %9538 = inttoptr i64 %9535 to i32*
  %9539 = load i32, i32* %9538
  %9540 = sext i32 %9539 to i64
  store i64 %9540, i64* %RCX, align 8, !tbaa !2428
  %9541 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9542 = load i64, i64* %RAX
  %9543 = load i64, i64* %RCX
  %9544 = mul i64 %9543, 8
  %9545 = add i64 %9544, %9542
  %9546 = load i64, i64* %PC
  %9547 = add i64 %9546, 5
  store i64 %9547, i64* %PC
  %9548 = inttoptr i64 %9545 to double*
  %9549 = load double, double* %9548
  %9550 = bitcast i8* %9541 to double*
  store double %9549, double* %9550, align 1, !tbaa !2453
  %9551 = getelementptr inbounds i8, i8* %9541, i64 8
  %9552 = bitcast i8* %9551 to double*
  store double 0.000000e+00, double* %9552, align 1, !tbaa !2453
  %9553 = load i64, i64* %RBP
  %9554 = sub i64 %9553, 112
  %9555 = load i64, i64* %PC
  %9556 = add i64 %9555, 4
  store i64 %9556, i64* %PC
  %9557 = inttoptr i64 %9554 to i64*
  %9558 = load i64, i64* %9557
  store i64 %9558, i64* %RAX, align 8, !tbaa !2428
  %9559 = load i64, i64* %RBP
  %9560 = sub i64 %9559, 188
  %9561 = load i64, i64* %PC
  %9562 = add i64 %9561, 7
  store i64 %9562, i64* %PC
  %9563 = inttoptr i64 %9560 to i32*
  %9564 = load i32, i32* %9563
  %9565 = sext i32 %9564 to i64
  store i64 %9565, i64* %RCX, align 8, !tbaa !2428
  %9566 = load i64, i64* %RCX
  %9567 = load i64, i64* %PC
  %9568 = add i64 %9567, 7
  store i64 %9568, i64* %PC
  %9569 = sext i64 %9566 to i128
  %9570 = and i128 %9569, -18446744073709551616
  %9571 = zext i64 %9566 to i128
  %9572 = or i128 %9570, %9571
  %9573 = mul nsw i128 33800, %9572
  %9574 = trunc i128 %9573 to i64
  store i64 %9574, i64* %RCX, align 8, !tbaa !2428
  %9575 = sext i64 %9574 to i128
  %9576 = icmp ne i128 %9575, %9573
  %9577 = zext i1 %9576 to i8
  %9578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9577, i8* %9578, align 1, !tbaa !2432
  %9579 = trunc i128 %9573 to i32
  %9580 = and i32 %9579, 255
  %9581 = call i32 @llvm.ctpop.i32(i32 %9580) #16
  %9582 = trunc i32 %9581 to i8
  %9583 = and i8 %9582, 1
  %9584 = xor i8 %9583, 1
  %9585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9584, i8* %9585, align 1, !tbaa !2446
  %9586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9586, align 1, !tbaa !2450
  %9587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9587, align 1, !tbaa !2447
  %9588 = lshr i64 %9574, 63
  %9589 = trunc i64 %9588 to i8
  %9590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9589, i8* %9590, align 1, !tbaa !2448
  %9591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9577, i8* %9591, align 1, !tbaa !2449
  %9592 = load i64, i64* %RAX
  %9593 = load i64, i64* %RCX
  %9594 = load i64, i64* %PC
  %9595 = add i64 %9594, 3
  store i64 %9595, i64* %PC
  %9596 = add i64 %9593, %9592
  store i64 %9596, i64* %RAX, align 8, !tbaa !2428
  %9597 = icmp ult i64 %9596, %9592
  %9598 = icmp ult i64 %9596, %9593
  %9599 = or i1 %9597, %9598
  %9600 = zext i1 %9599 to i8
  %9601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9600, i8* %9601, align 1, !tbaa !2432
  %9602 = trunc i64 %9596 to i32
  %9603 = and i32 %9602, 255
  %9604 = call i32 @llvm.ctpop.i32(i32 %9603) #16
  %9605 = trunc i32 %9604 to i8
  %9606 = and i8 %9605, 1
  %9607 = xor i8 %9606, 1
  %9608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9607, i8* %9608, align 1, !tbaa !2446
  %9609 = xor i64 %9593, %9592
  %9610 = xor i64 %9609, %9596
  %9611 = lshr i64 %9610, 4
  %9612 = trunc i64 %9611 to i8
  %9613 = and i8 %9612, 1
  %9614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9613, i8* %9614, align 1, !tbaa !2450
  %9615 = icmp eq i64 %9596, 0
  %9616 = zext i1 %9615 to i8
  %9617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9616, i8* %9617, align 1, !tbaa !2447
  %9618 = lshr i64 %9596, 63
  %9619 = trunc i64 %9618 to i8
  %9620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9619, i8* %9620, align 1, !tbaa !2448
  %9621 = lshr i64 %9592, 63
  %9622 = lshr i64 %9593, 63
  %9623 = xor i64 %9618, %9621
  %9624 = xor i64 %9618, %9622
  %9625 = add nuw nsw i64 %9623, %9624
  %9626 = icmp eq i64 %9625, 2
  %9627 = zext i1 %9626 to i8
  %9628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9627, i8* %9628, align 1, !tbaa !2449
  %9629 = load i64, i64* %RBP
  %9630 = sub i64 %9629, 52
  %9631 = load i64, i64* %PC
  %9632 = add i64 %9631, 4
  store i64 %9632, i64* %PC
  %9633 = inttoptr i64 %9630 to i32*
  %9634 = load i32, i32* %9633
  %9635 = sext i32 %9634 to i64
  store i64 %9635, i64* %RCX, align 8, !tbaa !2428
  %9636 = load i64, i64* %RCX
  %9637 = load i64, i64* %PC
  %9638 = add i64 %9637, 7
  store i64 %9638, i64* %PC
  %9639 = sext i64 %9636 to i128
  %9640 = and i128 %9639, -18446744073709551616
  %9641 = zext i64 %9636 to i128
  %9642 = or i128 %9640, %9641
  %9643 = mul nsw i128 520, %9642
  %9644 = trunc i128 %9643 to i64
  store i64 %9644, i64* %RCX, align 8, !tbaa !2428
  %9645 = sext i64 %9644 to i128
  %9646 = icmp ne i128 %9645, %9643
  %9647 = zext i1 %9646 to i8
  %9648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9647, i8* %9648, align 1, !tbaa !2432
  %9649 = trunc i128 %9643 to i32
  %9650 = and i32 %9649, 255
  %9651 = call i32 @llvm.ctpop.i32(i32 %9650) #16
  %9652 = trunc i32 %9651 to i8
  %9653 = and i8 %9652, 1
  %9654 = xor i8 %9653, 1
  %9655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9654, i8* %9655, align 1, !tbaa !2446
  %9656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9656, align 1, !tbaa !2450
  %9657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9657, align 1, !tbaa !2447
  %9658 = lshr i64 %9644, 63
  %9659 = trunc i64 %9658 to i8
  %9660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9659, i8* %9660, align 1, !tbaa !2448
  %9661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9647, i8* %9661, align 1, !tbaa !2449
  %9662 = load i64, i64* %RAX
  %9663 = load i64, i64* %RCX
  %9664 = load i64, i64* %PC
  %9665 = add i64 %9664, 3
  store i64 %9665, i64* %PC
  %9666 = add i64 %9663, %9662
  store i64 %9666, i64* %RAX, align 8, !tbaa !2428
  %9667 = icmp ult i64 %9666, %9662
  %9668 = icmp ult i64 %9666, %9663
  %9669 = or i1 %9667, %9668
  %9670 = zext i1 %9669 to i8
  %9671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9670, i8* %9671, align 1, !tbaa !2432
  %9672 = trunc i64 %9666 to i32
  %9673 = and i32 %9672, 255
  %9674 = call i32 @llvm.ctpop.i32(i32 %9673) #16
  %9675 = trunc i32 %9674 to i8
  %9676 = and i8 %9675, 1
  %9677 = xor i8 %9676, 1
  %9678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9677, i8* %9678, align 1, !tbaa !2446
  %9679 = xor i64 %9663, %9662
  %9680 = xor i64 %9679, %9666
  %9681 = lshr i64 %9680, 4
  %9682 = trunc i64 %9681 to i8
  %9683 = and i8 %9682, 1
  %9684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9683, i8* %9684, align 1, !tbaa !2450
  %9685 = icmp eq i64 %9666, 0
  %9686 = zext i1 %9685 to i8
  %9687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9686, i8* %9687, align 1, !tbaa !2447
  %9688 = lshr i64 %9666, 63
  %9689 = trunc i64 %9688 to i8
  %9690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9689, i8* %9690, align 1, !tbaa !2448
  %9691 = lshr i64 %9662, 63
  %9692 = lshr i64 %9663, 63
  %9693 = xor i64 %9688, %9691
  %9694 = xor i64 %9688, %9692
  %9695 = add nuw nsw i64 %9693, %9694
  %9696 = icmp eq i64 %9695, 2
  %9697 = zext i1 %9696 to i8
  %9698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9697, i8* %9698, align 1, !tbaa !2449
  %9699 = load i64, i64* %RBP
  %9700 = sub i64 %9699, 48
  %9701 = load i64, i64* %PC
  %9702 = add i64 %9701, 4
  store i64 %9702, i64* %PC
  %9703 = inttoptr i64 %9700 to i32*
  %9704 = load i32, i32* %9703
  %9705 = sext i32 %9704 to i64
  store i64 %9705, i64* %RCX, align 8, !tbaa !2428
  %9706 = load i64, i64* %RAX
  %9707 = load i64, i64* %RCX
  %9708 = mul i64 %9707, 8
  %9709 = add i64 %9708, %9706
  %9710 = bitcast %union.vec128_t* %XMM0 to i8*
  %9711 = load i64, i64* %PC
  %9712 = add i64 %9711, 5
  store i64 %9712, i64* %PC
  %9713 = bitcast i8* %9710 to double*
  %9714 = load double, double* %9713, align 1
  %9715 = inttoptr i64 %9709 to double*
  store double %9714, double* %9715
  %9716 = load i64, i64* %RBP
  %9717 = sub i64 %9716, 192
  %9718 = load i64, i64* %PC
  %9719 = add i64 %9718, 6
  store i64 %9719, i64* %PC
  %9720 = inttoptr i64 %9717 to i32*
  %9721 = load i32, i32* %9720
  %9722 = zext i32 %9721 to i64
  store i64 %9722, i64* %RAX, align 8, !tbaa !2428
  %9723 = load i64, i64* %RAX
  %9724 = load i64, i64* %PC
  %9725 = add i64 %9724, 3
  store i64 %9725, i64* %PC
  %9726 = trunc i64 %9723 to i32
  %9727 = add i32 1, %9726
  %9728 = zext i32 %9727 to i64
  store i64 %9728, i64* %RAX, align 8, !tbaa !2428
  %9729 = icmp ult i32 %9727, %9726
  %9730 = icmp ult i32 %9727, 1
  %9731 = or i1 %9729, %9730
  %9732 = zext i1 %9731 to i8
  %9733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9732, i8* %9733, align 1, !tbaa !2432
  %9734 = and i32 %9727, 255
  %9735 = call i32 @llvm.ctpop.i32(i32 %9734) #16
  %9736 = trunc i32 %9735 to i8
  %9737 = and i8 %9736, 1
  %9738 = xor i8 %9737, 1
  %9739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9738, i8* %9739, align 1, !tbaa !2446
  %9740 = xor i64 1, %9723
  %9741 = trunc i64 %9740 to i32
  %9742 = xor i32 %9741, %9727
  %9743 = lshr i32 %9742, 4
  %9744 = trunc i32 %9743 to i8
  %9745 = and i8 %9744, 1
  %9746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9745, i8* %9746, align 1, !tbaa !2450
  %9747 = icmp eq i32 %9727, 0
  %9748 = zext i1 %9747 to i8
  %9749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9748, i8* %9749, align 1, !tbaa !2447
  %9750 = lshr i32 %9727, 31
  %9751 = trunc i32 %9750 to i8
  %9752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9751, i8* %9752, align 1, !tbaa !2448
  %9753 = lshr i32 %9726, 31
  %9754 = xor i32 %9750, %9753
  %9755 = add nuw nsw i32 %9754, %9750
  %9756 = icmp eq i32 %9755, 2
  %9757 = zext i1 %9756 to i8
  %9758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9757, i8* %9758, align 1, !tbaa !2449
  %9759 = load i64, i64* %RBP
  %9760 = sub i64 %9759, 192
  %9761 = load i32, i32* %EAX
  %9762 = zext i32 %9761 to i64
  %9763 = load i64, i64* %PC
  %9764 = add i64 %9763, 6
  store i64 %9764, i64* %PC
  %9765 = inttoptr i64 %9760 to i32*
  store i32 %9761, i32* %9765
  %9766 = load i64, i64* %PC
  %9767 = sub i64 %9766, 3219
  %9768 = load i64, i64* %PC
  %9769 = add i64 %9768, 5
  store i64 %9769, i64* %PC
  %9770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9767, i64* %9770, align 8, !tbaa !2428
  br label %block_40234a

block_402340:                                     ; preds = %block_402331
  %9771 = load i64, i64* %RBP
  %9772 = sub i64 %9771, 192
  %9773 = load i64, i64* %PC
  %9774 = add i64 %9773, 10
  store i64 %9774, i64* %PC
  %9775 = inttoptr i64 %9772 to i32*
  store i32 0, i32* %9775
  br label %block_40234a

block_4029d0:                                     ; preds = %block_4026c3, %block_4029df
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_4026c3 ], [ %MEMORY.3, %block_4029df ]
  %9776 = load i64, i64* %RBP
  %9777 = sub i64 %9776, 196
  %9778 = load i64, i64* %PC
  %9779 = add i64 %9778, 6
  store i64 %9779, i64* %PC
  %9780 = inttoptr i64 %9777 to i32*
  %9781 = load i32, i32* %9780
  %9782 = zext i32 %9781 to i64
  store i64 %9782, i64* %RAX, align 8, !tbaa !2428
  %9783 = load i32, i32* %EAX
  %9784 = zext i32 %9783 to i64
  %9785 = load i64, i64* %RBP
  %9786 = sub i64 %9785, 48
  %9787 = load i64, i64* %PC
  %9788 = add i64 %9787, 3
  store i64 %9788, i64* %PC
  %9789 = inttoptr i64 %9786 to i32*
  %9790 = load i32, i32* %9789
  %9791 = sub i32 %9783, %9790
  %9792 = icmp ult i32 %9783, %9790
  %9793 = zext i1 %9792 to i8
  %9794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9793, i8* %9794, align 1, !tbaa !2432
  %9795 = and i32 %9791, 255
  %9796 = call i32 @llvm.ctpop.i32(i32 %9795) #16
  %9797 = trunc i32 %9796 to i8
  %9798 = and i8 %9797, 1
  %9799 = xor i8 %9798, 1
  %9800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9799, i8* %9800, align 1, !tbaa !2446
  %9801 = xor i32 %9790, %9783
  %9802 = xor i32 %9801, %9791
  %9803 = lshr i32 %9802, 4
  %9804 = trunc i32 %9803 to i8
  %9805 = and i8 %9804, 1
  %9806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9805, i8* %9806, align 1, !tbaa !2450
  %9807 = icmp eq i32 %9791, 0
  %9808 = zext i1 %9807 to i8
  %9809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9808, i8* %9809, align 1, !tbaa !2447
  %9810 = lshr i32 %9791, 31
  %9811 = trunc i32 %9810 to i8
  %9812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9811, i8* %9812, align 1, !tbaa !2448
  %9813 = lshr i32 %9783, 31
  %9814 = lshr i32 %9790, 31
  %9815 = xor i32 %9814, %9813
  %9816 = xor i32 %9810, %9813
  %9817 = add nuw nsw i32 %9816, %9815
  %9818 = icmp eq i32 %9817, 2
  %9819 = zext i1 %9818 to i8
  %9820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9819, i8* %9820, align 1, !tbaa !2449
  %9821 = load i64, i64* %PC
  %9822 = add i64 %9821, 809
  %9823 = load i64, i64* %PC
  %9824 = add i64 %9823, 6
  %9825 = load i64, i64* %PC
  %9826 = add i64 %9825, 6
  store i64 %9826, i64* %PC
  %9827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9828 = load i8, i8* %9827, align 1, !tbaa !2448
  %9829 = icmp ne i8 %9828, 0
  %9830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9831 = load i8, i8* %9830, align 1, !tbaa !2449
  %9832 = icmp ne i8 %9831, 0
  %9833 = xor i1 %9829, %9832
  %9834 = xor i1 %9833, true
  %9835 = zext i1 %9834 to i8
  store i8 %9835, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9837 = select i1 %9833, i64 %9824, i64 %9822
  store i64 %9837, i64* %9836, align 8, !tbaa !2428
  %9838 = load i8, i8* %BRANCH_TAKEN
  %9839 = icmp eq i8 %9838, 1
  %9840 = load i64, i64* %RBP
  %9841 = sub i64 %9840, 120
  %9842 = load i64, i64* %PC
  %9843 = add i64 %9842, 4
  store i64 %9843, i64* %PC
  %9844 = inttoptr i64 %9841 to i64*
  %9845 = load i64, i64* %9844
  store i64 %9845, i64* %RAX, align 8, !tbaa !2428
  %9846 = load i64, i64* %RBP
  %9847 = sub i64 %9846, 188
  %9848 = load i64, i64* %PC
  %9849 = add i64 %9848, 7
  store i64 %9849, i64* %PC
  %9850 = inttoptr i64 %9847 to i32*
  %9851 = load i32, i32* %9850
  %9852 = sext i32 %9851 to i64
  store i64 %9852, i64* %RCX, align 8, !tbaa !2428
  %9853 = load i64, i64* %RCX
  %9854 = load i64, i64* %PC
  %9855 = add i64 %9854, 7
  store i64 %9855, i64* %PC
  %9856 = sext i64 %9853 to i128
  %9857 = and i128 %9856, -18446744073709551616
  %9858 = zext i64 %9853 to i128
  %9859 = or i128 %9857, %9858
  %9860 = mul nsw i128 33800, %9859
  %9861 = trunc i128 %9860 to i64
  store i64 %9861, i64* %RCX, align 8, !tbaa !2428
  %9862 = sext i64 %9861 to i128
  %9863 = icmp ne i128 %9862, %9860
  %9864 = zext i1 %9863 to i8
  %9865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9864, i8* %9865, align 1, !tbaa !2432
  %9866 = trunc i128 %9860 to i32
  %9867 = and i32 %9866, 255
  %9868 = call i32 @llvm.ctpop.i32(i32 %9867) #16
  %9869 = trunc i32 %9868 to i8
  %9870 = and i8 %9869, 1
  %9871 = xor i8 %9870, 1
  %9872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9871, i8* %9872, align 1, !tbaa !2446
  %9873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9873, align 1, !tbaa !2450
  %9874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9874, align 1, !tbaa !2447
  %9875 = lshr i64 %9861, 63
  %9876 = trunc i64 %9875 to i8
  %9877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9876, i8* %9877, align 1, !tbaa !2448
  %9878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9864, i8* %9878, align 1, !tbaa !2449
  %9879 = load i64, i64* %RAX
  %9880 = load i64, i64* %RCX
  %9881 = load i64, i64* %PC
  %9882 = add i64 %9881, 3
  store i64 %9882, i64* %PC
  %9883 = add i64 %9880, %9879
  store i64 %9883, i64* %RAX, align 8, !tbaa !2428
  %9884 = icmp ult i64 %9883, %9879
  %9885 = icmp ult i64 %9883, %9880
  %9886 = or i1 %9884, %9885
  %9887 = zext i1 %9886 to i8
  %9888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9887, i8* %9888, align 1, !tbaa !2432
  %9889 = trunc i64 %9883 to i32
  %9890 = and i32 %9889, 255
  %9891 = call i32 @llvm.ctpop.i32(i32 %9890) #16
  %9892 = trunc i32 %9891 to i8
  %9893 = and i8 %9892, 1
  %9894 = xor i8 %9893, 1
  %9895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9894, i8* %9895, align 1, !tbaa !2446
  %9896 = xor i64 %9880, %9879
  %9897 = xor i64 %9896, %9883
  %9898 = lshr i64 %9897, 4
  %9899 = trunc i64 %9898 to i8
  %9900 = and i8 %9899, 1
  %9901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9900, i8* %9901, align 1, !tbaa !2450
  %9902 = icmp eq i64 %9883, 0
  %9903 = zext i1 %9902 to i8
  %9904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9903, i8* %9904, align 1, !tbaa !2447
  %9905 = lshr i64 %9883, 63
  %9906 = trunc i64 %9905 to i8
  %9907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9906, i8* %9907, align 1, !tbaa !2448
  %9908 = lshr i64 %9879, 63
  %9909 = lshr i64 %9880, 63
  %9910 = xor i64 %9905, %9908
  %9911 = xor i64 %9905, %9909
  %9912 = add nuw nsw i64 %9910, %9911
  %9913 = icmp eq i64 %9912, 2
  %9914 = zext i1 %9913 to i8
  %9915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9914, i8* %9915, align 1, !tbaa !2449
  %9916 = load i64, i64* %RBP
  %9917 = sub i64 %9916, 52
  %9918 = load i64, i64* %PC
  %9919 = add i64 %9918, 4
  store i64 %9919, i64* %PC
  %9920 = inttoptr i64 %9917 to i32*
  %9921 = load i32, i32* %9920
  %9922 = sext i32 %9921 to i64
  store i64 %9922, i64* %RCX, align 8, !tbaa !2428
  %9923 = load i64, i64* %RCX
  %9924 = load i64, i64* %PC
  %9925 = add i64 %9924, 7
  store i64 %9925, i64* %PC
  %9926 = sext i64 %9923 to i128
  %9927 = and i128 %9926, -18446744073709551616
  %9928 = zext i64 %9923 to i128
  %9929 = or i128 %9927, %9928
  %9930 = mul nsw i128 520, %9929
  %9931 = trunc i128 %9930 to i64
  store i64 %9931, i64* %RCX, align 8, !tbaa !2428
  %9932 = sext i64 %9931 to i128
  %9933 = icmp ne i128 %9932, %9930
  %9934 = zext i1 %9933 to i8
  %9935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9934, i8* %9935, align 1, !tbaa !2432
  %9936 = trunc i128 %9930 to i32
  %9937 = and i32 %9936, 255
  %9938 = call i32 @llvm.ctpop.i32(i32 %9937) #16
  %9939 = trunc i32 %9938 to i8
  %9940 = and i8 %9939, 1
  %9941 = xor i8 %9940, 1
  %9942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9941, i8* %9942, align 1, !tbaa !2446
  %9943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9943, align 1, !tbaa !2450
  %9944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9944, align 1, !tbaa !2447
  %9945 = lshr i64 %9931, 63
  %9946 = trunc i64 %9945 to i8
  %9947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9946, i8* %9947, align 1, !tbaa !2448
  %9948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9934, i8* %9948, align 1, !tbaa !2449
  %9949 = load i64, i64* %RAX
  %9950 = load i64, i64* %RCX
  %9951 = load i64, i64* %PC
  %9952 = add i64 %9951, 3
  store i64 %9952, i64* %PC
  %9953 = add i64 %9950, %9949
  store i64 %9953, i64* %RAX, align 8, !tbaa !2428
  %9954 = icmp ult i64 %9953, %9949
  %9955 = icmp ult i64 %9953, %9950
  %9956 = or i1 %9954, %9955
  %9957 = zext i1 %9956 to i8
  %9958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9957, i8* %9958, align 1, !tbaa !2432
  %9959 = trunc i64 %9953 to i32
  %9960 = and i32 %9959, 255
  %9961 = call i32 @llvm.ctpop.i32(i32 %9960) #16
  %9962 = trunc i32 %9961 to i8
  %9963 = and i8 %9962, 1
  %9964 = xor i8 %9963, 1
  %9965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9964, i8* %9965, align 1, !tbaa !2446
  %9966 = xor i64 %9950, %9949
  %9967 = xor i64 %9966, %9953
  %9968 = lshr i64 %9967, 4
  %9969 = trunc i64 %9968 to i8
  %9970 = and i8 %9969, 1
  %9971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9970, i8* %9971, align 1, !tbaa !2450
  %9972 = icmp eq i64 %9953, 0
  %9973 = zext i1 %9972 to i8
  %9974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9973, i8* %9974, align 1, !tbaa !2447
  %9975 = lshr i64 %9953, 63
  %9976 = trunc i64 %9975 to i8
  %9977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9976, i8* %9977, align 1, !tbaa !2448
  %9978 = lshr i64 %9949, 63
  %9979 = lshr i64 %9950, 63
  %9980 = xor i64 %9975, %9978
  %9981 = xor i64 %9975, %9979
  %9982 = add nuw nsw i64 %9980, %9981
  %9983 = icmp eq i64 %9982, 2
  %9984 = zext i1 %9983 to i8
  %9985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9984, i8* %9985, align 1, !tbaa !2449
  %9986 = load i64, i64* %RBP
  br i1 %9839, label %block_402d02, label %block_4029df
}

; Function Attrs: noinline
define %struct.Memory* @sub_400750_polybench_prepare_instruments(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = sub i64 %22, 132
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 5
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %23, i64* %32, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = call %struct.Memory* @sub_4006d0_polybench_flush_cache(%struct.State* %0, i64 %33, %struct.Memory* %2)
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %44, align 8, !tbaa !2428
  %49 = add i64 %46, 8
  store i64 %49, i64* %45, align 8, !tbaa !2428
  ret %struct.Memory* %34
}

; Function Attrs: noinline
define %struct.Memory* @sub_4014b0_kernel_fdtd_apml(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4014b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 21
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R10 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 23
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R11 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R12 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 27
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R13 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 29
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R14 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 31
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R15 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %R15
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 2
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %82 = load i64, i64* %81, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %78, i64* %84
  store i64 %83, i64* %81, align 8, !tbaa !2428
  %85 = load i64, i64* %R14
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 2
  store i64 %87, i64* %PC
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %85, i64* %91
  store i64 %90, i64* %88, align 8, !tbaa !2428
  %92 = load i64, i64* %R13
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 2
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %R12
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 2
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %RBX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 1
  store i64 %108, i64* %PC
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %110 = load i64, i64* %109, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %106, i64* %112
  store i64 %111, i64* %109, align 8, !tbaa !2428
  %113 = load i64, i64* %RSP
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = sub i64 %113, 56
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  %117 = icmp ult i64 %113, 56
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %118, i8* %119, align 1, !tbaa !2432
  %120 = trunc i64 %116 to i32
  %121 = and i32 %120, 255
  %122 = call i32 @llvm.ctpop.i32(i32 %121) #16
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %125, i8* %126, align 1, !tbaa !2446
  %127 = xor i64 56, %113
  %128 = xor i64 %127, %116
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %131, i8* %132, align 1, !tbaa !2450
  %133 = icmp eq i64 %116, 0
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = lshr i64 %116, 63
  %137 = trunc i64 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %137, i8* %138, align 1, !tbaa !2448
  %139 = lshr i64 %113, 63
  %140 = xor i64 %136, %139
  %141 = add nuw nsw i64 %140, %139
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = load i64, i64* %RBP
  %146 = add i64 %145, 96
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP
  %152 = add i64 %151, 88
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %R10, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = add i64 %157, 80
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %R11, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = add i64 %163, 72
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %RBX, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP
  %170 = add i64 %169, 64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %R14, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = add i64 %175, 56
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %R15, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = add i64 %181, 48
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %R12, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = add i64 %187, 40
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %R13, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 208
  %195 = load i64, i64* %RAX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198
  %199 = load i64, i64* %RBP
  %200 = add i64 %199, 32
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 216
  %207 = load i64, i64* %RAX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210
  %211 = load i64, i64* %RBP
  %212 = add i64 %211, 24
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 224
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %RBP
  %224 = add i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 44
  %231 = load i32, i32* %EDI
  %232 = zext i32 %231 to i64
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %230 to i32*
  store i32 %231, i32* %235
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 48
  %238 = load i32, i32* %ESI
  %239 = zext i32 %238 to i64
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %237 to i32*
  store i32 %238, i32* %242
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 52
  %245 = load i32, i32* %EDX
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %244 to i32*
  store i32 %245, i32* %249
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 64
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = bitcast i8* %252 to double*
  %256 = load double, double* %255, align 1
  %257 = inttoptr i64 %251 to double*
  store double %256, double* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 72
  %260 = bitcast %union.vec128_t* %XMM1 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = bitcast i8* %260 to double*
  %264 = load double, double* %263, align 1
  %265 = inttoptr i64 %259 to double*
  store double %264, double* %265
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 80
  %268 = load i64, i64* %RCX
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %271
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 88
  %274 = load i64, i64* %R8
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 96
  %280 = load i64, i64* %R9
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 104
  %286 = load i64, i64* %RAX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %285 to i64*
  store i64 %286, i64* %289
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 224
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 7
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 112
  %298 = load i64, i64* %RAX
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %297 to i64*
  store i64 %298, i64* %301
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 216
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 7
  store i64 %305, i64* %PC
  %306 = inttoptr i64 %303 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %RCX, align 8, !tbaa !2428
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 120
  %310 = load i64, i64* %RCX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %309 to i64*
  store i64 %310, i64* %313
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 128
  %316 = load i64, i64* %R13
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 4
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %319
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 136
  %322 = load i64, i64* %R12
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 7
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %321 to i64*
  store i64 %322, i64* %325
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 144
  %328 = load i64, i64* %R15
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 7
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %327 to i64*
  store i64 %328, i64* %331
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 152
  %334 = load i64, i64* %R14
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 7
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %333 to i64*
  store i64 %334, i64* %337
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 160
  %340 = load i64, i64* %RBX
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 7
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %339 to i64*
  store i64 %340, i64* %343
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 168
  %346 = load i64, i64* %R11
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 7
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %345 to i64*
  store i64 %346, i64* %349
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 176
  %352 = load i64, i64* %R10
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 7
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %351 to i64*
  store i64 %352, i64* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 208
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 7
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %R8, align 8, !tbaa !2428
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 184
  %364 = load i64, i64* %R8
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 7
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %363 to i64*
  store i64 %364, i64* %367
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 188
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 10
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i32*
  store i32 0, i32* %372
  br label %block_401581

block_40159a:                                     ; preds = %block_401f52, %block_401590
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_401590 ], [ %MEMORY.3, %block_401f52 ]
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 192
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 6
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i32*
  %378 = load i32, i32* %377
  %379 = zext i32 %378 to i64
  store i64 %379, i64* %RAX, align 8, !tbaa !2428
  %380 = load i32, i32* %EAX
  %381 = zext i32 %380 to i64
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 52
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i32*
  %387 = load i32, i32* %386
  %388 = sub i32 %380, %387
  %389 = icmp ult i32 %380, %387
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %390, i8* %391, align 1, !tbaa !2432
  %392 = and i32 %388, 255
  %393 = call i32 @llvm.ctpop.i32(i32 %392) #16
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %396, i8* %397, align 1, !tbaa !2446
  %398 = xor i32 %387, %380
  %399 = xor i32 %398, %388
  %400 = lshr i32 %399, 4
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %402, i8* %403, align 1, !tbaa !2450
  %404 = icmp eq i32 %388, 0
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = lshr i32 %388, 31
  %408 = trunc i32 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = lshr i32 %380, 31
  %411 = lshr i32 %387, 31
  %412 = xor i32 %411, %410
  %413 = xor i32 %407, %410
  %414 = add nuw nsw i32 %413, %412
  %415 = icmp eq i32 %414, 2
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %416, i8* %417, align 1, !tbaa !2449
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 3215
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 6
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 6
  store i64 %423, i64* %PC
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %425 = load i8, i8* %424, align 1, !tbaa !2448
  %426 = icmp ne i8 %425, 0
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %428 = load i8, i8* %427, align 1, !tbaa !2449
  %429 = icmp ne i8 %428, 0
  %430 = xor i1 %426, %429
  %431 = xor i1 %430, true
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %434 = select i1 %430, i64 %421, i64 %419
  store i64 %434, i64* %433, align 8, !tbaa !2428
  %435 = load i8, i8* %BRANCH_TAKEN
  %436 = icmp eq i8 %435, 1
  br i1 %436, label %block_402232, label %block_4015a9

block_401913:                                     ; preds = %block_4015b3
  %437 = sub i64 %2837, 48
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %437 to i32*
  %441 = load i32, i32* %440
  %442 = sext i32 %441 to i64
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %444 = load i64, i64* %RAX
  %445 = load i64, i64* %RCX
  %446 = mul i64 %445, 8
  %447 = add i64 %446, %444
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to double*
  %451 = load double, double* %450
  %452 = bitcast i8* %443 to double*
  store double %451, double* %452, align 1, !tbaa !2453
  %453 = getelementptr inbounds i8, i8* %443, i64 8
  %454 = bitcast i8* %453 to double*
  store double 0.000000e+00, double* %454, align 1, !tbaa !2453
  %455 = load i64, i64* %RBP
  %456 = sub i64 %455, 120
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 4
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %456 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %RAX, align 8, !tbaa !2428
  %461 = load i64, i64* %RBP
  %462 = sub i64 %461, 188
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 7
  store i64 %464, i64* %PC
  %465 = inttoptr i64 %462 to i32*
  %466 = load i32, i32* %465
  %467 = sext i32 %466 to i64
  store i64 %467, i64* %RCX, align 8, !tbaa !2428
  %468 = load i64, i64* %RCX
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 7
  store i64 %470, i64* %PC
  %471 = sext i64 %468 to i128
  %472 = and i128 %471, -18446744073709551616
  %473 = zext i64 %468 to i128
  %474 = or i128 %472, %473
  %475 = mul nsw i128 33800, %474
  %476 = trunc i128 %475 to i64
  store i64 %476, i64* %RCX, align 8, !tbaa !2428
  %477 = sext i64 %476 to i128
  %478 = icmp ne i128 %477, %475
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %479, i8* %480, align 1, !tbaa !2432
  %481 = trunc i128 %475 to i32
  %482 = and i32 %481, 255
  %483 = call i32 @llvm.ctpop.i32(i32 %482) #16
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  %486 = xor i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %486, i8* %487, align 1, !tbaa !2446
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %488, align 1, !tbaa !2450
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %489, align 1, !tbaa !2447
  %490 = lshr i64 %476, 63
  %491 = trunc i64 %490 to i8
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %491, i8* %492, align 1, !tbaa !2448
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %479, i8* %493, align 1, !tbaa !2449
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %RCX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = add i64 %495, %494
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = icmp ult i64 %498, %494
  %500 = icmp ult i64 %498, %495
  %501 = or i1 %499, %500
  %502 = zext i1 %501 to i8
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %502, i8* %503, align 1, !tbaa !2432
  %504 = trunc i64 %498 to i32
  %505 = and i32 %504, 255
  %506 = call i32 @llvm.ctpop.i32(i32 %505) #16
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %509, i8* %510, align 1, !tbaa !2446
  %511 = xor i64 %495, %494
  %512 = xor i64 %511, %498
  %513 = lshr i64 %512, 4
  %514 = trunc i64 %513 to i8
  %515 = and i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %515, i8* %516, align 1, !tbaa !2450
  %517 = icmp eq i64 %498, 0
  %518 = zext i1 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %518, i8* %519, align 1, !tbaa !2447
  %520 = lshr i64 %498, 63
  %521 = trunc i64 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %521, i8* %522, align 1, !tbaa !2448
  %523 = lshr i64 %494, 63
  %524 = lshr i64 %495, 63
  %525 = xor i64 %520, %523
  %526 = xor i64 %520, %524
  %527 = add nuw nsw i64 %525, %526
  %528 = icmp eq i64 %527, 2
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %529, i8* %530, align 1, !tbaa !2449
  %531 = load i64, i64* %RBP
  %532 = sub i64 %531, 192
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 6
  store i64 %534, i64* %PC
  %535 = inttoptr i64 %532 to i32*
  %536 = load i32, i32* %535
  %537 = zext i32 %536 to i64
  store i64 %537, i64* %RDX, align 8, !tbaa !2428
  %538 = load i64, i64* %RDX
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC
  %541 = trunc i64 %538 to i32
  %542 = add i32 1, %541
  %543 = zext i32 %542 to i64
  store i64 %543, i64* %RDX, align 8, !tbaa !2428
  %544 = icmp ult i32 %542, %541
  %545 = icmp ult i32 %542, 1
  %546 = or i1 %544, %545
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %547, i8* %548, align 1, !tbaa !2432
  %549 = and i32 %542, 255
  %550 = call i32 @llvm.ctpop.i32(i32 %549) #16
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %553, i8* %554, align 1, !tbaa !2446
  %555 = xor i64 1, %538
  %556 = trunc i64 %555 to i32
  %557 = xor i32 %556, %542
  %558 = lshr i32 %557, 4
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %560, i8* %561, align 1, !tbaa !2450
  %562 = icmp eq i32 %542, 0
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %563, i8* %564, align 1, !tbaa !2447
  %565 = lshr i32 %542, 31
  %566 = trunc i32 %565 to i8
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %566, i8* %567, align 1, !tbaa !2448
  %568 = lshr i32 %541, 31
  %569 = xor i32 %565, %568
  %570 = add nuw nsw i32 %569, %565
  %571 = icmp eq i32 %570, 2
  %572 = zext i1 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %572, i8* %573, align 1, !tbaa !2449
  %574 = load i32, i32* %EDX
  %575 = zext i32 %574 to i64
  %576 = load i64, i64* %PC
  %577 = add i64 %576, 3
  store i64 %577, i64* %PC
  %578 = shl i64 %575, 32
  %579 = ashr exact i64 %578, 32
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = load i64, i64* %RCX
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 7
  store i64 %582, i64* %PC
  %583 = sext i64 %580 to i128
  %584 = and i128 %583, -18446744073709551616
  %585 = zext i64 %580 to i128
  %586 = or i128 %584, %585
  %587 = mul nsw i128 520, %586
  %588 = trunc i128 %587 to i64
  store i64 %588, i64* %RCX, align 8, !tbaa !2428
  %589 = sext i64 %588 to i128
  %590 = icmp ne i128 %589, %587
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %591, i8* %592, align 1, !tbaa !2432
  %593 = trunc i128 %587 to i32
  %594 = and i32 %593, 255
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %598, i8* %599, align 1, !tbaa !2446
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %600, align 1, !tbaa !2450
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %601, align 1, !tbaa !2447
  %602 = lshr i64 %588, 63
  %603 = trunc i64 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %603, i8* %604, align 1, !tbaa !2448
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %591, i8* %605, align 1, !tbaa !2449
  %606 = load i64, i64* %RAX
  %607 = load i64, i64* %RCX
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 3
  store i64 %609, i64* %PC
  %610 = add i64 %607, %606
  store i64 %610, i64* %RAX, align 8, !tbaa !2428
  %611 = icmp ult i64 %610, %606
  %612 = icmp ult i64 %610, %607
  %613 = or i1 %611, %612
  %614 = zext i1 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %614, i8* %615, align 1, !tbaa !2432
  %616 = trunc i64 %610 to i32
  %617 = and i32 %616, 255
  %618 = call i32 @llvm.ctpop.i32(i32 %617) #16
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %621, i8* %622, align 1, !tbaa !2446
  %623 = xor i64 %607, %606
  %624 = xor i64 %623, %610
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %627, i8* %628, align 1, !tbaa !2450
  %629 = icmp eq i64 %610, 0
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %630, i8* %631, align 1, !tbaa !2447
  %632 = lshr i64 %610, 63
  %633 = trunc i64 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %633, i8* %634, align 1, !tbaa !2448
  %635 = lshr i64 %606, 63
  %636 = lshr i64 %607, 63
  %637 = xor i64 %632, %635
  %638 = xor i64 %632, %636
  %639 = add nuw nsw i64 %637, %638
  %640 = icmp eq i64 %639, 2
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %641, i8* %642, align 1, !tbaa !2449
  %643 = load i64, i64* %RBP
  %644 = sub i64 %643, 48
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 4
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i32*
  %648 = load i32, i32* %647
  %649 = sext i32 %648 to i64
  store i64 %649, i64* %RCX, align 8, !tbaa !2428
  %650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %651 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %652 = load i64, i64* %RAX
  %653 = load i64, i64* %RCX
  %654 = mul i64 %653, 8
  %655 = add i64 %654, %652
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 5
  store i64 %657, i64* %PC
  %658 = bitcast i8* %651 to double*
  %659 = load double, double* %658, align 1
  %660 = getelementptr inbounds i8, i8* %651, i64 8
  %661 = bitcast i8* %660 to i64*
  %662 = load i64, i64* %661, align 1
  %663 = inttoptr i64 %655 to double*
  %664 = load double, double* %663
  %665 = fsub double %659, %664
  %666 = bitcast i8* %650 to double*
  store double %665, double* %666, align 1, !tbaa !2453
  %667 = getelementptr inbounds i8, i8* %650, i64 8
  %668 = bitcast i8* %667 to i64*
  store i64 %662, i64* %668, align 1, !tbaa !2453
  %669 = load i64, i64* %RBP
  %670 = sub i64 %669, 88
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 4
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %670 to i64*
  %674 = load i64, i64* %673
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = load i64, i64* %RBP
  %676 = sub i64 %675, 188
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 7
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %676 to i32*
  %680 = load i32, i32* %679
  %681 = sext i32 %680 to i64
  store i64 %681, i64* %RCX, align 8, !tbaa !2428
  %682 = load i64, i64* %RCX
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 7
  store i64 %684, i64* %PC
  %685 = sext i64 %682 to i128
  %686 = and i128 %685, -18446744073709551616
  %687 = zext i64 %682 to i128
  %688 = or i128 %686, %687
  %689 = mul nsw i128 520, %688
  %690 = trunc i128 %689 to i64
  store i64 %690, i64* %RCX, align 8, !tbaa !2428
  %691 = sext i64 %690 to i128
  %692 = icmp ne i128 %691, %689
  %693 = zext i1 %692 to i8
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %693, i8* %694, align 1, !tbaa !2432
  %695 = trunc i128 %689 to i32
  %696 = and i32 %695, 255
  %697 = call i32 @llvm.ctpop.i32(i32 %696) #16
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %700, i8* %701, align 1, !tbaa !2446
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %702, align 1, !tbaa !2450
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %703, align 1, !tbaa !2447
  %704 = lshr i64 %690, 63
  %705 = trunc i64 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %705, i8* %706, align 1, !tbaa !2448
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %693, i8* %707, align 1, !tbaa !2449
  %708 = load i64, i64* %RAX
  %709 = load i64, i64* %RCX
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = add i64 %709, %708
  store i64 %712, i64* %RAX, align 8, !tbaa !2428
  %713 = icmp ult i64 %712, %708
  %714 = icmp ult i64 %712, %709
  %715 = or i1 %713, %714
  %716 = zext i1 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %716, i8* %717, align 1, !tbaa !2432
  %718 = trunc i64 %712 to i32
  %719 = and i32 %718, 255
  %720 = call i32 @llvm.ctpop.i32(i32 %719) #16
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %723, i8* %724, align 1, !tbaa !2446
  %725 = xor i64 %709, %708
  %726 = xor i64 %725, %712
  %727 = lshr i64 %726, 4
  %728 = trunc i64 %727 to i8
  %729 = and i8 %728, 1
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %729, i8* %730, align 1, !tbaa !2450
  %731 = icmp eq i64 %712, 0
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %732, i8* %733, align 1, !tbaa !2447
  %734 = lshr i64 %712, 63
  %735 = trunc i64 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %735, i8* %736, align 1, !tbaa !2448
  %737 = lshr i64 %708, 63
  %738 = lshr i64 %709, 63
  %739 = xor i64 %734, %737
  %740 = xor i64 %734, %738
  %741 = add nuw nsw i64 %739, %740
  %742 = icmp eq i64 %741, 2
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %743, i8* %744, align 1, !tbaa !2449
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 192
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 7
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i32*
  %750 = load i32, i32* %749
  %751 = sext i32 %750 to i64
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %752 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %753 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %754 = load i64, i64* %RAX
  %755 = load i64, i64* %RCX
  %756 = mul i64 %755, 8
  %757 = add i64 %756, %754
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  store i64 %759, i64* %PC
  %760 = bitcast i8* %753 to double*
  %761 = load double, double* %760, align 1
  %762 = getelementptr inbounds i8, i8* %753, i64 8
  %763 = bitcast i8* %762 to i64*
  %764 = load i64, i64* %763, align 1
  %765 = inttoptr i64 %757 to double*
  %766 = load double, double* %765
  %767 = fadd double %761, %766
  %768 = bitcast i8* %752 to double*
  store double %767, double* %768, align 1, !tbaa !2453
  %769 = getelementptr inbounds i8, i8* %752, i64 8
  %770 = bitcast i8* %769 to i64*
  store i64 %764, i64* %770, align 1, !tbaa !2453
  %771 = load i64, i64* %RBP
  %772 = sub i64 %771, 128
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 4
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %772 to i64*
  %776 = load i64, i64* %775
  store i64 %776, i64* %RAX, align 8, !tbaa !2428
  %777 = load i64, i64* %RBP
  %778 = sub i64 %777, 188
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 7
  store i64 %780, i64* %PC
  %781 = inttoptr i64 %778 to i32*
  %782 = load i32, i32* %781
  %783 = sext i32 %782 to i64
  store i64 %783, i64* %RCX, align 8, !tbaa !2428
  %784 = load i64, i64* %RCX
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 7
  store i64 %786, i64* %PC
  %787 = sext i64 %784 to i128
  %788 = and i128 %787, -18446744073709551616
  %789 = zext i64 %784 to i128
  %790 = or i128 %788, %789
  %791 = mul nsw i128 33800, %790
  %792 = trunc i128 %791 to i64
  store i64 %792, i64* %RCX, align 8, !tbaa !2428
  %793 = sext i64 %792 to i128
  %794 = icmp ne i128 %793, %791
  %795 = zext i1 %794 to i8
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %795, i8* %796, align 1, !tbaa !2432
  %797 = trunc i128 %791 to i32
  %798 = and i32 %797, 255
  %799 = call i32 @llvm.ctpop.i32(i32 %798) #16
  %800 = trunc i32 %799 to i8
  %801 = and i8 %800, 1
  %802 = xor i8 %801, 1
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %802, i8* %803, align 1, !tbaa !2446
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %804, align 1, !tbaa !2450
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %805, align 1, !tbaa !2447
  %806 = lshr i64 %792, 63
  %807 = trunc i64 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %807, i8* %808, align 1, !tbaa !2448
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %795, i8* %809, align 1, !tbaa !2449
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %RCX
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 3
  store i64 %813, i64* %PC
  %814 = add i64 %811, %810
  store i64 %814, i64* %RAX, align 8, !tbaa !2428
  %815 = icmp ult i64 %814, %810
  %816 = icmp ult i64 %814, %811
  %817 = or i1 %815, %816
  %818 = zext i1 %817 to i8
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %818, i8* %819, align 1, !tbaa !2432
  %820 = trunc i64 %814 to i32
  %821 = and i32 %820, 255
  %822 = call i32 @llvm.ctpop.i32(i32 %821) #16
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = xor i8 %824, 1
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %825, i8* %826, align 1, !tbaa !2446
  %827 = xor i64 %811, %810
  %828 = xor i64 %827, %814
  %829 = lshr i64 %828, 4
  %830 = trunc i64 %829 to i8
  %831 = and i8 %830, 1
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %831, i8* %832, align 1, !tbaa !2450
  %833 = icmp eq i64 %814, 0
  %834 = zext i1 %833 to i8
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %834, i8* %835, align 1, !tbaa !2447
  %836 = lshr i64 %814, 63
  %837 = trunc i64 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %837, i8* %838, align 1, !tbaa !2448
  %839 = lshr i64 %810, 63
  %840 = lshr i64 %811, 63
  %841 = xor i64 %836, %839
  %842 = xor i64 %836, %840
  %843 = add nuw nsw i64 %841, %842
  %844 = icmp eq i64 %843, 2
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %845, i8* %846, align 1, !tbaa !2449
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 192
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 7
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i32*
  %852 = load i32, i32* %851
  %853 = sext i32 %852 to i64
  store i64 %853, i64* %RCX, align 8, !tbaa !2428
  %854 = load i64, i64* %RCX
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 7
  store i64 %856, i64* %PC
  %857 = sext i64 %854 to i128
  %858 = and i128 %857, -18446744073709551616
  %859 = zext i64 %854 to i128
  %860 = or i128 %858, %859
  %861 = mul nsw i128 520, %860
  %862 = trunc i128 %861 to i64
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = sext i64 %862 to i128
  %864 = icmp ne i128 %863, %861
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %865, i8* %866, align 1, !tbaa !2432
  %867 = trunc i128 %861 to i32
  %868 = and i32 %867, 255
  %869 = call i32 @llvm.ctpop.i32(i32 %868) #16
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %872, i8* %873, align 1, !tbaa !2446
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %874, align 1, !tbaa !2450
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %875, align 1, !tbaa !2447
  %876 = lshr i64 %862, 63
  %877 = trunc i64 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %877, i8* %878, align 1, !tbaa !2448
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %865, i8* %879, align 1, !tbaa !2449
  %880 = load i64, i64* %RAX
  %881 = load i64, i64* %RCX
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 3
  store i64 %883, i64* %PC
  %884 = add i64 %881, %880
  store i64 %884, i64* %RAX, align 8, !tbaa !2428
  %885 = icmp ult i64 %884, %880
  %886 = icmp ult i64 %884, %881
  %887 = or i1 %885, %886
  %888 = zext i1 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %888, i8* %889, align 1, !tbaa !2432
  %890 = trunc i64 %884 to i32
  %891 = and i32 %890, 255
  %892 = call i32 @llvm.ctpop.i32(i32 %891) #16
  %893 = trunc i32 %892 to i8
  %894 = and i8 %893, 1
  %895 = xor i8 %894, 1
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %895, i8* %896, align 1, !tbaa !2446
  %897 = xor i64 %881, %880
  %898 = xor i64 %897, %884
  %899 = lshr i64 %898, 4
  %900 = trunc i64 %899 to i8
  %901 = and i8 %900, 1
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %901, i8* %902, align 1, !tbaa !2450
  %903 = icmp eq i64 %884, 0
  %904 = zext i1 %903 to i8
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %904, i8* %905, align 1, !tbaa !2447
  %906 = lshr i64 %884, 63
  %907 = trunc i64 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %907, i8* %908, align 1, !tbaa !2448
  %909 = lshr i64 %880, 63
  %910 = lshr i64 %881, 63
  %911 = xor i64 %906, %909
  %912 = xor i64 %906, %910
  %913 = add nuw nsw i64 %911, %912
  %914 = icmp eq i64 %913, 2
  %915 = zext i1 %914 to i8
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %915, i8* %916, align 1, !tbaa !2449
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 48
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %918 to i32*
  %922 = load i32, i32* %921
  %923 = sext i32 %922 to i64
  store i64 %923, i64* %RCX, align 8, !tbaa !2428
  %924 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %925 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %926 = load i64, i64* %RAX
  %927 = load i64, i64* %RCX
  %928 = mul i64 %927, 8
  %929 = add i64 %928, %926
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 5
  store i64 %931, i64* %PC
  %932 = bitcast i8* %925 to double*
  %933 = load double, double* %932, align 1
  %934 = getelementptr inbounds i8, i8* %925, i64 8
  %935 = bitcast i8* %934 to i64*
  %936 = load i64, i64* %935, align 1
  %937 = inttoptr i64 %929 to double*
  %938 = load double, double* %937
  %939 = fsub double %933, %938
  %940 = bitcast i8* %924 to double*
  store double %939, double* %940, align 1, !tbaa !2453
  %941 = getelementptr inbounds i8, i8* %924, i64 8
  %942 = bitcast i8* %941 to i64*
  store i64 %936, i64* %942, align 1, !tbaa !2453
  %943 = load i64, i64* %RBP
  %944 = sub i64 %943, 96
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 4
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to i64*
  %948 = load i64, i64* %947
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i64, i64* %RBP
  %950 = sub i64 %949, 188
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 7
  store i64 %952, i64* %PC
  %953 = inttoptr i64 %950 to i32*
  %954 = load i32, i32* %953
  %955 = sext i32 %954 to i64
  store i64 %955, i64* %RCX, align 8, !tbaa !2428
  %956 = load i64, i64* %RCX
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 7
  store i64 %958, i64* %PC
  %959 = sext i64 %956 to i128
  %960 = and i128 %959, -18446744073709551616
  %961 = zext i64 %956 to i128
  %962 = or i128 %960, %961
  %963 = mul nsw i128 520, %962
  %964 = trunc i128 %963 to i64
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %965 = sext i64 %964 to i128
  %966 = icmp ne i128 %965, %963
  %967 = zext i1 %966 to i8
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %967, i8* %968, align 1, !tbaa !2432
  %969 = trunc i128 %963 to i32
  %970 = and i32 %969, 255
  %971 = call i32 @llvm.ctpop.i32(i32 %970) #16
  %972 = trunc i32 %971 to i8
  %973 = and i8 %972, 1
  %974 = xor i8 %973, 1
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %974, i8* %975, align 1, !tbaa !2446
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %976, align 1, !tbaa !2450
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %977, align 1, !tbaa !2447
  %978 = lshr i64 %964, 63
  %979 = trunc i64 %978 to i8
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %979, i8* %980, align 1, !tbaa !2448
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %967, i8* %981, align 1, !tbaa !2449
  %982 = load i64, i64* %RAX
  %983 = load i64, i64* %RCX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 3
  store i64 %985, i64* %PC
  %986 = add i64 %983, %982
  store i64 %986, i64* %RAX, align 8, !tbaa !2428
  %987 = icmp ult i64 %986, %982
  %988 = icmp ult i64 %986, %983
  %989 = or i1 %987, %988
  %990 = zext i1 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %990, i8* %991, align 1, !tbaa !2432
  %992 = trunc i64 %986 to i32
  %993 = and i32 %992, 255
  %994 = call i32 @llvm.ctpop.i32(i32 %993) #16
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = xor i8 %996, 1
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %997, i8* %998, align 1, !tbaa !2446
  %999 = xor i64 %983, %982
  %1000 = xor i64 %999, %986
  %1001 = lshr i64 %1000, 4
  %1002 = trunc i64 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1003, i8* %1004, align 1, !tbaa !2450
  %1005 = icmp eq i64 %986, 0
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1006, i8* %1007, align 1, !tbaa !2447
  %1008 = lshr i64 %986, 63
  %1009 = trunc i64 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1009, i8* %1010, align 1, !tbaa !2448
  %1011 = lshr i64 %982, 63
  %1012 = lshr i64 %983, 63
  %1013 = xor i64 %1008, %1011
  %1014 = xor i64 %1008, %1012
  %1015 = add nuw nsw i64 %1013, %1014
  %1016 = icmp eq i64 %1015, 2
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1017, i8* %1018, align 1, !tbaa !2449
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 192
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 7
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023
  %1025 = sext i32 %1024 to i64
  store i64 %1025, i64* %RCX, align 8, !tbaa !2428
  %1026 = load i64, i64* %RAX
  %1027 = load i64, i64* %RCX
  %1028 = mul i64 %1027, 8
  %1029 = add i64 %1028, %1026
  %1030 = bitcast %union.vec128_t* %XMM0 to i8*
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = bitcast i8* %1030 to double*
  %1034 = load double, double* %1033, align 1
  %1035 = inttoptr i64 %1029 to double*
  store double %1034, double* %1035
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 176
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 7
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i64*
  %1041 = load i64, i64* %1040
  store i64 %1041, i64* %RAX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RBP
  %1043 = sub i64 %1042, 192
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 7
  store i64 %1045, i64* %PC
  %1046 = inttoptr i64 %1043 to i32*
  %1047 = load i32, i32* %1046
  %1048 = sext i32 %1047 to i64
  store i64 %1048, i64* %RCX, align 8, !tbaa !2428
  %1049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1050 = load i64, i64* %RAX
  %1051 = load i64, i64* %RCX
  %1052 = mul i64 %1051, 8
  %1053 = add i64 %1052, %1050
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 5
  store i64 %1055, i64* %PC
  %1056 = inttoptr i64 %1053 to double*
  %1057 = load double, double* %1056
  %1058 = bitcast i8* %1049 to double*
  store double %1057, double* %1058, align 1, !tbaa !2453
  %1059 = getelementptr inbounds i8, i8* %1049, i64 8
  %1060 = bitcast i8* %1059 to double*
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2453
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 184
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 7
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i64*
  %1066 = load i64, i64* %1065
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = load i64, i64* %RBP
  %1068 = sub i64 %1067, 192
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 7
  store i64 %1070, i64* %PC
  %1071 = inttoptr i64 %1068 to i32*
  %1072 = load i32, i32* %1071
  %1073 = sext i32 %1072 to i64
  store i64 %1073, i64* %RCX, align 8, !tbaa !2428
  %1074 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1075 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1076 = load i64, i64* %RAX
  %1077 = load i64, i64* %RCX
  %1078 = mul i64 %1077, 8
  %1079 = add i64 %1078, %1076
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 5
  store i64 %1081, i64* %PC
  %1082 = bitcast i8* %1075 to double*
  %1083 = load double, double* %1082, align 1
  %1084 = getelementptr inbounds i8, i8* %1075, i64 8
  %1085 = bitcast i8* %1084 to i64*
  %1086 = load i64, i64* %1085, align 1
  %1087 = inttoptr i64 %1079 to double*
  %1088 = load double, double* %1087
  %1089 = fdiv double %1083, %1088
  %1090 = bitcast i8* %1074 to double*
  store double %1089, double* %1090, align 1, !tbaa !2453
  %1091 = getelementptr inbounds i8, i8* %1074, i64 8
  %1092 = bitcast i8* %1091 to i64*
  store i64 %1086, i64* %1092, align 1, !tbaa !2453
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 112
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RBP
  %1100 = sub i64 %1099, 188
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 7
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1100 to i32*
  %1104 = load i32, i32* %1103
  %1105 = sext i32 %1104 to i64
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RCX
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 7
  store i64 %1108, i64* %PC
  %1109 = sext i64 %1106 to i128
  %1110 = and i128 %1109, -18446744073709551616
  %1111 = zext i64 %1106 to i128
  %1112 = or i128 %1110, %1111
  %1113 = mul nsw i128 33800, %1112
  %1114 = trunc i128 %1113 to i64
  store i64 %1114, i64* %RCX, align 8, !tbaa !2428
  %1115 = sext i64 %1114 to i128
  %1116 = icmp ne i128 %1115, %1113
  %1117 = zext i1 %1116 to i8
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1117, i8* %1118, align 1, !tbaa !2432
  %1119 = trunc i128 %1113 to i32
  %1120 = and i32 %1119, 255
  %1121 = call i32 @llvm.ctpop.i32(i32 %1120) #16
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  %1124 = xor i8 %1123, 1
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1124, i8* %1125, align 1, !tbaa !2446
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1126, align 1, !tbaa !2450
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1127, align 1, !tbaa !2447
  %1128 = lshr i64 %1114, 63
  %1129 = trunc i64 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1129, i8* %1130, align 1, !tbaa !2448
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1117, i8* %1131, align 1, !tbaa !2449
  %1132 = load i64, i64* %RAX
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 3
  store i64 %1135, i64* %PC
  %1136 = add i64 %1133, %1132
  store i64 %1136, i64* %RAX, align 8, !tbaa !2428
  %1137 = icmp ult i64 %1136, %1132
  %1138 = icmp ult i64 %1136, %1133
  %1139 = or i1 %1137, %1138
  %1140 = zext i1 %1139 to i8
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1140, i8* %1141, align 1, !tbaa !2432
  %1142 = trunc i64 %1136 to i32
  %1143 = and i32 %1142, 255
  %1144 = call i32 @llvm.ctpop.i32(i32 %1143) #16
  %1145 = trunc i32 %1144 to i8
  %1146 = and i8 %1145, 1
  %1147 = xor i8 %1146, 1
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1147, i8* %1148, align 1, !tbaa !2446
  %1149 = xor i64 %1133, %1132
  %1150 = xor i64 %1149, %1136
  %1151 = lshr i64 %1150, 4
  %1152 = trunc i64 %1151 to i8
  %1153 = and i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1153, i8* %1154, align 1, !tbaa !2450
  %1155 = icmp eq i64 %1136, 0
  %1156 = zext i1 %1155 to i8
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1156, i8* %1157, align 1, !tbaa !2447
  %1158 = lshr i64 %1136, 63
  %1159 = trunc i64 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1159, i8* %1160, align 1, !tbaa !2448
  %1161 = lshr i64 %1132, 63
  %1162 = lshr i64 %1133, 63
  %1163 = xor i64 %1158, %1161
  %1164 = xor i64 %1158, %1162
  %1165 = add nuw nsw i64 %1163, %1164
  %1166 = icmp eq i64 %1165, 2
  %1167 = zext i1 %1166 to i8
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = load i64, i64* %RBP
  %1170 = sub i64 %1169, 192
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 7
  store i64 %1172, i64* %PC
  %1173 = inttoptr i64 %1170 to i32*
  %1174 = load i32, i32* %1173
  %1175 = sext i32 %1174 to i64
  store i64 %1175, i64* %RCX, align 8, !tbaa !2428
  %1176 = load i64, i64* %RCX
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 7
  store i64 %1178, i64* %PC
  %1179 = sext i64 %1176 to i128
  %1180 = and i128 %1179, -18446744073709551616
  %1181 = zext i64 %1176 to i128
  %1182 = or i128 %1180, %1181
  %1183 = mul nsw i128 520, %1182
  %1184 = trunc i128 %1183 to i64
  store i64 %1184, i64* %RCX, align 8, !tbaa !2428
  %1185 = sext i64 %1184 to i128
  %1186 = icmp ne i128 %1185, %1183
  %1187 = zext i1 %1186 to i8
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1187, i8* %1188, align 1, !tbaa !2432
  %1189 = trunc i128 %1183 to i32
  %1190 = and i32 %1189, 255
  %1191 = call i32 @llvm.ctpop.i32(i32 %1190) #16
  %1192 = trunc i32 %1191 to i8
  %1193 = and i8 %1192, 1
  %1194 = xor i8 %1193, 1
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1194, i8* %1195, align 1, !tbaa !2446
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1196, align 1, !tbaa !2450
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1197, align 1, !tbaa !2447
  %1198 = lshr i64 %1184, 63
  %1199 = trunc i64 %1198 to i8
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1199, i8* %1200, align 1, !tbaa !2448
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1187, i8* %1201, align 1, !tbaa !2449
  %1202 = load i64, i64* %RAX
  %1203 = load i64, i64* %RCX
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 3
  store i64 %1205, i64* %PC
  %1206 = add i64 %1203, %1202
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %1207 = icmp ult i64 %1206, %1202
  %1208 = icmp ult i64 %1206, %1203
  %1209 = or i1 %1207, %1208
  %1210 = zext i1 %1209 to i8
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1210, i8* %1211, align 1, !tbaa !2432
  %1212 = trunc i64 %1206 to i32
  %1213 = and i32 %1212, 255
  %1214 = call i32 @llvm.ctpop.i32(i32 %1213) #16
  %1215 = trunc i32 %1214 to i8
  %1216 = and i8 %1215, 1
  %1217 = xor i8 %1216, 1
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1217, i8* %1218, align 1, !tbaa !2446
  %1219 = xor i64 %1203, %1202
  %1220 = xor i64 %1219, %1206
  %1221 = lshr i64 %1220, 4
  %1222 = trunc i64 %1221 to i8
  %1223 = and i8 %1222, 1
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1223, i8* %1224, align 1, !tbaa !2450
  %1225 = icmp eq i64 %1206, 0
  %1226 = zext i1 %1225 to i8
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1226, i8* %1227, align 1, !tbaa !2447
  %1228 = lshr i64 %1206, 63
  %1229 = trunc i64 %1228 to i8
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1229, i8* %1230, align 1, !tbaa !2448
  %1231 = lshr i64 %1202, 63
  %1232 = lshr i64 %1203, 63
  %1233 = xor i64 %1228, %1231
  %1234 = xor i64 %1228, %1232
  %1235 = add nuw nsw i64 %1233, %1234
  %1236 = icmp eq i64 %1235, 2
  %1237 = zext i1 %1236 to i8
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1237, i8* %1238, align 1, !tbaa !2449
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 48
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 4
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to i32*
  %1244 = load i32, i32* %1243
  %1245 = sext i32 %1244 to i64
  store i64 %1245, i64* %RCX, align 8, !tbaa !2428
  %1246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1247 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1248 = load i64, i64* %RAX
  %1249 = load i64, i64* %RCX
  %1250 = mul i64 %1249, 8
  %1251 = add i64 %1250, %1248
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 5
  store i64 %1253, i64* %PC
  %1254 = bitcast i8* %1247 to double*
  %1255 = load double, double* %1254, align 1
  %1256 = getelementptr inbounds i8, i8* %1247, i64 8
  %1257 = bitcast i8* %1256 to i64*
  %1258 = load i64, i64* %1257, align 1
  %1259 = inttoptr i64 %1251 to double*
  %1260 = load double, double* %1259
  %1261 = fmul double %1255, %1260
  %1262 = bitcast i8* %1246 to double*
  store double %1261, double* %1262, align 1, !tbaa !2453
  %1263 = getelementptr inbounds i8, i8* %1246, i64 8
  %1264 = bitcast i8* %1263 to i64*
  store i64 %1258, i64* %1264, align 1, !tbaa !2453
  %1265 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 72
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to double*
  %1271 = load double, double* %1270
  %1272 = bitcast i8* %1265 to double*
  store double %1271, double* %1272, align 1, !tbaa !2453
  %1273 = getelementptr inbounds i8, i8* %1265, i64 8
  %1274 = bitcast i8* %1273 to double*
  store double 0.000000e+00, double* %1274, align 1, !tbaa !2453
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 184
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 7
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1276 to i64*
  %1280 = load i64, i64* %1279
  store i64 %1280, i64* %RAX, align 8, !tbaa !2428
  %1281 = load i64, i64* %RBP
  %1282 = sub i64 %1281, 192
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 7
  store i64 %1284, i64* %PC
  %1285 = inttoptr i64 %1282 to i32*
  %1286 = load i32, i32* %1285
  %1287 = sext i32 %1286 to i64
  store i64 %1287, i64* %RCX, align 8, !tbaa !2428
  %1288 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1289 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1290 = load i64, i64* %RAX
  %1291 = load i64, i64* %RCX
  %1292 = mul i64 %1291, 8
  %1293 = add i64 %1292, %1290
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 5
  store i64 %1295, i64* %PC
  %1296 = bitcast i8* %1289 to double*
  %1297 = load double, double* %1296, align 1
  %1298 = getelementptr inbounds i8, i8* %1289, i64 8
  %1299 = bitcast i8* %1298 to i64*
  %1300 = load i64, i64* %1299, align 1
  %1301 = inttoptr i64 %1293 to double*
  %1302 = load double, double* %1301
  %1303 = fdiv double %1297, %1302
  %1304 = bitcast i8* %1288 to double*
  store double %1303, double* %1304, align 1, !tbaa !2453
  %1305 = getelementptr inbounds i8, i8* %1288, i64 8
  %1306 = bitcast i8* %1305 to i64*
  store i64 %1300, i64* %1306, align 1, !tbaa !2453
  %1307 = load i64, i64* %RBP
  %1308 = sub i64 %1307, 96
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 4
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1308 to i64*
  %1312 = load i64, i64* %1311
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = load i64, i64* %RBP
  %1314 = sub i64 %1313, 188
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 7
  store i64 %1316, i64* %PC
  %1317 = inttoptr i64 %1314 to i32*
  %1318 = load i32, i32* %1317
  %1319 = sext i32 %1318 to i64
  store i64 %1319, i64* %RCX, align 8, !tbaa !2428
  %1320 = load i64, i64* %RCX
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 7
  store i64 %1322, i64* %PC
  %1323 = sext i64 %1320 to i128
  %1324 = and i128 %1323, -18446744073709551616
  %1325 = zext i64 %1320 to i128
  %1326 = or i128 %1324, %1325
  %1327 = mul nsw i128 520, %1326
  %1328 = trunc i128 %1327 to i64
  store i64 %1328, i64* %RCX, align 8, !tbaa !2428
  %1329 = sext i64 %1328 to i128
  %1330 = icmp ne i128 %1329, %1327
  %1331 = zext i1 %1330 to i8
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1331, i8* %1332, align 1, !tbaa !2432
  %1333 = trunc i128 %1327 to i32
  %1334 = and i32 %1333, 255
  %1335 = call i32 @llvm.ctpop.i32(i32 %1334) #16
  %1336 = trunc i32 %1335 to i8
  %1337 = and i8 %1336, 1
  %1338 = xor i8 %1337, 1
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1338, i8* %1339, align 1, !tbaa !2446
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1340, align 1, !tbaa !2450
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1341, align 1, !tbaa !2447
  %1342 = lshr i64 %1328, 63
  %1343 = trunc i64 %1342 to i8
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1343, i8* %1344, align 1, !tbaa !2448
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1331, i8* %1345, align 1, !tbaa !2449
  %1346 = load i64, i64* %RAX
  %1347 = load i64, i64* %RCX
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = add i64 %1347, %1346
  store i64 %1350, i64* %RAX, align 8, !tbaa !2428
  %1351 = icmp ult i64 %1350, %1346
  %1352 = icmp ult i64 %1350, %1347
  %1353 = or i1 %1351, %1352
  %1354 = zext i1 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1354, i8* %1355, align 1, !tbaa !2432
  %1356 = trunc i64 %1350 to i32
  %1357 = and i32 %1356, 255
  %1358 = call i32 @llvm.ctpop.i32(i32 %1357) #16
  %1359 = trunc i32 %1358 to i8
  %1360 = and i8 %1359, 1
  %1361 = xor i8 %1360, 1
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1361, i8* %1362, align 1, !tbaa !2446
  %1363 = xor i64 %1347, %1346
  %1364 = xor i64 %1363, %1350
  %1365 = lshr i64 %1364, 4
  %1366 = trunc i64 %1365 to i8
  %1367 = and i8 %1366, 1
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1367, i8* %1368, align 1, !tbaa !2450
  %1369 = icmp eq i64 %1350, 0
  %1370 = zext i1 %1369 to i8
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1370, i8* %1371, align 1, !tbaa !2447
  %1372 = lshr i64 %1350, 63
  %1373 = trunc i64 %1372 to i8
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1373, i8* %1374, align 1, !tbaa !2448
  %1375 = lshr i64 %1346, 63
  %1376 = lshr i64 %1347, 63
  %1377 = xor i64 %1372, %1375
  %1378 = xor i64 %1372, %1376
  %1379 = add nuw nsw i64 %1377, %1378
  %1380 = icmp eq i64 %1379, 2
  %1381 = zext i1 %1380 to i8
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1381, i8* %1382, align 1, !tbaa !2449
  %1383 = load i64, i64* %RBP
  %1384 = sub i64 %1383, 192
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 7
  store i64 %1386, i64* %PC
  %1387 = inttoptr i64 %1384 to i32*
  %1388 = load i32, i32* %1387
  %1389 = sext i32 %1388 to i64
  store i64 %1389, i64* %RCX, align 8, !tbaa !2428
  %1390 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1391 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1392 = load i64, i64* %RAX
  %1393 = load i64, i64* %RCX
  %1394 = mul i64 %1393, 8
  %1395 = add i64 %1394, %1392
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 5
  store i64 %1397, i64* %PC
  %1398 = bitcast i8* %1391 to double*
  %1399 = load double, double* %1398, align 1
  %1400 = getelementptr inbounds i8, i8* %1391, i64 8
  %1401 = bitcast i8* %1400 to i64*
  %1402 = load i64, i64* %1401, align 1
  %1403 = inttoptr i64 %1395 to double*
  %1404 = load double, double* %1403
  %1405 = fmul double %1399, %1404
  %1406 = bitcast i8* %1390 to double*
  store double %1405, double* %1406, align 1, !tbaa !2453
  %1407 = getelementptr inbounds i8, i8* %1390, i64 8
  %1408 = bitcast i8* %1407 to i64*
  store i64 %1402, i64* %1408, align 1, !tbaa !2453
  %1409 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1410 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1411 = bitcast %union.vec128_t* %XMM1 to i8*
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = bitcast i8* %1410 to double*
  %1415 = load double, double* %1414, align 1
  %1416 = getelementptr inbounds i8, i8* %1410, i64 8
  %1417 = bitcast i8* %1416 to i64*
  %1418 = load i64, i64* %1417, align 1
  %1419 = bitcast i8* %1411 to double*
  %1420 = load double, double* %1419, align 1
  %1421 = fsub double %1415, %1420
  %1422 = bitcast i8* %1409 to double*
  store double %1421, double* %1422, align 1, !tbaa !2453
  %1423 = getelementptr inbounds i8, i8* %1409, i64 8
  %1424 = bitcast i8* %1423 to i64*
  store i64 %1418, i64* %1424, align 1, !tbaa !2453
  %1425 = load i64, i64* %RBP
  %1426 = sub i64 %1425, 104
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 4
  store i64 %1428, i64* %PC
  %1429 = inttoptr i64 %1426 to i64*
  %1430 = load i64, i64* %1429
  store i64 %1430, i64* %RAX, align 8, !tbaa !2428
  %1431 = load i64, i64* %RBP
  %1432 = sub i64 %1431, 188
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 7
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1432 to i32*
  %1436 = load i32, i32* %1435
  %1437 = sext i32 %1436 to i64
  store i64 %1437, i64* %RCX, align 8, !tbaa !2428
  %1438 = load i64, i64* %RCX
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 7
  store i64 %1440, i64* %PC
  %1441 = sext i64 %1438 to i128
  %1442 = and i128 %1441, -18446744073709551616
  %1443 = zext i64 %1438 to i128
  %1444 = or i128 %1442, %1443
  %1445 = mul nsw i128 520, %1444
  %1446 = trunc i128 %1445 to i64
  store i64 %1446, i64* %RCX, align 8, !tbaa !2428
  %1447 = sext i64 %1446 to i128
  %1448 = icmp ne i128 %1447, %1445
  %1449 = zext i1 %1448 to i8
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1449, i8* %1450, align 1, !tbaa !2432
  %1451 = trunc i128 %1445 to i32
  %1452 = and i32 %1451, 255
  %1453 = call i32 @llvm.ctpop.i32(i32 %1452) #16
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1456, i8* %1457, align 1, !tbaa !2446
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1458, align 1, !tbaa !2450
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1459, align 1, !tbaa !2447
  %1460 = lshr i64 %1446, 63
  %1461 = trunc i64 %1460 to i8
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1461, i8* %1462, align 1, !tbaa !2448
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1449, i8* %1463, align 1, !tbaa !2449
  %1464 = load i64, i64* %RAX
  %1465 = load i64, i64* %RCX
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 3
  store i64 %1467, i64* %PC
  %1468 = add i64 %1465, %1464
  store i64 %1468, i64* %RAX, align 8, !tbaa !2428
  %1469 = icmp ult i64 %1468, %1464
  %1470 = icmp ult i64 %1468, %1465
  %1471 = or i1 %1469, %1470
  %1472 = zext i1 %1471 to i8
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1472, i8* %1473, align 1, !tbaa !2432
  %1474 = trunc i64 %1468 to i32
  %1475 = and i32 %1474, 255
  %1476 = call i32 @llvm.ctpop.i32(i32 %1475) #16
  %1477 = trunc i32 %1476 to i8
  %1478 = and i8 %1477, 1
  %1479 = xor i8 %1478, 1
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1479, i8* %1480, align 1, !tbaa !2446
  %1481 = xor i64 %1465, %1464
  %1482 = xor i64 %1481, %1468
  %1483 = lshr i64 %1482, 4
  %1484 = trunc i64 %1483 to i8
  %1485 = and i8 %1484, 1
  %1486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1485, i8* %1486, align 1, !tbaa !2450
  %1487 = icmp eq i64 %1468, 0
  %1488 = zext i1 %1487 to i8
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1488, i8* %1489, align 1, !tbaa !2447
  %1490 = lshr i64 %1468, 63
  %1491 = trunc i64 %1490 to i8
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1491, i8* %1492, align 1, !tbaa !2448
  %1493 = lshr i64 %1464, 63
  %1494 = lshr i64 %1465, 63
  %1495 = xor i64 %1490, %1493
  %1496 = xor i64 %1490, %1494
  %1497 = add nuw nsw i64 %1495, %1496
  %1498 = icmp eq i64 %1497, 2
  %1499 = zext i1 %1498 to i8
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1499, i8* %1500, align 1, !tbaa !2449
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 192
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 7
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to i32*
  %1506 = load i32, i32* %1505
  %1507 = sext i32 %1506 to i64
  store i64 %1507, i64* %RCX, align 8, !tbaa !2428
  %1508 = load i64, i64* %RAX
  %1509 = load i64, i64* %RCX
  %1510 = mul i64 %1509, 8
  %1511 = add i64 %1510, %1508
  %1512 = bitcast %union.vec128_t* %XMM0 to i8*
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 5
  store i64 %1514, i64* %PC
  %1515 = bitcast i8* %1512 to double*
  %1516 = load double, double* %1515, align 1
  %1517 = inttoptr i64 %1511 to double*
  store double %1516, double* %1517
  %1518 = load i64, i64* %RBP
  %1519 = sub i64 %1518, 160
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 7
  store i64 %1521, i64* %PC
  %1522 = inttoptr i64 %1519 to i64*
  %1523 = load i64, i64* %1522
  store i64 %1523, i64* %RAX, align 8, !tbaa !2428
  %1524 = load i64, i64* %RBP
  %1525 = sub i64 %1524, 48
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 4
  store i64 %1527, i64* %PC
  %1528 = inttoptr i64 %1525 to i32*
  %1529 = load i32, i32* %1528
  %1530 = sext i32 %1529 to i64
  store i64 %1530, i64* %RCX, align 8, !tbaa !2428
  %1531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1532 = load i64, i64* %RAX
  %1533 = load i64, i64* %RCX
  %1534 = mul i64 %1533, 8
  %1535 = add i64 %1534, %1532
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 5
  store i64 %1537, i64* %PC
  %1538 = inttoptr i64 %1535 to double*
  %1539 = load double, double* %1538
  %1540 = bitcast i8* %1531 to double*
  store double %1539, double* %1540, align 1, !tbaa !2453
  %1541 = getelementptr inbounds i8, i8* %1531, i64 8
  %1542 = bitcast i8* %1541 to double*
  store double 0.000000e+00, double* %1542, align 1, !tbaa !2453
  %1543 = load i64, i64* %RBP
  %1544 = sub i64 %1543, 168
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 7
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1544 to i64*
  %1548 = load i64, i64* %1547
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = load i64, i64* %RBP
  %1550 = sub i64 %1549, 48
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 4
  store i64 %1552, i64* %PC
  %1553 = inttoptr i64 %1550 to i32*
  %1554 = load i32, i32* %1553
  %1555 = sext i32 %1554 to i64
  store i64 %1555, i64* %RCX, align 8, !tbaa !2428
  %1556 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1557 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1558 = load i64, i64* %RAX
  %1559 = load i64, i64* %RCX
  %1560 = mul i64 %1559, 8
  %1561 = add i64 %1560, %1558
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 5
  store i64 %1563, i64* %PC
  %1564 = bitcast i8* %1557 to double*
  %1565 = load double, double* %1564, align 1
  %1566 = getelementptr inbounds i8, i8* %1557, i64 8
  %1567 = bitcast i8* %1566 to i64*
  %1568 = load i64, i64* %1567, align 1
  %1569 = inttoptr i64 %1561 to double*
  %1570 = load double, double* %1569
  %1571 = fdiv double %1565, %1570
  %1572 = bitcast i8* %1556 to double*
  store double %1571, double* %1572, align 1, !tbaa !2453
  %1573 = getelementptr inbounds i8, i8* %1556, i64 8
  %1574 = bitcast i8* %1573 to i64*
  store i64 %1568, i64* %1574, align 1, !tbaa !2453
  %1575 = load i64, i64* %RBP
  %1576 = sub i64 %1575, 136
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 7
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i64*
  %1580 = load i64, i64* %1579
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 188
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 7
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = sext i32 %1586 to i64
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RCX
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 7
  store i64 %1590, i64* %PC
  %1591 = sext i64 %1588 to i128
  %1592 = and i128 %1591, -18446744073709551616
  %1593 = zext i64 %1588 to i128
  %1594 = or i128 %1592, %1593
  %1595 = mul nsw i128 33800, %1594
  %1596 = trunc i128 %1595 to i64
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = sext i64 %1596 to i128
  %1598 = icmp ne i128 %1597, %1595
  %1599 = zext i1 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1599, i8* %1600, align 1, !tbaa !2432
  %1601 = trunc i128 %1595 to i32
  %1602 = and i32 %1601, 255
  %1603 = call i32 @llvm.ctpop.i32(i32 %1602) #16
  %1604 = trunc i32 %1603 to i8
  %1605 = and i8 %1604, 1
  %1606 = xor i8 %1605, 1
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1606, i8* %1607, align 1, !tbaa !2446
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1608, align 1, !tbaa !2450
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1609, align 1, !tbaa !2447
  %1610 = lshr i64 %1596, 63
  %1611 = trunc i64 %1610 to i8
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1611, i8* %1612, align 1, !tbaa !2448
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1599, i8* %1613, align 1, !tbaa !2449
  %1614 = load i64, i64* %RAX
  %1615 = load i64, i64* %RCX
  %1616 = load i64, i64* %PC
  %1617 = add i64 %1616, 3
  store i64 %1617, i64* %PC
  %1618 = add i64 %1615, %1614
  store i64 %1618, i64* %RAX, align 8, !tbaa !2428
  %1619 = icmp ult i64 %1618, %1614
  %1620 = icmp ult i64 %1618, %1615
  %1621 = or i1 %1619, %1620
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1622, i8* %1623, align 1, !tbaa !2432
  %1624 = trunc i64 %1618 to i32
  %1625 = and i32 %1624, 255
  %1626 = call i32 @llvm.ctpop.i32(i32 %1625) #16
  %1627 = trunc i32 %1626 to i8
  %1628 = and i8 %1627, 1
  %1629 = xor i8 %1628, 1
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1629, i8* %1630, align 1, !tbaa !2446
  %1631 = xor i64 %1615, %1614
  %1632 = xor i64 %1631, %1618
  %1633 = lshr i64 %1632, 4
  %1634 = trunc i64 %1633 to i8
  %1635 = and i8 %1634, 1
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1635, i8* %1636, align 1, !tbaa !2450
  %1637 = icmp eq i64 %1618, 0
  %1638 = zext i1 %1637 to i8
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1638, i8* %1639, align 1, !tbaa !2447
  %1640 = lshr i64 %1618, 63
  %1641 = trunc i64 %1640 to i8
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1641, i8* %1642, align 1, !tbaa !2448
  %1643 = lshr i64 %1614, 63
  %1644 = lshr i64 %1615, 63
  %1645 = xor i64 %1640, %1643
  %1646 = xor i64 %1640, %1644
  %1647 = add nuw nsw i64 %1645, %1646
  %1648 = icmp eq i64 %1647, 2
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1649, i8* %1650, align 1, !tbaa !2449
  %1651 = load i64, i64* %RBP
  %1652 = sub i64 %1651, 192
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 7
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1652 to i32*
  %1656 = load i32, i32* %1655
  %1657 = sext i32 %1656 to i64
  store i64 %1657, i64* %RCX, align 8, !tbaa !2428
  %1658 = load i64, i64* %RCX
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 7
  store i64 %1660, i64* %PC
  %1661 = sext i64 %1658 to i128
  %1662 = and i128 %1661, -18446744073709551616
  %1663 = zext i64 %1658 to i128
  %1664 = or i128 %1662, %1663
  %1665 = mul nsw i128 520, %1664
  %1666 = trunc i128 %1665 to i64
  store i64 %1666, i64* %RCX, align 8, !tbaa !2428
  %1667 = sext i64 %1666 to i128
  %1668 = icmp ne i128 %1667, %1665
  %1669 = zext i1 %1668 to i8
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1669, i8* %1670, align 1, !tbaa !2432
  %1671 = trunc i128 %1665 to i32
  %1672 = and i32 %1671, 255
  %1673 = call i32 @llvm.ctpop.i32(i32 %1672) #16
  %1674 = trunc i32 %1673 to i8
  %1675 = and i8 %1674, 1
  %1676 = xor i8 %1675, 1
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1676, i8* %1677, align 1, !tbaa !2446
  %1678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1678, align 1, !tbaa !2450
  %1679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1679, align 1, !tbaa !2447
  %1680 = lshr i64 %1666, 63
  %1681 = trunc i64 %1680 to i8
  %1682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1681, i8* %1682, align 1, !tbaa !2448
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1669, i8* %1683, align 1, !tbaa !2449
  %1684 = load i64, i64* %RAX
  %1685 = load i64, i64* %RCX
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 3
  store i64 %1687, i64* %PC
  %1688 = add i64 %1685, %1684
  store i64 %1688, i64* %RAX, align 8, !tbaa !2428
  %1689 = icmp ult i64 %1688, %1684
  %1690 = icmp ult i64 %1688, %1685
  %1691 = or i1 %1689, %1690
  %1692 = zext i1 %1691 to i8
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1692, i8* %1693, align 1, !tbaa !2432
  %1694 = trunc i64 %1688 to i32
  %1695 = and i32 %1694, 255
  %1696 = call i32 @llvm.ctpop.i32(i32 %1695) #16
  %1697 = trunc i32 %1696 to i8
  %1698 = and i8 %1697, 1
  %1699 = xor i8 %1698, 1
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1699, i8* %1700, align 1, !tbaa !2446
  %1701 = xor i64 %1685, %1684
  %1702 = xor i64 %1701, %1688
  %1703 = lshr i64 %1702, 4
  %1704 = trunc i64 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1705, i8* %1706, align 1, !tbaa !2450
  %1707 = icmp eq i64 %1688, 0
  %1708 = zext i1 %1707 to i8
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1708, i8* %1709, align 1, !tbaa !2447
  %1710 = lshr i64 %1688, 63
  %1711 = trunc i64 %1710 to i8
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1711, i8* %1712, align 1, !tbaa !2448
  %1713 = lshr i64 %1684, 63
  %1714 = lshr i64 %1685, 63
  %1715 = xor i64 %1710, %1713
  %1716 = xor i64 %1710, %1714
  %1717 = add nuw nsw i64 %1715, %1716
  %1718 = icmp eq i64 %1717, 2
  %1719 = zext i1 %1718 to i8
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1719, i8* %1720, align 1, !tbaa !2449
  %1721 = load i64, i64* %RBP
  %1722 = sub i64 %1721, 48
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 4
  store i64 %1724, i64* %PC
  %1725 = inttoptr i64 %1722 to i32*
  %1726 = load i32, i32* %1725
  %1727 = sext i32 %1726 to i64
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1730 = load i64, i64* %RAX
  %1731 = load i64, i64* %RCX
  %1732 = mul i64 %1731, 8
  %1733 = add i64 %1732, %1730
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 5
  store i64 %1735, i64* %PC
  %1736 = bitcast i8* %1729 to double*
  %1737 = load double, double* %1736, align 1
  %1738 = getelementptr inbounds i8, i8* %1729, i64 8
  %1739 = bitcast i8* %1738 to i64*
  %1740 = load i64, i64* %1739, align 1
  %1741 = inttoptr i64 %1733 to double*
  %1742 = load double, double* %1741
  %1743 = fmul double %1737, %1742
  %1744 = bitcast i8* %1728 to double*
  store double %1743, double* %1744, align 1, !tbaa !2453
  %1745 = getelementptr inbounds i8, i8* %1728, i64 8
  %1746 = bitcast i8* %1745 to i64*
  store i64 %1740, i64* %1746, align 1, !tbaa !2453
  %1747 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1748 = load i64, i64* %RBP
  %1749 = sub i64 %1748, 64
  %1750 = load i64, i64* %PC
  %1751 = add i64 %1750, 5
  store i64 %1751, i64* %PC
  %1752 = inttoptr i64 %1749 to double*
  %1753 = load double, double* %1752
  %1754 = bitcast i8* %1747 to double*
  store double %1753, double* %1754, align 1, !tbaa !2453
  %1755 = getelementptr inbounds i8, i8* %1747, i64 8
  %1756 = bitcast i8* %1755 to double*
  store double 0.000000e+00, double* %1756, align 1, !tbaa !2453
  %1757 = load i64, i64* %RBP
  %1758 = sub i64 %1757, 152
  %1759 = load i64, i64* %PC
  %1760 = add i64 %1759, 7
  store i64 %1760, i64* %PC
  %1761 = inttoptr i64 %1758 to i64*
  %1762 = load i64, i64* %1761
  store i64 %1762, i64* %RAX, align 8, !tbaa !2428
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 188
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 7
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i32*
  %1768 = load i32, i32* %1767
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RCX, align 8, !tbaa !2428
  %1770 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1771 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1772 = load i64, i64* %RAX
  %1773 = load i64, i64* %RCX
  %1774 = mul i64 %1773, 8
  %1775 = add i64 %1774, %1772
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 5
  store i64 %1777, i64* %PC
  %1778 = bitcast i8* %1771 to double*
  %1779 = load double, double* %1778, align 1
  %1780 = getelementptr inbounds i8, i8* %1771, i64 8
  %1781 = bitcast i8* %1780 to i64*
  %1782 = load i64, i64* %1781, align 1
  %1783 = inttoptr i64 %1775 to double*
  %1784 = load double, double* %1783
  %1785 = fmul double %1779, %1784
  %1786 = bitcast i8* %1770 to double*
  store double %1785, double* %1786, align 1, !tbaa !2453
  %1787 = getelementptr inbounds i8, i8* %1770, i64 8
  %1788 = bitcast i8* %1787 to i64*
  store i64 %1782, i64* %1788, align 1, !tbaa !2453
  %1789 = load i64, i64* %RBP
  %1790 = sub i64 %1789, 168
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 7
  store i64 %1792, i64* %PC
  %1793 = inttoptr i64 %1790 to i64*
  %1794 = load i64, i64* %1793
  store i64 %1794, i64* %RAX, align 8, !tbaa !2428
  %1795 = load i64, i64* %RBP
  %1796 = sub i64 %1795, 48
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 4
  store i64 %1798, i64* %PC
  %1799 = inttoptr i64 %1796 to i32*
  %1800 = load i32, i32* %1799
  %1801 = sext i32 %1800 to i64
  store i64 %1801, i64* %RCX, align 8, !tbaa !2428
  %1802 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1803 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1804 = load i64, i64* %RAX
  %1805 = load i64, i64* %RCX
  %1806 = mul i64 %1805, 8
  %1807 = add i64 %1806, %1804
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 5
  store i64 %1809, i64* %PC
  %1810 = bitcast i8* %1803 to double*
  %1811 = load double, double* %1810, align 1
  %1812 = getelementptr inbounds i8, i8* %1803, i64 8
  %1813 = bitcast i8* %1812 to i64*
  %1814 = load i64, i64* %1813, align 1
  %1815 = inttoptr i64 %1807 to double*
  %1816 = load double, double* %1815
  %1817 = fdiv double %1811, %1816
  %1818 = bitcast i8* %1802 to double*
  store double %1817, double* %1818, align 1, !tbaa !2453
  %1819 = getelementptr inbounds i8, i8* %1802, i64 8
  %1820 = bitcast i8* %1819 to i64*
  store i64 %1814, i64* %1820, align 1, !tbaa !2453
  %1821 = load i64, i64* %RBP
  %1822 = sub i64 %1821, 104
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 4
  store i64 %1824, i64* %PC
  %1825 = inttoptr i64 %1822 to i64*
  %1826 = load i64, i64* %1825
  store i64 %1826, i64* %RAX, align 8, !tbaa !2428
  %1827 = load i64, i64* %RBP
  %1828 = sub i64 %1827, 188
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 7
  store i64 %1830, i64* %PC
  %1831 = inttoptr i64 %1828 to i32*
  %1832 = load i32, i32* %1831
  %1833 = sext i32 %1832 to i64
  store i64 %1833, i64* %RCX, align 8, !tbaa !2428
  %1834 = load i64, i64* %RCX
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 7
  store i64 %1836, i64* %PC
  %1837 = sext i64 %1834 to i128
  %1838 = and i128 %1837, -18446744073709551616
  %1839 = zext i64 %1834 to i128
  %1840 = or i128 %1838, %1839
  %1841 = mul nsw i128 520, %1840
  %1842 = trunc i128 %1841 to i64
  store i64 %1842, i64* %RCX, align 8, !tbaa !2428
  %1843 = sext i64 %1842 to i128
  %1844 = icmp ne i128 %1843, %1841
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1845, i8* %1846, align 1, !tbaa !2432
  %1847 = trunc i128 %1841 to i32
  %1848 = and i32 %1847, 255
  %1849 = call i32 @llvm.ctpop.i32(i32 %1848) #16
  %1850 = trunc i32 %1849 to i8
  %1851 = and i8 %1850, 1
  %1852 = xor i8 %1851, 1
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1852, i8* %1853, align 1, !tbaa !2446
  %1854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1854, align 1, !tbaa !2450
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1855, align 1, !tbaa !2447
  %1856 = lshr i64 %1842, 63
  %1857 = trunc i64 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1857, i8* %1858, align 1, !tbaa !2448
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1845, i8* %1859, align 1, !tbaa !2449
  %1860 = load i64, i64* %RAX
  %1861 = load i64, i64* %RCX
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 3
  store i64 %1863, i64* %PC
  %1864 = add i64 %1861, %1860
  store i64 %1864, i64* %RAX, align 8, !tbaa !2428
  %1865 = icmp ult i64 %1864, %1860
  %1866 = icmp ult i64 %1864, %1861
  %1867 = or i1 %1865, %1866
  %1868 = zext i1 %1867 to i8
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1868, i8* %1869, align 1, !tbaa !2432
  %1870 = trunc i64 %1864 to i32
  %1871 = and i32 %1870, 255
  %1872 = call i32 @llvm.ctpop.i32(i32 %1871) #16
  %1873 = trunc i32 %1872 to i8
  %1874 = and i8 %1873, 1
  %1875 = xor i8 %1874, 1
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1875, i8* %1876, align 1, !tbaa !2446
  %1877 = xor i64 %1861, %1860
  %1878 = xor i64 %1877, %1864
  %1879 = lshr i64 %1878, 4
  %1880 = trunc i64 %1879 to i8
  %1881 = and i8 %1880, 1
  %1882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1881, i8* %1882, align 1, !tbaa !2450
  %1883 = icmp eq i64 %1864, 0
  %1884 = zext i1 %1883 to i8
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1884, i8* %1885, align 1, !tbaa !2447
  %1886 = lshr i64 %1864, 63
  %1887 = trunc i64 %1886 to i8
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1887, i8* %1888, align 1, !tbaa !2448
  %1889 = lshr i64 %1860, 63
  %1890 = lshr i64 %1861, 63
  %1891 = xor i64 %1886, %1889
  %1892 = xor i64 %1886, %1890
  %1893 = add nuw nsw i64 %1891, %1892
  %1894 = icmp eq i64 %1893, 2
  %1895 = zext i1 %1894 to i8
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1895, i8* %1896, align 1, !tbaa !2449
  %1897 = load i64, i64* %RBP
  %1898 = sub i64 %1897, 192
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 7
  store i64 %1900, i64* %PC
  %1901 = inttoptr i64 %1898 to i32*
  %1902 = load i32, i32* %1901
  %1903 = sext i32 %1902 to i64
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1904 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1905 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1906 = load i64, i64* %RAX
  %1907 = load i64, i64* %RCX
  %1908 = mul i64 %1907, 8
  %1909 = add i64 %1908, %1906
  %1910 = load i64, i64* %PC
  %1911 = add i64 %1910, 5
  store i64 %1911, i64* %PC
  %1912 = bitcast i8* %1905 to double*
  %1913 = load double, double* %1912, align 1
  %1914 = getelementptr inbounds i8, i8* %1905, i64 8
  %1915 = bitcast i8* %1914 to i64*
  %1916 = load i64, i64* %1915, align 1
  %1917 = inttoptr i64 %1909 to double*
  %1918 = load double, double* %1917
  %1919 = fmul double %1913, %1918
  %1920 = bitcast i8* %1904 to double*
  store double %1919, double* %1920, align 1, !tbaa !2453
  %1921 = getelementptr inbounds i8, i8* %1904, i64 8
  %1922 = bitcast i8* %1921 to i64*
  store i64 %1916, i64* %1922, align 1, !tbaa !2453
  %1923 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1924 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1925 = bitcast %union.vec128_t* %XMM1 to i8*
  %1926 = load i64, i64* %PC
  %1927 = add i64 %1926, 4
  store i64 %1927, i64* %PC
  %1928 = bitcast i8* %1924 to double*
  %1929 = load double, double* %1928, align 1
  %1930 = getelementptr inbounds i8, i8* %1924, i64 8
  %1931 = bitcast i8* %1930 to i64*
  %1932 = load i64, i64* %1931, align 1
  %1933 = bitcast i8* %1925 to double*
  %1934 = load double, double* %1933, align 1
  %1935 = fadd double %1929, %1934
  %1936 = bitcast i8* %1923 to double*
  store double %1935, double* %1936, align 1, !tbaa !2453
  %1937 = getelementptr inbounds i8, i8* %1923, i64 8
  %1938 = bitcast i8* %1937 to i64*
  store i64 %1932, i64* %1938, align 1, !tbaa !2453
  %1939 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1940 = load i64, i64* %RBP
  %1941 = sub i64 %1940, 64
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 5
  store i64 %1943, i64* %PC
  %1944 = inttoptr i64 %1941 to double*
  %1945 = load double, double* %1944
  %1946 = bitcast i8* %1939 to double*
  store double %1945, double* %1946, align 1, !tbaa !2453
  %1947 = getelementptr inbounds i8, i8* %1939, i64 8
  %1948 = bitcast i8* %1947 to double*
  store double 0.000000e+00, double* %1948, align 1, !tbaa !2453
  %1949 = load i64, i64* %RBP
  %1950 = sub i64 %1949, 144
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 7
  store i64 %1952, i64* %PC
  %1953 = inttoptr i64 %1950 to i64*
  %1954 = load i64, i64* %1953
  store i64 %1954, i64* %RAX, align 8, !tbaa !2428
  %1955 = load i64, i64* %RBP
  %1956 = sub i64 %1955, 188
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 7
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1956 to i32*
  %1960 = load i32, i32* %1959
  %1961 = sext i32 %1960 to i64
  store i64 %1961, i64* %RCX, align 8, !tbaa !2428
  %1962 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1963 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1964 = load i64, i64* %RAX
  %1965 = load i64, i64* %RCX
  %1966 = mul i64 %1965, 8
  %1967 = add i64 %1966, %1964
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = bitcast i8* %1963 to double*
  %1971 = load double, double* %1970, align 1
  %1972 = getelementptr inbounds i8, i8* %1963, i64 8
  %1973 = bitcast i8* %1972 to i64*
  %1974 = load i64, i64* %1973, align 1
  %1975 = inttoptr i64 %1967 to double*
  %1976 = load double, double* %1975
  %1977 = fmul double %1971, %1976
  %1978 = bitcast i8* %1962 to double*
  store double %1977, double* %1978, align 1, !tbaa !2453
  %1979 = getelementptr inbounds i8, i8* %1962, i64 8
  %1980 = bitcast i8* %1979 to i64*
  store i64 %1974, i64* %1980, align 1, !tbaa !2453
  %1981 = load i64, i64* %RBP
  %1982 = sub i64 %1981, 168
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 7
  store i64 %1984, i64* %PC
  %1985 = inttoptr i64 %1982 to i64*
  %1986 = load i64, i64* %1985
  store i64 %1986, i64* %RAX, align 8, !tbaa !2428
  %1987 = load i64, i64* %RBP
  %1988 = sub i64 %1987, 48
  %1989 = load i64, i64* %PC
  %1990 = add i64 %1989, 4
  store i64 %1990, i64* %PC
  %1991 = inttoptr i64 %1988 to i32*
  %1992 = load i32, i32* %1991
  %1993 = sext i32 %1992 to i64
  store i64 %1993, i64* %RCX, align 8, !tbaa !2428
  %1994 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1995 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1996 = load i64, i64* %RAX
  %1997 = load i64, i64* %RCX
  %1998 = mul i64 %1997, 8
  %1999 = add i64 %1998, %1996
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 5
  store i64 %2001, i64* %PC
  %2002 = bitcast i8* %1995 to double*
  %2003 = load double, double* %2002, align 1
  %2004 = getelementptr inbounds i8, i8* %1995, i64 8
  %2005 = bitcast i8* %2004 to i64*
  %2006 = load i64, i64* %2005, align 1
  %2007 = inttoptr i64 %1999 to double*
  %2008 = load double, double* %2007
  %2009 = fdiv double %2003, %2008
  %2010 = bitcast i8* %1994 to double*
  store double %2009, double* %2010, align 1, !tbaa !2453
  %2011 = getelementptr inbounds i8, i8* %1994, i64 8
  %2012 = bitcast i8* %2011 to i64*
  store i64 %2006, i64* %2012, align 1, !tbaa !2453
  %2013 = load i64, i64* %RBP
  %2014 = sub i64 %2013, 112
  %2015 = load i64, i64* %PC
  %2016 = add i64 %2015, 4
  store i64 %2016, i64* %PC
  %2017 = inttoptr i64 %2014 to i64*
  %2018 = load i64, i64* %2017
  store i64 %2018, i64* %RAX, align 8, !tbaa !2428
  %2019 = load i64, i64* %RBP
  %2020 = sub i64 %2019, 188
  %2021 = load i64, i64* %PC
  %2022 = add i64 %2021, 7
  store i64 %2022, i64* %PC
  %2023 = inttoptr i64 %2020 to i32*
  %2024 = load i32, i32* %2023
  %2025 = sext i32 %2024 to i64
  store i64 %2025, i64* %RCX, align 8, !tbaa !2428
  %2026 = load i64, i64* %RCX
  %2027 = load i64, i64* %PC
  %2028 = add i64 %2027, 7
  store i64 %2028, i64* %PC
  %2029 = sext i64 %2026 to i128
  %2030 = and i128 %2029, -18446744073709551616
  %2031 = zext i64 %2026 to i128
  %2032 = or i128 %2030, %2031
  %2033 = mul nsw i128 33800, %2032
  %2034 = trunc i128 %2033 to i64
  store i64 %2034, i64* %RCX, align 8, !tbaa !2428
  %2035 = sext i64 %2034 to i128
  %2036 = icmp ne i128 %2035, %2033
  %2037 = zext i1 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2037, i8* %2038, align 1, !tbaa !2432
  %2039 = trunc i128 %2033 to i32
  %2040 = and i32 %2039, 255
  %2041 = call i32 @llvm.ctpop.i32(i32 %2040) #16
  %2042 = trunc i32 %2041 to i8
  %2043 = and i8 %2042, 1
  %2044 = xor i8 %2043, 1
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2044, i8* %2045, align 1, !tbaa !2446
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2046, align 1, !tbaa !2450
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2047, align 1, !tbaa !2447
  %2048 = lshr i64 %2034, 63
  %2049 = trunc i64 %2048 to i8
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2049, i8* %2050, align 1, !tbaa !2448
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2037, i8* %2051, align 1, !tbaa !2449
  %2052 = load i64, i64* %RAX
  %2053 = load i64, i64* %RCX
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 3
  store i64 %2055, i64* %PC
  %2056 = add i64 %2053, %2052
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = icmp ult i64 %2056, %2052
  %2058 = icmp ult i64 %2056, %2053
  %2059 = or i1 %2057, %2058
  %2060 = zext i1 %2059 to i8
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2060, i8* %2061, align 1, !tbaa !2432
  %2062 = trunc i64 %2056 to i32
  %2063 = and i32 %2062, 255
  %2064 = call i32 @llvm.ctpop.i32(i32 %2063) #16
  %2065 = trunc i32 %2064 to i8
  %2066 = and i8 %2065, 1
  %2067 = xor i8 %2066, 1
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2067, i8* %2068, align 1, !tbaa !2446
  %2069 = xor i64 %2053, %2052
  %2070 = xor i64 %2069, %2056
  %2071 = lshr i64 %2070, 4
  %2072 = trunc i64 %2071 to i8
  %2073 = and i8 %2072, 1
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2073, i8* %2074, align 1, !tbaa !2450
  %2075 = icmp eq i64 %2056, 0
  %2076 = zext i1 %2075 to i8
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2076, i8* %2077, align 1, !tbaa !2447
  %2078 = lshr i64 %2056, 63
  %2079 = trunc i64 %2078 to i8
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2079, i8* %2080, align 1, !tbaa !2448
  %2081 = lshr i64 %2052, 63
  %2082 = lshr i64 %2053, 63
  %2083 = xor i64 %2078, %2081
  %2084 = xor i64 %2078, %2082
  %2085 = add nuw nsw i64 %2083, %2084
  %2086 = icmp eq i64 %2085, 2
  %2087 = zext i1 %2086 to i8
  %2088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2087, i8* %2088, align 1, !tbaa !2449
  %2089 = load i64, i64* %RBP
  %2090 = sub i64 %2089, 192
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 7
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i32*
  %2094 = load i32, i32* %2093
  %2095 = sext i32 %2094 to i64
  store i64 %2095, i64* %RCX, align 8, !tbaa !2428
  %2096 = load i64, i64* %RCX
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 7
  store i64 %2098, i64* %PC
  %2099 = sext i64 %2096 to i128
  %2100 = and i128 %2099, -18446744073709551616
  %2101 = zext i64 %2096 to i128
  %2102 = or i128 %2100, %2101
  %2103 = mul nsw i128 520, %2102
  %2104 = trunc i128 %2103 to i64
  store i64 %2104, i64* %RCX, align 8, !tbaa !2428
  %2105 = sext i64 %2104 to i128
  %2106 = icmp ne i128 %2105, %2103
  %2107 = zext i1 %2106 to i8
  %2108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2107, i8* %2108, align 1, !tbaa !2432
  %2109 = trunc i128 %2103 to i32
  %2110 = and i32 %2109, 255
  %2111 = call i32 @llvm.ctpop.i32(i32 %2110) #16
  %2112 = trunc i32 %2111 to i8
  %2113 = and i8 %2112, 1
  %2114 = xor i8 %2113, 1
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2114, i8* %2115, align 1, !tbaa !2446
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2116, align 1, !tbaa !2450
  %2117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2117, align 1, !tbaa !2447
  %2118 = lshr i64 %2104, 63
  %2119 = trunc i64 %2118 to i8
  %2120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2119, i8* %2120, align 1, !tbaa !2448
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2107, i8* %2121, align 1, !tbaa !2449
  %2122 = load i64, i64* %RAX
  %2123 = load i64, i64* %RCX
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 3
  store i64 %2125, i64* %PC
  %2126 = add i64 %2123, %2122
  store i64 %2126, i64* %RAX, align 8, !tbaa !2428
  %2127 = icmp ult i64 %2126, %2122
  %2128 = icmp ult i64 %2126, %2123
  %2129 = or i1 %2127, %2128
  %2130 = zext i1 %2129 to i8
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2130, i8* %2131, align 1, !tbaa !2432
  %2132 = trunc i64 %2126 to i32
  %2133 = and i32 %2132, 255
  %2134 = call i32 @llvm.ctpop.i32(i32 %2133) #16
  %2135 = trunc i32 %2134 to i8
  %2136 = and i8 %2135, 1
  %2137 = xor i8 %2136, 1
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2137, i8* %2138, align 1, !tbaa !2446
  %2139 = xor i64 %2123, %2122
  %2140 = xor i64 %2139, %2126
  %2141 = lshr i64 %2140, 4
  %2142 = trunc i64 %2141 to i8
  %2143 = and i8 %2142, 1
  %2144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2143, i8* %2144, align 1, !tbaa !2450
  %2145 = icmp eq i64 %2126, 0
  %2146 = zext i1 %2145 to i8
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2146, i8* %2147, align 1, !tbaa !2447
  %2148 = lshr i64 %2126, 63
  %2149 = trunc i64 %2148 to i8
  %2150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2149, i8* %2150, align 1, !tbaa !2448
  %2151 = lshr i64 %2122, 63
  %2152 = lshr i64 %2123, 63
  %2153 = xor i64 %2148, %2151
  %2154 = xor i64 %2148, %2152
  %2155 = add nuw nsw i64 %2153, %2154
  %2156 = icmp eq i64 %2155, 2
  %2157 = zext i1 %2156 to i8
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2157, i8* %2158, align 1, !tbaa !2449
  %2159 = load i64, i64* %RBP
  %2160 = sub i64 %2159, 48
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 4
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2160 to i32*
  %2164 = load i32, i32* %2163
  %2165 = sext i32 %2164 to i64
  store i64 %2165, i64* %RCX, align 8, !tbaa !2428
  %2166 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2167 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2168 = load i64, i64* %RAX
  %2169 = load i64, i64* %RCX
  %2170 = mul i64 %2169, 8
  %2171 = add i64 %2170, %2168
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 5
  store i64 %2173, i64* %PC
  %2174 = bitcast i8* %2167 to double*
  %2175 = load double, double* %2174, align 1
  %2176 = getelementptr inbounds i8, i8* %2167, i64 8
  %2177 = bitcast i8* %2176 to i64*
  %2178 = load i64, i64* %2177, align 1
  %2179 = inttoptr i64 %2171 to double*
  %2180 = load double, double* %2179
  %2181 = fmul double %2175, %2180
  %2182 = bitcast i8* %2166 to double*
  store double %2181, double* %2182, align 1, !tbaa !2453
  %2183 = getelementptr inbounds i8, i8* %2166, i64 8
  %2184 = bitcast i8* %2183 to i64*
  store i64 %2178, i64* %2184, align 1, !tbaa !2453
  %2185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2187 = bitcast %union.vec128_t* %XMM1 to i8*
  %2188 = load i64, i64* %PC
  %2189 = add i64 %2188, 4
  store i64 %2189, i64* %PC
  %2190 = bitcast i8* %2186 to double*
  %2191 = load double, double* %2190, align 1
  %2192 = getelementptr inbounds i8, i8* %2186, i64 8
  %2193 = bitcast i8* %2192 to i64*
  %2194 = load i64, i64* %2193, align 1
  %2195 = bitcast i8* %2187 to double*
  %2196 = load double, double* %2195, align 1
  %2197 = fsub double %2191, %2196
  %2198 = bitcast i8* %2185 to double*
  store double %2197, double* %2198, align 1, !tbaa !2453
  %2199 = getelementptr inbounds i8, i8* %2185, i64 8
  %2200 = bitcast i8* %2199 to i64*
  store i64 %2194, i64* %2200, align 1, !tbaa !2453
  %2201 = load i64, i64* %RBP
  %2202 = sub i64 %2201, 136
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 7
  store i64 %2204, i64* %PC
  %2205 = inttoptr i64 %2202 to i64*
  %2206 = load i64, i64* %2205
  store i64 %2206, i64* %RAX, align 8, !tbaa !2428
  %2207 = load i64, i64* %RBP
  %2208 = sub i64 %2207, 188
  %2209 = load i64, i64* %PC
  %2210 = add i64 %2209, 7
  store i64 %2210, i64* %PC
  %2211 = inttoptr i64 %2208 to i32*
  %2212 = load i32, i32* %2211
  %2213 = sext i32 %2212 to i64
  store i64 %2213, i64* %RCX, align 8, !tbaa !2428
  %2214 = load i64, i64* %RCX
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 7
  store i64 %2216, i64* %PC
  %2217 = sext i64 %2214 to i128
  %2218 = and i128 %2217, -18446744073709551616
  %2219 = zext i64 %2214 to i128
  %2220 = or i128 %2218, %2219
  %2221 = mul nsw i128 33800, %2220
  %2222 = trunc i128 %2221 to i64
  store i64 %2222, i64* %RCX, align 8, !tbaa !2428
  %2223 = sext i64 %2222 to i128
  %2224 = icmp ne i128 %2223, %2221
  %2225 = zext i1 %2224 to i8
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2225, i8* %2226, align 1, !tbaa !2432
  %2227 = trunc i128 %2221 to i32
  %2228 = and i32 %2227, 255
  %2229 = call i32 @llvm.ctpop.i32(i32 %2228) #16
  %2230 = trunc i32 %2229 to i8
  %2231 = and i8 %2230, 1
  %2232 = xor i8 %2231, 1
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2232, i8* %2233, align 1, !tbaa !2446
  %2234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2234, align 1, !tbaa !2450
  %2235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2235, align 1, !tbaa !2447
  %2236 = lshr i64 %2222, 63
  %2237 = trunc i64 %2236 to i8
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2237, i8* %2238, align 1, !tbaa !2448
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2225, i8* %2239, align 1, !tbaa !2449
  %2240 = load i64, i64* %RAX
  %2241 = load i64, i64* %RCX
  %2242 = load i64, i64* %PC
  %2243 = add i64 %2242, 3
  store i64 %2243, i64* %PC
  %2244 = add i64 %2241, %2240
  store i64 %2244, i64* %RAX, align 8, !tbaa !2428
  %2245 = icmp ult i64 %2244, %2240
  %2246 = icmp ult i64 %2244, %2241
  %2247 = or i1 %2245, %2246
  %2248 = zext i1 %2247 to i8
  %2249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2248, i8* %2249, align 1, !tbaa !2432
  %2250 = trunc i64 %2244 to i32
  %2251 = and i32 %2250, 255
  %2252 = call i32 @llvm.ctpop.i32(i32 %2251) #16
  %2253 = trunc i32 %2252 to i8
  %2254 = and i8 %2253, 1
  %2255 = xor i8 %2254, 1
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2255, i8* %2256, align 1, !tbaa !2446
  %2257 = xor i64 %2241, %2240
  %2258 = xor i64 %2257, %2244
  %2259 = lshr i64 %2258, 4
  %2260 = trunc i64 %2259 to i8
  %2261 = and i8 %2260, 1
  %2262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2261, i8* %2262, align 1, !tbaa !2450
  %2263 = icmp eq i64 %2244, 0
  %2264 = zext i1 %2263 to i8
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2264, i8* %2265, align 1, !tbaa !2447
  %2266 = lshr i64 %2244, 63
  %2267 = trunc i64 %2266 to i8
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2267, i8* %2268, align 1, !tbaa !2448
  %2269 = lshr i64 %2240, 63
  %2270 = lshr i64 %2241, 63
  %2271 = xor i64 %2266, %2269
  %2272 = xor i64 %2266, %2270
  %2273 = add nuw nsw i64 %2271, %2272
  %2274 = icmp eq i64 %2273, 2
  %2275 = zext i1 %2274 to i8
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2275, i8* %2276, align 1, !tbaa !2449
  %2277 = load i64, i64* %RBP
  %2278 = sub i64 %2277, 192
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 7
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i32*
  %2282 = load i32, i32* %2281
  %2283 = sext i32 %2282 to i64
  store i64 %2283, i64* %RCX, align 8, !tbaa !2428
  %2284 = load i64, i64* %RCX
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 7
  store i64 %2286, i64* %PC
  %2287 = sext i64 %2284 to i128
  %2288 = and i128 %2287, -18446744073709551616
  %2289 = zext i64 %2284 to i128
  %2290 = or i128 %2288, %2289
  %2291 = mul nsw i128 520, %2290
  %2292 = trunc i128 %2291 to i64
  store i64 %2292, i64* %RCX, align 8, !tbaa !2428
  %2293 = sext i64 %2292 to i128
  %2294 = icmp ne i128 %2293, %2291
  %2295 = zext i1 %2294 to i8
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2295, i8* %2296, align 1, !tbaa !2432
  %2297 = trunc i128 %2291 to i32
  %2298 = and i32 %2297, 255
  %2299 = call i32 @llvm.ctpop.i32(i32 %2298) #16
  %2300 = trunc i32 %2299 to i8
  %2301 = and i8 %2300, 1
  %2302 = xor i8 %2301, 1
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2302, i8* %2303, align 1, !tbaa !2446
  %2304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2304, align 1, !tbaa !2450
  %2305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2305, align 1, !tbaa !2447
  %2306 = lshr i64 %2292, 63
  %2307 = trunc i64 %2306 to i8
  %2308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2307, i8* %2308, align 1, !tbaa !2448
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2295, i8* %2309, align 1, !tbaa !2449
  %2310 = load i64, i64* %RAX
  %2311 = load i64, i64* %RCX
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 3
  store i64 %2313, i64* %PC
  %2314 = add i64 %2311, %2310
  store i64 %2314, i64* %RAX, align 8, !tbaa !2428
  %2315 = icmp ult i64 %2314, %2310
  %2316 = icmp ult i64 %2314, %2311
  %2317 = or i1 %2315, %2316
  %2318 = zext i1 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2318, i8* %2319, align 1, !tbaa !2432
  %2320 = trunc i64 %2314 to i32
  %2321 = and i32 %2320, 255
  %2322 = call i32 @llvm.ctpop.i32(i32 %2321) #16
  %2323 = trunc i32 %2322 to i8
  %2324 = and i8 %2323, 1
  %2325 = xor i8 %2324, 1
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2325, i8* %2326, align 1, !tbaa !2446
  %2327 = xor i64 %2311, %2310
  %2328 = xor i64 %2327, %2314
  %2329 = lshr i64 %2328, 4
  %2330 = trunc i64 %2329 to i8
  %2331 = and i8 %2330, 1
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2331, i8* %2332, align 1, !tbaa !2450
  %2333 = icmp eq i64 %2314, 0
  %2334 = zext i1 %2333 to i8
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2334, i8* %2335, align 1, !tbaa !2447
  %2336 = lshr i64 %2314, 63
  %2337 = trunc i64 %2336 to i8
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2337, i8* %2338, align 1, !tbaa !2448
  %2339 = lshr i64 %2310, 63
  %2340 = lshr i64 %2311, 63
  %2341 = xor i64 %2336, %2339
  %2342 = xor i64 %2336, %2340
  %2343 = add nuw nsw i64 %2341, %2342
  %2344 = icmp eq i64 %2343, 2
  %2345 = zext i1 %2344 to i8
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2345, i8* %2346, align 1, !tbaa !2449
  %2347 = load i64, i64* %RBP
  %2348 = sub i64 %2347, 48
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 4
  store i64 %2350, i64* %PC
  %2351 = inttoptr i64 %2348 to i32*
  %2352 = load i32, i32* %2351
  %2353 = sext i32 %2352 to i64
  store i64 %2353, i64* %RCX, align 8, !tbaa !2428
  %2354 = load i64, i64* %RAX
  %2355 = load i64, i64* %RCX
  %2356 = mul i64 %2355, 8
  %2357 = add i64 %2356, %2354
  %2358 = bitcast %union.vec128_t* %XMM0 to i8*
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = bitcast i8* %2358 to double*
  %2362 = load double, double* %2361, align 1
  %2363 = inttoptr i64 %2357 to double*
  store double %2362, double* %2363
  %2364 = load i64, i64* %RBP
  %2365 = sub i64 %2364, 104
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 4
  store i64 %2367, i64* %PC
  %2368 = inttoptr i64 %2365 to i64*
  %2369 = load i64, i64* %2368
  store i64 %2369, i64* %RAX, align 8, !tbaa !2428
  %2370 = load i64, i64* %RBP
  %2371 = sub i64 %2370, 188
  %2372 = load i64, i64* %PC
  %2373 = add i64 %2372, 7
  store i64 %2373, i64* %PC
  %2374 = inttoptr i64 %2371 to i32*
  %2375 = load i32, i32* %2374
  %2376 = sext i32 %2375 to i64
  store i64 %2376, i64* %RCX, align 8, !tbaa !2428
  %2377 = load i64, i64* %RCX
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 7
  store i64 %2379, i64* %PC
  %2380 = sext i64 %2377 to i128
  %2381 = and i128 %2380, -18446744073709551616
  %2382 = zext i64 %2377 to i128
  %2383 = or i128 %2381, %2382
  %2384 = mul nsw i128 520, %2383
  %2385 = trunc i128 %2384 to i64
  store i64 %2385, i64* %RCX, align 8, !tbaa !2428
  %2386 = sext i64 %2385 to i128
  %2387 = icmp ne i128 %2386, %2384
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2388, i8* %2389, align 1, !tbaa !2432
  %2390 = trunc i128 %2384 to i32
  %2391 = and i32 %2390, 255
  %2392 = call i32 @llvm.ctpop.i32(i32 %2391) #16
  %2393 = trunc i32 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = xor i8 %2394, 1
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2395, i8* %2396, align 1, !tbaa !2446
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2397, align 1, !tbaa !2450
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2398, align 1, !tbaa !2447
  %2399 = lshr i64 %2385, 63
  %2400 = trunc i64 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2400, i8* %2401, align 1, !tbaa !2448
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2388, i8* %2402, align 1, !tbaa !2449
  %2403 = load i64, i64* %RAX
  %2404 = load i64, i64* %RCX
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 3
  store i64 %2406, i64* %PC
  %2407 = add i64 %2404, %2403
  store i64 %2407, i64* %RAX, align 8, !tbaa !2428
  %2408 = icmp ult i64 %2407, %2403
  %2409 = icmp ult i64 %2407, %2404
  %2410 = or i1 %2408, %2409
  %2411 = zext i1 %2410 to i8
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2411, i8* %2412, align 1, !tbaa !2432
  %2413 = trunc i64 %2407 to i32
  %2414 = and i32 %2413, 255
  %2415 = call i32 @llvm.ctpop.i32(i32 %2414) #16
  %2416 = trunc i32 %2415 to i8
  %2417 = and i8 %2416, 1
  %2418 = xor i8 %2417, 1
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2418, i8* %2419, align 1, !tbaa !2446
  %2420 = xor i64 %2404, %2403
  %2421 = xor i64 %2420, %2407
  %2422 = lshr i64 %2421, 4
  %2423 = trunc i64 %2422 to i8
  %2424 = and i8 %2423, 1
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2424, i8* %2425, align 1, !tbaa !2450
  %2426 = icmp eq i64 %2407, 0
  %2427 = zext i1 %2426 to i8
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2427, i8* %2428, align 1, !tbaa !2447
  %2429 = lshr i64 %2407, 63
  %2430 = trunc i64 %2429 to i8
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2430, i8* %2431, align 1, !tbaa !2448
  %2432 = lshr i64 %2403, 63
  %2433 = lshr i64 %2404, 63
  %2434 = xor i64 %2429, %2432
  %2435 = xor i64 %2429, %2433
  %2436 = add nuw nsw i64 %2434, %2435
  %2437 = icmp eq i64 %2436, 2
  %2438 = zext i1 %2437 to i8
  %2439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2438, i8* %2439, align 1, !tbaa !2449
  %2440 = load i64, i64* %RBP
  %2441 = sub i64 %2440, 192
  %2442 = load i64, i64* %PC
  %2443 = add i64 %2442, 7
  store i64 %2443, i64* %PC
  %2444 = inttoptr i64 %2441 to i32*
  %2445 = load i32, i32* %2444
  %2446 = sext i32 %2445 to i64
  store i64 %2446, i64* %RCX, align 8, !tbaa !2428
  %2447 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2448 = load i64, i64* %RAX
  %2449 = load i64, i64* %RCX
  %2450 = mul i64 %2449, 8
  %2451 = add i64 %2450, %2448
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 5
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2451 to double*
  %2455 = load double, double* %2454
  %2456 = bitcast i8* %2447 to double*
  store double %2455, double* %2456, align 1, !tbaa !2453
  %2457 = getelementptr inbounds i8, i8* %2447, i64 8
  %2458 = bitcast i8* %2457 to double*
  store double 0.000000e+00, double* %2458, align 1, !tbaa !2453
  %2459 = load i64, i64* %RBP
  %2460 = sub i64 %2459, 112
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 4
  store i64 %2462, i64* %PC
  %2463 = inttoptr i64 %2460 to i64*
  %2464 = load i64, i64* %2463
  store i64 %2464, i64* %RAX, align 8, !tbaa !2428
  %2465 = load i64, i64* %RBP
  %2466 = sub i64 %2465, 188
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 7
  store i64 %2468, i64* %PC
  %2469 = inttoptr i64 %2466 to i32*
  %2470 = load i32, i32* %2469
  %2471 = sext i32 %2470 to i64
  store i64 %2471, i64* %RCX, align 8, !tbaa !2428
  %2472 = load i64, i64* %RCX
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 7
  store i64 %2474, i64* %PC
  %2475 = sext i64 %2472 to i128
  %2476 = and i128 %2475, -18446744073709551616
  %2477 = zext i64 %2472 to i128
  %2478 = or i128 %2476, %2477
  %2479 = mul nsw i128 33800, %2478
  %2480 = trunc i128 %2479 to i64
  store i64 %2480, i64* %RCX, align 8, !tbaa !2428
  %2481 = sext i64 %2480 to i128
  %2482 = icmp ne i128 %2481, %2479
  %2483 = zext i1 %2482 to i8
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2483, i8* %2484, align 1, !tbaa !2432
  %2485 = trunc i128 %2479 to i32
  %2486 = and i32 %2485, 255
  %2487 = call i32 @llvm.ctpop.i32(i32 %2486) #16
  %2488 = trunc i32 %2487 to i8
  %2489 = and i8 %2488, 1
  %2490 = xor i8 %2489, 1
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2490, i8* %2491, align 1, !tbaa !2446
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2492, align 1, !tbaa !2450
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2493, align 1, !tbaa !2447
  %2494 = lshr i64 %2480, 63
  %2495 = trunc i64 %2494 to i8
  %2496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2495, i8* %2496, align 1, !tbaa !2448
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2483, i8* %2497, align 1, !tbaa !2449
  %2498 = load i64, i64* %RAX
  %2499 = load i64, i64* %RCX
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 3
  store i64 %2501, i64* %PC
  %2502 = add i64 %2499, %2498
  store i64 %2502, i64* %RAX, align 8, !tbaa !2428
  %2503 = icmp ult i64 %2502, %2498
  %2504 = icmp ult i64 %2502, %2499
  %2505 = or i1 %2503, %2504
  %2506 = zext i1 %2505 to i8
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2506, i8* %2507, align 1, !tbaa !2432
  %2508 = trunc i64 %2502 to i32
  %2509 = and i32 %2508, 255
  %2510 = call i32 @llvm.ctpop.i32(i32 %2509) #16
  %2511 = trunc i32 %2510 to i8
  %2512 = and i8 %2511, 1
  %2513 = xor i8 %2512, 1
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2513, i8* %2514, align 1, !tbaa !2446
  %2515 = xor i64 %2499, %2498
  %2516 = xor i64 %2515, %2502
  %2517 = lshr i64 %2516, 4
  %2518 = trunc i64 %2517 to i8
  %2519 = and i8 %2518, 1
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2519, i8* %2520, align 1, !tbaa !2450
  %2521 = icmp eq i64 %2502, 0
  %2522 = zext i1 %2521 to i8
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2522, i8* %2523, align 1, !tbaa !2447
  %2524 = lshr i64 %2502, 63
  %2525 = trunc i64 %2524 to i8
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2525, i8* %2526, align 1, !tbaa !2448
  %2527 = lshr i64 %2498, 63
  %2528 = lshr i64 %2499, 63
  %2529 = xor i64 %2524, %2527
  %2530 = xor i64 %2524, %2528
  %2531 = add nuw nsw i64 %2529, %2530
  %2532 = icmp eq i64 %2531, 2
  %2533 = zext i1 %2532 to i8
  %2534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2533, i8* %2534, align 1, !tbaa !2449
  %2535 = load i64, i64* %RBP
  %2536 = sub i64 %2535, 192
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 7
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sext i32 %2540 to i64
  store i64 %2541, i64* %RCX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RCX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 7
  store i64 %2544, i64* %PC
  %2545 = sext i64 %2542 to i128
  %2546 = and i128 %2545, -18446744073709551616
  %2547 = zext i64 %2542 to i128
  %2548 = or i128 %2546, %2547
  %2549 = mul nsw i128 520, %2548
  %2550 = trunc i128 %2549 to i64
  store i64 %2550, i64* %RCX, align 8, !tbaa !2428
  %2551 = sext i64 %2550 to i128
  %2552 = icmp ne i128 %2551, %2549
  %2553 = zext i1 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2553, i8* %2554, align 1, !tbaa !2432
  %2555 = trunc i128 %2549 to i32
  %2556 = and i32 %2555, 255
  %2557 = call i32 @llvm.ctpop.i32(i32 %2556) #16
  %2558 = trunc i32 %2557 to i8
  %2559 = and i8 %2558, 1
  %2560 = xor i8 %2559, 1
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2560, i8* %2561, align 1, !tbaa !2446
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2562, align 1, !tbaa !2450
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2563, align 1, !tbaa !2447
  %2564 = lshr i64 %2550, 63
  %2565 = trunc i64 %2564 to i8
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2565, i8* %2566, align 1, !tbaa !2448
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2553, i8* %2567, align 1, !tbaa !2449
  %2568 = load i64, i64* %RAX
  %2569 = load i64, i64* %RCX
  %2570 = load i64, i64* %PC
  %2571 = add i64 %2570, 3
  store i64 %2571, i64* %PC
  %2572 = add i64 %2569, %2568
  store i64 %2572, i64* %RAX, align 8, !tbaa !2428
  %2573 = icmp ult i64 %2572, %2568
  %2574 = icmp ult i64 %2572, %2569
  %2575 = or i1 %2573, %2574
  %2576 = zext i1 %2575 to i8
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2576, i8* %2577, align 1, !tbaa !2432
  %2578 = trunc i64 %2572 to i32
  %2579 = and i32 %2578, 255
  %2580 = call i32 @llvm.ctpop.i32(i32 %2579) #16
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  %2583 = xor i8 %2582, 1
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2583, i8* %2584, align 1, !tbaa !2446
  %2585 = xor i64 %2569, %2568
  %2586 = xor i64 %2585, %2572
  %2587 = lshr i64 %2586, 4
  %2588 = trunc i64 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2589, i8* %2590, align 1, !tbaa !2450
  %2591 = icmp eq i64 %2572, 0
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2592, i8* %2593, align 1, !tbaa !2447
  %2594 = lshr i64 %2572, 63
  %2595 = trunc i64 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2595, i8* %2596, align 1, !tbaa !2448
  %2597 = lshr i64 %2568, 63
  %2598 = lshr i64 %2569, 63
  %2599 = xor i64 %2594, %2597
  %2600 = xor i64 %2594, %2598
  %2601 = add nuw nsw i64 %2599, %2600
  %2602 = icmp eq i64 %2601, 2
  %2603 = zext i1 %2602 to i8
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2603, i8* %2604, align 1, !tbaa !2449
  %2605 = load i64, i64* %RBP
  %2606 = sub i64 %2605, 48
  %2607 = load i64, i64* %PC
  %2608 = add i64 %2607, 4
  store i64 %2608, i64* %PC
  %2609 = inttoptr i64 %2606 to i32*
  %2610 = load i32, i32* %2609
  %2611 = sext i32 %2610 to i64
  store i64 %2611, i64* %RCX, align 8, !tbaa !2428
  %2612 = load i64, i64* %RAX
  %2613 = load i64, i64* %RCX
  %2614 = mul i64 %2613, 8
  %2615 = add i64 %2614, %2612
  %2616 = bitcast %union.vec128_t* %XMM0 to i8*
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 5
  store i64 %2618, i64* %PC
  %2619 = bitcast i8* %2616 to double*
  %2620 = load double, double* %2619, align 1
  %2621 = inttoptr i64 %2615 to double*
  store double %2620, double* %2621
  %2622 = load i64, i64* %RBP
  %2623 = sub i64 %2622, 196
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 10
  store i64 %2625, i64* %PC
  %2626 = inttoptr i64 %2623 to i32*
  store i32 0, i32* %2626
  br label %block_401c20

block_4015b3:                                     ; preds = %block_4015c2, %block_4015a9
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4015a9 ], [ %MEMORY.1, %block_4015c2 ]
  %2627 = load i64, i64* %RBP
  %2628 = sub i64 %2627, 196
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 6
  store i64 %2630, i64* %PC
  %2631 = inttoptr i64 %2628 to i32*
  %2632 = load i32, i32* %2631
  %2633 = zext i32 %2632 to i64
  store i64 %2633, i64* %RAX, align 8, !tbaa !2428
  %2634 = load i32, i32* %EAX
  %2635 = zext i32 %2634 to i64
  %2636 = load i64, i64* %RBP
  %2637 = sub i64 %2636, 48
  %2638 = load i64, i64* %PC
  %2639 = add i64 %2638, 3
  store i64 %2639, i64* %PC
  %2640 = inttoptr i64 %2637 to i32*
  %2641 = load i32, i32* %2640
  %2642 = sub i32 %2634, %2641
  %2643 = icmp ult i32 %2634, %2641
  %2644 = zext i1 %2643 to i8
  %2645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2644, i8* %2645, align 1, !tbaa !2432
  %2646 = and i32 %2642, 255
  %2647 = call i32 @llvm.ctpop.i32(i32 %2646) #16
  %2648 = trunc i32 %2647 to i8
  %2649 = and i8 %2648, 1
  %2650 = xor i8 %2649, 1
  %2651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2650, i8* %2651, align 1, !tbaa !2446
  %2652 = xor i32 %2641, %2634
  %2653 = xor i32 %2652, %2642
  %2654 = lshr i32 %2653, 4
  %2655 = trunc i32 %2654 to i8
  %2656 = and i8 %2655, 1
  %2657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2656, i8* %2657, align 1, !tbaa !2450
  %2658 = icmp eq i32 %2642, 0
  %2659 = zext i1 %2658 to i8
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2659, i8* %2660, align 1, !tbaa !2447
  %2661 = lshr i32 %2642, 31
  %2662 = trunc i32 %2661 to i8
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2662, i8* %2663, align 1, !tbaa !2448
  %2664 = lshr i32 %2634, 31
  %2665 = lshr i32 %2641, 31
  %2666 = xor i32 %2665, %2664
  %2667 = xor i32 %2661, %2664
  %2668 = add nuw nsw i32 %2667, %2666
  %2669 = icmp eq i32 %2668, 2
  %2670 = zext i1 %2669 to i8
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2670, i8* %2671, align 1, !tbaa !2449
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 855
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 6
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 6
  store i64 %2677, i64* %PC
  %2678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2679 = load i8, i8* %2678, align 1, !tbaa !2448
  %2680 = icmp ne i8 %2679, 0
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2682 = load i8, i8* %2681, align 1, !tbaa !2449
  %2683 = icmp ne i8 %2682, 0
  %2684 = xor i1 %2680, %2683
  %2685 = xor i1 %2684, true
  %2686 = zext i1 %2685 to i8
  store i8 %2686, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2688 = select i1 %2684, i64 %2675, i64 %2673
  store i64 %2688, i64* %2687, align 8, !tbaa !2428
  %2689 = load i8, i8* %BRANCH_TAKEN
  %2690 = icmp eq i8 %2689, 1
  %2691 = load i64, i64* %RBP
  %2692 = sub i64 %2691, 120
  %2693 = load i64, i64* %PC
  %2694 = add i64 %2693, 4
  store i64 %2694, i64* %PC
  %2695 = inttoptr i64 %2692 to i64*
  %2696 = load i64, i64* %2695
  store i64 %2696, i64* %RAX, align 8, !tbaa !2428
  %2697 = load i64, i64* %RBP
  %2698 = sub i64 %2697, 188
  %2699 = load i64, i64* %PC
  %2700 = add i64 %2699, 7
  store i64 %2700, i64* %PC
  %2701 = inttoptr i64 %2698 to i32*
  %2702 = load i32, i32* %2701
  %2703 = sext i32 %2702 to i64
  store i64 %2703, i64* %RCX, align 8, !tbaa !2428
  %2704 = load i64, i64* %RCX
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 7
  store i64 %2706, i64* %PC
  %2707 = sext i64 %2704 to i128
  %2708 = and i128 %2707, -18446744073709551616
  %2709 = zext i64 %2704 to i128
  %2710 = or i128 %2708, %2709
  %2711 = mul nsw i128 33800, %2710
  %2712 = trunc i128 %2711 to i64
  store i64 %2712, i64* %RCX, align 8, !tbaa !2428
  %2713 = sext i64 %2712 to i128
  %2714 = icmp ne i128 %2713, %2711
  %2715 = zext i1 %2714 to i8
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2715, i8* %2716, align 1, !tbaa !2432
  %2717 = trunc i128 %2711 to i32
  %2718 = and i32 %2717, 255
  %2719 = call i32 @llvm.ctpop.i32(i32 %2718) #16
  %2720 = trunc i32 %2719 to i8
  %2721 = and i8 %2720, 1
  %2722 = xor i8 %2721, 1
  %2723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2722, i8* %2723, align 1, !tbaa !2446
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2724, align 1, !tbaa !2450
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2725, align 1, !tbaa !2447
  %2726 = lshr i64 %2712, 63
  %2727 = trunc i64 %2726 to i8
  %2728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2727, i8* %2728, align 1, !tbaa !2448
  %2729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2715, i8* %2729, align 1, !tbaa !2449
  %2730 = load i64, i64* %RAX
  %2731 = load i64, i64* %RCX
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 3
  store i64 %2733, i64* %PC
  %2734 = add i64 %2731, %2730
  store i64 %2734, i64* %RAX, align 8, !tbaa !2428
  %2735 = icmp ult i64 %2734, %2730
  %2736 = icmp ult i64 %2734, %2731
  %2737 = or i1 %2735, %2736
  %2738 = zext i1 %2737 to i8
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2738, i8* %2739, align 1, !tbaa !2432
  %2740 = trunc i64 %2734 to i32
  %2741 = and i32 %2740, 255
  %2742 = call i32 @llvm.ctpop.i32(i32 %2741) #16
  %2743 = trunc i32 %2742 to i8
  %2744 = and i8 %2743, 1
  %2745 = xor i8 %2744, 1
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2745, i8* %2746, align 1, !tbaa !2446
  %2747 = xor i64 %2731, %2730
  %2748 = xor i64 %2747, %2734
  %2749 = lshr i64 %2748, 4
  %2750 = trunc i64 %2749 to i8
  %2751 = and i8 %2750, 1
  %2752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2751, i8* %2752, align 1, !tbaa !2450
  %2753 = icmp eq i64 %2734, 0
  %2754 = zext i1 %2753 to i8
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2754, i8* %2755, align 1, !tbaa !2447
  %2756 = lshr i64 %2734, 63
  %2757 = trunc i64 %2756 to i8
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2757, i8* %2758, align 1, !tbaa !2448
  %2759 = lshr i64 %2730, 63
  %2760 = lshr i64 %2731, 63
  %2761 = xor i64 %2756, %2759
  %2762 = xor i64 %2756, %2760
  %2763 = add nuw nsw i64 %2761, %2762
  %2764 = icmp eq i64 %2763, 2
  %2765 = zext i1 %2764 to i8
  %2766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2765, i8* %2766, align 1, !tbaa !2449
  %2767 = load i64, i64* %RBP
  %2768 = sub i64 %2767, 192
  %2769 = load i64, i64* %PC
  %2770 = add i64 %2769, 7
  store i64 %2770, i64* %PC
  %2771 = inttoptr i64 %2768 to i32*
  %2772 = load i32, i32* %2771
  %2773 = sext i32 %2772 to i64
  store i64 %2773, i64* %RCX, align 8, !tbaa !2428
  %2774 = load i64, i64* %RCX
  %2775 = load i64, i64* %PC
  %2776 = add i64 %2775, 7
  store i64 %2776, i64* %PC
  %2777 = sext i64 %2774 to i128
  %2778 = and i128 %2777, -18446744073709551616
  %2779 = zext i64 %2774 to i128
  %2780 = or i128 %2778, %2779
  %2781 = mul nsw i128 520, %2780
  %2782 = trunc i128 %2781 to i64
  store i64 %2782, i64* %RCX, align 8, !tbaa !2428
  %2783 = sext i64 %2782 to i128
  %2784 = icmp ne i128 %2783, %2781
  %2785 = zext i1 %2784 to i8
  %2786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2785, i8* %2786, align 1, !tbaa !2432
  %2787 = trunc i128 %2781 to i32
  %2788 = and i32 %2787, 255
  %2789 = call i32 @llvm.ctpop.i32(i32 %2788) #16
  %2790 = trunc i32 %2789 to i8
  %2791 = and i8 %2790, 1
  %2792 = xor i8 %2791, 1
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2792, i8* %2793, align 1, !tbaa !2446
  %2794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2794, align 1, !tbaa !2450
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2795, align 1, !tbaa !2447
  %2796 = lshr i64 %2782, 63
  %2797 = trunc i64 %2796 to i8
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2797, i8* %2798, align 1, !tbaa !2448
  %2799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2785, i8* %2799, align 1, !tbaa !2449
  %2800 = load i64, i64* %RAX
  %2801 = load i64, i64* %RCX
  %2802 = load i64, i64* %PC
  %2803 = add i64 %2802, 3
  store i64 %2803, i64* %PC
  %2804 = add i64 %2801, %2800
  store i64 %2804, i64* %RAX, align 8, !tbaa !2428
  %2805 = icmp ult i64 %2804, %2800
  %2806 = icmp ult i64 %2804, %2801
  %2807 = or i1 %2805, %2806
  %2808 = zext i1 %2807 to i8
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2808, i8* %2809, align 1, !tbaa !2432
  %2810 = trunc i64 %2804 to i32
  %2811 = and i32 %2810, 255
  %2812 = call i32 @llvm.ctpop.i32(i32 %2811) #16
  %2813 = trunc i32 %2812 to i8
  %2814 = and i8 %2813, 1
  %2815 = xor i8 %2814, 1
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2815, i8* %2816, align 1, !tbaa !2446
  %2817 = xor i64 %2801, %2800
  %2818 = xor i64 %2817, %2804
  %2819 = lshr i64 %2818, 4
  %2820 = trunc i64 %2819 to i8
  %2821 = and i8 %2820, 1
  %2822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2821, i8* %2822, align 1, !tbaa !2450
  %2823 = icmp eq i64 %2804, 0
  %2824 = zext i1 %2823 to i8
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2824, i8* %2825, align 1, !tbaa !2447
  %2826 = lshr i64 %2804, 63
  %2827 = trunc i64 %2826 to i8
  %2828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2827, i8* %2828, align 1, !tbaa !2448
  %2829 = lshr i64 %2800, 63
  %2830 = lshr i64 %2801, 63
  %2831 = xor i64 %2826, %2829
  %2832 = xor i64 %2826, %2830
  %2833 = add nuw nsw i64 %2831, %2832
  %2834 = icmp eq i64 %2833, 2
  %2835 = zext i1 %2834 to i8
  %2836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2835, i8* %2836, align 1, !tbaa !2449
  %2837 = load i64, i64* %RBP
  br i1 %2690, label %block_401913, label %block_4015c2

block_401c2f:                                     ; preds = %block_401c20
  %2838 = sub i64 %9986, 196
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 7
  store i64 %2840, i64* %PC
  %2841 = inttoptr i64 %2838 to i32*
  %2842 = load i32, i32* %2841
  %2843 = sext i32 %2842 to i64
  store i64 %2843, i64* %RCX, align 8, !tbaa !2428
  %2844 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2845 = load i64, i64* %RAX
  %2846 = load i64, i64* %RCX
  %2847 = mul i64 %2846, 8
  %2848 = add i64 %2847, %2845
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 5
  store i64 %2850, i64* %PC
  %2851 = inttoptr i64 %2848 to double*
  %2852 = load double, double* %2851
  %2853 = bitcast i8* %2844 to double*
  store double %2852, double* %2853, align 1, !tbaa !2453
  %2854 = getelementptr inbounds i8, i8* %2844, i64 8
  %2855 = bitcast i8* %2854 to double*
  store double 0.000000e+00, double* %2855, align 1, !tbaa !2453
  %2856 = load i64, i64* %RBP
  %2857 = sub i64 %2856, 80
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 4
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to i64*
  %2861 = load i64, i64* %2860
  store i64 %2861, i64* %RAX, align 8, !tbaa !2428
  %2862 = load i64, i64* %RBP
  %2863 = sub i64 %2862, 188
  %2864 = load i64, i64* %PC
  %2865 = add i64 %2864, 7
  store i64 %2865, i64* %PC
  %2866 = inttoptr i64 %2863 to i32*
  %2867 = load i32, i32* %2866
  %2868 = sext i32 %2867 to i64
  store i64 %2868, i64* %RCX, align 8, !tbaa !2428
  %2869 = load i64, i64* %RCX
  %2870 = load i64, i64* %PC
  %2871 = add i64 %2870, 7
  store i64 %2871, i64* %PC
  %2872 = sext i64 %2869 to i128
  %2873 = and i128 %2872, -18446744073709551616
  %2874 = zext i64 %2869 to i128
  %2875 = or i128 %2873, %2874
  %2876 = mul nsw i128 520, %2875
  %2877 = trunc i128 %2876 to i64
  store i64 %2877, i64* %RCX, align 8, !tbaa !2428
  %2878 = sext i64 %2877 to i128
  %2879 = icmp ne i128 %2878, %2876
  %2880 = zext i1 %2879 to i8
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2880, i8* %2881, align 1, !tbaa !2432
  %2882 = trunc i128 %2876 to i32
  %2883 = and i32 %2882, 255
  %2884 = call i32 @llvm.ctpop.i32(i32 %2883) #16
  %2885 = trunc i32 %2884 to i8
  %2886 = and i8 %2885, 1
  %2887 = xor i8 %2886, 1
  %2888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2887, i8* %2888, align 1, !tbaa !2446
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2889, align 1, !tbaa !2450
  %2890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2890, align 1, !tbaa !2447
  %2891 = lshr i64 %2877, 63
  %2892 = trunc i64 %2891 to i8
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2892, i8* %2893, align 1, !tbaa !2448
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2880, i8* %2894, align 1, !tbaa !2449
  %2895 = load i64, i64* %RAX
  %2896 = load i64, i64* %RCX
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 3
  store i64 %2898, i64* %PC
  %2899 = add i64 %2896, %2895
  store i64 %2899, i64* %RAX, align 8, !tbaa !2428
  %2900 = icmp ult i64 %2899, %2895
  %2901 = icmp ult i64 %2899, %2896
  %2902 = or i1 %2900, %2901
  %2903 = zext i1 %2902 to i8
  %2904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2903, i8* %2904, align 1, !tbaa !2432
  %2905 = trunc i64 %2899 to i32
  %2906 = and i32 %2905, 255
  %2907 = call i32 @llvm.ctpop.i32(i32 %2906) #16
  %2908 = trunc i32 %2907 to i8
  %2909 = and i8 %2908, 1
  %2910 = xor i8 %2909, 1
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2910, i8* %2911, align 1, !tbaa !2446
  %2912 = xor i64 %2896, %2895
  %2913 = xor i64 %2912, %2899
  %2914 = lshr i64 %2913, 4
  %2915 = trunc i64 %2914 to i8
  %2916 = and i8 %2915, 1
  %2917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2916, i8* %2917, align 1, !tbaa !2450
  %2918 = icmp eq i64 %2899, 0
  %2919 = zext i1 %2918 to i8
  %2920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2919, i8* %2920, align 1, !tbaa !2447
  %2921 = lshr i64 %2899, 63
  %2922 = trunc i64 %2921 to i8
  %2923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2922, i8* %2923, align 1, !tbaa !2448
  %2924 = lshr i64 %2895, 63
  %2925 = lshr i64 %2896, 63
  %2926 = xor i64 %2921, %2924
  %2927 = xor i64 %2921, %2925
  %2928 = add nuw nsw i64 %2926, %2927
  %2929 = icmp eq i64 %2928, 2
  %2930 = zext i1 %2929 to i8
  %2931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2930, i8* %2931, align 1, !tbaa !2449
  %2932 = load i64, i64* %RBP
  %2933 = sub i64 %2932, 196
  %2934 = load i64, i64* %PC
  %2935 = add i64 %2934, 7
  store i64 %2935, i64* %PC
  %2936 = inttoptr i64 %2933 to i32*
  %2937 = load i32, i32* %2936
  %2938 = sext i32 %2937 to i64
  store i64 %2938, i64* %RCX, align 8, !tbaa !2428
  %2939 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2940 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2941 = load i64, i64* %RAX
  %2942 = load i64, i64* %RCX
  %2943 = mul i64 %2942, 8
  %2944 = add i64 %2943, %2941
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 5
  store i64 %2946, i64* %PC
  %2947 = bitcast i8* %2940 to double*
  %2948 = load double, double* %2947, align 1
  %2949 = getelementptr inbounds i8, i8* %2940, i64 8
  %2950 = bitcast i8* %2949 to i64*
  %2951 = load i64, i64* %2950, align 1
  %2952 = inttoptr i64 %2944 to double*
  %2953 = load double, double* %2952
  %2954 = fsub double %2948, %2953
  %2955 = bitcast i8* %2939 to double*
  store double %2954, double* %2955, align 1, !tbaa !2453
  %2956 = getelementptr inbounds i8, i8* %2939, i64 8
  %2957 = bitcast i8* %2956 to i64*
  store i64 %2951, i64* %2957, align 1, !tbaa !2453
  %2958 = load i64, i64* %RBP
  %2959 = sub i64 %2958, 128
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 4
  store i64 %2961, i64* %PC
  %2962 = inttoptr i64 %2959 to i64*
  %2963 = load i64, i64* %2962
  store i64 %2963, i64* %RAX, align 8, !tbaa !2428
  %2964 = load i64, i64* %RBP
  %2965 = sub i64 %2964, 188
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 7
  store i64 %2967, i64* %PC
  %2968 = inttoptr i64 %2965 to i32*
  %2969 = load i32, i32* %2968
  %2970 = sext i32 %2969 to i64
  store i64 %2970, i64* %RCX, align 8, !tbaa !2428
  %2971 = load i64, i64* %RCX
  %2972 = load i64, i64* %PC
  %2973 = add i64 %2972, 7
  store i64 %2973, i64* %PC
  %2974 = sext i64 %2971 to i128
  %2975 = and i128 %2974, -18446744073709551616
  %2976 = zext i64 %2971 to i128
  %2977 = or i128 %2975, %2976
  %2978 = mul nsw i128 33800, %2977
  %2979 = trunc i128 %2978 to i64
  store i64 %2979, i64* %RCX, align 8, !tbaa !2428
  %2980 = sext i64 %2979 to i128
  %2981 = icmp ne i128 %2980, %2978
  %2982 = zext i1 %2981 to i8
  %2983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2982, i8* %2983, align 1, !tbaa !2432
  %2984 = trunc i128 %2978 to i32
  %2985 = and i32 %2984, 255
  %2986 = call i32 @llvm.ctpop.i32(i32 %2985) #16
  %2987 = trunc i32 %2986 to i8
  %2988 = and i8 %2987, 1
  %2989 = xor i8 %2988, 1
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2989, i8* %2990, align 1, !tbaa !2446
  %2991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2991, align 1, !tbaa !2450
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2992, align 1, !tbaa !2447
  %2993 = lshr i64 %2979, 63
  %2994 = trunc i64 %2993 to i8
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2994, i8* %2995, align 1, !tbaa !2448
  %2996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2982, i8* %2996, align 1, !tbaa !2449
  %2997 = load i64, i64* %RAX
  %2998 = load i64, i64* %RCX
  %2999 = load i64, i64* %PC
  %3000 = add i64 %2999, 3
  store i64 %3000, i64* %PC
  %3001 = add i64 %2998, %2997
  store i64 %3001, i64* %RAX, align 8, !tbaa !2428
  %3002 = icmp ult i64 %3001, %2997
  %3003 = icmp ult i64 %3001, %2998
  %3004 = or i1 %3002, %3003
  %3005 = zext i1 %3004 to i8
  %3006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3005, i8* %3006, align 1, !tbaa !2432
  %3007 = trunc i64 %3001 to i32
  %3008 = and i32 %3007, 255
  %3009 = call i32 @llvm.ctpop.i32(i32 %3008) #16
  %3010 = trunc i32 %3009 to i8
  %3011 = and i8 %3010, 1
  %3012 = xor i8 %3011, 1
  %3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3012, i8* %3013, align 1, !tbaa !2446
  %3014 = xor i64 %2998, %2997
  %3015 = xor i64 %3014, %3001
  %3016 = lshr i64 %3015, 4
  %3017 = trunc i64 %3016 to i8
  %3018 = and i8 %3017, 1
  %3019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3018, i8* %3019, align 1, !tbaa !2450
  %3020 = icmp eq i64 %3001, 0
  %3021 = zext i1 %3020 to i8
  %3022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3021, i8* %3022, align 1, !tbaa !2447
  %3023 = lshr i64 %3001, 63
  %3024 = trunc i64 %3023 to i8
  %3025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3024, i8* %3025, align 1, !tbaa !2448
  %3026 = lshr i64 %2997, 63
  %3027 = lshr i64 %2998, 63
  %3028 = xor i64 %3023, %3026
  %3029 = xor i64 %3023, %3027
  %3030 = add nuw nsw i64 %3028, %3029
  %3031 = icmp eq i64 %3030, 2
  %3032 = zext i1 %3031 to i8
  %3033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3032, i8* %3033, align 1, !tbaa !2449
  %3034 = load i64, i64* %RBP
  %3035 = sub i64 %3034, 52
  %3036 = load i64, i64* %PC
  %3037 = add i64 %3036, 4
  store i64 %3037, i64* %PC
  %3038 = inttoptr i64 %3035 to i32*
  %3039 = load i32, i32* %3038
  %3040 = sext i32 %3039 to i64
  store i64 %3040, i64* %RCX, align 8, !tbaa !2428
  %3041 = load i64, i64* %RCX
  %3042 = load i64, i64* %PC
  %3043 = add i64 %3042, 7
  store i64 %3043, i64* %PC
  %3044 = sext i64 %3041 to i128
  %3045 = and i128 %3044, -18446744073709551616
  %3046 = zext i64 %3041 to i128
  %3047 = or i128 %3045, %3046
  %3048 = mul nsw i128 520, %3047
  %3049 = trunc i128 %3048 to i64
  store i64 %3049, i64* %RCX, align 8, !tbaa !2428
  %3050 = sext i64 %3049 to i128
  %3051 = icmp ne i128 %3050, %3048
  %3052 = zext i1 %3051 to i8
  %3053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3052, i8* %3053, align 1, !tbaa !2432
  %3054 = trunc i128 %3048 to i32
  %3055 = and i32 %3054, 255
  %3056 = call i32 @llvm.ctpop.i32(i32 %3055) #16
  %3057 = trunc i32 %3056 to i8
  %3058 = and i8 %3057, 1
  %3059 = xor i8 %3058, 1
  %3060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3059, i8* %3060, align 1, !tbaa !2446
  %3061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3061, align 1, !tbaa !2450
  %3062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3062, align 1, !tbaa !2447
  %3063 = lshr i64 %3049, 63
  %3064 = trunc i64 %3063 to i8
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3064, i8* %3065, align 1, !tbaa !2448
  %3066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3052, i8* %3066, align 1, !tbaa !2449
  %3067 = load i64, i64* %RAX
  %3068 = load i64, i64* %RCX
  %3069 = load i64, i64* %PC
  %3070 = add i64 %3069, 3
  store i64 %3070, i64* %PC
  %3071 = add i64 %3068, %3067
  store i64 %3071, i64* %RAX, align 8, !tbaa !2428
  %3072 = icmp ult i64 %3071, %3067
  %3073 = icmp ult i64 %3071, %3068
  %3074 = or i1 %3072, %3073
  %3075 = zext i1 %3074 to i8
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3075, i8* %3076, align 1, !tbaa !2432
  %3077 = trunc i64 %3071 to i32
  %3078 = and i32 %3077, 255
  %3079 = call i32 @llvm.ctpop.i32(i32 %3078) #16
  %3080 = trunc i32 %3079 to i8
  %3081 = and i8 %3080, 1
  %3082 = xor i8 %3081, 1
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3082, i8* %3083, align 1, !tbaa !2446
  %3084 = xor i64 %3068, %3067
  %3085 = xor i64 %3084, %3071
  %3086 = lshr i64 %3085, 4
  %3087 = trunc i64 %3086 to i8
  %3088 = and i8 %3087, 1
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3088, i8* %3089, align 1, !tbaa !2450
  %3090 = icmp eq i64 %3071, 0
  %3091 = zext i1 %3090 to i8
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3091, i8* %3092, align 1, !tbaa !2447
  %3093 = lshr i64 %3071, 63
  %3094 = trunc i64 %3093 to i8
  %3095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3094, i8* %3095, align 1, !tbaa !2448
  %3096 = lshr i64 %3067, 63
  %3097 = lshr i64 %3068, 63
  %3098 = xor i64 %3093, %3096
  %3099 = xor i64 %3093, %3097
  %3100 = add nuw nsw i64 %3098, %3099
  %3101 = icmp eq i64 %3100, 2
  %3102 = zext i1 %3101 to i8
  %3103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3102, i8* %3103, align 1, !tbaa !2449
  %3104 = load i64, i64* %RBP
  %3105 = sub i64 %3104, 196
  %3106 = load i64, i64* %PC
  %3107 = add i64 %3106, 6
  store i64 %3107, i64* %PC
  %3108 = inttoptr i64 %3105 to i32*
  %3109 = load i32, i32* %3108
  %3110 = zext i32 %3109 to i64
  store i64 %3110, i64* %RDX, align 8, !tbaa !2428
  %3111 = load i64, i64* %RDX
  %3112 = load i64, i64* %PC
  %3113 = add i64 %3112, 3
  store i64 %3113, i64* %PC
  %3114 = trunc i64 %3111 to i32
  %3115 = add i32 1, %3114
  %3116 = zext i32 %3115 to i64
  store i64 %3116, i64* %RDX, align 8, !tbaa !2428
  %3117 = icmp ult i32 %3115, %3114
  %3118 = icmp ult i32 %3115, 1
  %3119 = or i1 %3117, %3118
  %3120 = zext i1 %3119 to i8
  %3121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3120, i8* %3121, align 1, !tbaa !2432
  %3122 = and i32 %3115, 255
  %3123 = call i32 @llvm.ctpop.i32(i32 %3122) #16
  %3124 = trunc i32 %3123 to i8
  %3125 = and i8 %3124, 1
  %3126 = xor i8 %3125, 1
  %3127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3126, i8* %3127, align 1, !tbaa !2446
  %3128 = xor i64 1, %3111
  %3129 = trunc i64 %3128 to i32
  %3130 = xor i32 %3129, %3115
  %3131 = lshr i32 %3130, 4
  %3132 = trunc i32 %3131 to i8
  %3133 = and i8 %3132, 1
  %3134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3133, i8* %3134, align 1, !tbaa !2450
  %3135 = icmp eq i32 %3115, 0
  %3136 = zext i1 %3135 to i8
  %3137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3136, i8* %3137, align 1, !tbaa !2447
  %3138 = lshr i32 %3115, 31
  %3139 = trunc i32 %3138 to i8
  %3140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3139, i8* %3140, align 1, !tbaa !2448
  %3141 = lshr i32 %3114, 31
  %3142 = xor i32 %3138, %3141
  %3143 = add nuw nsw i32 %3142, %3138
  %3144 = icmp eq i32 %3143, 2
  %3145 = zext i1 %3144 to i8
  %3146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3145, i8* %3146, align 1, !tbaa !2449
  %3147 = load i32, i32* %EDX
  %3148 = zext i32 %3147 to i64
  %3149 = load i64, i64* %PC
  %3150 = add i64 %3149, 3
  store i64 %3150, i64* %PC
  %3151 = shl i64 %3148, 32
  %3152 = ashr exact i64 %3151, 32
  store i64 %3152, i64* %RCX, align 8, !tbaa !2428
  %3153 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3154 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3155 = load i64, i64* %RAX
  %3156 = load i64, i64* %RCX
  %3157 = mul i64 %3156, 8
  %3158 = add i64 %3157, %3155
  %3159 = load i64, i64* %PC
  %3160 = add i64 %3159, 5
  store i64 %3160, i64* %PC
  %3161 = bitcast i8* %3154 to double*
  %3162 = load double, double* %3161, align 1
  %3163 = getelementptr inbounds i8, i8* %3154, i64 8
  %3164 = bitcast i8* %3163 to i64*
  %3165 = load i64, i64* %3164, align 1
  %3166 = inttoptr i64 %3158 to double*
  %3167 = load double, double* %3166
  %3168 = fadd double %3162, %3167
  %3169 = bitcast i8* %3153 to double*
  store double %3168, double* %3169, align 1, !tbaa !2453
  %3170 = getelementptr inbounds i8, i8* %3153, i64 8
  %3171 = bitcast i8* %3170 to i64*
  store i64 %3165, i64* %3171, align 1, !tbaa !2453
  %3172 = load i64, i64* %RBP
  %3173 = sub i64 %3172, 128
  %3174 = load i64, i64* %PC
  %3175 = add i64 %3174, 4
  store i64 %3175, i64* %PC
  %3176 = inttoptr i64 %3173 to i64*
  %3177 = load i64, i64* %3176
  store i64 %3177, i64* %RAX, align 8, !tbaa !2428
  %3178 = load i64, i64* %RBP
  %3179 = sub i64 %3178, 188
  %3180 = load i64, i64* %PC
  %3181 = add i64 %3180, 7
  store i64 %3181, i64* %PC
  %3182 = inttoptr i64 %3179 to i32*
  %3183 = load i32, i32* %3182
  %3184 = sext i32 %3183 to i64
  store i64 %3184, i64* %RCX, align 8, !tbaa !2428
  %3185 = load i64, i64* %RCX
  %3186 = load i64, i64* %PC
  %3187 = add i64 %3186, 7
  store i64 %3187, i64* %PC
  %3188 = sext i64 %3185 to i128
  %3189 = and i128 %3188, -18446744073709551616
  %3190 = zext i64 %3185 to i128
  %3191 = or i128 %3189, %3190
  %3192 = mul nsw i128 33800, %3191
  %3193 = trunc i128 %3192 to i64
  store i64 %3193, i64* %RCX, align 8, !tbaa !2428
  %3194 = sext i64 %3193 to i128
  %3195 = icmp ne i128 %3194, %3192
  %3196 = zext i1 %3195 to i8
  %3197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3196, i8* %3197, align 1, !tbaa !2432
  %3198 = trunc i128 %3192 to i32
  %3199 = and i32 %3198, 255
  %3200 = call i32 @llvm.ctpop.i32(i32 %3199) #16
  %3201 = trunc i32 %3200 to i8
  %3202 = and i8 %3201, 1
  %3203 = xor i8 %3202, 1
  %3204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3203, i8* %3204, align 1, !tbaa !2446
  %3205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3205, align 1, !tbaa !2450
  %3206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3206, align 1, !tbaa !2447
  %3207 = lshr i64 %3193, 63
  %3208 = trunc i64 %3207 to i8
  %3209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3208, i8* %3209, align 1, !tbaa !2448
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3196, i8* %3210, align 1, !tbaa !2449
  %3211 = load i64, i64* %RAX
  %3212 = load i64, i64* %RCX
  %3213 = load i64, i64* %PC
  %3214 = add i64 %3213, 3
  store i64 %3214, i64* %PC
  %3215 = add i64 %3212, %3211
  store i64 %3215, i64* %RAX, align 8, !tbaa !2428
  %3216 = icmp ult i64 %3215, %3211
  %3217 = icmp ult i64 %3215, %3212
  %3218 = or i1 %3216, %3217
  %3219 = zext i1 %3218 to i8
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3219, i8* %3220, align 1, !tbaa !2432
  %3221 = trunc i64 %3215 to i32
  %3222 = and i32 %3221, 255
  %3223 = call i32 @llvm.ctpop.i32(i32 %3222) #16
  %3224 = trunc i32 %3223 to i8
  %3225 = and i8 %3224, 1
  %3226 = xor i8 %3225, 1
  %3227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3226, i8* %3227, align 1, !tbaa !2446
  %3228 = xor i64 %3212, %3211
  %3229 = xor i64 %3228, %3215
  %3230 = lshr i64 %3229, 4
  %3231 = trunc i64 %3230 to i8
  %3232 = and i8 %3231, 1
  %3233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3232, i8* %3233, align 1, !tbaa !2450
  %3234 = icmp eq i64 %3215, 0
  %3235 = zext i1 %3234 to i8
  %3236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3235, i8* %3236, align 1, !tbaa !2447
  %3237 = lshr i64 %3215, 63
  %3238 = trunc i64 %3237 to i8
  %3239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3238, i8* %3239, align 1, !tbaa !2448
  %3240 = lshr i64 %3211, 63
  %3241 = lshr i64 %3212, 63
  %3242 = xor i64 %3237, %3240
  %3243 = xor i64 %3237, %3241
  %3244 = add nuw nsw i64 %3242, %3243
  %3245 = icmp eq i64 %3244, 2
  %3246 = zext i1 %3245 to i8
  %3247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3246, i8* %3247, align 1, !tbaa !2449
  %3248 = load i64, i64* %RBP
  %3249 = sub i64 %3248, 52
  %3250 = load i64, i64* %PC
  %3251 = add i64 %3250, 4
  store i64 %3251, i64* %PC
  %3252 = inttoptr i64 %3249 to i32*
  %3253 = load i32, i32* %3252
  %3254 = sext i32 %3253 to i64
  store i64 %3254, i64* %RCX, align 8, !tbaa !2428
  %3255 = load i64, i64* %RCX
  %3256 = load i64, i64* %PC
  %3257 = add i64 %3256, 7
  store i64 %3257, i64* %PC
  %3258 = sext i64 %3255 to i128
  %3259 = and i128 %3258, -18446744073709551616
  %3260 = zext i64 %3255 to i128
  %3261 = or i128 %3259, %3260
  %3262 = mul nsw i128 520, %3261
  %3263 = trunc i128 %3262 to i64
  store i64 %3263, i64* %RCX, align 8, !tbaa !2428
  %3264 = sext i64 %3263 to i128
  %3265 = icmp ne i128 %3264, %3262
  %3266 = zext i1 %3265 to i8
  %3267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3266, i8* %3267, align 1, !tbaa !2432
  %3268 = trunc i128 %3262 to i32
  %3269 = and i32 %3268, 255
  %3270 = call i32 @llvm.ctpop.i32(i32 %3269) #16
  %3271 = trunc i32 %3270 to i8
  %3272 = and i8 %3271, 1
  %3273 = xor i8 %3272, 1
  %3274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3273, i8* %3274, align 1, !tbaa !2446
  %3275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3275, align 1, !tbaa !2450
  %3276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3276, align 1, !tbaa !2447
  %3277 = lshr i64 %3263, 63
  %3278 = trunc i64 %3277 to i8
  %3279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3278, i8* %3279, align 1, !tbaa !2448
  %3280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3266, i8* %3280, align 1, !tbaa !2449
  %3281 = load i64, i64* %RAX
  %3282 = load i64, i64* %RCX
  %3283 = load i64, i64* %PC
  %3284 = add i64 %3283, 3
  store i64 %3284, i64* %PC
  %3285 = add i64 %3282, %3281
  store i64 %3285, i64* %RAX, align 8, !tbaa !2428
  %3286 = icmp ult i64 %3285, %3281
  %3287 = icmp ult i64 %3285, %3282
  %3288 = or i1 %3286, %3287
  %3289 = zext i1 %3288 to i8
  %3290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3289, i8* %3290, align 1, !tbaa !2432
  %3291 = trunc i64 %3285 to i32
  %3292 = and i32 %3291, 255
  %3293 = call i32 @llvm.ctpop.i32(i32 %3292) #16
  %3294 = trunc i32 %3293 to i8
  %3295 = and i8 %3294, 1
  %3296 = xor i8 %3295, 1
  %3297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3296, i8* %3297, align 1, !tbaa !2446
  %3298 = xor i64 %3282, %3281
  %3299 = xor i64 %3298, %3285
  %3300 = lshr i64 %3299, 4
  %3301 = trunc i64 %3300 to i8
  %3302 = and i8 %3301, 1
  %3303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3302, i8* %3303, align 1, !tbaa !2450
  %3304 = icmp eq i64 %3285, 0
  %3305 = zext i1 %3304 to i8
  %3306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3305, i8* %3306, align 1, !tbaa !2447
  %3307 = lshr i64 %3285, 63
  %3308 = trunc i64 %3307 to i8
  %3309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3308, i8* %3309, align 1, !tbaa !2448
  %3310 = lshr i64 %3281, 63
  %3311 = lshr i64 %3282, 63
  %3312 = xor i64 %3307, %3310
  %3313 = xor i64 %3307, %3311
  %3314 = add nuw nsw i64 %3312, %3313
  %3315 = icmp eq i64 %3314, 2
  %3316 = zext i1 %3315 to i8
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3316, i8* %3317, align 1, !tbaa !2449
  %3318 = load i64, i64* %RBP
  %3319 = sub i64 %3318, 196
  %3320 = load i64, i64* %PC
  %3321 = add i64 %3320, 7
  store i64 %3321, i64* %PC
  %3322 = inttoptr i64 %3319 to i32*
  %3323 = load i32, i32* %3322
  %3324 = sext i32 %3323 to i64
  store i64 %3324, i64* %RCX, align 8, !tbaa !2428
  %3325 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3326 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3327 = load i64, i64* %RAX
  %3328 = load i64, i64* %RCX
  %3329 = mul i64 %3328, 8
  %3330 = add i64 %3329, %3327
  %3331 = load i64, i64* %PC
  %3332 = add i64 %3331, 5
  store i64 %3332, i64* %PC
  %3333 = bitcast i8* %3326 to double*
  %3334 = load double, double* %3333, align 1
  %3335 = getelementptr inbounds i8, i8* %3326, i64 8
  %3336 = bitcast i8* %3335 to i64*
  %3337 = load i64, i64* %3336, align 1
  %3338 = inttoptr i64 %3330 to double*
  %3339 = load double, double* %3338
  %3340 = fsub double %3334, %3339
  %3341 = bitcast i8* %3325 to double*
  store double %3340, double* %3341, align 1, !tbaa !2453
  %3342 = getelementptr inbounds i8, i8* %3325, i64 8
  %3343 = bitcast i8* %3342 to i64*
  store i64 %3337, i64* %3343, align 1, !tbaa !2453
  %3344 = load i64, i64* %RBP
  %3345 = sub i64 %3344, 96
  %3346 = load i64, i64* %PC
  %3347 = add i64 %3346, 4
  store i64 %3347, i64* %PC
  %3348 = inttoptr i64 %3345 to i64*
  %3349 = load i64, i64* %3348
  store i64 %3349, i64* %RAX, align 8, !tbaa !2428
  %3350 = load i64, i64* %RBP
  %3351 = sub i64 %3350, 188
  %3352 = load i64, i64* %PC
  %3353 = add i64 %3352, 7
  store i64 %3353, i64* %PC
  %3354 = inttoptr i64 %3351 to i32*
  %3355 = load i32, i32* %3354
  %3356 = sext i32 %3355 to i64
  store i64 %3356, i64* %RCX, align 8, !tbaa !2428
  %3357 = load i64, i64* %RCX
  %3358 = load i64, i64* %PC
  %3359 = add i64 %3358, 7
  store i64 %3359, i64* %PC
  %3360 = sext i64 %3357 to i128
  %3361 = and i128 %3360, -18446744073709551616
  %3362 = zext i64 %3357 to i128
  %3363 = or i128 %3361, %3362
  %3364 = mul nsw i128 520, %3363
  %3365 = trunc i128 %3364 to i64
  store i64 %3365, i64* %RCX, align 8, !tbaa !2428
  %3366 = sext i64 %3365 to i128
  %3367 = icmp ne i128 %3366, %3364
  %3368 = zext i1 %3367 to i8
  %3369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3368, i8* %3369, align 1, !tbaa !2432
  %3370 = trunc i128 %3364 to i32
  %3371 = and i32 %3370, 255
  %3372 = call i32 @llvm.ctpop.i32(i32 %3371) #16
  %3373 = trunc i32 %3372 to i8
  %3374 = and i8 %3373, 1
  %3375 = xor i8 %3374, 1
  %3376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3375, i8* %3376, align 1, !tbaa !2446
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3377, align 1, !tbaa !2450
  %3378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3378, align 1, !tbaa !2447
  %3379 = lshr i64 %3365, 63
  %3380 = trunc i64 %3379 to i8
  %3381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3380, i8* %3381, align 1, !tbaa !2448
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3368, i8* %3382, align 1, !tbaa !2449
  %3383 = load i64, i64* %RAX
  %3384 = load i64, i64* %RCX
  %3385 = load i64, i64* %PC
  %3386 = add i64 %3385, 3
  store i64 %3386, i64* %PC
  %3387 = add i64 %3384, %3383
  store i64 %3387, i64* %RAX, align 8, !tbaa !2428
  %3388 = icmp ult i64 %3387, %3383
  %3389 = icmp ult i64 %3387, %3384
  %3390 = or i1 %3388, %3389
  %3391 = zext i1 %3390 to i8
  %3392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3391, i8* %3392, align 1, !tbaa !2432
  %3393 = trunc i64 %3387 to i32
  %3394 = and i32 %3393, 255
  %3395 = call i32 @llvm.ctpop.i32(i32 %3394) #16
  %3396 = trunc i32 %3395 to i8
  %3397 = and i8 %3396, 1
  %3398 = xor i8 %3397, 1
  %3399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3398, i8* %3399, align 1, !tbaa !2446
  %3400 = xor i64 %3384, %3383
  %3401 = xor i64 %3400, %3387
  %3402 = lshr i64 %3401, 4
  %3403 = trunc i64 %3402 to i8
  %3404 = and i8 %3403, 1
  %3405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3404, i8* %3405, align 1, !tbaa !2450
  %3406 = icmp eq i64 %3387, 0
  %3407 = zext i1 %3406 to i8
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3407, i8* %3408, align 1, !tbaa !2447
  %3409 = lshr i64 %3387, 63
  %3410 = trunc i64 %3409 to i8
  %3411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3410, i8* %3411, align 1, !tbaa !2448
  %3412 = lshr i64 %3383, 63
  %3413 = lshr i64 %3384, 63
  %3414 = xor i64 %3409, %3412
  %3415 = xor i64 %3409, %3413
  %3416 = add nuw nsw i64 %3414, %3415
  %3417 = icmp eq i64 %3416, 2
  %3418 = zext i1 %3417 to i8
  %3419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3418, i8* %3419, align 1, !tbaa !2449
  %3420 = load i64, i64* %RBP
  %3421 = sub i64 %3420, 192
  %3422 = load i64, i64* %PC
  %3423 = add i64 %3422, 7
  store i64 %3423, i64* %PC
  %3424 = inttoptr i64 %3421 to i32*
  %3425 = load i32, i32* %3424
  %3426 = sext i32 %3425 to i64
  store i64 %3426, i64* %RCX, align 8, !tbaa !2428
  %3427 = load i64, i64* %RAX
  %3428 = load i64, i64* %RCX
  %3429 = mul i64 %3428, 8
  %3430 = add i64 %3429, %3427
  %3431 = bitcast %union.vec128_t* %XMM0 to i8*
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 5
  store i64 %3433, i64* %PC
  %3434 = bitcast i8* %3431 to double*
  %3435 = load double, double* %3434, align 1
  %3436 = inttoptr i64 %3430 to double*
  store double %3435, double* %3436
  %3437 = load i64, i64* %RBP
  %3438 = sub i64 %3437, 176
  %3439 = load i64, i64* %PC
  %3440 = add i64 %3439, 7
  store i64 %3440, i64* %PC
  %3441 = inttoptr i64 %3438 to i64*
  %3442 = load i64, i64* %3441
  store i64 %3442, i64* %RAX, align 8, !tbaa !2428
  %3443 = load i64, i64* %RBP
  %3444 = sub i64 %3443, 52
  %3445 = load i64, i64* %PC
  %3446 = add i64 %3445, 4
  store i64 %3446, i64* %PC
  %3447 = inttoptr i64 %3444 to i32*
  %3448 = load i32, i32* %3447
  %3449 = sext i32 %3448 to i64
  store i64 %3449, i64* %RCX, align 8, !tbaa !2428
  %3450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3451 = load i64, i64* %RAX
  %3452 = load i64, i64* %RCX
  %3453 = mul i64 %3452, 8
  %3454 = add i64 %3453, %3451
  %3455 = load i64, i64* %PC
  %3456 = add i64 %3455, 5
  store i64 %3456, i64* %PC
  %3457 = inttoptr i64 %3454 to double*
  %3458 = load double, double* %3457
  %3459 = bitcast i8* %3450 to double*
  store double %3458, double* %3459, align 1, !tbaa !2453
  %3460 = getelementptr inbounds i8, i8* %3450, i64 8
  %3461 = bitcast i8* %3460 to double*
  store double 0.000000e+00, double* %3461, align 1, !tbaa !2453
  %3462 = load i64, i64* %RBP
  %3463 = sub i64 %3462, 184
  %3464 = load i64, i64* %PC
  %3465 = add i64 %3464, 7
  store i64 %3465, i64* %PC
  %3466 = inttoptr i64 %3463 to i64*
  %3467 = load i64, i64* %3466
  store i64 %3467, i64* %RAX, align 8, !tbaa !2428
  %3468 = load i64, i64* %RBP
  %3469 = sub i64 %3468, 192
  %3470 = load i64, i64* %PC
  %3471 = add i64 %3470, 7
  store i64 %3471, i64* %PC
  %3472 = inttoptr i64 %3469 to i32*
  %3473 = load i32, i32* %3472
  %3474 = sext i32 %3473 to i64
  store i64 %3474, i64* %RCX, align 8, !tbaa !2428
  %3475 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3476 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3477 = load i64, i64* %RAX
  %3478 = load i64, i64* %RCX
  %3479 = mul i64 %3478, 8
  %3480 = add i64 %3479, %3477
  %3481 = load i64, i64* %PC
  %3482 = add i64 %3481, 5
  store i64 %3482, i64* %PC
  %3483 = bitcast i8* %3476 to double*
  %3484 = load double, double* %3483, align 1
  %3485 = getelementptr inbounds i8, i8* %3476, i64 8
  %3486 = bitcast i8* %3485 to i64*
  %3487 = load i64, i64* %3486, align 1
  %3488 = inttoptr i64 %3480 to double*
  %3489 = load double, double* %3488
  %3490 = fdiv double %3484, %3489
  %3491 = bitcast i8* %3475 to double*
  store double %3490, double* %3491, align 1, !tbaa !2453
  %3492 = getelementptr inbounds i8, i8* %3475, i64 8
  %3493 = bitcast i8* %3492 to i64*
  store i64 %3487, i64* %3493, align 1, !tbaa !2453
  %3494 = load i64, i64* %RBP
  %3495 = sub i64 %3494, 112
  %3496 = load i64, i64* %PC
  %3497 = add i64 %3496, 4
  store i64 %3497, i64* %PC
  %3498 = inttoptr i64 %3495 to i64*
  %3499 = load i64, i64* %3498
  store i64 %3499, i64* %RAX, align 8, !tbaa !2428
  %3500 = load i64, i64* %RBP
  %3501 = sub i64 %3500, 188
  %3502 = load i64, i64* %PC
  %3503 = add i64 %3502, 7
  store i64 %3503, i64* %PC
  %3504 = inttoptr i64 %3501 to i32*
  %3505 = load i32, i32* %3504
  %3506 = sext i32 %3505 to i64
  store i64 %3506, i64* %RCX, align 8, !tbaa !2428
  %3507 = load i64, i64* %RCX
  %3508 = load i64, i64* %PC
  %3509 = add i64 %3508, 7
  store i64 %3509, i64* %PC
  %3510 = sext i64 %3507 to i128
  %3511 = and i128 %3510, -18446744073709551616
  %3512 = zext i64 %3507 to i128
  %3513 = or i128 %3511, %3512
  %3514 = mul nsw i128 33800, %3513
  %3515 = trunc i128 %3514 to i64
  store i64 %3515, i64* %RCX, align 8, !tbaa !2428
  %3516 = sext i64 %3515 to i128
  %3517 = icmp ne i128 %3516, %3514
  %3518 = zext i1 %3517 to i8
  %3519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3518, i8* %3519, align 1, !tbaa !2432
  %3520 = trunc i128 %3514 to i32
  %3521 = and i32 %3520, 255
  %3522 = call i32 @llvm.ctpop.i32(i32 %3521) #16
  %3523 = trunc i32 %3522 to i8
  %3524 = and i8 %3523, 1
  %3525 = xor i8 %3524, 1
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3525, i8* %3526, align 1, !tbaa !2446
  %3527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3527, align 1, !tbaa !2450
  %3528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3528, align 1, !tbaa !2447
  %3529 = lshr i64 %3515, 63
  %3530 = trunc i64 %3529 to i8
  %3531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3530, i8* %3531, align 1, !tbaa !2448
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3518, i8* %3532, align 1, !tbaa !2449
  %3533 = load i64, i64* %RAX
  %3534 = load i64, i64* %RCX
  %3535 = load i64, i64* %PC
  %3536 = add i64 %3535, 3
  store i64 %3536, i64* %PC
  %3537 = add i64 %3534, %3533
  store i64 %3537, i64* %RAX, align 8, !tbaa !2428
  %3538 = icmp ult i64 %3537, %3533
  %3539 = icmp ult i64 %3537, %3534
  %3540 = or i1 %3538, %3539
  %3541 = zext i1 %3540 to i8
  %3542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3541, i8* %3542, align 1, !tbaa !2432
  %3543 = trunc i64 %3537 to i32
  %3544 = and i32 %3543, 255
  %3545 = call i32 @llvm.ctpop.i32(i32 %3544) #16
  %3546 = trunc i32 %3545 to i8
  %3547 = and i8 %3546, 1
  %3548 = xor i8 %3547, 1
  %3549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3548, i8* %3549, align 1, !tbaa !2446
  %3550 = xor i64 %3534, %3533
  %3551 = xor i64 %3550, %3537
  %3552 = lshr i64 %3551, 4
  %3553 = trunc i64 %3552 to i8
  %3554 = and i8 %3553, 1
  %3555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3554, i8* %3555, align 1, !tbaa !2450
  %3556 = icmp eq i64 %3537, 0
  %3557 = zext i1 %3556 to i8
  %3558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3557, i8* %3558, align 1, !tbaa !2447
  %3559 = lshr i64 %3537, 63
  %3560 = trunc i64 %3559 to i8
  %3561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3560, i8* %3561, align 1, !tbaa !2448
  %3562 = lshr i64 %3533, 63
  %3563 = lshr i64 %3534, 63
  %3564 = xor i64 %3559, %3562
  %3565 = xor i64 %3559, %3563
  %3566 = add nuw nsw i64 %3564, %3565
  %3567 = icmp eq i64 %3566, 2
  %3568 = zext i1 %3567 to i8
  %3569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3568, i8* %3569, align 1, !tbaa !2449
  %3570 = load i64, i64* %RBP
  %3571 = sub i64 %3570, 192
  %3572 = load i64, i64* %PC
  %3573 = add i64 %3572, 7
  store i64 %3573, i64* %PC
  %3574 = inttoptr i64 %3571 to i32*
  %3575 = load i32, i32* %3574
  %3576 = sext i32 %3575 to i64
  store i64 %3576, i64* %RCX, align 8, !tbaa !2428
  %3577 = load i64, i64* %RCX
  %3578 = load i64, i64* %PC
  %3579 = add i64 %3578, 7
  store i64 %3579, i64* %PC
  %3580 = sext i64 %3577 to i128
  %3581 = and i128 %3580, -18446744073709551616
  %3582 = zext i64 %3577 to i128
  %3583 = or i128 %3581, %3582
  %3584 = mul nsw i128 520, %3583
  %3585 = trunc i128 %3584 to i64
  store i64 %3585, i64* %RCX, align 8, !tbaa !2428
  %3586 = sext i64 %3585 to i128
  %3587 = icmp ne i128 %3586, %3584
  %3588 = zext i1 %3587 to i8
  %3589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3588, i8* %3589, align 1, !tbaa !2432
  %3590 = trunc i128 %3584 to i32
  %3591 = and i32 %3590, 255
  %3592 = call i32 @llvm.ctpop.i32(i32 %3591) #16
  %3593 = trunc i32 %3592 to i8
  %3594 = and i8 %3593, 1
  %3595 = xor i8 %3594, 1
  %3596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3595, i8* %3596, align 1, !tbaa !2446
  %3597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3597, align 1, !tbaa !2450
  %3598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3598, align 1, !tbaa !2447
  %3599 = lshr i64 %3585, 63
  %3600 = trunc i64 %3599 to i8
  %3601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3600, i8* %3601, align 1, !tbaa !2448
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3588, i8* %3602, align 1, !tbaa !2449
  %3603 = load i64, i64* %RAX
  %3604 = load i64, i64* %RCX
  %3605 = load i64, i64* %PC
  %3606 = add i64 %3605, 3
  store i64 %3606, i64* %PC
  %3607 = add i64 %3604, %3603
  store i64 %3607, i64* %RAX, align 8, !tbaa !2428
  %3608 = icmp ult i64 %3607, %3603
  %3609 = icmp ult i64 %3607, %3604
  %3610 = or i1 %3608, %3609
  %3611 = zext i1 %3610 to i8
  %3612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3611, i8* %3612, align 1, !tbaa !2432
  %3613 = trunc i64 %3607 to i32
  %3614 = and i32 %3613, 255
  %3615 = call i32 @llvm.ctpop.i32(i32 %3614) #16
  %3616 = trunc i32 %3615 to i8
  %3617 = and i8 %3616, 1
  %3618 = xor i8 %3617, 1
  %3619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3618, i8* %3619, align 1, !tbaa !2446
  %3620 = xor i64 %3604, %3603
  %3621 = xor i64 %3620, %3607
  %3622 = lshr i64 %3621, 4
  %3623 = trunc i64 %3622 to i8
  %3624 = and i8 %3623, 1
  %3625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3624, i8* %3625, align 1, !tbaa !2450
  %3626 = icmp eq i64 %3607, 0
  %3627 = zext i1 %3626 to i8
  %3628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3627, i8* %3628, align 1, !tbaa !2447
  %3629 = lshr i64 %3607, 63
  %3630 = trunc i64 %3629 to i8
  %3631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3630, i8* %3631, align 1, !tbaa !2448
  %3632 = lshr i64 %3603, 63
  %3633 = lshr i64 %3604, 63
  %3634 = xor i64 %3629, %3632
  %3635 = xor i64 %3629, %3633
  %3636 = add nuw nsw i64 %3634, %3635
  %3637 = icmp eq i64 %3636, 2
  %3638 = zext i1 %3637 to i8
  %3639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3638, i8* %3639, align 1, !tbaa !2449
  %3640 = load i64, i64* %RBP
  %3641 = sub i64 %3640, 196
  %3642 = load i64, i64* %PC
  %3643 = add i64 %3642, 7
  store i64 %3643, i64* %PC
  %3644 = inttoptr i64 %3641 to i32*
  %3645 = load i32, i32* %3644
  %3646 = sext i32 %3645 to i64
  store i64 %3646, i64* %RCX, align 8, !tbaa !2428
  %3647 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3648 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3649 = load i64, i64* %RAX
  %3650 = load i64, i64* %RCX
  %3651 = mul i64 %3650, 8
  %3652 = add i64 %3651, %3649
  %3653 = load i64, i64* %PC
  %3654 = add i64 %3653, 5
  store i64 %3654, i64* %PC
  %3655 = bitcast i8* %3648 to double*
  %3656 = load double, double* %3655, align 1
  %3657 = getelementptr inbounds i8, i8* %3648, i64 8
  %3658 = bitcast i8* %3657 to i64*
  %3659 = load i64, i64* %3658, align 1
  %3660 = inttoptr i64 %3652 to double*
  %3661 = load double, double* %3660
  %3662 = fmul double %3656, %3661
  %3663 = bitcast i8* %3647 to double*
  store double %3662, double* %3663, align 1, !tbaa !2453
  %3664 = getelementptr inbounds i8, i8* %3647, i64 8
  %3665 = bitcast i8* %3664 to i64*
  store i64 %3659, i64* %3665, align 1, !tbaa !2453
  %3666 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3667 = load i64, i64* %RBP
  %3668 = sub i64 %3667, 72
  %3669 = load i64, i64* %PC
  %3670 = add i64 %3669, 5
  store i64 %3670, i64* %PC
  %3671 = inttoptr i64 %3668 to double*
  %3672 = load double, double* %3671
  %3673 = bitcast i8* %3666 to double*
  store double %3672, double* %3673, align 1, !tbaa !2453
  %3674 = getelementptr inbounds i8, i8* %3666, i64 8
  %3675 = bitcast i8* %3674 to double*
  store double 0.000000e+00, double* %3675, align 1, !tbaa !2453
  %3676 = load i64, i64* %RBP
  %3677 = sub i64 %3676, 184
  %3678 = load i64, i64* %PC
  %3679 = add i64 %3678, 7
  store i64 %3679, i64* %PC
  %3680 = inttoptr i64 %3677 to i64*
  %3681 = load i64, i64* %3680
  store i64 %3681, i64* %RAX, align 8, !tbaa !2428
  %3682 = load i64, i64* %RBP
  %3683 = sub i64 %3682, 192
  %3684 = load i64, i64* %PC
  %3685 = add i64 %3684, 7
  store i64 %3685, i64* %PC
  %3686 = inttoptr i64 %3683 to i32*
  %3687 = load i32, i32* %3686
  %3688 = sext i32 %3687 to i64
  store i64 %3688, i64* %RCX, align 8, !tbaa !2428
  %3689 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3690 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3691 = load i64, i64* %RAX
  %3692 = load i64, i64* %RCX
  %3693 = mul i64 %3692, 8
  %3694 = add i64 %3693, %3691
  %3695 = load i64, i64* %PC
  %3696 = add i64 %3695, 5
  store i64 %3696, i64* %PC
  %3697 = bitcast i8* %3690 to double*
  %3698 = load double, double* %3697, align 1
  %3699 = getelementptr inbounds i8, i8* %3690, i64 8
  %3700 = bitcast i8* %3699 to i64*
  %3701 = load i64, i64* %3700, align 1
  %3702 = inttoptr i64 %3694 to double*
  %3703 = load double, double* %3702
  %3704 = fdiv double %3698, %3703
  %3705 = bitcast i8* %3689 to double*
  store double %3704, double* %3705, align 1, !tbaa !2453
  %3706 = getelementptr inbounds i8, i8* %3689, i64 8
  %3707 = bitcast i8* %3706 to i64*
  store i64 %3701, i64* %3707, align 1, !tbaa !2453
  %3708 = load i64, i64* %RBP
  %3709 = sub i64 %3708, 96
  %3710 = load i64, i64* %PC
  %3711 = add i64 %3710, 4
  store i64 %3711, i64* %PC
  %3712 = inttoptr i64 %3709 to i64*
  %3713 = load i64, i64* %3712
  store i64 %3713, i64* %RAX, align 8, !tbaa !2428
  %3714 = load i64, i64* %RBP
  %3715 = sub i64 %3714, 188
  %3716 = load i64, i64* %PC
  %3717 = add i64 %3716, 7
  store i64 %3717, i64* %PC
  %3718 = inttoptr i64 %3715 to i32*
  %3719 = load i32, i32* %3718
  %3720 = sext i32 %3719 to i64
  store i64 %3720, i64* %RCX, align 8, !tbaa !2428
  %3721 = load i64, i64* %RCX
  %3722 = load i64, i64* %PC
  %3723 = add i64 %3722, 7
  store i64 %3723, i64* %PC
  %3724 = sext i64 %3721 to i128
  %3725 = and i128 %3724, -18446744073709551616
  %3726 = zext i64 %3721 to i128
  %3727 = or i128 %3725, %3726
  %3728 = mul nsw i128 520, %3727
  %3729 = trunc i128 %3728 to i64
  store i64 %3729, i64* %RCX, align 8, !tbaa !2428
  %3730 = sext i64 %3729 to i128
  %3731 = icmp ne i128 %3730, %3728
  %3732 = zext i1 %3731 to i8
  %3733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3732, i8* %3733, align 1, !tbaa !2432
  %3734 = trunc i128 %3728 to i32
  %3735 = and i32 %3734, 255
  %3736 = call i32 @llvm.ctpop.i32(i32 %3735) #16
  %3737 = trunc i32 %3736 to i8
  %3738 = and i8 %3737, 1
  %3739 = xor i8 %3738, 1
  %3740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3739, i8* %3740, align 1, !tbaa !2446
  %3741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3741, align 1, !tbaa !2450
  %3742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3742, align 1, !tbaa !2447
  %3743 = lshr i64 %3729, 63
  %3744 = trunc i64 %3743 to i8
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3744, i8* %3745, align 1, !tbaa !2448
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3732, i8* %3746, align 1, !tbaa !2449
  %3747 = load i64, i64* %RAX
  %3748 = load i64, i64* %RCX
  %3749 = load i64, i64* %PC
  %3750 = add i64 %3749, 3
  store i64 %3750, i64* %PC
  %3751 = add i64 %3748, %3747
  store i64 %3751, i64* %RAX, align 8, !tbaa !2428
  %3752 = icmp ult i64 %3751, %3747
  %3753 = icmp ult i64 %3751, %3748
  %3754 = or i1 %3752, %3753
  %3755 = zext i1 %3754 to i8
  %3756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3755, i8* %3756, align 1, !tbaa !2432
  %3757 = trunc i64 %3751 to i32
  %3758 = and i32 %3757, 255
  %3759 = call i32 @llvm.ctpop.i32(i32 %3758) #16
  %3760 = trunc i32 %3759 to i8
  %3761 = and i8 %3760, 1
  %3762 = xor i8 %3761, 1
  %3763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3762, i8* %3763, align 1, !tbaa !2446
  %3764 = xor i64 %3748, %3747
  %3765 = xor i64 %3764, %3751
  %3766 = lshr i64 %3765, 4
  %3767 = trunc i64 %3766 to i8
  %3768 = and i8 %3767, 1
  %3769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3768, i8* %3769, align 1, !tbaa !2450
  %3770 = icmp eq i64 %3751, 0
  %3771 = zext i1 %3770 to i8
  %3772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3771, i8* %3772, align 1, !tbaa !2447
  %3773 = lshr i64 %3751, 63
  %3774 = trunc i64 %3773 to i8
  %3775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3774, i8* %3775, align 1, !tbaa !2448
  %3776 = lshr i64 %3747, 63
  %3777 = lshr i64 %3748, 63
  %3778 = xor i64 %3773, %3776
  %3779 = xor i64 %3773, %3777
  %3780 = add nuw nsw i64 %3778, %3779
  %3781 = icmp eq i64 %3780, 2
  %3782 = zext i1 %3781 to i8
  %3783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3782, i8* %3783, align 1, !tbaa !2449
  %3784 = load i64, i64* %RBP
  %3785 = sub i64 %3784, 192
  %3786 = load i64, i64* %PC
  %3787 = add i64 %3786, 7
  store i64 %3787, i64* %PC
  %3788 = inttoptr i64 %3785 to i32*
  %3789 = load i32, i32* %3788
  %3790 = sext i32 %3789 to i64
  store i64 %3790, i64* %RCX, align 8, !tbaa !2428
  %3791 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3792 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3793 = load i64, i64* %RAX
  %3794 = load i64, i64* %RCX
  %3795 = mul i64 %3794, 8
  %3796 = add i64 %3795, %3793
  %3797 = load i64, i64* %PC
  %3798 = add i64 %3797, 5
  store i64 %3798, i64* %PC
  %3799 = bitcast i8* %3792 to double*
  %3800 = load double, double* %3799, align 1
  %3801 = getelementptr inbounds i8, i8* %3792, i64 8
  %3802 = bitcast i8* %3801 to i64*
  %3803 = load i64, i64* %3802, align 1
  %3804 = inttoptr i64 %3796 to double*
  %3805 = load double, double* %3804
  %3806 = fmul double %3800, %3805
  %3807 = bitcast i8* %3791 to double*
  store double %3806, double* %3807, align 1, !tbaa !2453
  %3808 = getelementptr inbounds i8, i8* %3791, i64 8
  %3809 = bitcast i8* %3808 to i64*
  store i64 %3803, i64* %3809, align 1, !tbaa !2453
  %3810 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3811 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3812 = bitcast %union.vec128_t* %XMM1 to i8*
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 4
  store i64 %3814, i64* %PC
  %3815 = bitcast i8* %3811 to double*
  %3816 = load double, double* %3815, align 1
  %3817 = getelementptr inbounds i8, i8* %3811, i64 8
  %3818 = bitcast i8* %3817 to i64*
  %3819 = load i64, i64* %3818, align 1
  %3820 = bitcast i8* %3812 to double*
  %3821 = load double, double* %3820, align 1
  %3822 = fsub double %3816, %3821
  %3823 = bitcast i8* %3810 to double*
  store double %3822, double* %3823, align 1, !tbaa !2453
  %3824 = getelementptr inbounds i8, i8* %3810, i64 8
  %3825 = bitcast i8* %3824 to i64*
  store i64 %3819, i64* %3825, align 1, !tbaa !2453
  %3826 = load i64, i64* %RBP
  %3827 = sub i64 %3826, 104
  %3828 = load i64, i64* %PC
  %3829 = add i64 %3828, 4
  store i64 %3829, i64* %PC
  %3830 = inttoptr i64 %3827 to i64*
  %3831 = load i64, i64* %3830
  store i64 %3831, i64* %RAX, align 8, !tbaa !2428
  %3832 = load i64, i64* %RBP
  %3833 = sub i64 %3832, 188
  %3834 = load i64, i64* %PC
  %3835 = add i64 %3834, 7
  store i64 %3835, i64* %PC
  %3836 = inttoptr i64 %3833 to i32*
  %3837 = load i32, i32* %3836
  %3838 = sext i32 %3837 to i64
  store i64 %3838, i64* %RCX, align 8, !tbaa !2428
  %3839 = load i64, i64* %RCX
  %3840 = load i64, i64* %PC
  %3841 = add i64 %3840, 7
  store i64 %3841, i64* %PC
  %3842 = sext i64 %3839 to i128
  %3843 = and i128 %3842, -18446744073709551616
  %3844 = zext i64 %3839 to i128
  %3845 = or i128 %3843, %3844
  %3846 = mul nsw i128 520, %3845
  %3847 = trunc i128 %3846 to i64
  store i64 %3847, i64* %RCX, align 8, !tbaa !2428
  %3848 = sext i64 %3847 to i128
  %3849 = icmp ne i128 %3848, %3846
  %3850 = zext i1 %3849 to i8
  %3851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3850, i8* %3851, align 1, !tbaa !2432
  %3852 = trunc i128 %3846 to i32
  %3853 = and i32 %3852, 255
  %3854 = call i32 @llvm.ctpop.i32(i32 %3853) #16
  %3855 = trunc i32 %3854 to i8
  %3856 = and i8 %3855, 1
  %3857 = xor i8 %3856, 1
  %3858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3857, i8* %3858, align 1, !tbaa !2446
  %3859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3859, align 1, !tbaa !2450
  %3860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3860, align 1, !tbaa !2447
  %3861 = lshr i64 %3847, 63
  %3862 = trunc i64 %3861 to i8
  %3863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3862, i8* %3863, align 1, !tbaa !2448
  %3864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3850, i8* %3864, align 1, !tbaa !2449
  %3865 = load i64, i64* %RAX
  %3866 = load i64, i64* %RCX
  %3867 = load i64, i64* %PC
  %3868 = add i64 %3867, 3
  store i64 %3868, i64* %PC
  %3869 = add i64 %3866, %3865
  store i64 %3869, i64* %RAX, align 8, !tbaa !2428
  %3870 = icmp ult i64 %3869, %3865
  %3871 = icmp ult i64 %3869, %3866
  %3872 = or i1 %3870, %3871
  %3873 = zext i1 %3872 to i8
  %3874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3873, i8* %3874, align 1, !tbaa !2432
  %3875 = trunc i64 %3869 to i32
  %3876 = and i32 %3875, 255
  %3877 = call i32 @llvm.ctpop.i32(i32 %3876) #16
  %3878 = trunc i32 %3877 to i8
  %3879 = and i8 %3878, 1
  %3880 = xor i8 %3879, 1
  %3881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3880, i8* %3881, align 1, !tbaa !2446
  %3882 = xor i64 %3866, %3865
  %3883 = xor i64 %3882, %3869
  %3884 = lshr i64 %3883, 4
  %3885 = trunc i64 %3884 to i8
  %3886 = and i8 %3885, 1
  %3887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3886, i8* %3887, align 1, !tbaa !2450
  %3888 = icmp eq i64 %3869, 0
  %3889 = zext i1 %3888 to i8
  %3890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3889, i8* %3890, align 1, !tbaa !2447
  %3891 = lshr i64 %3869, 63
  %3892 = trunc i64 %3891 to i8
  %3893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3892, i8* %3893, align 1, !tbaa !2448
  %3894 = lshr i64 %3865, 63
  %3895 = lshr i64 %3866, 63
  %3896 = xor i64 %3891, %3894
  %3897 = xor i64 %3891, %3895
  %3898 = add nuw nsw i64 %3896, %3897
  %3899 = icmp eq i64 %3898, 2
  %3900 = zext i1 %3899 to i8
  %3901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3900, i8* %3901, align 1, !tbaa !2449
  %3902 = load i64, i64* %RBP
  %3903 = sub i64 %3902, 192
  %3904 = load i64, i64* %PC
  %3905 = add i64 %3904, 7
  store i64 %3905, i64* %PC
  %3906 = inttoptr i64 %3903 to i32*
  %3907 = load i32, i32* %3906
  %3908 = sext i32 %3907 to i64
  store i64 %3908, i64* %RCX, align 8, !tbaa !2428
  %3909 = load i64, i64* %RAX
  %3910 = load i64, i64* %RCX
  %3911 = mul i64 %3910, 8
  %3912 = add i64 %3911, %3909
  %3913 = bitcast %union.vec128_t* %XMM0 to i8*
  %3914 = load i64, i64* %PC
  %3915 = add i64 %3914, 5
  store i64 %3915, i64* %PC
  %3916 = bitcast i8* %3913 to double*
  %3917 = load double, double* %3916, align 1
  %3918 = inttoptr i64 %3912 to double*
  store double %3917, double* %3918
  %3919 = load i64, i64* %RBP
  %3920 = sub i64 %3919, 160
  %3921 = load i64, i64* %PC
  %3922 = add i64 %3921, 7
  store i64 %3922, i64* %PC
  %3923 = inttoptr i64 %3920 to i64*
  %3924 = load i64, i64* %3923
  store i64 %3924, i64* %RAX, align 8, !tbaa !2428
  %3925 = load i64, i64* %RBP
  %3926 = sub i64 %3925, 196
  %3927 = load i64, i64* %PC
  %3928 = add i64 %3927, 7
  store i64 %3928, i64* %PC
  %3929 = inttoptr i64 %3926 to i32*
  %3930 = load i32, i32* %3929
  %3931 = sext i32 %3930 to i64
  store i64 %3931, i64* %RCX, align 8, !tbaa !2428
  %3932 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3933 = load i64, i64* %RAX
  %3934 = load i64, i64* %RCX
  %3935 = mul i64 %3934, 8
  %3936 = add i64 %3935, %3933
  %3937 = load i64, i64* %PC
  %3938 = add i64 %3937, 5
  store i64 %3938, i64* %PC
  %3939 = inttoptr i64 %3936 to double*
  %3940 = load double, double* %3939
  %3941 = bitcast i8* %3932 to double*
  store double %3940, double* %3941, align 1, !tbaa !2453
  %3942 = getelementptr inbounds i8, i8* %3932, i64 8
  %3943 = bitcast i8* %3942 to double*
  store double 0.000000e+00, double* %3943, align 1, !tbaa !2453
  %3944 = load i64, i64* %RBP
  %3945 = sub i64 %3944, 168
  %3946 = load i64, i64* %PC
  %3947 = add i64 %3946, 7
  store i64 %3947, i64* %PC
  %3948 = inttoptr i64 %3945 to i64*
  %3949 = load i64, i64* %3948
  store i64 %3949, i64* %RAX, align 8, !tbaa !2428
  %3950 = load i64, i64* %RBP
  %3951 = sub i64 %3950, 196
  %3952 = load i64, i64* %PC
  %3953 = add i64 %3952, 7
  store i64 %3953, i64* %PC
  %3954 = inttoptr i64 %3951 to i32*
  %3955 = load i32, i32* %3954
  %3956 = sext i32 %3955 to i64
  store i64 %3956, i64* %RCX, align 8, !tbaa !2428
  %3957 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3959 = load i64, i64* %RAX
  %3960 = load i64, i64* %RCX
  %3961 = mul i64 %3960, 8
  %3962 = add i64 %3961, %3959
  %3963 = load i64, i64* %PC
  %3964 = add i64 %3963, 5
  store i64 %3964, i64* %PC
  %3965 = bitcast i8* %3958 to double*
  %3966 = load double, double* %3965, align 1
  %3967 = getelementptr inbounds i8, i8* %3958, i64 8
  %3968 = bitcast i8* %3967 to i64*
  %3969 = load i64, i64* %3968, align 1
  %3970 = inttoptr i64 %3962 to double*
  %3971 = load double, double* %3970
  %3972 = fdiv double %3966, %3971
  %3973 = bitcast i8* %3957 to double*
  store double %3972, double* %3973, align 1, !tbaa !2453
  %3974 = getelementptr inbounds i8, i8* %3957, i64 8
  %3975 = bitcast i8* %3974 to i64*
  store i64 %3969, i64* %3975, align 1, !tbaa !2453
  %3976 = load i64, i64* %RBP
  %3977 = sub i64 %3976, 136
  %3978 = load i64, i64* %PC
  %3979 = add i64 %3978, 7
  store i64 %3979, i64* %PC
  %3980 = inttoptr i64 %3977 to i64*
  %3981 = load i64, i64* %3980
  store i64 %3981, i64* %RAX, align 8, !tbaa !2428
  %3982 = load i64, i64* %RBP
  %3983 = sub i64 %3982, 188
  %3984 = load i64, i64* %PC
  %3985 = add i64 %3984, 7
  store i64 %3985, i64* %PC
  %3986 = inttoptr i64 %3983 to i32*
  %3987 = load i32, i32* %3986
  %3988 = sext i32 %3987 to i64
  store i64 %3988, i64* %RCX, align 8, !tbaa !2428
  %3989 = load i64, i64* %RCX
  %3990 = load i64, i64* %PC
  %3991 = add i64 %3990, 7
  store i64 %3991, i64* %PC
  %3992 = sext i64 %3989 to i128
  %3993 = and i128 %3992, -18446744073709551616
  %3994 = zext i64 %3989 to i128
  %3995 = or i128 %3993, %3994
  %3996 = mul nsw i128 33800, %3995
  %3997 = trunc i128 %3996 to i64
  store i64 %3997, i64* %RCX, align 8, !tbaa !2428
  %3998 = sext i64 %3997 to i128
  %3999 = icmp ne i128 %3998, %3996
  %4000 = zext i1 %3999 to i8
  %4001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4000, i8* %4001, align 1, !tbaa !2432
  %4002 = trunc i128 %3996 to i32
  %4003 = and i32 %4002, 255
  %4004 = call i32 @llvm.ctpop.i32(i32 %4003) #16
  %4005 = trunc i32 %4004 to i8
  %4006 = and i8 %4005, 1
  %4007 = xor i8 %4006, 1
  %4008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4007, i8* %4008, align 1, !tbaa !2446
  %4009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4009, align 1, !tbaa !2450
  %4010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4010, align 1, !tbaa !2447
  %4011 = lshr i64 %3997, 63
  %4012 = trunc i64 %4011 to i8
  %4013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4012, i8* %4013, align 1, !tbaa !2448
  %4014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4000, i8* %4014, align 1, !tbaa !2449
  %4015 = load i64, i64* %RAX
  %4016 = load i64, i64* %RCX
  %4017 = load i64, i64* %PC
  %4018 = add i64 %4017, 3
  store i64 %4018, i64* %PC
  %4019 = add i64 %4016, %4015
  store i64 %4019, i64* %RAX, align 8, !tbaa !2428
  %4020 = icmp ult i64 %4019, %4015
  %4021 = icmp ult i64 %4019, %4016
  %4022 = or i1 %4020, %4021
  %4023 = zext i1 %4022 to i8
  %4024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4023, i8* %4024, align 1, !tbaa !2432
  %4025 = trunc i64 %4019 to i32
  %4026 = and i32 %4025, 255
  %4027 = call i32 @llvm.ctpop.i32(i32 %4026) #16
  %4028 = trunc i32 %4027 to i8
  %4029 = and i8 %4028, 1
  %4030 = xor i8 %4029, 1
  %4031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4030, i8* %4031, align 1, !tbaa !2446
  %4032 = xor i64 %4016, %4015
  %4033 = xor i64 %4032, %4019
  %4034 = lshr i64 %4033, 4
  %4035 = trunc i64 %4034 to i8
  %4036 = and i8 %4035, 1
  %4037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4036, i8* %4037, align 1, !tbaa !2450
  %4038 = icmp eq i64 %4019, 0
  %4039 = zext i1 %4038 to i8
  %4040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4039, i8* %4040, align 1, !tbaa !2447
  %4041 = lshr i64 %4019, 63
  %4042 = trunc i64 %4041 to i8
  %4043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4042, i8* %4043, align 1, !tbaa !2448
  %4044 = lshr i64 %4015, 63
  %4045 = lshr i64 %4016, 63
  %4046 = xor i64 %4041, %4044
  %4047 = xor i64 %4041, %4045
  %4048 = add nuw nsw i64 %4046, %4047
  %4049 = icmp eq i64 %4048, 2
  %4050 = zext i1 %4049 to i8
  %4051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4050, i8* %4051, align 1, !tbaa !2449
  %4052 = load i64, i64* %RBP
  %4053 = sub i64 %4052, 52
  %4054 = load i64, i64* %PC
  %4055 = add i64 %4054, 4
  store i64 %4055, i64* %PC
  %4056 = inttoptr i64 %4053 to i32*
  %4057 = load i32, i32* %4056
  %4058 = sext i32 %4057 to i64
  store i64 %4058, i64* %RCX, align 8, !tbaa !2428
  %4059 = load i64, i64* %RCX
  %4060 = load i64, i64* %PC
  %4061 = add i64 %4060, 7
  store i64 %4061, i64* %PC
  %4062 = sext i64 %4059 to i128
  %4063 = and i128 %4062, -18446744073709551616
  %4064 = zext i64 %4059 to i128
  %4065 = or i128 %4063, %4064
  %4066 = mul nsw i128 520, %4065
  %4067 = trunc i128 %4066 to i64
  store i64 %4067, i64* %RCX, align 8, !tbaa !2428
  %4068 = sext i64 %4067 to i128
  %4069 = icmp ne i128 %4068, %4066
  %4070 = zext i1 %4069 to i8
  %4071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4070, i8* %4071, align 1, !tbaa !2432
  %4072 = trunc i128 %4066 to i32
  %4073 = and i32 %4072, 255
  %4074 = call i32 @llvm.ctpop.i32(i32 %4073) #16
  %4075 = trunc i32 %4074 to i8
  %4076 = and i8 %4075, 1
  %4077 = xor i8 %4076, 1
  %4078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4077, i8* %4078, align 1, !tbaa !2446
  %4079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4079, align 1, !tbaa !2450
  %4080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4080, align 1, !tbaa !2447
  %4081 = lshr i64 %4067, 63
  %4082 = trunc i64 %4081 to i8
  %4083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4082, i8* %4083, align 1, !tbaa !2448
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4070, i8* %4084, align 1, !tbaa !2449
  %4085 = load i64, i64* %RAX
  %4086 = load i64, i64* %RCX
  %4087 = load i64, i64* %PC
  %4088 = add i64 %4087, 3
  store i64 %4088, i64* %PC
  %4089 = add i64 %4086, %4085
  store i64 %4089, i64* %RAX, align 8, !tbaa !2428
  %4090 = icmp ult i64 %4089, %4085
  %4091 = icmp ult i64 %4089, %4086
  %4092 = or i1 %4090, %4091
  %4093 = zext i1 %4092 to i8
  %4094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4093, i8* %4094, align 1, !tbaa !2432
  %4095 = trunc i64 %4089 to i32
  %4096 = and i32 %4095, 255
  %4097 = call i32 @llvm.ctpop.i32(i32 %4096) #16
  %4098 = trunc i32 %4097 to i8
  %4099 = and i8 %4098, 1
  %4100 = xor i8 %4099, 1
  %4101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4100, i8* %4101, align 1, !tbaa !2446
  %4102 = xor i64 %4086, %4085
  %4103 = xor i64 %4102, %4089
  %4104 = lshr i64 %4103, 4
  %4105 = trunc i64 %4104 to i8
  %4106 = and i8 %4105, 1
  %4107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4106, i8* %4107, align 1, !tbaa !2450
  %4108 = icmp eq i64 %4089, 0
  %4109 = zext i1 %4108 to i8
  %4110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4109, i8* %4110, align 1, !tbaa !2447
  %4111 = lshr i64 %4089, 63
  %4112 = trunc i64 %4111 to i8
  %4113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4112, i8* %4113, align 1, !tbaa !2448
  %4114 = lshr i64 %4085, 63
  %4115 = lshr i64 %4086, 63
  %4116 = xor i64 %4111, %4114
  %4117 = xor i64 %4111, %4115
  %4118 = add nuw nsw i64 %4116, %4117
  %4119 = icmp eq i64 %4118, 2
  %4120 = zext i1 %4119 to i8
  %4121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4120, i8* %4121, align 1, !tbaa !2449
  %4122 = load i64, i64* %RBP
  %4123 = sub i64 %4122, 196
  %4124 = load i64, i64* %PC
  %4125 = add i64 %4124, 7
  store i64 %4125, i64* %PC
  %4126 = inttoptr i64 %4123 to i32*
  %4127 = load i32, i32* %4126
  %4128 = sext i32 %4127 to i64
  store i64 %4128, i64* %RCX, align 8, !tbaa !2428
  %4129 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4131 = load i64, i64* %RAX
  %4132 = load i64, i64* %RCX
  %4133 = mul i64 %4132, 8
  %4134 = add i64 %4133, %4131
  %4135 = load i64, i64* %PC
  %4136 = add i64 %4135, 5
  store i64 %4136, i64* %PC
  %4137 = bitcast i8* %4130 to double*
  %4138 = load double, double* %4137, align 1
  %4139 = getelementptr inbounds i8, i8* %4130, i64 8
  %4140 = bitcast i8* %4139 to i64*
  %4141 = load i64, i64* %4140, align 1
  %4142 = inttoptr i64 %4134 to double*
  %4143 = load double, double* %4142
  %4144 = fmul double %4138, %4143
  %4145 = bitcast i8* %4129 to double*
  store double %4144, double* %4145, align 1, !tbaa !2453
  %4146 = getelementptr inbounds i8, i8* %4129, i64 8
  %4147 = bitcast i8* %4146 to i64*
  store i64 %4141, i64* %4147, align 1, !tbaa !2453
  %4148 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4149 = load i64, i64* %RBP
  %4150 = sub i64 %4149, 64
  %4151 = load i64, i64* %PC
  %4152 = add i64 %4151, 5
  store i64 %4152, i64* %PC
  %4153 = inttoptr i64 %4150 to double*
  %4154 = load double, double* %4153
  %4155 = bitcast i8* %4148 to double*
  store double %4154, double* %4155, align 1, !tbaa !2453
  %4156 = getelementptr inbounds i8, i8* %4148, i64 8
  %4157 = bitcast i8* %4156 to double*
  store double 0.000000e+00, double* %4157, align 1, !tbaa !2453
  %4158 = load i64, i64* %RBP
  %4159 = sub i64 %4158, 152
  %4160 = load i64, i64* %PC
  %4161 = add i64 %4160, 7
  store i64 %4161, i64* %PC
  %4162 = inttoptr i64 %4159 to i64*
  %4163 = load i64, i64* %4162
  store i64 %4163, i64* %RAX, align 8, !tbaa !2428
  %4164 = load i64, i64* %RBP
  %4165 = sub i64 %4164, 188
  %4166 = load i64, i64* %PC
  %4167 = add i64 %4166, 7
  store i64 %4167, i64* %PC
  %4168 = inttoptr i64 %4165 to i32*
  %4169 = load i32, i32* %4168
  %4170 = sext i32 %4169 to i64
  store i64 %4170, i64* %RCX, align 8, !tbaa !2428
  %4171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4172 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4173 = load i64, i64* %RAX
  %4174 = load i64, i64* %RCX
  %4175 = mul i64 %4174, 8
  %4176 = add i64 %4175, %4173
  %4177 = load i64, i64* %PC
  %4178 = add i64 %4177, 5
  store i64 %4178, i64* %PC
  %4179 = bitcast i8* %4172 to double*
  %4180 = load double, double* %4179, align 1
  %4181 = getelementptr inbounds i8, i8* %4172, i64 8
  %4182 = bitcast i8* %4181 to i64*
  %4183 = load i64, i64* %4182, align 1
  %4184 = inttoptr i64 %4176 to double*
  %4185 = load double, double* %4184
  %4186 = fmul double %4180, %4185
  %4187 = bitcast i8* %4171 to double*
  store double %4186, double* %4187, align 1, !tbaa !2453
  %4188 = getelementptr inbounds i8, i8* %4171, i64 8
  %4189 = bitcast i8* %4188 to i64*
  store i64 %4183, i64* %4189, align 1, !tbaa !2453
  %4190 = load i64, i64* %RBP
  %4191 = sub i64 %4190, 168
  %4192 = load i64, i64* %PC
  %4193 = add i64 %4192, 7
  store i64 %4193, i64* %PC
  %4194 = inttoptr i64 %4191 to i64*
  %4195 = load i64, i64* %4194
  store i64 %4195, i64* %RAX, align 8, !tbaa !2428
  %4196 = load i64, i64* %RBP
  %4197 = sub i64 %4196, 196
  %4198 = load i64, i64* %PC
  %4199 = add i64 %4198, 7
  store i64 %4199, i64* %PC
  %4200 = inttoptr i64 %4197 to i32*
  %4201 = load i32, i32* %4200
  %4202 = sext i32 %4201 to i64
  store i64 %4202, i64* %RCX, align 8, !tbaa !2428
  %4203 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4205 = load i64, i64* %RAX
  %4206 = load i64, i64* %RCX
  %4207 = mul i64 %4206, 8
  %4208 = add i64 %4207, %4205
  %4209 = load i64, i64* %PC
  %4210 = add i64 %4209, 5
  store i64 %4210, i64* %PC
  %4211 = bitcast i8* %4204 to double*
  %4212 = load double, double* %4211, align 1
  %4213 = getelementptr inbounds i8, i8* %4204, i64 8
  %4214 = bitcast i8* %4213 to i64*
  %4215 = load i64, i64* %4214, align 1
  %4216 = inttoptr i64 %4208 to double*
  %4217 = load double, double* %4216
  %4218 = fdiv double %4212, %4217
  %4219 = bitcast i8* %4203 to double*
  store double %4218, double* %4219, align 1, !tbaa !2453
  %4220 = getelementptr inbounds i8, i8* %4203, i64 8
  %4221 = bitcast i8* %4220 to i64*
  store i64 %4215, i64* %4221, align 1, !tbaa !2453
  %4222 = load i64, i64* %RBP
  %4223 = sub i64 %4222, 104
  %4224 = load i64, i64* %PC
  %4225 = add i64 %4224, 4
  store i64 %4225, i64* %PC
  %4226 = inttoptr i64 %4223 to i64*
  %4227 = load i64, i64* %4226
  store i64 %4227, i64* %RAX, align 8, !tbaa !2428
  %4228 = load i64, i64* %RBP
  %4229 = sub i64 %4228, 188
  %4230 = load i64, i64* %PC
  %4231 = add i64 %4230, 7
  store i64 %4231, i64* %PC
  %4232 = inttoptr i64 %4229 to i32*
  %4233 = load i32, i32* %4232
  %4234 = sext i32 %4233 to i64
  store i64 %4234, i64* %RCX, align 8, !tbaa !2428
  %4235 = load i64, i64* %RCX
  %4236 = load i64, i64* %PC
  %4237 = add i64 %4236, 7
  store i64 %4237, i64* %PC
  %4238 = sext i64 %4235 to i128
  %4239 = and i128 %4238, -18446744073709551616
  %4240 = zext i64 %4235 to i128
  %4241 = or i128 %4239, %4240
  %4242 = mul nsw i128 520, %4241
  %4243 = trunc i128 %4242 to i64
  store i64 %4243, i64* %RCX, align 8, !tbaa !2428
  %4244 = sext i64 %4243 to i128
  %4245 = icmp ne i128 %4244, %4242
  %4246 = zext i1 %4245 to i8
  %4247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4246, i8* %4247, align 1, !tbaa !2432
  %4248 = trunc i128 %4242 to i32
  %4249 = and i32 %4248, 255
  %4250 = call i32 @llvm.ctpop.i32(i32 %4249) #16
  %4251 = trunc i32 %4250 to i8
  %4252 = and i8 %4251, 1
  %4253 = xor i8 %4252, 1
  %4254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4253, i8* %4254, align 1, !tbaa !2446
  %4255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4255, align 1, !tbaa !2450
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4256, align 1, !tbaa !2447
  %4257 = lshr i64 %4243, 63
  %4258 = trunc i64 %4257 to i8
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4258, i8* %4259, align 1, !tbaa !2448
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4246, i8* %4260, align 1, !tbaa !2449
  %4261 = load i64, i64* %RAX
  %4262 = load i64, i64* %RCX
  %4263 = load i64, i64* %PC
  %4264 = add i64 %4263, 3
  store i64 %4264, i64* %PC
  %4265 = add i64 %4262, %4261
  store i64 %4265, i64* %RAX, align 8, !tbaa !2428
  %4266 = icmp ult i64 %4265, %4261
  %4267 = icmp ult i64 %4265, %4262
  %4268 = or i1 %4266, %4267
  %4269 = zext i1 %4268 to i8
  %4270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4269, i8* %4270, align 1, !tbaa !2432
  %4271 = trunc i64 %4265 to i32
  %4272 = and i32 %4271, 255
  %4273 = call i32 @llvm.ctpop.i32(i32 %4272) #16
  %4274 = trunc i32 %4273 to i8
  %4275 = and i8 %4274, 1
  %4276 = xor i8 %4275, 1
  %4277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4276, i8* %4277, align 1, !tbaa !2446
  %4278 = xor i64 %4262, %4261
  %4279 = xor i64 %4278, %4265
  %4280 = lshr i64 %4279, 4
  %4281 = trunc i64 %4280 to i8
  %4282 = and i8 %4281, 1
  %4283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4282, i8* %4283, align 1, !tbaa !2450
  %4284 = icmp eq i64 %4265, 0
  %4285 = zext i1 %4284 to i8
  %4286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4285, i8* %4286, align 1, !tbaa !2447
  %4287 = lshr i64 %4265, 63
  %4288 = trunc i64 %4287 to i8
  %4289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4288, i8* %4289, align 1, !tbaa !2448
  %4290 = lshr i64 %4261, 63
  %4291 = lshr i64 %4262, 63
  %4292 = xor i64 %4287, %4290
  %4293 = xor i64 %4287, %4291
  %4294 = add nuw nsw i64 %4292, %4293
  %4295 = icmp eq i64 %4294, 2
  %4296 = zext i1 %4295 to i8
  %4297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4296, i8* %4297, align 1, !tbaa !2449
  %4298 = load i64, i64* %RBP
  %4299 = sub i64 %4298, 192
  %4300 = load i64, i64* %PC
  %4301 = add i64 %4300, 7
  store i64 %4301, i64* %PC
  %4302 = inttoptr i64 %4299 to i32*
  %4303 = load i32, i32* %4302
  %4304 = sext i32 %4303 to i64
  store i64 %4304, i64* %RCX, align 8, !tbaa !2428
  %4305 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4306 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4307 = load i64, i64* %RAX
  %4308 = load i64, i64* %RCX
  %4309 = mul i64 %4308, 8
  %4310 = add i64 %4309, %4307
  %4311 = load i64, i64* %PC
  %4312 = add i64 %4311, 5
  store i64 %4312, i64* %PC
  %4313 = bitcast i8* %4306 to double*
  %4314 = load double, double* %4313, align 1
  %4315 = getelementptr inbounds i8, i8* %4306, i64 8
  %4316 = bitcast i8* %4315 to i64*
  %4317 = load i64, i64* %4316, align 1
  %4318 = inttoptr i64 %4310 to double*
  %4319 = load double, double* %4318
  %4320 = fmul double %4314, %4319
  %4321 = bitcast i8* %4305 to double*
  store double %4320, double* %4321, align 1, !tbaa !2453
  %4322 = getelementptr inbounds i8, i8* %4305, i64 8
  %4323 = bitcast i8* %4322 to i64*
  store i64 %4317, i64* %4323, align 1, !tbaa !2453
  %4324 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4325 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4326 = bitcast %union.vec128_t* %XMM1 to i8*
  %4327 = load i64, i64* %PC
  %4328 = add i64 %4327, 4
  store i64 %4328, i64* %PC
  %4329 = bitcast i8* %4325 to double*
  %4330 = load double, double* %4329, align 1
  %4331 = getelementptr inbounds i8, i8* %4325, i64 8
  %4332 = bitcast i8* %4331 to i64*
  %4333 = load i64, i64* %4332, align 1
  %4334 = bitcast i8* %4326 to double*
  %4335 = load double, double* %4334, align 1
  %4336 = fadd double %4330, %4335
  %4337 = bitcast i8* %4324 to double*
  store double %4336, double* %4337, align 1, !tbaa !2453
  %4338 = getelementptr inbounds i8, i8* %4324, i64 8
  %4339 = bitcast i8* %4338 to i64*
  store i64 %4333, i64* %4339, align 1, !tbaa !2453
  %4340 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4341 = load i64, i64* %RBP
  %4342 = sub i64 %4341, 64
  %4343 = load i64, i64* %PC
  %4344 = add i64 %4343, 5
  store i64 %4344, i64* %PC
  %4345 = inttoptr i64 %4342 to double*
  %4346 = load double, double* %4345
  %4347 = bitcast i8* %4340 to double*
  store double %4346, double* %4347, align 1, !tbaa !2453
  %4348 = getelementptr inbounds i8, i8* %4340, i64 8
  %4349 = bitcast i8* %4348 to double*
  store double 0.000000e+00, double* %4349, align 1, !tbaa !2453
  %4350 = load i64, i64* %RBP
  %4351 = sub i64 %4350, 144
  %4352 = load i64, i64* %PC
  %4353 = add i64 %4352, 7
  store i64 %4353, i64* %PC
  %4354 = inttoptr i64 %4351 to i64*
  %4355 = load i64, i64* %4354
  store i64 %4355, i64* %RAX, align 8, !tbaa !2428
  %4356 = load i64, i64* %RBP
  %4357 = sub i64 %4356, 188
  %4358 = load i64, i64* %PC
  %4359 = add i64 %4358, 7
  store i64 %4359, i64* %PC
  %4360 = inttoptr i64 %4357 to i32*
  %4361 = load i32, i32* %4360
  %4362 = sext i32 %4361 to i64
  store i64 %4362, i64* %RCX, align 8, !tbaa !2428
  %4363 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4364 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4365 = load i64, i64* %RAX
  %4366 = load i64, i64* %RCX
  %4367 = mul i64 %4366, 8
  %4368 = add i64 %4367, %4365
  %4369 = load i64, i64* %PC
  %4370 = add i64 %4369, 5
  store i64 %4370, i64* %PC
  %4371 = bitcast i8* %4364 to double*
  %4372 = load double, double* %4371, align 1
  %4373 = getelementptr inbounds i8, i8* %4364, i64 8
  %4374 = bitcast i8* %4373 to i64*
  %4375 = load i64, i64* %4374, align 1
  %4376 = inttoptr i64 %4368 to double*
  %4377 = load double, double* %4376
  %4378 = fmul double %4372, %4377
  %4379 = bitcast i8* %4363 to double*
  store double %4378, double* %4379, align 1, !tbaa !2453
  %4380 = getelementptr inbounds i8, i8* %4363, i64 8
  %4381 = bitcast i8* %4380 to i64*
  store i64 %4375, i64* %4381, align 1, !tbaa !2453
  %4382 = load i64, i64* %RBP
  %4383 = sub i64 %4382, 168
  %4384 = load i64, i64* %PC
  %4385 = add i64 %4384, 7
  store i64 %4385, i64* %PC
  %4386 = inttoptr i64 %4383 to i64*
  %4387 = load i64, i64* %4386
  store i64 %4387, i64* %RAX, align 8, !tbaa !2428
  %4388 = load i64, i64* %RBP
  %4389 = sub i64 %4388, 196
  %4390 = load i64, i64* %PC
  %4391 = add i64 %4390, 7
  store i64 %4391, i64* %PC
  %4392 = inttoptr i64 %4389 to i32*
  %4393 = load i32, i32* %4392
  %4394 = sext i32 %4393 to i64
  store i64 %4394, i64* %RCX, align 8, !tbaa !2428
  %4395 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4396 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4397 = load i64, i64* %RAX
  %4398 = load i64, i64* %RCX
  %4399 = mul i64 %4398, 8
  %4400 = add i64 %4399, %4397
  %4401 = load i64, i64* %PC
  %4402 = add i64 %4401, 5
  store i64 %4402, i64* %PC
  %4403 = bitcast i8* %4396 to double*
  %4404 = load double, double* %4403, align 1
  %4405 = getelementptr inbounds i8, i8* %4396, i64 8
  %4406 = bitcast i8* %4405 to i64*
  %4407 = load i64, i64* %4406, align 1
  %4408 = inttoptr i64 %4400 to double*
  %4409 = load double, double* %4408
  %4410 = fdiv double %4404, %4409
  %4411 = bitcast i8* %4395 to double*
  store double %4410, double* %4411, align 1, !tbaa !2453
  %4412 = getelementptr inbounds i8, i8* %4395, i64 8
  %4413 = bitcast i8* %4412 to i64*
  store i64 %4407, i64* %4413, align 1, !tbaa !2453
  %4414 = load i64, i64* %RBP
  %4415 = sub i64 %4414, 112
  %4416 = load i64, i64* %PC
  %4417 = add i64 %4416, 4
  store i64 %4417, i64* %PC
  %4418 = inttoptr i64 %4415 to i64*
  %4419 = load i64, i64* %4418
  store i64 %4419, i64* %RAX, align 8, !tbaa !2428
  %4420 = load i64, i64* %RBP
  %4421 = sub i64 %4420, 188
  %4422 = load i64, i64* %PC
  %4423 = add i64 %4422, 7
  store i64 %4423, i64* %PC
  %4424 = inttoptr i64 %4421 to i32*
  %4425 = load i32, i32* %4424
  %4426 = sext i32 %4425 to i64
  store i64 %4426, i64* %RCX, align 8, !tbaa !2428
  %4427 = load i64, i64* %RCX
  %4428 = load i64, i64* %PC
  %4429 = add i64 %4428, 7
  store i64 %4429, i64* %PC
  %4430 = sext i64 %4427 to i128
  %4431 = and i128 %4430, -18446744073709551616
  %4432 = zext i64 %4427 to i128
  %4433 = or i128 %4431, %4432
  %4434 = mul nsw i128 33800, %4433
  %4435 = trunc i128 %4434 to i64
  store i64 %4435, i64* %RCX, align 8, !tbaa !2428
  %4436 = sext i64 %4435 to i128
  %4437 = icmp ne i128 %4436, %4434
  %4438 = zext i1 %4437 to i8
  %4439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4438, i8* %4439, align 1, !tbaa !2432
  %4440 = trunc i128 %4434 to i32
  %4441 = and i32 %4440, 255
  %4442 = call i32 @llvm.ctpop.i32(i32 %4441) #16
  %4443 = trunc i32 %4442 to i8
  %4444 = and i8 %4443, 1
  %4445 = xor i8 %4444, 1
  %4446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4445, i8* %4446, align 1, !tbaa !2446
  %4447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4447, align 1, !tbaa !2450
  %4448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4448, align 1, !tbaa !2447
  %4449 = lshr i64 %4435, 63
  %4450 = trunc i64 %4449 to i8
  %4451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4450, i8* %4451, align 1, !tbaa !2448
  %4452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4438, i8* %4452, align 1, !tbaa !2449
  %4453 = load i64, i64* %RAX
  %4454 = load i64, i64* %RCX
  %4455 = load i64, i64* %PC
  %4456 = add i64 %4455, 3
  store i64 %4456, i64* %PC
  %4457 = add i64 %4454, %4453
  store i64 %4457, i64* %RAX, align 8, !tbaa !2428
  %4458 = icmp ult i64 %4457, %4453
  %4459 = icmp ult i64 %4457, %4454
  %4460 = or i1 %4458, %4459
  %4461 = zext i1 %4460 to i8
  %4462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4461, i8* %4462, align 1, !tbaa !2432
  %4463 = trunc i64 %4457 to i32
  %4464 = and i32 %4463, 255
  %4465 = call i32 @llvm.ctpop.i32(i32 %4464) #16
  %4466 = trunc i32 %4465 to i8
  %4467 = and i8 %4466, 1
  %4468 = xor i8 %4467, 1
  %4469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4468, i8* %4469, align 1, !tbaa !2446
  %4470 = xor i64 %4454, %4453
  %4471 = xor i64 %4470, %4457
  %4472 = lshr i64 %4471, 4
  %4473 = trunc i64 %4472 to i8
  %4474 = and i8 %4473, 1
  %4475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4474, i8* %4475, align 1, !tbaa !2450
  %4476 = icmp eq i64 %4457, 0
  %4477 = zext i1 %4476 to i8
  %4478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4477, i8* %4478, align 1, !tbaa !2447
  %4479 = lshr i64 %4457, 63
  %4480 = trunc i64 %4479 to i8
  %4481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4480, i8* %4481, align 1, !tbaa !2448
  %4482 = lshr i64 %4453, 63
  %4483 = lshr i64 %4454, 63
  %4484 = xor i64 %4479, %4482
  %4485 = xor i64 %4479, %4483
  %4486 = add nuw nsw i64 %4484, %4485
  %4487 = icmp eq i64 %4486, 2
  %4488 = zext i1 %4487 to i8
  %4489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4488, i8* %4489, align 1, !tbaa !2449
  %4490 = load i64, i64* %RBP
  %4491 = sub i64 %4490, 52
  %4492 = load i64, i64* %PC
  %4493 = add i64 %4492, 4
  store i64 %4493, i64* %PC
  %4494 = inttoptr i64 %4491 to i32*
  %4495 = load i32, i32* %4494
  %4496 = sext i32 %4495 to i64
  store i64 %4496, i64* %RCX, align 8, !tbaa !2428
  %4497 = load i64, i64* %RCX
  %4498 = load i64, i64* %PC
  %4499 = add i64 %4498, 7
  store i64 %4499, i64* %PC
  %4500 = sext i64 %4497 to i128
  %4501 = and i128 %4500, -18446744073709551616
  %4502 = zext i64 %4497 to i128
  %4503 = or i128 %4501, %4502
  %4504 = mul nsw i128 520, %4503
  %4505 = trunc i128 %4504 to i64
  store i64 %4505, i64* %RCX, align 8, !tbaa !2428
  %4506 = sext i64 %4505 to i128
  %4507 = icmp ne i128 %4506, %4504
  %4508 = zext i1 %4507 to i8
  %4509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4508, i8* %4509, align 1, !tbaa !2432
  %4510 = trunc i128 %4504 to i32
  %4511 = and i32 %4510, 255
  %4512 = call i32 @llvm.ctpop.i32(i32 %4511) #16
  %4513 = trunc i32 %4512 to i8
  %4514 = and i8 %4513, 1
  %4515 = xor i8 %4514, 1
  %4516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4515, i8* %4516, align 1, !tbaa !2446
  %4517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4517, align 1, !tbaa !2450
  %4518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4518, align 1, !tbaa !2447
  %4519 = lshr i64 %4505, 63
  %4520 = trunc i64 %4519 to i8
  %4521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4520, i8* %4521, align 1, !tbaa !2448
  %4522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4508, i8* %4522, align 1, !tbaa !2449
  %4523 = load i64, i64* %RAX
  %4524 = load i64, i64* %RCX
  %4525 = load i64, i64* %PC
  %4526 = add i64 %4525, 3
  store i64 %4526, i64* %PC
  %4527 = add i64 %4524, %4523
  store i64 %4527, i64* %RAX, align 8, !tbaa !2428
  %4528 = icmp ult i64 %4527, %4523
  %4529 = icmp ult i64 %4527, %4524
  %4530 = or i1 %4528, %4529
  %4531 = zext i1 %4530 to i8
  %4532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4531, i8* %4532, align 1, !tbaa !2432
  %4533 = trunc i64 %4527 to i32
  %4534 = and i32 %4533, 255
  %4535 = call i32 @llvm.ctpop.i32(i32 %4534) #16
  %4536 = trunc i32 %4535 to i8
  %4537 = and i8 %4536, 1
  %4538 = xor i8 %4537, 1
  %4539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4538, i8* %4539, align 1, !tbaa !2446
  %4540 = xor i64 %4524, %4523
  %4541 = xor i64 %4540, %4527
  %4542 = lshr i64 %4541, 4
  %4543 = trunc i64 %4542 to i8
  %4544 = and i8 %4543, 1
  %4545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4544, i8* %4545, align 1, !tbaa !2450
  %4546 = icmp eq i64 %4527, 0
  %4547 = zext i1 %4546 to i8
  %4548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4547, i8* %4548, align 1, !tbaa !2447
  %4549 = lshr i64 %4527, 63
  %4550 = trunc i64 %4549 to i8
  %4551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4550, i8* %4551, align 1, !tbaa !2448
  %4552 = lshr i64 %4523, 63
  %4553 = lshr i64 %4524, 63
  %4554 = xor i64 %4549, %4552
  %4555 = xor i64 %4549, %4553
  %4556 = add nuw nsw i64 %4554, %4555
  %4557 = icmp eq i64 %4556, 2
  %4558 = zext i1 %4557 to i8
  %4559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4558, i8* %4559, align 1, !tbaa !2449
  %4560 = load i64, i64* %RBP
  %4561 = sub i64 %4560, 196
  %4562 = load i64, i64* %PC
  %4563 = add i64 %4562, 7
  store i64 %4563, i64* %PC
  %4564 = inttoptr i64 %4561 to i32*
  %4565 = load i32, i32* %4564
  %4566 = sext i32 %4565 to i64
  store i64 %4566, i64* %RCX, align 8, !tbaa !2428
  %4567 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4568 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4569 = load i64, i64* %RAX
  %4570 = load i64, i64* %RCX
  %4571 = mul i64 %4570, 8
  %4572 = add i64 %4571, %4569
  %4573 = load i64, i64* %PC
  %4574 = add i64 %4573, 5
  store i64 %4574, i64* %PC
  %4575 = bitcast i8* %4568 to double*
  %4576 = load double, double* %4575, align 1
  %4577 = getelementptr inbounds i8, i8* %4568, i64 8
  %4578 = bitcast i8* %4577 to i64*
  %4579 = load i64, i64* %4578, align 1
  %4580 = inttoptr i64 %4572 to double*
  %4581 = load double, double* %4580
  %4582 = fmul double %4576, %4581
  %4583 = bitcast i8* %4567 to double*
  store double %4582, double* %4583, align 1, !tbaa !2453
  %4584 = getelementptr inbounds i8, i8* %4567, i64 8
  %4585 = bitcast i8* %4584 to i64*
  store i64 %4579, i64* %4585, align 1, !tbaa !2453
  %4586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4587 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4588 = bitcast %union.vec128_t* %XMM1 to i8*
  %4589 = load i64, i64* %PC
  %4590 = add i64 %4589, 4
  store i64 %4590, i64* %PC
  %4591 = bitcast i8* %4587 to double*
  %4592 = load double, double* %4591, align 1
  %4593 = getelementptr inbounds i8, i8* %4587, i64 8
  %4594 = bitcast i8* %4593 to i64*
  %4595 = load i64, i64* %4594, align 1
  %4596 = bitcast i8* %4588 to double*
  %4597 = load double, double* %4596, align 1
  %4598 = fsub double %4592, %4597
  %4599 = bitcast i8* %4586 to double*
  store double %4598, double* %4599, align 1, !tbaa !2453
  %4600 = getelementptr inbounds i8, i8* %4586, i64 8
  %4601 = bitcast i8* %4600 to i64*
  store i64 %4595, i64* %4601, align 1, !tbaa !2453
  %4602 = load i64, i64* %RBP
  %4603 = sub i64 %4602, 136
  %4604 = load i64, i64* %PC
  %4605 = add i64 %4604, 7
  store i64 %4605, i64* %PC
  %4606 = inttoptr i64 %4603 to i64*
  %4607 = load i64, i64* %4606
  store i64 %4607, i64* %RAX, align 8, !tbaa !2428
  %4608 = load i64, i64* %RBP
  %4609 = sub i64 %4608, 188
  %4610 = load i64, i64* %PC
  %4611 = add i64 %4610, 7
  store i64 %4611, i64* %PC
  %4612 = inttoptr i64 %4609 to i32*
  %4613 = load i32, i32* %4612
  %4614 = sext i32 %4613 to i64
  store i64 %4614, i64* %RCX, align 8, !tbaa !2428
  %4615 = load i64, i64* %RCX
  %4616 = load i64, i64* %PC
  %4617 = add i64 %4616, 7
  store i64 %4617, i64* %PC
  %4618 = sext i64 %4615 to i128
  %4619 = and i128 %4618, -18446744073709551616
  %4620 = zext i64 %4615 to i128
  %4621 = or i128 %4619, %4620
  %4622 = mul nsw i128 33800, %4621
  %4623 = trunc i128 %4622 to i64
  store i64 %4623, i64* %RCX, align 8, !tbaa !2428
  %4624 = sext i64 %4623 to i128
  %4625 = icmp ne i128 %4624, %4622
  %4626 = zext i1 %4625 to i8
  %4627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4626, i8* %4627, align 1, !tbaa !2432
  %4628 = trunc i128 %4622 to i32
  %4629 = and i32 %4628, 255
  %4630 = call i32 @llvm.ctpop.i32(i32 %4629) #16
  %4631 = trunc i32 %4630 to i8
  %4632 = and i8 %4631, 1
  %4633 = xor i8 %4632, 1
  %4634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4633, i8* %4634, align 1, !tbaa !2446
  %4635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4635, align 1, !tbaa !2450
  %4636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4636, align 1, !tbaa !2447
  %4637 = lshr i64 %4623, 63
  %4638 = trunc i64 %4637 to i8
  %4639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4638, i8* %4639, align 1, !tbaa !2448
  %4640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4626, i8* %4640, align 1, !tbaa !2449
  %4641 = load i64, i64* %RAX
  %4642 = load i64, i64* %RCX
  %4643 = load i64, i64* %PC
  %4644 = add i64 %4643, 3
  store i64 %4644, i64* %PC
  %4645 = add i64 %4642, %4641
  store i64 %4645, i64* %RAX, align 8, !tbaa !2428
  %4646 = icmp ult i64 %4645, %4641
  %4647 = icmp ult i64 %4645, %4642
  %4648 = or i1 %4646, %4647
  %4649 = zext i1 %4648 to i8
  %4650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4649, i8* %4650, align 1, !tbaa !2432
  %4651 = trunc i64 %4645 to i32
  %4652 = and i32 %4651, 255
  %4653 = call i32 @llvm.ctpop.i32(i32 %4652) #16
  %4654 = trunc i32 %4653 to i8
  %4655 = and i8 %4654, 1
  %4656 = xor i8 %4655, 1
  %4657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4656, i8* %4657, align 1, !tbaa !2446
  %4658 = xor i64 %4642, %4641
  %4659 = xor i64 %4658, %4645
  %4660 = lshr i64 %4659, 4
  %4661 = trunc i64 %4660 to i8
  %4662 = and i8 %4661, 1
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4662, i8* %4663, align 1, !tbaa !2450
  %4664 = icmp eq i64 %4645, 0
  %4665 = zext i1 %4664 to i8
  %4666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4665, i8* %4666, align 1, !tbaa !2447
  %4667 = lshr i64 %4645, 63
  %4668 = trunc i64 %4667 to i8
  %4669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4668, i8* %4669, align 1, !tbaa !2448
  %4670 = lshr i64 %4641, 63
  %4671 = lshr i64 %4642, 63
  %4672 = xor i64 %4667, %4670
  %4673 = xor i64 %4667, %4671
  %4674 = add nuw nsw i64 %4672, %4673
  %4675 = icmp eq i64 %4674, 2
  %4676 = zext i1 %4675 to i8
  %4677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4676, i8* %4677, align 1, !tbaa !2449
  %4678 = load i64, i64* %RBP
  %4679 = sub i64 %4678, 52
  %4680 = load i64, i64* %PC
  %4681 = add i64 %4680, 4
  store i64 %4681, i64* %PC
  %4682 = inttoptr i64 %4679 to i32*
  %4683 = load i32, i32* %4682
  %4684 = sext i32 %4683 to i64
  store i64 %4684, i64* %RCX, align 8, !tbaa !2428
  %4685 = load i64, i64* %RCX
  %4686 = load i64, i64* %PC
  %4687 = add i64 %4686, 7
  store i64 %4687, i64* %PC
  %4688 = sext i64 %4685 to i128
  %4689 = and i128 %4688, -18446744073709551616
  %4690 = zext i64 %4685 to i128
  %4691 = or i128 %4689, %4690
  %4692 = mul nsw i128 520, %4691
  %4693 = trunc i128 %4692 to i64
  store i64 %4693, i64* %RCX, align 8, !tbaa !2428
  %4694 = sext i64 %4693 to i128
  %4695 = icmp ne i128 %4694, %4692
  %4696 = zext i1 %4695 to i8
  %4697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4696, i8* %4697, align 1, !tbaa !2432
  %4698 = trunc i128 %4692 to i32
  %4699 = and i32 %4698, 255
  %4700 = call i32 @llvm.ctpop.i32(i32 %4699) #16
  %4701 = trunc i32 %4700 to i8
  %4702 = and i8 %4701, 1
  %4703 = xor i8 %4702, 1
  %4704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4703, i8* %4704, align 1, !tbaa !2446
  %4705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4705, align 1, !tbaa !2450
  %4706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4706, align 1, !tbaa !2447
  %4707 = lshr i64 %4693, 63
  %4708 = trunc i64 %4707 to i8
  %4709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4708, i8* %4709, align 1, !tbaa !2448
  %4710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4696, i8* %4710, align 1, !tbaa !2449
  %4711 = load i64, i64* %RAX
  %4712 = load i64, i64* %RCX
  %4713 = load i64, i64* %PC
  %4714 = add i64 %4713, 3
  store i64 %4714, i64* %PC
  %4715 = add i64 %4712, %4711
  store i64 %4715, i64* %RAX, align 8, !tbaa !2428
  %4716 = icmp ult i64 %4715, %4711
  %4717 = icmp ult i64 %4715, %4712
  %4718 = or i1 %4716, %4717
  %4719 = zext i1 %4718 to i8
  %4720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4719, i8* %4720, align 1, !tbaa !2432
  %4721 = trunc i64 %4715 to i32
  %4722 = and i32 %4721, 255
  %4723 = call i32 @llvm.ctpop.i32(i32 %4722) #16
  %4724 = trunc i32 %4723 to i8
  %4725 = and i8 %4724, 1
  %4726 = xor i8 %4725, 1
  %4727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4726, i8* %4727, align 1, !tbaa !2446
  %4728 = xor i64 %4712, %4711
  %4729 = xor i64 %4728, %4715
  %4730 = lshr i64 %4729, 4
  %4731 = trunc i64 %4730 to i8
  %4732 = and i8 %4731, 1
  %4733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4732, i8* %4733, align 1, !tbaa !2450
  %4734 = icmp eq i64 %4715, 0
  %4735 = zext i1 %4734 to i8
  %4736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4735, i8* %4736, align 1, !tbaa !2447
  %4737 = lshr i64 %4715, 63
  %4738 = trunc i64 %4737 to i8
  %4739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4738, i8* %4739, align 1, !tbaa !2448
  %4740 = lshr i64 %4711, 63
  %4741 = lshr i64 %4712, 63
  %4742 = xor i64 %4737, %4740
  %4743 = xor i64 %4737, %4741
  %4744 = add nuw nsw i64 %4742, %4743
  %4745 = icmp eq i64 %4744, 2
  %4746 = zext i1 %4745 to i8
  %4747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4746, i8* %4747, align 1, !tbaa !2449
  %4748 = load i64, i64* %RBP
  %4749 = sub i64 %4748, 196
  %4750 = load i64, i64* %PC
  %4751 = add i64 %4750, 7
  store i64 %4751, i64* %PC
  %4752 = inttoptr i64 %4749 to i32*
  %4753 = load i32, i32* %4752
  %4754 = sext i32 %4753 to i64
  store i64 %4754, i64* %RCX, align 8, !tbaa !2428
  %4755 = load i64, i64* %RAX
  %4756 = load i64, i64* %RCX
  %4757 = mul i64 %4756, 8
  %4758 = add i64 %4757, %4755
  %4759 = bitcast %union.vec128_t* %XMM0 to i8*
  %4760 = load i64, i64* %PC
  %4761 = add i64 %4760, 5
  store i64 %4761, i64* %PC
  %4762 = bitcast i8* %4759 to double*
  %4763 = load double, double* %4762, align 1
  %4764 = inttoptr i64 %4758 to double*
  store double %4763, double* %4764
  %4765 = load i64, i64* %RBP
  %4766 = sub i64 %4765, 104
  %4767 = load i64, i64* %PC
  %4768 = add i64 %4767, 4
  store i64 %4768, i64* %PC
  %4769 = inttoptr i64 %4766 to i64*
  %4770 = load i64, i64* %4769
  store i64 %4770, i64* %RAX, align 8, !tbaa !2428
  %4771 = load i64, i64* %RBP
  %4772 = sub i64 %4771, 188
  %4773 = load i64, i64* %PC
  %4774 = add i64 %4773, 7
  store i64 %4774, i64* %PC
  %4775 = inttoptr i64 %4772 to i32*
  %4776 = load i32, i32* %4775
  %4777 = sext i32 %4776 to i64
  store i64 %4777, i64* %RCX, align 8, !tbaa !2428
  %4778 = load i64, i64* %RCX
  %4779 = load i64, i64* %PC
  %4780 = add i64 %4779, 7
  store i64 %4780, i64* %PC
  %4781 = sext i64 %4778 to i128
  %4782 = and i128 %4781, -18446744073709551616
  %4783 = zext i64 %4778 to i128
  %4784 = or i128 %4782, %4783
  %4785 = mul nsw i128 520, %4784
  %4786 = trunc i128 %4785 to i64
  store i64 %4786, i64* %RCX, align 8, !tbaa !2428
  %4787 = sext i64 %4786 to i128
  %4788 = icmp ne i128 %4787, %4785
  %4789 = zext i1 %4788 to i8
  %4790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4789, i8* %4790, align 1, !tbaa !2432
  %4791 = trunc i128 %4785 to i32
  %4792 = and i32 %4791, 255
  %4793 = call i32 @llvm.ctpop.i32(i32 %4792) #16
  %4794 = trunc i32 %4793 to i8
  %4795 = and i8 %4794, 1
  %4796 = xor i8 %4795, 1
  %4797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4796, i8* %4797, align 1, !tbaa !2446
  %4798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4798, align 1, !tbaa !2450
  %4799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4799, align 1, !tbaa !2447
  %4800 = lshr i64 %4786, 63
  %4801 = trunc i64 %4800 to i8
  %4802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4801, i8* %4802, align 1, !tbaa !2448
  %4803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4789, i8* %4803, align 1, !tbaa !2449
  %4804 = load i64, i64* %RAX
  %4805 = load i64, i64* %RCX
  %4806 = load i64, i64* %PC
  %4807 = add i64 %4806, 3
  store i64 %4807, i64* %PC
  %4808 = add i64 %4805, %4804
  store i64 %4808, i64* %RAX, align 8, !tbaa !2428
  %4809 = icmp ult i64 %4808, %4804
  %4810 = icmp ult i64 %4808, %4805
  %4811 = or i1 %4809, %4810
  %4812 = zext i1 %4811 to i8
  %4813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4812, i8* %4813, align 1, !tbaa !2432
  %4814 = trunc i64 %4808 to i32
  %4815 = and i32 %4814, 255
  %4816 = call i32 @llvm.ctpop.i32(i32 %4815) #16
  %4817 = trunc i32 %4816 to i8
  %4818 = and i8 %4817, 1
  %4819 = xor i8 %4818, 1
  %4820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4819, i8* %4820, align 1, !tbaa !2446
  %4821 = xor i64 %4805, %4804
  %4822 = xor i64 %4821, %4808
  %4823 = lshr i64 %4822, 4
  %4824 = trunc i64 %4823 to i8
  %4825 = and i8 %4824, 1
  %4826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4825, i8* %4826, align 1, !tbaa !2450
  %4827 = icmp eq i64 %4808, 0
  %4828 = zext i1 %4827 to i8
  %4829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4828, i8* %4829, align 1, !tbaa !2447
  %4830 = lshr i64 %4808, 63
  %4831 = trunc i64 %4830 to i8
  %4832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4831, i8* %4832, align 1, !tbaa !2448
  %4833 = lshr i64 %4804, 63
  %4834 = lshr i64 %4805, 63
  %4835 = xor i64 %4830, %4833
  %4836 = xor i64 %4830, %4834
  %4837 = add nuw nsw i64 %4835, %4836
  %4838 = icmp eq i64 %4837, 2
  %4839 = zext i1 %4838 to i8
  %4840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4839, i8* %4840, align 1, !tbaa !2449
  %4841 = load i64, i64* %RBP
  %4842 = sub i64 %4841, 192
  %4843 = load i64, i64* %PC
  %4844 = add i64 %4843, 7
  store i64 %4844, i64* %PC
  %4845 = inttoptr i64 %4842 to i32*
  %4846 = load i32, i32* %4845
  %4847 = sext i32 %4846 to i64
  store i64 %4847, i64* %RCX, align 8, !tbaa !2428
  %4848 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4849 = load i64, i64* %RAX
  %4850 = load i64, i64* %RCX
  %4851 = mul i64 %4850, 8
  %4852 = add i64 %4851, %4849
  %4853 = load i64, i64* %PC
  %4854 = add i64 %4853, 5
  store i64 %4854, i64* %PC
  %4855 = inttoptr i64 %4852 to double*
  %4856 = load double, double* %4855
  %4857 = bitcast i8* %4848 to double*
  store double %4856, double* %4857, align 1, !tbaa !2453
  %4858 = getelementptr inbounds i8, i8* %4848, i64 8
  %4859 = bitcast i8* %4858 to double*
  store double 0.000000e+00, double* %4859, align 1, !tbaa !2453
  %4860 = load i64, i64* %RBP
  %4861 = sub i64 %4860, 112
  %4862 = load i64, i64* %PC
  %4863 = add i64 %4862, 4
  store i64 %4863, i64* %PC
  %4864 = inttoptr i64 %4861 to i64*
  %4865 = load i64, i64* %4864
  store i64 %4865, i64* %RAX, align 8, !tbaa !2428
  %4866 = load i64, i64* %RBP
  %4867 = sub i64 %4866, 188
  %4868 = load i64, i64* %PC
  %4869 = add i64 %4868, 7
  store i64 %4869, i64* %PC
  %4870 = inttoptr i64 %4867 to i32*
  %4871 = load i32, i32* %4870
  %4872 = sext i32 %4871 to i64
  store i64 %4872, i64* %RCX, align 8, !tbaa !2428
  %4873 = load i64, i64* %RCX
  %4874 = load i64, i64* %PC
  %4875 = add i64 %4874, 7
  store i64 %4875, i64* %PC
  %4876 = sext i64 %4873 to i128
  %4877 = and i128 %4876, -18446744073709551616
  %4878 = zext i64 %4873 to i128
  %4879 = or i128 %4877, %4878
  %4880 = mul nsw i128 33800, %4879
  %4881 = trunc i128 %4880 to i64
  store i64 %4881, i64* %RCX, align 8, !tbaa !2428
  %4882 = sext i64 %4881 to i128
  %4883 = icmp ne i128 %4882, %4880
  %4884 = zext i1 %4883 to i8
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4884, i8* %4885, align 1, !tbaa !2432
  %4886 = trunc i128 %4880 to i32
  %4887 = and i32 %4886, 255
  %4888 = call i32 @llvm.ctpop.i32(i32 %4887) #16
  %4889 = trunc i32 %4888 to i8
  %4890 = and i8 %4889, 1
  %4891 = xor i8 %4890, 1
  %4892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4891, i8* %4892, align 1, !tbaa !2446
  %4893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4893, align 1, !tbaa !2450
  %4894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4894, align 1, !tbaa !2447
  %4895 = lshr i64 %4881, 63
  %4896 = trunc i64 %4895 to i8
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4896, i8* %4897, align 1, !tbaa !2448
  %4898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4884, i8* %4898, align 1, !tbaa !2449
  %4899 = load i64, i64* %RAX
  %4900 = load i64, i64* %RCX
  %4901 = load i64, i64* %PC
  %4902 = add i64 %4901, 3
  store i64 %4902, i64* %PC
  %4903 = add i64 %4900, %4899
  store i64 %4903, i64* %RAX, align 8, !tbaa !2428
  %4904 = icmp ult i64 %4903, %4899
  %4905 = icmp ult i64 %4903, %4900
  %4906 = or i1 %4904, %4905
  %4907 = zext i1 %4906 to i8
  %4908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4907, i8* %4908, align 1, !tbaa !2432
  %4909 = trunc i64 %4903 to i32
  %4910 = and i32 %4909, 255
  %4911 = call i32 @llvm.ctpop.i32(i32 %4910) #16
  %4912 = trunc i32 %4911 to i8
  %4913 = and i8 %4912, 1
  %4914 = xor i8 %4913, 1
  %4915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4914, i8* %4915, align 1, !tbaa !2446
  %4916 = xor i64 %4900, %4899
  %4917 = xor i64 %4916, %4903
  %4918 = lshr i64 %4917, 4
  %4919 = trunc i64 %4918 to i8
  %4920 = and i8 %4919, 1
  %4921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4920, i8* %4921, align 1, !tbaa !2450
  %4922 = icmp eq i64 %4903, 0
  %4923 = zext i1 %4922 to i8
  %4924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4923, i8* %4924, align 1, !tbaa !2447
  %4925 = lshr i64 %4903, 63
  %4926 = trunc i64 %4925 to i8
  %4927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4926, i8* %4927, align 1, !tbaa !2448
  %4928 = lshr i64 %4899, 63
  %4929 = lshr i64 %4900, 63
  %4930 = xor i64 %4925, %4928
  %4931 = xor i64 %4925, %4929
  %4932 = add nuw nsw i64 %4930, %4931
  %4933 = icmp eq i64 %4932, 2
  %4934 = zext i1 %4933 to i8
  %4935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4934, i8* %4935, align 1, !tbaa !2449
  %4936 = load i64, i64* %RBP
  %4937 = sub i64 %4936, 52
  %4938 = load i64, i64* %PC
  %4939 = add i64 %4938, 4
  store i64 %4939, i64* %PC
  %4940 = inttoptr i64 %4937 to i32*
  %4941 = load i32, i32* %4940
  %4942 = sext i32 %4941 to i64
  store i64 %4942, i64* %RCX, align 8, !tbaa !2428
  %4943 = load i64, i64* %RCX
  %4944 = load i64, i64* %PC
  %4945 = add i64 %4944, 7
  store i64 %4945, i64* %PC
  %4946 = sext i64 %4943 to i128
  %4947 = and i128 %4946, -18446744073709551616
  %4948 = zext i64 %4943 to i128
  %4949 = or i128 %4947, %4948
  %4950 = mul nsw i128 520, %4949
  %4951 = trunc i128 %4950 to i64
  store i64 %4951, i64* %RCX, align 8, !tbaa !2428
  %4952 = sext i64 %4951 to i128
  %4953 = icmp ne i128 %4952, %4950
  %4954 = zext i1 %4953 to i8
  %4955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4954, i8* %4955, align 1, !tbaa !2432
  %4956 = trunc i128 %4950 to i32
  %4957 = and i32 %4956, 255
  %4958 = call i32 @llvm.ctpop.i32(i32 %4957) #16
  %4959 = trunc i32 %4958 to i8
  %4960 = and i8 %4959, 1
  %4961 = xor i8 %4960, 1
  %4962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4961, i8* %4962, align 1, !tbaa !2446
  %4963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4963, align 1, !tbaa !2450
  %4964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4964, align 1, !tbaa !2447
  %4965 = lshr i64 %4951, 63
  %4966 = trunc i64 %4965 to i8
  %4967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4966, i8* %4967, align 1, !tbaa !2448
  %4968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4954, i8* %4968, align 1, !tbaa !2449
  %4969 = load i64, i64* %RAX
  %4970 = load i64, i64* %RCX
  %4971 = load i64, i64* %PC
  %4972 = add i64 %4971, 3
  store i64 %4972, i64* %PC
  %4973 = add i64 %4970, %4969
  store i64 %4973, i64* %RAX, align 8, !tbaa !2428
  %4974 = icmp ult i64 %4973, %4969
  %4975 = icmp ult i64 %4973, %4970
  %4976 = or i1 %4974, %4975
  %4977 = zext i1 %4976 to i8
  %4978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4977, i8* %4978, align 1, !tbaa !2432
  %4979 = trunc i64 %4973 to i32
  %4980 = and i32 %4979, 255
  %4981 = call i32 @llvm.ctpop.i32(i32 %4980) #16
  %4982 = trunc i32 %4981 to i8
  %4983 = and i8 %4982, 1
  %4984 = xor i8 %4983, 1
  %4985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4984, i8* %4985, align 1, !tbaa !2446
  %4986 = xor i64 %4970, %4969
  %4987 = xor i64 %4986, %4973
  %4988 = lshr i64 %4987, 4
  %4989 = trunc i64 %4988 to i8
  %4990 = and i8 %4989, 1
  %4991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4990, i8* %4991, align 1, !tbaa !2450
  %4992 = icmp eq i64 %4973, 0
  %4993 = zext i1 %4992 to i8
  %4994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4993, i8* %4994, align 1, !tbaa !2447
  %4995 = lshr i64 %4973, 63
  %4996 = trunc i64 %4995 to i8
  %4997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4996, i8* %4997, align 1, !tbaa !2448
  %4998 = lshr i64 %4969, 63
  %4999 = lshr i64 %4970, 63
  %5000 = xor i64 %4995, %4998
  %5001 = xor i64 %4995, %4999
  %5002 = add nuw nsw i64 %5000, %5001
  %5003 = icmp eq i64 %5002, 2
  %5004 = zext i1 %5003 to i8
  %5005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5004, i8* %5005, align 1, !tbaa !2449
  %5006 = load i64, i64* %RBP
  %5007 = sub i64 %5006, 196
  %5008 = load i64, i64* %PC
  %5009 = add i64 %5008, 7
  store i64 %5009, i64* %PC
  %5010 = inttoptr i64 %5007 to i32*
  %5011 = load i32, i32* %5010
  %5012 = sext i32 %5011 to i64
  store i64 %5012, i64* %RCX, align 8, !tbaa !2428
  %5013 = load i64, i64* %RAX
  %5014 = load i64, i64* %RCX
  %5015 = mul i64 %5014, 8
  %5016 = add i64 %5015, %5013
  %5017 = bitcast %union.vec128_t* %XMM0 to i8*
  %5018 = load i64, i64* %PC
  %5019 = add i64 %5018, 5
  store i64 %5019, i64* %PC
  %5020 = bitcast i8* %5017 to double*
  %5021 = load double, double* %5020, align 1
  %5022 = inttoptr i64 %5016 to double*
  store double %5021, double* %5022
  %5023 = load i64, i64* %RBP
  %5024 = sub i64 %5023, 196
  %5025 = load i64, i64* %PC
  %5026 = add i64 %5025, 6
  store i64 %5026, i64* %PC
  %5027 = inttoptr i64 %5024 to i32*
  %5028 = load i32, i32* %5027
  %5029 = zext i32 %5028 to i64
  store i64 %5029, i64* %RAX, align 8, !tbaa !2428
  %5030 = load i64, i64* %RAX
  %5031 = load i64, i64* %PC
  %5032 = add i64 %5031, 3
  store i64 %5032, i64* %PC
  %5033 = trunc i64 %5030 to i32
  %5034 = add i32 1, %5033
  %5035 = zext i32 %5034 to i64
  store i64 %5035, i64* %RAX, align 8, !tbaa !2428
  %5036 = icmp ult i32 %5034, %5033
  %5037 = icmp ult i32 %5034, 1
  %5038 = or i1 %5036, %5037
  %5039 = zext i1 %5038 to i8
  %5040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5039, i8* %5040, align 1, !tbaa !2432
  %5041 = and i32 %5034, 255
  %5042 = call i32 @llvm.ctpop.i32(i32 %5041) #16
  %5043 = trunc i32 %5042 to i8
  %5044 = and i8 %5043, 1
  %5045 = xor i8 %5044, 1
  %5046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5045, i8* %5046, align 1, !tbaa !2446
  %5047 = xor i64 1, %5030
  %5048 = trunc i64 %5047 to i32
  %5049 = xor i32 %5048, %5034
  %5050 = lshr i32 %5049, 4
  %5051 = trunc i32 %5050 to i8
  %5052 = and i8 %5051, 1
  %5053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5052, i8* %5053, align 1, !tbaa !2450
  %5054 = icmp eq i32 %5034, 0
  %5055 = zext i1 %5054 to i8
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5055, i8* %5056, align 1, !tbaa !2447
  %5057 = lshr i32 %5034, 31
  %5058 = trunc i32 %5057 to i8
  %5059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5058, i8* %5059, align 1, !tbaa !2448
  %5060 = lshr i32 %5033, 31
  %5061 = xor i32 %5057, %5060
  %5062 = add nuw nsw i32 %5061, %5057
  %5063 = icmp eq i32 %5062, 2
  %5064 = zext i1 %5063 to i8
  %5065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5064, i8* %5065, align 1, !tbaa !2449
  %5066 = load i64, i64* %RBP
  %5067 = sub i64 %5066, 196
  %5068 = load i32, i32* %EAX
  %5069 = zext i32 %5068 to i64
  %5070 = load i64, i64* %PC
  %5071 = add i64 %5070, 6
  store i64 %5071, i64* %PC
  %5072 = inttoptr i64 %5067 to i32*
  store i32 %5068, i32* %5072
  %5073 = load i64, i64* %PC
  %5074 = sub i64 %5073, 813
  %5075 = load i64, i64* %PC
  %5076 = add i64 %5075, 5
  store i64 %5076, i64* %PC
  %5077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5074, i64* %5077, align 8, !tbaa !2428
  br label %block_401c20

block_40224b:                                     ; preds = %block_401581
  %5078 = load i64, i64* %RSP
  %5079 = load i64, i64* %PC
  %5080 = add i64 %5079, 4
  store i64 %5080, i64* %PC
  %5081 = add i64 56, %5078
  store i64 %5081, i64* %RSP, align 8, !tbaa !2428
  %5082 = icmp ult i64 %5081, %5078
  %5083 = icmp ult i64 %5081, 56
  %5084 = or i1 %5082, %5083
  %5085 = zext i1 %5084 to i8
  %5086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5085, i8* %5086, align 1, !tbaa !2432
  %5087 = trunc i64 %5081 to i32
  %5088 = and i32 %5087, 255
  %5089 = call i32 @llvm.ctpop.i32(i32 %5088) #16
  %5090 = trunc i32 %5089 to i8
  %5091 = and i8 %5090, 1
  %5092 = xor i8 %5091, 1
  %5093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5092, i8* %5093, align 1, !tbaa !2446
  %5094 = xor i64 56, %5078
  %5095 = xor i64 %5094, %5081
  %5096 = lshr i64 %5095, 4
  %5097 = trunc i64 %5096 to i8
  %5098 = and i8 %5097, 1
  %5099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5098, i8* %5099, align 1, !tbaa !2450
  %5100 = icmp eq i64 %5081, 0
  %5101 = zext i1 %5100 to i8
  %5102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5101, i8* %5102, align 1, !tbaa !2447
  %5103 = lshr i64 %5081, 63
  %5104 = trunc i64 %5103 to i8
  %5105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5104, i8* %5105, align 1, !tbaa !2448
  %5106 = lshr i64 %5078, 63
  %5107 = xor i64 %5103, %5106
  %5108 = add nuw nsw i64 %5107, %5103
  %5109 = icmp eq i64 %5108, 2
  %5110 = zext i1 %5109 to i8
  %5111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5110, i8* %5111, align 1, !tbaa !2449
  %5112 = load i64, i64* %PC
  %5113 = add i64 %5112, 1
  store i64 %5113, i64* %PC
  %5114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5115 = load i64, i64* %5114, align 8, !tbaa !2428
  %5116 = add i64 %5115, 8
  %5117 = inttoptr i64 %5115 to i64*
  %5118 = load i64, i64* %5117
  store i64 %5118, i64* %RBX, align 8, !tbaa !2428
  store i64 %5116, i64* %5114, align 8, !tbaa !2428
  %5119 = load i64, i64* %PC
  %5120 = add i64 %5119, 2
  store i64 %5120, i64* %PC
  %5121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5122 = load i64, i64* %5121, align 8, !tbaa !2428
  %5123 = add i64 %5122, 8
  %5124 = inttoptr i64 %5122 to i64*
  %5125 = load i64, i64* %5124
  store i64 %5125, i64* %R12, align 8, !tbaa !2428
  store i64 %5123, i64* %5121, align 8, !tbaa !2428
  %5126 = load i64, i64* %PC
  %5127 = add i64 %5126, 2
  store i64 %5127, i64* %PC
  %5128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5129 = load i64, i64* %5128, align 8, !tbaa !2428
  %5130 = add i64 %5129, 8
  %5131 = inttoptr i64 %5129 to i64*
  %5132 = load i64, i64* %5131
  store i64 %5132, i64* %R13, align 8, !tbaa !2428
  store i64 %5130, i64* %5128, align 8, !tbaa !2428
  %5133 = load i64, i64* %PC
  %5134 = add i64 %5133, 2
  store i64 %5134, i64* %PC
  %5135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5136 = load i64, i64* %5135, align 8, !tbaa !2428
  %5137 = add i64 %5136, 8
  %5138 = inttoptr i64 %5136 to i64*
  %5139 = load i64, i64* %5138
  store i64 %5139, i64* %R14, align 8, !tbaa !2428
  store i64 %5137, i64* %5135, align 8, !tbaa !2428
  %5140 = load i64, i64* %PC
  %5141 = add i64 %5140, 2
  store i64 %5141, i64* %PC
  %5142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5143 = load i64, i64* %5142, align 8, !tbaa !2428
  %5144 = add i64 %5143, 8
  %5145 = inttoptr i64 %5143 to i64*
  %5146 = load i64, i64* %5145
  store i64 %5146, i64* %R15, align 8, !tbaa !2428
  store i64 %5144, i64* %5142, align 8, !tbaa !2428
  %5147 = load i64, i64* %PC
  %5148 = add i64 %5147, 1
  store i64 %5148, i64* %PC
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5150 = load i64, i64* %5149, align 8, !tbaa !2428
  %5151 = add i64 %5150, 8
  %5152 = inttoptr i64 %5150 to i64*
  %5153 = load i64, i64* %5152
  store i64 %5153, i64* %RBP, align 8, !tbaa !2428
  store i64 %5151, i64* %5149, align 8, !tbaa !2428
  %5154 = load i64, i64* %PC
  %5155 = add i64 %5154, 1
  store i64 %5155, i64* %PC
  %5156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5158 = load i64, i64* %5157, align 8, !tbaa !2428
  %5159 = inttoptr i64 %5158 to i64*
  %5160 = load i64, i64* %5159
  store i64 %5160, i64* %5156, align 8, !tbaa !2428
  %5161 = add i64 %5158, 8
  store i64 %5161, i64* %5157, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_401590:                                     ; preds = %block_401581
  %5162 = load i64, i64* %RBP
  %5163 = sub i64 %5162, 192
  %5164 = load i64, i64* %PC
  %5165 = add i64 %5164, 10
  store i64 %5165, i64* %PC
  %5166 = inttoptr i64 %5163 to i32*
  store i32 0, i32* %5166
  br label %block_40159a

block_4015a9:                                     ; preds = %block_40159a
  %5167 = load i64, i64* %RBP
  %5168 = sub i64 %5167, 196
  %5169 = load i64, i64* %PC
  %5170 = add i64 %5169, 10
  store i64 %5170, i64* %PC
  %5171 = inttoptr i64 %5168 to i32*
  store i32 0, i32* %5171
  br label %block_4015b3

block_402232:                                     ; preds = %block_40159a
  %5172 = load i64, i64* %PC
  %5173 = add i64 %5172, 5
  %5174 = load i64, i64* %PC
  %5175 = add i64 %5174, 5
  store i64 %5175, i64* %PC
  %5176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5173, i64* %5176, align 8, !tbaa !2428
  %5177 = load i64, i64* %RBP
  %5178 = sub i64 %5177, 188
  %5179 = load i64, i64* %PC
  %5180 = add i64 %5179, 6
  store i64 %5180, i64* %PC
  %5181 = inttoptr i64 %5178 to i32*
  %5182 = load i32, i32* %5181
  %5183 = zext i32 %5182 to i64
  store i64 %5183, i64* %RAX, align 8, !tbaa !2428
  %5184 = load i64, i64* %RAX
  %5185 = load i64, i64* %PC
  %5186 = add i64 %5185, 3
  store i64 %5186, i64* %PC
  %5187 = trunc i64 %5184 to i32
  %5188 = add i32 1, %5187
  %5189 = zext i32 %5188 to i64
  store i64 %5189, i64* %RAX, align 8, !tbaa !2428
  %5190 = icmp ult i32 %5188, %5187
  %5191 = icmp ult i32 %5188, 1
  %5192 = or i1 %5190, %5191
  %5193 = zext i1 %5192 to i8
  %5194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5193, i8* %5194, align 1, !tbaa !2432
  %5195 = and i32 %5188, 255
  %5196 = call i32 @llvm.ctpop.i32(i32 %5195) #16
  %5197 = trunc i32 %5196 to i8
  %5198 = and i8 %5197, 1
  %5199 = xor i8 %5198, 1
  %5200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5199, i8* %5200, align 1, !tbaa !2446
  %5201 = xor i64 1, %5184
  %5202 = trunc i64 %5201 to i32
  %5203 = xor i32 %5202, %5188
  %5204 = lshr i32 %5203, 4
  %5205 = trunc i32 %5204 to i8
  %5206 = and i8 %5205, 1
  %5207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5206, i8* %5207, align 1, !tbaa !2450
  %5208 = icmp eq i32 %5188, 0
  %5209 = zext i1 %5208 to i8
  %5210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5209, i8* %5210, align 1, !tbaa !2447
  %5211 = lshr i32 %5188, 31
  %5212 = trunc i32 %5211 to i8
  %5213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5212, i8* %5213, align 1, !tbaa !2448
  %5214 = lshr i32 %5187, 31
  %5215 = xor i32 %5211, %5214
  %5216 = add nuw nsw i32 %5215, %5211
  %5217 = icmp eq i32 %5216, 2
  %5218 = zext i1 %5217 to i8
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5218, i8* %5219, align 1, !tbaa !2449
  %5220 = load i64, i64* %RBP
  %5221 = sub i64 %5220, 188
  %5222 = load i32, i32* %EAX
  %5223 = zext i32 %5222 to i64
  %5224 = load i64, i64* %PC
  %5225 = add i64 %5224, 6
  store i64 %5225, i64* %PC
  %5226 = inttoptr i64 %5221 to i32*
  store i32 %5222, i32* %5226
  %5227 = load i64, i64* %PC
  %5228 = sub i64 %5227, 3269
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 5
  store i64 %5230, i64* %PC
  %5231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5228, i64* %5231, align 8, !tbaa !2428
  br label %block_401581

block_401f52:                                     ; preds = %block_401c20
  %5232 = sub i64 %9986, 48
  %5233 = load i64, i64* %PC
  %5234 = add i64 %5233, 4
  store i64 %5234, i64* %PC
  %5235 = inttoptr i64 %5232 to i32*
  %5236 = load i32, i32* %5235
  %5237 = sext i32 %5236 to i64
  store i64 %5237, i64* %RCX, align 8, !tbaa !2428
  %5238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5239 = load i64, i64* %RAX
  %5240 = load i64, i64* %RCX
  %5241 = mul i64 %5240, 8
  %5242 = add i64 %5241, %5239
  %5243 = load i64, i64* %PC
  %5244 = add i64 %5243, 5
  store i64 %5244, i64* %PC
  %5245 = inttoptr i64 %5242 to double*
  %5246 = load double, double* %5245
  %5247 = bitcast i8* %5238 to double*
  store double %5246, double* %5247, align 1, !tbaa !2453
  %5248 = getelementptr inbounds i8, i8* %5238, i64 8
  %5249 = bitcast i8* %5248 to double*
  store double 0.000000e+00, double* %5249, align 1, !tbaa !2453
  %5250 = load i64, i64* %RBP
  %5251 = sub i64 %5250, 80
  %5252 = load i64, i64* %PC
  %5253 = add i64 %5252, 4
  store i64 %5253, i64* %PC
  %5254 = inttoptr i64 %5251 to i64*
  %5255 = load i64, i64* %5254
  store i64 %5255, i64* %RAX, align 8, !tbaa !2428
  %5256 = load i64, i64* %RBP
  %5257 = sub i64 %5256, 188
  %5258 = load i64, i64* %PC
  %5259 = add i64 %5258, 7
  store i64 %5259, i64* %PC
  %5260 = inttoptr i64 %5257 to i32*
  %5261 = load i32, i32* %5260
  %5262 = sext i32 %5261 to i64
  store i64 %5262, i64* %RCX, align 8, !tbaa !2428
  %5263 = load i64, i64* %RCX
  %5264 = load i64, i64* %PC
  %5265 = add i64 %5264, 7
  store i64 %5265, i64* %PC
  %5266 = sext i64 %5263 to i128
  %5267 = and i128 %5266, -18446744073709551616
  %5268 = zext i64 %5263 to i128
  %5269 = or i128 %5267, %5268
  %5270 = mul nsw i128 520, %5269
  %5271 = trunc i128 %5270 to i64
  store i64 %5271, i64* %RCX, align 8, !tbaa !2428
  %5272 = sext i64 %5271 to i128
  %5273 = icmp ne i128 %5272, %5270
  %5274 = zext i1 %5273 to i8
  %5275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5274, i8* %5275, align 1, !tbaa !2432
  %5276 = trunc i128 %5270 to i32
  %5277 = and i32 %5276, 255
  %5278 = call i32 @llvm.ctpop.i32(i32 %5277) #16
  %5279 = trunc i32 %5278 to i8
  %5280 = and i8 %5279, 1
  %5281 = xor i8 %5280, 1
  %5282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5281, i8* %5282, align 1, !tbaa !2446
  %5283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5283, align 1, !tbaa !2450
  %5284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5284, align 1, !tbaa !2447
  %5285 = lshr i64 %5271, 63
  %5286 = trunc i64 %5285 to i8
  %5287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5286, i8* %5287, align 1, !tbaa !2448
  %5288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5274, i8* %5288, align 1, !tbaa !2449
  %5289 = load i64, i64* %RAX
  %5290 = load i64, i64* %RCX
  %5291 = load i64, i64* %PC
  %5292 = add i64 %5291, 3
  store i64 %5292, i64* %PC
  %5293 = add i64 %5290, %5289
  store i64 %5293, i64* %RAX, align 8, !tbaa !2428
  %5294 = icmp ult i64 %5293, %5289
  %5295 = icmp ult i64 %5293, %5290
  %5296 = or i1 %5294, %5295
  %5297 = zext i1 %5296 to i8
  %5298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5297, i8* %5298, align 1, !tbaa !2432
  %5299 = trunc i64 %5293 to i32
  %5300 = and i32 %5299, 255
  %5301 = call i32 @llvm.ctpop.i32(i32 %5300) #16
  %5302 = trunc i32 %5301 to i8
  %5303 = and i8 %5302, 1
  %5304 = xor i8 %5303, 1
  %5305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5304, i8* %5305, align 1, !tbaa !2446
  %5306 = xor i64 %5290, %5289
  %5307 = xor i64 %5306, %5293
  %5308 = lshr i64 %5307, 4
  %5309 = trunc i64 %5308 to i8
  %5310 = and i8 %5309, 1
  %5311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5310, i8* %5311, align 1, !tbaa !2450
  %5312 = icmp eq i64 %5293, 0
  %5313 = zext i1 %5312 to i8
  %5314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5313, i8* %5314, align 1, !tbaa !2447
  %5315 = lshr i64 %5293, 63
  %5316 = trunc i64 %5315 to i8
  %5317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5316, i8* %5317, align 1, !tbaa !2448
  %5318 = lshr i64 %5289, 63
  %5319 = lshr i64 %5290, 63
  %5320 = xor i64 %5315, %5318
  %5321 = xor i64 %5315, %5319
  %5322 = add nuw nsw i64 %5320, %5321
  %5323 = icmp eq i64 %5322, 2
  %5324 = zext i1 %5323 to i8
  %5325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5324, i8* %5325, align 1, !tbaa !2449
  %5326 = load i64, i64* %RBP
  %5327 = sub i64 %5326, 48
  %5328 = load i64, i64* %PC
  %5329 = add i64 %5328, 4
  store i64 %5329, i64* %PC
  %5330 = inttoptr i64 %5327 to i32*
  %5331 = load i32, i32* %5330
  %5332 = sext i32 %5331 to i64
  store i64 %5332, i64* %RCX, align 8, !tbaa !2428
  %5333 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5334 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5335 = load i64, i64* %RAX
  %5336 = load i64, i64* %RCX
  %5337 = mul i64 %5336, 8
  %5338 = add i64 %5337, %5335
  %5339 = load i64, i64* %PC
  %5340 = add i64 %5339, 5
  store i64 %5340, i64* %PC
  %5341 = bitcast i8* %5334 to double*
  %5342 = load double, double* %5341, align 1
  %5343 = getelementptr inbounds i8, i8* %5334, i64 8
  %5344 = bitcast i8* %5343 to i64*
  %5345 = load i64, i64* %5344, align 1
  %5346 = inttoptr i64 %5338 to double*
  %5347 = load double, double* %5346
  %5348 = fsub double %5342, %5347
  %5349 = bitcast i8* %5333 to double*
  store double %5348, double* %5349, align 1, !tbaa !2453
  %5350 = getelementptr inbounds i8, i8* %5333, i64 8
  %5351 = bitcast i8* %5350 to i64*
  store i64 %5345, i64* %5351, align 1, !tbaa !2453
  %5352 = load i64, i64* %RBP
  %5353 = sub i64 %5352, 88
  %5354 = load i64, i64* %PC
  %5355 = add i64 %5354, 4
  store i64 %5355, i64* %PC
  %5356 = inttoptr i64 %5353 to i64*
  %5357 = load i64, i64* %5356
  store i64 %5357, i64* %RAX, align 8, !tbaa !2428
  %5358 = load i64, i64* %RBP
  %5359 = sub i64 %5358, 188
  %5360 = load i64, i64* %PC
  %5361 = add i64 %5360, 7
  store i64 %5361, i64* %PC
  %5362 = inttoptr i64 %5359 to i32*
  %5363 = load i32, i32* %5362
  %5364 = sext i32 %5363 to i64
  store i64 %5364, i64* %RCX, align 8, !tbaa !2428
  %5365 = load i64, i64* %RCX
  %5366 = load i64, i64* %PC
  %5367 = add i64 %5366, 7
  store i64 %5367, i64* %PC
  %5368 = sext i64 %5365 to i128
  %5369 = and i128 %5368, -18446744073709551616
  %5370 = zext i64 %5365 to i128
  %5371 = or i128 %5369, %5370
  %5372 = mul nsw i128 520, %5371
  %5373 = trunc i128 %5372 to i64
  store i64 %5373, i64* %RCX, align 8, !tbaa !2428
  %5374 = sext i64 %5373 to i128
  %5375 = icmp ne i128 %5374, %5372
  %5376 = zext i1 %5375 to i8
  %5377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5376, i8* %5377, align 1, !tbaa !2432
  %5378 = trunc i128 %5372 to i32
  %5379 = and i32 %5378, 255
  %5380 = call i32 @llvm.ctpop.i32(i32 %5379) #16
  %5381 = trunc i32 %5380 to i8
  %5382 = and i8 %5381, 1
  %5383 = xor i8 %5382, 1
  %5384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5383, i8* %5384, align 1, !tbaa !2446
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5385, align 1, !tbaa !2450
  %5386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5386, align 1, !tbaa !2447
  %5387 = lshr i64 %5373, 63
  %5388 = trunc i64 %5387 to i8
  %5389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5388, i8* %5389, align 1, !tbaa !2448
  %5390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5376, i8* %5390, align 1, !tbaa !2449
  %5391 = load i64, i64* %RAX
  %5392 = load i64, i64* %RCX
  %5393 = load i64, i64* %PC
  %5394 = add i64 %5393, 3
  store i64 %5394, i64* %PC
  %5395 = add i64 %5392, %5391
  store i64 %5395, i64* %RAX, align 8, !tbaa !2428
  %5396 = icmp ult i64 %5395, %5391
  %5397 = icmp ult i64 %5395, %5392
  %5398 = or i1 %5396, %5397
  %5399 = zext i1 %5398 to i8
  %5400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5399, i8* %5400, align 1, !tbaa !2432
  %5401 = trunc i64 %5395 to i32
  %5402 = and i32 %5401, 255
  %5403 = call i32 @llvm.ctpop.i32(i32 %5402) #16
  %5404 = trunc i32 %5403 to i8
  %5405 = and i8 %5404, 1
  %5406 = xor i8 %5405, 1
  %5407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5406, i8* %5407, align 1, !tbaa !2446
  %5408 = xor i64 %5392, %5391
  %5409 = xor i64 %5408, %5395
  %5410 = lshr i64 %5409, 4
  %5411 = trunc i64 %5410 to i8
  %5412 = and i8 %5411, 1
  %5413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5412, i8* %5413, align 1, !tbaa !2450
  %5414 = icmp eq i64 %5395, 0
  %5415 = zext i1 %5414 to i8
  %5416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5415, i8* %5416, align 1, !tbaa !2447
  %5417 = lshr i64 %5395, 63
  %5418 = trunc i64 %5417 to i8
  %5419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5418, i8* %5419, align 1, !tbaa !2448
  %5420 = lshr i64 %5391, 63
  %5421 = lshr i64 %5392, 63
  %5422 = xor i64 %5417, %5420
  %5423 = xor i64 %5417, %5421
  %5424 = add nuw nsw i64 %5422, %5423
  %5425 = icmp eq i64 %5424, 2
  %5426 = zext i1 %5425 to i8
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5426, i8* %5427, align 1, !tbaa !2449
  %5428 = load i64, i64* %RBP
  %5429 = sub i64 %5428, 52
  %5430 = load i64, i64* %PC
  %5431 = add i64 %5430, 4
  store i64 %5431, i64* %PC
  %5432 = inttoptr i64 %5429 to i32*
  %5433 = load i32, i32* %5432
  %5434 = sext i32 %5433 to i64
  store i64 %5434, i64* %RCX, align 8, !tbaa !2428
  %5435 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5437 = load i64, i64* %RAX
  %5438 = load i64, i64* %RCX
  %5439 = mul i64 %5438, 8
  %5440 = add i64 %5439, %5437
  %5441 = load i64, i64* %PC
  %5442 = add i64 %5441, 5
  store i64 %5442, i64* %PC
  %5443 = bitcast i8* %5436 to double*
  %5444 = load double, double* %5443, align 1
  %5445 = getelementptr inbounds i8, i8* %5436, i64 8
  %5446 = bitcast i8* %5445 to i64*
  %5447 = load i64, i64* %5446, align 1
  %5448 = inttoptr i64 %5440 to double*
  %5449 = load double, double* %5448
  %5450 = fadd double %5444, %5449
  %5451 = bitcast i8* %5435 to double*
  store double %5450, double* %5451, align 1, !tbaa !2453
  %5452 = getelementptr inbounds i8, i8* %5435, i64 8
  %5453 = bitcast i8* %5452 to i64*
  store i64 %5447, i64* %5453, align 1, !tbaa !2453
  %5454 = load i64, i64* %RBP
  %5455 = sub i64 %5454, 128
  %5456 = load i64, i64* %PC
  %5457 = add i64 %5456, 4
  store i64 %5457, i64* %PC
  %5458 = inttoptr i64 %5455 to i64*
  %5459 = load i64, i64* %5458
  store i64 %5459, i64* %RAX, align 8, !tbaa !2428
  %5460 = load i64, i64* %RBP
  %5461 = sub i64 %5460, 188
  %5462 = load i64, i64* %PC
  %5463 = add i64 %5462, 7
  store i64 %5463, i64* %PC
  %5464 = inttoptr i64 %5461 to i32*
  %5465 = load i32, i32* %5464
  %5466 = sext i32 %5465 to i64
  store i64 %5466, i64* %RCX, align 8, !tbaa !2428
  %5467 = load i64, i64* %RCX
  %5468 = load i64, i64* %PC
  %5469 = add i64 %5468, 7
  store i64 %5469, i64* %PC
  %5470 = sext i64 %5467 to i128
  %5471 = and i128 %5470, -18446744073709551616
  %5472 = zext i64 %5467 to i128
  %5473 = or i128 %5471, %5472
  %5474 = mul nsw i128 33800, %5473
  %5475 = trunc i128 %5474 to i64
  store i64 %5475, i64* %RCX, align 8, !tbaa !2428
  %5476 = sext i64 %5475 to i128
  %5477 = icmp ne i128 %5476, %5474
  %5478 = zext i1 %5477 to i8
  %5479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5478, i8* %5479, align 1, !tbaa !2432
  %5480 = trunc i128 %5474 to i32
  %5481 = and i32 %5480, 255
  %5482 = call i32 @llvm.ctpop.i32(i32 %5481) #16
  %5483 = trunc i32 %5482 to i8
  %5484 = and i8 %5483, 1
  %5485 = xor i8 %5484, 1
  %5486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5485, i8* %5486, align 1, !tbaa !2446
  %5487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5487, align 1, !tbaa !2450
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5488, align 1, !tbaa !2447
  %5489 = lshr i64 %5475, 63
  %5490 = trunc i64 %5489 to i8
  %5491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5490, i8* %5491, align 1, !tbaa !2448
  %5492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5478, i8* %5492, align 1, !tbaa !2449
  %5493 = load i64, i64* %RAX
  %5494 = load i64, i64* %RCX
  %5495 = load i64, i64* %PC
  %5496 = add i64 %5495, 3
  store i64 %5496, i64* %PC
  %5497 = add i64 %5494, %5493
  store i64 %5497, i64* %RAX, align 8, !tbaa !2428
  %5498 = icmp ult i64 %5497, %5493
  %5499 = icmp ult i64 %5497, %5494
  %5500 = or i1 %5498, %5499
  %5501 = zext i1 %5500 to i8
  %5502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5501, i8* %5502, align 1, !tbaa !2432
  %5503 = trunc i64 %5497 to i32
  %5504 = and i32 %5503, 255
  %5505 = call i32 @llvm.ctpop.i32(i32 %5504) #16
  %5506 = trunc i32 %5505 to i8
  %5507 = and i8 %5506, 1
  %5508 = xor i8 %5507, 1
  %5509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5508, i8* %5509, align 1, !tbaa !2446
  %5510 = xor i64 %5494, %5493
  %5511 = xor i64 %5510, %5497
  %5512 = lshr i64 %5511, 4
  %5513 = trunc i64 %5512 to i8
  %5514 = and i8 %5513, 1
  %5515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5514, i8* %5515, align 1, !tbaa !2450
  %5516 = icmp eq i64 %5497, 0
  %5517 = zext i1 %5516 to i8
  %5518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5517, i8* %5518, align 1, !tbaa !2447
  %5519 = lshr i64 %5497, 63
  %5520 = trunc i64 %5519 to i8
  %5521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5520, i8* %5521, align 1, !tbaa !2448
  %5522 = lshr i64 %5493, 63
  %5523 = lshr i64 %5494, 63
  %5524 = xor i64 %5519, %5522
  %5525 = xor i64 %5519, %5523
  %5526 = add nuw nsw i64 %5524, %5525
  %5527 = icmp eq i64 %5526, 2
  %5528 = zext i1 %5527 to i8
  %5529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5528, i8* %5529, align 1, !tbaa !2449
  %5530 = load i64, i64* %RBP
  %5531 = sub i64 %5530, 52
  %5532 = load i64, i64* %PC
  %5533 = add i64 %5532, 4
  store i64 %5533, i64* %PC
  %5534 = inttoptr i64 %5531 to i32*
  %5535 = load i32, i32* %5534
  %5536 = sext i32 %5535 to i64
  store i64 %5536, i64* %RCX, align 8, !tbaa !2428
  %5537 = load i64, i64* %RCX
  %5538 = load i64, i64* %PC
  %5539 = add i64 %5538, 7
  store i64 %5539, i64* %PC
  %5540 = sext i64 %5537 to i128
  %5541 = and i128 %5540, -18446744073709551616
  %5542 = zext i64 %5537 to i128
  %5543 = or i128 %5541, %5542
  %5544 = mul nsw i128 520, %5543
  %5545 = trunc i128 %5544 to i64
  store i64 %5545, i64* %RCX, align 8, !tbaa !2428
  %5546 = sext i64 %5545 to i128
  %5547 = icmp ne i128 %5546, %5544
  %5548 = zext i1 %5547 to i8
  %5549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5548, i8* %5549, align 1, !tbaa !2432
  %5550 = trunc i128 %5544 to i32
  %5551 = and i32 %5550, 255
  %5552 = call i32 @llvm.ctpop.i32(i32 %5551) #16
  %5553 = trunc i32 %5552 to i8
  %5554 = and i8 %5553, 1
  %5555 = xor i8 %5554, 1
  %5556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5555, i8* %5556, align 1, !tbaa !2446
  %5557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5557, align 1, !tbaa !2450
  %5558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5558, align 1, !tbaa !2447
  %5559 = lshr i64 %5545, 63
  %5560 = trunc i64 %5559 to i8
  %5561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5560, i8* %5561, align 1, !tbaa !2448
  %5562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5548, i8* %5562, align 1, !tbaa !2449
  %5563 = load i64, i64* %RAX
  %5564 = load i64, i64* %RCX
  %5565 = load i64, i64* %PC
  %5566 = add i64 %5565, 3
  store i64 %5566, i64* %PC
  %5567 = add i64 %5564, %5563
  store i64 %5567, i64* %RAX, align 8, !tbaa !2428
  %5568 = icmp ult i64 %5567, %5563
  %5569 = icmp ult i64 %5567, %5564
  %5570 = or i1 %5568, %5569
  %5571 = zext i1 %5570 to i8
  %5572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5571, i8* %5572, align 1, !tbaa !2432
  %5573 = trunc i64 %5567 to i32
  %5574 = and i32 %5573, 255
  %5575 = call i32 @llvm.ctpop.i32(i32 %5574) #16
  %5576 = trunc i32 %5575 to i8
  %5577 = and i8 %5576, 1
  %5578 = xor i8 %5577, 1
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5578, i8* %5579, align 1, !tbaa !2446
  %5580 = xor i64 %5564, %5563
  %5581 = xor i64 %5580, %5567
  %5582 = lshr i64 %5581, 4
  %5583 = trunc i64 %5582 to i8
  %5584 = and i8 %5583, 1
  %5585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5584, i8* %5585, align 1, !tbaa !2450
  %5586 = icmp eq i64 %5567, 0
  %5587 = zext i1 %5586 to i8
  %5588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5587, i8* %5588, align 1, !tbaa !2447
  %5589 = lshr i64 %5567, 63
  %5590 = trunc i64 %5589 to i8
  %5591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5590, i8* %5591, align 1, !tbaa !2448
  %5592 = lshr i64 %5563, 63
  %5593 = lshr i64 %5564, 63
  %5594 = xor i64 %5589, %5592
  %5595 = xor i64 %5589, %5593
  %5596 = add nuw nsw i64 %5594, %5595
  %5597 = icmp eq i64 %5596, 2
  %5598 = zext i1 %5597 to i8
  %5599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5598, i8* %5599, align 1, !tbaa !2449
  %5600 = load i64, i64* %RBP
  %5601 = sub i64 %5600, 48
  %5602 = load i64, i64* %PC
  %5603 = add i64 %5602, 4
  store i64 %5603, i64* %PC
  %5604 = inttoptr i64 %5601 to i32*
  %5605 = load i32, i32* %5604
  %5606 = sext i32 %5605 to i64
  store i64 %5606, i64* %RCX, align 8, !tbaa !2428
  %5607 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5608 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5609 = load i64, i64* %RAX
  %5610 = load i64, i64* %RCX
  %5611 = mul i64 %5610, 8
  %5612 = add i64 %5611, %5609
  %5613 = load i64, i64* %PC
  %5614 = add i64 %5613, 5
  store i64 %5614, i64* %PC
  %5615 = bitcast i8* %5608 to double*
  %5616 = load double, double* %5615, align 1
  %5617 = getelementptr inbounds i8, i8* %5608, i64 8
  %5618 = bitcast i8* %5617 to i64*
  %5619 = load i64, i64* %5618, align 1
  %5620 = inttoptr i64 %5612 to double*
  %5621 = load double, double* %5620
  %5622 = fsub double %5616, %5621
  %5623 = bitcast i8* %5607 to double*
  store double %5622, double* %5623, align 1, !tbaa !2453
  %5624 = getelementptr inbounds i8, i8* %5607, i64 8
  %5625 = bitcast i8* %5624 to i64*
  store i64 %5619, i64* %5625, align 1, !tbaa !2453
  %5626 = load i64, i64* %RBP
  %5627 = sub i64 %5626, 96
  %5628 = load i64, i64* %PC
  %5629 = add i64 %5628, 4
  store i64 %5629, i64* %PC
  %5630 = inttoptr i64 %5627 to i64*
  %5631 = load i64, i64* %5630
  store i64 %5631, i64* %RAX, align 8, !tbaa !2428
  %5632 = load i64, i64* %RBP
  %5633 = sub i64 %5632, 188
  %5634 = load i64, i64* %PC
  %5635 = add i64 %5634, 7
  store i64 %5635, i64* %PC
  %5636 = inttoptr i64 %5633 to i32*
  %5637 = load i32, i32* %5636
  %5638 = sext i32 %5637 to i64
  store i64 %5638, i64* %RCX, align 8, !tbaa !2428
  %5639 = load i64, i64* %RCX
  %5640 = load i64, i64* %PC
  %5641 = add i64 %5640, 7
  store i64 %5641, i64* %PC
  %5642 = sext i64 %5639 to i128
  %5643 = and i128 %5642, -18446744073709551616
  %5644 = zext i64 %5639 to i128
  %5645 = or i128 %5643, %5644
  %5646 = mul nsw i128 520, %5645
  %5647 = trunc i128 %5646 to i64
  store i64 %5647, i64* %RCX, align 8, !tbaa !2428
  %5648 = sext i64 %5647 to i128
  %5649 = icmp ne i128 %5648, %5646
  %5650 = zext i1 %5649 to i8
  %5651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5650, i8* %5651, align 1, !tbaa !2432
  %5652 = trunc i128 %5646 to i32
  %5653 = and i32 %5652, 255
  %5654 = call i32 @llvm.ctpop.i32(i32 %5653) #16
  %5655 = trunc i32 %5654 to i8
  %5656 = and i8 %5655, 1
  %5657 = xor i8 %5656, 1
  %5658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5657, i8* %5658, align 1, !tbaa !2446
  %5659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5659, align 1, !tbaa !2450
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5660, align 1, !tbaa !2447
  %5661 = lshr i64 %5647, 63
  %5662 = trunc i64 %5661 to i8
  %5663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5662, i8* %5663, align 1, !tbaa !2448
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5650, i8* %5664, align 1, !tbaa !2449
  %5665 = load i64, i64* %RAX
  %5666 = load i64, i64* %RCX
  %5667 = load i64, i64* %PC
  %5668 = add i64 %5667, 3
  store i64 %5668, i64* %PC
  %5669 = add i64 %5666, %5665
  store i64 %5669, i64* %RAX, align 8, !tbaa !2428
  %5670 = icmp ult i64 %5669, %5665
  %5671 = icmp ult i64 %5669, %5666
  %5672 = or i1 %5670, %5671
  %5673 = zext i1 %5672 to i8
  %5674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5673, i8* %5674, align 1, !tbaa !2432
  %5675 = trunc i64 %5669 to i32
  %5676 = and i32 %5675, 255
  %5677 = call i32 @llvm.ctpop.i32(i32 %5676) #16
  %5678 = trunc i32 %5677 to i8
  %5679 = and i8 %5678, 1
  %5680 = xor i8 %5679, 1
  %5681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5680, i8* %5681, align 1, !tbaa !2446
  %5682 = xor i64 %5666, %5665
  %5683 = xor i64 %5682, %5669
  %5684 = lshr i64 %5683, 4
  %5685 = trunc i64 %5684 to i8
  %5686 = and i8 %5685, 1
  %5687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5686, i8* %5687, align 1, !tbaa !2450
  %5688 = icmp eq i64 %5669, 0
  %5689 = zext i1 %5688 to i8
  %5690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5689, i8* %5690, align 1, !tbaa !2447
  %5691 = lshr i64 %5669, 63
  %5692 = trunc i64 %5691 to i8
  %5693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5692, i8* %5693, align 1, !tbaa !2448
  %5694 = lshr i64 %5665, 63
  %5695 = lshr i64 %5666, 63
  %5696 = xor i64 %5691, %5694
  %5697 = xor i64 %5691, %5695
  %5698 = add nuw nsw i64 %5696, %5697
  %5699 = icmp eq i64 %5698, 2
  %5700 = zext i1 %5699 to i8
  %5701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5700, i8* %5701, align 1, !tbaa !2449
  %5702 = load i64, i64* %RBP
  %5703 = sub i64 %5702, 192
  %5704 = load i64, i64* %PC
  %5705 = add i64 %5704, 7
  store i64 %5705, i64* %PC
  %5706 = inttoptr i64 %5703 to i32*
  %5707 = load i32, i32* %5706
  %5708 = sext i32 %5707 to i64
  store i64 %5708, i64* %RCX, align 8, !tbaa !2428
  %5709 = load i64, i64* %RAX
  %5710 = load i64, i64* %RCX
  %5711 = mul i64 %5710, 8
  %5712 = add i64 %5711, %5709
  %5713 = bitcast %union.vec128_t* %XMM0 to i8*
  %5714 = load i64, i64* %PC
  %5715 = add i64 %5714, 5
  store i64 %5715, i64* %PC
  %5716 = bitcast i8* %5713 to double*
  %5717 = load double, double* %5716, align 1
  %5718 = inttoptr i64 %5712 to double*
  store double %5717, double* %5718
  %5719 = load i64, i64* %RBP
  %5720 = sub i64 %5719, 176
  %5721 = load i64, i64* %PC
  %5722 = add i64 %5721, 7
  store i64 %5722, i64* %PC
  %5723 = inttoptr i64 %5720 to i64*
  %5724 = load i64, i64* %5723
  store i64 %5724, i64* %RAX, align 8, !tbaa !2428
  %5725 = load i64, i64* %RBP
  %5726 = sub i64 %5725, 52
  %5727 = load i64, i64* %PC
  %5728 = add i64 %5727, 4
  store i64 %5728, i64* %PC
  %5729 = inttoptr i64 %5726 to i32*
  %5730 = load i32, i32* %5729
  %5731 = sext i32 %5730 to i64
  store i64 %5731, i64* %RCX, align 8, !tbaa !2428
  %5732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5733 = load i64, i64* %RAX
  %5734 = load i64, i64* %RCX
  %5735 = mul i64 %5734, 8
  %5736 = add i64 %5735, %5733
  %5737 = load i64, i64* %PC
  %5738 = add i64 %5737, 5
  store i64 %5738, i64* %PC
  %5739 = inttoptr i64 %5736 to double*
  %5740 = load double, double* %5739
  %5741 = bitcast i8* %5732 to double*
  store double %5740, double* %5741, align 1, !tbaa !2453
  %5742 = getelementptr inbounds i8, i8* %5732, i64 8
  %5743 = bitcast i8* %5742 to double*
  store double 0.000000e+00, double* %5743, align 1, !tbaa !2453
  %5744 = load i64, i64* %RBP
  %5745 = sub i64 %5744, 184
  %5746 = load i64, i64* %PC
  %5747 = add i64 %5746, 7
  store i64 %5747, i64* %PC
  %5748 = inttoptr i64 %5745 to i64*
  %5749 = load i64, i64* %5748
  store i64 %5749, i64* %RAX, align 8, !tbaa !2428
  %5750 = load i64, i64* %RBP
  %5751 = sub i64 %5750, 52
  %5752 = load i64, i64* %PC
  %5753 = add i64 %5752, 4
  store i64 %5753, i64* %PC
  %5754 = inttoptr i64 %5751 to i32*
  %5755 = load i32, i32* %5754
  %5756 = sext i32 %5755 to i64
  store i64 %5756, i64* %RCX, align 8, !tbaa !2428
  %5757 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5758 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5759 = load i64, i64* %RAX
  %5760 = load i64, i64* %RCX
  %5761 = mul i64 %5760, 8
  %5762 = add i64 %5761, %5759
  %5763 = load i64, i64* %PC
  %5764 = add i64 %5763, 5
  store i64 %5764, i64* %PC
  %5765 = bitcast i8* %5758 to double*
  %5766 = load double, double* %5765, align 1
  %5767 = getelementptr inbounds i8, i8* %5758, i64 8
  %5768 = bitcast i8* %5767 to i64*
  %5769 = load i64, i64* %5768, align 1
  %5770 = inttoptr i64 %5762 to double*
  %5771 = load double, double* %5770
  %5772 = fdiv double %5766, %5771
  %5773 = bitcast i8* %5757 to double*
  store double %5772, double* %5773, align 1, !tbaa !2453
  %5774 = getelementptr inbounds i8, i8* %5757, i64 8
  %5775 = bitcast i8* %5774 to i64*
  store i64 %5769, i64* %5775, align 1, !tbaa !2453
  %5776 = load i64, i64* %RBP
  %5777 = sub i64 %5776, 112
  %5778 = load i64, i64* %PC
  %5779 = add i64 %5778, 4
  store i64 %5779, i64* %PC
  %5780 = inttoptr i64 %5777 to i64*
  %5781 = load i64, i64* %5780
  store i64 %5781, i64* %RAX, align 8, !tbaa !2428
  %5782 = load i64, i64* %RBP
  %5783 = sub i64 %5782, 188
  %5784 = load i64, i64* %PC
  %5785 = add i64 %5784, 7
  store i64 %5785, i64* %PC
  %5786 = inttoptr i64 %5783 to i32*
  %5787 = load i32, i32* %5786
  %5788 = sext i32 %5787 to i64
  store i64 %5788, i64* %RCX, align 8, !tbaa !2428
  %5789 = load i64, i64* %RCX
  %5790 = load i64, i64* %PC
  %5791 = add i64 %5790, 7
  store i64 %5791, i64* %PC
  %5792 = sext i64 %5789 to i128
  %5793 = and i128 %5792, -18446744073709551616
  %5794 = zext i64 %5789 to i128
  %5795 = or i128 %5793, %5794
  %5796 = mul nsw i128 33800, %5795
  %5797 = trunc i128 %5796 to i64
  store i64 %5797, i64* %RCX, align 8, !tbaa !2428
  %5798 = sext i64 %5797 to i128
  %5799 = icmp ne i128 %5798, %5796
  %5800 = zext i1 %5799 to i8
  %5801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5800, i8* %5801, align 1, !tbaa !2432
  %5802 = trunc i128 %5796 to i32
  %5803 = and i32 %5802, 255
  %5804 = call i32 @llvm.ctpop.i32(i32 %5803) #16
  %5805 = trunc i32 %5804 to i8
  %5806 = and i8 %5805, 1
  %5807 = xor i8 %5806, 1
  %5808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5807, i8* %5808, align 1, !tbaa !2446
  %5809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5809, align 1, !tbaa !2450
  %5810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5810, align 1, !tbaa !2447
  %5811 = lshr i64 %5797, 63
  %5812 = trunc i64 %5811 to i8
  %5813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5812, i8* %5813, align 1, !tbaa !2448
  %5814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5800, i8* %5814, align 1, !tbaa !2449
  %5815 = load i64, i64* %RAX
  %5816 = load i64, i64* %RCX
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 3
  store i64 %5818, i64* %PC
  %5819 = add i64 %5816, %5815
  store i64 %5819, i64* %RAX, align 8, !tbaa !2428
  %5820 = icmp ult i64 %5819, %5815
  %5821 = icmp ult i64 %5819, %5816
  %5822 = or i1 %5820, %5821
  %5823 = zext i1 %5822 to i8
  %5824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5823, i8* %5824, align 1, !tbaa !2432
  %5825 = trunc i64 %5819 to i32
  %5826 = and i32 %5825, 255
  %5827 = call i32 @llvm.ctpop.i32(i32 %5826) #16
  %5828 = trunc i32 %5827 to i8
  %5829 = and i8 %5828, 1
  %5830 = xor i8 %5829, 1
  %5831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5830, i8* %5831, align 1, !tbaa !2446
  %5832 = xor i64 %5816, %5815
  %5833 = xor i64 %5832, %5819
  %5834 = lshr i64 %5833, 4
  %5835 = trunc i64 %5834 to i8
  %5836 = and i8 %5835, 1
  %5837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5836, i8* %5837, align 1, !tbaa !2450
  %5838 = icmp eq i64 %5819, 0
  %5839 = zext i1 %5838 to i8
  %5840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5839, i8* %5840, align 1, !tbaa !2447
  %5841 = lshr i64 %5819, 63
  %5842 = trunc i64 %5841 to i8
  %5843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5842, i8* %5843, align 1, !tbaa !2448
  %5844 = lshr i64 %5815, 63
  %5845 = lshr i64 %5816, 63
  %5846 = xor i64 %5841, %5844
  %5847 = xor i64 %5841, %5845
  %5848 = add nuw nsw i64 %5846, %5847
  %5849 = icmp eq i64 %5848, 2
  %5850 = zext i1 %5849 to i8
  %5851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5850, i8* %5851, align 1, !tbaa !2449
  %5852 = load i64, i64* %RBP
  %5853 = sub i64 %5852, 52
  %5854 = load i64, i64* %PC
  %5855 = add i64 %5854, 4
  store i64 %5855, i64* %PC
  %5856 = inttoptr i64 %5853 to i32*
  %5857 = load i32, i32* %5856
  %5858 = sext i32 %5857 to i64
  store i64 %5858, i64* %RCX, align 8, !tbaa !2428
  %5859 = load i64, i64* %RCX
  %5860 = load i64, i64* %PC
  %5861 = add i64 %5860, 7
  store i64 %5861, i64* %PC
  %5862 = sext i64 %5859 to i128
  %5863 = and i128 %5862, -18446744073709551616
  %5864 = zext i64 %5859 to i128
  %5865 = or i128 %5863, %5864
  %5866 = mul nsw i128 520, %5865
  %5867 = trunc i128 %5866 to i64
  store i64 %5867, i64* %RCX, align 8, !tbaa !2428
  %5868 = sext i64 %5867 to i128
  %5869 = icmp ne i128 %5868, %5866
  %5870 = zext i1 %5869 to i8
  %5871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5870, i8* %5871, align 1, !tbaa !2432
  %5872 = trunc i128 %5866 to i32
  %5873 = and i32 %5872, 255
  %5874 = call i32 @llvm.ctpop.i32(i32 %5873) #16
  %5875 = trunc i32 %5874 to i8
  %5876 = and i8 %5875, 1
  %5877 = xor i8 %5876, 1
  %5878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5877, i8* %5878, align 1, !tbaa !2446
  %5879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5879, align 1, !tbaa !2450
  %5880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5880, align 1, !tbaa !2447
  %5881 = lshr i64 %5867, 63
  %5882 = trunc i64 %5881 to i8
  %5883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5882, i8* %5883, align 1, !tbaa !2448
  %5884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5870, i8* %5884, align 1, !tbaa !2449
  %5885 = load i64, i64* %RAX
  %5886 = load i64, i64* %RCX
  %5887 = load i64, i64* %PC
  %5888 = add i64 %5887, 3
  store i64 %5888, i64* %PC
  %5889 = add i64 %5886, %5885
  store i64 %5889, i64* %RAX, align 8, !tbaa !2428
  %5890 = icmp ult i64 %5889, %5885
  %5891 = icmp ult i64 %5889, %5886
  %5892 = or i1 %5890, %5891
  %5893 = zext i1 %5892 to i8
  %5894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5893, i8* %5894, align 1, !tbaa !2432
  %5895 = trunc i64 %5889 to i32
  %5896 = and i32 %5895, 255
  %5897 = call i32 @llvm.ctpop.i32(i32 %5896) #16
  %5898 = trunc i32 %5897 to i8
  %5899 = and i8 %5898, 1
  %5900 = xor i8 %5899, 1
  %5901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5900, i8* %5901, align 1, !tbaa !2446
  %5902 = xor i64 %5886, %5885
  %5903 = xor i64 %5902, %5889
  %5904 = lshr i64 %5903, 4
  %5905 = trunc i64 %5904 to i8
  %5906 = and i8 %5905, 1
  %5907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5906, i8* %5907, align 1, !tbaa !2450
  %5908 = icmp eq i64 %5889, 0
  %5909 = zext i1 %5908 to i8
  %5910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5909, i8* %5910, align 1, !tbaa !2447
  %5911 = lshr i64 %5889, 63
  %5912 = trunc i64 %5911 to i8
  %5913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5912, i8* %5913, align 1, !tbaa !2448
  %5914 = lshr i64 %5885, 63
  %5915 = lshr i64 %5886, 63
  %5916 = xor i64 %5911, %5914
  %5917 = xor i64 %5911, %5915
  %5918 = add nuw nsw i64 %5916, %5917
  %5919 = icmp eq i64 %5918, 2
  %5920 = zext i1 %5919 to i8
  %5921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5920, i8* %5921, align 1, !tbaa !2449
  %5922 = load i64, i64* %RBP
  %5923 = sub i64 %5922, 48
  %5924 = load i64, i64* %PC
  %5925 = add i64 %5924, 4
  store i64 %5925, i64* %PC
  %5926 = inttoptr i64 %5923 to i32*
  %5927 = load i32, i32* %5926
  %5928 = sext i32 %5927 to i64
  store i64 %5928, i64* %RCX, align 8, !tbaa !2428
  %5929 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5930 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5931 = load i64, i64* %RAX
  %5932 = load i64, i64* %RCX
  %5933 = mul i64 %5932, 8
  %5934 = add i64 %5933, %5931
  %5935 = load i64, i64* %PC
  %5936 = add i64 %5935, 5
  store i64 %5936, i64* %PC
  %5937 = bitcast i8* %5930 to double*
  %5938 = load double, double* %5937, align 1
  %5939 = getelementptr inbounds i8, i8* %5930, i64 8
  %5940 = bitcast i8* %5939 to i64*
  %5941 = load i64, i64* %5940, align 1
  %5942 = inttoptr i64 %5934 to double*
  %5943 = load double, double* %5942
  %5944 = fmul double %5938, %5943
  %5945 = bitcast i8* %5929 to double*
  store double %5944, double* %5945, align 1, !tbaa !2453
  %5946 = getelementptr inbounds i8, i8* %5929, i64 8
  %5947 = bitcast i8* %5946 to i64*
  store i64 %5941, i64* %5947, align 1, !tbaa !2453
  %5948 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5949 = load i64, i64* %RBP
  %5950 = sub i64 %5949, 72
  %5951 = load i64, i64* %PC
  %5952 = add i64 %5951, 5
  store i64 %5952, i64* %PC
  %5953 = inttoptr i64 %5950 to double*
  %5954 = load double, double* %5953
  %5955 = bitcast i8* %5948 to double*
  store double %5954, double* %5955, align 1, !tbaa !2453
  %5956 = getelementptr inbounds i8, i8* %5948, i64 8
  %5957 = bitcast i8* %5956 to double*
  store double 0.000000e+00, double* %5957, align 1, !tbaa !2453
  %5958 = load i64, i64* %RBP
  %5959 = sub i64 %5958, 184
  %5960 = load i64, i64* %PC
  %5961 = add i64 %5960, 7
  store i64 %5961, i64* %PC
  %5962 = inttoptr i64 %5959 to i64*
  %5963 = load i64, i64* %5962
  store i64 %5963, i64* %RAX, align 8, !tbaa !2428
  %5964 = load i64, i64* %RBP
  %5965 = sub i64 %5964, 52
  %5966 = load i64, i64* %PC
  %5967 = add i64 %5966, 4
  store i64 %5967, i64* %PC
  %5968 = inttoptr i64 %5965 to i32*
  %5969 = load i32, i32* %5968
  %5970 = sext i32 %5969 to i64
  store i64 %5970, i64* %RCX, align 8, !tbaa !2428
  %5971 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5972 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5973 = load i64, i64* %RAX
  %5974 = load i64, i64* %RCX
  %5975 = mul i64 %5974, 8
  %5976 = add i64 %5975, %5973
  %5977 = load i64, i64* %PC
  %5978 = add i64 %5977, 5
  store i64 %5978, i64* %PC
  %5979 = bitcast i8* %5972 to double*
  %5980 = load double, double* %5979, align 1
  %5981 = getelementptr inbounds i8, i8* %5972, i64 8
  %5982 = bitcast i8* %5981 to i64*
  %5983 = load i64, i64* %5982, align 1
  %5984 = inttoptr i64 %5976 to double*
  %5985 = load double, double* %5984
  %5986 = fdiv double %5980, %5985
  %5987 = bitcast i8* %5971 to double*
  store double %5986, double* %5987, align 1, !tbaa !2453
  %5988 = getelementptr inbounds i8, i8* %5971, i64 8
  %5989 = bitcast i8* %5988 to i64*
  store i64 %5983, i64* %5989, align 1, !tbaa !2453
  %5990 = load i64, i64* %RBP
  %5991 = sub i64 %5990, 96
  %5992 = load i64, i64* %PC
  %5993 = add i64 %5992, 4
  store i64 %5993, i64* %PC
  %5994 = inttoptr i64 %5991 to i64*
  %5995 = load i64, i64* %5994
  store i64 %5995, i64* %RAX, align 8, !tbaa !2428
  %5996 = load i64, i64* %RBP
  %5997 = sub i64 %5996, 188
  %5998 = load i64, i64* %PC
  %5999 = add i64 %5998, 7
  store i64 %5999, i64* %PC
  %6000 = inttoptr i64 %5997 to i32*
  %6001 = load i32, i32* %6000
  %6002 = sext i32 %6001 to i64
  store i64 %6002, i64* %RCX, align 8, !tbaa !2428
  %6003 = load i64, i64* %RCX
  %6004 = load i64, i64* %PC
  %6005 = add i64 %6004, 7
  store i64 %6005, i64* %PC
  %6006 = sext i64 %6003 to i128
  %6007 = and i128 %6006, -18446744073709551616
  %6008 = zext i64 %6003 to i128
  %6009 = or i128 %6007, %6008
  %6010 = mul nsw i128 520, %6009
  %6011 = trunc i128 %6010 to i64
  store i64 %6011, i64* %RCX, align 8, !tbaa !2428
  %6012 = sext i64 %6011 to i128
  %6013 = icmp ne i128 %6012, %6010
  %6014 = zext i1 %6013 to i8
  %6015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6014, i8* %6015, align 1, !tbaa !2432
  %6016 = trunc i128 %6010 to i32
  %6017 = and i32 %6016, 255
  %6018 = call i32 @llvm.ctpop.i32(i32 %6017) #16
  %6019 = trunc i32 %6018 to i8
  %6020 = and i8 %6019, 1
  %6021 = xor i8 %6020, 1
  %6022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6021, i8* %6022, align 1, !tbaa !2446
  %6023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6023, align 1, !tbaa !2450
  %6024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6024, align 1, !tbaa !2447
  %6025 = lshr i64 %6011, 63
  %6026 = trunc i64 %6025 to i8
  %6027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6026, i8* %6027, align 1, !tbaa !2448
  %6028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6014, i8* %6028, align 1, !tbaa !2449
  %6029 = load i64, i64* %RAX
  %6030 = load i64, i64* %RCX
  %6031 = load i64, i64* %PC
  %6032 = add i64 %6031, 3
  store i64 %6032, i64* %PC
  %6033 = add i64 %6030, %6029
  store i64 %6033, i64* %RAX, align 8, !tbaa !2428
  %6034 = icmp ult i64 %6033, %6029
  %6035 = icmp ult i64 %6033, %6030
  %6036 = or i1 %6034, %6035
  %6037 = zext i1 %6036 to i8
  %6038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6037, i8* %6038, align 1, !tbaa !2432
  %6039 = trunc i64 %6033 to i32
  %6040 = and i32 %6039, 255
  %6041 = call i32 @llvm.ctpop.i32(i32 %6040) #16
  %6042 = trunc i32 %6041 to i8
  %6043 = and i8 %6042, 1
  %6044 = xor i8 %6043, 1
  %6045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6044, i8* %6045, align 1, !tbaa !2446
  %6046 = xor i64 %6030, %6029
  %6047 = xor i64 %6046, %6033
  %6048 = lshr i64 %6047, 4
  %6049 = trunc i64 %6048 to i8
  %6050 = and i8 %6049, 1
  %6051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6050, i8* %6051, align 1, !tbaa !2450
  %6052 = icmp eq i64 %6033, 0
  %6053 = zext i1 %6052 to i8
  %6054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6053, i8* %6054, align 1, !tbaa !2447
  %6055 = lshr i64 %6033, 63
  %6056 = trunc i64 %6055 to i8
  %6057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6056, i8* %6057, align 1, !tbaa !2448
  %6058 = lshr i64 %6029, 63
  %6059 = lshr i64 %6030, 63
  %6060 = xor i64 %6055, %6058
  %6061 = xor i64 %6055, %6059
  %6062 = add nuw nsw i64 %6060, %6061
  %6063 = icmp eq i64 %6062, 2
  %6064 = zext i1 %6063 to i8
  %6065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6064, i8* %6065, align 1, !tbaa !2449
  %6066 = load i64, i64* %RBP
  %6067 = sub i64 %6066, 192
  %6068 = load i64, i64* %PC
  %6069 = add i64 %6068, 7
  store i64 %6069, i64* %PC
  %6070 = inttoptr i64 %6067 to i32*
  %6071 = load i32, i32* %6070
  %6072 = sext i32 %6071 to i64
  store i64 %6072, i64* %RCX, align 8, !tbaa !2428
  %6073 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6074 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6075 = load i64, i64* %RAX
  %6076 = load i64, i64* %RCX
  %6077 = mul i64 %6076, 8
  %6078 = add i64 %6077, %6075
  %6079 = load i64, i64* %PC
  %6080 = add i64 %6079, 5
  store i64 %6080, i64* %PC
  %6081 = bitcast i8* %6074 to double*
  %6082 = load double, double* %6081, align 1
  %6083 = getelementptr inbounds i8, i8* %6074, i64 8
  %6084 = bitcast i8* %6083 to i64*
  %6085 = load i64, i64* %6084, align 1
  %6086 = inttoptr i64 %6078 to double*
  %6087 = load double, double* %6086
  %6088 = fmul double %6082, %6087
  %6089 = bitcast i8* %6073 to double*
  store double %6088, double* %6089, align 1, !tbaa !2453
  %6090 = getelementptr inbounds i8, i8* %6073, i64 8
  %6091 = bitcast i8* %6090 to i64*
  store i64 %6085, i64* %6091, align 1, !tbaa !2453
  %6092 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6094 = bitcast %union.vec128_t* %XMM1 to i8*
  %6095 = load i64, i64* %PC
  %6096 = add i64 %6095, 4
  store i64 %6096, i64* %PC
  %6097 = bitcast i8* %6093 to double*
  %6098 = load double, double* %6097, align 1
  %6099 = getelementptr inbounds i8, i8* %6093, i64 8
  %6100 = bitcast i8* %6099 to i64*
  %6101 = load i64, i64* %6100, align 1
  %6102 = bitcast i8* %6094 to double*
  %6103 = load double, double* %6102, align 1
  %6104 = fsub double %6098, %6103
  %6105 = bitcast i8* %6092 to double*
  store double %6104, double* %6105, align 1, !tbaa !2453
  %6106 = getelementptr inbounds i8, i8* %6092, i64 8
  %6107 = bitcast i8* %6106 to i64*
  store i64 %6101, i64* %6107, align 1, !tbaa !2453
  %6108 = load i64, i64* %RBP
  %6109 = sub i64 %6108, 104
  %6110 = load i64, i64* %PC
  %6111 = add i64 %6110, 4
  store i64 %6111, i64* %PC
  %6112 = inttoptr i64 %6109 to i64*
  %6113 = load i64, i64* %6112
  store i64 %6113, i64* %RAX, align 8, !tbaa !2428
  %6114 = load i64, i64* %RBP
  %6115 = sub i64 %6114, 188
  %6116 = load i64, i64* %PC
  %6117 = add i64 %6116, 7
  store i64 %6117, i64* %PC
  %6118 = inttoptr i64 %6115 to i32*
  %6119 = load i32, i32* %6118
  %6120 = sext i32 %6119 to i64
  store i64 %6120, i64* %RCX, align 8, !tbaa !2428
  %6121 = load i64, i64* %RCX
  %6122 = load i64, i64* %PC
  %6123 = add i64 %6122, 7
  store i64 %6123, i64* %PC
  %6124 = sext i64 %6121 to i128
  %6125 = and i128 %6124, -18446744073709551616
  %6126 = zext i64 %6121 to i128
  %6127 = or i128 %6125, %6126
  %6128 = mul nsw i128 520, %6127
  %6129 = trunc i128 %6128 to i64
  store i64 %6129, i64* %RCX, align 8, !tbaa !2428
  %6130 = sext i64 %6129 to i128
  %6131 = icmp ne i128 %6130, %6128
  %6132 = zext i1 %6131 to i8
  %6133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6132, i8* %6133, align 1, !tbaa !2432
  %6134 = trunc i128 %6128 to i32
  %6135 = and i32 %6134, 255
  %6136 = call i32 @llvm.ctpop.i32(i32 %6135) #16
  %6137 = trunc i32 %6136 to i8
  %6138 = and i8 %6137, 1
  %6139 = xor i8 %6138, 1
  %6140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6139, i8* %6140, align 1, !tbaa !2446
  %6141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6141, align 1, !tbaa !2450
  %6142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6142, align 1, !tbaa !2447
  %6143 = lshr i64 %6129, 63
  %6144 = trunc i64 %6143 to i8
  %6145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6144, i8* %6145, align 1, !tbaa !2448
  %6146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6132, i8* %6146, align 1, !tbaa !2449
  %6147 = load i64, i64* %RAX
  %6148 = load i64, i64* %RCX
  %6149 = load i64, i64* %PC
  %6150 = add i64 %6149, 3
  store i64 %6150, i64* %PC
  %6151 = add i64 %6148, %6147
  store i64 %6151, i64* %RAX, align 8, !tbaa !2428
  %6152 = icmp ult i64 %6151, %6147
  %6153 = icmp ult i64 %6151, %6148
  %6154 = or i1 %6152, %6153
  %6155 = zext i1 %6154 to i8
  %6156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6155, i8* %6156, align 1, !tbaa !2432
  %6157 = trunc i64 %6151 to i32
  %6158 = and i32 %6157, 255
  %6159 = call i32 @llvm.ctpop.i32(i32 %6158) #16
  %6160 = trunc i32 %6159 to i8
  %6161 = and i8 %6160, 1
  %6162 = xor i8 %6161, 1
  %6163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6162, i8* %6163, align 1, !tbaa !2446
  %6164 = xor i64 %6148, %6147
  %6165 = xor i64 %6164, %6151
  %6166 = lshr i64 %6165, 4
  %6167 = trunc i64 %6166 to i8
  %6168 = and i8 %6167, 1
  %6169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6168, i8* %6169, align 1, !tbaa !2450
  %6170 = icmp eq i64 %6151, 0
  %6171 = zext i1 %6170 to i8
  %6172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6171, i8* %6172, align 1, !tbaa !2447
  %6173 = lshr i64 %6151, 63
  %6174 = trunc i64 %6173 to i8
  %6175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6174, i8* %6175, align 1, !tbaa !2448
  %6176 = lshr i64 %6147, 63
  %6177 = lshr i64 %6148, 63
  %6178 = xor i64 %6173, %6176
  %6179 = xor i64 %6173, %6177
  %6180 = add nuw nsw i64 %6178, %6179
  %6181 = icmp eq i64 %6180, 2
  %6182 = zext i1 %6181 to i8
  %6183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6182, i8* %6183, align 1, !tbaa !2449
  %6184 = load i64, i64* %RBP
  %6185 = sub i64 %6184, 192
  %6186 = load i64, i64* %PC
  %6187 = add i64 %6186, 7
  store i64 %6187, i64* %PC
  %6188 = inttoptr i64 %6185 to i32*
  %6189 = load i32, i32* %6188
  %6190 = sext i32 %6189 to i64
  store i64 %6190, i64* %RCX, align 8, !tbaa !2428
  %6191 = load i64, i64* %RAX
  %6192 = load i64, i64* %RCX
  %6193 = mul i64 %6192, 8
  %6194 = add i64 %6193, %6191
  %6195 = bitcast %union.vec128_t* %XMM0 to i8*
  %6196 = load i64, i64* %PC
  %6197 = add i64 %6196, 5
  store i64 %6197, i64* %PC
  %6198 = bitcast i8* %6195 to double*
  %6199 = load double, double* %6198, align 1
  %6200 = inttoptr i64 %6194 to double*
  store double %6199, double* %6200
  %6201 = load i64, i64* %RBP
  %6202 = sub i64 %6201, 160
  %6203 = load i64, i64* %PC
  %6204 = add i64 %6203, 7
  store i64 %6204, i64* %PC
  %6205 = inttoptr i64 %6202 to i64*
  %6206 = load i64, i64* %6205
  store i64 %6206, i64* %RAX, align 8, !tbaa !2428
  %6207 = load i64, i64* %RBP
  %6208 = sub i64 %6207, 48
  %6209 = load i64, i64* %PC
  %6210 = add i64 %6209, 4
  store i64 %6210, i64* %PC
  %6211 = inttoptr i64 %6208 to i32*
  %6212 = load i32, i32* %6211
  %6213 = sext i32 %6212 to i64
  store i64 %6213, i64* %RCX, align 8, !tbaa !2428
  %6214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6215 = load i64, i64* %RAX
  %6216 = load i64, i64* %RCX
  %6217 = mul i64 %6216, 8
  %6218 = add i64 %6217, %6215
  %6219 = load i64, i64* %PC
  %6220 = add i64 %6219, 5
  store i64 %6220, i64* %PC
  %6221 = inttoptr i64 %6218 to double*
  %6222 = load double, double* %6221
  %6223 = bitcast i8* %6214 to double*
  store double %6222, double* %6223, align 1, !tbaa !2453
  %6224 = getelementptr inbounds i8, i8* %6214, i64 8
  %6225 = bitcast i8* %6224 to double*
  store double 0.000000e+00, double* %6225, align 1, !tbaa !2453
  %6226 = load i64, i64* %RBP
  %6227 = sub i64 %6226, 168
  %6228 = load i64, i64* %PC
  %6229 = add i64 %6228, 7
  store i64 %6229, i64* %PC
  %6230 = inttoptr i64 %6227 to i64*
  %6231 = load i64, i64* %6230
  store i64 %6231, i64* %RAX, align 8, !tbaa !2428
  %6232 = load i64, i64* %RBP
  %6233 = sub i64 %6232, 48
  %6234 = load i64, i64* %PC
  %6235 = add i64 %6234, 4
  store i64 %6235, i64* %PC
  %6236 = inttoptr i64 %6233 to i32*
  %6237 = load i32, i32* %6236
  %6238 = sext i32 %6237 to i64
  store i64 %6238, i64* %RCX, align 8, !tbaa !2428
  %6239 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6240 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6241 = load i64, i64* %RAX
  %6242 = load i64, i64* %RCX
  %6243 = mul i64 %6242, 8
  %6244 = add i64 %6243, %6241
  %6245 = load i64, i64* %PC
  %6246 = add i64 %6245, 5
  store i64 %6246, i64* %PC
  %6247 = bitcast i8* %6240 to double*
  %6248 = load double, double* %6247, align 1
  %6249 = getelementptr inbounds i8, i8* %6240, i64 8
  %6250 = bitcast i8* %6249 to i64*
  %6251 = load i64, i64* %6250, align 1
  %6252 = inttoptr i64 %6244 to double*
  %6253 = load double, double* %6252
  %6254 = fdiv double %6248, %6253
  %6255 = bitcast i8* %6239 to double*
  store double %6254, double* %6255, align 1, !tbaa !2453
  %6256 = getelementptr inbounds i8, i8* %6239, i64 8
  %6257 = bitcast i8* %6256 to i64*
  store i64 %6251, i64* %6257, align 1, !tbaa !2453
  %6258 = load i64, i64* %RBP
  %6259 = sub i64 %6258, 136
  %6260 = load i64, i64* %PC
  %6261 = add i64 %6260, 7
  store i64 %6261, i64* %PC
  %6262 = inttoptr i64 %6259 to i64*
  %6263 = load i64, i64* %6262
  store i64 %6263, i64* %RAX, align 8, !tbaa !2428
  %6264 = load i64, i64* %RBP
  %6265 = sub i64 %6264, 188
  %6266 = load i64, i64* %PC
  %6267 = add i64 %6266, 7
  store i64 %6267, i64* %PC
  %6268 = inttoptr i64 %6265 to i32*
  %6269 = load i32, i32* %6268
  %6270 = sext i32 %6269 to i64
  store i64 %6270, i64* %RCX, align 8, !tbaa !2428
  %6271 = load i64, i64* %RCX
  %6272 = load i64, i64* %PC
  %6273 = add i64 %6272, 7
  store i64 %6273, i64* %PC
  %6274 = sext i64 %6271 to i128
  %6275 = and i128 %6274, -18446744073709551616
  %6276 = zext i64 %6271 to i128
  %6277 = or i128 %6275, %6276
  %6278 = mul nsw i128 33800, %6277
  %6279 = trunc i128 %6278 to i64
  store i64 %6279, i64* %RCX, align 8, !tbaa !2428
  %6280 = sext i64 %6279 to i128
  %6281 = icmp ne i128 %6280, %6278
  %6282 = zext i1 %6281 to i8
  %6283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6282, i8* %6283, align 1, !tbaa !2432
  %6284 = trunc i128 %6278 to i32
  %6285 = and i32 %6284, 255
  %6286 = call i32 @llvm.ctpop.i32(i32 %6285) #16
  %6287 = trunc i32 %6286 to i8
  %6288 = and i8 %6287, 1
  %6289 = xor i8 %6288, 1
  %6290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6289, i8* %6290, align 1, !tbaa !2446
  %6291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6291, align 1, !tbaa !2450
  %6292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6292, align 1, !tbaa !2447
  %6293 = lshr i64 %6279, 63
  %6294 = trunc i64 %6293 to i8
  %6295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6294, i8* %6295, align 1, !tbaa !2448
  %6296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6282, i8* %6296, align 1, !tbaa !2449
  %6297 = load i64, i64* %RAX
  %6298 = load i64, i64* %RCX
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 3
  store i64 %6300, i64* %PC
  %6301 = add i64 %6298, %6297
  store i64 %6301, i64* %RAX, align 8, !tbaa !2428
  %6302 = icmp ult i64 %6301, %6297
  %6303 = icmp ult i64 %6301, %6298
  %6304 = or i1 %6302, %6303
  %6305 = zext i1 %6304 to i8
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6305, i8* %6306, align 1, !tbaa !2432
  %6307 = trunc i64 %6301 to i32
  %6308 = and i32 %6307, 255
  %6309 = call i32 @llvm.ctpop.i32(i32 %6308) #16
  %6310 = trunc i32 %6309 to i8
  %6311 = and i8 %6310, 1
  %6312 = xor i8 %6311, 1
  %6313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6312, i8* %6313, align 1, !tbaa !2446
  %6314 = xor i64 %6298, %6297
  %6315 = xor i64 %6314, %6301
  %6316 = lshr i64 %6315, 4
  %6317 = trunc i64 %6316 to i8
  %6318 = and i8 %6317, 1
  %6319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6318, i8* %6319, align 1, !tbaa !2450
  %6320 = icmp eq i64 %6301, 0
  %6321 = zext i1 %6320 to i8
  %6322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6321, i8* %6322, align 1, !tbaa !2447
  %6323 = lshr i64 %6301, 63
  %6324 = trunc i64 %6323 to i8
  %6325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6324, i8* %6325, align 1, !tbaa !2448
  %6326 = lshr i64 %6297, 63
  %6327 = lshr i64 %6298, 63
  %6328 = xor i64 %6323, %6326
  %6329 = xor i64 %6323, %6327
  %6330 = add nuw nsw i64 %6328, %6329
  %6331 = icmp eq i64 %6330, 2
  %6332 = zext i1 %6331 to i8
  %6333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6332, i8* %6333, align 1, !tbaa !2449
  %6334 = load i64, i64* %RBP
  %6335 = sub i64 %6334, 52
  %6336 = load i64, i64* %PC
  %6337 = add i64 %6336, 4
  store i64 %6337, i64* %PC
  %6338 = inttoptr i64 %6335 to i32*
  %6339 = load i32, i32* %6338
  %6340 = sext i32 %6339 to i64
  store i64 %6340, i64* %RCX, align 8, !tbaa !2428
  %6341 = load i64, i64* %RCX
  %6342 = load i64, i64* %PC
  %6343 = add i64 %6342, 7
  store i64 %6343, i64* %PC
  %6344 = sext i64 %6341 to i128
  %6345 = and i128 %6344, -18446744073709551616
  %6346 = zext i64 %6341 to i128
  %6347 = or i128 %6345, %6346
  %6348 = mul nsw i128 520, %6347
  %6349 = trunc i128 %6348 to i64
  store i64 %6349, i64* %RCX, align 8, !tbaa !2428
  %6350 = sext i64 %6349 to i128
  %6351 = icmp ne i128 %6350, %6348
  %6352 = zext i1 %6351 to i8
  %6353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6352, i8* %6353, align 1, !tbaa !2432
  %6354 = trunc i128 %6348 to i32
  %6355 = and i32 %6354, 255
  %6356 = call i32 @llvm.ctpop.i32(i32 %6355) #16
  %6357 = trunc i32 %6356 to i8
  %6358 = and i8 %6357, 1
  %6359 = xor i8 %6358, 1
  %6360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6359, i8* %6360, align 1, !tbaa !2446
  %6361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6361, align 1, !tbaa !2450
  %6362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6362, align 1, !tbaa !2447
  %6363 = lshr i64 %6349, 63
  %6364 = trunc i64 %6363 to i8
  %6365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6364, i8* %6365, align 1, !tbaa !2448
  %6366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6352, i8* %6366, align 1, !tbaa !2449
  %6367 = load i64, i64* %RAX
  %6368 = load i64, i64* %RCX
  %6369 = load i64, i64* %PC
  %6370 = add i64 %6369, 3
  store i64 %6370, i64* %PC
  %6371 = add i64 %6368, %6367
  store i64 %6371, i64* %RAX, align 8, !tbaa !2428
  %6372 = icmp ult i64 %6371, %6367
  %6373 = icmp ult i64 %6371, %6368
  %6374 = or i1 %6372, %6373
  %6375 = zext i1 %6374 to i8
  %6376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6375, i8* %6376, align 1, !tbaa !2432
  %6377 = trunc i64 %6371 to i32
  %6378 = and i32 %6377, 255
  %6379 = call i32 @llvm.ctpop.i32(i32 %6378) #16
  %6380 = trunc i32 %6379 to i8
  %6381 = and i8 %6380, 1
  %6382 = xor i8 %6381, 1
  %6383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6382, i8* %6383, align 1, !tbaa !2446
  %6384 = xor i64 %6368, %6367
  %6385 = xor i64 %6384, %6371
  %6386 = lshr i64 %6385, 4
  %6387 = trunc i64 %6386 to i8
  %6388 = and i8 %6387, 1
  %6389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6388, i8* %6389, align 1, !tbaa !2450
  %6390 = icmp eq i64 %6371, 0
  %6391 = zext i1 %6390 to i8
  %6392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6391, i8* %6392, align 1, !tbaa !2447
  %6393 = lshr i64 %6371, 63
  %6394 = trunc i64 %6393 to i8
  %6395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6394, i8* %6395, align 1, !tbaa !2448
  %6396 = lshr i64 %6367, 63
  %6397 = lshr i64 %6368, 63
  %6398 = xor i64 %6393, %6396
  %6399 = xor i64 %6393, %6397
  %6400 = add nuw nsw i64 %6398, %6399
  %6401 = icmp eq i64 %6400, 2
  %6402 = zext i1 %6401 to i8
  %6403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6402, i8* %6403, align 1, !tbaa !2449
  %6404 = load i64, i64* %RBP
  %6405 = sub i64 %6404, 48
  %6406 = load i64, i64* %PC
  %6407 = add i64 %6406, 4
  store i64 %6407, i64* %PC
  %6408 = inttoptr i64 %6405 to i32*
  %6409 = load i32, i32* %6408
  %6410 = sext i32 %6409 to i64
  store i64 %6410, i64* %RCX, align 8, !tbaa !2428
  %6411 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6412 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6413 = load i64, i64* %RAX
  %6414 = load i64, i64* %RCX
  %6415 = mul i64 %6414, 8
  %6416 = add i64 %6415, %6413
  %6417 = load i64, i64* %PC
  %6418 = add i64 %6417, 5
  store i64 %6418, i64* %PC
  %6419 = bitcast i8* %6412 to double*
  %6420 = load double, double* %6419, align 1
  %6421 = getelementptr inbounds i8, i8* %6412, i64 8
  %6422 = bitcast i8* %6421 to i64*
  %6423 = load i64, i64* %6422, align 1
  %6424 = inttoptr i64 %6416 to double*
  %6425 = load double, double* %6424
  %6426 = fmul double %6420, %6425
  %6427 = bitcast i8* %6411 to double*
  store double %6426, double* %6427, align 1, !tbaa !2453
  %6428 = getelementptr inbounds i8, i8* %6411, i64 8
  %6429 = bitcast i8* %6428 to i64*
  store i64 %6423, i64* %6429, align 1, !tbaa !2453
  %6430 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6431 = load i64, i64* %RBP
  %6432 = sub i64 %6431, 64
  %6433 = load i64, i64* %PC
  %6434 = add i64 %6433, 5
  store i64 %6434, i64* %PC
  %6435 = inttoptr i64 %6432 to double*
  %6436 = load double, double* %6435
  %6437 = bitcast i8* %6430 to double*
  store double %6436, double* %6437, align 1, !tbaa !2453
  %6438 = getelementptr inbounds i8, i8* %6430, i64 8
  %6439 = bitcast i8* %6438 to double*
  store double 0.000000e+00, double* %6439, align 1, !tbaa !2453
  %6440 = load i64, i64* %RBP
  %6441 = sub i64 %6440, 152
  %6442 = load i64, i64* %PC
  %6443 = add i64 %6442, 7
  store i64 %6443, i64* %PC
  %6444 = inttoptr i64 %6441 to i64*
  %6445 = load i64, i64* %6444
  store i64 %6445, i64* %RAX, align 8, !tbaa !2428
  %6446 = load i64, i64* %RBP
  %6447 = sub i64 %6446, 188
  %6448 = load i64, i64* %PC
  %6449 = add i64 %6448, 7
  store i64 %6449, i64* %PC
  %6450 = inttoptr i64 %6447 to i32*
  %6451 = load i32, i32* %6450
  %6452 = sext i32 %6451 to i64
  store i64 %6452, i64* %RCX, align 8, !tbaa !2428
  %6453 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6454 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6455 = load i64, i64* %RAX
  %6456 = load i64, i64* %RCX
  %6457 = mul i64 %6456, 8
  %6458 = add i64 %6457, %6455
  %6459 = load i64, i64* %PC
  %6460 = add i64 %6459, 5
  store i64 %6460, i64* %PC
  %6461 = bitcast i8* %6454 to double*
  %6462 = load double, double* %6461, align 1
  %6463 = getelementptr inbounds i8, i8* %6454, i64 8
  %6464 = bitcast i8* %6463 to i64*
  %6465 = load i64, i64* %6464, align 1
  %6466 = inttoptr i64 %6458 to double*
  %6467 = load double, double* %6466
  %6468 = fmul double %6462, %6467
  %6469 = bitcast i8* %6453 to double*
  store double %6468, double* %6469, align 1, !tbaa !2453
  %6470 = getelementptr inbounds i8, i8* %6453, i64 8
  %6471 = bitcast i8* %6470 to i64*
  store i64 %6465, i64* %6471, align 1, !tbaa !2453
  %6472 = load i64, i64* %RBP
  %6473 = sub i64 %6472, 168
  %6474 = load i64, i64* %PC
  %6475 = add i64 %6474, 7
  store i64 %6475, i64* %PC
  %6476 = inttoptr i64 %6473 to i64*
  %6477 = load i64, i64* %6476
  store i64 %6477, i64* %RAX, align 8, !tbaa !2428
  %6478 = load i64, i64* %RBP
  %6479 = sub i64 %6478, 48
  %6480 = load i64, i64* %PC
  %6481 = add i64 %6480, 4
  store i64 %6481, i64* %PC
  %6482 = inttoptr i64 %6479 to i32*
  %6483 = load i32, i32* %6482
  %6484 = sext i32 %6483 to i64
  store i64 %6484, i64* %RCX, align 8, !tbaa !2428
  %6485 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6486 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6487 = load i64, i64* %RAX
  %6488 = load i64, i64* %RCX
  %6489 = mul i64 %6488, 8
  %6490 = add i64 %6489, %6487
  %6491 = load i64, i64* %PC
  %6492 = add i64 %6491, 5
  store i64 %6492, i64* %PC
  %6493 = bitcast i8* %6486 to double*
  %6494 = load double, double* %6493, align 1
  %6495 = getelementptr inbounds i8, i8* %6486, i64 8
  %6496 = bitcast i8* %6495 to i64*
  %6497 = load i64, i64* %6496, align 1
  %6498 = inttoptr i64 %6490 to double*
  %6499 = load double, double* %6498
  %6500 = fdiv double %6494, %6499
  %6501 = bitcast i8* %6485 to double*
  store double %6500, double* %6501, align 1, !tbaa !2453
  %6502 = getelementptr inbounds i8, i8* %6485, i64 8
  %6503 = bitcast i8* %6502 to i64*
  store i64 %6497, i64* %6503, align 1, !tbaa !2453
  %6504 = load i64, i64* %RBP
  %6505 = sub i64 %6504, 104
  %6506 = load i64, i64* %PC
  %6507 = add i64 %6506, 4
  store i64 %6507, i64* %PC
  %6508 = inttoptr i64 %6505 to i64*
  %6509 = load i64, i64* %6508
  store i64 %6509, i64* %RAX, align 8, !tbaa !2428
  %6510 = load i64, i64* %RBP
  %6511 = sub i64 %6510, 188
  %6512 = load i64, i64* %PC
  %6513 = add i64 %6512, 7
  store i64 %6513, i64* %PC
  %6514 = inttoptr i64 %6511 to i32*
  %6515 = load i32, i32* %6514
  %6516 = sext i32 %6515 to i64
  store i64 %6516, i64* %RCX, align 8, !tbaa !2428
  %6517 = load i64, i64* %RCX
  %6518 = load i64, i64* %PC
  %6519 = add i64 %6518, 7
  store i64 %6519, i64* %PC
  %6520 = sext i64 %6517 to i128
  %6521 = and i128 %6520, -18446744073709551616
  %6522 = zext i64 %6517 to i128
  %6523 = or i128 %6521, %6522
  %6524 = mul nsw i128 520, %6523
  %6525 = trunc i128 %6524 to i64
  store i64 %6525, i64* %RCX, align 8, !tbaa !2428
  %6526 = sext i64 %6525 to i128
  %6527 = icmp ne i128 %6526, %6524
  %6528 = zext i1 %6527 to i8
  %6529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6528, i8* %6529, align 1, !tbaa !2432
  %6530 = trunc i128 %6524 to i32
  %6531 = and i32 %6530, 255
  %6532 = call i32 @llvm.ctpop.i32(i32 %6531) #16
  %6533 = trunc i32 %6532 to i8
  %6534 = and i8 %6533, 1
  %6535 = xor i8 %6534, 1
  %6536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6535, i8* %6536, align 1, !tbaa !2446
  %6537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6537, align 1, !tbaa !2450
  %6538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6538, align 1, !tbaa !2447
  %6539 = lshr i64 %6525, 63
  %6540 = trunc i64 %6539 to i8
  %6541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6540, i8* %6541, align 1, !tbaa !2448
  %6542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6528, i8* %6542, align 1, !tbaa !2449
  %6543 = load i64, i64* %RAX
  %6544 = load i64, i64* %RCX
  %6545 = load i64, i64* %PC
  %6546 = add i64 %6545, 3
  store i64 %6546, i64* %PC
  %6547 = add i64 %6544, %6543
  store i64 %6547, i64* %RAX, align 8, !tbaa !2428
  %6548 = icmp ult i64 %6547, %6543
  %6549 = icmp ult i64 %6547, %6544
  %6550 = or i1 %6548, %6549
  %6551 = zext i1 %6550 to i8
  %6552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6551, i8* %6552, align 1, !tbaa !2432
  %6553 = trunc i64 %6547 to i32
  %6554 = and i32 %6553, 255
  %6555 = call i32 @llvm.ctpop.i32(i32 %6554) #16
  %6556 = trunc i32 %6555 to i8
  %6557 = and i8 %6556, 1
  %6558 = xor i8 %6557, 1
  %6559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6558, i8* %6559, align 1, !tbaa !2446
  %6560 = xor i64 %6544, %6543
  %6561 = xor i64 %6560, %6547
  %6562 = lshr i64 %6561, 4
  %6563 = trunc i64 %6562 to i8
  %6564 = and i8 %6563, 1
  %6565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6564, i8* %6565, align 1, !tbaa !2450
  %6566 = icmp eq i64 %6547, 0
  %6567 = zext i1 %6566 to i8
  %6568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6567, i8* %6568, align 1, !tbaa !2447
  %6569 = lshr i64 %6547, 63
  %6570 = trunc i64 %6569 to i8
  %6571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6570, i8* %6571, align 1, !tbaa !2448
  %6572 = lshr i64 %6543, 63
  %6573 = lshr i64 %6544, 63
  %6574 = xor i64 %6569, %6572
  %6575 = xor i64 %6569, %6573
  %6576 = add nuw nsw i64 %6574, %6575
  %6577 = icmp eq i64 %6576, 2
  %6578 = zext i1 %6577 to i8
  %6579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6578, i8* %6579, align 1, !tbaa !2449
  %6580 = load i64, i64* %RBP
  %6581 = sub i64 %6580, 192
  %6582 = load i64, i64* %PC
  %6583 = add i64 %6582, 7
  store i64 %6583, i64* %PC
  %6584 = inttoptr i64 %6581 to i32*
  %6585 = load i32, i32* %6584
  %6586 = sext i32 %6585 to i64
  store i64 %6586, i64* %RCX, align 8, !tbaa !2428
  %6587 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6589 = load i64, i64* %RAX
  %6590 = load i64, i64* %RCX
  %6591 = mul i64 %6590, 8
  %6592 = add i64 %6591, %6589
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 5
  store i64 %6594, i64* %PC
  %6595 = bitcast i8* %6588 to double*
  %6596 = load double, double* %6595, align 1
  %6597 = getelementptr inbounds i8, i8* %6588, i64 8
  %6598 = bitcast i8* %6597 to i64*
  %6599 = load i64, i64* %6598, align 1
  %6600 = inttoptr i64 %6592 to double*
  %6601 = load double, double* %6600
  %6602 = fmul double %6596, %6601
  %6603 = bitcast i8* %6587 to double*
  store double %6602, double* %6603, align 1, !tbaa !2453
  %6604 = getelementptr inbounds i8, i8* %6587, i64 8
  %6605 = bitcast i8* %6604 to i64*
  store i64 %6599, i64* %6605, align 1, !tbaa !2453
  %6606 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6607 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6608 = bitcast %union.vec128_t* %XMM1 to i8*
  %6609 = load i64, i64* %PC
  %6610 = add i64 %6609, 4
  store i64 %6610, i64* %PC
  %6611 = bitcast i8* %6607 to double*
  %6612 = load double, double* %6611, align 1
  %6613 = getelementptr inbounds i8, i8* %6607, i64 8
  %6614 = bitcast i8* %6613 to i64*
  %6615 = load i64, i64* %6614, align 1
  %6616 = bitcast i8* %6608 to double*
  %6617 = load double, double* %6616, align 1
  %6618 = fadd double %6612, %6617
  %6619 = bitcast i8* %6606 to double*
  store double %6618, double* %6619, align 1, !tbaa !2453
  %6620 = getelementptr inbounds i8, i8* %6606, i64 8
  %6621 = bitcast i8* %6620 to i64*
  store i64 %6615, i64* %6621, align 1, !tbaa !2453
  %6622 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6623 = load i64, i64* %RBP
  %6624 = sub i64 %6623, 64
  %6625 = load i64, i64* %PC
  %6626 = add i64 %6625, 5
  store i64 %6626, i64* %PC
  %6627 = inttoptr i64 %6624 to double*
  %6628 = load double, double* %6627
  %6629 = bitcast i8* %6622 to double*
  store double %6628, double* %6629, align 1, !tbaa !2453
  %6630 = getelementptr inbounds i8, i8* %6622, i64 8
  %6631 = bitcast i8* %6630 to double*
  store double 0.000000e+00, double* %6631, align 1, !tbaa !2453
  %6632 = load i64, i64* %RBP
  %6633 = sub i64 %6632, 144
  %6634 = load i64, i64* %PC
  %6635 = add i64 %6634, 7
  store i64 %6635, i64* %PC
  %6636 = inttoptr i64 %6633 to i64*
  %6637 = load i64, i64* %6636
  store i64 %6637, i64* %RAX, align 8, !tbaa !2428
  %6638 = load i64, i64* %RBP
  %6639 = sub i64 %6638, 188
  %6640 = load i64, i64* %PC
  %6641 = add i64 %6640, 7
  store i64 %6641, i64* %PC
  %6642 = inttoptr i64 %6639 to i32*
  %6643 = load i32, i32* %6642
  %6644 = sext i32 %6643 to i64
  store i64 %6644, i64* %RCX, align 8, !tbaa !2428
  %6645 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6646 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6647 = load i64, i64* %RAX
  %6648 = load i64, i64* %RCX
  %6649 = mul i64 %6648, 8
  %6650 = add i64 %6649, %6647
  %6651 = load i64, i64* %PC
  %6652 = add i64 %6651, 5
  store i64 %6652, i64* %PC
  %6653 = bitcast i8* %6646 to double*
  %6654 = load double, double* %6653, align 1
  %6655 = getelementptr inbounds i8, i8* %6646, i64 8
  %6656 = bitcast i8* %6655 to i64*
  %6657 = load i64, i64* %6656, align 1
  %6658 = inttoptr i64 %6650 to double*
  %6659 = load double, double* %6658
  %6660 = fmul double %6654, %6659
  %6661 = bitcast i8* %6645 to double*
  store double %6660, double* %6661, align 1, !tbaa !2453
  %6662 = getelementptr inbounds i8, i8* %6645, i64 8
  %6663 = bitcast i8* %6662 to i64*
  store i64 %6657, i64* %6663, align 1, !tbaa !2453
  %6664 = load i64, i64* %RBP
  %6665 = sub i64 %6664, 168
  %6666 = load i64, i64* %PC
  %6667 = add i64 %6666, 7
  store i64 %6667, i64* %PC
  %6668 = inttoptr i64 %6665 to i64*
  %6669 = load i64, i64* %6668
  store i64 %6669, i64* %RAX, align 8, !tbaa !2428
  %6670 = load i64, i64* %RBP
  %6671 = sub i64 %6670, 48
  %6672 = load i64, i64* %PC
  %6673 = add i64 %6672, 4
  store i64 %6673, i64* %PC
  %6674 = inttoptr i64 %6671 to i32*
  %6675 = load i32, i32* %6674
  %6676 = sext i32 %6675 to i64
  store i64 %6676, i64* %RCX, align 8, !tbaa !2428
  %6677 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6678 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6679 = load i64, i64* %RAX
  %6680 = load i64, i64* %RCX
  %6681 = mul i64 %6680, 8
  %6682 = add i64 %6681, %6679
  %6683 = load i64, i64* %PC
  %6684 = add i64 %6683, 5
  store i64 %6684, i64* %PC
  %6685 = bitcast i8* %6678 to double*
  %6686 = load double, double* %6685, align 1
  %6687 = getelementptr inbounds i8, i8* %6678, i64 8
  %6688 = bitcast i8* %6687 to i64*
  %6689 = load i64, i64* %6688, align 1
  %6690 = inttoptr i64 %6682 to double*
  %6691 = load double, double* %6690
  %6692 = fdiv double %6686, %6691
  %6693 = bitcast i8* %6677 to double*
  store double %6692, double* %6693, align 1, !tbaa !2453
  %6694 = getelementptr inbounds i8, i8* %6677, i64 8
  %6695 = bitcast i8* %6694 to i64*
  store i64 %6689, i64* %6695, align 1, !tbaa !2453
  %6696 = load i64, i64* %RBP
  %6697 = sub i64 %6696, 112
  %6698 = load i64, i64* %PC
  %6699 = add i64 %6698, 4
  store i64 %6699, i64* %PC
  %6700 = inttoptr i64 %6697 to i64*
  %6701 = load i64, i64* %6700
  store i64 %6701, i64* %RAX, align 8, !tbaa !2428
  %6702 = load i64, i64* %RBP
  %6703 = sub i64 %6702, 188
  %6704 = load i64, i64* %PC
  %6705 = add i64 %6704, 7
  store i64 %6705, i64* %PC
  %6706 = inttoptr i64 %6703 to i32*
  %6707 = load i32, i32* %6706
  %6708 = sext i32 %6707 to i64
  store i64 %6708, i64* %RCX, align 8, !tbaa !2428
  %6709 = load i64, i64* %RCX
  %6710 = load i64, i64* %PC
  %6711 = add i64 %6710, 7
  store i64 %6711, i64* %PC
  %6712 = sext i64 %6709 to i128
  %6713 = and i128 %6712, -18446744073709551616
  %6714 = zext i64 %6709 to i128
  %6715 = or i128 %6713, %6714
  %6716 = mul nsw i128 33800, %6715
  %6717 = trunc i128 %6716 to i64
  store i64 %6717, i64* %RCX, align 8, !tbaa !2428
  %6718 = sext i64 %6717 to i128
  %6719 = icmp ne i128 %6718, %6716
  %6720 = zext i1 %6719 to i8
  %6721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6720, i8* %6721, align 1, !tbaa !2432
  %6722 = trunc i128 %6716 to i32
  %6723 = and i32 %6722, 255
  %6724 = call i32 @llvm.ctpop.i32(i32 %6723) #16
  %6725 = trunc i32 %6724 to i8
  %6726 = and i8 %6725, 1
  %6727 = xor i8 %6726, 1
  %6728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6727, i8* %6728, align 1, !tbaa !2446
  %6729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6729, align 1, !tbaa !2450
  %6730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6730, align 1, !tbaa !2447
  %6731 = lshr i64 %6717, 63
  %6732 = trunc i64 %6731 to i8
  %6733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6732, i8* %6733, align 1, !tbaa !2448
  %6734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6720, i8* %6734, align 1, !tbaa !2449
  %6735 = load i64, i64* %RAX
  %6736 = load i64, i64* %RCX
  %6737 = load i64, i64* %PC
  %6738 = add i64 %6737, 3
  store i64 %6738, i64* %PC
  %6739 = add i64 %6736, %6735
  store i64 %6739, i64* %RAX, align 8, !tbaa !2428
  %6740 = icmp ult i64 %6739, %6735
  %6741 = icmp ult i64 %6739, %6736
  %6742 = or i1 %6740, %6741
  %6743 = zext i1 %6742 to i8
  %6744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6743, i8* %6744, align 1, !tbaa !2432
  %6745 = trunc i64 %6739 to i32
  %6746 = and i32 %6745, 255
  %6747 = call i32 @llvm.ctpop.i32(i32 %6746) #16
  %6748 = trunc i32 %6747 to i8
  %6749 = and i8 %6748, 1
  %6750 = xor i8 %6749, 1
  %6751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6750, i8* %6751, align 1, !tbaa !2446
  %6752 = xor i64 %6736, %6735
  %6753 = xor i64 %6752, %6739
  %6754 = lshr i64 %6753, 4
  %6755 = trunc i64 %6754 to i8
  %6756 = and i8 %6755, 1
  %6757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6756, i8* %6757, align 1, !tbaa !2450
  %6758 = icmp eq i64 %6739, 0
  %6759 = zext i1 %6758 to i8
  %6760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6759, i8* %6760, align 1, !tbaa !2447
  %6761 = lshr i64 %6739, 63
  %6762 = trunc i64 %6761 to i8
  %6763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6762, i8* %6763, align 1, !tbaa !2448
  %6764 = lshr i64 %6735, 63
  %6765 = lshr i64 %6736, 63
  %6766 = xor i64 %6761, %6764
  %6767 = xor i64 %6761, %6765
  %6768 = add nuw nsw i64 %6766, %6767
  %6769 = icmp eq i64 %6768, 2
  %6770 = zext i1 %6769 to i8
  %6771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6770, i8* %6771, align 1, !tbaa !2449
  %6772 = load i64, i64* %RBP
  %6773 = sub i64 %6772, 52
  %6774 = load i64, i64* %PC
  %6775 = add i64 %6774, 4
  store i64 %6775, i64* %PC
  %6776 = inttoptr i64 %6773 to i32*
  %6777 = load i32, i32* %6776
  %6778 = sext i32 %6777 to i64
  store i64 %6778, i64* %RCX, align 8, !tbaa !2428
  %6779 = load i64, i64* %RCX
  %6780 = load i64, i64* %PC
  %6781 = add i64 %6780, 7
  store i64 %6781, i64* %PC
  %6782 = sext i64 %6779 to i128
  %6783 = and i128 %6782, -18446744073709551616
  %6784 = zext i64 %6779 to i128
  %6785 = or i128 %6783, %6784
  %6786 = mul nsw i128 520, %6785
  %6787 = trunc i128 %6786 to i64
  store i64 %6787, i64* %RCX, align 8, !tbaa !2428
  %6788 = sext i64 %6787 to i128
  %6789 = icmp ne i128 %6788, %6786
  %6790 = zext i1 %6789 to i8
  %6791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6790, i8* %6791, align 1, !tbaa !2432
  %6792 = trunc i128 %6786 to i32
  %6793 = and i32 %6792, 255
  %6794 = call i32 @llvm.ctpop.i32(i32 %6793) #16
  %6795 = trunc i32 %6794 to i8
  %6796 = and i8 %6795, 1
  %6797 = xor i8 %6796, 1
  %6798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6797, i8* %6798, align 1, !tbaa !2446
  %6799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6799, align 1, !tbaa !2450
  %6800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6800, align 1, !tbaa !2447
  %6801 = lshr i64 %6787, 63
  %6802 = trunc i64 %6801 to i8
  %6803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6802, i8* %6803, align 1, !tbaa !2448
  %6804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6790, i8* %6804, align 1, !tbaa !2449
  %6805 = load i64, i64* %RAX
  %6806 = load i64, i64* %RCX
  %6807 = load i64, i64* %PC
  %6808 = add i64 %6807, 3
  store i64 %6808, i64* %PC
  %6809 = add i64 %6806, %6805
  store i64 %6809, i64* %RAX, align 8, !tbaa !2428
  %6810 = icmp ult i64 %6809, %6805
  %6811 = icmp ult i64 %6809, %6806
  %6812 = or i1 %6810, %6811
  %6813 = zext i1 %6812 to i8
  %6814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6813, i8* %6814, align 1, !tbaa !2432
  %6815 = trunc i64 %6809 to i32
  %6816 = and i32 %6815, 255
  %6817 = call i32 @llvm.ctpop.i32(i32 %6816) #16
  %6818 = trunc i32 %6817 to i8
  %6819 = and i8 %6818, 1
  %6820 = xor i8 %6819, 1
  %6821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6820, i8* %6821, align 1, !tbaa !2446
  %6822 = xor i64 %6806, %6805
  %6823 = xor i64 %6822, %6809
  %6824 = lshr i64 %6823, 4
  %6825 = trunc i64 %6824 to i8
  %6826 = and i8 %6825, 1
  %6827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6826, i8* %6827, align 1, !tbaa !2450
  %6828 = icmp eq i64 %6809, 0
  %6829 = zext i1 %6828 to i8
  %6830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6829, i8* %6830, align 1, !tbaa !2447
  %6831 = lshr i64 %6809, 63
  %6832 = trunc i64 %6831 to i8
  %6833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6832, i8* %6833, align 1, !tbaa !2448
  %6834 = lshr i64 %6805, 63
  %6835 = lshr i64 %6806, 63
  %6836 = xor i64 %6831, %6834
  %6837 = xor i64 %6831, %6835
  %6838 = add nuw nsw i64 %6836, %6837
  %6839 = icmp eq i64 %6838, 2
  %6840 = zext i1 %6839 to i8
  %6841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6840, i8* %6841, align 1, !tbaa !2449
  %6842 = load i64, i64* %RBP
  %6843 = sub i64 %6842, 48
  %6844 = load i64, i64* %PC
  %6845 = add i64 %6844, 4
  store i64 %6845, i64* %PC
  %6846 = inttoptr i64 %6843 to i32*
  %6847 = load i32, i32* %6846
  %6848 = sext i32 %6847 to i64
  store i64 %6848, i64* %RCX, align 8, !tbaa !2428
  %6849 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6850 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6851 = load i64, i64* %RAX
  %6852 = load i64, i64* %RCX
  %6853 = mul i64 %6852, 8
  %6854 = add i64 %6853, %6851
  %6855 = load i64, i64* %PC
  %6856 = add i64 %6855, 5
  store i64 %6856, i64* %PC
  %6857 = bitcast i8* %6850 to double*
  %6858 = load double, double* %6857, align 1
  %6859 = getelementptr inbounds i8, i8* %6850, i64 8
  %6860 = bitcast i8* %6859 to i64*
  %6861 = load i64, i64* %6860, align 1
  %6862 = inttoptr i64 %6854 to double*
  %6863 = load double, double* %6862
  %6864 = fmul double %6858, %6863
  %6865 = bitcast i8* %6849 to double*
  store double %6864, double* %6865, align 1, !tbaa !2453
  %6866 = getelementptr inbounds i8, i8* %6849, i64 8
  %6867 = bitcast i8* %6866 to i64*
  store i64 %6861, i64* %6867, align 1, !tbaa !2453
  %6868 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6869 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6870 = bitcast %union.vec128_t* %XMM1 to i8*
  %6871 = load i64, i64* %PC
  %6872 = add i64 %6871, 4
  store i64 %6872, i64* %PC
  %6873 = bitcast i8* %6869 to double*
  %6874 = load double, double* %6873, align 1
  %6875 = getelementptr inbounds i8, i8* %6869, i64 8
  %6876 = bitcast i8* %6875 to i64*
  %6877 = load i64, i64* %6876, align 1
  %6878 = bitcast i8* %6870 to double*
  %6879 = load double, double* %6878, align 1
  %6880 = fsub double %6874, %6879
  %6881 = bitcast i8* %6868 to double*
  store double %6880, double* %6881, align 1, !tbaa !2453
  %6882 = getelementptr inbounds i8, i8* %6868, i64 8
  %6883 = bitcast i8* %6882 to i64*
  store i64 %6877, i64* %6883, align 1, !tbaa !2453
  %6884 = load i64, i64* %RBP
  %6885 = sub i64 %6884, 136
  %6886 = load i64, i64* %PC
  %6887 = add i64 %6886, 7
  store i64 %6887, i64* %PC
  %6888 = inttoptr i64 %6885 to i64*
  %6889 = load i64, i64* %6888
  store i64 %6889, i64* %RAX, align 8, !tbaa !2428
  %6890 = load i64, i64* %RBP
  %6891 = sub i64 %6890, 188
  %6892 = load i64, i64* %PC
  %6893 = add i64 %6892, 7
  store i64 %6893, i64* %PC
  %6894 = inttoptr i64 %6891 to i32*
  %6895 = load i32, i32* %6894
  %6896 = sext i32 %6895 to i64
  store i64 %6896, i64* %RCX, align 8, !tbaa !2428
  %6897 = load i64, i64* %RCX
  %6898 = load i64, i64* %PC
  %6899 = add i64 %6898, 7
  store i64 %6899, i64* %PC
  %6900 = sext i64 %6897 to i128
  %6901 = and i128 %6900, -18446744073709551616
  %6902 = zext i64 %6897 to i128
  %6903 = or i128 %6901, %6902
  %6904 = mul nsw i128 33800, %6903
  %6905 = trunc i128 %6904 to i64
  store i64 %6905, i64* %RCX, align 8, !tbaa !2428
  %6906 = sext i64 %6905 to i128
  %6907 = icmp ne i128 %6906, %6904
  %6908 = zext i1 %6907 to i8
  %6909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6908, i8* %6909, align 1, !tbaa !2432
  %6910 = trunc i128 %6904 to i32
  %6911 = and i32 %6910, 255
  %6912 = call i32 @llvm.ctpop.i32(i32 %6911) #16
  %6913 = trunc i32 %6912 to i8
  %6914 = and i8 %6913, 1
  %6915 = xor i8 %6914, 1
  %6916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6915, i8* %6916, align 1, !tbaa !2446
  %6917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6917, align 1, !tbaa !2450
  %6918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6918, align 1, !tbaa !2447
  %6919 = lshr i64 %6905, 63
  %6920 = trunc i64 %6919 to i8
  %6921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6920, i8* %6921, align 1, !tbaa !2448
  %6922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6908, i8* %6922, align 1, !tbaa !2449
  %6923 = load i64, i64* %RAX
  %6924 = load i64, i64* %RCX
  %6925 = load i64, i64* %PC
  %6926 = add i64 %6925, 3
  store i64 %6926, i64* %PC
  %6927 = add i64 %6924, %6923
  store i64 %6927, i64* %RAX, align 8, !tbaa !2428
  %6928 = icmp ult i64 %6927, %6923
  %6929 = icmp ult i64 %6927, %6924
  %6930 = or i1 %6928, %6929
  %6931 = zext i1 %6930 to i8
  %6932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6931, i8* %6932, align 1, !tbaa !2432
  %6933 = trunc i64 %6927 to i32
  %6934 = and i32 %6933, 255
  %6935 = call i32 @llvm.ctpop.i32(i32 %6934) #16
  %6936 = trunc i32 %6935 to i8
  %6937 = and i8 %6936, 1
  %6938 = xor i8 %6937, 1
  %6939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6938, i8* %6939, align 1, !tbaa !2446
  %6940 = xor i64 %6924, %6923
  %6941 = xor i64 %6940, %6927
  %6942 = lshr i64 %6941, 4
  %6943 = trunc i64 %6942 to i8
  %6944 = and i8 %6943, 1
  %6945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6944, i8* %6945, align 1, !tbaa !2450
  %6946 = icmp eq i64 %6927, 0
  %6947 = zext i1 %6946 to i8
  %6948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6947, i8* %6948, align 1, !tbaa !2447
  %6949 = lshr i64 %6927, 63
  %6950 = trunc i64 %6949 to i8
  %6951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6950, i8* %6951, align 1, !tbaa !2448
  %6952 = lshr i64 %6923, 63
  %6953 = lshr i64 %6924, 63
  %6954 = xor i64 %6949, %6952
  %6955 = xor i64 %6949, %6953
  %6956 = add nuw nsw i64 %6954, %6955
  %6957 = icmp eq i64 %6956, 2
  %6958 = zext i1 %6957 to i8
  %6959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6958, i8* %6959, align 1, !tbaa !2449
  %6960 = load i64, i64* %RBP
  %6961 = sub i64 %6960, 52
  %6962 = load i64, i64* %PC
  %6963 = add i64 %6962, 4
  store i64 %6963, i64* %PC
  %6964 = inttoptr i64 %6961 to i32*
  %6965 = load i32, i32* %6964
  %6966 = sext i32 %6965 to i64
  store i64 %6966, i64* %RCX, align 8, !tbaa !2428
  %6967 = load i64, i64* %RCX
  %6968 = load i64, i64* %PC
  %6969 = add i64 %6968, 7
  store i64 %6969, i64* %PC
  %6970 = sext i64 %6967 to i128
  %6971 = and i128 %6970, -18446744073709551616
  %6972 = zext i64 %6967 to i128
  %6973 = or i128 %6971, %6972
  %6974 = mul nsw i128 520, %6973
  %6975 = trunc i128 %6974 to i64
  store i64 %6975, i64* %RCX, align 8, !tbaa !2428
  %6976 = sext i64 %6975 to i128
  %6977 = icmp ne i128 %6976, %6974
  %6978 = zext i1 %6977 to i8
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6978, i8* %6979, align 1, !tbaa !2432
  %6980 = trunc i128 %6974 to i32
  %6981 = and i32 %6980, 255
  %6982 = call i32 @llvm.ctpop.i32(i32 %6981) #16
  %6983 = trunc i32 %6982 to i8
  %6984 = and i8 %6983, 1
  %6985 = xor i8 %6984, 1
  %6986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6985, i8* %6986, align 1, !tbaa !2446
  %6987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6987, align 1, !tbaa !2450
  %6988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6988, align 1, !tbaa !2447
  %6989 = lshr i64 %6975, 63
  %6990 = trunc i64 %6989 to i8
  %6991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6990, i8* %6991, align 1, !tbaa !2448
  %6992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6978, i8* %6992, align 1, !tbaa !2449
  %6993 = load i64, i64* %RAX
  %6994 = load i64, i64* %RCX
  %6995 = load i64, i64* %PC
  %6996 = add i64 %6995, 3
  store i64 %6996, i64* %PC
  %6997 = add i64 %6994, %6993
  store i64 %6997, i64* %RAX, align 8, !tbaa !2428
  %6998 = icmp ult i64 %6997, %6993
  %6999 = icmp ult i64 %6997, %6994
  %7000 = or i1 %6998, %6999
  %7001 = zext i1 %7000 to i8
  %7002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7001, i8* %7002, align 1, !tbaa !2432
  %7003 = trunc i64 %6997 to i32
  %7004 = and i32 %7003, 255
  %7005 = call i32 @llvm.ctpop.i32(i32 %7004) #16
  %7006 = trunc i32 %7005 to i8
  %7007 = and i8 %7006, 1
  %7008 = xor i8 %7007, 1
  %7009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7008, i8* %7009, align 1, !tbaa !2446
  %7010 = xor i64 %6994, %6993
  %7011 = xor i64 %7010, %6997
  %7012 = lshr i64 %7011, 4
  %7013 = trunc i64 %7012 to i8
  %7014 = and i8 %7013, 1
  %7015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7014, i8* %7015, align 1, !tbaa !2450
  %7016 = icmp eq i64 %6997, 0
  %7017 = zext i1 %7016 to i8
  %7018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7017, i8* %7018, align 1, !tbaa !2447
  %7019 = lshr i64 %6997, 63
  %7020 = trunc i64 %7019 to i8
  %7021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7020, i8* %7021, align 1, !tbaa !2448
  %7022 = lshr i64 %6993, 63
  %7023 = lshr i64 %6994, 63
  %7024 = xor i64 %7019, %7022
  %7025 = xor i64 %7019, %7023
  %7026 = add nuw nsw i64 %7024, %7025
  %7027 = icmp eq i64 %7026, 2
  %7028 = zext i1 %7027 to i8
  %7029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7028, i8* %7029, align 1, !tbaa !2449
  %7030 = load i64, i64* %RBP
  %7031 = sub i64 %7030, 48
  %7032 = load i64, i64* %PC
  %7033 = add i64 %7032, 4
  store i64 %7033, i64* %PC
  %7034 = inttoptr i64 %7031 to i32*
  %7035 = load i32, i32* %7034
  %7036 = sext i32 %7035 to i64
  store i64 %7036, i64* %RCX, align 8, !tbaa !2428
  %7037 = load i64, i64* %RAX
  %7038 = load i64, i64* %RCX
  %7039 = mul i64 %7038, 8
  %7040 = add i64 %7039, %7037
  %7041 = bitcast %union.vec128_t* %XMM0 to i8*
  %7042 = load i64, i64* %PC
  %7043 = add i64 %7042, 5
  store i64 %7043, i64* %PC
  %7044 = bitcast i8* %7041 to double*
  %7045 = load double, double* %7044, align 1
  %7046 = inttoptr i64 %7040 to double*
  store double %7045, double* %7046
  %7047 = load i64, i64* %RBP
  %7048 = sub i64 %7047, 104
  %7049 = load i64, i64* %PC
  %7050 = add i64 %7049, 4
  store i64 %7050, i64* %PC
  %7051 = inttoptr i64 %7048 to i64*
  %7052 = load i64, i64* %7051
  store i64 %7052, i64* %RAX, align 8, !tbaa !2428
  %7053 = load i64, i64* %RBP
  %7054 = sub i64 %7053, 188
  %7055 = load i64, i64* %PC
  %7056 = add i64 %7055, 7
  store i64 %7056, i64* %PC
  %7057 = inttoptr i64 %7054 to i32*
  %7058 = load i32, i32* %7057
  %7059 = sext i32 %7058 to i64
  store i64 %7059, i64* %RCX, align 8, !tbaa !2428
  %7060 = load i64, i64* %RCX
  %7061 = load i64, i64* %PC
  %7062 = add i64 %7061, 7
  store i64 %7062, i64* %PC
  %7063 = sext i64 %7060 to i128
  %7064 = and i128 %7063, -18446744073709551616
  %7065 = zext i64 %7060 to i128
  %7066 = or i128 %7064, %7065
  %7067 = mul nsw i128 520, %7066
  %7068 = trunc i128 %7067 to i64
  store i64 %7068, i64* %RCX, align 8, !tbaa !2428
  %7069 = sext i64 %7068 to i128
  %7070 = icmp ne i128 %7069, %7067
  %7071 = zext i1 %7070 to i8
  %7072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7071, i8* %7072, align 1, !tbaa !2432
  %7073 = trunc i128 %7067 to i32
  %7074 = and i32 %7073, 255
  %7075 = call i32 @llvm.ctpop.i32(i32 %7074) #16
  %7076 = trunc i32 %7075 to i8
  %7077 = and i8 %7076, 1
  %7078 = xor i8 %7077, 1
  %7079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7078, i8* %7079, align 1, !tbaa !2446
  %7080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7080, align 1, !tbaa !2450
  %7081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7081, align 1, !tbaa !2447
  %7082 = lshr i64 %7068, 63
  %7083 = trunc i64 %7082 to i8
  %7084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7083, i8* %7084, align 1, !tbaa !2448
  %7085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7071, i8* %7085, align 1, !tbaa !2449
  %7086 = load i64, i64* %RAX
  %7087 = load i64, i64* %RCX
  %7088 = load i64, i64* %PC
  %7089 = add i64 %7088, 3
  store i64 %7089, i64* %PC
  %7090 = add i64 %7087, %7086
  store i64 %7090, i64* %RAX, align 8, !tbaa !2428
  %7091 = icmp ult i64 %7090, %7086
  %7092 = icmp ult i64 %7090, %7087
  %7093 = or i1 %7091, %7092
  %7094 = zext i1 %7093 to i8
  %7095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7094, i8* %7095, align 1, !tbaa !2432
  %7096 = trunc i64 %7090 to i32
  %7097 = and i32 %7096, 255
  %7098 = call i32 @llvm.ctpop.i32(i32 %7097) #16
  %7099 = trunc i32 %7098 to i8
  %7100 = and i8 %7099, 1
  %7101 = xor i8 %7100, 1
  %7102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7101, i8* %7102, align 1, !tbaa !2446
  %7103 = xor i64 %7087, %7086
  %7104 = xor i64 %7103, %7090
  %7105 = lshr i64 %7104, 4
  %7106 = trunc i64 %7105 to i8
  %7107 = and i8 %7106, 1
  %7108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7107, i8* %7108, align 1, !tbaa !2450
  %7109 = icmp eq i64 %7090, 0
  %7110 = zext i1 %7109 to i8
  %7111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7110, i8* %7111, align 1, !tbaa !2447
  %7112 = lshr i64 %7090, 63
  %7113 = trunc i64 %7112 to i8
  %7114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7113, i8* %7114, align 1, !tbaa !2448
  %7115 = lshr i64 %7086, 63
  %7116 = lshr i64 %7087, 63
  %7117 = xor i64 %7112, %7115
  %7118 = xor i64 %7112, %7116
  %7119 = add nuw nsw i64 %7117, %7118
  %7120 = icmp eq i64 %7119, 2
  %7121 = zext i1 %7120 to i8
  %7122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7121, i8* %7122, align 1, !tbaa !2449
  %7123 = load i64, i64* %RBP
  %7124 = sub i64 %7123, 192
  %7125 = load i64, i64* %PC
  %7126 = add i64 %7125, 7
  store i64 %7126, i64* %PC
  %7127 = inttoptr i64 %7124 to i32*
  %7128 = load i32, i32* %7127
  %7129 = sext i32 %7128 to i64
  store i64 %7129, i64* %RCX, align 8, !tbaa !2428
  %7130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7131 = load i64, i64* %RAX
  %7132 = load i64, i64* %RCX
  %7133 = mul i64 %7132, 8
  %7134 = add i64 %7133, %7131
  %7135 = load i64, i64* %PC
  %7136 = add i64 %7135, 5
  store i64 %7136, i64* %PC
  %7137 = inttoptr i64 %7134 to double*
  %7138 = load double, double* %7137
  %7139 = bitcast i8* %7130 to double*
  store double %7138, double* %7139, align 1, !tbaa !2453
  %7140 = getelementptr inbounds i8, i8* %7130, i64 8
  %7141 = bitcast i8* %7140 to double*
  store double 0.000000e+00, double* %7141, align 1, !tbaa !2453
  %7142 = load i64, i64* %RBP
  %7143 = sub i64 %7142, 112
  %7144 = load i64, i64* %PC
  %7145 = add i64 %7144, 4
  store i64 %7145, i64* %PC
  %7146 = inttoptr i64 %7143 to i64*
  %7147 = load i64, i64* %7146
  store i64 %7147, i64* %RAX, align 8, !tbaa !2428
  %7148 = load i64, i64* %RBP
  %7149 = sub i64 %7148, 188
  %7150 = load i64, i64* %PC
  %7151 = add i64 %7150, 7
  store i64 %7151, i64* %PC
  %7152 = inttoptr i64 %7149 to i32*
  %7153 = load i32, i32* %7152
  %7154 = sext i32 %7153 to i64
  store i64 %7154, i64* %RCX, align 8, !tbaa !2428
  %7155 = load i64, i64* %RCX
  %7156 = load i64, i64* %PC
  %7157 = add i64 %7156, 7
  store i64 %7157, i64* %PC
  %7158 = sext i64 %7155 to i128
  %7159 = and i128 %7158, -18446744073709551616
  %7160 = zext i64 %7155 to i128
  %7161 = or i128 %7159, %7160
  %7162 = mul nsw i128 33800, %7161
  %7163 = trunc i128 %7162 to i64
  store i64 %7163, i64* %RCX, align 8, !tbaa !2428
  %7164 = sext i64 %7163 to i128
  %7165 = icmp ne i128 %7164, %7162
  %7166 = zext i1 %7165 to i8
  %7167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7166, i8* %7167, align 1, !tbaa !2432
  %7168 = trunc i128 %7162 to i32
  %7169 = and i32 %7168, 255
  %7170 = call i32 @llvm.ctpop.i32(i32 %7169) #16
  %7171 = trunc i32 %7170 to i8
  %7172 = and i8 %7171, 1
  %7173 = xor i8 %7172, 1
  %7174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7173, i8* %7174, align 1, !tbaa !2446
  %7175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7175, align 1, !tbaa !2450
  %7176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7176, align 1, !tbaa !2447
  %7177 = lshr i64 %7163, 63
  %7178 = trunc i64 %7177 to i8
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7178, i8* %7179, align 1, !tbaa !2448
  %7180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7166, i8* %7180, align 1, !tbaa !2449
  %7181 = load i64, i64* %RAX
  %7182 = load i64, i64* %RCX
  %7183 = load i64, i64* %PC
  %7184 = add i64 %7183, 3
  store i64 %7184, i64* %PC
  %7185 = add i64 %7182, %7181
  store i64 %7185, i64* %RAX, align 8, !tbaa !2428
  %7186 = icmp ult i64 %7185, %7181
  %7187 = icmp ult i64 %7185, %7182
  %7188 = or i1 %7186, %7187
  %7189 = zext i1 %7188 to i8
  %7190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7189, i8* %7190, align 1, !tbaa !2432
  %7191 = trunc i64 %7185 to i32
  %7192 = and i32 %7191, 255
  %7193 = call i32 @llvm.ctpop.i32(i32 %7192) #16
  %7194 = trunc i32 %7193 to i8
  %7195 = and i8 %7194, 1
  %7196 = xor i8 %7195, 1
  %7197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7196, i8* %7197, align 1, !tbaa !2446
  %7198 = xor i64 %7182, %7181
  %7199 = xor i64 %7198, %7185
  %7200 = lshr i64 %7199, 4
  %7201 = trunc i64 %7200 to i8
  %7202 = and i8 %7201, 1
  %7203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7202, i8* %7203, align 1, !tbaa !2450
  %7204 = icmp eq i64 %7185, 0
  %7205 = zext i1 %7204 to i8
  %7206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7205, i8* %7206, align 1, !tbaa !2447
  %7207 = lshr i64 %7185, 63
  %7208 = trunc i64 %7207 to i8
  %7209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7208, i8* %7209, align 1, !tbaa !2448
  %7210 = lshr i64 %7181, 63
  %7211 = lshr i64 %7182, 63
  %7212 = xor i64 %7207, %7210
  %7213 = xor i64 %7207, %7211
  %7214 = add nuw nsw i64 %7212, %7213
  %7215 = icmp eq i64 %7214, 2
  %7216 = zext i1 %7215 to i8
  %7217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7216, i8* %7217, align 1, !tbaa !2449
  %7218 = load i64, i64* %RBP
  %7219 = sub i64 %7218, 52
  %7220 = load i64, i64* %PC
  %7221 = add i64 %7220, 4
  store i64 %7221, i64* %PC
  %7222 = inttoptr i64 %7219 to i32*
  %7223 = load i32, i32* %7222
  %7224 = sext i32 %7223 to i64
  store i64 %7224, i64* %RCX, align 8, !tbaa !2428
  %7225 = load i64, i64* %RCX
  %7226 = load i64, i64* %PC
  %7227 = add i64 %7226, 7
  store i64 %7227, i64* %PC
  %7228 = sext i64 %7225 to i128
  %7229 = and i128 %7228, -18446744073709551616
  %7230 = zext i64 %7225 to i128
  %7231 = or i128 %7229, %7230
  %7232 = mul nsw i128 520, %7231
  %7233 = trunc i128 %7232 to i64
  store i64 %7233, i64* %RCX, align 8, !tbaa !2428
  %7234 = sext i64 %7233 to i128
  %7235 = icmp ne i128 %7234, %7232
  %7236 = zext i1 %7235 to i8
  %7237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7236, i8* %7237, align 1, !tbaa !2432
  %7238 = trunc i128 %7232 to i32
  %7239 = and i32 %7238, 255
  %7240 = call i32 @llvm.ctpop.i32(i32 %7239) #16
  %7241 = trunc i32 %7240 to i8
  %7242 = and i8 %7241, 1
  %7243 = xor i8 %7242, 1
  %7244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7243, i8* %7244, align 1, !tbaa !2446
  %7245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7245, align 1, !tbaa !2450
  %7246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7246, align 1, !tbaa !2447
  %7247 = lshr i64 %7233, 63
  %7248 = trunc i64 %7247 to i8
  %7249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7248, i8* %7249, align 1, !tbaa !2448
  %7250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7236, i8* %7250, align 1, !tbaa !2449
  %7251 = load i64, i64* %RAX
  %7252 = load i64, i64* %RCX
  %7253 = load i64, i64* %PC
  %7254 = add i64 %7253, 3
  store i64 %7254, i64* %PC
  %7255 = add i64 %7252, %7251
  store i64 %7255, i64* %RAX, align 8, !tbaa !2428
  %7256 = icmp ult i64 %7255, %7251
  %7257 = icmp ult i64 %7255, %7252
  %7258 = or i1 %7256, %7257
  %7259 = zext i1 %7258 to i8
  %7260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7259, i8* %7260, align 1, !tbaa !2432
  %7261 = trunc i64 %7255 to i32
  %7262 = and i32 %7261, 255
  %7263 = call i32 @llvm.ctpop.i32(i32 %7262) #16
  %7264 = trunc i32 %7263 to i8
  %7265 = and i8 %7264, 1
  %7266 = xor i8 %7265, 1
  %7267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7266, i8* %7267, align 1, !tbaa !2446
  %7268 = xor i64 %7252, %7251
  %7269 = xor i64 %7268, %7255
  %7270 = lshr i64 %7269, 4
  %7271 = trunc i64 %7270 to i8
  %7272 = and i8 %7271, 1
  %7273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7272, i8* %7273, align 1, !tbaa !2450
  %7274 = icmp eq i64 %7255, 0
  %7275 = zext i1 %7274 to i8
  %7276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7275, i8* %7276, align 1, !tbaa !2447
  %7277 = lshr i64 %7255, 63
  %7278 = trunc i64 %7277 to i8
  %7279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7278, i8* %7279, align 1, !tbaa !2448
  %7280 = lshr i64 %7251, 63
  %7281 = lshr i64 %7252, 63
  %7282 = xor i64 %7277, %7280
  %7283 = xor i64 %7277, %7281
  %7284 = add nuw nsw i64 %7282, %7283
  %7285 = icmp eq i64 %7284, 2
  %7286 = zext i1 %7285 to i8
  %7287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7286, i8* %7287, align 1, !tbaa !2449
  %7288 = load i64, i64* %RBP
  %7289 = sub i64 %7288, 48
  %7290 = load i64, i64* %PC
  %7291 = add i64 %7290, 4
  store i64 %7291, i64* %PC
  %7292 = inttoptr i64 %7289 to i32*
  %7293 = load i32, i32* %7292
  %7294 = sext i32 %7293 to i64
  store i64 %7294, i64* %RCX, align 8, !tbaa !2428
  %7295 = load i64, i64* %RAX
  %7296 = load i64, i64* %RCX
  %7297 = mul i64 %7296, 8
  %7298 = add i64 %7297, %7295
  %7299 = bitcast %union.vec128_t* %XMM0 to i8*
  %7300 = load i64, i64* %PC
  %7301 = add i64 %7300, 5
  store i64 %7301, i64* %PC
  %7302 = bitcast i8* %7299 to double*
  %7303 = load double, double* %7302, align 1
  %7304 = inttoptr i64 %7298 to double*
  store double %7303, double* %7304
  %7305 = load i64, i64* %RBP
  %7306 = sub i64 %7305, 192
  %7307 = load i64, i64* %PC
  %7308 = add i64 %7307, 6
  store i64 %7308, i64* %PC
  %7309 = inttoptr i64 %7306 to i32*
  %7310 = load i32, i32* %7309
  %7311 = zext i32 %7310 to i64
  store i64 %7311, i64* %RAX, align 8, !tbaa !2428
  %7312 = load i64, i64* %RAX
  %7313 = load i64, i64* %PC
  %7314 = add i64 %7313, 3
  store i64 %7314, i64* %PC
  %7315 = trunc i64 %7312 to i32
  %7316 = add i32 1, %7315
  %7317 = zext i32 %7316 to i64
  store i64 %7317, i64* %RAX, align 8, !tbaa !2428
  %7318 = icmp ult i32 %7316, %7315
  %7319 = icmp ult i32 %7316, 1
  %7320 = or i1 %7318, %7319
  %7321 = zext i1 %7320 to i8
  %7322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7321, i8* %7322, align 1, !tbaa !2432
  %7323 = and i32 %7316, 255
  %7324 = call i32 @llvm.ctpop.i32(i32 %7323) #16
  %7325 = trunc i32 %7324 to i8
  %7326 = and i8 %7325, 1
  %7327 = xor i8 %7326, 1
  %7328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7327, i8* %7328, align 1, !tbaa !2446
  %7329 = xor i64 1, %7312
  %7330 = trunc i64 %7329 to i32
  %7331 = xor i32 %7330, %7316
  %7332 = lshr i32 %7331, 4
  %7333 = trunc i32 %7332 to i8
  %7334 = and i8 %7333, 1
  %7335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7334, i8* %7335, align 1, !tbaa !2450
  %7336 = icmp eq i32 %7316, 0
  %7337 = zext i1 %7336 to i8
  %7338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7337, i8* %7338, align 1, !tbaa !2447
  %7339 = lshr i32 %7316, 31
  %7340 = trunc i32 %7339 to i8
  %7341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7340, i8* %7341, align 1, !tbaa !2448
  %7342 = lshr i32 %7315, 31
  %7343 = xor i32 %7339, %7342
  %7344 = add nuw nsw i32 %7343, %7339
  %7345 = icmp eq i32 %7344, 2
  %7346 = zext i1 %7345 to i8
  %7347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7346, i8* %7347, align 1, !tbaa !2449
  %7348 = load i64, i64* %RBP
  %7349 = sub i64 %7348, 192
  %7350 = load i32, i32* %EAX
  %7351 = zext i32 %7350 to i64
  %7352 = load i64, i64* %PC
  %7353 = add i64 %7352, 6
  store i64 %7353, i64* %PC
  %7354 = inttoptr i64 %7349 to i32*
  store i32 %7350, i32* %7354
  %7355 = load i64, i64* %PC
  %7356 = sub i64 %7355, 3219
  %7357 = load i64, i64* %PC
  %7358 = add i64 %7357, 5
  store i64 %7358, i64* %PC
  %7359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7356, i64* %7359, align 8, !tbaa !2428
  br label %block_40159a

block_4015c2:                                     ; preds = %block_4015b3
  %7360 = sub i64 %2837, 196
  %7361 = load i64, i64* %PC
  %7362 = add i64 %7361, 7
  store i64 %7362, i64* %PC
  %7363 = inttoptr i64 %7360 to i32*
  %7364 = load i32, i32* %7363
  %7365 = sext i32 %7364 to i64
  store i64 %7365, i64* %RCX, align 8, !tbaa !2428
  %7366 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7367 = load i64, i64* %RAX
  %7368 = load i64, i64* %RCX
  %7369 = mul i64 %7368, 8
  %7370 = add i64 %7369, %7367
  %7371 = load i64, i64* %PC
  %7372 = add i64 %7371, 5
  store i64 %7372, i64* %PC
  %7373 = inttoptr i64 %7370 to double*
  %7374 = load double, double* %7373
  %7375 = bitcast i8* %7366 to double*
  store double %7374, double* %7375, align 1, !tbaa !2453
  %7376 = getelementptr inbounds i8, i8* %7366, i64 8
  %7377 = bitcast i8* %7376 to double*
  store double 0.000000e+00, double* %7377, align 1, !tbaa !2453
  %7378 = load i64, i64* %RBP
  %7379 = sub i64 %7378, 120
  %7380 = load i64, i64* %PC
  %7381 = add i64 %7380, 4
  store i64 %7381, i64* %PC
  %7382 = inttoptr i64 %7379 to i64*
  %7383 = load i64, i64* %7382
  store i64 %7383, i64* %RAX, align 8, !tbaa !2428
  %7384 = load i64, i64* %RBP
  %7385 = sub i64 %7384, 188
  %7386 = load i64, i64* %PC
  %7387 = add i64 %7386, 7
  store i64 %7387, i64* %PC
  %7388 = inttoptr i64 %7385 to i32*
  %7389 = load i32, i32* %7388
  %7390 = sext i32 %7389 to i64
  store i64 %7390, i64* %RCX, align 8, !tbaa !2428
  %7391 = load i64, i64* %RCX
  %7392 = load i64, i64* %PC
  %7393 = add i64 %7392, 7
  store i64 %7393, i64* %PC
  %7394 = sext i64 %7391 to i128
  %7395 = and i128 %7394, -18446744073709551616
  %7396 = zext i64 %7391 to i128
  %7397 = or i128 %7395, %7396
  %7398 = mul nsw i128 33800, %7397
  %7399 = trunc i128 %7398 to i64
  store i64 %7399, i64* %RCX, align 8, !tbaa !2428
  %7400 = sext i64 %7399 to i128
  %7401 = icmp ne i128 %7400, %7398
  %7402 = zext i1 %7401 to i8
  %7403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7402, i8* %7403, align 1, !tbaa !2432
  %7404 = trunc i128 %7398 to i32
  %7405 = and i32 %7404, 255
  %7406 = call i32 @llvm.ctpop.i32(i32 %7405) #16
  %7407 = trunc i32 %7406 to i8
  %7408 = and i8 %7407, 1
  %7409 = xor i8 %7408, 1
  %7410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7409, i8* %7410, align 1, !tbaa !2446
  %7411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7411, align 1, !tbaa !2450
  %7412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7412, align 1, !tbaa !2447
  %7413 = lshr i64 %7399, 63
  %7414 = trunc i64 %7413 to i8
  %7415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7414, i8* %7415, align 1, !tbaa !2448
  %7416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7402, i8* %7416, align 1, !tbaa !2449
  %7417 = load i64, i64* %RAX
  %7418 = load i64, i64* %RCX
  %7419 = load i64, i64* %PC
  %7420 = add i64 %7419, 3
  store i64 %7420, i64* %PC
  %7421 = add i64 %7418, %7417
  store i64 %7421, i64* %RAX, align 8, !tbaa !2428
  %7422 = icmp ult i64 %7421, %7417
  %7423 = icmp ult i64 %7421, %7418
  %7424 = or i1 %7422, %7423
  %7425 = zext i1 %7424 to i8
  %7426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7425, i8* %7426, align 1, !tbaa !2432
  %7427 = trunc i64 %7421 to i32
  %7428 = and i32 %7427, 255
  %7429 = call i32 @llvm.ctpop.i32(i32 %7428) #16
  %7430 = trunc i32 %7429 to i8
  %7431 = and i8 %7430, 1
  %7432 = xor i8 %7431, 1
  %7433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7432, i8* %7433, align 1, !tbaa !2446
  %7434 = xor i64 %7418, %7417
  %7435 = xor i64 %7434, %7421
  %7436 = lshr i64 %7435, 4
  %7437 = trunc i64 %7436 to i8
  %7438 = and i8 %7437, 1
  %7439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7438, i8* %7439, align 1, !tbaa !2450
  %7440 = icmp eq i64 %7421, 0
  %7441 = zext i1 %7440 to i8
  %7442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7441, i8* %7442, align 1, !tbaa !2447
  %7443 = lshr i64 %7421, 63
  %7444 = trunc i64 %7443 to i8
  %7445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7444, i8* %7445, align 1, !tbaa !2448
  %7446 = lshr i64 %7417, 63
  %7447 = lshr i64 %7418, 63
  %7448 = xor i64 %7443, %7446
  %7449 = xor i64 %7443, %7447
  %7450 = add nuw nsw i64 %7448, %7449
  %7451 = icmp eq i64 %7450, 2
  %7452 = zext i1 %7451 to i8
  %7453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7452, i8* %7453, align 1, !tbaa !2449
  %7454 = load i64, i64* %RBP
  %7455 = sub i64 %7454, 192
  %7456 = load i64, i64* %PC
  %7457 = add i64 %7456, 6
  store i64 %7457, i64* %PC
  %7458 = inttoptr i64 %7455 to i32*
  %7459 = load i32, i32* %7458
  %7460 = zext i32 %7459 to i64
  store i64 %7460, i64* %RDX, align 8, !tbaa !2428
  %7461 = load i64, i64* %RDX
  %7462 = load i64, i64* %PC
  %7463 = add i64 %7462, 3
  store i64 %7463, i64* %PC
  %7464 = trunc i64 %7461 to i32
  %7465 = add i32 1, %7464
  %7466 = zext i32 %7465 to i64
  store i64 %7466, i64* %RDX, align 8, !tbaa !2428
  %7467 = icmp ult i32 %7465, %7464
  %7468 = icmp ult i32 %7465, 1
  %7469 = or i1 %7467, %7468
  %7470 = zext i1 %7469 to i8
  %7471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7470, i8* %7471, align 1, !tbaa !2432
  %7472 = and i32 %7465, 255
  %7473 = call i32 @llvm.ctpop.i32(i32 %7472) #16
  %7474 = trunc i32 %7473 to i8
  %7475 = and i8 %7474, 1
  %7476 = xor i8 %7475, 1
  %7477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7476, i8* %7477, align 1, !tbaa !2446
  %7478 = xor i64 1, %7461
  %7479 = trunc i64 %7478 to i32
  %7480 = xor i32 %7479, %7465
  %7481 = lshr i32 %7480, 4
  %7482 = trunc i32 %7481 to i8
  %7483 = and i8 %7482, 1
  %7484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7483, i8* %7484, align 1, !tbaa !2450
  %7485 = icmp eq i32 %7465, 0
  %7486 = zext i1 %7485 to i8
  %7487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7486, i8* %7487, align 1, !tbaa !2447
  %7488 = lshr i32 %7465, 31
  %7489 = trunc i32 %7488 to i8
  %7490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7489, i8* %7490, align 1, !tbaa !2448
  %7491 = lshr i32 %7464, 31
  %7492 = xor i32 %7488, %7491
  %7493 = add nuw nsw i32 %7492, %7488
  %7494 = icmp eq i32 %7493, 2
  %7495 = zext i1 %7494 to i8
  %7496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7495, i8* %7496, align 1, !tbaa !2449
  %7497 = load i32, i32* %EDX
  %7498 = zext i32 %7497 to i64
  %7499 = load i64, i64* %PC
  %7500 = add i64 %7499, 3
  store i64 %7500, i64* %PC
  %7501 = shl i64 %7498, 32
  %7502 = ashr exact i64 %7501, 32
  store i64 %7502, i64* %RCX, align 8, !tbaa !2428
  %7503 = load i64, i64* %RCX
  %7504 = load i64, i64* %PC
  %7505 = add i64 %7504, 7
  store i64 %7505, i64* %PC
  %7506 = sext i64 %7503 to i128
  %7507 = and i128 %7506, -18446744073709551616
  %7508 = zext i64 %7503 to i128
  %7509 = or i128 %7507, %7508
  %7510 = mul nsw i128 520, %7509
  %7511 = trunc i128 %7510 to i64
  store i64 %7511, i64* %RCX, align 8, !tbaa !2428
  %7512 = sext i64 %7511 to i128
  %7513 = icmp ne i128 %7512, %7510
  %7514 = zext i1 %7513 to i8
  %7515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7514, i8* %7515, align 1, !tbaa !2432
  %7516 = trunc i128 %7510 to i32
  %7517 = and i32 %7516, 255
  %7518 = call i32 @llvm.ctpop.i32(i32 %7517) #16
  %7519 = trunc i32 %7518 to i8
  %7520 = and i8 %7519, 1
  %7521 = xor i8 %7520, 1
  %7522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7521, i8* %7522, align 1, !tbaa !2446
  %7523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7523, align 1, !tbaa !2450
  %7524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7524, align 1, !tbaa !2447
  %7525 = lshr i64 %7511, 63
  %7526 = trunc i64 %7525 to i8
  %7527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7526, i8* %7527, align 1, !tbaa !2448
  %7528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7514, i8* %7528, align 1, !tbaa !2449
  %7529 = load i64, i64* %RAX
  %7530 = load i64, i64* %RCX
  %7531 = load i64, i64* %PC
  %7532 = add i64 %7531, 3
  store i64 %7532, i64* %PC
  %7533 = add i64 %7530, %7529
  store i64 %7533, i64* %RAX, align 8, !tbaa !2428
  %7534 = icmp ult i64 %7533, %7529
  %7535 = icmp ult i64 %7533, %7530
  %7536 = or i1 %7534, %7535
  %7537 = zext i1 %7536 to i8
  %7538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7537, i8* %7538, align 1, !tbaa !2432
  %7539 = trunc i64 %7533 to i32
  %7540 = and i32 %7539, 255
  %7541 = call i32 @llvm.ctpop.i32(i32 %7540) #16
  %7542 = trunc i32 %7541 to i8
  %7543 = and i8 %7542, 1
  %7544 = xor i8 %7543, 1
  %7545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7544, i8* %7545, align 1, !tbaa !2446
  %7546 = xor i64 %7530, %7529
  %7547 = xor i64 %7546, %7533
  %7548 = lshr i64 %7547, 4
  %7549 = trunc i64 %7548 to i8
  %7550 = and i8 %7549, 1
  %7551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7550, i8* %7551, align 1, !tbaa !2450
  %7552 = icmp eq i64 %7533, 0
  %7553 = zext i1 %7552 to i8
  %7554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7553, i8* %7554, align 1, !tbaa !2447
  %7555 = lshr i64 %7533, 63
  %7556 = trunc i64 %7555 to i8
  %7557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7556, i8* %7557, align 1, !tbaa !2448
  %7558 = lshr i64 %7529, 63
  %7559 = lshr i64 %7530, 63
  %7560 = xor i64 %7555, %7558
  %7561 = xor i64 %7555, %7559
  %7562 = add nuw nsw i64 %7560, %7561
  %7563 = icmp eq i64 %7562, 2
  %7564 = zext i1 %7563 to i8
  %7565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7564, i8* %7565, align 1, !tbaa !2449
  %7566 = load i64, i64* %RBP
  %7567 = sub i64 %7566, 196
  %7568 = load i64, i64* %PC
  %7569 = add i64 %7568, 7
  store i64 %7569, i64* %PC
  %7570 = inttoptr i64 %7567 to i32*
  %7571 = load i32, i32* %7570
  %7572 = sext i32 %7571 to i64
  store i64 %7572, i64* %RCX, align 8, !tbaa !2428
  %7573 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7575 = load i64, i64* %RAX
  %7576 = load i64, i64* %RCX
  %7577 = mul i64 %7576, 8
  %7578 = add i64 %7577, %7575
  %7579 = load i64, i64* %PC
  %7580 = add i64 %7579, 5
  store i64 %7580, i64* %PC
  %7581 = bitcast i8* %7574 to double*
  %7582 = load double, double* %7581, align 1
  %7583 = getelementptr inbounds i8, i8* %7574, i64 8
  %7584 = bitcast i8* %7583 to i64*
  %7585 = load i64, i64* %7584, align 1
  %7586 = inttoptr i64 %7578 to double*
  %7587 = load double, double* %7586
  %7588 = fsub double %7582, %7587
  %7589 = bitcast i8* %7573 to double*
  store double %7588, double* %7589, align 1, !tbaa !2453
  %7590 = getelementptr inbounds i8, i8* %7573, i64 8
  %7591 = bitcast i8* %7590 to i64*
  store i64 %7585, i64* %7591, align 1, !tbaa !2453
  %7592 = load i64, i64* %RBP
  %7593 = sub i64 %7592, 128
  %7594 = load i64, i64* %PC
  %7595 = add i64 %7594, 4
  store i64 %7595, i64* %PC
  %7596 = inttoptr i64 %7593 to i64*
  %7597 = load i64, i64* %7596
  store i64 %7597, i64* %RAX, align 8, !tbaa !2428
  %7598 = load i64, i64* %RBP
  %7599 = sub i64 %7598, 188
  %7600 = load i64, i64* %PC
  %7601 = add i64 %7600, 7
  store i64 %7601, i64* %PC
  %7602 = inttoptr i64 %7599 to i32*
  %7603 = load i32, i32* %7602
  %7604 = sext i32 %7603 to i64
  store i64 %7604, i64* %RCX, align 8, !tbaa !2428
  %7605 = load i64, i64* %RCX
  %7606 = load i64, i64* %PC
  %7607 = add i64 %7606, 7
  store i64 %7607, i64* %PC
  %7608 = sext i64 %7605 to i128
  %7609 = and i128 %7608, -18446744073709551616
  %7610 = zext i64 %7605 to i128
  %7611 = or i128 %7609, %7610
  %7612 = mul nsw i128 33800, %7611
  %7613 = trunc i128 %7612 to i64
  store i64 %7613, i64* %RCX, align 8, !tbaa !2428
  %7614 = sext i64 %7613 to i128
  %7615 = icmp ne i128 %7614, %7612
  %7616 = zext i1 %7615 to i8
  %7617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7616, i8* %7617, align 1, !tbaa !2432
  %7618 = trunc i128 %7612 to i32
  %7619 = and i32 %7618, 255
  %7620 = call i32 @llvm.ctpop.i32(i32 %7619) #16
  %7621 = trunc i32 %7620 to i8
  %7622 = and i8 %7621, 1
  %7623 = xor i8 %7622, 1
  %7624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7623, i8* %7624, align 1, !tbaa !2446
  %7625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7625, align 1, !tbaa !2450
  %7626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7626, align 1, !tbaa !2447
  %7627 = lshr i64 %7613, 63
  %7628 = trunc i64 %7627 to i8
  %7629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7628, i8* %7629, align 1, !tbaa !2448
  %7630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7616, i8* %7630, align 1, !tbaa !2449
  %7631 = load i64, i64* %RAX
  %7632 = load i64, i64* %RCX
  %7633 = load i64, i64* %PC
  %7634 = add i64 %7633, 3
  store i64 %7634, i64* %PC
  %7635 = add i64 %7632, %7631
  store i64 %7635, i64* %RAX, align 8, !tbaa !2428
  %7636 = icmp ult i64 %7635, %7631
  %7637 = icmp ult i64 %7635, %7632
  %7638 = or i1 %7636, %7637
  %7639 = zext i1 %7638 to i8
  %7640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7639, i8* %7640, align 1, !tbaa !2432
  %7641 = trunc i64 %7635 to i32
  %7642 = and i32 %7641, 255
  %7643 = call i32 @llvm.ctpop.i32(i32 %7642) #16
  %7644 = trunc i32 %7643 to i8
  %7645 = and i8 %7644, 1
  %7646 = xor i8 %7645, 1
  %7647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7646, i8* %7647, align 1, !tbaa !2446
  %7648 = xor i64 %7632, %7631
  %7649 = xor i64 %7648, %7635
  %7650 = lshr i64 %7649, 4
  %7651 = trunc i64 %7650 to i8
  %7652 = and i8 %7651, 1
  %7653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7652, i8* %7653, align 1, !tbaa !2450
  %7654 = icmp eq i64 %7635, 0
  %7655 = zext i1 %7654 to i8
  %7656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7655, i8* %7656, align 1, !tbaa !2447
  %7657 = lshr i64 %7635, 63
  %7658 = trunc i64 %7657 to i8
  %7659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7658, i8* %7659, align 1, !tbaa !2448
  %7660 = lshr i64 %7631, 63
  %7661 = lshr i64 %7632, 63
  %7662 = xor i64 %7657, %7660
  %7663 = xor i64 %7657, %7661
  %7664 = add nuw nsw i64 %7662, %7663
  %7665 = icmp eq i64 %7664, 2
  %7666 = zext i1 %7665 to i8
  %7667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7666, i8* %7667, align 1, !tbaa !2449
  %7668 = load i64, i64* %RBP
  %7669 = sub i64 %7668, 192
  %7670 = load i64, i64* %PC
  %7671 = add i64 %7670, 7
  store i64 %7671, i64* %PC
  %7672 = inttoptr i64 %7669 to i32*
  %7673 = load i32, i32* %7672
  %7674 = sext i32 %7673 to i64
  store i64 %7674, i64* %RCX, align 8, !tbaa !2428
  %7675 = load i64, i64* %RCX
  %7676 = load i64, i64* %PC
  %7677 = add i64 %7676, 7
  store i64 %7677, i64* %PC
  %7678 = sext i64 %7675 to i128
  %7679 = and i128 %7678, -18446744073709551616
  %7680 = zext i64 %7675 to i128
  %7681 = or i128 %7679, %7680
  %7682 = mul nsw i128 520, %7681
  %7683 = trunc i128 %7682 to i64
  store i64 %7683, i64* %RCX, align 8, !tbaa !2428
  %7684 = sext i64 %7683 to i128
  %7685 = icmp ne i128 %7684, %7682
  %7686 = zext i1 %7685 to i8
  %7687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7686, i8* %7687, align 1, !tbaa !2432
  %7688 = trunc i128 %7682 to i32
  %7689 = and i32 %7688, 255
  %7690 = call i32 @llvm.ctpop.i32(i32 %7689) #16
  %7691 = trunc i32 %7690 to i8
  %7692 = and i8 %7691, 1
  %7693 = xor i8 %7692, 1
  %7694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7693, i8* %7694, align 1, !tbaa !2446
  %7695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7695, align 1, !tbaa !2450
  %7696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7696, align 1, !tbaa !2447
  %7697 = lshr i64 %7683, 63
  %7698 = trunc i64 %7697 to i8
  %7699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7698, i8* %7699, align 1, !tbaa !2448
  %7700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7686, i8* %7700, align 1, !tbaa !2449
  %7701 = load i64, i64* %RAX
  %7702 = load i64, i64* %RCX
  %7703 = load i64, i64* %PC
  %7704 = add i64 %7703, 3
  store i64 %7704, i64* %PC
  %7705 = add i64 %7702, %7701
  store i64 %7705, i64* %RAX, align 8, !tbaa !2428
  %7706 = icmp ult i64 %7705, %7701
  %7707 = icmp ult i64 %7705, %7702
  %7708 = or i1 %7706, %7707
  %7709 = zext i1 %7708 to i8
  %7710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7709, i8* %7710, align 1, !tbaa !2432
  %7711 = trunc i64 %7705 to i32
  %7712 = and i32 %7711, 255
  %7713 = call i32 @llvm.ctpop.i32(i32 %7712) #16
  %7714 = trunc i32 %7713 to i8
  %7715 = and i8 %7714, 1
  %7716 = xor i8 %7715, 1
  %7717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7716, i8* %7717, align 1, !tbaa !2446
  %7718 = xor i64 %7702, %7701
  %7719 = xor i64 %7718, %7705
  %7720 = lshr i64 %7719, 4
  %7721 = trunc i64 %7720 to i8
  %7722 = and i8 %7721, 1
  %7723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7722, i8* %7723, align 1, !tbaa !2450
  %7724 = icmp eq i64 %7705, 0
  %7725 = zext i1 %7724 to i8
  %7726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7725, i8* %7726, align 1, !tbaa !2447
  %7727 = lshr i64 %7705, 63
  %7728 = trunc i64 %7727 to i8
  %7729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7728, i8* %7729, align 1, !tbaa !2448
  %7730 = lshr i64 %7701, 63
  %7731 = lshr i64 %7702, 63
  %7732 = xor i64 %7727, %7730
  %7733 = xor i64 %7727, %7731
  %7734 = add nuw nsw i64 %7732, %7733
  %7735 = icmp eq i64 %7734, 2
  %7736 = zext i1 %7735 to i8
  %7737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7736, i8* %7737, align 1, !tbaa !2449
  %7738 = load i64, i64* %RBP
  %7739 = sub i64 %7738, 196
  %7740 = load i64, i64* %PC
  %7741 = add i64 %7740, 6
  store i64 %7741, i64* %PC
  %7742 = inttoptr i64 %7739 to i32*
  %7743 = load i32, i32* %7742
  %7744 = zext i32 %7743 to i64
  store i64 %7744, i64* %RDX, align 8, !tbaa !2428
  %7745 = load i64, i64* %RDX
  %7746 = load i64, i64* %PC
  %7747 = add i64 %7746, 3
  store i64 %7747, i64* %PC
  %7748 = trunc i64 %7745 to i32
  %7749 = add i32 1, %7748
  %7750 = zext i32 %7749 to i64
  store i64 %7750, i64* %RDX, align 8, !tbaa !2428
  %7751 = icmp ult i32 %7749, %7748
  %7752 = icmp ult i32 %7749, 1
  %7753 = or i1 %7751, %7752
  %7754 = zext i1 %7753 to i8
  %7755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7754, i8* %7755, align 1, !tbaa !2432
  %7756 = and i32 %7749, 255
  %7757 = call i32 @llvm.ctpop.i32(i32 %7756) #16
  %7758 = trunc i32 %7757 to i8
  %7759 = and i8 %7758, 1
  %7760 = xor i8 %7759, 1
  %7761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7760, i8* %7761, align 1, !tbaa !2446
  %7762 = xor i64 1, %7745
  %7763 = trunc i64 %7762 to i32
  %7764 = xor i32 %7763, %7749
  %7765 = lshr i32 %7764, 4
  %7766 = trunc i32 %7765 to i8
  %7767 = and i8 %7766, 1
  %7768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7767, i8* %7768, align 1, !tbaa !2450
  %7769 = icmp eq i32 %7749, 0
  %7770 = zext i1 %7769 to i8
  %7771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7770, i8* %7771, align 1, !tbaa !2447
  %7772 = lshr i32 %7749, 31
  %7773 = trunc i32 %7772 to i8
  %7774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7773, i8* %7774, align 1, !tbaa !2448
  %7775 = lshr i32 %7748, 31
  %7776 = xor i32 %7772, %7775
  %7777 = add nuw nsw i32 %7776, %7772
  %7778 = icmp eq i32 %7777, 2
  %7779 = zext i1 %7778 to i8
  %7780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7779, i8* %7780, align 1, !tbaa !2449
  %7781 = load i32, i32* %EDX
  %7782 = zext i32 %7781 to i64
  %7783 = load i64, i64* %PC
  %7784 = add i64 %7783, 3
  store i64 %7784, i64* %PC
  %7785 = shl i64 %7782, 32
  %7786 = ashr exact i64 %7785, 32
  store i64 %7786, i64* %RCX, align 8, !tbaa !2428
  %7787 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7788 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7789 = load i64, i64* %RAX
  %7790 = load i64, i64* %RCX
  %7791 = mul i64 %7790, 8
  %7792 = add i64 %7791, %7789
  %7793 = load i64, i64* %PC
  %7794 = add i64 %7793, 5
  store i64 %7794, i64* %PC
  %7795 = bitcast i8* %7788 to double*
  %7796 = load double, double* %7795, align 1
  %7797 = getelementptr inbounds i8, i8* %7788, i64 8
  %7798 = bitcast i8* %7797 to i64*
  %7799 = load i64, i64* %7798, align 1
  %7800 = inttoptr i64 %7792 to double*
  %7801 = load double, double* %7800
  %7802 = fadd double %7796, %7801
  %7803 = bitcast i8* %7787 to double*
  store double %7802, double* %7803, align 1, !tbaa !2453
  %7804 = getelementptr inbounds i8, i8* %7787, i64 8
  %7805 = bitcast i8* %7804 to i64*
  store i64 %7799, i64* %7805, align 1, !tbaa !2453
  %7806 = load i64, i64* %RBP
  %7807 = sub i64 %7806, 128
  %7808 = load i64, i64* %PC
  %7809 = add i64 %7808, 4
  store i64 %7809, i64* %PC
  %7810 = inttoptr i64 %7807 to i64*
  %7811 = load i64, i64* %7810
  store i64 %7811, i64* %RAX, align 8, !tbaa !2428
  %7812 = load i64, i64* %RBP
  %7813 = sub i64 %7812, 188
  %7814 = load i64, i64* %PC
  %7815 = add i64 %7814, 7
  store i64 %7815, i64* %PC
  %7816 = inttoptr i64 %7813 to i32*
  %7817 = load i32, i32* %7816
  %7818 = sext i32 %7817 to i64
  store i64 %7818, i64* %RCX, align 8, !tbaa !2428
  %7819 = load i64, i64* %RCX
  %7820 = load i64, i64* %PC
  %7821 = add i64 %7820, 7
  store i64 %7821, i64* %PC
  %7822 = sext i64 %7819 to i128
  %7823 = and i128 %7822, -18446744073709551616
  %7824 = zext i64 %7819 to i128
  %7825 = or i128 %7823, %7824
  %7826 = mul nsw i128 33800, %7825
  %7827 = trunc i128 %7826 to i64
  store i64 %7827, i64* %RCX, align 8, !tbaa !2428
  %7828 = sext i64 %7827 to i128
  %7829 = icmp ne i128 %7828, %7826
  %7830 = zext i1 %7829 to i8
  %7831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7830, i8* %7831, align 1, !tbaa !2432
  %7832 = trunc i128 %7826 to i32
  %7833 = and i32 %7832, 255
  %7834 = call i32 @llvm.ctpop.i32(i32 %7833) #16
  %7835 = trunc i32 %7834 to i8
  %7836 = and i8 %7835, 1
  %7837 = xor i8 %7836, 1
  %7838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7837, i8* %7838, align 1, !tbaa !2446
  %7839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7839, align 1, !tbaa !2450
  %7840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7840, align 1, !tbaa !2447
  %7841 = lshr i64 %7827, 63
  %7842 = trunc i64 %7841 to i8
  %7843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7842, i8* %7843, align 1, !tbaa !2448
  %7844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7830, i8* %7844, align 1, !tbaa !2449
  %7845 = load i64, i64* %RAX
  %7846 = load i64, i64* %RCX
  %7847 = load i64, i64* %PC
  %7848 = add i64 %7847, 3
  store i64 %7848, i64* %PC
  %7849 = add i64 %7846, %7845
  store i64 %7849, i64* %RAX, align 8, !tbaa !2428
  %7850 = icmp ult i64 %7849, %7845
  %7851 = icmp ult i64 %7849, %7846
  %7852 = or i1 %7850, %7851
  %7853 = zext i1 %7852 to i8
  %7854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7853, i8* %7854, align 1, !tbaa !2432
  %7855 = trunc i64 %7849 to i32
  %7856 = and i32 %7855, 255
  %7857 = call i32 @llvm.ctpop.i32(i32 %7856) #16
  %7858 = trunc i32 %7857 to i8
  %7859 = and i8 %7858, 1
  %7860 = xor i8 %7859, 1
  %7861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7860, i8* %7861, align 1, !tbaa !2446
  %7862 = xor i64 %7846, %7845
  %7863 = xor i64 %7862, %7849
  %7864 = lshr i64 %7863, 4
  %7865 = trunc i64 %7864 to i8
  %7866 = and i8 %7865, 1
  %7867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7866, i8* %7867, align 1, !tbaa !2450
  %7868 = icmp eq i64 %7849, 0
  %7869 = zext i1 %7868 to i8
  %7870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7869, i8* %7870, align 1, !tbaa !2447
  %7871 = lshr i64 %7849, 63
  %7872 = trunc i64 %7871 to i8
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7872, i8* %7873, align 1, !tbaa !2448
  %7874 = lshr i64 %7845, 63
  %7875 = lshr i64 %7846, 63
  %7876 = xor i64 %7871, %7874
  %7877 = xor i64 %7871, %7875
  %7878 = add nuw nsw i64 %7876, %7877
  %7879 = icmp eq i64 %7878, 2
  %7880 = zext i1 %7879 to i8
  %7881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7880, i8* %7881, align 1, !tbaa !2449
  %7882 = load i64, i64* %RBP
  %7883 = sub i64 %7882, 192
  %7884 = load i64, i64* %PC
  %7885 = add i64 %7884, 7
  store i64 %7885, i64* %PC
  %7886 = inttoptr i64 %7883 to i32*
  %7887 = load i32, i32* %7886
  %7888 = sext i32 %7887 to i64
  store i64 %7888, i64* %RCX, align 8, !tbaa !2428
  %7889 = load i64, i64* %RCX
  %7890 = load i64, i64* %PC
  %7891 = add i64 %7890, 7
  store i64 %7891, i64* %PC
  %7892 = sext i64 %7889 to i128
  %7893 = and i128 %7892, -18446744073709551616
  %7894 = zext i64 %7889 to i128
  %7895 = or i128 %7893, %7894
  %7896 = mul nsw i128 520, %7895
  %7897 = trunc i128 %7896 to i64
  store i64 %7897, i64* %RCX, align 8, !tbaa !2428
  %7898 = sext i64 %7897 to i128
  %7899 = icmp ne i128 %7898, %7896
  %7900 = zext i1 %7899 to i8
  %7901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7900, i8* %7901, align 1, !tbaa !2432
  %7902 = trunc i128 %7896 to i32
  %7903 = and i32 %7902, 255
  %7904 = call i32 @llvm.ctpop.i32(i32 %7903) #16
  %7905 = trunc i32 %7904 to i8
  %7906 = and i8 %7905, 1
  %7907 = xor i8 %7906, 1
  %7908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7907, i8* %7908, align 1, !tbaa !2446
  %7909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7909, align 1, !tbaa !2450
  %7910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7910, align 1, !tbaa !2447
  %7911 = lshr i64 %7897, 63
  %7912 = trunc i64 %7911 to i8
  %7913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7912, i8* %7913, align 1, !tbaa !2448
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7900, i8* %7914, align 1, !tbaa !2449
  %7915 = load i64, i64* %RAX
  %7916 = load i64, i64* %RCX
  %7917 = load i64, i64* %PC
  %7918 = add i64 %7917, 3
  store i64 %7918, i64* %PC
  %7919 = add i64 %7916, %7915
  store i64 %7919, i64* %RAX, align 8, !tbaa !2428
  %7920 = icmp ult i64 %7919, %7915
  %7921 = icmp ult i64 %7919, %7916
  %7922 = or i1 %7920, %7921
  %7923 = zext i1 %7922 to i8
  %7924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7923, i8* %7924, align 1, !tbaa !2432
  %7925 = trunc i64 %7919 to i32
  %7926 = and i32 %7925, 255
  %7927 = call i32 @llvm.ctpop.i32(i32 %7926) #16
  %7928 = trunc i32 %7927 to i8
  %7929 = and i8 %7928, 1
  %7930 = xor i8 %7929, 1
  %7931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7930, i8* %7931, align 1, !tbaa !2446
  %7932 = xor i64 %7916, %7915
  %7933 = xor i64 %7932, %7919
  %7934 = lshr i64 %7933, 4
  %7935 = trunc i64 %7934 to i8
  %7936 = and i8 %7935, 1
  %7937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7936, i8* %7937, align 1, !tbaa !2450
  %7938 = icmp eq i64 %7919, 0
  %7939 = zext i1 %7938 to i8
  %7940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7939, i8* %7940, align 1, !tbaa !2447
  %7941 = lshr i64 %7919, 63
  %7942 = trunc i64 %7941 to i8
  %7943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7942, i8* %7943, align 1, !tbaa !2448
  %7944 = lshr i64 %7915, 63
  %7945 = lshr i64 %7916, 63
  %7946 = xor i64 %7941, %7944
  %7947 = xor i64 %7941, %7945
  %7948 = add nuw nsw i64 %7946, %7947
  %7949 = icmp eq i64 %7948, 2
  %7950 = zext i1 %7949 to i8
  %7951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7950, i8* %7951, align 1, !tbaa !2449
  %7952 = load i64, i64* %RBP
  %7953 = sub i64 %7952, 196
  %7954 = load i64, i64* %PC
  %7955 = add i64 %7954, 7
  store i64 %7955, i64* %PC
  %7956 = inttoptr i64 %7953 to i32*
  %7957 = load i32, i32* %7956
  %7958 = sext i32 %7957 to i64
  store i64 %7958, i64* %RCX, align 8, !tbaa !2428
  %7959 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7960 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7961 = load i64, i64* %RAX
  %7962 = load i64, i64* %RCX
  %7963 = mul i64 %7962, 8
  %7964 = add i64 %7963, %7961
  %7965 = load i64, i64* %PC
  %7966 = add i64 %7965, 5
  store i64 %7966, i64* %PC
  %7967 = bitcast i8* %7960 to double*
  %7968 = load double, double* %7967, align 1
  %7969 = getelementptr inbounds i8, i8* %7960, i64 8
  %7970 = bitcast i8* %7969 to i64*
  %7971 = load i64, i64* %7970, align 1
  %7972 = inttoptr i64 %7964 to double*
  %7973 = load double, double* %7972
  %7974 = fsub double %7968, %7973
  %7975 = bitcast i8* %7959 to double*
  store double %7974, double* %7975, align 1, !tbaa !2453
  %7976 = getelementptr inbounds i8, i8* %7959, i64 8
  %7977 = bitcast i8* %7976 to i64*
  store i64 %7971, i64* %7977, align 1, !tbaa !2453
  %7978 = load i64, i64* %RBP
  %7979 = sub i64 %7978, 96
  %7980 = load i64, i64* %PC
  %7981 = add i64 %7980, 4
  store i64 %7981, i64* %PC
  %7982 = inttoptr i64 %7979 to i64*
  %7983 = load i64, i64* %7982
  store i64 %7983, i64* %RAX, align 8, !tbaa !2428
  %7984 = load i64, i64* %RBP
  %7985 = sub i64 %7984, 188
  %7986 = load i64, i64* %PC
  %7987 = add i64 %7986, 7
  store i64 %7987, i64* %PC
  %7988 = inttoptr i64 %7985 to i32*
  %7989 = load i32, i32* %7988
  %7990 = sext i32 %7989 to i64
  store i64 %7990, i64* %RCX, align 8, !tbaa !2428
  %7991 = load i64, i64* %RCX
  %7992 = load i64, i64* %PC
  %7993 = add i64 %7992, 7
  store i64 %7993, i64* %PC
  %7994 = sext i64 %7991 to i128
  %7995 = and i128 %7994, -18446744073709551616
  %7996 = zext i64 %7991 to i128
  %7997 = or i128 %7995, %7996
  %7998 = mul nsw i128 520, %7997
  %7999 = trunc i128 %7998 to i64
  store i64 %7999, i64* %RCX, align 8, !tbaa !2428
  %8000 = sext i64 %7999 to i128
  %8001 = icmp ne i128 %8000, %7998
  %8002 = zext i1 %8001 to i8
  %8003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8002, i8* %8003, align 1, !tbaa !2432
  %8004 = trunc i128 %7998 to i32
  %8005 = and i32 %8004, 255
  %8006 = call i32 @llvm.ctpop.i32(i32 %8005) #16
  %8007 = trunc i32 %8006 to i8
  %8008 = and i8 %8007, 1
  %8009 = xor i8 %8008, 1
  %8010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8009, i8* %8010, align 1, !tbaa !2446
  %8011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8011, align 1, !tbaa !2450
  %8012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8012, align 1, !tbaa !2447
  %8013 = lshr i64 %7999, 63
  %8014 = trunc i64 %8013 to i8
  %8015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8014, i8* %8015, align 1, !tbaa !2448
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8002, i8* %8016, align 1, !tbaa !2449
  %8017 = load i64, i64* %RAX
  %8018 = load i64, i64* %RCX
  %8019 = load i64, i64* %PC
  %8020 = add i64 %8019, 3
  store i64 %8020, i64* %PC
  %8021 = add i64 %8018, %8017
  store i64 %8021, i64* %RAX, align 8, !tbaa !2428
  %8022 = icmp ult i64 %8021, %8017
  %8023 = icmp ult i64 %8021, %8018
  %8024 = or i1 %8022, %8023
  %8025 = zext i1 %8024 to i8
  %8026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8025, i8* %8026, align 1, !tbaa !2432
  %8027 = trunc i64 %8021 to i32
  %8028 = and i32 %8027, 255
  %8029 = call i32 @llvm.ctpop.i32(i32 %8028) #16
  %8030 = trunc i32 %8029 to i8
  %8031 = and i8 %8030, 1
  %8032 = xor i8 %8031, 1
  %8033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8032, i8* %8033, align 1, !tbaa !2446
  %8034 = xor i64 %8018, %8017
  %8035 = xor i64 %8034, %8021
  %8036 = lshr i64 %8035, 4
  %8037 = trunc i64 %8036 to i8
  %8038 = and i8 %8037, 1
  %8039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8038, i8* %8039, align 1, !tbaa !2450
  %8040 = icmp eq i64 %8021, 0
  %8041 = zext i1 %8040 to i8
  %8042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8041, i8* %8042, align 1, !tbaa !2447
  %8043 = lshr i64 %8021, 63
  %8044 = trunc i64 %8043 to i8
  %8045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8044, i8* %8045, align 1, !tbaa !2448
  %8046 = lshr i64 %8017, 63
  %8047 = lshr i64 %8018, 63
  %8048 = xor i64 %8043, %8046
  %8049 = xor i64 %8043, %8047
  %8050 = add nuw nsw i64 %8048, %8049
  %8051 = icmp eq i64 %8050, 2
  %8052 = zext i1 %8051 to i8
  %8053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8052, i8* %8053, align 1, !tbaa !2449
  %8054 = load i64, i64* %RBP
  %8055 = sub i64 %8054, 192
  %8056 = load i64, i64* %PC
  %8057 = add i64 %8056, 7
  store i64 %8057, i64* %PC
  %8058 = inttoptr i64 %8055 to i32*
  %8059 = load i32, i32* %8058
  %8060 = sext i32 %8059 to i64
  store i64 %8060, i64* %RCX, align 8, !tbaa !2428
  %8061 = load i64, i64* %RAX
  %8062 = load i64, i64* %RCX
  %8063 = mul i64 %8062, 8
  %8064 = add i64 %8063, %8061
  %8065 = bitcast %union.vec128_t* %XMM0 to i8*
  %8066 = load i64, i64* %PC
  %8067 = add i64 %8066, 5
  store i64 %8067, i64* %PC
  %8068 = bitcast i8* %8065 to double*
  %8069 = load double, double* %8068, align 1
  %8070 = inttoptr i64 %8064 to double*
  store double %8069, double* %8070
  %8071 = load i64, i64* %RBP
  %8072 = sub i64 %8071, 176
  %8073 = load i64, i64* %PC
  %8074 = add i64 %8073, 7
  store i64 %8074, i64* %PC
  %8075 = inttoptr i64 %8072 to i64*
  %8076 = load i64, i64* %8075
  store i64 %8076, i64* %RAX, align 8, !tbaa !2428
  %8077 = load i64, i64* %RBP
  %8078 = sub i64 %8077, 192
  %8079 = load i64, i64* %PC
  %8080 = add i64 %8079, 7
  store i64 %8080, i64* %PC
  %8081 = inttoptr i64 %8078 to i32*
  %8082 = load i32, i32* %8081
  %8083 = sext i32 %8082 to i64
  store i64 %8083, i64* %RCX, align 8, !tbaa !2428
  %8084 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8085 = load i64, i64* %RAX
  %8086 = load i64, i64* %RCX
  %8087 = mul i64 %8086, 8
  %8088 = add i64 %8087, %8085
  %8089 = load i64, i64* %PC
  %8090 = add i64 %8089, 5
  store i64 %8090, i64* %PC
  %8091 = inttoptr i64 %8088 to double*
  %8092 = load double, double* %8091
  %8093 = bitcast i8* %8084 to double*
  store double %8092, double* %8093, align 1, !tbaa !2453
  %8094 = getelementptr inbounds i8, i8* %8084, i64 8
  %8095 = bitcast i8* %8094 to double*
  store double 0.000000e+00, double* %8095, align 1, !tbaa !2453
  %8096 = load i64, i64* %RBP
  %8097 = sub i64 %8096, 184
  %8098 = load i64, i64* %PC
  %8099 = add i64 %8098, 7
  store i64 %8099, i64* %PC
  %8100 = inttoptr i64 %8097 to i64*
  %8101 = load i64, i64* %8100
  store i64 %8101, i64* %RAX, align 8, !tbaa !2428
  %8102 = load i64, i64* %RBP
  %8103 = sub i64 %8102, 192
  %8104 = load i64, i64* %PC
  %8105 = add i64 %8104, 7
  store i64 %8105, i64* %PC
  %8106 = inttoptr i64 %8103 to i32*
  %8107 = load i32, i32* %8106
  %8108 = sext i32 %8107 to i64
  store i64 %8108, i64* %RCX, align 8, !tbaa !2428
  %8109 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8111 = load i64, i64* %RAX
  %8112 = load i64, i64* %RCX
  %8113 = mul i64 %8112, 8
  %8114 = add i64 %8113, %8111
  %8115 = load i64, i64* %PC
  %8116 = add i64 %8115, 5
  store i64 %8116, i64* %PC
  %8117 = bitcast i8* %8110 to double*
  %8118 = load double, double* %8117, align 1
  %8119 = getelementptr inbounds i8, i8* %8110, i64 8
  %8120 = bitcast i8* %8119 to i64*
  %8121 = load i64, i64* %8120, align 1
  %8122 = inttoptr i64 %8114 to double*
  %8123 = load double, double* %8122
  %8124 = fdiv double %8118, %8123
  %8125 = bitcast i8* %8109 to double*
  store double %8124, double* %8125, align 1, !tbaa !2453
  %8126 = getelementptr inbounds i8, i8* %8109, i64 8
  %8127 = bitcast i8* %8126 to i64*
  store i64 %8121, i64* %8127, align 1, !tbaa !2453
  %8128 = load i64, i64* %RBP
  %8129 = sub i64 %8128, 112
  %8130 = load i64, i64* %PC
  %8131 = add i64 %8130, 4
  store i64 %8131, i64* %PC
  %8132 = inttoptr i64 %8129 to i64*
  %8133 = load i64, i64* %8132
  store i64 %8133, i64* %RAX, align 8, !tbaa !2428
  %8134 = load i64, i64* %RBP
  %8135 = sub i64 %8134, 188
  %8136 = load i64, i64* %PC
  %8137 = add i64 %8136, 7
  store i64 %8137, i64* %PC
  %8138 = inttoptr i64 %8135 to i32*
  %8139 = load i32, i32* %8138
  %8140 = sext i32 %8139 to i64
  store i64 %8140, i64* %RCX, align 8, !tbaa !2428
  %8141 = load i64, i64* %RCX
  %8142 = load i64, i64* %PC
  %8143 = add i64 %8142, 7
  store i64 %8143, i64* %PC
  %8144 = sext i64 %8141 to i128
  %8145 = and i128 %8144, -18446744073709551616
  %8146 = zext i64 %8141 to i128
  %8147 = or i128 %8145, %8146
  %8148 = mul nsw i128 33800, %8147
  %8149 = trunc i128 %8148 to i64
  store i64 %8149, i64* %RCX, align 8, !tbaa !2428
  %8150 = sext i64 %8149 to i128
  %8151 = icmp ne i128 %8150, %8148
  %8152 = zext i1 %8151 to i8
  %8153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8152, i8* %8153, align 1, !tbaa !2432
  %8154 = trunc i128 %8148 to i32
  %8155 = and i32 %8154, 255
  %8156 = call i32 @llvm.ctpop.i32(i32 %8155) #16
  %8157 = trunc i32 %8156 to i8
  %8158 = and i8 %8157, 1
  %8159 = xor i8 %8158, 1
  %8160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8159, i8* %8160, align 1, !tbaa !2446
  %8161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8161, align 1, !tbaa !2450
  %8162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8162, align 1, !tbaa !2447
  %8163 = lshr i64 %8149, 63
  %8164 = trunc i64 %8163 to i8
  %8165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8164, i8* %8165, align 1, !tbaa !2448
  %8166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8152, i8* %8166, align 1, !tbaa !2449
  %8167 = load i64, i64* %RAX
  %8168 = load i64, i64* %RCX
  %8169 = load i64, i64* %PC
  %8170 = add i64 %8169, 3
  store i64 %8170, i64* %PC
  %8171 = add i64 %8168, %8167
  store i64 %8171, i64* %RAX, align 8, !tbaa !2428
  %8172 = icmp ult i64 %8171, %8167
  %8173 = icmp ult i64 %8171, %8168
  %8174 = or i1 %8172, %8173
  %8175 = zext i1 %8174 to i8
  %8176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8175, i8* %8176, align 1, !tbaa !2432
  %8177 = trunc i64 %8171 to i32
  %8178 = and i32 %8177, 255
  %8179 = call i32 @llvm.ctpop.i32(i32 %8178) #16
  %8180 = trunc i32 %8179 to i8
  %8181 = and i8 %8180, 1
  %8182 = xor i8 %8181, 1
  %8183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8182, i8* %8183, align 1, !tbaa !2446
  %8184 = xor i64 %8168, %8167
  %8185 = xor i64 %8184, %8171
  %8186 = lshr i64 %8185, 4
  %8187 = trunc i64 %8186 to i8
  %8188 = and i8 %8187, 1
  %8189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8188, i8* %8189, align 1, !tbaa !2450
  %8190 = icmp eq i64 %8171, 0
  %8191 = zext i1 %8190 to i8
  %8192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8191, i8* %8192, align 1, !tbaa !2447
  %8193 = lshr i64 %8171, 63
  %8194 = trunc i64 %8193 to i8
  %8195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8194, i8* %8195, align 1, !tbaa !2448
  %8196 = lshr i64 %8167, 63
  %8197 = lshr i64 %8168, 63
  %8198 = xor i64 %8193, %8196
  %8199 = xor i64 %8193, %8197
  %8200 = add nuw nsw i64 %8198, %8199
  %8201 = icmp eq i64 %8200, 2
  %8202 = zext i1 %8201 to i8
  %8203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8202, i8* %8203, align 1, !tbaa !2449
  %8204 = load i64, i64* %RBP
  %8205 = sub i64 %8204, 192
  %8206 = load i64, i64* %PC
  %8207 = add i64 %8206, 7
  store i64 %8207, i64* %PC
  %8208 = inttoptr i64 %8205 to i32*
  %8209 = load i32, i32* %8208
  %8210 = sext i32 %8209 to i64
  store i64 %8210, i64* %RCX, align 8, !tbaa !2428
  %8211 = load i64, i64* %RCX
  %8212 = load i64, i64* %PC
  %8213 = add i64 %8212, 7
  store i64 %8213, i64* %PC
  %8214 = sext i64 %8211 to i128
  %8215 = and i128 %8214, -18446744073709551616
  %8216 = zext i64 %8211 to i128
  %8217 = or i128 %8215, %8216
  %8218 = mul nsw i128 520, %8217
  %8219 = trunc i128 %8218 to i64
  store i64 %8219, i64* %RCX, align 8, !tbaa !2428
  %8220 = sext i64 %8219 to i128
  %8221 = icmp ne i128 %8220, %8218
  %8222 = zext i1 %8221 to i8
  %8223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8222, i8* %8223, align 1, !tbaa !2432
  %8224 = trunc i128 %8218 to i32
  %8225 = and i32 %8224, 255
  %8226 = call i32 @llvm.ctpop.i32(i32 %8225) #16
  %8227 = trunc i32 %8226 to i8
  %8228 = and i8 %8227, 1
  %8229 = xor i8 %8228, 1
  %8230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8229, i8* %8230, align 1, !tbaa !2446
  %8231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8231, align 1, !tbaa !2450
  %8232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8232, align 1, !tbaa !2447
  %8233 = lshr i64 %8219, 63
  %8234 = trunc i64 %8233 to i8
  %8235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8234, i8* %8235, align 1, !tbaa !2448
  %8236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8222, i8* %8236, align 1, !tbaa !2449
  %8237 = load i64, i64* %RAX
  %8238 = load i64, i64* %RCX
  %8239 = load i64, i64* %PC
  %8240 = add i64 %8239, 3
  store i64 %8240, i64* %PC
  %8241 = add i64 %8238, %8237
  store i64 %8241, i64* %RAX, align 8, !tbaa !2428
  %8242 = icmp ult i64 %8241, %8237
  %8243 = icmp ult i64 %8241, %8238
  %8244 = or i1 %8242, %8243
  %8245 = zext i1 %8244 to i8
  %8246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8245, i8* %8246, align 1, !tbaa !2432
  %8247 = trunc i64 %8241 to i32
  %8248 = and i32 %8247, 255
  %8249 = call i32 @llvm.ctpop.i32(i32 %8248) #16
  %8250 = trunc i32 %8249 to i8
  %8251 = and i8 %8250, 1
  %8252 = xor i8 %8251, 1
  %8253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8252, i8* %8253, align 1, !tbaa !2446
  %8254 = xor i64 %8238, %8237
  %8255 = xor i64 %8254, %8241
  %8256 = lshr i64 %8255, 4
  %8257 = trunc i64 %8256 to i8
  %8258 = and i8 %8257, 1
  %8259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8258, i8* %8259, align 1, !tbaa !2450
  %8260 = icmp eq i64 %8241, 0
  %8261 = zext i1 %8260 to i8
  %8262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8261, i8* %8262, align 1, !tbaa !2447
  %8263 = lshr i64 %8241, 63
  %8264 = trunc i64 %8263 to i8
  %8265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8264, i8* %8265, align 1, !tbaa !2448
  %8266 = lshr i64 %8237, 63
  %8267 = lshr i64 %8238, 63
  %8268 = xor i64 %8263, %8266
  %8269 = xor i64 %8263, %8267
  %8270 = add nuw nsw i64 %8268, %8269
  %8271 = icmp eq i64 %8270, 2
  %8272 = zext i1 %8271 to i8
  %8273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8272, i8* %8273, align 1, !tbaa !2449
  %8274 = load i64, i64* %RBP
  %8275 = sub i64 %8274, 196
  %8276 = load i64, i64* %PC
  %8277 = add i64 %8276, 7
  store i64 %8277, i64* %PC
  %8278 = inttoptr i64 %8275 to i32*
  %8279 = load i32, i32* %8278
  %8280 = sext i32 %8279 to i64
  store i64 %8280, i64* %RCX, align 8, !tbaa !2428
  %8281 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8282 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8283 = load i64, i64* %RAX
  %8284 = load i64, i64* %RCX
  %8285 = mul i64 %8284, 8
  %8286 = add i64 %8285, %8283
  %8287 = load i64, i64* %PC
  %8288 = add i64 %8287, 5
  store i64 %8288, i64* %PC
  %8289 = bitcast i8* %8282 to double*
  %8290 = load double, double* %8289, align 1
  %8291 = getelementptr inbounds i8, i8* %8282, i64 8
  %8292 = bitcast i8* %8291 to i64*
  %8293 = load i64, i64* %8292, align 1
  %8294 = inttoptr i64 %8286 to double*
  %8295 = load double, double* %8294
  %8296 = fmul double %8290, %8295
  %8297 = bitcast i8* %8281 to double*
  store double %8296, double* %8297, align 1, !tbaa !2453
  %8298 = getelementptr inbounds i8, i8* %8281, i64 8
  %8299 = bitcast i8* %8298 to i64*
  store i64 %8293, i64* %8299, align 1, !tbaa !2453
  %8300 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8301 = load i64, i64* %RBP
  %8302 = sub i64 %8301, 72
  %8303 = load i64, i64* %PC
  %8304 = add i64 %8303, 5
  store i64 %8304, i64* %PC
  %8305 = inttoptr i64 %8302 to double*
  %8306 = load double, double* %8305
  %8307 = bitcast i8* %8300 to double*
  store double %8306, double* %8307, align 1, !tbaa !2453
  %8308 = getelementptr inbounds i8, i8* %8300, i64 8
  %8309 = bitcast i8* %8308 to double*
  store double 0.000000e+00, double* %8309, align 1, !tbaa !2453
  %8310 = load i64, i64* %RBP
  %8311 = sub i64 %8310, 184
  %8312 = load i64, i64* %PC
  %8313 = add i64 %8312, 7
  store i64 %8313, i64* %PC
  %8314 = inttoptr i64 %8311 to i64*
  %8315 = load i64, i64* %8314
  store i64 %8315, i64* %RAX, align 8, !tbaa !2428
  %8316 = load i64, i64* %RBP
  %8317 = sub i64 %8316, 192
  %8318 = load i64, i64* %PC
  %8319 = add i64 %8318, 7
  store i64 %8319, i64* %PC
  %8320 = inttoptr i64 %8317 to i32*
  %8321 = load i32, i32* %8320
  %8322 = sext i32 %8321 to i64
  store i64 %8322, i64* %RCX, align 8, !tbaa !2428
  %8323 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8325 = load i64, i64* %RAX
  %8326 = load i64, i64* %RCX
  %8327 = mul i64 %8326, 8
  %8328 = add i64 %8327, %8325
  %8329 = load i64, i64* %PC
  %8330 = add i64 %8329, 5
  store i64 %8330, i64* %PC
  %8331 = bitcast i8* %8324 to double*
  %8332 = load double, double* %8331, align 1
  %8333 = getelementptr inbounds i8, i8* %8324, i64 8
  %8334 = bitcast i8* %8333 to i64*
  %8335 = load i64, i64* %8334, align 1
  %8336 = inttoptr i64 %8328 to double*
  %8337 = load double, double* %8336
  %8338 = fdiv double %8332, %8337
  %8339 = bitcast i8* %8323 to double*
  store double %8338, double* %8339, align 1, !tbaa !2453
  %8340 = getelementptr inbounds i8, i8* %8323, i64 8
  %8341 = bitcast i8* %8340 to i64*
  store i64 %8335, i64* %8341, align 1, !tbaa !2453
  %8342 = load i64, i64* %RBP
  %8343 = sub i64 %8342, 96
  %8344 = load i64, i64* %PC
  %8345 = add i64 %8344, 4
  store i64 %8345, i64* %PC
  %8346 = inttoptr i64 %8343 to i64*
  %8347 = load i64, i64* %8346
  store i64 %8347, i64* %RAX, align 8, !tbaa !2428
  %8348 = load i64, i64* %RBP
  %8349 = sub i64 %8348, 188
  %8350 = load i64, i64* %PC
  %8351 = add i64 %8350, 7
  store i64 %8351, i64* %PC
  %8352 = inttoptr i64 %8349 to i32*
  %8353 = load i32, i32* %8352
  %8354 = sext i32 %8353 to i64
  store i64 %8354, i64* %RCX, align 8, !tbaa !2428
  %8355 = load i64, i64* %RCX
  %8356 = load i64, i64* %PC
  %8357 = add i64 %8356, 7
  store i64 %8357, i64* %PC
  %8358 = sext i64 %8355 to i128
  %8359 = and i128 %8358, -18446744073709551616
  %8360 = zext i64 %8355 to i128
  %8361 = or i128 %8359, %8360
  %8362 = mul nsw i128 520, %8361
  %8363 = trunc i128 %8362 to i64
  store i64 %8363, i64* %RCX, align 8, !tbaa !2428
  %8364 = sext i64 %8363 to i128
  %8365 = icmp ne i128 %8364, %8362
  %8366 = zext i1 %8365 to i8
  %8367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8366, i8* %8367, align 1, !tbaa !2432
  %8368 = trunc i128 %8362 to i32
  %8369 = and i32 %8368, 255
  %8370 = call i32 @llvm.ctpop.i32(i32 %8369) #16
  %8371 = trunc i32 %8370 to i8
  %8372 = and i8 %8371, 1
  %8373 = xor i8 %8372, 1
  %8374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8373, i8* %8374, align 1, !tbaa !2446
  %8375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8375, align 1, !tbaa !2450
  %8376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8376, align 1, !tbaa !2447
  %8377 = lshr i64 %8363, 63
  %8378 = trunc i64 %8377 to i8
  %8379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8378, i8* %8379, align 1, !tbaa !2448
  %8380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8366, i8* %8380, align 1, !tbaa !2449
  %8381 = load i64, i64* %RAX
  %8382 = load i64, i64* %RCX
  %8383 = load i64, i64* %PC
  %8384 = add i64 %8383, 3
  store i64 %8384, i64* %PC
  %8385 = add i64 %8382, %8381
  store i64 %8385, i64* %RAX, align 8, !tbaa !2428
  %8386 = icmp ult i64 %8385, %8381
  %8387 = icmp ult i64 %8385, %8382
  %8388 = or i1 %8386, %8387
  %8389 = zext i1 %8388 to i8
  %8390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8389, i8* %8390, align 1, !tbaa !2432
  %8391 = trunc i64 %8385 to i32
  %8392 = and i32 %8391, 255
  %8393 = call i32 @llvm.ctpop.i32(i32 %8392) #16
  %8394 = trunc i32 %8393 to i8
  %8395 = and i8 %8394, 1
  %8396 = xor i8 %8395, 1
  %8397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8396, i8* %8397, align 1, !tbaa !2446
  %8398 = xor i64 %8382, %8381
  %8399 = xor i64 %8398, %8385
  %8400 = lshr i64 %8399, 4
  %8401 = trunc i64 %8400 to i8
  %8402 = and i8 %8401, 1
  %8403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8402, i8* %8403, align 1, !tbaa !2450
  %8404 = icmp eq i64 %8385, 0
  %8405 = zext i1 %8404 to i8
  %8406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8405, i8* %8406, align 1, !tbaa !2447
  %8407 = lshr i64 %8385, 63
  %8408 = trunc i64 %8407 to i8
  %8409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8408, i8* %8409, align 1, !tbaa !2448
  %8410 = lshr i64 %8381, 63
  %8411 = lshr i64 %8382, 63
  %8412 = xor i64 %8407, %8410
  %8413 = xor i64 %8407, %8411
  %8414 = add nuw nsw i64 %8412, %8413
  %8415 = icmp eq i64 %8414, 2
  %8416 = zext i1 %8415 to i8
  %8417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8416, i8* %8417, align 1, !tbaa !2449
  %8418 = load i64, i64* %RBP
  %8419 = sub i64 %8418, 192
  %8420 = load i64, i64* %PC
  %8421 = add i64 %8420, 7
  store i64 %8421, i64* %PC
  %8422 = inttoptr i64 %8419 to i32*
  %8423 = load i32, i32* %8422
  %8424 = sext i32 %8423 to i64
  store i64 %8424, i64* %RCX, align 8, !tbaa !2428
  %8425 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8426 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8427 = load i64, i64* %RAX
  %8428 = load i64, i64* %RCX
  %8429 = mul i64 %8428, 8
  %8430 = add i64 %8429, %8427
  %8431 = load i64, i64* %PC
  %8432 = add i64 %8431, 5
  store i64 %8432, i64* %PC
  %8433 = bitcast i8* %8426 to double*
  %8434 = load double, double* %8433, align 1
  %8435 = getelementptr inbounds i8, i8* %8426, i64 8
  %8436 = bitcast i8* %8435 to i64*
  %8437 = load i64, i64* %8436, align 1
  %8438 = inttoptr i64 %8430 to double*
  %8439 = load double, double* %8438
  %8440 = fmul double %8434, %8439
  %8441 = bitcast i8* %8425 to double*
  store double %8440, double* %8441, align 1, !tbaa !2453
  %8442 = getelementptr inbounds i8, i8* %8425, i64 8
  %8443 = bitcast i8* %8442 to i64*
  store i64 %8437, i64* %8443, align 1, !tbaa !2453
  %8444 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8445 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8446 = bitcast %union.vec128_t* %XMM1 to i8*
  %8447 = load i64, i64* %PC
  %8448 = add i64 %8447, 4
  store i64 %8448, i64* %PC
  %8449 = bitcast i8* %8445 to double*
  %8450 = load double, double* %8449, align 1
  %8451 = getelementptr inbounds i8, i8* %8445, i64 8
  %8452 = bitcast i8* %8451 to i64*
  %8453 = load i64, i64* %8452, align 1
  %8454 = bitcast i8* %8446 to double*
  %8455 = load double, double* %8454, align 1
  %8456 = fsub double %8450, %8455
  %8457 = bitcast i8* %8444 to double*
  store double %8456, double* %8457, align 1, !tbaa !2453
  %8458 = getelementptr inbounds i8, i8* %8444, i64 8
  %8459 = bitcast i8* %8458 to i64*
  store i64 %8453, i64* %8459, align 1, !tbaa !2453
  %8460 = load i64, i64* %RBP
  %8461 = sub i64 %8460, 104
  %8462 = load i64, i64* %PC
  %8463 = add i64 %8462, 4
  store i64 %8463, i64* %PC
  %8464 = inttoptr i64 %8461 to i64*
  %8465 = load i64, i64* %8464
  store i64 %8465, i64* %RAX, align 8, !tbaa !2428
  %8466 = load i64, i64* %RBP
  %8467 = sub i64 %8466, 188
  %8468 = load i64, i64* %PC
  %8469 = add i64 %8468, 7
  store i64 %8469, i64* %PC
  %8470 = inttoptr i64 %8467 to i32*
  %8471 = load i32, i32* %8470
  %8472 = sext i32 %8471 to i64
  store i64 %8472, i64* %RCX, align 8, !tbaa !2428
  %8473 = load i64, i64* %RCX
  %8474 = load i64, i64* %PC
  %8475 = add i64 %8474, 7
  store i64 %8475, i64* %PC
  %8476 = sext i64 %8473 to i128
  %8477 = and i128 %8476, -18446744073709551616
  %8478 = zext i64 %8473 to i128
  %8479 = or i128 %8477, %8478
  %8480 = mul nsw i128 520, %8479
  %8481 = trunc i128 %8480 to i64
  store i64 %8481, i64* %RCX, align 8, !tbaa !2428
  %8482 = sext i64 %8481 to i128
  %8483 = icmp ne i128 %8482, %8480
  %8484 = zext i1 %8483 to i8
  %8485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8484, i8* %8485, align 1, !tbaa !2432
  %8486 = trunc i128 %8480 to i32
  %8487 = and i32 %8486, 255
  %8488 = call i32 @llvm.ctpop.i32(i32 %8487) #16
  %8489 = trunc i32 %8488 to i8
  %8490 = and i8 %8489, 1
  %8491 = xor i8 %8490, 1
  %8492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8491, i8* %8492, align 1, !tbaa !2446
  %8493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8493, align 1, !tbaa !2450
  %8494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8494, align 1, !tbaa !2447
  %8495 = lshr i64 %8481, 63
  %8496 = trunc i64 %8495 to i8
  %8497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8496, i8* %8497, align 1, !tbaa !2448
  %8498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8484, i8* %8498, align 1, !tbaa !2449
  %8499 = load i64, i64* %RAX
  %8500 = load i64, i64* %RCX
  %8501 = load i64, i64* %PC
  %8502 = add i64 %8501, 3
  store i64 %8502, i64* %PC
  %8503 = add i64 %8500, %8499
  store i64 %8503, i64* %RAX, align 8, !tbaa !2428
  %8504 = icmp ult i64 %8503, %8499
  %8505 = icmp ult i64 %8503, %8500
  %8506 = or i1 %8504, %8505
  %8507 = zext i1 %8506 to i8
  %8508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8507, i8* %8508, align 1, !tbaa !2432
  %8509 = trunc i64 %8503 to i32
  %8510 = and i32 %8509, 255
  %8511 = call i32 @llvm.ctpop.i32(i32 %8510) #16
  %8512 = trunc i32 %8511 to i8
  %8513 = and i8 %8512, 1
  %8514 = xor i8 %8513, 1
  %8515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8514, i8* %8515, align 1, !tbaa !2446
  %8516 = xor i64 %8500, %8499
  %8517 = xor i64 %8516, %8503
  %8518 = lshr i64 %8517, 4
  %8519 = trunc i64 %8518 to i8
  %8520 = and i8 %8519, 1
  %8521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8520, i8* %8521, align 1, !tbaa !2450
  %8522 = icmp eq i64 %8503, 0
  %8523 = zext i1 %8522 to i8
  %8524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8523, i8* %8524, align 1, !tbaa !2447
  %8525 = lshr i64 %8503, 63
  %8526 = trunc i64 %8525 to i8
  %8527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8526, i8* %8527, align 1, !tbaa !2448
  %8528 = lshr i64 %8499, 63
  %8529 = lshr i64 %8500, 63
  %8530 = xor i64 %8525, %8528
  %8531 = xor i64 %8525, %8529
  %8532 = add nuw nsw i64 %8530, %8531
  %8533 = icmp eq i64 %8532, 2
  %8534 = zext i1 %8533 to i8
  %8535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8534, i8* %8535, align 1, !tbaa !2449
  %8536 = load i64, i64* %RBP
  %8537 = sub i64 %8536, 192
  %8538 = load i64, i64* %PC
  %8539 = add i64 %8538, 7
  store i64 %8539, i64* %PC
  %8540 = inttoptr i64 %8537 to i32*
  %8541 = load i32, i32* %8540
  %8542 = sext i32 %8541 to i64
  store i64 %8542, i64* %RCX, align 8, !tbaa !2428
  %8543 = load i64, i64* %RAX
  %8544 = load i64, i64* %RCX
  %8545 = mul i64 %8544, 8
  %8546 = add i64 %8545, %8543
  %8547 = bitcast %union.vec128_t* %XMM0 to i8*
  %8548 = load i64, i64* %PC
  %8549 = add i64 %8548, 5
  store i64 %8549, i64* %PC
  %8550 = bitcast i8* %8547 to double*
  %8551 = load double, double* %8550, align 1
  %8552 = inttoptr i64 %8546 to double*
  store double %8551, double* %8552
  %8553 = load i64, i64* %RBP
  %8554 = sub i64 %8553, 160
  %8555 = load i64, i64* %PC
  %8556 = add i64 %8555, 7
  store i64 %8556, i64* %PC
  %8557 = inttoptr i64 %8554 to i64*
  %8558 = load i64, i64* %8557
  store i64 %8558, i64* %RAX, align 8, !tbaa !2428
  %8559 = load i64, i64* %RBP
  %8560 = sub i64 %8559, 196
  %8561 = load i64, i64* %PC
  %8562 = add i64 %8561, 7
  store i64 %8562, i64* %PC
  %8563 = inttoptr i64 %8560 to i32*
  %8564 = load i32, i32* %8563
  %8565 = sext i32 %8564 to i64
  store i64 %8565, i64* %RCX, align 8, !tbaa !2428
  %8566 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8567 = load i64, i64* %RAX
  %8568 = load i64, i64* %RCX
  %8569 = mul i64 %8568, 8
  %8570 = add i64 %8569, %8567
  %8571 = load i64, i64* %PC
  %8572 = add i64 %8571, 5
  store i64 %8572, i64* %PC
  %8573 = inttoptr i64 %8570 to double*
  %8574 = load double, double* %8573
  %8575 = bitcast i8* %8566 to double*
  store double %8574, double* %8575, align 1, !tbaa !2453
  %8576 = getelementptr inbounds i8, i8* %8566, i64 8
  %8577 = bitcast i8* %8576 to double*
  store double 0.000000e+00, double* %8577, align 1, !tbaa !2453
  %8578 = load i64, i64* %RBP
  %8579 = sub i64 %8578, 168
  %8580 = load i64, i64* %PC
  %8581 = add i64 %8580, 7
  store i64 %8581, i64* %PC
  %8582 = inttoptr i64 %8579 to i64*
  %8583 = load i64, i64* %8582
  store i64 %8583, i64* %RAX, align 8, !tbaa !2428
  %8584 = load i64, i64* %RBP
  %8585 = sub i64 %8584, 196
  %8586 = load i64, i64* %PC
  %8587 = add i64 %8586, 7
  store i64 %8587, i64* %PC
  %8588 = inttoptr i64 %8585 to i32*
  %8589 = load i32, i32* %8588
  %8590 = sext i32 %8589 to i64
  store i64 %8590, i64* %RCX, align 8, !tbaa !2428
  %8591 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8592 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8593 = load i64, i64* %RAX
  %8594 = load i64, i64* %RCX
  %8595 = mul i64 %8594, 8
  %8596 = add i64 %8595, %8593
  %8597 = load i64, i64* %PC
  %8598 = add i64 %8597, 5
  store i64 %8598, i64* %PC
  %8599 = bitcast i8* %8592 to double*
  %8600 = load double, double* %8599, align 1
  %8601 = getelementptr inbounds i8, i8* %8592, i64 8
  %8602 = bitcast i8* %8601 to i64*
  %8603 = load i64, i64* %8602, align 1
  %8604 = inttoptr i64 %8596 to double*
  %8605 = load double, double* %8604
  %8606 = fdiv double %8600, %8605
  %8607 = bitcast i8* %8591 to double*
  store double %8606, double* %8607, align 1, !tbaa !2453
  %8608 = getelementptr inbounds i8, i8* %8591, i64 8
  %8609 = bitcast i8* %8608 to i64*
  store i64 %8603, i64* %8609, align 1, !tbaa !2453
  %8610 = load i64, i64* %RBP
  %8611 = sub i64 %8610, 136
  %8612 = load i64, i64* %PC
  %8613 = add i64 %8612, 7
  store i64 %8613, i64* %PC
  %8614 = inttoptr i64 %8611 to i64*
  %8615 = load i64, i64* %8614
  store i64 %8615, i64* %RAX, align 8, !tbaa !2428
  %8616 = load i64, i64* %RBP
  %8617 = sub i64 %8616, 188
  %8618 = load i64, i64* %PC
  %8619 = add i64 %8618, 7
  store i64 %8619, i64* %PC
  %8620 = inttoptr i64 %8617 to i32*
  %8621 = load i32, i32* %8620
  %8622 = sext i32 %8621 to i64
  store i64 %8622, i64* %RCX, align 8, !tbaa !2428
  %8623 = load i64, i64* %RCX
  %8624 = load i64, i64* %PC
  %8625 = add i64 %8624, 7
  store i64 %8625, i64* %PC
  %8626 = sext i64 %8623 to i128
  %8627 = and i128 %8626, -18446744073709551616
  %8628 = zext i64 %8623 to i128
  %8629 = or i128 %8627, %8628
  %8630 = mul nsw i128 33800, %8629
  %8631 = trunc i128 %8630 to i64
  store i64 %8631, i64* %RCX, align 8, !tbaa !2428
  %8632 = sext i64 %8631 to i128
  %8633 = icmp ne i128 %8632, %8630
  %8634 = zext i1 %8633 to i8
  %8635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8634, i8* %8635, align 1, !tbaa !2432
  %8636 = trunc i128 %8630 to i32
  %8637 = and i32 %8636, 255
  %8638 = call i32 @llvm.ctpop.i32(i32 %8637) #16
  %8639 = trunc i32 %8638 to i8
  %8640 = and i8 %8639, 1
  %8641 = xor i8 %8640, 1
  %8642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8641, i8* %8642, align 1, !tbaa !2446
  %8643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8643, align 1, !tbaa !2450
  %8644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8644, align 1, !tbaa !2447
  %8645 = lshr i64 %8631, 63
  %8646 = trunc i64 %8645 to i8
  %8647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8646, i8* %8647, align 1, !tbaa !2448
  %8648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8634, i8* %8648, align 1, !tbaa !2449
  %8649 = load i64, i64* %RAX
  %8650 = load i64, i64* %RCX
  %8651 = load i64, i64* %PC
  %8652 = add i64 %8651, 3
  store i64 %8652, i64* %PC
  %8653 = add i64 %8650, %8649
  store i64 %8653, i64* %RAX, align 8, !tbaa !2428
  %8654 = icmp ult i64 %8653, %8649
  %8655 = icmp ult i64 %8653, %8650
  %8656 = or i1 %8654, %8655
  %8657 = zext i1 %8656 to i8
  %8658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8657, i8* %8658, align 1, !tbaa !2432
  %8659 = trunc i64 %8653 to i32
  %8660 = and i32 %8659, 255
  %8661 = call i32 @llvm.ctpop.i32(i32 %8660) #16
  %8662 = trunc i32 %8661 to i8
  %8663 = and i8 %8662, 1
  %8664 = xor i8 %8663, 1
  %8665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8664, i8* %8665, align 1, !tbaa !2446
  %8666 = xor i64 %8650, %8649
  %8667 = xor i64 %8666, %8653
  %8668 = lshr i64 %8667, 4
  %8669 = trunc i64 %8668 to i8
  %8670 = and i8 %8669, 1
  %8671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8670, i8* %8671, align 1, !tbaa !2450
  %8672 = icmp eq i64 %8653, 0
  %8673 = zext i1 %8672 to i8
  %8674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8673, i8* %8674, align 1, !tbaa !2447
  %8675 = lshr i64 %8653, 63
  %8676 = trunc i64 %8675 to i8
  %8677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8676, i8* %8677, align 1, !tbaa !2448
  %8678 = lshr i64 %8649, 63
  %8679 = lshr i64 %8650, 63
  %8680 = xor i64 %8675, %8678
  %8681 = xor i64 %8675, %8679
  %8682 = add nuw nsw i64 %8680, %8681
  %8683 = icmp eq i64 %8682, 2
  %8684 = zext i1 %8683 to i8
  %8685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8684, i8* %8685, align 1, !tbaa !2449
  %8686 = load i64, i64* %RBP
  %8687 = sub i64 %8686, 192
  %8688 = load i64, i64* %PC
  %8689 = add i64 %8688, 7
  store i64 %8689, i64* %PC
  %8690 = inttoptr i64 %8687 to i32*
  %8691 = load i32, i32* %8690
  %8692 = sext i32 %8691 to i64
  store i64 %8692, i64* %RCX, align 8, !tbaa !2428
  %8693 = load i64, i64* %RCX
  %8694 = load i64, i64* %PC
  %8695 = add i64 %8694, 7
  store i64 %8695, i64* %PC
  %8696 = sext i64 %8693 to i128
  %8697 = and i128 %8696, -18446744073709551616
  %8698 = zext i64 %8693 to i128
  %8699 = or i128 %8697, %8698
  %8700 = mul nsw i128 520, %8699
  %8701 = trunc i128 %8700 to i64
  store i64 %8701, i64* %RCX, align 8, !tbaa !2428
  %8702 = sext i64 %8701 to i128
  %8703 = icmp ne i128 %8702, %8700
  %8704 = zext i1 %8703 to i8
  %8705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8704, i8* %8705, align 1, !tbaa !2432
  %8706 = trunc i128 %8700 to i32
  %8707 = and i32 %8706, 255
  %8708 = call i32 @llvm.ctpop.i32(i32 %8707) #16
  %8709 = trunc i32 %8708 to i8
  %8710 = and i8 %8709, 1
  %8711 = xor i8 %8710, 1
  %8712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8711, i8* %8712, align 1, !tbaa !2446
  %8713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8713, align 1, !tbaa !2450
  %8714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8714, align 1, !tbaa !2447
  %8715 = lshr i64 %8701, 63
  %8716 = trunc i64 %8715 to i8
  %8717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8716, i8* %8717, align 1, !tbaa !2448
  %8718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8704, i8* %8718, align 1, !tbaa !2449
  %8719 = load i64, i64* %RAX
  %8720 = load i64, i64* %RCX
  %8721 = load i64, i64* %PC
  %8722 = add i64 %8721, 3
  store i64 %8722, i64* %PC
  %8723 = add i64 %8720, %8719
  store i64 %8723, i64* %RAX, align 8, !tbaa !2428
  %8724 = icmp ult i64 %8723, %8719
  %8725 = icmp ult i64 %8723, %8720
  %8726 = or i1 %8724, %8725
  %8727 = zext i1 %8726 to i8
  %8728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8727, i8* %8728, align 1, !tbaa !2432
  %8729 = trunc i64 %8723 to i32
  %8730 = and i32 %8729, 255
  %8731 = call i32 @llvm.ctpop.i32(i32 %8730) #16
  %8732 = trunc i32 %8731 to i8
  %8733 = and i8 %8732, 1
  %8734 = xor i8 %8733, 1
  %8735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8734, i8* %8735, align 1, !tbaa !2446
  %8736 = xor i64 %8720, %8719
  %8737 = xor i64 %8736, %8723
  %8738 = lshr i64 %8737, 4
  %8739 = trunc i64 %8738 to i8
  %8740 = and i8 %8739, 1
  %8741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8740, i8* %8741, align 1, !tbaa !2450
  %8742 = icmp eq i64 %8723, 0
  %8743 = zext i1 %8742 to i8
  %8744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8743, i8* %8744, align 1, !tbaa !2447
  %8745 = lshr i64 %8723, 63
  %8746 = trunc i64 %8745 to i8
  %8747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8746, i8* %8747, align 1, !tbaa !2448
  %8748 = lshr i64 %8719, 63
  %8749 = lshr i64 %8720, 63
  %8750 = xor i64 %8745, %8748
  %8751 = xor i64 %8745, %8749
  %8752 = add nuw nsw i64 %8750, %8751
  %8753 = icmp eq i64 %8752, 2
  %8754 = zext i1 %8753 to i8
  %8755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8754, i8* %8755, align 1, !tbaa !2449
  %8756 = load i64, i64* %RBP
  %8757 = sub i64 %8756, 196
  %8758 = load i64, i64* %PC
  %8759 = add i64 %8758, 7
  store i64 %8759, i64* %PC
  %8760 = inttoptr i64 %8757 to i32*
  %8761 = load i32, i32* %8760
  %8762 = sext i32 %8761 to i64
  store i64 %8762, i64* %RCX, align 8, !tbaa !2428
  %8763 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8765 = load i64, i64* %RAX
  %8766 = load i64, i64* %RCX
  %8767 = mul i64 %8766, 8
  %8768 = add i64 %8767, %8765
  %8769 = load i64, i64* %PC
  %8770 = add i64 %8769, 5
  store i64 %8770, i64* %PC
  %8771 = bitcast i8* %8764 to double*
  %8772 = load double, double* %8771, align 1
  %8773 = getelementptr inbounds i8, i8* %8764, i64 8
  %8774 = bitcast i8* %8773 to i64*
  %8775 = load i64, i64* %8774, align 1
  %8776 = inttoptr i64 %8768 to double*
  %8777 = load double, double* %8776
  %8778 = fmul double %8772, %8777
  %8779 = bitcast i8* %8763 to double*
  store double %8778, double* %8779, align 1, !tbaa !2453
  %8780 = getelementptr inbounds i8, i8* %8763, i64 8
  %8781 = bitcast i8* %8780 to i64*
  store i64 %8775, i64* %8781, align 1, !tbaa !2453
  %8782 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8783 = load i64, i64* %RBP
  %8784 = sub i64 %8783, 64
  %8785 = load i64, i64* %PC
  %8786 = add i64 %8785, 5
  store i64 %8786, i64* %PC
  %8787 = inttoptr i64 %8784 to double*
  %8788 = load double, double* %8787
  %8789 = bitcast i8* %8782 to double*
  store double %8788, double* %8789, align 1, !tbaa !2453
  %8790 = getelementptr inbounds i8, i8* %8782, i64 8
  %8791 = bitcast i8* %8790 to double*
  store double 0.000000e+00, double* %8791, align 1, !tbaa !2453
  %8792 = load i64, i64* %RBP
  %8793 = sub i64 %8792, 152
  %8794 = load i64, i64* %PC
  %8795 = add i64 %8794, 7
  store i64 %8795, i64* %PC
  %8796 = inttoptr i64 %8793 to i64*
  %8797 = load i64, i64* %8796
  store i64 %8797, i64* %RAX, align 8, !tbaa !2428
  %8798 = load i64, i64* %RBP
  %8799 = sub i64 %8798, 188
  %8800 = load i64, i64* %PC
  %8801 = add i64 %8800, 7
  store i64 %8801, i64* %PC
  %8802 = inttoptr i64 %8799 to i32*
  %8803 = load i32, i32* %8802
  %8804 = sext i32 %8803 to i64
  store i64 %8804, i64* %RCX, align 8, !tbaa !2428
  %8805 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8806 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8807 = load i64, i64* %RAX
  %8808 = load i64, i64* %RCX
  %8809 = mul i64 %8808, 8
  %8810 = add i64 %8809, %8807
  %8811 = load i64, i64* %PC
  %8812 = add i64 %8811, 5
  store i64 %8812, i64* %PC
  %8813 = bitcast i8* %8806 to double*
  %8814 = load double, double* %8813, align 1
  %8815 = getelementptr inbounds i8, i8* %8806, i64 8
  %8816 = bitcast i8* %8815 to i64*
  %8817 = load i64, i64* %8816, align 1
  %8818 = inttoptr i64 %8810 to double*
  %8819 = load double, double* %8818
  %8820 = fmul double %8814, %8819
  %8821 = bitcast i8* %8805 to double*
  store double %8820, double* %8821, align 1, !tbaa !2453
  %8822 = getelementptr inbounds i8, i8* %8805, i64 8
  %8823 = bitcast i8* %8822 to i64*
  store i64 %8817, i64* %8823, align 1, !tbaa !2453
  %8824 = load i64, i64* %RBP
  %8825 = sub i64 %8824, 168
  %8826 = load i64, i64* %PC
  %8827 = add i64 %8826, 7
  store i64 %8827, i64* %PC
  %8828 = inttoptr i64 %8825 to i64*
  %8829 = load i64, i64* %8828
  store i64 %8829, i64* %RAX, align 8, !tbaa !2428
  %8830 = load i64, i64* %RBP
  %8831 = sub i64 %8830, 196
  %8832 = load i64, i64* %PC
  %8833 = add i64 %8832, 7
  store i64 %8833, i64* %PC
  %8834 = inttoptr i64 %8831 to i32*
  %8835 = load i32, i32* %8834
  %8836 = sext i32 %8835 to i64
  store i64 %8836, i64* %RCX, align 8, !tbaa !2428
  %8837 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8838 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8839 = load i64, i64* %RAX
  %8840 = load i64, i64* %RCX
  %8841 = mul i64 %8840, 8
  %8842 = add i64 %8841, %8839
  %8843 = load i64, i64* %PC
  %8844 = add i64 %8843, 5
  store i64 %8844, i64* %PC
  %8845 = bitcast i8* %8838 to double*
  %8846 = load double, double* %8845, align 1
  %8847 = getelementptr inbounds i8, i8* %8838, i64 8
  %8848 = bitcast i8* %8847 to i64*
  %8849 = load i64, i64* %8848, align 1
  %8850 = inttoptr i64 %8842 to double*
  %8851 = load double, double* %8850
  %8852 = fdiv double %8846, %8851
  %8853 = bitcast i8* %8837 to double*
  store double %8852, double* %8853, align 1, !tbaa !2453
  %8854 = getelementptr inbounds i8, i8* %8837, i64 8
  %8855 = bitcast i8* %8854 to i64*
  store i64 %8849, i64* %8855, align 1, !tbaa !2453
  %8856 = load i64, i64* %RBP
  %8857 = sub i64 %8856, 104
  %8858 = load i64, i64* %PC
  %8859 = add i64 %8858, 4
  store i64 %8859, i64* %PC
  %8860 = inttoptr i64 %8857 to i64*
  %8861 = load i64, i64* %8860
  store i64 %8861, i64* %RAX, align 8, !tbaa !2428
  %8862 = load i64, i64* %RBP
  %8863 = sub i64 %8862, 188
  %8864 = load i64, i64* %PC
  %8865 = add i64 %8864, 7
  store i64 %8865, i64* %PC
  %8866 = inttoptr i64 %8863 to i32*
  %8867 = load i32, i32* %8866
  %8868 = sext i32 %8867 to i64
  store i64 %8868, i64* %RCX, align 8, !tbaa !2428
  %8869 = load i64, i64* %RCX
  %8870 = load i64, i64* %PC
  %8871 = add i64 %8870, 7
  store i64 %8871, i64* %PC
  %8872 = sext i64 %8869 to i128
  %8873 = and i128 %8872, -18446744073709551616
  %8874 = zext i64 %8869 to i128
  %8875 = or i128 %8873, %8874
  %8876 = mul nsw i128 520, %8875
  %8877 = trunc i128 %8876 to i64
  store i64 %8877, i64* %RCX, align 8, !tbaa !2428
  %8878 = sext i64 %8877 to i128
  %8879 = icmp ne i128 %8878, %8876
  %8880 = zext i1 %8879 to i8
  %8881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8880, i8* %8881, align 1, !tbaa !2432
  %8882 = trunc i128 %8876 to i32
  %8883 = and i32 %8882, 255
  %8884 = call i32 @llvm.ctpop.i32(i32 %8883) #16
  %8885 = trunc i32 %8884 to i8
  %8886 = and i8 %8885, 1
  %8887 = xor i8 %8886, 1
  %8888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8887, i8* %8888, align 1, !tbaa !2446
  %8889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8889, align 1, !tbaa !2450
  %8890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8890, align 1, !tbaa !2447
  %8891 = lshr i64 %8877, 63
  %8892 = trunc i64 %8891 to i8
  %8893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8892, i8* %8893, align 1, !tbaa !2448
  %8894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8880, i8* %8894, align 1, !tbaa !2449
  %8895 = load i64, i64* %RAX
  %8896 = load i64, i64* %RCX
  %8897 = load i64, i64* %PC
  %8898 = add i64 %8897, 3
  store i64 %8898, i64* %PC
  %8899 = add i64 %8896, %8895
  store i64 %8899, i64* %RAX, align 8, !tbaa !2428
  %8900 = icmp ult i64 %8899, %8895
  %8901 = icmp ult i64 %8899, %8896
  %8902 = or i1 %8900, %8901
  %8903 = zext i1 %8902 to i8
  %8904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8903, i8* %8904, align 1, !tbaa !2432
  %8905 = trunc i64 %8899 to i32
  %8906 = and i32 %8905, 255
  %8907 = call i32 @llvm.ctpop.i32(i32 %8906) #16
  %8908 = trunc i32 %8907 to i8
  %8909 = and i8 %8908, 1
  %8910 = xor i8 %8909, 1
  %8911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8910, i8* %8911, align 1, !tbaa !2446
  %8912 = xor i64 %8896, %8895
  %8913 = xor i64 %8912, %8899
  %8914 = lshr i64 %8913, 4
  %8915 = trunc i64 %8914 to i8
  %8916 = and i8 %8915, 1
  %8917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8916, i8* %8917, align 1, !tbaa !2450
  %8918 = icmp eq i64 %8899, 0
  %8919 = zext i1 %8918 to i8
  %8920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8919, i8* %8920, align 1, !tbaa !2447
  %8921 = lshr i64 %8899, 63
  %8922 = trunc i64 %8921 to i8
  %8923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8922, i8* %8923, align 1, !tbaa !2448
  %8924 = lshr i64 %8895, 63
  %8925 = lshr i64 %8896, 63
  %8926 = xor i64 %8921, %8924
  %8927 = xor i64 %8921, %8925
  %8928 = add nuw nsw i64 %8926, %8927
  %8929 = icmp eq i64 %8928, 2
  %8930 = zext i1 %8929 to i8
  %8931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8930, i8* %8931, align 1, !tbaa !2449
  %8932 = load i64, i64* %RBP
  %8933 = sub i64 %8932, 192
  %8934 = load i64, i64* %PC
  %8935 = add i64 %8934, 7
  store i64 %8935, i64* %PC
  %8936 = inttoptr i64 %8933 to i32*
  %8937 = load i32, i32* %8936
  %8938 = sext i32 %8937 to i64
  store i64 %8938, i64* %RCX, align 8, !tbaa !2428
  %8939 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8940 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8941 = load i64, i64* %RAX
  %8942 = load i64, i64* %RCX
  %8943 = mul i64 %8942, 8
  %8944 = add i64 %8943, %8941
  %8945 = load i64, i64* %PC
  %8946 = add i64 %8945, 5
  store i64 %8946, i64* %PC
  %8947 = bitcast i8* %8940 to double*
  %8948 = load double, double* %8947, align 1
  %8949 = getelementptr inbounds i8, i8* %8940, i64 8
  %8950 = bitcast i8* %8949 to i64*
  %8951 = load i64, i64* %8950, align 1
  %8952 = inttoptr i64 %8944 to double*
  %8953 = load double, double* %8952
  %8954 = fmul double %8948, %8953
  %8955 = bitcast i8* %8939 to double*
  store double %8954, double* %8955, align 1, !tbaa !2453
  %8956 = getelementptr inbounds i8, i8* %8939, i64 8
  %8957 = bitcast i8* %8956 to i64*
  store i64 %8951, i64* %8957, align 1, !tbaa !2453
  %8958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8959 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8960 = bitcast %union.vec128_t* %XMM1 to i8*
  %8961 = load i64, i64* %PC
  %8962 = add i64 %8961, 4
  store i64 %8962, i64* %PC
  %8963 = bitcast i8* %8959 to double*
  %8964 = load double, double* %8963, align 1
  %8965 = getelementptr inbounds i8, i8* %8959, i64 8
  %8966 = bitcast i8* %8965 to i64*
  %8967 = load i64, i64* %8966, align 1
  %8968 = bitcast i8* %8960 to double*
  %8969 = load double, double* %8968, align 1
  %8970 = fadd double %8964, %8969
  %8971 = bitcast i8* %8958 to double*
  store double %8970, double* %8971, align 1, !tbaa !2453
  %8972 = getelementptr inbounds i8, i8* %8958, i64 8
  %8973 = bitcast i8* %8972 to i64*
  store i64 %8967, i64* %8973, align 1, !tbaa !2453
  %8974 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8975 = load i64, i64* %RBP
  %8976 = sub i64 %8975, 64
  %8977 = load i64, i64* %PC
  %8978 = add i64 %8977, 5
  store i64 %8978, i64* %PC
  %8979 = inttoptr i64 %8976 to double*
  %8980 = load double, double* %8979
  %8981 = bitcast i8* %8974 to double*
  store double %8980, double* %8981, align 1, !tbaa !2453
  %8982 = getelementptr inbounds i8, i8* %8974, i64 8
  %8983 = bitcast i8* %8982 to double*
  store double 0.000000e+00, double* %8983, align 1, !tbaa !2453
  %8984 = load i64, i64* %RBP
  %8985 = sub i64 %8984, 144
  %8986 = load i64, i64* %PC
  %8987 = add i64 %8986, 7
  store i64 %8987, i64* %PC
  %8988 = inttoptr i64 %8985 to i64*
  %8989 = load i64, i64* %8988
  store i64 %8989, i64* %RAX, align 8, !tbaa !2428
  %8990 = load i64, i64* %RBP
  %8991 = sub i64 %8990, 188
  %8992 = load i64, i64* %PC
  %8993 = add i64 %8992, 7
  store i64 %8993, i64* %PC
  %8994 = inttoptr i64 %8991 to i32*
  %8995 = load i32, i32* %8994
  %8996 = sext i32 %8995 to i64
  store i64 %8996, i64* %RCX, align 8, !tbaa !2428
  %8997 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8998 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8999 = load i64, i64* %RAX
  %9000 = load i64, i64* %RCX
  %9001 = mul i64 %9000, 8
  %9002 = add i64 %9001, %8999
  %9003 = load i64, i64* %PC
  %9004 = add i64 %9003, 5
  store i64 %9004, i64* %PC
  %9005 = bitcast i8* %8998 to double*
  %9006 = load double, double* %9005, align 1
  %9007 = getelementptr inbounds i8, i8* %8998, i64 8
  %9008 = bitcast i8* %9007 to i64*
  %9009 = load i64, i64* %9008, align 1
  %9010 = inttoptr i64 %9002 to double*
  %9011 = load double, double* %9010
  %9012 = fmul double %9006, %9011
  %9013 = bitcast i8* %8997 to double*
  store double %9012, double* %9013, align 1, !tbaa !2453
  %9014 = getelementptr inbounds i8, i8* %8997, i64 8
  %9015 = bitcast i8* %9014 to i64*
  store i64 %9009, i64* %9015, align 1, !tbaa !2453
  %9016 = load i64, i64* %RBP
  %9017 = sub i64 %9016, 168
  %9018 = load i64, i64* %PC
  %9019 = add i64 %9018, 7
  store i64 %9019, i64* %PC
  %9020 = inttoptr i64 %9017 to i64*
  %9021 = load i64, i64* %9020
  store i64 %9021, i64* %RAX, align 8, !tbaa !2428
  %9022 = load i64, i64* %RBP
  %9023 = sub i64 %9022, 196
  %9024 = load i64, i64* %PC
  %9025 = add i64 %9024, 7
  store i64 %9025, i64* %PC
  %9026 = inttoptr i64 %9023 to i32*
  %9027 = load i32, i32* %9026
  %9028 = sext i32 %9027 to i64
  store i64 %9028, i64* %RCX, align 8, !tbaa !2428
  %9029 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9030 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9031 = load i64, i64* %RAX
  %9032 = load i64, i64* %RCX
  %9033 = mul i64 %9032, 8
  %9034 = add i64 %9033, %9031
  %9035 = load i64, i64* %PC
  %9036 = add i64 %9035, 5
  store i64 %9036, i64* %PC
  %9037 = bitcast i8* %9030 to double*
  %9038 = load double, double* %9037, align 1
  %9039 = getelementptr inbounds i8, i8* %9030, i64 8
  %9040 = bitcast i8* %9039 to i64*
  %9041 = load i64, i64* %9040, align 1
  %9042 = inttoptr i64 %9034 to double*
  %9043 = load double, double* %9042
  %9044 = fdiv double %9038, %9043
  %9045 = bitcast i8* %9029 to double*
  store double %9044, double* %9045, align 1, !tbaa !2453
  %9046 = getelementptr inbounds i8, i8* %9029, i64 8
  %9047 = bitcast i8* %9046 to i64*
  store i64 %9041, i64* %9047, align 1, !tbaa !2453
  %9048 = load i64, i64* %RBP
  %9049 = sub i64 %9048, 112
  %9050 = load i64, i64* %PC
  %9051 = add i64 %9050, 4
  store i64 %9051, i64* %PC
  %9052 = inttoptr i64 %9049 to i64*
  %9053 = load i64, i64* %9052
  store i64 %9053, i64* %RAX, align 8, !tbaa !2428
  %9054 = load i64, i64* %RBP
  %9055 = sub i64 %9054, 188
  %9056 = load i64, i64* %PC
  %9057 = add i64 %9056, 7
  store i64 %9057, i64* %PC
  %9058 = inttoptr i64 %9055 to i32*
  %9059 = load i32, i32* %9058
  %9060 = sext i32 %9059 to i64
  store i64 %9060, i64* %RCX, align 8, !tbaa !2428
  %9061 = load i64, i64* %RCX
  %9062 = load i64, i64* %PC
  %9063 = add i64 %9062, 7
  store i64 %9063, i64* %PC
  %9064 = sext i64 %9061 to i128
  %9065 = and i128 %9064, -18446744073709551616
  %9066 = zext i64 %9061 to i128
  %9067 = or i128 %9065, %9066
  %9068 = mul nsw i128 33800, %9067
  %9069 = trunc i128 %9068 to i64
  store i64 %9069, i64* %RCX, align 8, !tbaa !2428
  %9070 = sext i64 %9069 to i128
  %9071 = icmp ne i128 %9070, %9068
  %9072 = zext i1 %9071 to i8
  %9073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9072, i8* %9073, align 1, !tbaa !2432
  %9074 = trunc i128 %9068 to i32
  %9075 = and i32 %9074, 255
  %9076 = call i32 @llvm.ctpop.i32(i32 %9075) #16
  %9077 = trunc i32 %9076 to i8
  %9078 = and i8 %9077, 1
  %9079 = xor i8 %9078, 1
  %9080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9079, i8* %9080, align 1, !tbaa !2446
  %9081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9081, align 1, !tbaa !2450
  %9082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9082, align 1, !tbaa !2447
  %9083 = lshr i64 %9069, 63
  %9084 = trunc i64 %9083 to i8
  %9085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9084, i8* %9085, align 1, !tbaa !2448
  %9086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9072, i8* %9086, align 1, !tbaa !2449
  %9087 = load i64, i64* %RAX
  %9088 = load i64, i64* %RCX
  %9089 = load i64, i64* %PC
  %9090 = add i64 %9089, 3
  store i64 %9090, i64* %PC
  %9091 = add i64 %9088, %9087
  store i64 %9091, i64* %RAX, align 8, !tbaa !2428
  %9092 = icmp ult i64 %9091, %9087
  %9093 = icmp ult i64 %9091, %9088
  %9094 = or i1 %9092, %9093
  %9095 = zext i1 %9094 to i8
  %9096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9095, i8* %9096, align 1, !tbaa !2432
  %9097 = trunc i64 %9091 to i32
  %9098 = and i32 %9097, 255
  %9099 = call i32 @llvm.ctpop.i32(i32 %9098) #16
  %9100 = trunc i32 %9099 to i8
  %9101 = and i8 %9100, 1
  %9102 = xor i8 %9101, 1
  %9103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9102, i8* %9103, align 1, !tbaa !2446
  %9104 = xor i64 %9088, %9087
  %9105 = xor i64 %9104, %9091
  %9106 = lshr i64 %9105, 4
  %9107 = trunc i64 %9106 to i8
  %9108 = and i8 %9107, 1
  %9109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9108, i8* %9109, align 1, !tbaa !2450
  %9110 = icmp eq i64 %9091, 0
  %9111 = zext i1 %9110 to i8
  %9112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9111, i8* %9112, align 1, !tbaa !2447
  %9113 = lshr i64 %9091, 63
  %9114 = trunc i64 %9113 to i8
  %9115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9114, i8* %9115, align 1, !tbaa !2448
  %9116 = lshr i64 %9087, 63
  %9117 = lshr i64 %9088, 63
  %9118 = xor i64 %9113, %9116
  %9119 = xor i64 %9113, %9117
  %9120 = add nuw nsw i64 %9118, %9119
  %9121 = icmp eq i64 %9120, 2
  %9122 = zext i1 %9121 to i8
  %9123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9122, i8* %9123, align 1, !tbaa !2449
  %9124 = load i64, i64* %RBP
  %9125 = sub i64 %9124, 192
  %9126 = load i64, i64* %PC
  %9127 = add i64 %9126, 7
  store i64 %9127, i64* %PC
  %9128 = inttoptr i64 %9125 to i32*
  %9129 = load i32, i32* %9128
  %9130 = sext i32 %9129 to i64
  store i64 %9130, i64* %RCX, align 8, !tbaa !2428
  %9131 = load i64, i64* %RCX
  %9132 = load i64, i64* %PC
  %9133 = add i64 %9132, 7
  store i64 %9133, i64* %PC
  %9134 = sext i64 %9131 to i128
  %9135 = and i128 %9134, -18446744073709551616
  %9136 = zext i64 %9131 to i128
  %9137 = or i128 %9135, %9136
  %9138 = mul nsw i128 520, %9137
  %9139 = trunc i128 %9138 to i64
  store i64 %9139, i64* %RCX, align 8, !tbaa !2428
  %9140 = sext i64 %9139 to i128
  %9141 = icmp ne i128 %9140, %9138
  %9142 = zext i1 %9141 to i8
  %9143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9142, i8* %9143, align 1, !tbaa !2432
  %9144 = trunc i128 %9138 to i32
  %9145 = and i32 %9144, 255
  %9146 = call i32 @llvm.ctpop.i32(i32 %9145) #16
  %9147 = trunc i32 %9146 to i8
  %9148 = and i8 %9147, 1
  %9149 = xor i8 %9148, 1
  %9150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9149, i8* %9150, align 1, !tbaa !2446
  %9151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9151, align 1, !tbaa !2450
  %9152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9152, align 1, !tbaa !2447
  %9153 = lshr i64 %9139, 63
  %9154 = trunc i64 %9153 to i8
  %9155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9154, i8* %9155, align 1, !tbaa !2448
  %9156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9142, i8* %9156, align 1, !tbaa !2449
  %9157 = load i64, i64* %RAX
  %9158 = load i64, i64* %RCX
  %9159 = load i64, i64* %PC
  %9160 = add i64 %9159, 3
  store i64 %9160, i64* %PC
  %9161 = add i64 %9158, %9157
  store i64 %9161, i64* %RAX, align 8, !tbaa !2428
  %9162 = icmp ult i64 %9161, %9157
  %9163 = icmp ult i64 %9161, %9158
  %9164 = or i1 %9162, %9163
  %9165 = zext i1 %9164 to i8
  %9166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9165, i8* %9166, align 1, !tbaa !2432
  %9167 = trunc i64 %9161 to i32
  %9168 = and i32 %9167, 255
  %9169 = call i32 @llvm.ctpop.i32(i32 %9168) #16
  %9170 = trunc i32 %9169 to i8
  %9171 = and i8 %9170, 1
  %9172 = xor i8 %9171, 1
  %9173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9172, i8* %9173, align 1, !tbaa !2446
  %9174 = xor i64 %9158, %9157
  %9175 = xor i64 %9174, %9161
  %9176 = lshr i64 %9175, 4
  %9177 = trunc i64 %9176 to i8
  %9178 = and i8 %9177, 1
  %9179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9178, i8* %9179, align 1, !tbaa !2450
  %9180 = icmp eq i64 %9161, 0
  %9181 = zext i1 %9180 to i8
  %9182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9181, i8* %9182, align 1, !tbaa !2447
  %9183 = lshr i64 %9161, 63
  %9184 = trunc i64 %9183 to i8
  %9185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9184, i8* %9185, align 1, !tbaa !2448
  %9186 = lshr i64 %9157, 63
  %9187 = lshr i64 %9158, 63
  %9188 = xor i64 %9183, %9186
  %9189 = xor i64 %9183, %9187
  %9190 = add nuw nsw i64 %9188, %9189
  %9191 = icmp eq i64 %9190, 2
  %9192 = zext i1 %9191 to i8
  %9193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9192, i8* %9193, align 1, !tbaa !2449
  %9194 = load i64, i64* %RBP
  %9195 = sub i64 %9194, 196
  %9196 = load i64, i64* %PC
  %9197 = add i64 %9196, 7
  store i64 %9197, i64* %PC
  %9198 = inttoptr i64 %9195 to i32*
  %9199 = load i32, i32* %9198
  %9200 = sext i32 %9199 to i64
  store i64 %9200, i64* %RCX, align 8, !tbaa !2428
  %9201 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9202 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9203 = load i64, i64* %RAX
  %9204 = load i64, i64* %RCX
  %9205 = mul i64 %9204, 8
  %9206 = add i64 %9205, %9203
  %9207 = load i64, i64* %PC
  %9208 = add i64 %9207, 5
  store i64 %9208, i64* %PC
  %9209 = bitcast i8* %9202 to double*
  %9210 = load double, double* %9209, align 1
  %9211 = getelementptr inbounds i8, i8* %9202, i64 8
  %9212 = bitcast i8* %9211 to i64*
  %9213 = load i64, i64* %9212, align 1
  %9214 = inttoptr i64 %9206 to double*
  %9215 = load double, double* %9214
  %9216 = fmul double %9210, %9215
  %9217 = bitcast i8* %9201 to double*
  store double %9216, double* %9217, align 1, !tbaa !2453
  %9218 = getelementptr inbounds i8, i8* %9201, i64 8
  %9219 = bitcast i8* %9218 to i64*
  store i64 %9213, i64* %9219, align 1, !tbaa !2453
  %9220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9222 = bitcast %union.vec128_t* %XMM1 to i8*
  %9223 = load i64, i64* %PC
  %9224 = add i64 %9223, 4
  store i64 %9224, i64* %PC
  %9225 = bitcast i8* %9221 to double*
  %9226 = load double, double* %9225, align 1
  %9227 = getelementptr inbounds i8, i8* %9221, i64 8
  %9228 = bitcast i8* %9227 to i64*
  %9229 = load i64, i64* %9228, align 1
  %9230 = bitcast i8* %9222 to double*
  %9231 = load double, double* %9230, align 1
  %9232 = fsub double %9226, %9231
  %9233 = bitcast i8* %9220 to double*
  store double %9232, double* %9233, align 1, !tbaa !2453
  %9234 = getelementptr inbounds i8, i8* %9220, i64 8
  %9235 = bitcast i8* %9234 to i64*
  store i64 %9229, i64* %9235, align 1, !tbaa !2453
  %9236 = load i64, i64* %RBP
  %9237 = sub i64 %9236, 136
  %9238 = load i64, i64* %PC
  %9239 = add i64 %9238, 7
  store i64 %9239, i64* %PC
  %9240 = inttoptr i64 %9237 to i64*
  %9241 = load i64, i64* %9240
  store i64 %9241, i64* %RAX, align 8, !tbaa !2428
  %9242 = load i64, i64* %RBP
  %9243 = sub i64 %9242, 188
  %9244 = load i64, i64* %PC
  %9245 = add i64 %9244, 7
  store i64 %9245, i64* %PC
  %9246 = inttoptr i64 %9243 to i32*
  %9247 = load i32, i32* %9246
  %9248 = sext i32 %9247 to i64
  store i64 %9248, i64* %RCX, align 8, !tbaa !2428
  %9249 = load i64, i64* %RCX
  %9250 = load i64, i64* %PC
  %9251 = add i64 %9250, 7
  store i64 %9251, i64* %PC
  %9252 = sext i64 %9249 to i128
  %9253 = and i128 %9252, -18446744073709551616
  %9254 = zext i64 %9249 to i128
  %9255 = or i128 %9253, %9254
  %9256 = mul nsw i128 33800, %9255
  %9257 = trunc i128 %9256 to i64
  store i64 %9257, i64* %RCX, align 8, !tbaa !2428
  %9258 = sext i64 %9257 to i128
  %9259 = icmp ne i128 %9258, %9256
  %9260 = zext i1 %9259 to i8
  %9261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9260, i8* %9261, align 1, !tbaa !2432
  %9262 = trunc i128 %9256 to i32
  %9263 = and i32 %9262, 255
  %9264 = call i32 @llvm.ctpop.i32(i32 %9263) #16
  %9265 = trunc i32 %9264 to i8
  %9266 = and i8 %9265, 1
  %9267 = xor i8 %9266, 1
  %9268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9267, i8* %9268, align 1, !tbaa !2446
  %9269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9269, align 1, !tbaa !2450
  %9270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9270, align 1, !tbaa !2447
  %9271 = lshr i64 %9257, 63
  %9272 = trunc i64 %9271 to i8
  %9273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9272, i8* %9273, align 1, !tbaa !2448
  %9274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9260, i8* %9274, align 1, !tbaa !2449
  %9275 = load i64, i64* %RAX
  %9276 = load i64, i64* %RCX
  %9277 = load i64, i64* %PC
  %9278 = add i64 %9277, 3
  store i64 %9278, i64* %PC
  %9279 = add i64 %9276, %9275
  store i64 %9279, i64* %RAX, align 8, !tbaa !2428
  %9280 = icmp ult i64 %9279, %9275
  %9281 = icmp ult i64 %9279, %9276
  %9282 = or i1 %9280, %9281
  %9283 = zext i1 %9282 to i8
  %9284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9283, i8* %9284, align 1, !tbaa !2432
  %9285 = trunc i64 %9279 to i32
  %9286 = and i32 %9285, 255
  %9287 = call i32 @llvm.ctpop.i32(i32 %9286) #16
  %9288 = trunc i32 %9287 to i8
  %9289 = and i8 %9288, 1
  %9290 = xor i8 %9289, 1
  %9291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9290, i8* %9291, align 1, !tbaa !2446
  %9292 = xor i64 %9276, %9275
  %9293 = xor i64 %9292, %9279
  %9294 = lshr i64 %9293, 4
  %9295 = trunc i64 %9294 to i8
  %9296 = and i8 %9295, 1
  %9297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9296, i8* %9297, align 1, !tbaa !2450
  %9298 = icmp eq i64 %9279, 0
  %9299 = zext i1 %9298 to i8
  %9300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9299, i8* %9300, align 1, !tbaa !2447
  %9301 = lshr i64 %9279, 63
  %9302 = trunc i64 %9301 to i8
  %9303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9302, i8* %9303, align 1, !tbaa !2448
  %9304 = lshr i64 %9275, 63
  %9305 = lshr i64 %9276, 63
  %9306 = xor i64 %9301, %9304
  %9307 = xor i64 %9301, %9305
  %9308 = add nuw nsw i64 %9306, %9307
  %9309 = icmp eq i64 %9308, 2
  %9310 = zext i1 %9309 to i8
  %9311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9310, i8* %9311, align 1, !tbaa !2449
  %9312 = load i64, i64* %RBP
  %9313 = sub i64 %9312, 192
  %9314 = load i64, i64* %PC
  %9315 = add i64 %9314, 7
  store i64 %9315, i64* %PC
  %9316 = inttoptr i64 %9313 to i32*
  %9317 = load i32, i32* %9316
  %9318 = sext i32 %9317 to i64
  store i64 %9318, i64* %RCX, align 8, !tbaa !2428
  %9319 = load i64, i64* %RCX
  %9320 = load i64, i64* %PC
  %9321 = add i64 %9320, 7
  store i64 %9321, i64* %PC
  %9322 = sext i64 %9319 to i128
  %9323 = and i128 %9322, -18446744073709551616
  %9324 = zext i64 %9319 to i128
  %9325 = or i128 %9323, %9324
  %9326 = mul nsw i128 520, %9325
  %9327 = trunc i128 %9326 to i64
  store i64 %9327, i64* %RCX, align 8, !tbaa !2428
  %9328 = sext i64 %9327 to i128
  %9329 = icmp ne i128 %9328, %9326
  %9330 = zext i1 %9329 to i8
  %9331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9330, i8* %9331, align 1, !tbaa !2432
  %9332 = trunc i128 %9326 to i32
  %9333 = and i32 %9332, 255
  %9334 = call i32 @llvm.ctpop.i32(i32 %9333) #16
  %9335 = trunc i32 %9334 to i8
  %9336 = and i8 %9335, 1
  %9337 = xor i8 %9336, 1
  %9338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9337, i8* %9338, align 1, !tbaa !2446
  %9339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9339, align 1, !tbaa !2450
  %9340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9340, align 1, !tbaa !2447
  %9341 = lshr i64 %9327, 63
  %9342 = trunc i64 %9341 to i8
  %9343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9342, i8* %9343, align 1, !tbaa !2448
  %9344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9330, i8* %9344, align 1, !tbaa !2449
  %9345 = load i64, i64* %RAX
  %9346 = load i64, i64* %RCX
  %9347 = load i64, i64* %PC
  %9348 = add i64 %9347, 3
  store i64 %9348, i64* %PC
  %9349 = add i64 %9346, %9345
  store i64 %9349, i64* %RAX, align 8, !tbaa !2428
  %9350 = icmp ult i64 %9349, %9345
  %9351 = icmp ult i64 %9349, %9346
  %9352 = or i1 %9350, %9351
  %9353 = zext i1 %9352 to i8
  %9354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9353, i8* %9354, align 1, !tbaa !2432
  %9355 = trunc i64 %9349 to i32
  %9356 = and i32 %9355, 255
  %9357 = call i32 @llvm.ctpop.i32(i32 %9356) #16
  %9358 = trunc i32 %9357 to i8
  %9359 = and i8 %9358, 1
  %9360 = xor i8 %9359, 1
  %9361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9360, i8* %9361, align 1, !tbaa !2446
  %9362 = xor i64 %9346, %9345
  %9363 = xor i64 %9362, %9349
  %9364 = lshr i64 %9363, 4
  %9365 = trunc i64 %9364 to i8
  %9366 = and i8 %9365, 1
  %9367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9366, i8* %9367, align 1, !tbaa !2450
  %9368 = icmp eq i64 %9349, 0
  %9369 = zext i1 %9368 to i8
  %9370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9369, i8* %9370, align 1, !tbaa !2447
  %9371 = lshr i64 %9349, 63
  %9372 = trunc i64 %9371 to i8
  %9373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9372, i8* %9373, align 1, !tbaa !2448
  %9374 = lshr i64 %9345, 63
  %9375 = lshr i64 %9346, 63
  %9376 = xor i64 %9371, %9374
  %9377 = xor i64 %9371, %9375
  %9378 = add nuw nsw i64 %9376, %9377
  %9379 = icmp eq i64 %9378, 2
  %9380 = zext i1 %9379 to i8
  %9381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9380, i8* %9381, align 1, !tbaa !2449
  %9382 = load i64, i64* %RBP
  %9383 = sub i64 %9382, 196
  %9384 = load i64, i64* %PC
  %9385 = add i64 %9384, 7
  store i64 %9385, i64* %PC
  %9386 = inttoptr i64 %9383 to i32*
  %9387 = load i32, i32* %9386
  %9388 = sext i32 %9387 to i64
  store i64 %9388, i64* %RCX, align 8, !tbaa !2428
  %9389 = load i64, i64* %RAX
  %9390 = load i64, i64* %RCX
  %9391 = mul i64 %9390, 8
  %9392 = add i64 %9391, %9389
  %9393 = bitcast %union.vec128_t* %XMM0 to i8*
  %9394 = load i64, i64* %PC
  %9395 = add i64 %9394, 5
  store i64 %9395, i64* %PC
  %9396 = bitcast i8* %9393 to double*
  %9397 = load double, double* %9396, align 1
  %9398 = inttoptr i64 %9392 to double*
  store double %9397, double* %9398
  %9399 = load i64, i64* %RBP
  %9400 = sub i64 %9399, 104
  %9401 = load i64, i64* %PC
  %9402 = add i64 %9401, 4
  store i64 %9402, i64* %PC
  %9403 = inttoptr i64 %9400 to i64*
  %9404 = load i64, i64* %9403
  store i64 %9404, i64* %RAX, align 8, !tbaa !2428
  %9405 = load i64, i64* %RBP
  %9406 = sub i64 %9405, 188
  %9407 = load i64, i64* %PC
  %9408 = add i64 %9407, 7
  store i64 %9408, i64* %PC
  %9409 = inttoptr i64 %9406 to i32*
  %9410 = load i32, i32* %9409
  %9411 = sext i32 %9410 to i64
  store i64 %9411, i64* %RCX, align 8, !tbaa !2428
  %9412 = load i64, i64* %RCX
  %9413 = load i64, i64* %PC
  %9414 = add i64 %9413, 7
  store i64 %9414, i64* %PC
  %9415 = sext i64 %9412 to i128
  %9416 = and i128 %9415, -18446744073709551616
  %9417 = zext i64 %9412 to i128
  %9418 = or i128 %9416, %9417
  %9419 = mul nsw i128 520, %9418
  %9420 = trunc i128 %9419 to i64
  store i64 %9420, i64* %RCX, align 8, !tbaa !2428
  %9421 = sext i64 %9420 to i128
  %9422 = icmp ne i128 %9421, %9419
  %9423 = zext i1 %9422 to i8
  %9424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9423, i8* %9424, align 1, !tbaa !2432
  %9425 = trunc i128 %9419 to i32
  %9426 = and i32 %9425, 255
  %9427 = call i32 @llvm.ctpop.i32(i32 %9426) #16
  %9428 = trunc i32 %9427 to i8
  %9429 = and i8 %9428, 1
  %9430 = xor i8 %9429, 1
  %9431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9430, i8* %9431, align 1, !tbaa !2446
  %9432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9432, align 1, !tbaa !2450
  %9433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9433, align 1, !tbaa !2447
  %9434 = lshr i64 %9420, 63
  %9435 = trunc i64 %9434 to i8
  %9436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9435, i8* %9436, align 1, !tbaa !2448
  %9437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9423, i8* %9437, align 1, !tbaa !2449
  %9438 = load i64, i64* %RAX
  %9439 = load i64, i64* %RCX
  %9440 = load i64, i64* %PC
  %9441 = add i64 %9440, 3
  store i64 %9441, i64* %PC
  %9442 = add i64 %9439, %9438
  store i64 %9442, i64* %RAX, align 8, !tbaa !2428
  %9443 = icmp ult i64 %9442, %9438
  %9444 = icmp ult i64 %9442, %9439
  %9445 = or i1 %9443, %9444
  %9446 = zext i1 %9445 to i8
  %9447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9446, i8* %9447, align 1, !tbaa !2432
  %9448 = trunc i64 %9442 to i32
  %9449 = and i32 %9448, 255
  %9450 = call i32 @llvm.ctpop.i32(i32 %9449) #16
  %9451 = trunc i32 %9450 to i8
  %9452 = and i8 %9451, 1
  %9453 = xor i8 %9452, 1
  %9454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9453, i8* %9454, align 1, !tbaa !2446
  %9455 = xor i64 %9439, %9438
  %9456 = xor i64 %9455, %9442
  %9457 = lshr i64 %9456, 4
  %9458 = trunc i64 %9457 to i8
  %9459 = and i8 %9458, 1
  %9460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9459, i8* %9460, align 1, !tbaa !2450
  %9461 = icmp eq i64 %9442, 0
  %9462 = zext i1 %9461 to i8
  %9463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9462, i8* %9463, align 1, !tbaa !2447
  %9464 = lshr i64 %9442, 63
  %9465 = trunc i64 %9464 to i8
  %9466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9465, i8* %9466, align 1, !tbaa !2448
  %9467 = lshr i64 %9438, 63
  %9468 = lshr i64 %9439, 63
  %9469 = xor i64 %9464, %9467
  %9470 = xor i64 %9464, %9468
  %9471 = add nuw nsw i64 %9469, %9470
  %9472 = icmp eq i64 %9471, 2
  %9473 = zext i1 %9472 to i8
  %9474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9473, i8* %9474, align 1, !tbaa !2449
  %9475 = load i64, i64* %RBP
  %9476 = sub i64 %9475, 192
  %9477 = load i64, i64* %PC
  %9478 = add i64 %9477, 7
  store i64 %9478, i64* %PC
  %9479 = inttoptr i64 %9476 to i32*
  %9480 = load i32, i32* %9479
  %9481 = sext i32 %9480 to i64
  store i64 %9481, i64* %RCX, align 8, !tbaa !2428
  %9482 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9483 = load i64, i64* %RAX
  %9484 = load i64, i64* %RCX
  %9485 = mul i64 %9484, 8
  %9486 = add i64 %9485, %9483
  %9487 = load i64, i64* %PC
  %9488 = add i64 %9487, 5
  store i64 %9488, i64* %PC
  %9489 = inttoptr i64 %9486 to double*
  %9490 = load double, double* %9489
  %9491 = bitcast i8* %9482 to double*
  store double %9490, double* %9491, align 1, !tbaa !2453
  %9492 = getelementptr inbounds i8, i8* %9482, i64 8
  %9493 = bitcast i8* %9492 to double*
  store double 0.000000e+00, double* %9493, align 1, !tbaa !2453
  %9494 = load i64, i64* %RBP
  %9495 = sub i64 %9494, 112
  %9496 = load i64, i64* %PC
  %9497 = add i64 %9496, 4
  store i64 %9497, i64* %PC
  %9498 = inttoptr i64 %9495 to i64*
  %9499 = load i64, i64* %9498
  store i64 %9499, i64* %RAX, align 8, !tbaa !2428
  %9500 = load i64, i64* %RBP
  %9501 = sub i64 %9500, 188
  %9502 = load i64, i64* %PC
  %9503 = add i64 %9502, 7
  store i64 %9503, i64* %PC
  %9504 = inttoptr i64 %9501 to i32*
  %9505 = load i32, i32* %9504
  %9506 = sext i32 %9505 to i64
  store i64 %9506, i64* %RCX, align 8, !tbaa !2428
  %9507 = load i64, i64* %RCX
  %9508 = load i64, i64* %PC
  %9509 = add i64 %9508, 7
  store i64 %9509, i64* %PC
  %9510 = sext i64 %9507 to i128
  %9511 = and i128 %9510, -18446744073709551616
  %9512 = zext i64 %9507 to i128
  %9513 = or i128 %9511, %9512
  %9514 = mul nsw i128 33800, %9513
  %9515 = trunc i128 %9514 to i64
  store i64 %9515, i64* %RCX, align 8, !tbaa !2428
  %9516 = sext i64 %9515 to i128
  %9517 = icmp ne i128 %9516, %9514
  %9518 = zext i1 %9517 to i8
  %9519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9518, i8* %9519, align 1, !tbaa !2432
  %9520 = trunc i128 %9514 to i32
  %9521 = and i32 %9520, 255
  %9522 = call i32 @llvm.ctpop.i32(i32 %9521) #16
  %9523 = trunc i32 %9522 to i8
  %9524 = and i8 %9523, 1
  %9525 = xor i8 %9524, 1
  %9526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9525, i8* %9526, align 1, !tbaa !2446
  %9527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9527, align 1, !tbaa !2450
  %9528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9528, align 1, !tbaa !2447
  %9529 = lshr i64 %9515, 63
  %9530 = trunc i64 %9529 to i8
  %9531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9530, i8* %9531, align 1, !tbaa !2448
  %9532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9518, i8* %9532, align 1, !tbaa !2449
  %9533 = load i64, i64* %RAX
  %9534 = load i64, i64* %RCX
  %9535 = load i64, i64* %PC
  %9536 = add i64 %9535, 3
  store i64 %9536, i64* %PC
  %9537 = add i64 %9534, %9533
  store i64 %9537, i64* %RAX, align 8, !tbaa !2428
  %9538 = icmp ult i64 %9537, %9533
  %9539 = icmp ult i64 %9537, %9534
  %9540 = or i1 %9538, %9539
  %9541 = zext i1 %9540 to i8
  %9542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9541, i8* %9542, align 1, !tbaa !2432
  %9543 = trunc i64 %9537 to i32
  %9544 = and i32 %9543, 255
  %9545 = call i32 @llvm.ctpop.i32(i32 %9544) #16
  %9546 = trunc i32 %9545 to i8
  %9547 = and i8 %9546, 1
  %9548 = xor i8 %9547, 1
  %9549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9548, i8* %9549, align 1, !tbaa !2446
  %9550 = xor i64 %9534, %9533
  %9551 = xor i64 %9550, %9537
  %9552 = lshr i64 %9551, 4
  %9553 = trunc i64 %9552 to i8
  %9554 = and i8 %9553, 1
  %9555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9554, i8* %9555, align 1, !tbaa !2450
  %9556 = icmp eq i64 %9537, 0
  %9557 = zext i1 %9556 to i8
  %9558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9557, i8* %9558, align 1, !tbaa !2447
  %9559 = lshr i64 %9537, 63
  %9560 = trunc i64 %9559 to i8
  %9561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9560, i8* %9561, align 1, !tbaa !2448
  %9562 = lshr i64 %9533, 63
  %9563 = lshr i64 %9534, 63
  %9564 = xor i64 %9559, %9562
  %9565 = xor i64 %9559, %9563
  %9566 = add nuw nsw i64 %9564, %9565
  %9567 = icmp eq i64 %9566, 2
  %9568 = zext i1 %9567 to i8
  %9569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9568, i8* %9569, align 1, !tbaa !2449
  %9570 = load i64, i64* %RBP
  %9571 = sub i64 %9570, 192
  %9572 = load i64, i64* %PC
  %9573 = add i64 %9572, 7
  store i64 %9573, i64* %PC
  %9574 = inttoptr i64 %9571 to i32*
  %9575 = load i32, i32* %9574
  %9576 = sext i32 %9575 to i64
  store i64 %9576, i64* %RCX, align 8, !tbaa !2428
  %9577 = load i64, i64* %RCX
  %9578 = load i64, i64* %PC
  %9579 = add i64 %9578, 7
  store i64 %9579, i64* %PC
  %9580 = sext i64 %9577 to i128
  %9581 = and i128 %9580, -18446744073709551616
  %9582 = zext i64 %9577 to i128
  %9583 = or i128 %9581, %9582
  %9584 = mul nsw i128 520, %9583
  %9585 = trunc i128 %9584 to i64
  store i64 %9585, i64* %RCX, align 8, !tbaa !2428
  %9586 = sext i64 %9585 to i128
  %9587 = icmp ne i128 %9586, %9584
  %9588 = zext i1 %9587 to i8
  %9589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9588, i8* %9589, align 1, !tbaa !2432
  %9590 = trunc i128 %9584 to i32
  %9591 = and i32 %9590, 255
  %9592 = call i32 @llvm.ctpop.i32(i32 %9591) #16
  %9593 = trunc i32 %9592 to i8
  %9594 = and i8 %9593, 1
  %9595 = xor i8 %9594, 1
  %9596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9595, i8* %9596, align 1, !tbaa !2446
  %9597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9597, align 1, !tbaa !2450
  %9598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9598, align 1, !tbaa !2447
  %9599 = lshr i64 %9585, 63
  %9600 = trunc i64 %9599 to i8
  %9601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9600, i8* %9601, align 1, !tbaa !2448
  %9602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9588, i8* %9602, align 1, !tbaa !2449
  %9603 = load i64, i64* %RAX
  %9604 = load i64, i64* %RCX
  %9605 = load i64, i64* %PC
  %9606 = add i64 %9605, 3
  store i64 %9606, i64* %PC
  %9607 = add i64 %9604, %9603
  store i64 %9607, i64* %RAX, align 8, !tbaa !2428
  %9608 = icmp ult i64 %9607, %9603
  %9609 = icmp ult i64 %9607, %9604
  %9610 = or i1 %9608, %9609
  %9611 = zext i1 %9610 to i8
  %9612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9611, i8* %9612, align 1, !tbaa !2432
  %9613 = trunc i64 %9607 to i32
  %9614 = and i32 %9613, 255
  %9615 = call i32 @llvm.ctpop.i32(i32 %9614) #16
  %9616 = trunc i32 %9615 to i8
  %9617 = and i8 %9616, 1
  %9618 = xor i8 %9617, 1
  %9619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9618, i8* %9619, align 1, !tbaa !2446
  %9620 = xor i64 %9604, %9603
  %9621 = xor i64 %9620, %9607
  %9622 = lshr i64 %9621, 4
  %9623 = trunc i64 %9622 to i8
  %9624 = and i8 %9623, 1
  %9625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9624, i8* %9625, align 1, !tbaa !2450
  %9626 = icmp eq i64 %9607, 0
  %9627 = zext i1 %9626 to i8
  %9628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9627, i8* %9628, align 1, !tbaa !2447
  %9629 = lshr i64 %9607, 63
  %9630 = trunc i64 %9629 to i8
  %9631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9630, i8* %9631, align 1, !tbaa !2448
  %9632 = lshr i64 %9603, 63
  %9633 = lshr i64 %9604, 63
  %9634 = xor i64 %9629, %9632
  %9635 = xor i64 %9629, %9633
  %9636 = add nuw nsw i64 %9634, %9635
  %9637 = icmp eq i64 %9636, 2
  %9638 = zext i1 %9637 to i8
  %9639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9638, i8* %9639, align 1, !tbaa !2449
  %9640 = load i64, i64* %RBP
  %9641 = sub i64 %9640, 196
  %9642 = load i64, i64* %PC
  %9643 = add i64 %9642, 7
  store i64 %9643, i64* %PC
  %9644 = inttoptr i64 %9641 to i32*
  %9645 = load i32, i32* %9644
  %9646 = sext i32 %9645 to i64
  store i64 %9646, i64* %RCX, align 8, !tbaa !2428
  %9647 = load i64, i64* %RAX
  %9648 = load i64, i64* %RCX
  %9649 = mul i64 %9648, 8
  %9650 = add i64 %9649, %9647
  %9651 = bitcast %union.vec128_t* %XMM0 to i8*
  %9652 = load i64, i64* %PC
  %9653 = add i64 %9652, 5
  store i64 %9653, i64* %PC
  %9654 = bitcast i8* %9651 to double*
  %9655 = load double, double* %9654, align 1
  %9656 = inttoptr i64 %9650 to double*
  store double %9655, double* %9656
  %9657 = load i64, i64* %RBP
  %9658 = sub i64 %9657, 196
  %9659 = load i64, i64* %PC
  %9660 = add i64 %9659, 6
  store i64 %9660, i64* %PC
  %9661 = inttoptr i64 %9658 to i32*
  %9662 = load i32, i32* %9661
  %9663 = zext i32 %9662 to i64
  store i64 %9663, i64* %RAX, align 8, !tbaa !2428
  %9664 = load i64, i64* %RAX
  %9665 = load i64, i64* %PC
  %9666 = add i64 %9665, 3
  store i64 %9666, i64* %PC
  %9667 = trunc i64 %9664 to i32
  %9668 = add i32 1, %9667
  %9669 = zext i32 %9668 to i64
  store i64 %9669, i64* %RAX, align 8, !tbaa !2428
  %9670 = icmp ult i32 %9668, %9667
  %9671 = icmp ult i32 %9668, 1
  %9672 = or i1 %9670, %9671
  %9673 = zext i1 %9672 to i8
  %9674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9673, i8* %9674, align 1, !tbaa !2432
  %9675 = and i32 %9668, 255
  %9676 = call i32 @llvm.ctpop.i32(i32 %9675) #16
  %9677 = trunc i32 %9676 to i8
  %9678 = and i8 %9677, 1
  %9679 = xor i8 %9678, 1
  %9680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9679, i8* %9680, align 1, !tbaa !2446
  %9681 = xor i64 1, %9664
  %9682 = trunc i64 %9681 to i32
  %9683 = xor i32 %9682, %9668
  %9684 = lshr i32 %9683, 4
  %9685 = trunc i32 %9684 to i8
  %9686 = and i8 %9685, 1
  %9687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9686, i8* %9687, align 1, !tbaa !2450
  %9688 = icmp eq i32 %9668, 0
  %9689 = zext i1 %9688 to i8
  %9690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9689, i8* %9690, align 1, !tbaa !2447
  %9691 = lshr i32 %9668, 31
  %9692 = trunc i32 %9691 to i8
  %9693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9692, i8* %9693, align 1, !tbaa !2448
  %9694 = lshr i32 %9667, 31
  %9695 = xor i32 %9691, %9694
  %9696 = add nuw nsw i32 %9695, %9691
  %9697 = icmp eq i32 %9696, 2
  %9698 = zext i1 %9697 to i8
  %9699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9698, i8* %9699, align 1, !tbaa !2449
  %9700 = load i64, i64* %RBP
  %9701 = sub i64 %9700, 196
  %9702 = load i32, i32* %EAX
  %9703 = zext i32 %9702 to i64
  %9704 = load i64, i64* %PC
  %9705 = add i64 %9704, 6
  store i64 %9705, i64* %PC
  %9706 = inttoptr i64 %9701 to i32*
  store i32 %9702, i32* %9706
  %9707 = load i64, i64* %PC
  %9708 = sub i64 %9707, 859
  %9709 = load i64, i64* %PC
  %9710 = add i64 %9709, 5
  store i64 %9710, i64* %PC
  %9711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9708, i64* %9711, align 8, !tbaa !2428
  br label %block_4015b3

block_401581:                                     ; preds = %block_402232, %block_4014b0
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4014b0 ], [ %MEMORY.0, %block_402232 ]
  %9712 = load i64, i64* %RBP
  %9713 = sub i64 %9712, 188
  %9714 = load i64, i64* %PC
  %9715 = add i64 %9714, 6
  store i64 %9715, i64* %PC
  %9716 = inttoptr i64 %9713 to i32*
  %9717 = load i32, i32* %9716
  %9718 = zext i32 %9717 to i64
  store i64 %9718, i64* %RAX, align 8, !tbaa !2428
  %9719 = load i32, i32* %EAX
  %9720 = zext i32 %9719 to i64
  %9721 = load i64, i64* %RBP
  %9722 = sub i64 %9721, 44
  %9723 = load i64, i64* %PC
  %9724 = add i64 %9723, 3
  store i64 %9724, i64* %PC
  %9725 = inttoptr i64 %9722 to i32*
  %9726 = load i32, i32* %9725
  %9727 = sub i32 %9719, %9726
  %9728 = icmp ult i32 %9719, %9726
  %9729 = zext i1 %9728 to i8
  %9730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9729, i8* %9730, align 1, !tbaa !2432
  %9731 = and i32 %9727, 255
  %9732 = call i32 @llvm.ctpop.i32(i32 %9731) #16
  %9733 = trunc i32 %9732 to i8
  %9734 = and i8 %9733, 1
  %9735 = xor i8 %9734, 1
  %9736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9735, i8* %9736, align 1, !tbaa !2446
  %9737 = xor i32 %9726, %9719
  %9738 = xor i32 %9737, %9727
  %9739 = lshr i32 %9738, 4
  %9740 = trunc i32 %9739 to i8
  %9741 = and i8 %9740, 1
  %9742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9741, i8* %9742, align 1, !tbaa !2450
  %9743 = icmp eq i32 %9727, 0
  %9744 = zext i1 %9743 to i8
  %9745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9744, i8* %9745, align 1, !tbaa !2447
  %9746 = lshr i32 %9727, 31
  %9747 = trunc i32 %9746 to i8
  %9748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9747, i8* %9748, align 1, !tbaa !2448
  %9749 = lshr i32 %9719, 31
  %9750 = lshr i32 %9726, 31
  %9751 = xor i32 %9750, %9749
  %9752 = xor i32 %9746, %9749
  %9753 = add nuw nsw i32 %9752, %9751
  %9754 = icmp eq i32 %9753, 2
  %9755 = zext i1 %9754 to i8
  %9756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9755, i8* %9756, align 1, !tbaa !2449
  %9757 = load i64, i64* %PC
  %9758 = add i64 %9757, 3265
  %9759 = load i64, i64* %PC
  %9760 = add i64 %9759, 6
  %9761 = load i64, i64* %PC
  %9762 = add i64 %9761, 6
  store i64 %9762, i64* %PC
  %9763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9764 = load i8, i8* %9763, align 1, !tbaa !2448
  %9765 = icmp ne i8 %9764, 0
  %9766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9767 = load i8, i8* %9766, align 1, !tbaa !2449
  %9768 = icmp ne i8 %9767, 0
  %9769 = xor i1 %9765, %9768
  %9770 = xor i1 %9769, true
  %9771 = zext i1 %9770 to i8
  store i8 %9771, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9773 = select i1 %9769, i64 %9760, i64 %9758
  store i64 %9773, i64* %9772, align 8, !tbaa !2428
  %9774 = load i8, i8* %BRANCH_TAKEN
  %9775 = icmp eq i8 %9774, 1
  br i1 %9775, label %block_40224b, label %block_401590

block_401c20:                                     ; preds = %block_401c2f, %block_401913
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_401913 ], [ %MEMORY.3, %block_401c2f ]
  %9776 = load i64, i64* %RBP
  %9777 = sub i64 %9776, 196
  %9778 = load i64, i64* %PC
  %9779 = add i64 %9778, 6
  store i64 %9779, i64* %PC
  %9780 = inttoptr i64 %9777 to i32*
  %9781 = load i32, i32* %9780
  %9782 = zext i32 %9781 to i64
  store i64 %9782, i64* %RAX, align 8, !tbaa !2428
  %9783 = load i32, i32* %EAX
  %9784 = zext i32 %9783 to i64
  %9785 = load i64, i64* %RBP
  %9786 = sub i64 %9785, 48
  %9787 = load i64, i64* %PC
  %9788 = add i64 %9787, 3
  store i64 %9788, i64* %PC
  %9789 = inttoptr i64 %9786 to i32*
  %9790 = load i32, i32* %9789
  %9791 = sub i32 %9783, %9790
  %9792 = icmp ult i32 %9783, %9790
  %9793 = zext i1 %9792 to i8
  %9794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9793, i8* %9794, align 1, !tbaa !2432
  %9795 = and i32 %9791, 255
  %9796 = call i32 @llvm.ctpop.i32(i32 %9795) #16
  %9797 = trunc i32 %9796 to i8
  %9798 = and i8 %9797, 1
  %9799 = xor i8 %9798, 1
  %9800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9799, i8* %9800, align 1, !tbaa !2446
  %9801 = xor i32 %9790, %9783
  %9802 = xor i32 %9801, %9791
  %9803 = lshr i32 %9802, 4
  %9804 = trunc i32 %9803 to i8
  %9805 = and i8 %9804, 1
  %9806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9805, i8* %9806, align 1, !tbaa !2450
  %9807 = icmp eq i32 %9791, 0
  %9808 = zext i1 %9807 to i8
  %9809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9808, i8* %9809, align 1, !tbaa !2447
  %9810 = lshr i32 %9791, 31
  %9811 = trunc i32 %9810 to i8
  %9812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9811, i8* %9812, align 1, !tbaa !2448
  %9813 = lshr i32 %9783, 31
  %9814 = lshr i32 %9790, 31
  %9815 = xor i32 %9814, %9813
  %9816 = xor i32 %9810, %9813
  %9817 = add nuw nsw i32 %9816, %9815
  %9818 = icmp eq i32 %9817, 2
  %9819 = zext i1 %9818 to i8
  %9820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9819, i8* %9820, align 1, !tbaa !2449
  %9821 = load i64, i64* %PC
  %9822 = add i64 %9821, 809
  %9823 = load i64, i64* %PC
  %9824 = add i64 %9823, 6
  %9825 = load i64, i64* %PC
  %9826 = add i64 %9825, 6
  store i64 %9826, i64* %PC
  %9827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9828 = load i8, i8* %9827, align 1, !tbaa !2448
  %9829 = icmp ne i8 %9828, 0
  %9830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9831 = load i8, i8* %9830, align 1, !tbaa !2449
  %9832 = icmp ne i8 %9831, 0
  %9833 = xor i1 %9829, %9832
  %9834 = xor i1 %9833, true
  %9835 = zext i1 %9834 to i8
  store i8 %9835, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9837 = select i1 %9833, i64 %9824, i64 %9822
  store i64 %9837, i64* %9836, align 8, !tbaa !2428
  %9838 = load i8, i8* %BRANCH_TAKEN
  %9839 = icmp eq i8 %9838, 1
  %9840 = load i64, i64* %RBP
  %9841 = sub i64 %9840, 120
  %9842 = load i64, i64* %PC
  %9843 = add i64 %9842, 4
  store i64 %9843, i64* %PC
  %9844 = inttoptr i64 %9841 to i64*
  %9845 = load i64, i64* %9844
  store i64 %9845, i64* %RAX, align 8, !tbaa !2428
  %9846 = load i64, i64* %RBP
  %9847 = sub i64 %9846, 188
  %9848 = load i64, i64* %PC
  %9849 = add i64 %9848, 7
  store i64 %9849, i64* %PC
  %9850 = inttoptr i64 %9847 to i32*
  %9851 = load i32, i32* %9850
  %9852 = sext i32 %9851 to i64
  store i64 %9852, i64* %RCX, align 8, !tbaa !2428
  %9853 = load i64, i64* %RCX
  %9854 = load i64, i64* %PC
  %9855 = add i64 %9854, 7
  store i64 %9855, i64* %PC
  %9856 = sext i64 %9853 to i128
  %9857 = and i128 %9856, -18446744073709551616
  %9858 = zext i64 %9853 to i128
  %9859 = or i128 %9857, %9858
  %9860 = mul nsw i128 33800, %9859
  %9861 = trunc i128 %9860 to i64
  store i64 %9861, i64* %RCX, align 8, !tbaa !2428
  %9862 = sext i64 %9861 to i128
  %9863 = icmp ne i128 %9862, %9860
  %9864 = zext i1 %9863 to i8
  %9865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9864, i8* %9865, align 1, !tbaa !2432
  %9866 = trunc i128 %9860 to i32
  %9867 = and i32 %9866, 255
  %9868 = call i32 @llvm.ctpop.i32(i32 %9867) #16
  %9869 = trunc i32 %9868 to i8
  %9870 = and i8 %9869, 1
  %9871 = xor i8 %9870, 1
  %9872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9871, i8* %9872, align 1, !tbaa !2446
  %9873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9873, align 1, !tbaa !2450
  %9874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9874, align 1, !tbaa !2447
  %9875 = lshr i64 %9861, 63
  %9876 = trunc i64 %9875 to i8
  %9877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9876, i8* %9877, align 1, !tbaa !2448
  %9878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9864, i8* %9878, align 1, !tbaa !2449
  %9879 = load i64, i64* %RAX
  %9880 = load i64, i64* %RCX
  %9881 = load i64, i64* %PC
  %9882 = add i64 %9881, 3
  store i64 %9882, i64* %PC
  %9883 = add i64 %9880, %9879
  store i64 %9883, i64* %RAX, align 8, !tbaa !2428
  %9884 = icmp ult i64 %9883, %9879
  %9885 = icmp ult i64 %9883, %9880
  %9886 = or i1 %9884, %9885
  %9887 = zext i1 %9886 to i8
  %9888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9887, i8* %9888, align 1, !tbaa !2432
  %9889 = trunc i64 %9883 to i32
  %9890 = and i32 %9889, 255
  %9891 = call i32 @llvm.ctpop.i32(i32 %9890) #16
  %9892 = trunc i32 %9891 to i8
  %9893 = and i8 %9892, 1
  %9894 = xor i8 %9893, 1
  %9895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9894, i8* %9895, align 1, !tbaa !2446
  %9896 = xor i64 %9880, %9879
  %9897 = xor i64 %9896, %9883
  %9898 = lshr i64 %9897, 4
  %9899 = trunc i64 %9898 to i8
  %9900 = and i8 %9899, 1
  %9901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9900, i8* %9901, align 1, !tbaa !2450
  %9902 = icmp eq i64 %9883, 0
  %9903 = zext i1 %9902 to i8
  %9904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9903, i8* %9904, align 1, !tbaa !2447
  %9905 = lshr i64 %9883, 63
  %9906 = trunc i64 %9905 to i8
  %9907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9906, i8* %9907, align 1, !tbaa !2448
  %9908 = lshr i64 %9879, 63
  %9909 = lshr i64 %9880, 63
  %9910 = xor i64 %9905, %9908
  %9911 = xor i64 %9905, %9909
  %9912 = add nuw nsw i64 %9910, %9911
  %9913 = icmp eq i64 %9912, 2
  %9914 = zext i1 %9913 to i8
  %9915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9914, i8* %9915, align 1, !tbaa !2449
  %9916 = load i64, i64* %RBP
  %9917 = sub i64 %9916, 52
  %9918 = load i64, i64* %PC
  %9919 = add i64 %9918, 4
  store i64 %9919, i64* %PC
  %9920 = inttoptr i64 %9917 to i32*
  %9921 = load i32, i32* %9920
  %9922 = sext i32 %9921 to i64
  store i64 %9922, i64* %RCX, align 8, !tbaa !2428
  %9923 = load i64, i64* %RCX
  %9924 = load i64, i64* %PC
  %9925 = add i64 %9924, 7
  store i64 %9925, i64* %PC
  %9926 = sext i64 %9923 to i128
  %9927 = and i128 %9926, -18446744073709551616
  %9928 = zext i64 %9923 to i128
  %9929 = or i128 %9927, %9928
  %9930 = mul nsw i128 520, %9929
  %9931 = trunc i128 %9930 to i64
  store i64 %9931, i64* %RCX, align 8, !tbaa !2428
  %9932 = sext i64 %9931 to i128
  %9933 = icmp ne i128 %9932, %9930
  %9934 = zext i1 %9933 to i8
  %9935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9934, i8* %9935, align 1, !tbaa !2432
  %9936 = trunc i128 %9930 to i32
  %9937 = and i32 %9936, 255
  %9938 = call i32 @llvm.ctpop.i32(i32 %9937) #16
  %9939 = trunc i32 %9938 to i8
  %9940 = and i8 %9939, 1
  %9941 = xor i8 %9940, 1
  %9942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9941, i8* %9942, align 1, !tbaa !2446
  %9943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9943, align 1, !tbaa !2450
  %9944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9944, align 1, !tbaa !2447
  %9945 = lshr i64 %9931, 63
  %9946 = trunc i64 %9945 to i8
  %9947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9946, i8* %9947, align 1, !tbaa !2448
  %9948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9934, i8* %9948, align 1, !tbaa !2449
  %9949 = load i64, i64* %RAX
  %9950 = load i64, i64* %RCX
  %9951 = load i64, i64* %PC
  %9952 = add i64 %9951, 3
  store i64 %9952, i64* %PC
  %9953 = add i64 %9950, %9949
  store i64 %9953, i64* %RAX, align 8, !tbaa !2428
  %9954 = icmp ult i64 %9953, %9949
  %9955 = icmp ult i64 %9953, %9950
  %9956 = or i1 %9954, %9955
  %9957 = zext i1 %9956 to i8
  %9958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9957, i8* %9958, align 1, !tbaa !2432
  %9959 = trunc i64 %9953 to i32
  %9960 = and i32 %9959, 255
  %9961 = call i32 @llvm.ctpop.i32(i32 %9960) #16
  %9962 = trunc i32 %9961 to i8
  %9963 = and i8 %9962, 1
  %9964 = xor i8 %9963, 1
  %9965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9964, i8* %9965, align 1, !tbaa !2446
  %9966 = xor i64 %9950, %9949
  %9967 = xor i64 %9966, %9953
  %9968 = lshr i64 %9967, 4
  %9969 = trunc i64 %9968 to i8
  %9970 = and i8 %9969, 1
  %9971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9970, i8* %9971, align 1, !tbaa !2450
  %9972 = icmp eq i64 %9953, 0
  %9973 = zext i1 %9972 to i8
  %9974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9973, i8* %9974, align 1, !tbaa !2447
  %9975 = lshr i64 %9953, 63
  %9976 = trunc i64 %9975 to i8
  %9977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9976, i8* %9977, align 1, !tbaa !2448
  %9978 = lshr i64 %9949, 63
  %9979 = lshr i64 %9950, 63
  %9980 = xor i64 %9975, %9978
  %9981 = xor i64 %9975, %9979
  %9982 = add nuw nsw i64 %9980, %9981
  %9983 = icmp eq i64 %9982, 2
  %9984 = zext i1 %9983 to i8
  %9985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9984, i8* %9985, align 1, !tbaa !2449
  %9986 = load i64, i64* %RBP
  br i1 %9839, label %block_401f52, label %block_401c2f
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006c0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400650_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4033c0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4033c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2450
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2447
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2450
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2447
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2448
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2449
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 11932
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400550__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2447
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2449
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2450
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2447
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_403416, label %block_4033f6

block_403416:                                     ; preds = %block_403400, %block_4033c0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4033c0 ], [ %387, %block_403400 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2450
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4033f6:                                     ; preds = %block_4033c0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2448
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2449
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2450
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_403400

block_403400:                                     ; preds = %block_403400, %block_4033f6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_4033f6 ], [ %387, %block_403400 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2450
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2447
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2449
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2450
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2449
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2447
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_403400, label %block_403416
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007b0_polybench_timer_print(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %23 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %22, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %23 to %"class.std::bitset"*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = sub i64 %34, 16
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %38 = icmp ult i64 %34, 16
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2432
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = call i32 @llvm.ctpop.i32(i32 %42) #16
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2446
  %48 = xor i64 16, %34
  %49 = xor i64 %48, %37
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = icmp eq i64 %37, 0
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = lshr i64 %37, 63
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = lshr i64 %34, 63
  %61 = xor i64 %57, %60
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 10
  store i64 %67, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %68 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 9
  store i64 %70, i64* %PC
  %71 = load double, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*)
  %72 = bitcast i8* %68 to double*
  store double %71, double* %72, align 1, !tbaa !2453
  %73 = getelementptr inbounds i8, i8* %68, i64 8
  %74 = bitcast i8* %73 to double*
  store double 0.000000e+00, double* %74, align 1, !tbaa !2453
  %75 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %76 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 9
  store i64 %78, i64* %PC
  %79 = bitcast i8* %76 to double*
  %80 = load double, double* %79, align 1
  %81 = getelementptr inbounds i8, i8* %76, i64 8
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 1
  %84 = load double, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*)
  %85 = fsub double %80, %84
  %86 = bitcast i8* %75 to double*
  store double %85, double* %86, align 1, !tbaa !2453
  %87 = getelementptr inbounds i8, i8* %75, i64 8
  %88 = bitcast i8* %87 to i64*
  store i64 %83, i64* %88, align 1, !tbaa !2453
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 2
  store i64 %90, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %91 = load i64, i64* %PC
  %92 = sub i64 %91, 582
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @ext_6040e0_printf(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 4
  %106 = load i32, i32* %EAX
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RSP
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = add i64 16, %111
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %115 = icmp ult i64 %114, %111
  %116 = icmp ult i64 %114, 16
  %117 = or i1 %115, %116
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %118, i8* %119, align 1, !tbaa !2432
  %120 = trunc i64 %114 to i32
  %121 = and i32 %120, 255
  %122 = call i32 @llvm.ctpop.i32(i32 %121) #16
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %125, i8* %126, align 1, !tbaa !2446
  %127 = xor i64 16, %111
  %128 = xor i64 %127, %114
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %131, i8* %132, align 1, !tbaa !2450
  %133 = icmp eq i64 %114, 0
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = lshr i64 %114, 63
  %137 = trunc i64 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %137, i8* %138, align 1, !tbaa !2448
  %139 = lshr i64 %111, 63
  %140 = xor i64 %136, %139
  %141 = add nuw nsw i64 %140, %136
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 1
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %148 = load i64, i64* %147, align 8, !tbaa !2428
  %149 = add i64 %148, 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %RBP, align 8, !tbaa !2428
  store i64 %149, i64* %147, align 8, !tbaa !2428
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 1
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %156 = load i64, i64* %155, align 8, !tbaa !2428
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  store i64 %158, i64* %154, align 8, !tbaa !2428
  %159 = add i64 %156, 8
  store i64 %159, i64* %155, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_403430___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403434__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403434:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2450
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2449
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2449
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790_polybench_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400790:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %13 to %union.vec128_t*
  %14 = load i64, i64* %RBP
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %14, i64* %20
  store i64 %19, i64* %17, align 8, !tbaa !2428
  %21 = load i64, i64* %RSP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 3
  store i64 %23, i64* %PC
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  %24 = load i64, i64* %PC
  %25 = sub i64 %24, 20
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 5
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %25, i64* %34, align 8, !tbaa !2428
  %35 = load i64, i64* %PC
  %36 = call %struct.Memory* @sub_400780_rtclock(%struct.State* %0, i64 %35, %struct.Memory* %2)
  %37 = bitcast %union.vec128_t* %XMM0 to i8*
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 9
  store i64 %39, i64* %PC
  %40 = bitcast i8* %37 to double*
  %41 = load double, double* %40, align 1
  store double %41, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*)
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 1
  store i64 %50, i64* %PC
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !2428
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %51, align 8, !tbaa !2428
  %56 = add i64 %53, 8
  store i64 %56, i64* %52, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400690:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2450
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2447
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4006b0, label %block_400699

block_4006b0:                                     ; preds = %block_400690
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400699:                                     ; preds = %block_400690
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400620_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400650_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400650:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6307928, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6307928
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6307928
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6307928, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2450
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2451
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2451
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2451
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2451
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2451
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2451
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2450
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2447
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2448
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2449
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2451
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2451
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2447
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_400688, label %block_400673

block_40067d:                                     ; preds = %block_400673
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 1
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %193 = load i64, i64* %192, align 8, !tbaa !2428
  %194 = add i64 %193, 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %192, align 8, !tbaa !2428
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  store i64 6307928, i64* %RDI, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 2
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %199, i64* %202, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  switch i64 %203, label %269 [
    i64 4195978, label %block_40068a
    i64 4195973, label %block_400685
  ]

block_40068a:                                     ; preds = %block_40067d
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %RAX
  %206 = add i64 %205, %204
  %207 = load i16, i16* %AX
  %208 = zext i16 %207 to i64
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = load i64, i64* %PC
  %212 = tail call %struct.Memory* @sub_400690___do_global_dtors_aux(%struct.State* %0, i64 %211, %struct.Memory* %2)
  ret %struct.Memory* %212

block_400673:                                     ; preds = %block_400650
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = and i64 %216, %215
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %220, align 1, !tbaa !2432
  %221 = trunc i64 %219 to i32
  %222 = and i32 %221, 255
  %223 = call i32 @llvm.ctpop.i32(i32 %222) #16
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %226, i8* %227, align 1, !tbaa !2446
  %228 = icmp eq i64 %219, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = lshr i64 %219, 63
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2448
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 13
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 2
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 2
  store i64 %241, i64* %PC
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %243 = load i8, i8* %242, align 1, !tbaa !2447
  store i8 %243, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %245 = icmp ne i8 %243, 0
  %246 = select i1 %245, i64 %237, i64 %239
  store i64 %246, i64* %244, align 8, !tbaa !2428
  %247 = load i8, i8* %BRANCH_TAKEN
  %248 = icmp eq i8 %247, 1
  br i1 %248, label %block_400688, label %block_40067d

block_400688:                                     ; preds = %block_400685, %block_400673, %block_400650
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400650 ], [ %2, %block_400673 ], [ %2, %block_400685 ]
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 1
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = add i64 %252, 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RBP, align 8, !tbaa !2428
  store i64 %253, i64* %251, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 1
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %260 = load i64, i64* %259, align 8, !tbaa !2428
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %258, align 8, !tbaa !2428
  %263 = add i64 %260, 8
  store i64 %263, i64* %259, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400685:                                     ; preds = %block_40067d
  %264 = load i64, i64* %RAX
  %265 = load i32, i32* %EAX
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  br label %block_400688

; <label>:269:                                    ; preds = %block_40067d
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_400610__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400610:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_403010_check_FP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403010:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDI = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 17
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R8D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 19
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %R9D = bitcast %union.anon* %30 to i32*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 21
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %R10D = bitcast %union.anon* %33 to i32*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 1
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RAX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 5
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RCX = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 7
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDX = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 9
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSI = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 11
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RDI = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 13
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %RSP = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 15
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %RBP = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R8 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %RSP
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = sub i64 %78, 112
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %82 = icmp ult i64 %78, 112
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %83, i8* %84, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #16
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2446
  %92 = xor i64 112, %78
  %93 = xor i64 %92, %81
  %94 = lshr i64 %93, 4
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = icmp eq i64 %81, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2447
  %101 = lshr i64 %81, 63
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = lshr i64 %78, 63
  %105 = xor i64 %101, %104
  %106 = add nuw nsw i64 %105, %104
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %108, i8* %109, align 1, !tbaa !2449
  %110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 8
  store i64 %112, i64* %PC
  %113 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 88) to double*)
  %114 = bitcast i8* %110 to double*
  store double %113, double* %114, align 1, !tbaa !2453
  %115 = getelementptr inbounds i8, i8* %110, i64 8
  %116 = bitcast i8* %115 to double*
  store double 0.000000e+00, double* %116, align 1, !tbaa !2453
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 8
  %119 = load i32, i32* %EDI
  %120 = zext i32 %119 to i64
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %118 to i32*
  store i32 %119, i32* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i32, i32* %ESI
  %127 = zext i32 %126 to i64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 16
  %133 = load i32, i32* %EDX
  %134 = zext i32 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %132 to i32*
  store i32 %133, i32* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 24
  %140 = load i64, i64* %RCX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 32
  %146 = load i64, i64* %R8
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 56
  %152 = bitcast %union.vec128_t* %XMM0 to i8*
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC
  %155 = bitcast i8* %152 to double*
  %156 = load double, double* %155, align 1
  %157 = inttoptr i64 %151 to double*
  store double %156, double* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 36
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 7
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  store i32 0, i32* %162
  br label %block_40303d

block_40317e:                                     ; preds = %block_403055
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 5
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %167, align 8, !tbaa !2428
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 36
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 3
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %169 to i32*
  %173 = load i32, i32* %172
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RAX
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  %178 = trunc i64 %175 to i32
  %179 = add i32 1, %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = icmp ult i32 %179, %178
  %182 = icmp ult i32 %179, 1
  %183 = or i1 %181, %182
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %184, i8* %185, align 1, !tbaa !2432
  %186 = and i32 %179, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2446
  %192 = xor i64 1, %175
  %193 = trunc i64 %192 to i32
  %194 = xor i32 %193, %179
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %197, i8* %198, align 1, !tbaa !2450
  %199 = icmp eq i32 %179, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2447
  %202 = lshr i32 %179, 31
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2448
  %205 = lshr i32 %178, 31
  %206 = xor i32 %202, %205
  %207 = add nuw nsw i32 %206, %202
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2449
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 36
  %213 = load i32, i32* %EAX
  %214 = zext i32 %213 to i64
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %212 to i32*
  store i32 %213, i32* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 335
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %219, i64* %222, align 8, !tbaa !2428
  br label %block_40303d

block_403191:                                     ; preds = %block_40303d
  %223 = sub i64 %333, 4
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i32*
  store i32 1, i32* %226
  br label %block_403198

block_40303d:                                     ; preds = %block_40317e, %block_403010
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403010 ], [ %MEMORY.3, %block_40317e ]
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 36
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 3
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to i32*
  %232 = load i32, i32* %231
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RAX, align 8, !tbaa !2428
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 8
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = load i64, i64* %RCX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 3
  store i64 %243, i64* %PC
  %244 = trunc i64 %241 to i32
  %245 = add i32 1, %244
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %RCX, align 8, !tbaa !2428
  %247 = icmp ult i32 %245, %244
  %248 = icmp ult i32 %245, 1
  %249 = or i1 %247, %248
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %250, i8* %251, align 1, !tbaa !2432
  %252 = and i32 %245, 255
  %253 = call i32 @llvm.ctpop.i32(i32 %252) #16
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = xor i8 %255, 1
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %256, i8* %257, align 1, !tbaa !2446
  %258 = xor i64 1, %241
  %259 = trunc i64 %258 to i32
  %260 = xor i32 %259, %245
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %263, i8* %264, align 1, !tbaa !2450
  %265 = icmp eq i32 %245, 0
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = lshr i32 %245, 31
  %269 = trunc i32 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i32 %244, 31
  %272 = xor i32 %268, %271
  %273 = add nuw nsw i32 %272, %268
  %274 = icmp eq i32 %273, 2
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i32, i32* %ECX
  %280 = zext i32 %279 to i64
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 2
  store i64 %282, i64* %PC
  %283 = sub i32 %277, %279
  %284 = icmp ult i32 %277, %279
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2432
  %287 = and i32 %283, 255
  %288 = call i32 @llvm.ctpop.i32(i32 %287) #16
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %291, i8* %292, align 1, !tbaa !2446
  %293 = xor i64 %280, %278
  %294 = trunc i64 %293 to i32
  %295 = xor i32 %294, %283
  %296 = lshr i32 %295, 4
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %298, i8* %299, align 1, !tbaa !2450
  %300 = icmp eq i32 %283, 0
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %301, i8* %302, align 1, !tbaa !2447
  %303 = lshr i32 %283, 31
  %304 = trunc i32 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = lshr i32 %277, 31
  %307 = lshr i32 %279, 31
  %308 = xor i32 %307, %306
  %309 = xor i32 %303, %306
  %310 = add nuw nsw i32 %309, %308
  %311 = icmp eq i32 %310, 2
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %312, i8* %313, align 1, !tbaa !2449
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 329
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 6
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 6
  store i64 %319, i64* %PC
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %321 = load i8, i8* %320, align 1, !tbaa !2448
  %322 = icmp ne i8 %321, 0
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %324 = load i8, i8* %323, align 1, !tbaa !2449
  %325 = icmp ne i8 %324, 0
  %326 = xor i1 %322, %325
  %327 = xor i1 %326, true
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %330 = select i1 %326, i64 %317, i64 %315
  store i64 %330, i64* %329, align 8, !tbaa !2428
  %331 = load i8, i8* %BRANCH_TAKEN
  %332 = icmp eq i8 %331, 1
  %333 = load i64, i64* %RBP
  br i1 %332, label %block_403191, label %block_40304e

block_40304e:                                     ; preds = %block_40303d
  %334 = sub i64 %333, 40
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 7
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i32*
  store i32 0, i32* %337
  br label %block_403055

block_40316b:                                     ; preds = %block_40306d
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 5
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 5
  store i64 %341, i64* %PC
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %339, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 40
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC
  %347 = inttoptr i64 %344 to i32*
  %348 = load i32, i32* %347
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = load i64, i64* %RAX
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 3
  store i64 %352, i64* %PC
  %353 = trunc i64 %350 to i32
  %354 = add i32 1, %353
  %355 = zext i32 %354 to i64
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = icmp ult i32 %354, %353
  %357 = icmp ult i32 %354, 1
  %358 = or i1 %356, %357
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %359, i8* %360, align 1, !tbaa !2432
  %361 = and i32 %354, 255
  %362 = call i32 @llvm.ctpop.i32(i32 %361) #16
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %365, i8* %366, align 1, !tbaa !2446
  %367 = xor i64 1, %350
  %368 = trunc i64 %367 to i32
  %369 = xor i32 %368, %354
  %370 = lshr i32 %369, 4
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %372, i8* %373, align 1, !tbaa !2450
  %374 = icmp eq i32 %354, 0
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %375, i8* %376, align 1, !tbaa !2447
  %377 = lshr i32 %354, 31
  %378 = trunc i32 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %378, i8* %379, align 1, !tbaa !2448
  %380 = lshr i32 %353, 31
  %381 = xor i32 %377, %380
  %382 = add nuw nsw i32 %381, %377
  %383 = icmp eq i32 %382, 2
  %384 = zext i1 %383 to i8
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %384, i8* %385, align 1, !tbaa !2449
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 40
  %388 = load i32, i32* %EAX
  %389 = zext i32 %388 to i64
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 3
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %387 to i32*
  store i32 %388, i32* %392
  %393 = load i64, i64* %PC
  %394 = sub i64 %393, 292
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  store i64 %396, i64* %PC
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %394, i64* %397, align 8, !tbaa !2428
  br label %block_403055

block_40306d:                                     ; preds = %block_403158, %block_403066
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_403066 ], [ %978, %block_403158 ]
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 44
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 3
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  %403 = load i32, i32* %402
  %404 = zext i32 %403 to i64
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 12
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 3
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i32*
  %410 = load i32, i32* %409
  %411 = zext i32 %410 to i64
  store i64 %411, i64* %RCX, align 8, !tbaa !2428
  %412 = load i64, i64* %RCX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 3
  store i64 %414, i64* %PC
  %415 = trunc i64 %412 to i32
  %416 = add i32 1, %415
  %417 = zext i32 %416 to i64
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = icmp ult i32 %416, %415
  %419 = icmp ult i32 %416, 1
  %420 = or i1 %418, %419
  %421 = zext i1 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %421, i8* %422, align 1, !tbaa !2432
  %423 = and i32 %416, 255
  %424 = call i32 @llvm.ctpop.i32(i32 %423) #16
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  %427 = xor i8 %426, 1
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %427, i8* %428, align 1, !tbaa !2446
  %429 = xor i64 1, %412
  %430 = trunc i64 %429 to i32
  %431 = xor i32 %430, %416
  %432 = lshr i32 %431, 4
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %434, i8* %435, align 1, !tbaa !2450
  %436 = icmp eq i32 %416, 0
  %437 = zext i1 %436 to i8
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %437, i8* %438, align 1, !tbaa !2447
  %439 = lshr i32 %416, 31
  %440 = trunc i32 %439 to i8
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %440, i8* %441, align 1, !tbaa !2448
  %442 = lshr i32 %415, 31
  %443 = xor i32 %439, %442
  %444 = add nuw nsw i32 %443, %439
  %445 = icmp eq i32 %444, 2
  %446 = zext i1 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %446, i8* %447, align 1, !tbaa !2449
  %448 = load i32, i32* %EAX
  %449 = zext i32 %448 to i64
  %450 = load i32, i32* %ECX
  %451 = zext i32 %450 to i64
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 2
  store i64 %453, i64* %PC
  %454 = sub i32 %448, %450
  %455 = icmp ult i32 %448, %450
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %456, i8* %457, align 1, !tbaa !2432
  %458 = and i32 %454, 255
  %459 = call i32 @llvm.ctpop.i32(i32 %458) #16
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %462, i8* %463, align 1, !tbaa !2446
  %464 = xor i64 %451, %449
  %465 = trunc i64 %464 to i32
  %466 = xor i32 %465, %454
  %467 = lshr i32 %466, 4
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %469, i8* %470, align 1, !tbaa !2450
  %471 = icmp eq i32 %454, 0
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = lshr i32 %454, 31
  %475 = trunc i32 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %475, i8* %476, align 1, !tbaa !2448
  %477 = lshr i32 %448, 31
  %478 = lshr i32 %450, 31
  %479 = xor i32 %478, %477
  %480 = xor i32 %474, %477
  %481 = add nuw nsw i32 %480, %479
  %482 = icmp eq i32 %481, 2
  %483 = zext i1 %482 to i8
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %483, i8* %484, align 1, !tbaa !2449
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 243
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 6
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 6
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %492 = load i8, i8* %491, align 1, !tbaa !2448
  %493 = icmp ne i8 %492, 0
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %495 = load i8, i8* %494, align 1, !tbaa !2449
  %496 = icmp ne i8 %495, 0
  %497 = xor i1 %493, %496
  %498 = xor i1 %497, true
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %501 = select i1 %497, i64 %488, i64 %486
  store i64 %501, i64* %500, align 8, !tbaa !2428
  %502 = load i8, i8* %BRANCH_TAKEN
  %503 = icmp eq i8 %502, 1
  br i1 %503, label %block_40316b, label %block_40307e

block_40307e:                                     ; preds = %block_40306d
  %504 = load i64, i64* %RBP
  %505 = sub i64 %504, 24
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %505 to i64*
  %509 = load i64, i64* %508
  store i64 %509, i64* %RAX, align 8, !tbaa !2428
  %510 = load i64, i64* %RBP
  %511 = sub i64 %510, 36
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 4
  store i64 %513, i64* %PC
  %514 = inttoptr i64 %511 to i32*
  %515 = load i32, i32* %514
  %516 = sext i32 %515 to i64
  store i64 %516, i64* %RCX, align 8, !tbaa !2428
  %517 = load i64, i64* %RCX
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 7
  store i64 %519, i64* %PC
  %520 = sext i64 %517 to i128
  %521 = and i128 %520, -18446744073709551616
  %522 = zext i64 %517 to i128
  %523 = or i128 %521, %522
  %524 = mul nsw i128 33800, %523
  %525 = trunc i128 %524 to i64
  store i64 %525, i64* %RCX, align 8, !tbaa !2428
  %526 = sext i64 %525 to i128
  %527 = icmp ne i128 %526, %524
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %528, i8* %529, align 1, !tbaa !2432
  %530 = trunc i128 %524 to i32
  %531 = and i32 %530, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2446
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %537, align 1, !tbaa !2450
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %538, align 1, !tbaa !2447
  %539 = lshr i64 %525, 63
  %540 = trunc i64 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %528, i8* %542, align 1, !tbaa !2449
  %543 = load i64, i64* %RAX
  %544 = load i64, i64* %RCX
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 3
  store i64 %546, i64* %PC
  %547 = add i64 %544, %543
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = icmp ult i64 %547, %543
  %549 = icmp ult i64 %547, %544
  %550 = or i1 %548, %549
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %551, i8* %552, align 1, !tbaa !2432
  %553 = trunc i64 %547 to i32
  %554 = and i32 %553, 255
  %555 = call i32 @llvm.ctpop.i32(i32 %554) #16
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = xor i8 %557, 1
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %558, i8* %559, align 1, !tbaa !2446
  %560 = xor i64 %544, %543
  %561 = xor i64 %560, %547
  %562 = lshr i64 %561, 4
  %563 = trunc i64 %562 to i8
  %564 = and i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %564, i8* %565, align 1, !tbaa !2450
  %566 = icmp eq i64 %547, 0
  %567 = zext i1 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %567, i8* %568, align 1, !tbaa !2447
  %569 = lshr i64 %547, 63
  %570 = trunc i64 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %570, i8* %571, align 1, !tbaa !2448
  %572 = lshr i64 %543, 63
  %573 = lshr i64 %544, 63
  %574 = xor i64 %569, %572
  %575 = xor i64 %569, %573
  %576 = add nuw nsw i64 %574, %575
  %577 = icmp eq i64 %576, 2
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %578, i8* %579, align 1, !tbaa !2449
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 40
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %581 to i32*
  %585 = load i32, i32* %584
  %586 = sext i32 %585 to i64
  store i64 %586, i64* %RCX, align 8, !tbaa !2428
  %587 = load i64, i64* %RCX
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 7
  store i64 %589, i64* %PC
  %590 = sext i64 %587 to i128
  %591 = and i128 %590, -18446744073709551616
  %592 = zext i64 %587 to i128
  %593 = or i128 %591, %592
  %594 = mul nsw i128 520, %593
  %595 = trunc i128 %594 to i64
  store i64 %595, i64* %RCX, align 8, !tbaa !2428
  %596 = sext i64 %595 to i128
  %597 = icmp ne i128 %596, %594
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %598, i8* %599, align 1, !tbaa !2432
  %600 = trunc i128 %594 to i32
  %601 = and i32 %600, 255
  %602 = call i32 @llvm.ctpop.i32(i32 %601) #16
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %605, i8* %606, align 1, !tbaa !2446
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %607, align 1, !tbaa !2450
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %608, align 1, !tbaa !2447
  %609 = lshr i64 %595, 63
  %610 = trunc i64 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %610, i8* %611, align 1, !tbaa !2448
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %598, i8* %612, align 1, !tbaa !2449
  %613 = load i64, i64* %RAX
  %614 = load i64, i64* %RCX
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 3
  store i64 %616, i64* %PC
  %617 = add i64 %614, %613
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = icmp ult i64 %617, %613
  %619 = icmp ult i64 %617, %614
  %620 = or i1 %618, %619
  %621 = zext i1 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %621, i8* %622, align 1, !tbaa !2432
  %623 = trunc i64 %617 to i32
  %624 = and i32 %623, 255
  %625 = call i32 @llvm.ctpop.i32(i32 %624) #16
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = xor i8 %627, 1
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %628, i8* %629, align 1, !tbaa !2446
  %630 = xor i64 %614, %613
  %631 = xor i64 %630, %617
  %632 = lshr i64 %631, 4
  %633 = trunc i64 %632 to i8
  %634 = and i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %634, i8* %635, align 1, !tbaa !2450
  %636 = icmp eq i64 %617, 0
  %637 = zext i1 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = lshr i64 %617, 63
  %640 = trunc i64 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i64 %613, 63
  %643 = lshr i64 %614, 63
  %644 = xor i64 %639, %642
  %645 = xor i64 %639, %643
  %646 = add nuw nsw i64 %644, %645
  %647 = icmp eq i64 %646, 2
  %648 = zext i1 %647 to i8
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %648, i8* %649, align 1, !tbaa !2449
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 44
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i32*
  %655 = load i32, i32* %654
  %656 = sext i32 %655 to i64
  store i64 %656, i64* %RCX, align 8, !tbaa !2428
  %657 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %658 = load i64, i64* %RAX
  %659 = load i64, i64* %RCX
  %660 = mul i64 %659, 8
  %661 = add i64 %660, %658
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to double*
  %665 = load double, double* %664
  %666 = bitcast i8* %657 to double*
  store double %665, double* %666, align 1, !tbaa !2453
  %667 = getelementptr inbounds i8, i8* %657, i64 8
  %668 = bitcast i8* %667 to double*
  store double 0.000000e+00, double* %668, align 1, !tbaa !2453
  %669 = load i64, i64* %RBP
  %670 = sub i64 %669, 64
  %671 = bitcast %union.vec128_t* %XMM0 to i8*
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  store i64 %673, i64* %PC
  %674 = bitcast i8* %671 to double*
  %675 = load double, double* %674, align 1
  %676 = inttoptr i64 %670 to double*
  store double %675, double* %676
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 32
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 4
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to i64*
  %682 = load i64, i64* %681
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 36
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %684 to i32*
  %688 = load i32, i32* %687
  %689 = sext i32 %688 to i64
  store i64 %689, i64* %RCX, align 8, !tbaa !2428
  %690 = load i64, i64* %RCX
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 7
  store i64 %692, i64* %PC
  %693 = sext i64 %690 to i128
  %694 = and i128 %693, -18446744073709551616
  %695 = zext i64 %690 to i128
  %696 = or i128 %694, %695
  %697 = mul nsw i128 33800, %696
  %698 = trunc i128 %697 to i64
  store i64 %698, i64* %RCX, align 8, !tbaa !2428
  %699 = sext i64 %698 to i128
  %700 = icmp ne i128 %699, %697
  %701 = zext i1 %700 to i8
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %701, i8* %702, align 1, !tbaa !2432
  %703 = trunc i128 %697 to i32
  %704 = and i32 %703, 255
  %705 = call i32 @llvm.ctpop.i32(i32 %704) #16
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %708, i8* %709, align 1, !tbaa !2446
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %710, align 1, !tbaa !2450
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %711, align 1, !tbaa !2447
  %712 = lshr i64 %698, 63
  %713 = trunc i64 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %713, i8* %714, align 1, !tbaa !2448
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %701, i8* %715, align 1, !tbaa !2449
  %716 = load i64, i64* %RAX
  %717 = load i64, i64* %RCX
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 3
  store i64 %719, i64* %PC
  %720 = add i64 %717, %716
  store i64 %720, i64* %RAX, align 8, !tbaa !2428
  %721 = icmp ult i64 %720, %716
  %722 = icmp ult i64 %720, %717
  %723 = or i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %724, i8* %725, align 1, !tbaa !2432
  %726 = trunc i64 %720 to i32
  %727 = and i32 %726, 255
  %728 = call i32 @llvm.ctpop.i32(i32 %727) #16
  %729 = trunc i32 %728 to i8
  %730 = and i8 %729, 1
  %731 = xor i8 %730, 1
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %731, i8* %732, align 1, !tbaa !2446
  %733 = xor i64 %717, %716
  %734 = xor i64 %733, %720
  %735 = lshr i64 %734, 4
  %736 = trunc i64 %735 to i8
  %737 = and i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = icmp eq i64 %720, 0
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %740, i8* %741, align 1, !tbaa !2447
  %742 = lshr i64 %720, 63
  %743 = trunc i64 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2448
  %745 = lshr i64 %716, 63
  %746 = lshr i64 %717, 63
  %747 = xor i64 %742, %745
  %748 = xor i64 %742, %746
  %749 = add nuw nsw i64 %747, %748
  %750 = icmp eq i64 %749, 2
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %751, i8* %752, align 1, !tbaa !2449
  %753 = load i64, i64* %RBP
  %754 = sub i64 %753, 40
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %754 to i32*
  %758 = load i32, i32* %757
  %759 = sext i32 %758 to i64
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = load i64, i64* %RCX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 7
  store i64 %762, i64* %PC
  %763 = sext i64 %760 to i128
  %764 = and i128 %763, -18446744073709551616
  %765 = zext i64 %760 to i128
  %766 = or i128 %764, %765
  %767 = mul nsw i128 520, %766
  %768 = trunc i128 %767 to i64
  store i64 %768, i64* %RCX, align 8, !tbaa !2428
  %769 = sext i64 %768 to i128
  %770 = icmp ne i128 %769, %767
  %771 = zext i1 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %771, i8* %772, align 1, !tbaa !2432
  %773 = trunc i128 %767 to i32
  %774 = and i32 %773, 255
  %775 = call i32 @llvm.ctpop.i32(i32 %774) #16
  %776 = trunc i32 %775 to i8
  %777 = and i8 %776, 1
  %778 = xor i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %778, i8* %779, align 1, !tbaa !2446
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %780, align 1, !tbaa !2450
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %781, align 1, !tbaa !2447
  %782 = lshr i64 %768, 63
  %783 = trunc i64 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %783, i8* %784, align 1, !tbaa !2448
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %771, i8* %785, align 1, !tbaa !2449
  %786 = load i64, i64* %RAX
  %787 = load i64, i64* %RCX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = add i64 %787, %786
  store i64 %790, i64* %RAX, align 8, !tbaa !2428
  %791 = icmp ult i64 %790, %786
  %792 = icmp ult i64 %790, %787
  %793 = or i1 %791, %792
  %794 = zext i1 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %794, i8* %795, align 1, !tbaa !2432
  %796 = trunc i64 %790 to i32
  %797 = and i32 %796, 255
  %798 = call i32 @llvm.ctpop.i32(i32 %797) #16
  %799 = trunc i32 %798 to i8
  %800 = and i8 %799, 1
  %801 = xor i8 %800, 1
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %801, i8* %802, align 1, !tbaa !2446
  %803 = xor i64 %787, %786
  %804 = xor i64 %803, %790
  %805 = lshr i64 %804, 4
  %806 = trunc i64 %805 to i8
  %807 = and i8 %806, 1
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %807, i8* %808, align 1, !tbaa !2450
  %809 = icmp eq i64 %790, 0
  %810 = zext i1 %809 to i8
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %810, i8* %811, align 1, !tbaa !2447
  %812 = lshr i64 %790, 63
  %813 = trunc i64 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %813, i8* %814, align 1, !tbaa !2448
  %815 = lshr i64 %786, 63
  %816 = lshr i64 %787, 63
  %817 = xor i64 %812, %815
  %818 = xor i64 %812, %816
  %819 = add nuw nsw i64 %817, %818
  %820 = icmp eq i64 %819, 2
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %821, i8* %822, align 1, !tbaa !2449
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 44
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 4
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i32*
  %828 = load i32, i32* %827
  %829 = sext i32 %828 to i64
  store i64 %829, i64* %RCX, align 8, !tbaa !2428
  %830 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %831 = load i64, i64* %RAX
  %832 = load i64, i64* %RCX
  %833 = mul i64 %832, 8
  %834 = add i64 %833, %831
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to double*
  %838 = load double, double* %837
  %839 = bitcast i8* %830 to double*
  store double %838, double* %839, align 1, !tbaa !2453
  %840 = getelementptr inbounds i8, i8* %830, i64 8
  %841 = bitcast i8* %840 to double*
  store double 0.000000e+00, double* %841, align 1, !tbaa !2453
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 72
  %844 = bitcast %union.vec128_t* %XMM0 to i8*
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 5
  store i64 %846, i64* %PC
  %847 = bitcast i8* %844 to double*
  %848 = load double, double* %847, align 1
  %849 = inttoptr i64 %843 to double*
  store double %848, double* %849
  %850 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 64
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 5
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to double*
  %856 = load double, double* %855
  %857 = bitcast i8* %850 to double*
  store double %856, double* %857, align 1, !tbaa !2453
  %858 = getelementptr inbounds i8, i8* %850, i64 8
  %859 = bitcast i8* %858 to double*
  store double 0.000000e+00, double* %859, align 1, !tbaa !2453
  %860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 72
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = bitcast i8* %861 to double*
  %867 = load double, double* %866, align 1
  %868 = getelementptr inbounds i8, i8* %861, i64 8
  %869 = bitcast i8* %868 to i64*
  %870 = load i64, i64* %869, align 1
  %871 = inttoptr i64 %863 to double*
  %872 = load double, double* %871
  %873 = fsub double %867, %872
  %874 = bitcast i8* %860 to double*
  store double %873, double* %874, align 1, !tbaa !2453
  %875 = getelementptr inbounds i8, i8* %860, i64 8
  %876 = bitcast i8* %875 to i64*
  store i64 %870, i64* %876, align 1, !tbaa !2453
  %877 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 7
  store i64 %879, i64* %PC
  %880 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 96) to float*)
  %881 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 100) to float*)
  %882 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 104) to float*)
  %883 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 108) to float*)
  %884 = bitcast i8* %877 to float*
  store float %880, float* %884, align 1, !tbaa !2455
  %885 = getelementptr inbounds i8, i8* %877, i64 4
  %886 = bitcast i8* %885 to float*
  store float %881, float* %886, align 1, !tbaa !2455
  %887 = getelementptr inbounds i8, i8* %877, i64 8
  %888 = bitcast i8* %887 to float*
  store float %882, float* %888, align 1, !tbaa !2455
  %889 = getelementptr inbounds i8, i8* %877, i64 12
  %890 = bitcast i8* %889 to float*
  store float %883, float* %890, align 1, !tbaa !2455
  %891 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %893 = bitcast %union.vec128_t* %XMM1 to i8*
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 4
  store i64 %895, i64* %PC
  %896 = bitcast i8* %892 to i64*
  %897 = load i64, i64* %896, align 1
  %898 = getelementptr inbounds i8, i8* %892, i64 8
  %899 = bitcast i8* %898 to i64*
  %900 = load i64, i64* %899, align 1
  %901 = bitcast i8* %893 to i64*
  %902 = load i64, i64* %901, align 1
  %903 = getelementptr inbounds i8, i8* %893, i64 8
  %904 = bitcast i8* %903 to i64*
  %905 = load i64, i64* %904, align 1
  %906 = and i64 %902, %897
  %907 = and i64 %905, %900
  %908 = trunc i64 %906 to i32
  %909 = lshr i64 %906, 32
  %910 = trunc i64 %909 to i32
  %911 = bitcast i8* %891 to i32*
  store i32 %908, i32* %911, align 1, !tbaa !2452
  %912 = getelementptr inbounds i8, i8* %891, i64 4
  %913 = bitcast i8* %912 to i32*
  store i32 %910, i32* %913, align 1, !tbaa !2452
  %914 = trunc i64 %907 to i32
  %915 = getelementptr inbounds i8, i8* %891, i64 8
  %916 = bitcast i8* %915 to i32*
  store i32 %914, i32* %916, align 1, !tbaa !2452
  %917 = lshr i64 %907, 32
  %918 = trunc i64 %917 to i32
  %919 = getelementptr inbounds i8, i8* %891, i64 12
  %920 = bitcast i8* %919 to i32*
  store i32 %918, i32* %920, align 1, !tbaa !2452
  %921 = load i64, i64* %RBP
  %922 = sub i64 %921, 80
  %923 = bitcast %union.vec128_t* %XMM0 to i8*
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 5
  store i64 %925, i64* %PC
  %926 = bitcast i8* %923 to double*
  %927 = load double, double* %926, align 1
  %928 = inttoptr i64 %922 to double*
  store double %927, double* %928
  %929 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 80
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to double*
  %935 = load double, double* %934
  %936 = bitcast i8* %929 to double*
  store double %935, double* %936, align 1, !tbaa !2453
  %937 = getelementptr inbounds i8, i8* %929, i64 8
  %938 = bitcast i8* %937 to double*
  store double 0.000000e+00, double* %938, align 1, !tbaa !2453
  %939 = bitcast %union.vec128_t* %XMM0 to i8*
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 56
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 5
  store i64 %943, i64* %PC
  %944 = bitcast i8* %939 to double*
  %945 = load double, double* %944, align 1
  %946 = inttoptr i64 %941 to double*
  %947 = load double, double* %946
  %948 = fcmp uno double %945, %947
  br i1 %948, label %949, label %961

; <label>:949:                                    ; preds = %block_40307e
  %950 = fadd double %945, %947
  %951 = bitcast double %950 to i64
  %952 = and i64 %951, 9221120237041090560
  %953 = icmp eq i64 %952, 9218868437227405312
  %954 = and i64 %951, 2251799813685247
  %955 = icmp ne i64 %954, 0
  %956 = and i1 %953, %955
  br i1 %956, label %957, label %967

; <label>:957:                                    ; preds = %949
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %959 = load i64, i64* %958, align 8, !tbaa !2428
  %960 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %959, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:961:                                    ; preds = %block_40307e
  %962 = fcmp ogt double %945, %947
  br i1 %962, label %967, label %963

; <label>:963:                                    ; preds = %961
  %964 = fcmp olt double %945, %947
  br i1 %964, label %967, label %965

; <label>:965:                                    ; preds = %963
  %966 = fcmp oeq double %945, %947
  br i1 %966, label %967, label %974

; <label>:967:                                    ; preds = %965, %963, %961, %949
  %968 = phi i8 [ 0, %961 ], [ 0, %963 ], [ 1, %965 ], [ 1, %949 ]
  %969 = phi i8 [ 0, %961 ], [ 0, %963 ], [ 0, %965 ], [ 1, %949 ]
  %970 = phi i8 [ 0, %961 ], [ 1, %963 ], [ 0, %965 ], [ 1, %949 ]
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %971, align 1, !tbaa !2451
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %969, i8* %972, align 1, !tbaa !2451
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %970, i8* %973, align 1, !tbaa !2451
  br label %974

; <label>:974:                                    ; preds = %967, %965
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %975, align 1, !tbaa !2451
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %976, align 1, !tbaa !2451
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %977, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %957, %974
  %978 = phi %struct.Memory* [ %960, %957 ], [ %MEMORY.1, %974 ]
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 90
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 6
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 6
  store i64 %984, i64* %PC
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %986 = load i8, i8* %985, align 1, !tbaa !2432
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %988 = load i8, i8* %987, align 1, !tbaa !2447
  %989 = or i8 %988, %986
  %990 = icmp ne i8 %989, 0
  %991 = zext i1 %990 to i8
  store i8 %991, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %993 = select i1 %990, i64 %980, i64 %982
  store i64 %993, i64* %992, align 8, !tbaa !2428
  %994 = load i8, i8* %BRANCH_TAKEN
  %995 = icmp eq i8 %994, 1
  %996 = load i64, i64* %PC
  br i1 %995, label %block_403158, label %block_403104

block_403198:                                     ; preds = %block_403104, %block_403191
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_403191 ], [ %1270, %block_403104 ]
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 4
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 3
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i32*
  %1002 = load i32, i32* %1001
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RSP
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 4
  store i64 %1006, i64* %PC
  %1007 = add i64 112, %1004
  store i64 %1007, i64* %RSP, align 8, !tbaa !2428
  %1008 = icmp ult i64 %1007, %1004
  %1009 = icmp ult i64 %1007, 112
  %1010 = or i1 %1008, %1009
  %1011 = zext i1 %1010 to i8
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1011, i8* %1012, align 1, !tbaa !2432
  %1013 = trunc i64 %1007 to i32
  %1014 = and i32 %1013, 255
  %1015 = call i32 @llvm.ctpop.i32(i32 %1014) #16
  %1016 = trunc i32 %1015 to i8
  %1017 = and i8 %1016, 1
  %1018 = xor i8 %1017, 1
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1018, i8* %1019, align 1, !tbaa !2446
  %1020 = xor i64 112, %1004
  %1021 = xor i64 %1020, %1007
  %1022 = lshr i64 %1021, 4
  %1023 = trunc i64 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1024, i8* %1025, align 1, !tbaa !2450
  %1026 = icmp eq i64 %1007, 0
  %1027 = zext i1 %1026 to i8
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1027, i8* %1028, align 1, !tbaa !2447
  %1029 = lshr i64 %1007, 63
  %1030 = trunc i64 %1029 to i8
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1030, i8* %1031, align 1, !tbaa !2448
  %1032 = lshr i64 %1004, 63
  %1033 = xor i64 %1029, %1032
  %1034 = add nuw nsw i64 %1033, %1029
  %1035 = icmp eq i64 %1034, 2
  %1036 = zext i1 %1035 to i8
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1036, i8* %1037, align 1, !tbaa !2449
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 1
  store i64 %1039, i64* %PC
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1041 = load i64, i64* %1040, align 8, !tbaa !2428
  %1042 = add i64 %1041, 8
  %1043 = inttoptr i64 %1041 to i64*
  %1044 = load i64, i64* %1043
  store i64 %1044, i64* %RBP, align 8, !tbaa !2428
  store i64 %1042, i64* %1040, align 8, !tbaa !2428
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 1
  store i64 %1046, i64* %PC
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1049 = load i64, i64* %1048, align 8, !tbaa !2428
  %1050 = inttoptr i64 %1049 to i64*
  %1051 = load i64, i64* %1050
  store i64 %1051, i64* %1047, align 8, !tbaa !2428
  %1052 = add i64 %1049, 8
  store i64 %1052, i64* %1048, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_403055:                                     ; preds = %block_40316b, %block_40304e
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_40304e ], [ %MEMORY.1, %block_40316b ]
  %1053 = load i64, i64* %RBP
  %1054 = sub i64 %1053, 40
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 3
  store i64 %1056, i64* %PC
  %1057 = inttoptr i64 %1054 to i32*
  %1058 = load i32, i32* %1057
  %1059 = zext i32 %1058 to i64
  store i64 %1059, i64* %RAX, align 8, !tbaa !2428
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 16
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i32*
  %1065 = load i32, i32* %1064
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RCX, align 8, !tbaa !2428
  %1067 = load i64, i64* %RCX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 3
  store i64 %1069, i64* %PC
  %1070 = trunc i64 %1067 to i32
  %1071 = add i32 1, %1070
  %1072 = zext i32 %1071 to i64
  store i64 %1072, i64* %RCX, align 8, !tbaa !2428
  %1073 = icmp ult i32 %1071, %1070
  %1074 = icmp ult i32 %1071, 1
  %1075 = or i1 %1073, %1074
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2432
  %1078 = and i32 %1071, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = xor i64 1, %1067
  %1085 = trunc i64 %1084 to i32
  %1086 = xor i32 %1085, %1071
  %1087 = lshr i32 %1086, 4
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1089, i8* %1090, align 1, !tbaa !2450
  %1091 = icmp eq i32 %1071, 0
  %1092 = zext i1 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1092, i8* %1093, align 1, !tbaa !2447
  %1094 = lshr i32 %1071, 31
  %1095 = trunc i32 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1095, i8* %1096, align 1, !tbaa !2448
  %1097 = lshr i32 %1070, 31
  %1098 = xor i32 %1094, %1097
  %1099 = add nuw nsw i32 %1098, %1094
  %1100 = icmp eq i32 %1099, 2
  %1101 = zext i1 %1100 to i8
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1101, i8* %1102, align 1, !tbaa !2449
  %1103 = load i32, i32* %EAX
  %1104 = zext i32 %1103 to i64
  %1105 = load i32, i32* %ECX
  %1106 = zext i32 %1105 to i64
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 2
  store i64 %1108, i64* %PC
  %1109 = sub i32 %1103, %1105
  %1110 = icmp ult i32 %1103, %1105
  %1111 = zext i1 %1110 to i8
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1111, i8* %1112, align 1, !tbaa !2432
  %1113 = and i32 %1109, 255
  %1114 = call i32 @llvm.ctpop.i32(i32 %1113) #16
  %1115 = trunc i32 %1114 to i8
  %1116 = and i8 %1115, 1
  %1117 = xor i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1117, i8* %1118, align 1, !tbaa !2446
  %1119 = xor i64 %1106, %1104
  %1120 = trunc i64 %1119 to i32
  %1121 = xor i32 %1120, %1109
  %1122 = lshr i32 %1121, 4
  %1123 = trunc i32 %1122 to i8
  %1124 = and i8 %1123, 1
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1124, i8* %1125, align 1, !tbaa !2450
  %1126 = icmp eq i32 %1109, 0
  %1127 = zext i1 %1126 to i8
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1127, i8* %1128, align 1, !tbaa !2447
  %1129 = lshr i32 %1109, 31
  %1130 = trunc i32 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1130, i8* %1131, align 1, !tbaa !2448
  %1132 = lshr i32 %1103, 31
  %1133 = lshr i32 %1105, 31
  %1134 = xor i32 %1133, %1132
  %1135 = xor i32 %1129, %1132
  %1136 = add nuw nsw i32 %1135, %1134
  %1137 = icmp eq i32 %1136, 2
  %1138 = zext i1 %1137 to i8
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1138, i8* %1139, align 1, !tbaa !2449
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 286
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 6
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 6
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1147 = load i8, i8* %1146, align 1, !tbaa !2448
  %1148 = icmp ne i8 %1147, 0
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1150 = load i8, i8* %1149, align 1, !tbaa !2449
  %1151 = icmp ne i8 %1150, 0
  %1152 = xor i1 %1148, %1151
  %1153 = xor i1 %1152, true
  %1154 = zext i1 %1153 to i8
  store i8 %1154, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1156 = select i1 %1152, i64 %1143, i64 %1141
  store i64 %1156, i64* %1155, align 8, !tbaa !2428
  %1157 = load i8, i8* %BRANCH_TAKEN
  %1158 = icmp eq i8 %1157, 1
  br i1 %1158, label %block_40317e, label %block_403066

block_403066:                                     ; preds = %block_403055
  %1159 = load i64, i64* %RBP
  %1160 = sub i64 %1159, 44
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 7
  store i64 %1162, i64* %PC
  %1163 = inttoptr i64 %1160 to i32*
  store i32 0, i32* %1163
  br label %block_40306d

block_403104:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %1164 = add i64 %996, 10
  store i64 %1164, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 178), i64* %RSI, align 8, !tbaa !2428
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 8
  store i64 %1166, i64* %PC
  %1167 = load i64, i64* @stderr
  store i64 %1167, i64* %RDI, align 8, !tbaa !2428
  %1168 = load i64, i64* %RBP
  %1169 = sub i64 %1168, 36
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 3
  store i64 %1171, i64* %PC
  %1172 = inttoptr i64 %1169 to i32*
  %1173 = load i32, i32* %1172
  %1174 = zext i32 %1173 to i64
  store i64 %1174, i64* %RDX, align 8, !tbaa !2428
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 40
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 3
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = zext i32 %1180 to i64
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = bitcast i32* %R8D to i64*
  %1183 = load i64, i64* %RBP
  %1184 = sub i64 %1183, 44
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 4
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to i32*
  %1188 = load i32, i32* %1187
  %1189 = zext i32 %1188 to i64
  store i64 %1189, i64* %1182, align 8, !tbaa !2428
  %1190 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1191 = load i64, i64* %RBP
  %1192 = sub i64 %1191, 64
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 5
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1192 to double*
  %1196 = load double, double* %1195
  %1197 = bitcast i8* %1190 to double*
  store double %1196, double* %1197, align 1, !tbaa !2453
  %1198 = getelementptr inbounds i8, i8* %1190, i64 8
  %1199 = bitcast i8* %1198 to double*
  store double 0.000000e+00, double* %1199, align 1, !tbaa !2453
  %1200 = bitcast i32* %R9D to i64*
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 36
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1202 to i32*
  %1206 = load i32, i32* %1205
  %1207 = zext i32 %1206 to i64
  store i64 %1207, i64* %1200, align 8, !tbaa !2428
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 40
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i32*
  %1213 = load i32, i32* %1212
  %1214 = zext i32 %1213 to i64
  store i64 %1214, i64* %RAX, align 8, !tbaa !2428
  %1215 = bitcast i32* %R10D to i64*
  %1216 = load i64, i64* %RBP
  %1217 = sub i64 %1216, 44
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 4
  store i64 %1219, i64* %PC
  %1220 = inttoptr i64 %1217 to i32*
  %1221 = load i32, i32* %1220
  %1222 = zext i32 %1221 to i64
  store i64 %1222, i64* %1215, align 8, !tbaa !2428
  %1223 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 72
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 5
  store i64 %1227, i64* %PC
  %1228 = inttoptr i64 %1225 to double*
  %1229 = load double, double* %1228
  %1230 = bitcast i8* %1223 to double*
  store double %1229, double* %1230, align 1, !tbaa !2453
  %1231 = getelementptr inbounds i8, i8* %1223, i64 8
  %1232 = bitcast i8* %1231 to double*
  store double 0.000000e+00, double* %1232, align 1, !tbaa !2453
  %1233 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 56
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 5
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to double*
  %1239 = load double, double* %1238
  %1240 = bitcast i8* %1233 to double*
  store double %1239, double* %1240, align 1, !tbaa !2453
  %1241 = getelementptr inbounds i8, i8* %1233, i64 8
  %1242 = bitcast i8* %1241 to double*
  store double 0.000000e+00, double* %1242, align 1, !tbaa !2453
  %1243 = load i64, i64* %RSP
  %1244 = load i32, i32* %EAX
  %1245 = zext i32 %1244 to i64
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 3
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1243 to i32*
  store i32 %1244, i32* %1248
  %1249 = load i64, i64* %RSP
  %1250 = add i64 %1249, 8
  %1251 = load i32, i32* %R10D
  %1252 = zext i32 %1251 to i64
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 5
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1250 to i32*
  store i32 %1251, i32* %1255
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 2
  store i64 %1257, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %1258 = load i64, i64* %PC
  %1259 = sub i64 %1258, 11156
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 5
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 5
  store i64 %1263, i64* %PC
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1265 = load i64, i64* %1264, align 8, !tbaa !2428
  %1266 = add i64 %1265, -8
  %1267 = inttoptr i64 %1266 to i64*
  store i64 %1261, i64* %1267
  store i64 %1266, i64* %1264, align 8, !tbaa !2428
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1259, i64* %1268, align 8, !tbaa !2428
  %1269 = load i64, i64* %PC
  %1270 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %1269, %struct.Memory* %978)
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 4
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 7
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i32*
  store i32 0, i32* %1275
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 84
  %1278 = load i32, i32* %EAX
  %1279 = zext i32 %1278 to i64
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1277 to i32*
  store i32 %1278, i32* %1282
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 69
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 5
  store i64 %1286, i64* %PC
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1284, i64* %1287, align 8, !tbaa !2428
  br label %block_403198

block_403158:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %1288 = add i64 %996, 5
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 5
  store i64 %1290, i64* %PC
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1288, i64* %1291, align 8, !tbaa !2428
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 44
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 3
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1293 to i32*
  %1297 = load i32, i32* %1296
  %1298 = zext i32 %1297 to i64
  store i64 %1298, i64* %RAX, align 8, !tbaa !2428
  %1299 = load i64, i64* %RAX
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 3
  store i64 %1301, i64* %PC
  %1302 = trunc i64 %1299 to i32
  %1303 = add i32 1, %1302
  %1304 = zext i32 %1303 to i64
  store i64 %1304, i64* %RAX, align 8, !tbaa !2428
  %1305 = icmp ult i32 %1303, %1302
  %1306 = icmp ult i32 %1303, 1
  %1307 = or i1 %1305, %1306
  %1308 = zext i1 %1307 to i8
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1308, i8* %1309, align 1, !tbaa !2432
  %1310 = and i32 %1303, 255
  %1311 = call i32 @llvm.ctpop.i32(i32 %1310) #16
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1314, i8* %1315, align 1, !tbaa !2446
  %1316 = xor i64 1, %1299
  %1317 = trunc i64 %1316 to i32
  %1318 = xor i32 %1317, %1303
  %1319 = lshr i32 %1318, 4
  %1320 = trunc i32 %1319 to i8
  %1321 = and i8 %1320, 1
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1321, i8* %1322, align 1, !tbaa !2450
  %1323 = icmp eq i32 %1303, 0
  %1324 = zext i1 %1323 to i8
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1324, i8* %1325, align 1, !tbaa !2447
  %1326 = lshr i32 %1303, 31
  %1327 = trunc i32 %1326 to i8
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1327, i8* %1328, align 1, !tbaa !2448
  %1329 = lshr i32 %1302, 31
  %1330 = xor i32 %1326, %1329
  %1331 = add nuw nsw i32 %1330, %1326
  %1332 = icmp eq i32 %1331, 2
  %1333 = zext i1 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1333, i8* %1334, align 1, !tbaa !2449
  %1335 = load i64, i64* %RBP
  %1336 = sub i64 %1335, 44
  %1337 = load i32, i32* %EAX
  %1338 = zext i32 %1337 to i64
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1336 to i32*
  store i32 %1337, i32* %1341
  %1342 = load i64, i64* %PC
  %1343 = sub i64 %1342, 249
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 5
  store i64 %1345, i64* %PC
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1343, i64* %1346, align 8, !tbaa !2428
  br label %block_40306d
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fc0_init_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400fc0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 21
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R10 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 23
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R11 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R12 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 27
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R13 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 29
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R14 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 31
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R15 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %65 to %"class.std::bitset"*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %67 to %"class.std::bitset"*
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %69 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %68, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %69 to %"class.std::bitset"*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %71 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %70, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %71 to %union.vec128_t*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %73 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %72, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %73 to %union.vec128_t*
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %75 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %74, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %75 to %union.vec128_t*
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %77 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %76, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %77 to %union.vec128_t*
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %79 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %78, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %79 to %union.vec128_t*
  %80 = load i64, i64* %RBP
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %80, i64* %86
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %87 = load i64, i64* %RSP
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  %90 = load i64, i64* %R15
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %90, i64* %96
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %97 = load i64, i64* %R14
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 2
  store i64 %99, i64* %PC
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %101 = load i64, i64* %100, align 8, !tbaa !2428
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %97, i64* %103
  store i64 %102, i64* %100, align 8, !tbaa !2428
  %104 = load i64, i64* %R13
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 2
  store i64 %106, i64* %PC
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %108 = load i64, i64* %107, align 8, !tbaa !2428
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %104, i64* %110
  store i64 %109, i64* %107, align 8, !tbaa !2428
  %111 = load i64, i64* %R12
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 2
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %111, i64* %117
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %118 = load i64, i64* %RBX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 1
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %122 = load i64, i64* %121, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %118, i64* %124
  store i64 %123, i64* %121, align 8, !tbaa !2428
  %125 = load i64, i64* %RSP
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = sub i64 %125, 24
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ult i64 %125, 24
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %130, i8* %131, align 1, !tbaa !2432
  %132 = trunc i64 %128 to i32
  %133 = and i32 %132, 255
  %134 = call i32 @llvm.ctpop.i32(i32 %133) #16
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %137, i8* %138, align 1, !tbaa !2446
  %139 = xor i64 24, %125
  %140 = xor i64 %139, %128
  %141 = lshr i64 %140, 4
  %142 = trunc i64 %141 to i8
  %143 = and i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %143, i8* %144, align 1, !tbaa !2450
  %145 = icmp eq i64 %128, 0
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %146, i8* %147, align 1, !tbaa !2447
  %148 = lshr i64 %128, 63
  %149 = trunc i64 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = lshr i64 %125, 63
  %152 = xor i64 %148, %151
  %153 = add nuw nsw i64 %152, %151
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = load i64, i64* %RBP
  %158 = add i64 %157, 88
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = add i64 %163, 80
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %R10, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP
  %170 = add i64 %169, 72
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %R11, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = add i64 %175, 64
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %RBX, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = add i64 %181, 56
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %R14, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = add i64 %187, 48
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %R15, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP
  %194 = add i64 %193, 40
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %R12, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP
  %200 = add i64 %199, 32
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %R13, align 8, !tbaa !2428
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 184
  %207 = load i64, i64* %RAX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 7
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210
  %211 = load i64, i64* %RBP
  %212 = add i64 %211, 24
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 192
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %RBP
  %224 = add i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 8
  store i64 %231, i64* %PC
  %232 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 8) to double*)
  %233 = bitcast i8* %229 to double*
  store double %232, double* %233, align 1, !tbaa !2453
  %234 = getelementptr inbounds i8, i8* %229, i64 8
  %235 = bitcast i8* %234 to double*
  store double 0.000000e+00, double* %235, align 1, !tbaa !2453
  %236 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 8
  store i64 %238, i64* %PC
  %239 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 16) to double*)
  %240 = bitcast i8* %236 to double*
  store double %239, double* %240, align 1, !tbaa !2453
  %241 = getelementptr inbounds i8, i8* %236, i64 8
  %242 = bitcast i8* %241 to double*
  store double 0.000000e+00, double* %242, align 1, !tbaa !2453
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 44
  %245 = load i32, i32* %EDI
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %244 to i32*
  store i32 %245, i32* %249
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 48
  %252 = load i32, i32* %ESI
  %253 = zext i32 %252 to i64
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 3
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %251 to i32*
  store i32 %252, i32* %256
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 52
  %259 = load i32, i32* %EDX
  %260 = zext i32 %259 to i64
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %258 to i32*
  store i32 %259, i32* %263
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 64
  %266 = load i64, i64* %RCX
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %265 to i64*
  store i64 %266, i64* %269
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 72
  %272 = load i64, i64* %R8
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %271 to i64*
  store i64 %272, i64* %275
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 80
  %278 = load i64, i64* %R9
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %277 to i64*
  store i64 %278, i64* %281
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 88
  %284 = load i64, i64* %RAX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %283 to i64*
  store i64 %284, i64* %287
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 192
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 7
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 96
  %296 = load i64, i64* %RAX
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %295 to i64*
  store i64 %296, i64* %299
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 104
  %302 = load i64, i64* %R13
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %301 to i64*
  store i64 %302, i64* %305
  %306 = load i64, i64* %RBP
  %307 = sub i64 %306, 112
  %308 = load i64, i64* %R12
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 4
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %307 to i64*
  store i64 %308, i64* %311
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 120
  %314 = load i64, i64* %R15
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 128
  %320 = load i64, i64* %R14
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RBP
  %325 = sub i64 %324, 136
  %326 = load i64, i64* %RBX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 7
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %325 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 144
  %332 = load i64, i64* %R11
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 7
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %331 to i64*
  store i64 %332, i64* %335
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 152
  %338 = load i64, i64* %R10
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 7
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %337 to i64*
  store i64 %338, i64* %341
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 184
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 7
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %RCX, align 8, !tbaa !2428
  %348 = load i64, i64* %RBP
  %349 = sub i64 %348, 160
  %350 = load i64, i64* %RCX
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 7
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %349 to i64*
  store i64 %350, i64* %353
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 64
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %R8, align 8, !tbaa !2428
  %360 = load i64, i64* %R8
  %361 = bitcast %union.vec128_t* %XMM1 to i8*
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  store i64 %363, i64* %PC
  %364 = bitcast i8* %361 to double*
  %365 = load double, double* %364, align 1
  %366 = inttoptr i64 %360 to double*
  store double %365, double* %366
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 72
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %R8, align 8, !tbaa !2428
  %373 = load i64, i64* %R8
  %374 = bitcast %union.vec128_t* %XMM0 to i8*
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC
  %377 = bitcast i8* %374 to double*
  %378 = load double, double* %377, align 1
  %379 = inttoptr i64 %373 to double*
  store double %378, double* %379
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 164
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 10
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i32*
  store i32 0, i32* %384
  br label %block_40108a

block_4012fb:                                     ; preds = %block_401253, %block_40130a
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_401253 ], [ %MEMORY.0, %block_40130a ]
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 172
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 6
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  %390 = load i32, i32* %389
  %391 = zext i32 %390 to i64
  store i64 %391, i64* %RAX, align 8, !tbaa !2428
  %392 = load i32, i32* %EAX
  %393 = zext i32 %392 to i64
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 48
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 3
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  %399 = load i32, i32* %398
  %400 = sub i32 %392, %399
  %401 = icmp ult i32 %392, %399
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %402, i8* %403, align 1, !tbaa !2432
  %404 = and i32 %400, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #16
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2446
  %410 = xor i32 %399, %392
  %411 = xor i32 %410, %400
  %412 = lshr i32 %411, 4
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = icmp eq i32 %400, 0
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %417, i8* %418, align 1, !tbaa !2447
  %419 = lshr i32 %400, 31
  %420 = trunc i32 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %420, i8* %421, align 1, !tbaa !2448
  %422 = lshr i32 %392, 31
  %423 = lshr i32 %399, 31
  %424 = xor i32 %423, %422
  %425 = xor i32 %419, %422
  %426 = add nuw nsw i32 %425, %424
  %427 = icmp eq i32 %426, 2
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %428, i8* %429, align 1, !tbaa !2449
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 350
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 6
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 6
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %437 = load i8, i8* %436, align 1, !tbaa !2447
  %438 = icmp eq i8 %437, 0
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %440 = load i8, i8* %439, align 1, !tbaa !2448
  %441 = icmp ne i8 %440, 0
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %443 = load i8, i8* %442, align 1, !tbaa !2449
  %444 = icmp ne i8 %443, 0
  %445 = xor i1 %441, %444
  %446 = xor i1 %445, true
  %447 = and i1 %438, %446
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %450 = select i1 %447, i64 %431, i64 %433
  store i64 %450, i64* %449, align 8, !tbaa !2428
  %451 = load i8, i8* %BRANCH_TAKEN
  %452 = icmp eq i8 %451, 1
  br i1 %452, label %block_401462, label %block_40130a

block_401194:                                     ; preds = %block_401111
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 164
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 10
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  store i32 0, i32* %457
  br label %block_40119e

block_401244:                                     ; preds = %block_40123a, %block_401462
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_40123a ], [ %MEMORY.0, %block_401462 ]
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 168
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 6
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i32*
  %463 = load i32, i32* %462
  %464 = zext i32 %463 to i64
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = load i32, i32* %EAX
  %466 = zext i32 %465 to i64
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 52
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = sub i32 %465, %472
  %474 = icmp ult i32 %465, %472
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %475, i8* %476, align 1, !tbaa !2432
  %477 = and i32 %473, 255
  %478 = call i32 @llvm.ctpop.i32(i32 %477) #16
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  %481 = xor i8 %480, 1
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %481, i8* %482, align 1, !tbaa !2446
  %483 = xor i32 %472, %465
  %484 = xor i32 %483, %473
  %485 = lshr i32 %484, 4
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = icmp eq i32 %473, 0
  %490 = zext i1 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %490, i8* %491, align 1, !tbaa !2447
  %492 = lshr i32 %473, 31
  %493 = trunc i32 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %493, i8* %494, align 1, !tbaa !2448
  %495 = lshr i32 %465, 31
  %496 = lshr i32 %472, 31
  %497 = xor i32 %496, %495
  %498 = xor i32 %492, %495
  %499 = add nuw nsw i32 %498, %497
  %500 = icmp eq i32 %499, 2
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %501, i8* %502, align 1, !tbaa !2449
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 558
  %505 = load i64, i64* %PC
  %506 = add i64 %505, 6
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 6
  store i64 %508, i64* %PC
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %510 = load i8, i8* %509, align 1, !tbaa !2447
  %511 = icmp eq i8 %510, 0
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %513 = load i8, i8* %512, align 1, !tbaa !2448
  %514 = icmp ne i8 %513, 0
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %516 = load i8, i8* %515, align 1, !tbaa !2449
  %517 = icmp ne i8 %516, 0
  %518 = xor i1 %514, %517
  %519 = xor i1 %518, true
  %520 = and i1 %511, %519
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %523 = select i1 %520, i64 %504, i64 %506
  store i64 %523, i64* %522, align 8, !tbaa !2428
  %524 = load i8, i8* %BRANCH_TAKEN
  %525 = icmp eq i8 %524, 1
  br i1 %525, label %block_40147b, label %block_401253

block_40130a:                                     ; preds = %block_4012fb
  %526 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 8
  store i64 %528, i64* %PC
  %529 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 40) to double*)
  %530 = bitcast i8* %526 to double*
  store double %529, double* %530, align 1, !tbaa !2453
  %531 = getelementptr inbounds i8, i8* %526, i64 8
  %532 = bitcast i8* %531 to double*
  store double 0.000000e+00, double* %532, align 1, !tbaa !2453
  %533 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 8
  store i64 %535, i64* %PC
  %536 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 48) to double*)
  %537 = bitcast i8* %533 to double*
  store double %536, double* %537, align 1, !tbaa !2453
  %538 = getelementptr inbounds i8, i8* %533, i64 8
  %539 = bitcast i8* %538 to double*
  store double 0.000000e+00, double* %539, align 1, !tbaa !2453
  %540 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 8
  store i64 %542, i64* %PC
  %543 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 56) to double*)
  %544 = bitcast i8* %540 to double*
  store double %543, double* %544, align 1, !tbaa !2453
  %545 = getelementptr inbounds i8, i8* %540, i64 8
  %546 = bitcast i8* %545 to double*
  store double 0.000000e+00, double* %546, align 1, !tbaa !2453
  %547 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 164
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 8
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = sitofp i32 %553 to double
  %555 = bitcast i8* %547 to double*
  store double %554, double* %555, align 1, !tbaa !2453
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 168
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 6
  store i64 %559, i64* %PC
  %560 = inttoptr i64 %557 to i32*
  %561 = load i32, i32* %560
  %562 = zext i32 %561 to i64
  store i64 %562, i64* %RAX, align 8, !tbaa !2428
  %563 = load i64, i64* %RAX
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 3
  store i64 %565, i64* %PC
  %566 = trunc i64 %563 to i32
  %567 = add i32 3, %566
  %568 = zext i32 %567 to i64
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = icmp ult i32 %567, %566
  %570 = icmp ult i32 %567, 3
  %571 = or i1 %569, %570
  %572 = zext i1 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %572, i8* %573, align 1, !tbaa !2432
  %574 = and i32 %567, 255
  %575 = call i32 @llvm.ctpop.i32(i32 %574) #16
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %578, i8* %579, align 1, !tbaa !2446
  %580 = xor i64 3, %563
  %581 = trunc i64 %580 to i32
  %582 = xor i32 %581, %567
  %583 = lshr i32 %582, 4
  %584 = trunc i32 %583 to i8
  %585 = and i8 %584, 1
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %585, i8* %586, align 1, !tbaa !2450
  %587 = icmp eq i32 %567, 0
  %588 = zext i1 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %588, i8* %589, align 1, !tbaa !2447
  %590 = lshr i32 %567, 31
  %591 = trunc i32 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %591, i8* %592, align 1, !tbaa !2448
  %593 = lshr i32 %566, 31
  %594 = xor i32 %590, %593
  %595 = add nuw nsw i32 %594, %590
  %596 = icmp eq i32 %595, 2
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %597, i8* %598, align 1, !tbaa !2449
  %599 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %600 = load i32, i32* %EAX
  %601 = zext i32 %600 to i64
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 4
  store i64 %603, i64* %PC
  %604 = sitofp i32 %600 to double
  %605 = bitcast i8* %599 to double*
  store double %604, double* %605, align 1, !tbaa !2453
  %606 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %607 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %608 = bitcast %union.vec128_t* %XMM4 to i8*
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = bitcast i8* %607 to double*
  %612 = load double, double* %611, align 1
  %613 = getelementptr inbounds i8, i8* %607, i64 8
  %614 = bitcast i8* %613 to i64*
  %615 = load i64, i64* %614, align 1
  %616 = bitcast i8* %608 to double*
  %617 = load double, double* %616, align 1
  %618 = fmul double %612, %617
  %619 = bitcast i8* %606 to double*
  store double %618, double* %619, align 1, !tbaa !2453
  %620 = getelementptr inbounds i8, i8* %606, i64 8
  %621 = bitcast i8* %620 to i64*
  store i64 %615, i64* %621, align 1, !tbaa !2453
  %622 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %623 = load i64, i64* %RBP
  %624 = sub i64 %623, 172
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 8
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %624 to i32*
  %628 = load i32, i32* %627
  %629 = sitofp i32 %628 to double
  %630 = bitcast i8* %622 to double*
  store double %629, double* %630, align 1, !tbaa !2453
  %631 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %632 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %633 = bitcast %union.vec128_t* %XMM4 to i8*
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = bitcast i8* %632 to double*
  %637 = load double, double* %636, align 1
  %638 = getelementptr inbounds i8, i8* %632, i64 8
  %639 = bitcast i8* %638 to i64*
  %640 = load i64, i64* %639, align 1
  %641 = bitcast i8* %633 to double*
  %642 = load double, double* %641, align 1
  %643 = fadd double %637, %642
  %644 = bitcast i8* %631 to double*
  store double %643, double* %644, align 1, !tbaa !2453
  %645 = getelementptr inbounds i8, i8* %631, i64 8
  %646 = bitcast i8* %645 to i64*
  store i64 %640, i64* %646, align 1, !tbaa !2453
  %647 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %648 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %649 = bitcast %union.vec128_t* %XMM2 to i8*
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = bitcast i8* %648 to double*
  %653 = load double, double* %652, align 1
  %654 = getelementptr inbounds i8, i8* %648, i64 8
  %655 = bitcast i8* %654 to i64*
  %656 = load i64, i64* %655, align 1
  %657 = bitcast i8* %649 to double*
  %658 = load double, double* %657, align 1
  %659 = fadd double %653, %658
  %660 = bitcast i8* %647 to double*
  store double %659, double* %660, align 1, !tbaa !2453
  %661 = getelementptr inbounds i8, i8* %647, i64 8
  %662 = bitcast i8* %661 to i64*
  store i64 %656, i64* %662, align 1, !tbaa !2453
  %663 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 48
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 5
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to i32*
  %669 = load i32, i32* %668
  %670 = sitofp i32 %669 to double
  %671 = bitcast i8* %663 to double*
  store double %670, double* %671, align 1, !tbaa !2453
  %672 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %673 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %674 = bitcast %union.vec128_t* %XMM2 to i8*
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 4
  store i64 %676, i64* %PC
  %677 = bitcast i8* %673 to double*
  %678 = load double, double* %677, align 1
  %679 = getelementptr inbounds i8, i8* %673, i64 8
  %680 = bitcast i8* %679 to i64*
  %681 = load i64, i64* %680, align 1
  %682 = bitcast i8* %674 to double*
  %683 = load double, double* %682, align 1
  %684 = fdiv double %678, %683
  %685 = bitcast i8* %672 to double*
  store double %684, double* %685, align 1, !tbaa !2453
  %686 = getelementptr inbounds i8, i8* %672, i64 8
  %687 = bitcast i8* %686 to i64*
  store i64 %681, i64* %687, align 1, !tbaa !2453
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 96
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 4
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i64*
  %693 = load i64, i64* %692
  store i64 %693, i64* %RCX, align 8, !tbaa !2428
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 164
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 7
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = sext i32 %699 to i64
  store i64 %700, i64* %RDX, align 8, !tbaa !2428
  %701 = load i64, i64* %RDX
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 7
  store i64 %703, i64* %PC
  %704 = sext i64 %701 to i128
  %705 = and i128 %704, -18446744073709551616
  %706 = zext i64 %701 to i128
  %707 = or i128 %705, %706
  %708 = mul nsw i128 33800, %707
  %709 = trunc i128 %708 to i64
  store i64 %709, i64* %RDX, align 8, !tbaa !2428
  %710 = sext i64 %709 to i128
  %711 = icmp ne i128 %710, %708
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = trunc i128 %708 to i32
  %715 = and i32 %714, 255
  %716 = call i32 @llvm.ctpop.i32(i32 %715) #16
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %719, i8* %720, align 1, !tbaa !2446
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %721, align 1, !tbaa !2450
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %722, align 1, !tbaa !2447
  %723 = lshr i64 %709, 63
  %724 = trunc i64 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %724, i8* %725, align 1, !tbaa !2448
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %712, i8* %726, align 1, !tbaa !2449
  %727 = load i64, i64* %RCX
  %728 = load i64, i64* %RDX
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 3
  store i64 %730, i64* %PC
  %731 = add i64 %728, %727
  store i64 %731, i64* %RCX, align 8, !tbaa !2428
  %732 = icmp ult i64 %731, %727
  %733 = icmp ult i64 %731, %728
  %734 = or i1 %732, %733
  %735 = zext i1 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %735, i8* %736, align 1, !tbaa !2432
  %737 = trunc i64 %731 to i32
  %738 = and i32 %737, 255
  %739 = call i32 @llvm.ctpop.i32(i32 %738) #16
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %742, i8* %743, align 1, !tbaa !2446
  %744 = xor i64 %728, %727
  %745 = xor i64 %744, %731
  %746 = lshr i64 %745, 4
  %747 = trunc i64 %746 to i8
  %748 = and i8 %747, 1
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %748, i8* %749, align 1, !tbaa !2450
  %750 = icmp eq i64 %731, 0
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %751, i8* %752, align 1, !tbaa !2447
  %753 = lshr i64 %731, 63
  %754 = trunc i64 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %754, i8* %755, align 1, !tbaa !2448
  %756 = lshr i64 %727, 63
  %757 = lshr i64 %728, 63
  %758 = xor i64 %753, %756
  %759 = xor i64 %753, %757
  %760 = add nuw nsw i64 %758, %759
  %761 = icmp eq i64 %760, 2
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %762, i8* %763, align 1, !tbaa !2449
  %764 = load i64, i64* %RBP
  %765 = sub i64 %764, 168
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 7
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768
  %770 = sext i32 %769 to i64
  store i64 %770, i64* %RDX, align 8, !tbaa !2428
  %771 = load i64, i64* %RDX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 7
  store i64 %773, i64* %PC
  %774 = sext i64 %771 to i128
  %775 = and i128 %774, -18446744073709551616
  %776 = zext i64 %771 to i128
  %777 = or i128 %775, %776
  %778 = mul nsw i128 520, %777
  %779 = trunc i128 %778 to i64
  store i64 %779, i64* %RDX, align 8, !tbaa !2428
  %780 = sext i64 %779 to i128
  %781 = icmp ne i128 %780, %778
  %782 = zext i1 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %782, i8* %783, align 1, !tbaa !2432
  %784 = trunc i128 %778 to i32
  %785 = and i32 %784, 255
  %786 = call i32 @llvm.ctpop.i32(i32 %785) #16
  %787 = trunc i32 %786 to i8
  %788 = and i8 %787, 1
  %789 = xor i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %789, i8* %790, align 1, !tbaa !2446
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %791, align 1, !tbaa !2450
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %792, align 1, !tbaa !2447
  %793 = lshr i64 %779, 63
  %794 = trunc i64 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %794, i8* %795, align 1, !tbaa !2448
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %782, i8* %796, align 1, !tbaa !2449
  %797 = load i64, i64* %RCX
  %798 = load i64, i64* %RDX
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 3
  store i64 %800, i64* %PC
  %801 = add i64 %798, %797
  store i64 %801, i64* %RCX, align 8, !tbaa !2428
  %802 = icmp ult i64 %801, %797
  %803 = icmp ult i64 %801, %798
  %804 = or i1 %802, %803
  %805 = zext i1 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %805, i8* %806, align 1, !tbaa !2432
  %807 = trunc i64 %801 to i32
  %808 = and i32 %807, 255
  %809 = call i32 @llvm.ctpop.i32(i32 %808) #16
  %810 = trunc i32 %809 to i8
  %811 = and i8 %810, 1
  %812 = xor i8 %811, 1
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %812, i8* %813, align 1, !tbaa !2446
  %814 = xor i64 %798, %797
  %815 = xor i64 %814, %801
  %816 = lshr i64 %815, 4
  %817 = trunc i64 %816 to i8
  %818 = and i8 %817, 1
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %818, i8* %819, align 1, !tbaa !2450
  %820 = icmp eq i64 %801, 0
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %821, i8* %822, align 1, !tbaa !2447
  %823 = lshr i64 %801, 63
  %824 = trunc i64 %823 to i8
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %824, i8* %825, align 1, !tbaa !2448
  %826 = lshr i64 %797, 63
  %827 = lshr i64 %798, 63
  %828 = xor i64 %823, %826
  %829 = xor i64 %823, %827
  %830 = add nuw nsw i64 %828, %829
  %831 = icmp eq i64 %830, 2
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %832, i8* %833, align 1, !tbaa !2449
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 172
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 7
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i32*
  %839 = load i32, i32* %838
  %840 = sext i32 %839 to i64
  store i64 %840, i64* %RDX, align 8, !tbaa !2428
  %841 = load i64, i64* %RCX
  %842 = load i64, i64* %RDX
  %843 = mul i64 %842, 8
  %844 = add i64 %843, %841
  %845 = bitcast %union.vec128_t* %XMM3 to i8*
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = bitcast i8* %845 to double*
  %849 = load double, double* %848, align 1
  %850 = inttoptr i64 %844 to double*
  store double %849, double* %850
  %851 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %852 = load i64, i64* %RBP
  %853 = sub i64 %852, 164
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 8
  store i64 %855, i64* %PC
  %856 = inttoptr i64 %853 to i32*
  %857 = load i32, i32* %856
  %858 = sitofp i32 %857 to double
  %859 = bitcast i8* %851 to double*
  store double %858, double* %859, align 1, !tbaa !2453
  %860 = load i64, i64* %RBP
  %861 = sub i64 %860, 168
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 6
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i32*
  %865 = load i32, i32* %864
  %866 = zext i32 %865 to i64
  store i64 %866, i64* %RAX, align 8, !tbaa !2428
  %867 = load i64, i64* %RAX
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 3
  store i64 %869, i64* %PC
  %870 = trunc i64 %867 to i32
  %871 = add i32 4, %870
  %872 = zext i32 %871 to i64
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = icmp ult i32 %871, %870
  %874 = icmp ult i32 %871, 4
  %875 = or i1 %873, %874
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %876, i8* %877, align 1, !tbaa !2432
  %878 = and i32 %871, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2446
  %884 = xor i64 4, %867
  %885 = trunc i64 %884 to i32
  %886 = xor i32 %885, %871
  %887 = lshr i32 %886, 4
  %888 = trunc i32 %887 to i8
  %889 = and i8 %888, 1
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %889, i8* %890, align 1, !tbaa !2450
  %891 = icmp eq i32 %871, 0
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %892, i8* %893, align 1, !tbaa !2447
  %894 = lshr i32 %871, 31
  %895 = trunc i32 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %895, i8* %896, align 1, !tbaa !2448
  %897 = lshr i32 %870, 31
  %898 = xor i32 %894, %897
  %899 = add nuw nsw i32 %898, %894
  %900 = icmp eq i32 %899, 2
  %901 = zext i1 %900 to i8
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %901, i8* %902, align 1, !tbaa !2449
  %903 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %904 = load i32, i32* %EAX
  %905 = zext i32 %904 to i64
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC
  %908 = sitofp i32 %904 to double
  %909 = bitcast i8* %903 to double*
  store double %908, double* %909, align 1, !tbaa !2453
  %910 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %911 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %912 = bitcast %union.vec128_t* %XMM3 to i8*
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = bitcast i8* %911 to double*
  %916 = load double, double* %915, align 1
  %917 = getelementptr inbounds i8, i8* %911, i64 8
  %918 = bitcast i8* %917 to i64*
  %919 = load i64, i64* %918, align 1
  %920 = bitcast i8* %912 to double*
  %921 = load double, double* %920, align 1
  %922 = fmul double %916, %921
  %923 = bitcast i8* %910 to double*
  store double %922, double* %923, align 1, !tbaa !2453
  %924 = getelementptr inbounds i8, i8* %910, i64 8
  %925 = bitcast i8* %924 to i64*
  store i64 %919, i64* %925, align 1, !tbaa !2453
  %926 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %927 = load i64, i64* %RBP
  %928 = sub i64 %927, 172
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 8
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %928 to i32*
  %932 = load i32, i32* %931
  %933 = sitofp i32 %932 to double
  %934 = bitcast i8* %926 to double*
  store double %933, double* %934, align 1, !tbaa !2453
  %935 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %936 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %937 = bitcast %union.vec128_t* %XMM3 to i8*
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = bitcast i8* %936 to double*
  %941 = load double, double* %940, align 1
  %942 = getelementptr inbounds i8, i8* %936, i64 8
  %943 = bitcast i8* %942 to i64*
  %944 = load i64, i64* %943, align 1
  %945 = bitcast i8* %937 to double*
  %946 = load double, double* %945, align 1
  %947 = fadd double %941, %946
  %948 = bitcast i8* %935 to double*
  store double %947, double* %948, align 1, !tbaa !2453
  %949 = getelementptr inbounds i8, i8* %935, i64 8
  %950 = bitcast i8* %949 to i64*
  store i64 %944, i64* %950, align 1, !tbaa !2453
  %951 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %952 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %953 = bitcast %union.vec128_t* %XMM1 to i8*
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = bitcast i8* %952 to double*
  %957 = load double, double* %956, align 1
  %958 = getelementptr inbounds i8, i8* %952, i64 8
  %959 = bitcast i8* %958 to i64*
  %960 = load i64, i64* %959, align 1
  %961 = bitcast i8* %953 to double*
  %962 = load double, double* %961, align 1
  %963 = fadd double %957, %962
  %964 = bitcast i8* %951 to double*
  store double %963, double* %964, align 1, !tbaa !2453
  %965 = getelementptr inbounds i8, i8* %951, i64 8
  %966 = bitcast i8* %965 to i64*
  store i64 %960, i64* %966, align 1, !tbaa !2453
  %967 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 52
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 5
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i32*
  %973 = load i32, i32* %972
  %974 = sitofp i32 %973 to double
  %975 = bitcast i8* %967 to double*
  store double %974, double* %975, align 1, !tbaa !2453
  %976 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %977 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %978 = bitcast %union.vec128_t* %XMM1 to i8*
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 4
  store i64 %980, i64* %PC
  %981 = bitcast i8* %977 to double*
  %982 = load double, double* %981, align 1
  %983 = getelementptr inbounds i8, i8* %977, i64 8
  %984 = bitcast i8* %983 to i64*
  %985 = load i64, i64* %984, align 1
  %986 = bitcast i8* %978 to double*
  %987 = load double, double* %986, align 1
  %988 = fdiv double %982, %987
  %989 = bitcast i8* %976 to double*
  store double %988, double* %989, align 1, !tbaa !2453
  %990 = getelementptr inbounds i8, i8* %976, i64 8
  %991 = bitcast i8* %990 to i64*
  store i64 %985, i64* %991, align 1, !tbaa !2453
  %992 = load i64, i64* %RBP
  %993 = sub i64 %992, 104
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 4
  store i64 %995, i64* %PC
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996
  store i64 %997, i64* %RCX, align 8, !tbaa !2428
  %998 = load i64, i64* %RBP
  %999 = sub i64 %998, 164
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 7
  store i64 %1001, i64* %PC
  %1002 = inttoptr i64 %999 to i32*
  %1003 = load i32, i32* %1002
  %1004 = sext i32 %1003 to i64
  store i64 %1004, i64* %RDX, align 8, !tbaa !2428
  %1005 = load i64, i64* %RDX
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 7
  store i64 %1007, i64* %PC
  %1008 = sext i64 %1005 to i128
  %1009 = and i128 %1008, -18446744073709551616
  %1010 = zext i64 %1005 to i128
  %1011 = or i128 %1009, %1010
  %1012 = mul nsw i128 33800, %1011
  %1013 = trunc i128 %1012 to i64
  store i64 %1013, i64* %RDX, align 8, !tbaa !2428
  %1014 = sext i64 %1013 to i128
  %1015 = icmp ne i128 %1014, %1012
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1016, i8* %1017, align 1, !tbaa !2432
  %1018 = trunc i128 %1012 to i32
  %1019 = and i32 %1018, 255
  %1020 = call i32 @llvm.ctpop.i32(i32 %1019) #16
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1023, i8* %1024, align 1, !tbaa !2446
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1025, align 1, !tbaa !2450
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1026, align 1, !tbaa !2447
  %1027 = lshr i64 %1013, 63
  %1028 = trunc i64 %1027 to i8
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1028, i8* %1029, align 1, !tbaa !2448
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1016, i8* %1030, align 1, !tbaa !2449
  %1031 = load i64, i64* %RCX
  %1032 = load i64, i64* %RDX
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 3
  store i64 %1034, i64* %PC
  %1035 = add i64 %1032, %1031
  store i64 %1035, i64* %RCX, align 8, !tbaa !2428
  %1036 = icmp ult i64 %1035, %1031
  %1037 = icmp ult i64 %1035, %1032
  %1038 = or i1 %1036, %1037
  %1039 = zext i1 %1038 to i8
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1039, i8* %1040, align 1, !tbaa !2432
  %1041 = trunc i64 %1035 to i32
  %1042 = and i32 %1041, 255
  %1043 = call i32 @llvm.ctpop.i32(i32 %1042) #16
  %1044 = trunc i32 %1043 to i8
  %1045 = and i8 %1044, 1
  %1046 = xor i8 %1045, 1
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1046, i8* %1047, align 1, !tbaa !2446
  %1048 = xor i64 %1032, %1031
  %1049 = xor i64 %1048, %1035
  %1050 = lshr i64 %1049, 4
  %1051 = trunc i64 %1050 to i8
  %1052 = and i8 %1051, 1
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1052, i8* %1053, align 1, !tbaa !2450
  %1054 = icmp eq i64 %1035, 0
  %1055 = zext i1 %1054 to i8
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1055, i8* %1056, align 1, !tbaa !2447
  %1057 = lshr i64 %1035, 63
  %1058 = trunc i64 %1057 to i8
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1058, i8* %1059, align 1, !tbaa !2448
  %1060 = lshr i64 %1031, 63
  %1061 = lshr i64 %1032, 63
  %1062 = xor i64 %1057, %1060
  %1063 = xor i64 %1057, %1061
  %1064 = add nuw nsw i64 %1062, %1063
  %1065 = icmp eq i64 %1064, 2
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1066, i8* %1067, align 1, !tbaa !2449
  %1068 = load i64, i64* %RBP
  %1069 = sub i64 %1068, 168
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 7
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to i32*
  %1073 = load i32, i32* %1072
  %1074 = sext i32 %1073 to i64
  store i64 %1074, i64* %RDX, align 8, !tbaa !2428
  %1075 = load i64, i64* %RDX
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 7
  store i64 %1077, i64* %PC
  %1078 = sext i64 %1075 to i128
  %1079 = and i128 %1078, -18446744073709551616
  %1080 = zext i64 %1075 to i128
  %1081 = or i128 %1079, %1080
  %1082 = mul nsw i128 520, %1081
  %1083 = trunc i128 %1082 to i64
  store i64 %1083, i64* %RDX, align 8, !tbaa !2428
  %1084 = sext i64 %1083 to i128
  %1085 = icmp ne i128 %1084, %1082
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1086, i8* %1087, align 1, !tbaa !2432
  %1088 = trunc i128 %1082 to i32
  %1089 = and i32 %1088, 255
  %1090 = call i32 @llvm.ctpop.i32(i32 %1089) #16
  %1091 = trunc i32 %1090 to i8
  %1092 = and i8 %1091, 1
  %1093 = xor i8 %1092, 1
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1093, i8* %1094, align 1, !tbaa !2446
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1095, align 1, !tbaa !2450
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1096, align 1, !tbaa !2447
  %1097 = lshr i64 %1083, 63
  %1098 = trunc i64 %1097 to i8
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1098, i8* %1099, align 1, !tbaa !2448
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1086, i8* %1100, align 1, !tbaa !2449
  %1101 = load i64, i64* %RCX
  %1102 = load i64, i64* %RDX
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 3
  store i64 %1104, i64* %PC
  %1105 = add i64 %1102, %1101
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = icmp ult i64 %1105, %1101
  %1107 = icmp ult i64 %1105, %1102
  %1108 = or i1 %1106, %1107
  %1109 = zext i1 %1108 to i8
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1109, i8* %1110, align 1, !tbaa !2432
  %1111 = trunc i64 %1105 to i32
  %1112 = and i32 %1111, 255
  %1113 = call i32 @llvm.ctpop.i32(i32 %1112) #16
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = xor i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1116, i8* %1117, align 1, !tbaa !2446
  %1118 = xor i64 %1102, %1101
  %1119 = xor i64 %1118, %1105
  %1120 = lshr i64 %1119, 4
  %1121 = trunc i64 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1122, i8* %1123, align 1, !tbaa !2450
  %1124 = icmp eq i64 %1105, 0
  %1125 = zext i1 %1124 to i8
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1125, i8* %1126, align 1, !tbaa !2447
  %1127 = lshr i64 %1105, 63
  %1128 = trunc i64 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1128, i8* %1129, align 1, !tbaa !2448
  %1130 = lshr i64 %1101, 63
  %1131 = lshr i64 %1102, 63
  %1132 = xor i64 %1127, %1130
  %1133 = xor i64 %1127, %1131
  %1134 = add nuw nsw i64 %1132, %1133
  %1135 = icmp eq i64 %1134, 2
  %1136 = zext i1 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1136, i8* %1137, align 1, !tbaa !2449
  %1138 = load i64, i64* %RBP
  %1139 = sub i64 %1138, 172
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 7
  store i64 %1141, i64* %PC
  %1142 = inttoptr i64 %1139 to i32*
  %1143 = load i32, i32* %1142
  %1144 = sext i32 %1143 to i64
  store i64 %1144, i64* %RDX, align 8, !tbaa !2428
  %1145 = load i64, i64* %RCX
  %1146 = load i64, i64* %RDX
  %1147 = mul i64 %1146, 8
  %1148 = add i64 %1147, %1145
  %1149 = bitcast %union.vec128_t* %XMM2 to i8*
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 5
  store i64 %1151, i64* %PC
  %1152 = bitcast i8* %1149 to double*
  %1153 = load double, double* %1152, align 1
  %1154 = inttoptr i64 %1148 to double*
  store double %1153, double* %1154
  %1155 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1156 = load i64, i64* %RBP
  %1157 = sub i64 %1156, 164
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 8
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1157 to i32*
  %1161 = load i32, i32* %1160
  %1162 = sitofp i32 %1161 to double
  %1163 = bitcast i8* %1155 to double*
  store double %1162, double* %1163, align 1, !tbaa !2453
  %1164 = load i64, i64* %RBP
  %1165 = sub i64 %1164, 168
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 6
  store i64 %1167, i64* %PC
  %1168 = inttoptr i64 %1165 to i32*
  %1169 = load i32, i32* %1168
  %1170 = zext i32 %1169 to i64
  store i64 %1170, i64* %RAX, align 8, !tbaa !2428
  %1171 = load i64, i64* %RAX
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 3
  store i64 %1173, i64* %PC
  %1174 = trunc i64 %1171 to i32
  %1175 = add i32 5, %1174
  %1176 = zext i32 %1175 to i64
  store i64 %1176, i64* %RAX, align 8, !tbaa !2428
  %1177 = icmp ult i32 %1175, %1174
  %1178 = icmp ult i32 %1175, 5
  %1179 = or i1 %1177, %1178
  %1180 = zext i1 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1180, i8* %1181, align 1, !tbaa !2432
  %1182 = and i32 %1175, 255
  %1183 = call i32 @llvm.ctpop.i32(i32 %1182) #16
  %1184 = trunc i32 %1183 to i8
  %1185 = and i8 %1184, 1
  %1186 = xor i8 %1185, 1
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1186, i8* %1187, align 1, !tbaa !2446
  %1188 = xor i64 5, %1171
  %1189 = trunc i64 %1188 to i32
  %1190 = xor i32 %1189, %1175
  %1191 = lshr i32 %1190, 4
  %1192 = trunc i32 %1191 to i8
  %1193 = and i8 %1192, 1
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1193, i8* %1194, align 1, !tbaa !2450
  %1195 = icmp eq i32 %1175, 0
  %1196 = zext i1 %1195 to i8
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1196, i8* %1197, align 1, !tbaa !2447
  %1198 = lshr i32 %1175, 31
  %1199 = trunc i32 %1198 to i8
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1199, i8* %1200, align 1, !tbaa !2448
  %1201 = lshr i32 %1174, 31
  %1202 = xor i32 %1198, %1201
  %1203 = add nuw nsw i32 %1202, %1198
  %1204 = icmp eq i32 %1203, 2
  %1205 = zext i1 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1205, i8* %1206, align 1, !tbaa !2449
  %1207 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1208 = load i32, i32* %EAX
  %1209 = zext i32 %1208 to i64
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 4
  store i64 %1211, i64* %PC
  %1212 = sitofp i32 %1208 to double
  %1213 = bitcast i8* %1207 to double*
  store double %1212, double* %1213, align 1, !tbaa !2453
  %1214 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1215 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1216 = bitcast %union.vec128_t* %XMM2 to i8*
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 4
  store i64 %1218, i64* %PC
  %1219 = bitcast i8* %1215 to double*
  %1220 = load double, double* %1219, align 1
  %1221 = getelementptr inbounds i8, i8* %1215, i64 8
  %1222 = bitcast i8* %1221 to i64*
  %1223 = load i64, i64* %1222, align 1
  %1224 = bitcast i8* %1216 to double*
  %1225 = load double, double* %1224, align 1
  %1226 = fmul double %1220, %1225
  %1227 = bitcast i8* %1214 to double*
  store double %1226, double* %1227, align 1, !tbaa !2453
  %1228 = getelementptr inbounds i8, i8* %1214, i64 8
  %1229 = bitcast i8* %1228 to i64*
  store i64 %1223, i64* %1229, align 1, !tbaa !2453
  %1230 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1231 = load i64, i64* %RBP
  %1232 = sub i64 %1231, 172
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 8
  store i64 %1234, i64* %PC
  %1235 = inttoptr i64 %1232 to i32*
  %1236 = load i32, i32* %1235
  %1237 = sitofp i32 %1236 to double
  %1238 = bitcast i8* %1230 to double*
  store double %1237, double* %1238, align 1, !tbaa !2453
  %1239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1240 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1241 = bitcast %union.vec128_t* %XMM2 to i8*
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 4
  store i64 %1243, i64* %PC
  %1244 = bitcast i8* %1240 to double*
  %1245 = load double, double* %1244, align 1
  %1246 = getelementptr inbounds i8, i8* %1240, i64 8
  %1247 = bitcast i8* %1246 to i64*
  %1248 = load i64, i64* %1247, align 1
  %1249 = bitcast i8* %1241 to double*
  %1250 = load double, double* %1249, align 1
  %1251 = fadd double %1245, %1250
  %1252 = bitcast i8* %1239 to double*
  store double %1251, double* %1252, align 1, !tbaa !2453
  %1253 = getelementptr inbounds i8, i8* %1239, i64 8
  %1254 = bitcast i8* %1253 to i64*
  store i64 %1248, i64* %1254, align 1, !tbaa !2453
  %1255 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1256 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1257 = bitcast %union.vec128_t* %XMM0 to i8*
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 4
  store i64 %1259, i64* %PC
  %1260 = bitcast i8* %1256 to double*
  %1261 = load double, double* %1260, align 1
  %1262 = getelementptr inbounds i8, i8* %1256, i64 8
  %1263 = bitcast i8* %1262 to i64*
  %1264 = load i64, i64* %1263, align 1
  %1265 = bitcast i8* %1257 to double*
  %1266 = load double, double* %1265, align 1
  %1267 = fadd double %1261, %1266
  %1268 = bitcast i8* %1255 to double*
  store double %1267, double* %1268, align 1, !tbaa !2453
  %1269 = getelementptr inbounds i8, i8* %1255, i64 8
  %1270 = bitcast i8* %1269 to i64*
  store i64 %1264, i64* %1270, align 1, !tbaa !2453
  %1271 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 44
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 5
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1273 to i32*
  %1277 = load i32, i32* %1276
  %1278 = sitofp i32 %1277 to double
  %1279 = bitcast i8* %1271 to double*
  store double %1278, double* %1279, align 1, !tbaa !2453
  %1280 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1281 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1282 = bitcast %union.vec128_t* %XMM0 to i8*
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 4
  store i64 %1284, i64* %PC
  %1285 = bitcast i8* %1281 to double*
  %1286 = load double, double* %1285, align 1
  %1287 = getelementptr inbounds i8, i8* %1281, i64 8
  %1288 = bitcast i8* %1287 to i64*
  %1289 = load i64, i64* %1288, align 1
  %1290 = bitcast i8* %1282 to double*
  %1291 = load double, double* %1290, align 1
  %1292 = fdiv double %1286, %1291
  %1293 = bitcast i8* %1280 to double*
  store double %1292, double* %1293, align 1, !tbaa !2453
  %1294 = getelementptr inbounds i8, i8* %1280, i64 8
  %1295 = bitcast i8* %1294 to i64*
  store i64 %1289, i64* %1295, align 1, !tbaa !2453
  %1296 = load i64, i64* %RBP
  %1297 = sub i64 %1296, 112
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 4
  store i64 %1299, i64* %PC
  %1300 = inttoptr i64 %1297 to i64*
  %1301 = load i64, i64* %1300
  store i64 %1301, i64* %RCX, align 8, !tbaa !2428
  %1302 = load i64, i64* %RBP
  %1303 = sub i64 %1302, 164
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 7
  store i64 %1305, i64* %PC
  %1306 = inttoptr i64 %1303 to i32*
  %1307 = load i32, i32* %1306
  %1308 = sext i32 %1307 to i64
  store i64 %1308, i64* %RDX, align 8, !tbaa !2428
  %1309 = load i64, i64* %RDX
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 7
  store i64 %1311, i64* %PC
  %1312 = sext i64 %1309 to i128
  %1313 = and i128 %1312, -18446744073709551616
  %1314 = zext i64 %1309 to i128
  %1315 = or i128 %1313, %1314
  %1316 = mul nsw i128 33800, %1315
  %1317 = trunc i128 %1316 to i64
  store i64 %1317, i64* %RDX, align 8, !tbaa !2428
  %1318 = sext i64 %1317 to i128
  %1319 = icmp ne i128 %1318, %1316
  %1320 = zext i1 %1319 to i8
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1320, i8* %1321, align 1, !tbaa !2432
  %1322 = trunc i128 %1316 to i32
  %1323 = and i32 %1322, 255
  %1324 = call i32 @llvm.ctpop.i32(i32 %1323) #16
  %1325 = trunc i32 %1324 to i8
  %1326 = and i8 %1325, 1
  %1327 = xor i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1327, i8* %1328, align 1, !tbaa !2446
  %1329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1329, align 1, !tbaa !2450
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1330, align 1, !tbaa !2447
  %1331 = lshr i64 %1317, 63
  %1332 = trunc i64 %1331 to i8
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1332, i8* %1333, align 1, !tbaa !2448
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1320, i8* %1334, align 1, !tbaa !2449
  %1335 = load i64, i64* %RCX
  %1336 = load i64, i64* %RDX
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 3
  store i64 %1338, i64* %PC
  %1339 = add i64 %1336, %1335
  store i64 %1339, i64* %RCX, align 8, !tbaa !2428
  %1340 = icmp ult i64 %1339, %1335
  %1341 = icmp ult i64 %1339, %1336
  %1342 = or i1 %1340, %1341
  %1343 = zext i1 %1342 to i8
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1343, i8* %1344, align 1, !tbaa !2432
  %1345 = trunc i64 %1339 to i32
  %1346 = and i32 %1345, 255
  %1347 = call i32 @llvm.ctpop.i32(i32 %1346) #16
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  %1350 = xor i8 %1349, 1
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1350, i8* %1351, align 1, !tbaa !2446
  %1352 = xor i64 %1336, %1335
  %1353 = xor i64 %1352, %1339
  %1354 = lshr i64 %1353, 4
  %1355 = trunc i64 %1354 to i8
  %1356 = and i8 %1355, 1
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1356, i8* %1357, align 1, !tbaa !2450
  %1358 = icmp eq i64 %1339, 0
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1359, i8* %1360, align 1, !tbaa !2447
  %1361 = lshr i64 %1339, 63
  %1362 = trunc i64 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1362, i8* %1363, align 1, !tbaa !2448
  %1364 = lshr i64 %1335, 63
  %1365 = lshr i64 %1336, 63
  %1366 = xor i64 %1361, %1364
  %1367 = xor i64 %1361, %1365
  %1368 = add nuw nsw i64 %1366, %1367
  %1369 = icmp eq i64 %1368, 2
  %1370 = zext i1 %1369 to i8
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1370, i8* %1371, align 1, !tbaa !2449
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 168
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 7
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to i32*
  %1377 = load i32, i32* %1376
  %1378 = sext i32 %1377 to i64
  store i64 %1378, i64* %RDX, align 8, !tbaa !2428
  %1379 = load i64, i64* %RDX
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 7
  store i64 %1381, i64* %PC
  %1382 = sext i64 %1379 to i128
  %1383 = and i128 %1382, -18446744073709551616
  %1384 = zext i64 %1379 to i128
  %1385 = or i128 %1383, %1384
  %1386 = mul nsw i128 520, %1385
  %1387 = trunc i128 %1386 to i64
  store i64 %1387, i64* %RDX, align 8, !tbaa !2428
  %1388 = sext i64 %1387 to i128
  %1389 = icmp ne i128 %1388, %1386
  %1390 = zext i1 %1389 to i8
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1390, i8* %1391, align 1, !tbaa !2432
  %1392 = trunc i128 %1386 to i32
  %1393 = and i32 %1392, 255
  %1394 = call i32 @llvm.ctpop.i32(i32 %1393) #16
  %1395 = trunc i32 %1394 to i8
  %1396 = and i8 %1395, 1
  %1397 = xor i8 %1396, 1
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1397, i8* %1398, align 1, !tbaa !2446
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1399, align 1, !tbaa !2450
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1400, align 1, !tbaa !2447
  %1401 = lshr i64 %1387, 63
  %1402 = trunc i64 %1401 to i8
  %1403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1402, i8* %1403, align 1, !tbaa !2448
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1390, i8* %1404, align 1, !tbaa !2449
  %1405 = load i64, i64* %RCX
  %1406 = load i64, i64* %RDX
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 3
  store i64 %1408, i64* %PC
  %1409 = add i64 %1406, %1405
  store i64 %1409, i64* %RCX, align 8, !tbaa !2428
  %1410 = icmp ult i64 %1409, %1405
  %1411 = icmp ult i64 %1409, %1406
  %1412 = or i1 %1410, %1411
  %1413 = zext i1 %1412 to i8
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1413, i8* %1414, align 1, !tbaa !2432
  %1415 = trunc i64 %1409 to i32
  %1416 = and i32 %1415, 255
  %1417 = call i32 @llvm.ctpop.i32(i32 %1416) #16
  %1418 = trunc i32 %1417 to i8
  %1419 = and i8 %1418, 1
  %1420 = xor i8 %1419, 1
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1420, i8* %1421, align 1, !tbaa !2446
  %1422 = xor i64 %1406, %1405
  %1423 = xor i64 %1422, %1409
  %1424 = lshr i64 %1423, 4
  %1425 = trunc i64 %1424 to i8
  %1426 = and i8 %1425, 1
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1426, i8* %1427, align 1, !tbaa !2450
  %1428 = icmp eq i64 %1409, 0
  %1429 = zext i1 %1428 to i8
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1429, i8* %1430, align 1, !tbaa !2447
  %1431 = lshr i64 %1409, 63
  %1432 = trunc i64 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1432, i8* %1433, align 1, !tbaa !2448
  %1434 = lshr i64 %1405, 63
  %1435 = lshr i64 %1406, 63
  %1436 = xor i64 %1431, %1434
  %1437 = xor i64 %1431, %1435
  %1438 = add nuw nsw i64 %1436, %1437
  %1439 = icmp eq i64 %1438, 2
  %1440 = zext i1 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1440, i8* %1441, align 1, !tbaa !2449
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 172
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 7
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to i32*
  %1447 = load i32, i32* %1446
  %1448 = sext i32 %1447 to i64
  store i64 %1448, i64* %RDX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RCX
  %1450 = load i64, i64* %RDX
  %1451 = mul i64 %1450, 8
  %1452 = add i64 %1451, %1449
  %1453 = bitcast %union.vec128_t* %XMM1 to i8*
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 5
  store i64 %1455, i64* %PC
  %1456 = bitcast i8* %1453 to double*
  %1457 = load double, double* %1456, align 1
  %1458 = inttoptr i64 %1452 to double*
  store double %1457, double* %1458
  %1459 = load i64, i64* %RBP
  %1460 = sub i64 %1459, 172
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 6
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to i32*
  %1464 = load i32, i32* %1463
  %1465 = zext i32 %1464 to i64
  store i64 %1465, i64* %RAX, align 8, !tbaa !2428
  %1466 = load i64, i64* %RAX
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 3
  store i64 %1468, i64* %PC
  %1469 = trunc i64 %1466 to i32
  %1470 = add i32 1, %1469
  %1471 = zext i32 %1470 to i64
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  %1472 = icmp ult i32 %1470, %1469
  %1473 = icmp ult i32 %1470, 1
  %1474 = or i1 %1472, %1473
  %1475 = zext i1 %1474 to i8
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1475, i8* %1476, align 1, !tbaa !2432
  %1477 = and i32 %1470, 255
  %1478 = call i32 @llvm.ctpop.i32(i32 %1477) #16
  %1479 = trunc i32 %1478 to i8
  %1480 = and i8 %1479, 1
  %1481 = xor i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1481, i8* %1482, align 1, !tbaa !2446
  %1483 = xor i64 1, %1466
  %1484 = trunc i64 %1483 to i32
  %1485 = xor i32 %1484, %1470
  %1486 = lshr i32 %1485, 4
  %1487 = trunc i32 %1486 to i8
  %1488 = and i8 %1487, 1
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1488, i8* %1489, align 1, !tbaa !2450
  %1490 = icmp eq i32 %1470, 0
  %1491 = zext i1 %1490 to i8
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1491, i8* %1492, align 1, !tbaa !2447
  %1493 = lshr i32 %1470, 31
  %1494 = trunc i32 %1493 to i8
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1494, i8* %1495, align 1, !tbaa !2448
  %1496 = lshr i32 %1469, 31
  %1497 = xor i32 %1493, %1496
  %1498 = add nuw nsw i32 %1497, %1493
  %1499 = icmp eq i32 %1498, 2
  %1500 = zext i1 %1499 to i8
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1500, i8* %1501, align 1, !tbaa !2449
  %1502 = load i64, i64* %RBP
  %1503 = sub i64 %1502, 172
  %1504 = load i32, i32* %EAX
  %1505 = zext i32 %1504 to i64
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 6
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1503 to i32*
  store i32 %1504, i32* %1508
  %1509 = load i64, i64* %PC
  %1510 = sub i64 %1509, 354
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 5
  store i64 %1512, i64* %PC
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1510, i64* %1513, align 8, !tbaa !2428
  br label %block_4012fb

block_401462:                                     ; preds = %block_4012fb
  %1514 = load i64, i64* %PC
  %1515 = add i64 %1514, 5
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 5
  store i64 %1517, i64* %PC
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1515, i64* %1518, align 8, !tbaa !2428
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 168
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 6
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to i32*
  %1524 = load i32, i32* %1523
  %1525 = zext i32 %1524 to i64
  store i64 %1525, i64* %RAX, align 8, !tbaa !2428
  %1526 = load i64, i64* %RAX
  %1527 = load i64, i64* %PC
  %1528 = add i64 %1527, 3
  store i64 %1528, i64* %PC
  %1529 = trunc i64 %1526 to i32
  %1530 = add i32 1, %1529
  %1531 = zext i32 %1530 to i64
  store i64 %1531, i64* %RAX, align 8, !tbaa !2428
  %1532 = icmp ult i32 %1530, %1529
  %1533 = icmp ult i32 %1530, 1
  %1534 = or i1 %1532, %1533
  %1535 = zext i1 %1534 to i8
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1535, i8* %1536, align 1, !tbaa !2432
  %1537 = and i32 %1530, 255
  %1538 = call i32 @llvm.ctpop.i32(i32 %1537) #16
  %1539 = trunc i32 %1538 to i8
  %1540 = and i8 %1539, 1
  %1541 = xor i8 %1540, 1
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1541, i8* %1542, align 1, !tbaa !2446
  %1543 = xor i64 1, %1526
  %1544 = trunc i64 %1543 to i32
  %1545 = xor i32 %1544, %1530
  %1546 = lshr i32 %1545, 4
  %1547 = trunc i32 %1546 to i8
  %1548 = and i8 %1547, 1
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1548, i8* %1549, align 1, !tbaa !2450
  %1550 = icmp eq i32 %1530, 0
  %1551 = zext i1 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1551, i8* %1552, align 1, !tbaa !2447
  %1553 = lshr i32 %1530, 31
  %1554 = trunc i32 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1554, i8* %1555, align 1, !tbaa !2448
  %1556 = lshr i32 %1529, 31
  %1557 = xor i32 %1553, %1556
  %1558 = add nuw nsw i32 %1557, %1553
  %1559 = icmp eq i32 %1558, 2
  %1560 = zext i1 %1559 to i8
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1560, i8* %1561, align 1, !tbaa !2449
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 168
  %1564 = load i32, i32* %EAX
  %1565 = zext i32 %1564 to i64
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 6
  store i64 %1567, i64* %PC
  %1568 = inttoptr i64 %1563 to i32*
  store i32 %1564, i32* %1568
  %1569 = load i64, i64* %PC
  %1570 = sub i64 %1569, 562
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 5
  store i64 %1572, i64* %PC
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1570, i64* %1573, align 8, !tbaa !2428
  br label %block_401244

block_40123a:                                     ; preds = %block_40122b
  %1574 = load i64, i64* %RBP
  %1575 = sub i64 %1574, 168
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 10
  store i64 %1577, i64* %PC
  %1578 = inttoptr i64 %1575 to i32*
  store i32 0, i32* %1578
  br label %block_401244

block_40122b:                                     ; preds = %block_40147b, %block_401221
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_401221 ], [ %MEMORY.1, %block_40147b ]
  %1579 = load i64, i64* %RBP
  %1580 = sub i64 %1579, 164
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 6
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1580 to i32*
  %1584 = load i32, i32* %1583
  %1585 = zext i32 %1584 to i64
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = load i32, i32* %EAX
  %1587 = zext i32 %1586 to i64
  %1588 = load i64, i64* %RBP
  %1589 = sub i64 %1588, 44
  %1590 = load i64, i64* %PC
  %1591 = add i64 %1590, 3
  store i64 %1591, i64* %PC
  %1592 = inttoptr i64 %1589 to i32*
  %1593 = load i32, i32* %1592
  %1594 = sub i32 %1586, %1593
  %1595 = icmp ult i32 %1586, %1593
  %1596 = zext i1 %1595 to i8
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1596, i8* %1597, align 1, !tbaa !2432
  %1598 = and i32 %1594, 255
  %1599 = call i32 @llvm.ctpop.i32(i32 %1598) #16
  %1600 = trunc i32 %1599 to i8
  %1601 = and i8 %1600, 1
  %1602 = xor i8 %1601, 1
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1602, i8* %1603, align 1, !tbaa !2446
  %1604 = xor i32 %1593, %1586
  %1605 = xor i32 %1604, %1594
  %1606 = lshr i32 %1605, 4
  %1607 = trunc i32 %1606 to i8
  %1608 = and i8 %1607, 1
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1608, i8* %1609, align 1, !tbaa !2450
  %1610 = icmp eq i32 %1594, 0
  %1611 = zext i1 %1610 to i8
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1611, i8* %1612, align 1, !tbaa !2447
  %1613 = lshr i32 %1594, 31
  %1614 = trunc i32 %1613 to i8
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1614, i8* %1615, align 1, !tbaa !2448
  %1616 = lshr i32 %1586, 31
  %1617 = lshr i32 %1593, 31
  %1618 = xor i32 %1617, %1616
  %1619 = xor i32 %1613, %1616
  %1620 = add nuw nsw i32 %1619, %1618
  %1621 = icmp eq i32 %1620, 2
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1622, i8* %1623, align 1, !tbaa !2449
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 608
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 6
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 6
  store i64 %1629, i64* %PC
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1631 = load i8, i8* %1630, align 1, !tbaa !2447
  %1632 = icmp eq i8 %1631, 0
  %1633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1634 = load i8, i8* %1633, align 1, !tbaa !2448
  %1635 = icmp ne i8 %1634, 0
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1637 = load i8, i8* %1636, align 1, !tbaa !2449
  %1638 = icmp ne i8 %1637, 0
  %1639 = xor i1 %1635, %1638
  %1640 = xor i1 %1639, true
  %1641 = and i1 %1632, %1640
  %1642 = zext i1 %1641 to i8
  store i8 %1642, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1644 = select i1 %1641, i64 %1625, i64 %1627
  store i64 %1644, i64* %1643, align 8, !tbaa !2428
  %1645 = load i8, i8* %BRANCH_TAKEN
  %1646 = icmp eq i8 %1645, 1
  br i1 %1646, label %block_401494, label %block_40123a

block_401221:                                     ; preds = %block_40119e
  %1647 = load i64, i64* %RBP
  %1648 = sub i64 %1647, 164
  %1649 = load i64, i64* %PC
  %1650 = add i64 %1649, 10
  store i64 %1650, i64* %PC
  %1651 = inttoptr i64 %1648 to i32*
  store i32 0, i32* %1651
  br label %block_40122b

block_401120:                                     ; preds = %block_401111
  %1652 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 8
  store i64 %1654, i64* %PC
  %1655 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 80) to double*)
  %1656 = bitcast i8* %1652 to double*
  store double %1655, double* %1656, align 1, !tbaa !2453
  %1657 = getelementptr inbounds i8, i8* %1652, i64 8
  %1658 = bitcast i8* %1657 to double*
  store double 0.000000e+00, double* %1658, align 1, !tbaa !2453
  %1659 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 8
  store i64 %1661, i64* %PC
  %1662 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 40) to double*)
  %1663 = bitcast i8* %1659 to double*
  store double %1662, double* %1663, align 1, !tbaa !2453
  %1664 = getelementptr inbounds i8, i8* %1659, i64 8
  %1665 = bitcast i8* %1664 to double*
  store double 0.000000e+00, double* %1665, align 1, !tbaa !2453
  %1666 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 164
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 8
  store i64 %1670, i64* %PC
  %1671 = inttoptr i64 %1668 to i32*
  %1672 = load i32, i32* %1671
  %1673 = sitofp i32 %1672 to double
  %1674 = bitcast i8* %1666 to double*
  store double %1673, double* %1674, align 1, !tbaa !2453
  %1675 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1676 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1677 = bitcast %union.vec128_t* %XMM1 to i8*
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 4
  store i64 %1679, i64* %PC
  %1680 = bitcast i8* %1676 to double*
  %1681 = load double, double* %1680, align 1
  %1682 = getelementptr inbounds i8, i8* %1676, i64 8
  %1683 = bitcast i8* %1682 to i64*
  %1684 = load i64, i64* %1683, align 1
  %1685 = bitcast i8* %1677 to double*
  %1686 = load double, double* %1685, align 1
  %1687 = fadd double %1681, %1686
  %1688 = bitcast i8* %1675 to double*
  store double %1687, double* %1688, align 1, !tbaa !2453
  %1689 = getelementptr inbounds i8, i8* %1675, i64 8
  %1690 = bitcast i8* %1689 to i64*
  store i64 %1684, i64* %1690, align 1, !tbaa !2453
  %1691 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1692 = load i64, i64* %RBP
  %1693 = sub i64 %1692, 48
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 5
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1693 to i32*
  %1697 = load i32, i32* %1696
  %1698 = sitofp i32 %1697 to double
  %1699 = bitcast i8* %1691 to double*
  store double %1698, double* %1699, align 1, !tbaa !2453
  %1700 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1701 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1702 = bitcast %union.vec128_t* %XMM1 to i8*
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 4
  store i64 %1704, i64* %PC
  %1705 = bitcast i8* %1701 to double*
  %1706 = load double, double* %1705, align 1
  %1707 = getelementptr inbounds i8, i8* %1701, i64 8
  %1708 = bitcast i8* %1707 to i64*
  %1709 = load i64, i64* %1708, align 1
  %1710 = bitcast i8* %1702 to double*
  %1711 = load double, double* %1710, align 1
  %1712 = fdiv double %1706, %1711
  %1713 = bitcast i8* %1700 to double*
  store double %1712, double* %1713, align 1, !tbaa !2453
  %1714 = getelementptr inbounds i8, i8* %1700, i64 8
  %1715 = bitcast i8* %1714 to i64*
  store i64 %1709, i64* %1715, align 1, !tbaa !2453
  %1716 = load i64, i64* %RBP
  %1717 = sub i64 %1716, 136
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 7
  store i64 %1719, i64* %PC
  %1720 = inttoptr i64 %1717 to i64*
  %1721 = load i64, i64* %1720
  store i64 %1721, i64* %RAX, align 8, !tbaa !2428
  %1722 = load i64, i64* %RBP
  %1723 = sub i64 %1722, 164
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 7
  store i64 %1725, i64* %PC
  %1726 = inttoptr i64 %1723 to i32*
  %1727 = load i32, i32* %1726
  %1728 = sext i32 %1727 to i64
  store i64 %1728, i64* %RCX, align 8, !tbaa !2428
  %1729 = load i64, i64* %RAX
  %1730 = load i64, i64* %RCX
  %1731 = mul i64 %1730, 8
  %1732 = add i64 %1731, %1729
  %1733 = bitcast %union.vec128_t* %XMM2 to i8*
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 5
  store i64 %1735, i64* %PC
  %1736 = bitcast i8* %1733 to double*
  %1737 = load double, double* %1736, align 1
  %1738 = inttoptr i64 %1732 to double*
  store double %1737, double* %1738
  %1739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1740 = load i64, i64* %RBP
  %1741 = sub i64 %1740, 164
  %1742 = load i64, i64* %PC
  %1743 = add i64 %1742, 8
  store i64 %1743, i64* %PC
  %1744 = inttoptr i64 %1741 to i32*
  %1745 = load i32, i32* %1744
  %1746 = sitofp i32 %1745 to double
  %1747 = bitcast i8* %1739 to double*
  store double %1746, double* %1747, align 1, !tbaa !2453
  %1748 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1749 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1750 = bitcast %union.vec128_t* %XMM0 to i8*
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 4
  store i64 %1752, i64* %PC
  %1753 = bitcast i8* %1749 to double*
  %1754 = load double, double* %1753, align 1
  %1755 = getelementptr inbounds i8, i8* %1749, i64 8
  %1756 = bitcast i8* %1755 to i64*
  %1757 = load i64, i64* %1756, align 1
  %1758 = bitcast i8* %1750 to double*
  %1759 = load double, double* %1758, align 1
  %1760 = fadd double %1754, %1759
  %1761 = bitcast i8* %1748 to double*
  store double %1760, double* %1761, align 1, !tbaa !2453
  %1762 = getelementptr inbounds i8, i8* %1748, i64 8
  %1763 = bitcast i8* %1762 to i64*
  store i64 %1757, i64* %1763, align 1, !tbaa !2453
  %1764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 48
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 5
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i32*
  %1770 = load i32, i32* %1769
  %1771 = sitofp i32 %1770 to double
  %1772 = bitcast i8* %1764 to double*
  store double %1771, double* %1772, align 1, !tbaa !2453
  %1773 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1774 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1775 = bitcast %union.vec128_t* %XMM0 to i8*
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 4
  store i64 %1777, i64* %PC
  %1778 = bitcast i8* %1774 to double*
  %1779 = load double, double* %1778, align 1
  %1780 = getelementptr inbounds i8, i8* %1774, i64 8
  %1781 = bitcast i8* %1780 to i64*
  %1782 = load i64, i64* %1781, align 1
  %1783 = bitcast i8* %1775 to double*
  %1784 = load double, double* %1783, align 1
  %1785 = fdiv double %1779, %1784
  %1786 = bitcast i8* %1773 to double*
  store double %1785, double* %1786, align 1, !tbaa !2453
  %1787 = getelementptr inbounds i8, i8* %1773, i64 8
  %1788 = bitcast i8* %1787 to i64*
  store i64 %1782, i64* %1788, align 1, !tbaa !2453
  %1789 = load i64, i64* %RBP
  %1790 = sub i64 %1789, 144
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 7
  store i64 %1792, i64* %PC
  %1793 = inttoptr i64 %1790 to i64*
  %1794 = load i64, i64* %1793
  store i64 %1794, i64* %RAX, align 8, !tbaa !2428
  %1795 = load i64, i64* %RBP
  %1796 = sub i64 %1795, 164
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 7
  store i64 %1798, i64* %PC
  %1799 = inttoptr i64 %1796 to i32*
  %1800 = load i32, i32* %1799
  %1801 = sext i32 %1800 to i64
  store i64 %1801, i64* %RCX, align 8, !tbaa !2428
  %1802 = load i64, i64* %RAX
  %1803 = load i64, i64* %RCX
  %1804 = mul i64 %1803, 8
  %1805 = add i64 %1804, %1802
  %1806 = bitcast %union.vec128_t* %XMM1 to i8*
  %1807 = load i64, i64* %PC
  %1808 = add i64 %1807, 5
  store i64 %1808, i64* %PC
  %1809 = bitcast i8* %1806 to double*
  %1810 = load double, double* %1809, align 1
  %1811 = inttoptr i64 %1805 to double*
  store double %1810, double* %1811
  %1812 = load i64, i64* %RBP
  %1813 = sub i64 %1812, 164
  %1814 = load i64, i64* %PC
  %1815 = add i64 %1814, 6
  store i64 %1815, i64* %PC
  %1816 = inttoptr i64 %1813 to i32*
  %1817 = load i32, i32* %1816
  %1818 = zext i32 %1817 to i64
  store i64 %1818, i64* %RAX, align 8, !tbaa !2428
  %1819 = load i64, i64* %RAX
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 3
  store i64 %1821, i64* %PC
  %1822 = trunc i64 %1819 to i32
  %1823 = add i32 1, %1822
  %1824 = zext i32 %1823 to i64
  store i64 %1824, i64* %RAX, align 8, !tbaa !2428
  %1825 = icmp ult i32 %1823, %1822
  %1826 = icmp ult i32 %1823, 1
  %1827 = or i1 %1825, %1826
  %1828 = zext i1 %1827 to i8
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1828, i8* %1829, align 1, !tbaa !2432
  %1830 = and i32 %1823, 255
  %1831 = call i32 @llvm.ctpop.i32(i32 %1830) #16
  %1832 = trunc i32 %1831 to i8
  %1833 = and i8 %1832, 1
  %1834 = xor i8 %1833, 1
  %1835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1834, i8* %1835, align 1, !tbaa !2446
  %1836 = xor i64 1, %1819
  %1837 = trunc i64 %1836 to i32
  %1838 = xor i32 %1837, %1823
  %1839 = lshr i32 %1838, 4
  %1840 = trunc i32 %1839 to i8
  %1841 = and i8 %1840, 1
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1841, i8* %1842, align 1, !tbaa !2450
  %1843 = icmp eq i32 %1823, 0
  %1844 = zext i1 %1843 to i8
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1844, i8* %1845, align 1, !tbaa !2447
  %1846 = lshr i32 %1823, 31
  %1847 = trunc i32 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1847, i8* %1848, align 1, !tbaa !2448
  %1849 = lshr i32 %1822, 31
  %1850 = xor i32 %1846, %1849
  %1851 = add nuw nsw i32 %1850, %1846
  %1852 = icmp eq i32 %1851, 2
  %1853 = zext i1 %1852 to i8
  %1854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1853, i8* %1854, align 1, !tbaa !2449
  %1855 = load i64, i64* %RBP
  %1856 = sub i64 %1855, 164
  %1857 = load i32, i32* %EAX
  %1858 = zext i32 %1857 to i64
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 6
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1856 to i32*
  store i32 %1857, i32* %1861
  %1862 = load i64, i64* %PC
  %1863 = sub i64 %1862, 126
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 5
  store i64 %1865, i64* %PC
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1863, i64* %1866, align 8, !tbaa !2428
  br label %block_401111

block_4011ad:                                     ; preds = %block_40119e
  %1867 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 8
  store i64 %1869, i64* %PC
  %1870 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 64) to double*)
  %1871 = bitcast i8* %1867 to double*
  store double %1870, double* %1871, align 1, !tbaa !2453
  %1872 = getelementptr inbounds i8, i8* %1867, i64 8
  %1873 = bitcast i8* %1872 to double*
  store double 0.000000e+00, double* %1873, align 1, !tbaa !2453
  %1874 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 8
  store i64 %1876, i64* %PC
  %1877 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 72) to double*)
  %1878 = bitcast i8* %1874 to double*
  store double %1877, double* %1878, align 1, !tbaa !2453
  %1879 = getelementptr inbounds i8, i8* %1874, i64 8
  %1880 = bitcast i8* %1879 to double*
  store double 0.000000e+00, double* %1880, align 1, !tbaa !2453
  %1881 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1882 = load i64, i64* %RBP
  %1883 = sub i64 %1882, 164
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 8
  store i64 %1885, i64* %PC
  %1886 = inttoptr i64 %1883 to i32*
  %1887 = load i32, i32* %1886
  %1888 = sitofp i32 %1887 to double
  %1889 = bitcast i8* %1881 to double*
  store double %1888, double* %1889, align 1, !tbaa !2453
  %1890 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1891 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1892 = bitcast %union.vec128_t* %XMM1 to i8*
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 4
  store i64 %1894, i64* %PC
  %1895 = bitcast i8* %1891 to double*
  %1896 = load double, double* %1895, align 1
  %1897 = getelementptr inbounds i8, i8* %1891, i64 8
  %1898 = bitcast i8* %1897 to i64*
  %1899 = load i64, i64* %1898, align 1
  %1900 = bitcast i8* %1892 to double*
  %1901 = load double, double* %1900, align 1
  %1902 = fadd double %1896, %1901
  %1903 = bitcast i8* %1890 to double*
  store double %1902, double* %1903, align 1, !tbaa !2453
  %1904 = getelementptr inbounds i8, i8* %1890, i64 8
  %1905 = bitcast i8* %1904 to i64*
  store i64 %1899, i64* %1905, align 1, !tbaa !2453
  %1906 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1907 = load i64, i64* %RBP
  %1908 = sub i64 %1907, 48
  %1909 = load i64, i64* %PC
  %1910 = add i64 %1909, 5
  store i64 %1910, i64* %PC
  %1911 = inttoptr i64 %1908 to i32*
  %1912 = load i32, i32* %1911
  %1913 = sitofp i32 %1912 to double
  %1914 = bitcast i8* %1906 to double*
  store double %1913, double* %1914, align 1, !tbaa !2453
  %1915 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1916 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1917 = bitcast %union.vec128_t* %XMM1 to i8*
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 4
  store i64 %1919, i64* %PC
  %1920 = bitcast i8* %1916 to double*
  %1921 = load double, double* %1920, align 1
  %1922 = getelementptr inbounds i8, i8* %1916, i64 8
  %1923 = bitcast i8* %1922 to i64*
  %1924 = load i64, i64* %1923, align 1
  %1925 = bitcast i8* %1917 to double*
  %1926 = load double, double* %1925, align 1
  %1927 = fdiv double %1921, %1926
  %1928 = bitcast i8* %1915 to double*
  store double %1927, double* %1928, align 1, !tbaa !2453
  %1929 = getelementptr inbounds i8, i8* %1915, i64 8
  %1930 = bitcast i8* %1929 to i64*
  store i64 %1924, i64* %1930, align 1, !tbaa !2453
  %1931 = load i64, i64* %RBP
  %1932 = sub i64 %1931, 152
  %1933 = load i64, i64* %PC
  %1934 = add i64 %1933, 7
  store i64 %1934, i64* %PC
  %1935 = inttoptr i64 %1932 to i64*
  %1936 = load i64, i64* %1935
  store i64 %1936, i64* %RAX, align 8, !tbaa !2428
  %1937 = load i64, i64* %RBP
  %1938 = sub i64 %1937, 164
  %1939 = load i64, i64* %PC
  %1940 = add i64 %1939, 7
  store i64 %1940, i64* %PC
  %1941 = inttoptr i64 %1938 to i32*
  %1942 = load i32, i32* %1941
  %1943 = sext i32 %1942 to i64
  store i64 %1943, i64* %RCX, align 8, !tbaa !2428
  %1944 = load i64, i64* %RAX
  %1945 = load i64, i64* %RCX
  %1946 = mul i64 %1945, 8
  %1947 = add i64 %1946, %1944
  %1948 = bitcast %union.vec128_t* %XMM2 to i8*
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 5
  store i64 %1950, i64* %PC
  %1951 = bitcast i8* %1948 to double*
  %1952 = load double, double* %1951, align 1
  %1953 = inttoptr i64 %1947 to double*
  store double %1952, double* %1953
  %1954 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1955 = load i64, i64* %RBP
  %1956 = sub i64 %1955, 164
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 8
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1956 to i32*
  %1960 = load i32, i32* %1959
  %1961 = sitofp i32 %1960 to double
  %1962 = bitcast i8* %1954 to double*
  store double %1961, double* %1962, align 1, !tbaa !2453
  %1963 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1964 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1965 = bitcast %union.vec128_t* %XMM0 to i8*
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 4
  store i64 %1967, i64* %PC
  %1968 = bitcast i8* %1964 to double*
  %1969 = load double, double* %1968, align 1
  %1970 = getelementptr inbounds i8, i8* %1964, i64 8
  %1971 = bitcast i8* %1970 to i64*
  %1972 = load i64, i64* %1971, align 1
  %1973 = bitcast i8* %1965 to double*
  %1974 = load double, double* %1973, align 1
  %1975 = fadd double %1969, %1974
  %1976 = bitcast i8* %1963 to double*
  store double %1975, double* %1976, align 1, !tbaa !2453
  %1977 = getelementptr inbounds i8, i8* %1963, i64 8
  %1978 = bitcast i8* %1977 to i64*
  store i64 %1972, i64* %1978, align 1, !tbaa !2453
  %1979 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1980 = load i64, i64* %RBP
  %1981 = sub i64 %1980, 48
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 5
  store i64 %1983, i64* %PC
  %1984 = inttoptr i64 %1981 to i32*
  %1985 = load i32, i32* %1984
  %1986 = sitofp i32 %1985 to double
  %1987 = bitcast i8* %1979 to double*
  store double %1986, double* %1987, align 1, !tbaa !2453
  %1988 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1989 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1990 = bitcast %union.vec128_t* %XMM0 to i8*
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 4
  store i64 %1992, i64* %PC
  %1993 = bitcast i8* %1989 to double*
  %1994 = load double, double* %1993, align 1
  %1995 = getelementptr inbounds i8, i8* %1989, i64 8
  %1996 = bitcast i8* %1995 to i64*
  %1997 = load i64, i64* %1996, align 1
  %1998 = bitcast i8* %1990 to double*
  %1999 = load double, double* %1998, align 1
  %2000 = fdiv double %1994, %1999
  %2001 = bitcast i8* %1988 to double*
  store double %2000, double* %2001, align 1, !tbaa !2453
  %2002 = getelementptr inbounds i8, i8* %1988, i64 8
  %2003 = bitcast i8* %2002 to i64*
  store i64 %1997, i64* %2003, align 1, !tbaa !2453
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 160
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 7
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i64*
  %2009 = load i64, i64* %2008
  store i64 %2009, i64* %RAX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RBP
  %2011 = sub i64 %2010, 164
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 7
  store i64 %2013, i64* %PC
  %2014 = inttoptr i64 %2011 to i32*
  %2015 = load i32, i32* %2014
  %2016 = sext i32 %2015 to i64
  store i64 %2016, i64* %RCX, align 8, !tbaa !2428
  %2017 = load i64, i64* %RAX
  %2018 = load i64, i64* %RCX
  %2019 = mul i64 %2018, 8
  %2020 = add i64 %2019, %2017
  %2021 = bitcast %union.vec128_t* %XMM1 to i8*
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 5
  store i64 %2023, i64* %PC
  %2024 = bitcast i8* %2021 to double*
  %2025 = load double, double* %2024, align 1
  %2026 = inttoptr i64 %2020 to double*
  store double %2025, double* %2026
  %2027 = load i64, i64* %RBP
  %2028 = sub i64 %2027, 164
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 6
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2028 to i32*
  %2032 = load i32, i32* %2031
  %2033 = zext i32 %2032 to i64
  store i64 %2033, i64* %RAX, align 8, !tbaa !2428
  %2034 = load i64, i64* %RAX
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 3
  store i64 %2036, i64* %PC
  %2037 = trunc i64 %2034 to i32
  %2038 = add i32 1, %2037
  %2039 = zext i32 %2038 to i64
  store i64 %2039, i64* %RAX, align 8, !tbaa !2428
  %2040 = icmp ult i32 %2038, %2037
  %2041 = icmp ult i32 %2038, 1
  %2042 = or i1 %2040, %2041
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2043, i8* %2044, align 1, !tbaa !2432
  %2045 = and i32 %2038, 255
  %2046 = call i32 @llvm.ctpop.i32(i32 %2045) #16
  %2047 = trunc i32 %2046 to i8
  %2048 = and i8 %2047, 1
  %2049 = xor i8 %2048, 1
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2049, i8* %2050, align 1, !tbaa !2446
  %2051 = xor i64 1, %2034
  %2052 = trunc i64 %2051 to i32
  %2053 = xor i32 %2052, %2038
  %2054 = lshr i32 %2053, 4
  %2055 = trunc i32 %2054 to i8
  %2056 = and i8 %2055, 1
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2056, i8* %2057, align 1, !tbaa !2450
  %2058 = icmp eq i32 %2038, 0
  %2059 = zext i1 %2058 to i8
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2059, i8* %2060, align 1, !tbaa !2447
  %2061 = lshr i32 %2038, 31
  %2062 = trunc i32 %2061 to i8
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2062, i8* %2063, align 1, !tbaa !2448
  %2064 = lshr i32 %2037, 31
  %2065 = xor i32 %2061, %2064
  %2066 = add nuw nsw i32 %2065, %2061
  %2067 = icmp eq i32 %2066, 2
  %2068 = zext i1 %2067 to i8
  %2069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2068, i8* %2069, align 1, !tbaa !2449
  %2070 = load i64, i64* %RBP
  %2071 = sub i64 %2070, 164
  %2072 = load i32, i32* %EAX
  %2073 = zext i32 %2072 to i64
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 6
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2071 to i32*
  store i32 %2072, i32* %2076
  %2077 = load i64, i64* %PC
  %2078 = sub i64 %2077, 126
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 5
  store i64 %2080, i64* %PC
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2078, i64* %2081, align 8, !tbaa !2428
  br label %block_40119e

block_401099:                                     ; preds = %block_40108a
  %2082 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2083 = load i64, i64* %PC
  %2084 = add i64 %2083, 8
  store i64 %2084, i64* %PC
  %2085 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 48) to double*)
  %2086 = bitcast i8* %2082 to double*
  store double %2085, double* %2086, align 1, !tbaa !2453
  %2087 = getelementptr inbounds i8, i8* %2082, i64 8
  %2088 = bitcast i8* %2087 to double*
  store double 0.000000e+00, double* %2088, align 1, !tbaa !2453
  %2089 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2090 = load i64, i64* %PC
  %2091 = add i64 %2090, 8
  store i64 %2091, i64* %PC
  %2092 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 56) to double*)
  %2093 = bitcast i8* %2089 to double*
  store double %2092, double* %2093, align 1, !tbaa !2453
  %2094 = getelementptr inbounds i8, i8* %2089, i64 8
  %2095 = bitcast i8* %2094 to double*
  store double 0.000000e+00, double* %2095, align 1, !tbaa !2453
  %2096 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2097 = load i64, i64* %RBP
  %2098 = sub i64 %2097, 164
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 8
  store i64 %2100, i64* %PC
  %2101 = inttoptr i64 %2098 to i32*
  %2102 = load i32, i32* %2101
  %2103 = sitofp i32 %2102 to double
  %2104 = bitcast i8* %2096 to double*
  store double %2103, double* %2104, align 1, !tbaa !2453
  %2105 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2106 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2107 = bitcast %union.vec128_t* %XMM1 to i8*
  %2108 = load i64, i64* %PC
  %2109 = add i64 %2108, 4
  store i64 %2109, i64* %PC
  %2110 = bitcast i8* %2106 to double*
  %2111 = load double, double* %2110, align 1
  %2112 = getelementptr inbounds i8, i8* %2106, i64 8
  %2113 = bitcast i8* %2112 to i64*
  %2114 = load i64, i64* %2113, align 1
  %2115 = bitcast i8* %2107 to double*
  %2116 = load double, double* %2115, align 1
  %2117 = fadd double %2111, %2116
  %2118 = bitcast i8* %2105 to double*
  store double %2117, double* %2118, align 1, !tbaa !2453
  %2119 = getelementptr inbounds i8, i8* %2105, i64 8
  %2120 = bitcast i8* %2119 to i64*
  store i64 %2114, i64* %2120, align 1, !tbaa !2453
  %2121 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2122 = load i64, i64* %RBP
  %2123 = sub i64 %2122, 48
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 5
  store i64 %2125, i64* %PC
  %2126 = inttoptr i64 %2123 to i32*
  %2127 = load i32, i32* %2126
  %2128 = sitofp i32 %2127 to double
  %2129 = bitcast i8* %2121 to double*
  store double %2128, double* %2129, align 1, !tbaa !2453
  %2130 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2131 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2132 = bitcast %union.vec128_t* %XMM1 to i8*
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 4
  store i64 %2134, i64* %PC
  %2135 = bitcast i8* %2131 to double*
  %2136 = load double, double* %2135, align 1
  %2137 = getelementptr inbounds i8, i8* %2131, i64 8
  %2138 = bitcast i8* %2137 to i64*
  %2139 = load i64, i64* %2138, align 1
  %2140 = bitcast i8* %2132 to double*
  %2141 = load double, double* %2140, align 1
  %2142 = fdiv double %2136, %2141
  %2143 = bitcast i8* %2130 to double*
  store double %2142, double* %2143, align 1, !tbaa !2453
  %2144 = getelementptr inbounds i8, i8* %2130, i64 8
  %2145 = bitcast i8* %2144 to i64*
  store i64 %2139, i64* %2145, align 1, !tbaa !2453
  %2146 = load i64, i64* %RBP
  %2147 = sub i64 %2146, 120
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 4
  store i64 %2149, i64* %PC
  %2150 = inttoptr i64 %2147 to i64*
  %2151 = load i64, i64* %2150
  store i64 %2151, i64* %RAX, align 8, !tbaa !2428
  %2152 = load i64, i64* %RBP
  %2153 = sub i64 %2152, 164
  %2154 = load i64, i64* %PC
  %2155 = add i64 %2154, 7
  store i64 %2155, i64* %PC
  %2156 = inttoptr i64 %2153 to i32*
  %2157 = load i32, i32* %2156
  %2158 = sext i32 %2157 to i64
  store i64 %2158, i64* %RCX, align 8, !tbaa !2428
  %2159 = load i64, i64* %RAX
  %2160 = load i64, i64* %RCX
  %2161 = mul i64 %2160, 8
  %2162 = add i64 %2161, %2159
  %2163 = bitcast %union.vec128_t* %XMM2 to i8*
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 5
  store i64 %2165, i64* %PC
  %2166 = bitcast i8* %2163 to double*
  %2167 = load double, double* %2166, align 1
  %2168 = inttoptr i64 %2162 to double*
  store double %2167, double* %2168
  %2169 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2170 = load i64, i64* %RBP
  %2171 = sub i64 %2170, 164
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 8
  store i64 %2173, i64* %PC
  %2174 = inttoptr i64 %2171 to i32*
  %2175 = load i32, i32* %2174
  %2176 = sitofp i32 %2175 to double
  %2177 = bitcast i8* %2169 to double*
  store double %2176, double* %2177, align 1, !tbaa !2453
  %2178 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2179 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2180 = bitcast %union.vec128_t* %XMM0 to i8*
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 4
  store i64 %2182, i64* %PC
  %2183 = bitcast i8* %2179 to double*
  %2184 = load double, double* %2183, align 1
  %2185 = getelementptr inbounds i8, i8* %2179, i64 8
  %2186 = bitcast i8* %2185 to i64*
  %2187 = load i64, i64* %2186, align 1
  %2188 = bitcast i8* %2180 to double*
  %2189 = load double, double* %2188, align 1
  %2190 = fadd double %2184, %2189
  %2191 = bitcast i8* %2178 to double*
  store double %2190, double* %2191, align 1, !tbaa !2453
  %2192 = getelementptr inbounds i8, i8* %2178, i64 8
  %2193 = bitcast i8* %2192 to i64*
  store i64 %2187, i64* %2193, align 1, !tbaa !2453
  %2194 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2195 = load i64, i64* %RBP
  %2196 = sub i64 %2195, 48
  %2197 = load i64, i64* %PC
  %2198 = add i64 %2197, 5
  store i64 %2198, i64* %PC
  %2199 = inttoptr i64 %2196 to i32*
  %2200 = load i32, i32* %2199
  %2201 = sitofp i32 %2200 to double
  %2202 = bitcast i8* %2194 to double*
  store double %2201, double* %2202, align 1, !tbaa !2453
  %2203 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2205 = bitcast %union.vec128_t* %XMM0 to i8*
  %2206 = load i64, i64* %PC
  %2207 = add i64 %2206, 4
  store i64 %2207, i64* %PC
  %2208 = bitcast i8* %2204 to double*
  %2209 = load double, double* %2208, align 1
  %2210 = getelementptr inbounds i8, i8* %2204, i64 8
  %2211 = bitcast i8* %2210 to i64*
  %2212 = load i64, i64* %2211, align 1
  %2213 = bitcast i8* %2205 to double*
  %2214 = load double, double* %2213, align 1
  %2215 = fdiv double %2209, %2214
  %2216 = bitcast i8* %2203 to double*
  store double %2215, double* %2216, align 1, !tbaa !2453
  %2217 = getelementptr inbounds i8, i8* %2203, i64 8
  %2218 = bitcast i8* %2217 to i64*
  store i64 %2212, i64* %2218, align 1, !tbaa !2453
  %2219 = load i64, i64* %RBP
  %2220 = sub i64 %2219, 128
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 4
  store i64 %2222, i64* %PC
  %2223 = inttoptr i64 %2220 to i64*
  %2224 = load i64, i64* %2223
  store i64 %2224, i64* %RAX, align 8, !tbaa !2428
  %2225 = load i64, i64* %RBP
  %2226 = sub i64 %2225, 164
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 7
  store i64 %2228, i64* %PC
  %2229 = inttoptr i64 %2226 to i32*
  %2230 = load i32, i32* %2229
  %2231 = sext i32 %2230 to i64
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = load i64, i64* %RAX
  %2233 = load i64, i64* %RCX
  %2234 = mul i64 %2233, 8
  %2235 = add i64 %2234, %2232
  %2236 = bitcast %union.vec128_t* %XMM1 to i8*
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 5
  store i64 %2238, i64* %PC
  %2239 = bitcast i8* %2236 to double*
  %2240 = load double, double* %2239, align 1
  %2241 = inttoptr i64 %2235 to double*
  store double %2240, double* %2241
  %2242 = load i64, i64* %RBP
  %2243 = sub i64 %2242, 164
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 6
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2243 to i32*
  %2247 = load i32, i32* %2246
  %2248 = zext i32 %2247 to i64
  store i64 %2248, i64* %RAX, align 8, !tbaa !2428
  %2249 = load i64, i64* %RAX
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 3
  store i64 %2251, i64* %PC
  %2252 = trunc i64 %2249 to i32
  %2253 = add i32 1, %2252
  %2254 = zext i32 %2253 to i64
  store i64 %2254, i64* %RAX, align 8, !tbaa !2428
  %2255 = icmp ult i32 %2253, %2252
  %2256 = icmp ult i32 %2253, 1
  %2257 = or i1 %2255, %2256
  %2258 = zext i1 %2257 to i8
  %2259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2258, i8* %2259, align 1, !tbaa !2432
  %2260 = and i32 %2253, 255
  %2261 = call i32 @llvm.ctpop.i32(i32 %2260) #16
  %2262 = trunc i32 %2261 to i8
  %2263 = and i8 %2262, 1
  %2264 = xor i8 %2263, 1
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2264, i8* %2265, align 1, !tbaa !2446
  %2266 = xor i64 1, %2249
  %2267 = trunc i64 %2266 to i32
  %2268 = xor i32 %2267, %2253
  %2269 = lshr i32 %2268, 4
  %2270 = trunc i32 %2269 to i8
  %2271 = and i8 %2270, 1
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2271, i8* %2272, align 1, !tbaa !2450
  %2273 = icmp eq i32 %2253, 0
  %2274 = zext i1 %2273 to i8
  %2275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2274, i8* %2275, align 1, !tbaa !2447
  %2276 = lshr i32 %2253, 31
  %2277 = trunc i32 %2276 to i8
  %2278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2277, i8* %2278, align 1, !tbaa !2448
  %2279 = lshr i32 %2252, 31
  %2280 = xor i32 %2276, %2279
  %2281 = add nuw nsw i32 %2280, %2276
  %2282 = icmp eq i32 %2281, 2
  %2283 = zext i1 %2282 to i8
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2283, i8* %2284, align 1, !tbaa !2449
  %2285 = load i64, i64* %RBP
  %2286 = sub i64 %2285, 164
  %2287 = load i32, i32* %EAX
  %2288 = zext i32 %2287 to i64
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 6
  store i64 %2290, i64* %PC
  %2291 = inttoptr i64 %2286 to i32*
  store i32 %2287, i32* %2291
  %2292 = load i64, i64* %PC
  %2293 = sub i64 %2292, 120
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 5
  store i64 %2295, i64* %PC
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2293, i64* %2296, align 8, !tbaa !2428
  br label %block_40108a

block_401494:                                     ; preds = %block_40122b
  %2297 = load i64, i64* %RSP
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = add i64 24, %2297
  store i64 %2300, i64* %RSP, align 8, !tbaa !2428
  %2301 = icmp ult i64 %2300, %2297
  %2302 = icmp ult i64 %2300, 24
  %2303 = or i1 %2301, %2302
  %2304 = zext i1 %2303 to i8
  %2305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2304, i8* %2305, align 1, !tbaa !2432
  %2306 = trunc i64 %2300 to i32
  %2307 = and i32 %2306, 255
  %2308 = call i32 @llvm.ctpop.i32(i32 %2307) #16
  %2309 = trunc i32 %2308 to i8
  %2310 = and i8 %2309, 1
  %2311 = xor i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2311, i8* %2312, align 1, !tbaa !2446
  %2313 = xor i64 24, %2297
  %2314 = xor i64 %2313, %2300
  %2315 = lshr i64 %2314, 4
  %2316 = trunc i64 %2315 to i8
  %2317 = and i8 %2316, 1
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2317, i8* %2318, align 1, !tbaa !2450
  %2319 = icmp eq i64 %2300, 0
  %2320 = zext i1 %2319 to i8
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2320, i8* %2321, align 1, !tbaa !2447
  %2322 = lshr i64 %2300, 63
  %2323 = trunc i64 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2323, i8* %2324, align 1, !tbaa !2448
  %2325 = lshr i64 %2297, 63
  %2326 = xor i64 %2322, %2325
  %2327 = add nuw nsw i64 %2326, %2322
  %2328 = icmp eq i64 %2327, 2
  %2329 = zext i1 %2328 to i8
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2329, i8* %2330, align 1, !tbaa !2449
  %2331 = load i64, i64* %PC
  %2332 = add i64 %2331, 1
  store i64 %2332, i64* %PC
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2334 = load i64, i64* %2333, align 8, !tbaa !2428
  %2335 = add i64 %2334, 8
  %2336 = inttoptr i64 %2334 to i64*
  %2337 = load i64, i64* %2336
  store i64 %2337, i64* %RBX, align 8, !tbaa !2428
  store i64 %2335, i64* %2333, align 8, !tbaa !2428
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 2
  store i64 %2339, i64* %PC
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2341 = load i64, i64* %2340, align 8, !tbaa !2428
  %2342 = add i64 %2341, 8
  %2343 = inttoptr i64 %2341 to i64*
  %2344 = load i64, i64* %2343
  store i64 %2344, i64* %R12, align 8, !tbaa !2428
  store i64 %2342, i64* %2340, align 8, !tbaa !2428
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 2
  store i64 %2346, i64* %PC
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2348 = load i64, i64* %2347, align 8, !tbaa !2428
  %2349 = add i64 %2348, 8
  %2350 = inttoptr i64 %2348 to i64*
  %2351 = load i64, i64* %2350
  store i64 %2351, i64* %R13, align 8, !tbaa !2428
  store i64 %2349, i64* %2347, align 8, !tbaa !2428
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 2
  store i64 %2353, i64* %PC
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2355 = load i64, i64* %2354, align 8, !tbaa !2428
  %2356 = add i64 %2355, 8
  %2357 = inttoptr i64 %2355 to i64*
  %2358 = load i64, i64* %2357
  store i64 %2358, i64* %R14, align 8, !tbaa !2428
  store i64 %2356, i64* %2354, align 8, !tbaa !2428
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 2
  store i64 %2360, i64* %PC
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2362 = load i64, i64* %2361, align 8, !tbaa !2428
  %2363 = add i64 %2362, 8
  %2364 = inttoptr i64 %2362 to i64*
  %2365 = load i64, i64* %2364
  store i64 %2365, i64* %R15, align 8, !tbaa !2428
  store i64 %2363, i64* %2361, align 8, !tbaa !2428
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 1
  store i64 %2367, i64* %PC
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2369 = load i64, i64* %2368, align 8, !tbaa !2428
  %2370 = add i64 %2369, 8
  %2371 = inttoptr i64 %2369 to i64*
  %2372 = load i64, i64* %2371
  store i64 %2372, i64* %RBP, align 8, !tbaa !2428
  store i64 %2370, i64* %2368, align 8, !tbaa !2428
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 1
  store i64 %2374, i64* %PC
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2377 = load i64, i64* %2376, align 8, !tbaa !2428
  %2378 = inttoptr i64 %2377 to i64*
  %2379 = load i64, i64* %2378
  store i64 %2379, i64* %2375, align 8, !tbaa !2428
  %2380 = add i64 %2377, 8
  store i64 %2380, i64* %2376, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_40147b:                                     ; preds = %block_401244
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 5
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 5
  store i64 %2384, i64* %PC
  %2385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2382, i64* %2385, align 8, !tbaa !2428
  %2386 = load i64, i64* %RBP
  %2387 = sub i64 %2386, 164
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 6
  store i64 %2389, i64* %PC
  %2390 = inttoptr i64 %2387 to i32*
  %2391 = load i32, i32* %2390
  %2392 = zext i32 %2391 to i64
  store i64 %2392, i64* %RAX, align 8, !tbaa !2428
  %2393 = load i64, i64* %RAX
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 3
  store i64 %2395, i64* %PC
  %2396 = trunc i64 %2393 to i32
  %2397 = add i32 1, %2396
  %2398 = zext i32 %2397 to i64
  store i64 %2398, i64* %RAX, align 8, !tbaa !2428
  %2399 = icmp ult i32 %2397, %2396
  %2400 = icmp ult i32 %2397, 1
  %2401 = or i1 %2399, %2400
  %2402 = zext i1 %2401 to i8
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2402, i8* %2403, align 1, !tbaa !2432
  %2404 = and i32 %2397, 255
  %2405 = call i32 @llvm.ctpop.i32(i32 %2404) #16
  %2406 = trunc i32 %2405 to i8
  %2407 = and i8 %2406, 1
  %2408 = xor i8 %2407, 1
  %2409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2408, i8* %2409, align 1, !tbaa !2446
  %2410 = xor i64 1, %2393
  %2411 = trunc i64 %2410 to i32
  %2412 = xor i32 %2411, %2397
  %2413 = lshr i32 %2412, 4
  %2414 = trunc i32 %2413 to i8
  %2415 = and i8 %2414, 1
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2415, i8* %2416, align 1, !tbaa !2450
  %2417 = icmp eq i32 %2397, 0
  %2418 = zext i1 %2417 to i8
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2418, i8* %2419, align 1, !tbaa !2447
  %2420 = lshr i32 %2397, 31
  %2421 = trunc i32 %2420 to i8
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2421, i8* %2422, align 1, !tbaa !2448
  %2423 = lshr i32 %2396, 31
  %2424 = xor i32 %2420, %2423
  %2425 = add nuw nsw i32 %2424, %2420
  %2426 = icmp eq i32 %2425, 2
  %2427 = zext i1 %2426 to i8
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2427, i8* %2428, align 1, !tbaa !2449
  %2429 = load i64, i64* %RBP
  %2430 = sub i64 %2429, 164
  %2431 = load i32, i32* %EAX
  %2432 = zext i32 %2431 to i64
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 6
  store i64 %2434, i64* %PC
  %2435 = inttoptr i64 %2430 to i32*
  store i32 %2431, i32* %2435
  %2436 = load i64, i64* %PC
  %2437 = sub i64 %2436, 612
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 5
  store i64 %2439, i64* %PC
  %2440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2437, i64* %2440, align 8, !tbaa !2428
  br label %block_40122b

block_401253:                                     ; preds = %block_401244
  %2441 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2442 = load i64, i64* %PC
  %2443 = add i64 %2442, 8
  store i64 %2443, i64* %PC
  %2444 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 24) to double*)
  %2445 = bitcast i8* %2441 to double*
  store double %2444, double* %2445, align 1, !tbaa !2453
  %2446 = getelementptr inbounds i8, i8* %2441, i64 8
  %2447 = bitcast i8* %2446 to double*
  store double 0.000000e+00, double* %2447, align 1, !tbaa !2453
  %2448 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2449 = load i64, i64* %PC
  %2450 = add i64 %2449, 8
  store i64 %2450, i64* %PC
  %2451 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 32) to double*)
  %2452 = bitcast i8* %2448 to double*
  store double %2451, double* %2452, align 1, !tbaa !2453
  %2453 = getelementptr inbounds i8, i8* %2448, i64 8
  %2454 = bitcast i8* %2453 to double*
  store double 0.000000e+00, double* %2454, align 1, !tbaa !2453
  %2455 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2456 = load i64, i64* %RBP
  %2457 = sub i64 %2456, 164
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 8
  store i64 %2459, i64* %PC
  %2460 = inttoptr i64 %2457 to i32*
  %2461 = load i32, i32* %2460
  %2462 = sitofp i32 %2461 to double
  %2463 = bitcast i8* %2455 to double*
  store double %2462, double* %2463, align 1, !tbaa !2453
  %2464 = load i64, i64* %RBP
  %2465 = sub i64 %2464, 168
  %2466 = load i64, i64* %PC
  %2467 = add i64 %2466, 6
  store i64 %2467, i64* %PC
  %2468 = inttoptr i64 %2465 to i32*
  %2469 = load i32, i32* %2468
  %2470 = zext i32 %2469 to i64
  store i64 %2470, i64* %RAX, align 8, !tbaa !2428
  %2471 = load i64, i64* %RAX
  %2472 = load i64, i64* %PC
  %2473 = add i64 %2472, 3
  store i64 %2473, i64* %PC
  %2474 = trunc i64 %2471 to i32
  %2475 = add i32 1, %2474
  %2476 = zext i32 %2475 to i64
  store i64 %2476, i64* %RAX, align 8, !tbaa !2428
  %2477 = icmp ult i32 %2475, %2474
  %2478 = icmp ult i32 %2475, 1
  %2479 = or i1 %2477, %2478
  %2480 = zext i1 %2479 to i8
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2480, i8* %2481, align 1, !tbaa !2432
  %2482 = and i32 %2475, 255
  %2483 = call i32 @llvm.ctpop.i32(i32 %2482) #16
  %2484 = trunc i32 %2483 to i8
  %2485 = and i8 %2484, 1
  %2486 = xor i8 %2485, 1
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2486, i8* %2487, align 1, !tbaa !2446
  %2488 = xor i64 1, %2471
  %2489 = trunc i64 %2488 to i32
  %2490 = xor i32 %2489, %2475
  %2491 = lshr i32 %2490, 4
  %2492 = trunc i32 %2491 to i8
  %2493 = and i8 %2492, 1
  %2494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2493, i8* %2494, align 1, !tbaa !2450
  %2495 = icmp eq i32 %2475, 0
  %2496 = zext i1 %2495 to i8
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2496, i8* %2497, align 1, !tbaa !2447
  %2498 = lshr i32 %2475, 31
  %2499 = trunc i32 %2498 to i8
  %2500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2499, i8* %2500, align 1, !tbaa !2448
  %2501 = lshr i32 %2474, 31
  %2502 = xor i32 %2498, %2501
  %2503 = add nuw nsw i32 %2502, %2498
  %2504 = icmp eq i32 %2503, 2
  %2505 = zext i1 %2504 to i8
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2505, i8* %2506, align 1, !tbaa !2449
  %2507 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2508 = load i32, i32* %EAX
  %2509 = zext i32 %2508 to i64
  %2510 = load i64, i64* %PC
  %2511 = add i64 %2510, 4
  store i64 %2511, i64* %PC
  %2512 = sitofp i32 %2508 to double
  %2513 = bitcast i8* %2507 to double*
  store double %2512, double* %2513, align 1, !tbaa !2453
  %2514 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2515 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2516 = bitcast %union.vec128_t* %XMM3 to i8*
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 4
  store i64 %2518, i64* %PC
  %2519 = bitcast i8* %2515 to double*
  %2520 = load double, double* %2519, align 1
  %2521 = getelementptr inbounds i8, i8* %2515, i64 8
  %2522 = bitcast i8* %2521 to i64*
  %2523 = load i64, i64* %2522, align 1
  %2524 = bitcast i8* %2516 to double*
  %2525 = load double, double* %2524, align 1
  %2526 = fmul double %2520, %2525
  %2527 = bitcast i8* %2514 to double*
  store double %2526, double* %2527, align 1, !tbaa !2453
  %2528 = getelementptr inbounds i8, i8* %2514, i64 8
  %2529 = bitcast i8* %2528 to i64*
  store i64 %2523, i64* %2529, align 1, !tbaa !2453
  %2530 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2531 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2532 = bitcast %union.vec128_t* %XMM1 to i8*
  %2533 = load i64, i64* %PC
  %2534 = add i64 %2533, 4
  store i64 %2534, i64* %PC
  %2535 = bitcast i8* %2531 to double*
  %2536 = load double, double* %2535, align 1
  %2537 = getelementptr inbounds i8, i8* %2531, i64 8
  %2538 = bitcast i8* %2537 to i64*
  %2539 = load i64, i64* %2538, align 1
  %2540 = bitcast i8* %2532 to double*
  %2541 = load double, double* %2540, align 1
  %2542 = fadd double %2536, %2541
  %2543 = bitcast i8* %2530 to double*
  store double %2542, double* %2543, align 1, !tbaa !2453
  %2544 = getelementptr inbounds i8, i8* %2530, i64 8
  %2545 = bitcast i8* %2544 to i64*
  store i64 %2539, i64* %2545, align 1, !tbaa !2453
  %2546 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 52
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 5
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2548 to i32*
  %2552 = load i32, i32* %2551
  %2553 = sitofp i32 %2552 to double
  %2554 = bitcast i8* %2546 to double*
  store double %2553, double* %2554, align 1, !tbaa !2453
  %2555 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2556 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2557 = bitcast %union.vec128_t* %XMM1 to i8*
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 4
  store i64 %2559, i64* %PC
  %2560 = bitcast i8* %2556 to double*
  %2561 = load double, double* %2560, align 1
  %2562 = getelementptr inbounds i8, i8* %2556, i64 8
  %2563 = bitcast i8* %2562 to i64*
  %2564 = load i64, i64* %2563, align 1
  %2565 = bitcast i8* %2557 to double*
  %2566 = load double, double* %2565, align 1
  %2567 = fdiv double %2561, %2566
  %2568 = bitcast i8* %2555 to double*
  store double %2567, double* %2568, align 1, !tbaa !2453
  %2569 = getelementptr inbounds i8, i8* %2555, i64 8
  %2570 = bitcast i8* %2569 to i64*
  store i64 %2564, i64* %2570, align 1, !tbaa !2453
  %2571 = load i64, i64* %RBP
  %2572 = sub i64 %2571, 88
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 4
  store i64 %2574, i64* %PC
  %2575 = inttoptr i64 %2572 to i64*
  %2576 = load i64, i64* %2575
  store i64 %2576, i64* %RCX, align 8, !tbaa !2428
  %2577 = load i64, i64* %RBP
  %2578 = sub i64 %2577, 164
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 7
  store i64 %2580, i64* %PC
  %2581 = inttoptr i64 %2578 to i32*
  %2582 = load i32, i32* %2581
  %2583 = sext i32 %2582 to i64
  store i64 %2583, i64* %RDX, align 8, !tbaa !2428
  %2584 = load i64, i64* %RDX
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 7
  store i64 %2586, i64* %PC
  %2587 = sext i64 %2584 to i128
  %2588 = and i128 %2587, -18446744073709551616
  %2589 = zext i64 %2584 to i128
  %2590 = or i128 %2588, %2589
  %2591 = mul nsw i128 520, %2590
  %2592 = trunc i128 %2591 to i64
  store i64 %2592, i64* %RDX, align 8, !tbaa !2428
  %2593 = sext i64 %2592 to i128
  %2594 = icmp ne i128 %2593, %2591
  %2595 = zext i1 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2595, i8* %2596, align 1, !tbaa !2432
  %2597 = trunc i128 %2591 to i32
  %2598 = and i32 %2597, 255
  %2599 = call i32 @llvm.ctpop.i32(i32 %2598) #16
  %2600 = trunc i32 %2599 to i8
  %2601 = and i8 %2600, 1
  %2602 = xor i8 %2601, 1
  %2603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2602, i8* %2603, align 1, !tbaa !2446
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2604, align 1, !tbaa !2450
  %2605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2605, align 1, !tbaa !2447
  %2606 = lshr i64 %2592, 63
  %2607 = trunc i64 %2606 to i8
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2607, i8* %2608, align 1, !tbaa !2448
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2595, i8* %2609, align 1, !tbaa !2449
  %2610 = load i64, i64* %RCX
  %2611 = load i64, i64* %RDX
  %2612 = load i64, i64* %PC
  %2613 = add i64 %2612, 3
  store i64 %2613, i64* %PC
  %2614 = add i64 %2611, %2610
  store i64 %2614, i64* %RCX, align 8, !tbaa !2428
  %2615 = icmp ult i64 %2614, %2610
  %2616 = icmp ult i64 %2614, %2611
  %2617 = or i1 %2615, %2616
  %2618 = zext i1 %2617 to i8
  %2619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2618, i8* %2619, align 1, !tbaa !2432
  %2620 = trunc i64 %2614 to i32
  %2621 = and i32 %2620, 255
  %2622 = call i32 @llvm.ctpop.i32(i32 %2621) #16
  %2623 = trunc i32 %2622 to i8
  %2624 = and i8 %2623, 1
  %2625 = xor i8 %2624, 1
  %2626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2625, i8* %2626, align 1, !tbaa !2446
  %2627 = xor i64 %2611, %2610
  %2628 = xor i64 %2627, %2614
  %2629 = lshr i64 %2628, 4
  %2630 = trunc i64 %2629 to i8
  %2631 = and i8 %2630, 1
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2631, i8* %2632, align 1, !tbaa !2450
  %2633 = icmp eq i64 %2614, 0
  %2634 = zext i1 %2633 to i8
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2634, i8* %2635, align 1, !tbaa !2447
  %2636 = lshr i64 %2614, 63
  %2637 = trunc i64 %2636 to i8
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2637, i8* %2638, align 1, !tbaa !2448
  %2639 = lshr i64 %2610, 63
  %2640 = lshr i64 %2611, 63
  %2641 = xor i64 %2636, %2639
  %2642 = xor i64 %2636, %2640
  %2643 = add nuw nsw i64 %2641, %2642
  %2644 = icmp eq i64 %2643, 2
  %2645 = zext i1 %2644 to i8
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2645, i8* %2646, align 1, !tbaa !2449
  %2647 = load i64, i64* %RBP
  %2648 = sub i64 %2647, 168
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 7
  store i64 %2650, i64* %PC
  %2651 = inttoptr i64 %2648 to i32*
  %2652 = load i32, i32* %2651
  %2653 = sext i32 %2652 to i64
  store i64 %2653, i64* %RDX, align 8, !tbaa !2428
  %2654 = load i64, i64* %RCX
  %2655 = load i64, i64* %RDX
  %2656 = mul i64 %2655, 8
  %2657 = add i64 %2656, %2654
  %2658 = bitcast %union.vec128_t* %XMM2 to i8*
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 5
  store i64 %2660, i64* %PC
  %2661 = bitcast i8* %2658 to double*
  %2662 = load double, double* %2661, align 1
  %2663 = inttoptr i64 %2657 to double*
  store double %2662, double* %2663
  %2664 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2665 = load i64, i64* %RBP
  %2666 = sub i64 %2665, 164
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 8
  store i64 %2668, i64* %PC
  %2669 = inttoptr i64 %2666 to i32*
  %2670 = load i32, i32* %2669
  %2671 = sitofp i32 %2670 to double
  %2672 = bitcast i8* %2664 to double*
  store double %2671, double* %2672, align 1, !tbaa !2453
  %2673 = load i64, i64* %RBP
  %2674 = sub i64 %2673, 168
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 6
  store i64 %2676, i64* %PC
  %2677 = inttoptr i64 %2674 to i32*
  %2678 = load i32, i32* %2677
  %2679 = zext i32 %2678 to i64
  store i64 %2679, i64* %RAX, align 8, !tbaa !2428
  %2680 = load i64, i64* %RAX
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 3
  store i64 %2682, i64* %PC
  %2683 = trunc i64 %2680 to i32
  %2684 = add i32 2, %2683
  %2685 = zext i32 %2684 to i64
  store i64 %2685, i64* %RAX, align 8, !tbaa !2428
  %2686 = icmp ult i32 %2684, %2683
  %2687 = icmp ult i32 %2684, 2
  %2688 = or i1 %2686, %2687
  %2689 = zext i1 %2688 to i8
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2689, i8* %2690, align 1, !tbaa !2432
  %2691 = and i32 %2684, 255
  %2692 = call i32 @llvm.ctpop.i32(i32 %2691) #16
  %2693 = trunc i32 %2692 to i8
  %2694 = and i8 %2693, 1
  %2695 = xor i8 %2694, 1
  %2696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2695, i8* %2696, align 1, !tbaa !2446
  %2697 = xor i64 2, %2680
  %2698 = trunc i64 %2697 to i32
  %2699 = xor i32 %2698, %2684
  %2700 = lshr i32 %2699, 4
  %2701 = trunc i32 %2700 to i8
  %2702 = and i8 %2701, 1
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2702, i8* %2703, align 1, !tbaa !2450
  %2704 = icmp eq i32 %2684, 0
  %2705 = zext i1 %2704 to i8
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2705, i8* %2706, align 1, !tbaa !2447
  %2707 = lshr i32 %2684, 31
  %2708 = trunc i32 %2707 to i8
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2708, i8* %2709, align 1, !tbaa !2448
  %2710 = lshr i32 %2683, 31
  %2711 = xor i32 %2707, %2710
  %2712 = add nuw nsw i32 %2711, %2707
  %2713 = icmp eq i32 %2712, 2
  %2714 = zext i1 %2713 to i8
  %2715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2714, i8* %2715, align 1, !tbaa !2449
  %2716 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2717 = load i32, i32* %EAX
  %2718 = zext i32 %2717 to i64
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 4
  store i64 %2720, i64* %PC
  %2721 = sitofp i32 %2717 to double
  %2722 = bitcast i8* %2716 to double*
  store double %2721, double* %2722, align 1, !tbaa !2453
  %2723 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2724 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2725 = bitcast %union.vec128_t* %XMM2 to i8*
  %2726 = load i64, i64* %PC
  %2727 = add i64 %2726, 4
  store i64 %2727, i64* %PC
  %2728 = bitcast i8* %2724 to double*
  %2729 = load double, double* %2728, align 1
  %2730 = getelementptr inbounds i8, i8* %2724, i64 8
  %2731 = bitcast i8* %2730 to i64*
  %2732 = load i64, i64* %2731, align 1
  %2733 = bitcast i8* %2725 to double*
  %2734 = load double, double* %2733, align 1
  %2735 = fmul double %2729, %2734
  %2736 = bitcast i8* %2723 to double*
  store double %2735, double* %2736, align 1, !tbaa !2453
  %2737 = getelementptr inbounds i8, i8* %2723, i64 8
  %2738 = bitcast i8* %2737 to i64*
  store i64 %2732, i64* %2738, align 1, !tbaa !2453
  %2739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2740 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2741 = bitcast %union.vec128_t* %XMM0 to i8*
  %2742 = load i64, i64* %PC
  %2743 = add i64 %2742, 4
  store i64 %2743, i64* %PC
  %2744 = bitcast i8* %2740 to double*
  %2745 = load double, double* %2744, align 1
  %2746 = getelementptr inbounds i8, i8* %2740, i64 8
  %2747 = bitcast i8* %2746 to i64*
  %2748 = load i64, i64* %2747, align 1
  %2749 = bitcast i8* %2741 to double*
  %2750 = load double, double* %2749, align 1
  %2751 = fadd double %2745, %2750
  %2752 = bitcast i8* %2739 to double*
  store double %2751, double* %2752, align 1, !tbaa !2453
  %2753 = getelementptr inbounds i8, i8* %2739, i64 8
  %2754 = bitcast i8* %2753 to i64*
  store i64 %2748, i64* %2754, align 1, !tbaa !2453
  %2755 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2756 = load i64, i64* %RBP
  %2757 = sub i64 %2756, 52
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 5
  store i64 %2759, i64* %PC
  %2760 = inttoptr i64 %2757 to i32*
  %2761 = load i32, i32* %2760
  %2762 = sitofp i32 %2761 to double
  %2763 = bitcast i8* %2755 to double*
  store double %2762, double* %2763, align 1, !tbaa !2453
  %2764 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2765 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2766 = bitcast %union.vec128_t* %XMM0 to i8*
  %2767 = load i64, i64* %PC
  %2768 = add i64 %2767, 4
  store i64 %2768, i64* %PC
  %2769 = bitcast i8* %2765 to double*
  %2770 = load double, double* %2769, align 1
  %2771 = getelementptr inbounds i8, i8* %2765, i64 8
  %2772 = bitcast i8* %2771 to i64*
  %2773 = load i64, i64* %2772, align 1
  %2774 = bitcast i8* %2766 to double*
  %2775 = load double, double* %2774, align 1
  %2776 = fdiv double %2770, %2775
  %2777 = bitcast i8* %2764 to double*
  store double %2776, double* %2777, align 1, !tbaa !2453
  %2778 = getelementptr inbounds i8, i8* %2764, i64 8
  %2779 = bitcast i8* %2778 to i64*
  store i64 %2773, i64* %2779, align 1, !tbaa !2453
  %2780 = load i64, i64* %RBP
  %2781 = sub i64 %2780, 80
  %2782 = load i64, i64* %PC
  %2783 = add i64 %2782, 4
  store i64 %2783, i64* %PC
  %2784 = inttoptr i64 %2781 to i64*
  %2785 = load i64, i64* %2784
  store i64 %2785, i64* %RCX, align 8, !tbaa !2428
  %2786 = load i64, i64* %RBP
  %2787 = sub i64 %2786, 164
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 7
  store i64 %2789, i64* %PC
  %2790 = inttoptr i64 %2787 to i32*
  %2791 = load i32, i32* %2790
  %2792 = sext i32 %2791 to i64
  store i64 %2792, i64* %RDX, align 8, !tbaa !2428
  %2793 = load i64, i64* %RDX
  %2794 = load i64, i64* %PC
  %2795 = add i64 %2794, 7
  store i64 %2795, i64* %PC
  %2796 = sext i64 %2793 to i128
  %2797 = and i128 %2796, -18446744073709551616
  %2798 = zext i64 %2793 to i128
  %2799 = or i128 %2797, %2798
  %2800 = mul nsw i128 520, %2799
  %2801 = trunc i128 %2800 to i64
  store i64 %2801, i64* %RDX, align 8, !tbaa !2428
  %2802 = sext i64 %2801 to i128
  %2803 = icmp ne i128 %2802, %2800
  %2804 = zext i1 %2803 to i8
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2804, i8* %2805, align 1, !tbaa !2432
  %2806 = trunc i128 %2800 to i32
  %2807 = and i32 %2806, 255
  %2808 = call i32 @llvm.ctpop.i32(i32 %2807) #16
  %2809 = trunc i32 %2808 to i8
  %2810 = and i8 %2809, 1
  %2811 = xor i8 %2810, 1
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2811, i8* %2812, align 1, !tbaa !2446
  %2813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2813, align 1, !tbaa !2450
  %2814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2814, align 1, !tbaa !2447
  %2815 = lshr i64 %2801, 63
  %2816 = trunc i64 %2815 to i8
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2816, i8* %2817, align 1, !tbaa !2448
  %2818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2804, i8* %2818, align 1, !tbaa !2449
  %2819 = load i64, i64* %RCX
  %2820 = load i64, i64* %RDX
  %2821 = load i64, i64* %PC
  %2822 = add i64 %2821, 3
  store i64 %2822, i64* %PC
  %2823 = add i64 %2820, %2819
  store i64 %2823, i64* %RCX, align 8, !tbaa !2428
  %2824 = icmp ult i64 %2823, %2819
  %2825 = icmp ult i64 %2823, %2820
  %2826 = or i1 %2824, %2825
  %2827 = zext i1 %2826 to i8
  %2828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2827, i8* %2828, align 1, !tbaa !2432
  %2829 = trunc i64 %2823 to i32
  %2830 = and i32 %2829, 255
  %2831 = call i32 @llvm.ctpop.i32(i32 %2830) #16
  %2832 = trunc i32 %2831 to i8
  %2833 = and i8 %2832, 1
  %2834 = xor i8 %2833, 1
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2834, i8* %2835, align 1, !tbaa !2446
  %2836 = xor i64 %2820, %2819
  %2837 = xor i64 %2836, %2823
  %2838 = lshr i64 %2837, 4
  %2839 = trunc i64 %2838 to i8
  %2840 = and i8 %2839, 1
  %2841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2840, i8* %2841, align 1, !tbaa !2450
  %2842 = icmp eq i64 %2823, 0
  %2843 = zext i1 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2843, i8* %2844, align 1, !tbaa !2447
  %2845 = lshr i64 %2823, 63
  %2846 = trunc i64 %2845 to i8
  %2847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2846, i8* %2847, align 1, !tbaa !2448
  %2848 = lshr i64 %2819, 63
  %2849 = lshr i64 %2820, 63
  %2850 = xor i64 %2845, %2848
  %2851 = xor i64 %2845, %2849
  %2852 = add nuw nsw i64 %2850, %2851
  %2853 = icmp eq i64 %2852, 2
  %2854 = zext i1 %2853 to i8
  %2855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2854, i8* %2855, align 1, !tbaa !2449
  %2856 = load i64, i64* %RBP
  %2857 = sub i64 %2856, 168
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 7
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to i32*
  %2861 = load i32, i32* %2860
  %2862 = sext i32 %2861 to i64
  store i64 %2862, i64* %RDX, align 8, !tbaa !2428
  %2863 = load i64, i64* %RCX
  %2864 = load i64, i64* %RDX
  %2865 = mul i64 %2864, 8
  %2866 = add i64 %2865, %2863
  %2867 = bitcast %union.vec128_t* %XMM1 to i8*
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 5
  store i64 %2869, i64* %PC
  %2870 = bitcast i8* %2867 to double*
  %2871 = load double, double* %2870, align 1
  %2872 = inttoptr i64 %2866 to double*
  store double %2871, double* %2872
  %2873 = load i64, i64* %RBP
  %2874 = sub i64 %2873, 172
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 10
  store i64 %2876, i64* %PC
  %2877 = inttoptr i64 %2874 to i32*
  store i32 0, i32* %2877
  br label %block_4012fb

block_401111:                                     ; preds = %block_401107, %block_401120
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.5, %block_401107 ], [ %MEMORY.3, %block_401120 ]
  %2878 = load i64, i64* %RBP
  %2879 = sub i64 %2878, 164
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 6
  store i64 %2881, i64* %PC
  %2882 = inttoptr i64 %2879 to i32*
  %2883 = load i32, i32* %2882
  %2884 = zext i32 %2883 to i64
  store i64 %2884, i64* %RAX, align 8, !tbaa !2428
  %2885 = load i32, i32* %EAX
  %2886 = zext i32 %2885 to i64
  %2887 = load i64, i64* %RBP
  %2888 = sub i64 %2887, 48
  %2889 = load i64, i64* %PC
  %2890 = add i64 %2889, 3
  store i64 %2890, i64* %PC
  %2891 = inttoptr i64 %2888 to i32*
  %2892 = load i32, i32* %2891
  %2893 = sub i32 %2885, %2892
  %2894 = icmp ult i32 %2885, %2892
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2895, i8* %2896, align 1, !tbaa !2432
  %2897 = and i32 %2893, 255
  %2898 = call i32 @llvm.ctpop.i32(i32 %2897) #16
  %2899 = trunc i32 %2898 to i8
  %2900 = and i8 %2899, 1
  %2901 = xor i8 %2900, 1
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2901, i8* %2902, align 1, !tbaa !2446
  %2903 = xor i32 %2892, %2885
  %2904 = xor i32 %2903, %2893
  %2905 = lshr i32 %2904, 4
  %2906 = trunc i32 %2905 to i8
  %2907 = and i8 %2906, 1
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2907, i8* %2908, align 1, !tbaa !2450
  %2909 = icmp eq i32 %2893, 0
  %2910 = zext i1 %2909 to i8
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2910, i8* %2911, align 1, !tbaa !2447
  %2912 = lshr i32 %2893, 31
  %2913 = trunc i32 %2912 to i8
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2913, i8* %2914, align 1, !tbaa !2448
  %2915 = lshr i32 %2885, 31
  %2916 = lshr i32 %2892, 31
  %2917 = xor i32 %2916, %2915
  %2918 = xor i32 %2912, %2915
  %2919 = add nuw nsw i32 %2918, %2917
  %2920 = icmp eq i32 %2919, 2
  %2921 = zext i1 %2920 to i8
  %2922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2921, i8* %2922, align 1, !tbaa !2449
  %2923 = load i64, i64* %PC
  %2924 = add i64 %2923, 122
  %2925 = load i64, i64* %PC
  %2926 = add i64 %2925, 6
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 6
  store i64 %2928, i64* %PC
  %2929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2930 = load i8, i8* %2929, align 1, !tbaa !2447
  %2931 = icmp eq i8 %2930, 0
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2933 = load i8, i8* %2932, align 1, !tbaa !2448
  %2934 = icmp ne i8 %2933, 0
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2936 = load i8, i8* %2935, align 1, !tbaa !2449
  %2937 = icmp ne i8 %2936, 0
  %2938 = xor i1 %2934, %2937
  %2939 = xor i1 %2938, true
  %2940 = and i1 %2931, %2939
  %2941 = zext i1 %2940 to i8
  store i8 %2941, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2943 = select i1 %2940, i64 %2924, i64 %2926
  store i64 %2943, i64* %2942, align 8, !tbaa !2428
  %2944 = load i8, i8* %BRANCH_TAKEN
  %2945 = icmp eq i8 %2944, 1
  br i1 %2945, label %block_401194, label %block_401120

block_40119e:                                     ; preds = %block_4011ad, %block_401194
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_401194 ], [ %MEMORY.4, %block_4011ad ]
  %2946 = load i64, i64* %RBP
  %2947 = sub i64 %2946, 164
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 6
  store i64 %2949, i64* %PC
  %2950 = inttoptr i64 %2947 to i32*
  %2951 = load i32, i32* %2950
  %2952 = zext i32 %2951 to i64
  store i64 %2952, i64* %RAX, align 8, !tbaa !2428
  %2953 = load i32, i32* %EAX
  %2954 = zext i32 %2953 to i64
  %2955 = load i64, i64* %RBP
  %2956 = sub i64 %2955, 52
  %2957 = load i64, i64* %PC
  %2958 = add i64 %2957, 3
  store i64 %2958, i64* %PC
  %2959 = inttoptr i64 %2956 to i32*
  %2960 = load i32, i32* %2959
  %2961 = sub i32 %2953, %2960
  %2962 = icmp ult i32 %2953, %2960
  %2963 = zext i1 %2962 to i8
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2963, i8* %2964, align 1, !tbaa !2432
  %2965 = and i32 %2961, 255
  %2966 = call i32 @llvm.ctpop.i32(i32 %2965) #16
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  %2969 = xor i8 %2968, 1
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2969, i8* %2970, align 1, !tbaa !2446
  %2971 = xor i32 %2960, %2953
  %2972 = xor i32 %2971, %2961
  %2973 = lshr i32 %2972, 4
  %2974 = trunc i32 %2973 to i8
  %2975 = and i8 %2974, 1
  %2976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2975, i8* %2976, align 1, !tbaa !2450
  %2977 = icmp eq i32 %2961, 0
  %2978 = zext i1 %2977 to i8
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2978, i8* %2979, align 1, !tbaa !2447
  %2980 = lshr i32 %2961, 31
  %2981 = trunc i32 %2980 to i8
  %2982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2981, i8* %2982, align 1, !tbaa !2448
  %2983 = lshr i32 %2953, 31
  %2984 = lshr i32 %2960, 31
  %2985 = xor i32 %2984, %2983
  %2986 = xor i32 %2980, %2983
  %2987 = add nuw nsw i32 %2986, %2985
  %2988 = icmp eq i32 %2987, 2
  %2989 = zext i1 %2988 to i8
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2989, i8* %2990, align 1, !tbaa !2449
  %2991 = load i64, i64* %PC
  %2992 = add i64 %2991, 122
  %2993 = load i64, i64* %PC
  %2994 = add i64 %2993, 6
  %2995 = load i64, i64* %PC
  %2996 = add i64 %2995, 6
  store i64 %2996, i64* %PC
  %2997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2998 = load i8, i8* %2997, align 1, !tbaa !2447
  %2999 = icmp eq i8 %2998, 0
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3001 = load i8, i8* %3000, align 1, !tbaa !2448
  %3002 = icmp ne i8 %3001, 0
  %3003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3004 = load i8, i8* %3003, align 1, !tbaa !2449
  %3005 = icmp ne i8 %3004, 0
  %3006 = xor i1 %3002, %3005
  %3007 = xor i1 %3006, true
  %3008 = and i1 %2999, %3007
  %3009 = zext i1 %3008 to i8
  store i8 %3009, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3011 = select i1 %3008, i64 %2992, i64 %2994
  store i64 %3011, i64* %3010, align 8, !tbaa !2428
  %3012 = load i8, i8* %BRANCH_TAKEN
  %3013 = icmp eq i8 %3012, 1
  br i1 %3013, label %block_401221, label %block_4011ad

block_40108a:                                     ; preds = %block_401099, %block_400fc0
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_400fc0 ], [ %MEMORY.5, %block_401099 ]
  %3014 = load i64, i64* %RBP
  %3015 = sub i64 %3014, 164
  %3016 = load i64, i64* %PC
  %3017 = add i64 %3016, 6
  store i64 %3017, i64* %PC
  %3018 = inttoptr i64 %3015 to i32*
  %3019 = load i32, i32* %3018
  %3020 = zext i32 %3019 to i64
  store i64 %3020, i64* %RAX, align 8, !tbaa !2428
  %3021 = load i32, i32* %EAX
  %3022 = zext i32 %3021 to i64
  %3023 = load i64, i64* %RBP
  %3024 = sub i64 %3023, 44
  %3025 = load i64, i64* %PC
  %3026 = add i64 %3025, 3
  store i64 %3026, i64* %PC
  %3027 = inttoptr i64 %3024 to i32*
  %3028 = load i32, i32* %3027
  %3029 = sub i32 %3021, %3028
  %3030 = icmp ult i32 %3021, %3028
  %3031 = zext i1 %3030 to i8
  %3032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3031, i8* %3032, align 1, !tbaa !2432
  %3033 = and i32 %3029, 255
  %3034 = call i32 @llvm.ctpop.i32(i32 %3033) #16
  %3035 = trunc i32 %3034 to i8
  %3036 = and i8 %3035, 1
  %3037 = xor i8 %3036, 1
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3037, i8* %3038, align 1, !tbaa !2446
  %3039 = xor i32 %3028, %3021
  %3040 = xor i32 %3039, %3029
  %3041 = lshr i32 %3040, 4
  %3042 = trunc i32 %3041 to i8
  %3043 = and i8 %3042, 1
  %3044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3043, i8* %3044, align 1, !tbaa !2450
  %3045 = icmp eq i32 %3029, 0
  %3046 = zext i1 %3045 to i8
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3046, i8* %3047, align 1, !tbaa !2447
  %3048 = lshr i32 %3029, 31
  %3049 = trunc i32 %3048 to i8
  %3050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3049, i8* %3050, align 1, !tbaa !2448
  %3051 = lshr i32 %3021, 31
  %3052 = lshr i32 %3028, 31
  %3053 = xor i32 %3052, %3051
  %3054 = xor i32 %3048, %3051
  %3055 = add nuw nsw i32 %3054, %3053
  %3056 = icmp eq i32 %3055, 2
  %3057 = zext i1 %3056 to i8
  %3058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3057, i8* %3058, align 1, !tbaa !2449
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 116
  %3061 = load i64, i64* %PC
  %3062 = add i64 %3061, 6
  %3063 = load i64, i64* %PC
  %3064 = add i64 %3063, 6
  store i64 %3064, i64* %PC
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3066 = load i8, i8* %3065, align 1, !tbaa !2447
  %3067 = icmp eq i8 %3066, 0
  %3068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3069 = load i8, i8* %3068, align 1, !tbaa !2448
  %3070 = icmp ne i8 %3069, 0
  %3071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3072 = load i8, i8* %3071, align 1, !tbaa !2449
  %3073 = icmp ne i8 %3072, 0
  %3074 = xor i1 %3070, %3073
  %3075 = xor i1 %3074, true
  %3076 = and i1 %3067, %3075
  %3077 = zext i1 %3076 to i8
  store i8 %3077, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3079 = select i1 %3076, i64 %3060, i64 %3062
  store i64 %3079, i64* %3078, align 8, !tbaa !2428
  %3080 = load i8, i8* %BRANCH_TAKEN
  %3081 = icmp eq i8 %3080, 1
  br i1 %3081, label %block_401107, label %block_401099

block_401107:                                     ; preds = %block_40108a
  %3082 = load i64, i64* %RBP
  %3083 = sub i64 %3082, 164
  %3084 = load i64, i64* %PC
  %3085 = add i64 %3084, 10
  store i64 %3085, i64* %PC
  %3086 = inttoptr i64 %3083 to i32*
  store i32 0, i32* %3086
  br label %block_401111
}

; Function Attrs: noinline
define %struct.Memory* @sub_400830_xmalloc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400830:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 32
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 32
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2432
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2446
  %61 = xor i64 32, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2447
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 5
  store i64 %84, i64* %PC
  store i64 32, i64* %RCX, align 8, !tbaa !2428
  %85 = load i32, i32* %ECX
  %86 = zext i32 %85 to i64
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 2
  store i64 %88, i64* %PC
  %89 = and i64 %86, 4294967295
  store i64 %89, i64* %RSI, align 8, !tbaa !2428
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %RDI
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 16
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 8
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i64*
  store i64 0, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %RDX, align 8, !tbaa !2428
  %107 = load i64, i64* %RAX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = sub i64 %110, 646
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %111, i64* %120, align 8, !tbaa !2428
  %121 = load i64, i64* %PC
  %122 = call %struct.Memory* @ext_604108_posix_memalign(%struct.State* %0, i64 %121, %struct.Memory* %2)
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 20
  %125 = load i32, i32* %EAX
  %126 = zext i32 %125 to i64
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 16
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 5
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %136, align 1, !tbaa !2432
  %137 = trunc i64 %135 to i32
  %138 = and i32 %137, 255
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #16
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %142, i8* %143, align 1, !tbaa !2446
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %144, align 1, !tbaa !2450
  %145 = icmp eq i64 %135, 0
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %146, i8* %147, align 1, !tbaa !2447
  %148 = lshr i64 %135, 63
  %149 = trunc i64 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %149, i8* %150, align 1, !tbaa !2448
  %151 = lshr i64 %135, 63
  %152 = xor i64 %148, %151
  %153 = add nuw nsw i64 %152, %151
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 16
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 6
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 6
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %164 = load i8, i8* %163, align 1, !tbaa !2447
  store i8 %164, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %166 = icmp ne i8 %164, 0
  %167 = select i1 %166, i64 %158, i64 %160
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %168 = load i8, i8* %BRANCH_TAKEN
  %169 = icmp eq i8 %168, 1
  br i1 %169, label %block_400873, label %block_400869

block_400873:                                     ; preds = %block_400869, %block_400830
  %MEMORY.0 = phi %struct.Memory* [ %122, %block_400830 ], [ %122, %block_400869 ]
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 10
  store i64 %171, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 119), i64* %RSI, align 8, !tbaa !2428
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 8
  store i64 %173, i64* %PC
  %174 = load i64, i64* @stderr
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 2
  store i64 %176, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = sub i64 %177, 727
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 5
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 5
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %184 = load i64, i64* %183, align 8, !tbaa !2428
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %180, i64* %186
  store i64 %185, i64* %183, align 8, !tbaa !2428
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %178, i64* %187, align 8, !tbaa !2428
  %188 = load i64, i64* %PC
  %189 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %188, %struct.Memory* %MEMORY.0)
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 5
  store i64 %191, i64* %PC
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 24
  %194 = load i32, i32* %EAX
  %195 = zext i32 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %193 to i32*
  store i32 %194, i32* %198
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 724
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @ext_4005c0_exit(%struct.State* %0, i64 %210, %struct.Memory* %189)
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %212, %struct.Memory* %211)
  ret %struct.Memory* %213

block_400869:                                     ; preds = %block_400830
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 20
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %220, align 1, !tbaa !2432
  %221 = and i32 %219, 255
  %222 = call i32 @llvm.ctpop.i32(i32 %221) #16
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %225, i8* %226, align 1, !tbaa !2446
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %227, align 1, !tbaa !2450
  %228 = icmp eq i32 %219, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = lshr i32 %219, 31
  %232 = trunc i32 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2448
  %234 = lshr i32 %219, 31
  %235 = xor i32 %231, %234
  %236 = add nuw nsw i32 %235, %234
  %237 = icmp eq i32 %236, 2
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %238, i8* %239, align 1, !tbaa !2449
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 44
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 6
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 6
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %247 = load i8, i8* %246, align 1, !tbaa !2447
  store i8 %247, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %249 = icmp ne i8 %247, 0
  %250 = select i1 %249, i64 %241, i64 %243
  store i64 %250, i64* %248, align 8, !tbaa !2428
  %251 = load i8, i8* %BRANCH_TAKEN
  %252 = icmp eq i8 %251, 1
  br i1 %252, label %block_400899, label %block_400873

block_400899:                                     ; preds = %block_400869
  %253 = load i64, i64* %RBP
  %254 = sub i64 %253, 16
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %254 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = load i64, i64* %RSP
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 32, %259
  store i64 %262, i64* %RSP, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 32
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 32, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2450
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2447
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2448
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2449
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %296 = load i64, i64* %295, align 8, !tbaa !2428
  %297 = add i64 %296, 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RBP, align 8, !tbaa !2428
  store i64 %297, i64* %295, align 8, !tbaa !2428
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 1
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %302, align 8, !tbaa !2428
  %307 = add i64 %304, 8
  store i64 %307, i64* %303, align 8, !tbaa !2428
  ret %struct.Memory* %122
}

; Function Attrs: noinline
define %struct.Memory* @sub_400550__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400550:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2449
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2449
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2447
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400562, label %block_400560

block_400560:                                     ; preds = %block_400550
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400562

block_400562:                                     ; preds = %block_400560, %block_400550
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400550 ], [ %92, %block_400560 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2448
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2449
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006d0_polybench_flush_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 32
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 32
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2432
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2446
  %55 = xor i64 32, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2447
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2449
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %75 = load i32, i32* %EAX
  %76 = zext i32 %75 to i64
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 2
  store i64 %78, i64* %PC
  %79 = and i64 %76, 4294967295
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 4
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  store i32 4194560, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  %90 = load i32, i32* %89
  %91 = sext i32 %90 to i64
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %92 = load i64, i64* %PC
  %93 = sub i64 %92, 330
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 5
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %99 = load i64, i64* %98, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %95, i64* %101
  store i64 %100, i64* %98, align 8, !tbaa !2428
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %93, i64* %102, align 8, !tbaa !2428
  %103 = load i64, i64* %PC
  %104 = call %struct.Memory* @ext_6040f0_calloc(%struct.State* %0, i64 %103, %struct.Memory* %2)
  %105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %106 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %107 = bitcast %union.vec128_t* %XMM0 to i8*
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = bitcast i8* %106 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = getelementptr inbounds i8, i8* %106, i64 8
  %113 = bitcast i8* %112 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = bitcast i8* %107 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = getelementptr inbounds i8, i8* %107, i64 8
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = xor i64 %116, %111
  %121 = xor i64 %119, %114
  %122 = trunc i64 %120 to i32
  %123 = lshr i64 %120, 32
  %124 = trunc i64 %123 to i32
  %125 = bitcast i8* %105 to i32*
  store i32 %122, i32* %125, align 1, !tbaa !2452
  %126 = getelementptr inbounds i8, i8* %105, i64 4
  %127 = bitcast i8* %126 to i32*
  store i32 %124, i32* %127, align 1, !tbaa !2452
  %128 = trunc i64 %121 to i32
  %129 = getelementptr inbounds i8, i8* %105, i64 8
  %130 = bitcast i8* %129 to i32*
  store i32 %128, i32* %130, align 1, !tbaa !2452
  %131 = lshr i64 %121, 32
  %132 = trunc i64 %131 to i32
  %133 = getelementptr inbounds i8, i8* %105, i64 12
  %134 = bitcast i8* %133 to i32*
  store i32 %132, i32* %134, align 1, !tbaa !2452
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 16
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %140
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 32
  %143 = bitcast %union.vec128_t* %XMM0 to i8*
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  %146 = bitcast i8* %143 to double*
  %147 = load double, double* %146, align 1
  %148 = inttoptr i64 %142 to double*
  store double %147, double* %148
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 20
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 7
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i32*
  store i32 0, i32* %153
  br label %block_400702

block_40070e:                                     ; preds = %block_400702
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 20
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i32*
  %159 = load i32, i32* %158
  %160 = sext i32 %159 to i64
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %162 = load i64, i64* %RAX
  %163 = load i64, i64* %RCX
  %164 = mul i64 %163, 8
  %165 = add i64 %164, %162
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to double*
  %169 = load double, double* %168
  %170 = bitcast i8* %161 to double*
  store double %169, double* %170, align 1, !tbaa !2453
  %171 = getelementptr inbounds i8, i8* %161, i64 8
  %172 = bitcast i8* %171 to double*
  store double 0.000000e+00, double* %172, align 1, !tbaa !2453
  %173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 32
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 5
  store i64 %178, i64* %PC
  %179 = bitcast i8* %174 to double*
  %180 = load double, double* %179, align 1
  %181 = getelementptr inbounds i8, i8* %174, i64 8
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = inttoptr i64 %176 to double*
  %185 = load double, double* %184
  %186 = fadd double %180, %185
  %187 = bitcast i8* %173 to double*
  store double %186, double* %187, align 1, !tbaa !2453
  %188 = getelementptr inbounds i8, i8* %173, i64 8
  %189 = bitcast i8* %188 to i64*
  store i64 %183, i64* %189, align 1, !tbaa !2453
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 32
  %192 = bitcast %union.vec128_t* %XMM0 to i8*
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  store i64 %194, i64* %PC
  %195 = bitcast i8* %192 to double*
  %196 = load double, double* %195, align 1
  %197 = inttoptr i64 %191 to double*
  store double %196, double* %197
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 20
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i32*
  %203 = load i32, i32* %202
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 3
  store i64 %207, i64* %PC
  %208 = trunc i64 %205 to i32
  %209 = add i32 1, %208
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = icmp ult i32 %209, %208
  %212 = icmp ult i32 %209, 1
  %213 = or i1 %211, %212
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %214, i8* %215, align 1, !tbaa !2432
  %216 = and i32 %209, 255
  %217 = call i32 @llvm.ctpop.i32(i32 %216) #16
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %220, i8* %221, align 1, !tbaa !2446
  %222 = xor i64 1, %205
  %223 = trunc i64 %222 to i32
  %224 = xor i32 %223, %209
  %225 = lshr i32 %224, 4
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %227, i8* %228, align 1, !tbaa !2450
  %229 = icmp eq i32 %209, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2447
  %232 = lshr i32 %209, 31
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2448
  %235 = lshr i32 %208, 31
  %236 = xor i32 %232, %235
  %237 = add nuw nsw i32 %236, %232
  %238 = icmp eq i32 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2449
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 20
  %243 = load i32, i32* %EAX
  %244 = zext i32 %243 to i64
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 3
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %242 to i32*
  store i32 %243, i32* %247
  %248 = load i64, i64* %PC
  %249 = sub i64 %248, 44
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %249, i64* %252, align 8, !tbaa !2428
  br label %block_400702

block_400733:                                     ; preds = %block_400702
  %253 = load i64, i64* %RAX
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 3
  store i64 %255, i64* %PC
  store i64 %253, i64* %RDI, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = sub i64 %256, 442
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 5
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %263 = load i64, i64* %262, align 8, !tbaa !2428
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  store i64 %259, i64* %265
  store i64 %264, i64* %262, align 8, !tbaa !2428
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %257, i64* %266, align 8, !tbaa !2428
  %267 = load i64, i64* %PC
  %268 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %267, %struct.Memory* %MEMORY.0)
  %269 = load i64, i64* %RSP
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC
  %272 = add i64 32, %269
  store i64 %272, i64* %RSP, align 8, !tbaa !2428
  %273 = icmp ult i64 %272, %269
  %274 = icmp ult i64 %272, 32
  %275 = or i1 %273, %274
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %276, i8* %277, align 1, !tbaa !2432
  %278 = trunc i64 %272 to i32
  %279 = and i32 %278, 255
  %280 = call i32 @llvm.ctpop.i32(i32 %279) #16
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %283, i8* %284, align 1, !tbaa !2446
  %285 = xor i64 32, %269
  %286 = xor i64 %285, %272
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %289, i8* %290, align 1, !tbaa !2450
  %291 = icmp eq i64 %272, 0
  %292 = zext i1 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %292, i8* %293, align 1, !tbaa !2447
  %294 = lshr i64 %272, 63
  %295 = trunc i64 %294 to i8
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %295, i8* %296, align 1, !tbaa !2448
  %297 = lshr i64 %269, 63
  %298 = xor i64 %294, %297
  %299 = add nuw nsw i64 %298, %294
  %300 = icmp eq i64 %299, 2
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %301, i8* %302, align 1, !tbaa !2449
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 1
  store i64 %304, i64* %PC
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %306 = load i64, i64* %305, align 8, !tbaa !2428
  %307 = add i64 %306, 8
  %308 = inttoptr i64 %306 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RBP, align 8, !tbaa !2428
  store i64 %307, i64* %305, align 8, !tbaa !2428
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 1
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %314 = load i64, i64* %313, align 8, !tbaa !2428
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %312, align 8, !tbaa !2428
  %317 = add i64 %314, 8
  store i64 %317, i64* %313, align 8, !tbaa !2428
  ret %struct.Memory* %268

block_400702:                                     ; preds = %block_40070e, %block_4006d0
  %MEMORY.0 = phi %struct.Memory* [ %104, %block_4006d0 ], [ %MEMORY.0, %block_40070e ]
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 20
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 3
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i32*
  %323 = load i32, i32* %322
  %324 = zext i32 %323 to i64
  store i64 %324, i64* %RAX, align 8, !tbaa !2428
  %325 = load i32, i32* %EAX
  %326 = zext i32 %325 to i64
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 4
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331
  %333 = sub i32 %325, %332
  %334 = icmp ult i32 %325, %332
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %335, i8* %336, align 1, !tbaa !2432
  %337 = and i32 %333, 255
  %338 = call i32 @llvm.ctpop.i32(i32 %337) #16
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %341, i8* %342, align 1, !tbaa !2446
  %343 = xor i32 %332, %325
  %344 = xor i32 %343, %333
  %345 = lshr i32 %344, 4
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %347, i8* %348, align 1, !tbaa !2450
  %349 = icmp eq i32 %333, 0
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %350, i8* %351, align 1, !tbaa !2447
  %352 = lshr i32 %333, 31
  %353 = trunc i32 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %353, i8* %354, align 1, !tbaa !2448
  %355 = lshr i32 %325, 31
  %356 = lshr i32 %332, 31
  %357 = xor i32 %356, %355
  %358 = xor i32 %352, %355
  %359 = add nuw nsw i32 %358, %357
  %360 = icmp eq i32 %359, 2
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %361, i8* %362, align 1, !tbaa !2449
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 43
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 6
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 6
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %370 = load i8, i8* %369, align 1, !tbaa !2448
  %371 = icmp ne i8 %370, 0
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %373 = load i8, i8* %372, align 1, !tbaa !2449
  %374 = icmp ne i8 %373, 0
  %375 = xor i1 %371, %374
  %376 = xor i1 %375, true
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %379 = select i1 %375, i64 %366, i64 %364
  store i64 %379, i64* %378, align 8, !tbaa !2428
  %380 = load i8, i8* %BRANCH_TAKEN
  %381 = icmp eq i8 %380, 1
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 16
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  store i64 %387, i64* %RAX, align 8, !tbaa !2428
  br i1 %381, label %block_400733, label %block_40070e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008b0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4008b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 3
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 21
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R10 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 23
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R11 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 25
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R12 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 27
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R13 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 29
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R14 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %61 = getelementptr inbounds %struct.GPR, %struct.GPR* %60, i32 0, i32 31
  %62 = getelementptr inbounds %struct.Reg, %struct.Reg* %61, i32 0, i32 0
  %R15 = bitcast %union.anon* %62 to i64*
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %64 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %63, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %64 to %"class.std::bitset"*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %66 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %65, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %66 to %"class.std::bitset"*
  %67 = load i64, i64* %RBP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 1
  store i64 %69, i64* %PC
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %71 = load i64, i64* %70, align 8, !tbaa !2428
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %67, i64* %73
  store i64 %72, i64* %70, align 8, !tbaa !2428
  %74 = load i64, i64* %RSP
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 3
  store i64 %76, i64* %PC
  store i64 %74, i64* %RBP, align 8, !tbaa !2428
  %77 = load i64, i64* %R15
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 2
  store i64 %79, i64* %PC
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %81 = load i64, i64* %80, align 8, !tbaa !2428
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %77, i64* %83
  store i64 %82, i64* %80, align 8, !tbaa !2428
  %84 = load i64, i64* %R14
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 2
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %R13
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = load i64, i64* %R12
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 2
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = load i64, i64* %RBX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 1
  store i64 %107, i64* %PC
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %109 = load i64, i64* %108, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %105, i64* %111
  store i64 %110, i64* %108, align 8, !tbaa !2428
  %112 = load i64, i64* %RSP
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 7
  store i64 %114, i64* %PC
  %115 = sub i64 %112, 392
  store i64 %115, i64* %RSP, align 8, !tbaa !2428
  %116 = icmp ult i64 %112, 392
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %117, i8* %118, align 1, !tbaa !2432
  %119 = trunc i64 %115 to i32
  %120 = and i32 %119, 255
  %121 = call i32 @llvm.ctpop.i32(i32 %120) #16
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %124, i8* %125, align 1, !tbaa !2446
  %126 = xor i64 392, %112
  %127 = xor i64 %126, %115
  %128 = lshr i64 %127, 4
  %129 = trunc i64 %128 to i8
  %130 = and i8 %129, 1
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = icmp eq i64 %115, 0
  %133 = zext i1 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = lshr i64 %115, 63
  %136 = trunc i64 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = lshr i64 %112, 63
  %139 = xor i64 %135, %138
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  store i64 4225, i64* %RAX, align 8, !tbaa !2428
  %146 = load i32, i32* %EAX
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 2
  store i64 %149, i64* %PC
  %150 = and i64 %147, 4294967295
  store i64 %150, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 44
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 7
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to i32*
  store i32 0, i32* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 48
  %160 = load i32, i32* %EDI
  %161 = zext i32 %160 to i64
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %159 to i32*
  store i32 %160, i32* %164
  %165 = load i64, i64* %RBP
  %166 = sub i64 %165, 56
  %167 = load i64, i64* %RSI
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 60
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i32*
  store i32 64, i32* %175
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 64
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  store i32 64, i32* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 68
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i32*
  store i32 64, i32* %185
  %186 = load i64, i64* %RCX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  store i64 %186, i64* %RDI, align 8, !tbaa !2428
  %189 = load i32, i32* %EAX
  %190 = zext i32 %189 to i64
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 2
  store i64 %192, i64* %PC
  %193 = and i64 %190, 4294967295
  store i64 %193, i64* %RSI, align 8, !tbaa !2428
  %194 = load i64, i64* %PC
  %195 = sub i64 %194, 264
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %197, i64* %203
  store i64 %202, i64* %200, align 8, !tbaa !2428
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %195, i64* %204, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %205, %struct.Memory* %2)
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  store i64 4225, i64* %RSI, align 8, !tbaa !2428
  %209 = load i32, i32* %ESI
  %210 = zext i32 %209 to i64
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 2
  store i64 %212, i64* %PC
  %213 = and i64 %210, 4294967295
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 96
  %218 = load i64, i64* %RAX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 285
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %233, %struct.Memory* %206)
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 5
  store i64 %236, i64* %PC
  store i64 4225, i64* %RSI, align 8, !tbaa !2428
  %237 = load i32, i32* %ESI
  %238 = zext i32 %237 to i64
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  store i64 %240, i64* %PC
  %241 = and i64 %238, 4294967295
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 5
  store i64 %243, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %244 = load i64, i64* %RBP
  %245 = sub i64 %244, 104
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %245 to i64*
  store i64 %246, i64* %249
  %250 = load i64, i64* %PC
  %251 = sub i64 %250, 306
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 5
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %257 = load i64, i64* %256, align 8, !tbaa !2428
  %258 = add i64 %257, -8
  %259 = inttoptr i64 %258 to i64*
  store i64 %253, i64* %259
  store i64 %258, i64* %256, align 8, !tbaa !2428
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %251, i64* %260, align 8, !tbaa !2428
  %261 = load i64, i64* %PC
  %262 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %261, %struct.Memory* %234)
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 5
  store i64 %264, i64* %PC
  store i64 4225, i64* %RSI, align 8, !tbaa !2428
  %265 = load i32, i32* %ESI
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 2
  store i64 %268, i64* %PC
  %269 = and i64 %266, 4294967295
  store i64 %269, i64* %RDI, align 8, !tbaa !2428
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  store i64 %271, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 112
  %274 = load i64, i64* %RAX
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %PC
  %279 = sub i64 %278, 327
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 5
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 5
  store i64 %283, i64* %PC
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %285 = load i64, i64* %284, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %281, i64* %287
  store i64 %286, i64* %284, align 8, !tbaa !2428
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %279, i64* %288, align 8, !tbaa !2428
  %289 = load i64, i64* %PC
  %290 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %289, %struct.Memory* %262)
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 5
  store i64 %292, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %293 = load i32, i32* %ESI
  %294 = zext i32 %293 to i64
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 2
  store i64 %296, i64* %PC
  %297 = and i64 %294, 4294967295
  store i64 %297, i64* %RDI, align 8, !tbaa !2428
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 5
  store i64 %299, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 120
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %301 to i64*
  store i64 %302, i64* %305
  %306 = load i64, i64* %PC
  %307 = sub i64 %306, 348
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %309, i64* %315
  store i64 %314, i64* %312, align 8, !tbaa !2428
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %307, i64* %316, align 8, !tbaa !2428
  %317 = load i64, i64* %PC
  %318 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %317, %struct.Memory* %290)
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 5
  store i64 %320, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %321 = load i32, i32* %ESI
  %322 = zext i32 %321 to i64
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 2
  store i64 %324, i64* %PC
  %325 = and i64 %322, 4294967295
  store i64 %325, i64* %RDI, align 8, !tbaa !2428
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 128
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 4
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %329 to i64*
  store i64 %330, i64* %333
  %334 = load i64, i64* %PC
  %335 = sub i64 %334, 369
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 5
  store i64 %339, i64* %PC
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %341 = load i64, i64* %340, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %337, i64* %343
  store i64 %342, i64* %340, align 8, !tbaa !2428
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %335, i64* %344, align 8, !tbaa !2428
  %345 = load i64, i64* %PC
  %346 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %345, %struct.Memory* %318)
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 5
  store i64 %348, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %349 = load i32, i32* %ESI
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 2
  store i64 %352, i64* %PC
  %353 = and i64 %350, 4294967295
  store i64 %353, i64* %RDI, align 8, !tbaa !2428
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 136
  %358 = load i64, i64* %RAX
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 7
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %357 to i64*
  store i64 %358, i64* %361
  %362 = load i64, i64* %PC
  %363 = sub i64 %362, 393
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 5
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %369 = load i64, i64* %368, align 8, !tbaa !2428
  %370 = add i64 %369, -8
  %371 = inttoptr i64 %370 to i64*
  store i64 %365, i64* %371
  store i64 %370, i64* %368, align 8, !tbaa !2428
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %363, i64* %372, align 8, !tbaa !2428
  %373 = load i64, i64* %PC
  %374 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %373, %struct.Memory* %346)
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %377 = load i32, i32* %ESI
  %378 = zext i32 %377 to i64
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 2
  store i64 %380, i64* %PC
  %381 = and i64 %378, 4294967295
  store i64 %381, i64* %RDI, align 8, !tbaa !2428
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 144
  %386 = load i64, i64* %RAX
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 7
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %385 to i64*
  store i64 %386, i64* %389
  %390 = load i64, i64* %PC
  %391 = sub i64 %390, 417
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 5
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  store i64 %395, i64* %PC
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %397 = load i64, i64* %396, align 8, !tbaa !2428
  %398 = add i64 %397, -8
  %399 = inttoptr i64 %398 to i64*
  store i64 %393, i64* %399
  store i64 %398, i64* %396, align 8, !tbaa !2428
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %391, i64* %400, align 8, !tbaa !2428
  %401 = load i64, i64* %PC
  %402 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %401, %struct.Memory* %374)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 5
  store i64 %404, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %405 = load i32, i32* %ESI
  %406 = zext i32 %405 to i64
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 2
  store i64 %408, i64* %PC
  %409 = and i64 %406, 4294967295
  store i64 %409, i64* %RDI, align 8, !tbaa !2428
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 5
  store i64 %411, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %412 = load i64, i64* %RBP
  %413 = sub i64 %412, 152
  %414 = load i64, i64* %RAX
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 7
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %413 to i64*
  store i64 %414, i64* %417
  %418 = load i64, i64* %PC
  %419 = sub i64 %418, 441
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 5
  store i64 %423, i64* %PC
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %425 = load i64, i64* %424, align 8, !tbaa !2428
  %426 = add i64 %425, -8
  %427 = inttoptr i64 %426 to i64*
  store i64 %421, i64* %427
  store i64 %426, i64* %424, align 8, !tbaa !2428
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %419, i64* %428, align 8, !tbaa !2428
  %429 = load i64, i64* %PC
  %430 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %429, %struct.Memory* %402)
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 5
  store i64 %432, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %433 = load i32, i32* %ESI
  %434 = zext i32 %433 to i64
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 2
  store i64 %436, i64* %PC
  %437 = and i64 %434, 4294967295
  store i64 %437, i64* %RDI, align 8, !tbaa !2428
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 5
  store i64 %439, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 160
  %442 = load i64, i64* %RAX
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 7
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %441 to i64*
  store i64 %442, i64* %445
  %446 = load i64, i64* %PC
  %447 = sub i64 %446, 465
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  store i64 %451, i64* %PC
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %453 = load i64, i64* %452, align 8, !tbaa !2428
  %454 = add i64 %453, -8
  %455 = inttoptr i64 %454 to i64*
  store i64 %449, i64* %455
  store i64 %454, i64* %452, align 8, !tbaa !2428
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %447, i64* %456, align 8, !tbaa !2428
  %457 = load i64, i64* %PC
  %458 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %457, %struct.Memory* %430)
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %461 = load i32, i32* %ESI
  %462 = zext i32 %461 to i64
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 2
  store i64 %464, i64* %PC
  %465 = and i64 %462, 4294967295
  store i64 %465, i64* %RDI, align 8, !tbaa !2428
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 5
  store i64 %467, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 168
  %470 = load i64, i64* %RAX
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 7
  store i64 %472, i64* %PC
  %473 = inttoptr i64 %469 to i64*
  store i64 %470, i64* %473
  %474 = load i64, i64* %PC
  %475 = sub i64 %474, 489
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 5
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %481 = load i64, i64* %480, align 8, !tbaa !2428
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %477, i64* %483
  store i64 %482, i64* %480, align 8, !tbaa !2428
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %475, i64* %484, align 8, !tbaa !2428
  %485 = load i64, i64* %PC
  %486 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %485, %struct.Memory* %458)
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  store i64 %488, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %489 = load i32, i32* %ESI
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 2
  store i64 %492, i64* %PC
  %493 = and i64 %490, 4294967295
  store i64 %493, i64* %RDI, align 8, !tbaa !2428
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  store i64 %495, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 176
  %498 = load i64, i64* %RAX
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 7
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %497 to i64*
  store i64 %498, i64* %501
  %502 = load i64, i64* %PC
  %503 = sub i64 %502, 513
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  store i64 %507, i64* %PC
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %509 = load i64, i64* %508, align 8, !tbaa !2428
  %510 = add i64 %509, -8
  %511 = inttoptr i64 %510 to i64*
  store i64 %505, i64* %511
  store i64 %510, i64* %508, align 8, !tbaa !2428
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %503, i64* %512, align 8, !tbaa !2428
  %513 = load i64, i64* %PC
  %514 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %513, %struct.Memory* %486)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 5
  store i64 %516, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %517 = load i32, i32* %ESI
  %518 = zext i32 %517 to i64
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 2
  store i64 %520, i64* %PC
  %521 = and i64 %518, 4294967295
  store i64 %521, i64* %RDI, align 8, !tbaa !2428
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 5
  store i64 %523, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 184
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 7
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %525 to i64*
  store i64 %526, i64* %529
  %530 = load i64, i64* %PC
  %531 = sub i64 %530, 537
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 5
  store i64 %535, i64* %PC
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %537 = load i64, i64* %536, align 8, !tbaa !2428
  %538 = add i64 %537, -8
  %539 = inttoptr i64 %538 to i64*
  store i64 %533, i64* %539
  store i64 %538, i64* %536, align 8, !tbaa !2428
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %531, i64* %540, align 8, !tbaa !2428
  %541 = load i64, i64* %PC
  %542 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %541, %struct.Memory* %514)
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 5
  store i64 %544, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %545 = load i32, i32* %ESI
  %546 = zext i32 %545 to i64
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 2
  store i64 %548, i64* %PC
  %549 = and i64 %546, 4294967295
  store i64 %549, i64* %RDI, align 8, !tbaa !2428
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 5
  store i64 %551, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 192
  %554 = load i64, i64* %RAX
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 7
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %553 to i64*
  store i64 %554, i64* %557
  %558 = load i64, i64* %PC
  %559 = sub i64 %558, 561
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 5
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  store i64 %563, i64* %PC
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %565 = load i64, i64* %564, align 8, !tbaa !2428
  %566 = add i64 %565, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %561, i64* %567
  store i64 %566, i64* %564, align 8, !tbaa !2428
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %559, i64* %568, align 8, !tbaa !2428
  %569 = load i64, i64* %PC
  %570 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %569, %struct.Memory* %542)
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  store i64 %572, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %573 = load i32, i32* %ESI
  %574 = zext i32 %573 to i64
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 2
  store i64 %576, i64* %PC
  %577 = and i64 %574, 4294967295
  store i64 %577, i64* %RDI, align 8, !tbaa !2428
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 5
  store i64 %579, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 200
  %582 = load i64, i64* %RAX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 7
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %581 to i64*
  store i64 %582, i64* %585
  %586 = load i64, i64* %PC
  %587 = sub i64 %586, 585
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 5
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 5
  store i64 %591, i64* %PC
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %593 = load i64, i64* %592, align 8, !tbaa !2428
  %594 = add i64 %593, -8
  %595 = inttoptr i64 %594 to i64*
  store i64 %589, i64* %595
  store i64 %594, i64* %592, align 8, !tbaa !2428
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %587, i64* %596, align 8, !tbaa !2428
  %597 = load i64, i64* %PC
  %598 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %597, %struct.Memory* %570)
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 5
  store i64 %600, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %601 = load i32, i32* %ESI
  %602 = zext i32 %601 to i64
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 2
  store i64 %604, i64* %PC
  %605 = and i64 %602, 4294967295
  store i64 %605, i64* %RDI, align 8, !tbaa !2428
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 5
  store i64 %607, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 208
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 7
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %609 to i64*
  store i64 %610, i64* %613
  %614 = load i64, i64* %PC
  %615 = sub i64 %614, 609
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 5
  store i64 %619, i64* %PC
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %621 = load i64, i64* %620, align 8, !tbaa !2428
  %622 = add i64 %621, -8
  %623 = inttoptr i64 %622 to i64*
  store i64 %617, i64* %623
  store i64 %622, i64* %620, align 8, !tbaa !2428
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %615, i64* %624, align 8, !tbaa !2428
  %625 = load i64, i64* %PC
  %626 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %625, %struct.Memory* %598)
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %629 = load i32, i32* %ESI
  %630 = zext i32 %629 to i64
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 2
  store i64 %632, i64* %PC
  %633 = and i64 %630, 4294967295
  store i64 %633, i64* %RDI, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 5
  store i64 %635, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 216
  %638 = load i64, i64* %RAX
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 7
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641
  %642 = load i64, i64* %PC
  %643 = sub i64 %642, 633
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 5
  store i64 %647, i64* %PC
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %649 = load i64, i64* %648, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %645, i64* %651
  store i64 %650, i64* %648, align 8, !tbaa !2428
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %643, i64* %652, align 8, !tbaa !2428
  %653 = load i64, i64* %PC
  %654 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %653, %struct.Memory* %626)
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %657 = load i32, i32* %ESI
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 2
  store i64 %660, i64* %PC
  %661 = and i64 %658, 4294967295
  store i64 %661, i64* %RDI, align 8, !tbaa !2428
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 224
  %666 = load i64, i64* %RAX
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 7
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %665 to i64*
  store i64 %666, i64* %669
  %670 = load i64, i64* %PC
  %671 = sub i64 %670, 657
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 5
  store i64 %675, i64* %PC
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %677 = load i64, i64* %676, align 8, !tbaa !2428
  %678 = add i64 %677, -8
  %679 = inttoptr i64 %678 to i64*
  store i64 %673, i64* %679
  store i64 %678, i64* %676, align 8, !tbaa !2428
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %671, i64* %680, align 8, !tbaa !2428
  %681 = load i64, i64* %PC
  %682 = call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %681, %struct.Memory* %654)
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 80
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 88
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  store i64 %688, i64* %R8, align 8, !tbaa !2428
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 232
  %693 = load i64, i64* %RAX
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 7
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %692 to i64*
  store i64 %693, i64* %696
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 60
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 3
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to i32*
  %702 = load i32, i32* %701
  %703 = zext i32 %702 to i64
  store i64 %703, i64* %RDI, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 68
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 3
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i32*
  %709 = load i32, i32* %708
  %710 = zext i32 %709 to i64
  store i64 %710, i64* %RSI, align 8, !tbaa !2428
  %711 = load i64, i64* %RBP
  %712 = sub i64 %711, 64
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 3
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %712 to i32*
  %716 = load i32, i32* %715
  %717 = zext i32 %716 to i64
  store i64 %717, i64* %RDX, align 8, !tbaa !2428
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 96
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i64*
  %723 = load i64, i64* %722
  store i64 %723, i64* %R9, align 8, !tbaa !2428
  %724 = load i64, i64* %RBP
  %725 = sub i64 %724, 104
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = inttoptr i64 %725 to i64*
  %729 = load i64, i64* %728
  store i64 %729, i64* %RAX, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 136
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 7
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %731 to i64*
  %735 = load i64, i64* %734
  store i64 %735, i64* %R10, align 8, !tbaa !2428
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 144
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 7
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %R11, align 8, !tbaa !2428
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 152
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 7
  store i64 %745, i64* %PC
  %746 = inttoptr i64 %743 to i64*
  %747 = load i64, i64* %746
  store i64 %747, i64* %RBX, align 8, !tbaa !2428
  %748 = load i64, i64* %RBP
  %749 = sub i64 %748, 192
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 7
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %749 to i64*
  %753 = load i64, i64* %752
  store i64 %753, i64* %R14, align 8, !tbaa !2428
  %754 = load i64, i64* %RBP
  %755 = sub i64 %754, 200
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 7
  store i64 %757, i64* %PC
  %758 = inttoptr i64 %755 to i64*
  %759 = load i64, i64* %758
  store i64 %759, i64* %R15, align 8, !tbaa !2428
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 208
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %761 to i64*
  %765 = load i64, i64* %764
  store i64 %765, i64* %R12, align 8, !tbaa !2428
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 216
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 7
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %767 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %R13, align 8, !tbaa !2428
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 240
  %774 = load i64, i64* %RAX
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 7
  store i64 %776, i64* %PC
  %777 = inttoptr i64 %773 to i64*
  store i64 %774, i64* %777
  %778 = load i64, i64* %RBP
  %779 = sub i64 %778, 224
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 7
  store i64 %781, i64* %PC
  %782 = inttoptr i64 %779 to i64*
  %783 = load i64, i64* %782
  store i64 %783, i64* %RAX, align 8, !tbaa !2428
  %784 = load i64, i64* %RBP
  %785 = sub i64 %784, 248
  %786 = load i64, i64* %RAX
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 7
  store i64 %788, i64* %PC
  %789 = inttoptr i64 %785 to i64*
  store i64 %786, i64* %789
  %790 = load i64, i64* %RBP
  %791 = sub i64 %790, 232
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 7
  store i64 %793, i64* %PC
  %794 = inttoptr i64 %791 to i64*
  %795 = load i64, i64* %794
  store i64 %795, i64* %RAX, align 8, !tbaa !2428
  %796 = load i64, i64* %RBP
  %797 = sub i64 %796, 256
  %798 = load i64, i64* %RAX
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 7
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %797 to i64*
  store i64 %798, i64* %801
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 240
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 7
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %803 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = load i64, i64* %RSP
  %809 = load i64, i64* %RAX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %808 to i64*
  store i64 %809, i64* %812
  %813 = load i64, i64* %RSP
  %814 = add i64 %813, 8
  %815 = load i64, i64* %R10
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %814 to i64*
  store i64 %815, i64* %818
  %819 = load i64, i64* %RSP
  %820 = add i64 %819, 16
  %821 = load i64, i64* %R11
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %820 to i64*
  store i64 %821, i64* %824
  %825 = load i64, i64* %RSP
  %826 = add i64 %825, 24
  %827 = load i64, i64* %RBX
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 5
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %826 to i64*
  store i64 %827, i64* %830
  %831 = load i64, i64* %RSP
  %832 = add i64 %831, 32
  %833 = load i64, i64* %R14
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %832 to i64*
  store i64 %833, i64* %836
  %837 = load i64, i64* %RSP
  %838 = add i64 %837, 40
  %839 = load i64, i64* %R15
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %838 to i64*
  store i64 %839, i64* %842
  %843 = load i64, i64* %RSP
  %844 = add i64 %843, 48
  %845 = load i64, i64* %R12
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %844 to i64*
  store i64 %845, i64* %848
  %849 = load i64, i64* %RSP
  %850 = add i64 %849, 56
  %851 = load i64, i64* %R13
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 5
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %850 to i64*
  store i64 %851, i64* %854
  %855 = load i64, i64* %RBP
  %856 = sub i64 %855, 248
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 7
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i64*
  %860 = load i64, i64* %859
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %861 = load i64, i64* %RSP
  %862 = add i64 %861, 64
  %863 = load i64, i64* %RAX
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %862 to i64*
  store i64 %863, i64* %866
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 256
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 7
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i64*
  %872 = load i64, i64* %871
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = load i64, i64* %RSP
  %874 = add i64 %873, 72
  %875 = load i64, i64* %RAX
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 5
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %874 to i64*
  store i64 %875, i64* %878
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 1152
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 5
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 5
  store i64 %884, i64* %PC
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %886 = load i64, i64* %885, align 8, !tbaa !2428
  %887 = add i64 %886, -8
  %888 = inttoptr i64 %887 to i64*
  store i64 %882, i64* %888
  store i64 %887, i64* %885, align 8, !tbaa !2428
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %880, i64* %889, align 8, !tbaa !2428
  %890 = load i64, i64* %PC
  %891 = call %struct.Memory* @sub_400fc0_init_array(%struct.State* %0, i64 %890, %struct.Memory* %682)
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 60
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  %897 = load i32, i32* %896
  %898 = zext i32 %897 to i64
  store i64 %898, i64* %RDI, align 8, !tbaa !2428
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 68
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i32*
  %904 = load i32, i32* %903
  %905 = zext i32 %904 to i64
  store i64 %905, i64* %RSI, align 8, !tbaa !2428
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 64
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 3
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  %911 = load i32, i32* %910
  %912 = zext i32 %911 to i64
  store i64 %912, i64* %RDX, align 8, !tbaa !2428
  %913 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 80
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 5
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to double*
  %919 = load double, double* %918
  %920 = bitcast i8* %913 to double*
  store double %919, double* %920, align 1, !tbaa !2453
  %921 = getelementptr inbounds i8, i8* %913, i64 8
  %922 = bitcast i8* %921 to double*
  store double 0.000000e+00, double* %922, align 1, !tbaa !2453
  %923 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %924 = load i64, i64* %RBP
  %925 = sub i64 %924, 88
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC
  %928 = inttoptr i64 %925 to double*
  %929 = load double, double* %928
  %930 = bitcast i8* %923 to double*
  store double %929, double* %930, align 1, !tbaa !2453
  %931 = getelementptr inbounds i8, i8* %923, i64 8
  %932 = bitcast i8* %931 to double*
  store double 0.000000e+00, double* %932, align 1, !tbaa !2453
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 96
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i64*
  %938 = load i64, i64* %937
  store i64 %938, i64* %RCX, align 8, !tbaa !2428
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 104
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  store i64 %944, i64* %R8, align 8, !tbaa !2428
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 112
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 4
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i64*
  %950 = load i64, i64* %949
  store i64 %950, i64* %R9, align 8, !tbaa !2428
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 120
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 128
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 4
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961
  store i64 %962, i64* %R10, align 8, !tbaa !2428
  %963 = load i64, i64* %RBP
  %964 = sub i64 %963, 136
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 7
  store i64 %966, i64* %PC
  %967 = inttoptr i64 %964 to i64*
  %968 = load i64, i64* %967
  store i64 %968, i64* %R11, align 8, !tbaa !2428
  %969 = load i64, i64* %RBP
  %970 = sub i64 %969, 144
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 7
  store i64 %972, i64* %PC
  %973 = inttoptr i64 %970 to i64*
  %974 = load i64, i64* %973
  store i64 %974, i64* %RBX, align 8, !tbaa !2428
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 152
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 7
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i64*
  %980 = load i64, i64* %979
  store i64 %980, i64* %R14, align 8, !tbaa !2428
  %981 = load i64, i64* %RBP
  %982 = sub i64 %981, 192
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 7
  store i64 %984, i64* %PC
  %985 = inttoptr i64 %982 to i64*
  %986 = load i64, i64* %985
  store i64 %986, i64* %R15, align 8, !tbaa !2428
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 200
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 7
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  store i64 %992, i64* %R12, align 8, !tbaa !2428
  %993 = load i64, i64* %RBP
  %994 = sub i64 %993, 208
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 7
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %994 to i64*
  %998 = load i64, i64* %997
  store i64 %998, i64* %R13, align 8, !tbaa !2428
  %999 = load i64, i64* %RBP
  %1000 = sub i64 %999, 264
  %1001 = load i64, i64* %RAX
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 7
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1000 to i64*
  store i64 %1001, i64* %1004
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 216
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 7
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %RAX, align 8, !tbaa !2428
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 272
  %1013 = load i64, i64* %RAX
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 7
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1012 to i64*
  store i64 %1013, i64* %1016
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 224
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 7
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to i64*
  %1022 = load i64, i64* %1021
  store i64 %1022, i64* %RAX, align 8, !tbaa !2428
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 280
  %1025 = load i64, i64* %RAX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 7
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1024 to i64*
  store i64 %1025, i64* %1028
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 232
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 7
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 288
  %1037 = load i64, i64* %RAX
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 7
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1036 to i64*
  store i64 %1037, i64* %1040
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 264
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 7
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RSP
  %1048 = load i64, i64* %RAX
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 4
  store i64 %1050, i64* %PC
  %1051 = inttoptr i64 %1047 to i64*
  store i64 %1048, i64* %1051
  %1052 = load i64, i64* %RSP
  %1053 = add i64 %1052, 8
  %1054 = load i64, i64* %R10
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 5
  store i64 %1056, i64* %PC
  %1057 = inttoptr i64 %1053 to i64*
  store i64 %1054, i64* %1057
  %1058 = load i64, i64* %RSP
  %1059 = add i64 %1058, 16
  %1060 = load i64, i64* %R11
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 5
  store i64 %1062, i64* %PC
  %1063 = inttoptr i64 %1059 to i64*
  store i64 %1060, i64* %1063
  %1064 = load i64, i64* %RSP
  %1065 = add i64 %1064, 24
  %1066 = load i64, i64* %RBX
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 5
  store i64 %1068, i64* %PC
  %1069 = inttoptr i64 %1065 to i64*
  store i64 %1066, i64* %1069
  %1070 = load i64, i64* %RSP
  %1071 = add i64 %1070, 32
  %1072 = load i64, i64* %R14
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 5
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1071 to i64*
  store i64 %1072, i64* %1075
  %1076 = load i64, i64* %RSP
  %1077 = add i64 %1076, 40
  %1078 = load i64, i64* %R15
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1077 to i64*
  store i64 %1078, i64* %1081
  %1082 = load i64, i64* %RSP
  %1083 = add i64 %1082, 48
  %1084 = load i64, i64* %R12
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 5
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1083 to i64*
  store i64 %1084, i64* %1087
  %1088 = load i64, i64* %RSP
  %1089 = add i64 %1088, 56
  %1090 = load i64, i64* %R13
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  store i64 %1092, i64* %PC
  %1093 = inttoptr i64 %1089 to i64*
  store i64 %1090, i64* %1093
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 272
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 7
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1095 to i64*
  %1099 = load i64, i64* %1098
  store i64 %1099, i64* %RAX, align 8, !tbaa !2428
  %1100 = load i64, i64* %RSP
  %1101 = add i64 %1100, 64
  %1102 = load i64, i64* %RAX
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 5
  store i64 %1104, i64* %PC
  %1105 = inttoptr i64 %1101 to i64*
  store i64 %1102, i64* %1105
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 280
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 7
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %RAX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RSP
  %1113 = add i64 %1112, 72
  %1114 = load i64, i64* %RAX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 5
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1113 to i64*
  store i64 %1114, i64* %1117
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 288
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 7
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1119 to i64*
  %1123 = load i64, i64* %1122
  store i64 %1123, i64* %RAX, align 8, !tbaa !2428
  %1124 = load i64, i64* %RSP
  %1125 = add i64 %1124, 80
  %1126 = load i64, i64* %RAX
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1125 to i64*
  store i64 %1126, i64* %1129
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 2199
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 5
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 5
  store i64 %1135, i64* %PC
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1137 = load i64, i64* %1136, align 8, !tbaa !2428
  %1138 = add i64 %1137, -8
  %1139 = inttoptr i64 %1138 to i64*
  store i64 %1133, i64* %1139
  store i64 %1138, i64* %1136, align 8, !tbaa !2428
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1131, i64* %1140, align 8, !tbaa !2428
  %1141 = load i64, i64* %PC
  %1142 = call %struct.Memory* @sub_4014b0_kernel_fdtd_apml(%struct.State* %0, i64 %1141, %struct.Memory* %891)
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 80
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 4
  store i64 %1146, i64* %PC
  store i64 %1144, i64* %RCX, align 8, !tbaa !2428
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 88
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC
  store i64 %1148, i64* %R8, align 8, !tbaa !2428
  %1151 = load i64, i64* %RBP
  %1152 = sub i64 %1151, 60
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 3
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1152 to i32*
  %1156 = load i32, i32* %1155
  %1157 = zext i32 %1156 to i64
  store i64 %1157, i64* %RDI, align 8, !tbaa !2428
  %1158 = load i64, i64* %RBP
  %1159 = sub i64 %1158, 68
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 3
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i32*
  %1163 = load i32, i32* %1162
  %1164 = zext i32 %1163 to i64
  store i64 %1164, i64* %RSI, align 8, !tbaa !2428
  %1165 = load i64, i64* %RBP
  %1166 = sub i64 %1165, 64
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 3
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1166 to i32*
  %1170 = load i32, i32* %1169
  %1171 = zext i32 %1170 to i64
  store i64 %1171, i64* %RDX, align 8, !tbaa !2428
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 96
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 4
  store i64 %1175, i64* %PC
  %1176 = inttoptr i64 %1173 to i64*
  %1177 = load i64, i64* %1176
  store i64 %1177, i64* %R9, align 8, !tbaa !2428
  %1178 = load i64, i64* %RBP
  %1179 = sub i64 %1178, 104
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 4
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to i64*
  %1183 = load i64, i64* %1182
  store i64 %1183, i64* %RAX, align 8, !tbaa !2428
  %1184 = load i64, i64* %RBP
  %1185 = sub i64 %1184, 168
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 7
  store i64 %1187, i64* %PC
  %1188 = inttoptr i64 %1185 to i64*
  %1189 = load i64, i64* %1188
  store i64 %1189, i64* %R10, align 8, !tbaa !2428
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 176
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 7
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194
  store i64 %1195, i64* %R11, align 8, !tbaa !2428
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 184
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 7
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RBX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 192
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 7
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to i64*
  %1207 = load i64, i64* %1206
  store i64 %1207, i64* %R14, align 8, !tbaa !2428
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 200
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 7
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i64*
  %1213 = load i64, i64* %1212
  store i64 %1213, i64* %R15, align 8, !tbaa !2428
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 208
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 7
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i64*
  %1219 = load i64, i64* %1218
  store i64 %1219, i64* %R12, align 8, !tbaa !2428
  %1220 = load i64, i64* %RBP
  %1221 = sub i64 %1220, 216
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 7
  store i64 %1223, i64* %PC
  %1224 = inttoptr i64 %1221 to i64*
  %1225 = load i64, i64* %1224
  store i64 %1225, i64* %R13, align 8, !tbaa !2428
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 296
  %1228 = load i64, i64* %RAX
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 7
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1227 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 224
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 7
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = load i64, i64* %RBP
  %1239 = sub i64 %1238, 304
  %1240 = load i64, i64* %RAX
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 7
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1239 to i64*
  store i64 %1240, i64* %1243
  %1244 = load i64, i64* %RBP
  %1245 = sub i64 %1244, 232
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 7
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1245 to i64*
  %1249 = load i64, i64* %1248
  store i64 %1249, i64* %RAX, align 8, !tbaa !2428
  %1250 = load i64, i64* %RBP
  %1251 = sub i64 %1250, 312
  %1252 = load i64, i64* %RAX
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 7
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1251 to i64*
  store i64 %1252, i64* %1255
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 296
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 7
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i64*
  %1261 = load i64, i64* %1260
  store i64 %1261, i64* %RAX, align 8, !tbaa !2428
  %1262 = load i64, i64* %RSP
  %1263 = load i64, i64* %RAX
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 4
  store i64 %1265, i64* %PC
  %1266 = inttoptr i64 %1262 to i64*
  store i64 %1263, i64* %1266
  %1267 = load i64, i64* %RSP
  %1268 = add i64 %1267, 8
  %1269 = load i64, i64* %R10
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = inttoptr i64 %1268 to i64*
  store i64 %1269, i64* %1272
  %1273 = load i64, i64* %RSP
  %1274 = add i64 %1273, 16
  %1275 = load i64, i64* %R11
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 5
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1274 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %RSP
  %1280 = add i64 %1279, 24
  %1281 = load i64, i64* %RBX
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 5
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1280 to i64*
  store i64 %1281, i64* %1284
  %1285 = load i64, i64* %RSP
  %1286 = add i64 %1285, 32
  %1287 = load i64, i64* %R14
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 5
  store i64 %1289, i64* %PC
  %1290 = inttoptr i64 %1286 to i64*
  store i64 %1287, i64* %1290
  %1291 = load i64, i64* %RSP
  %1292 = add i64 %1291, 40
  %1293 = load i64, i64* %R15
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 5
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1292 to i64*
  store i64 %1293, i64* %1296
  %1297 = load i64, i64* %RSP
  %1298 = add i64 %1297, 48
  %1299 = load i64, i64* %R12
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1298 to i64*
  store i64 %1299, i64* %1302
  %1303 = load i64, i64* %RSP
  %1304 = add i64 %1303, 56
  %1305 = load i64, i64* %R13
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 5
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1304 to i64*
  store i64 %1305, i64* %1308
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 304
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 7
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = load i64, i64* %RSP
  %1316 = add i64 %1315, 64
  %1317 = load i64, i64* %RAX
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 5
  store i64 %1319, i64* %PC
  %1320 = inttoptr i64 %1316 to i64*
  store i64 %1317, i64* %1320
  %1321 = load i64, i64* %RBP
  %1322 = sub i64 %1321, 312
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 7
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1322 to i64*
  %1326 = load i64, i64* %1325
  store i64 %1326, i64* %RAX, align 8, !tbaa !2428
  %1327 = load i64, i64* %RSP
  %1328 = add i64 %1327, 72
  %1329 = load i64, i64* %RAX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 5
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1328 to i64*
  store i64 %1329, i64* %1332
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 751
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 5
  store i64 %1338, i64* %PC
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1340 = load i64, i64* %1339, align 8, !tbaa !2428
  %1341 = add i64 %1340, -8
  %1342 = inttoptr i64 %1341 to i64*
  store i64 %1336, i64* %1342
  store i64 %1341, i64* %1339, align 8, !tbaa !2428
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1334, i64* %1343, align 8, !tbaa !2428
  %1344 = load i64, i64* %PC
  %1345 = call %struct.Memory* @sub_400fc0_init_array(%struct.State* %0, i64 %1344, %struct.Memory* %1142)
  %1346 = load i64, i64* %RBP
  %1347 = sub i64 %1346, 60
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1347 to i32*
  %1351 = load i32, i32* %1350
  %1352 = zext i32 %1351 to i64
  store i64 %1352, i64* %RDI, align 8, !tbaa !2428
  %1353 = load i64, i64* %RBP
  %1354 = sub i64 %1353, 68
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 3
  store i64 %1356, i64* %PC
  %1357 = inttoptr i64 %1354 to i32*
  %1358 = load i32, i32* %1357
  %1359 = zext i32 %1358 to i64
  store i64 %1359, i64* %RSI, align 8, !tbaa !2428
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 64
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 3
  store i64 %1363, i64* %PC
  %1364 = inttoptr i64 %1361 to i32*
  %1365 = load i32, i32* %1364
  %1366 = zext i32 %1365 to i64
  store i64 %1366, i64* %RDX, align 8, !tbaa !2428
  %1367 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1368 = load i64, i64* %RBP
  %1369 = sub i64 %1368, 80
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 5
  store i64 %1371, i64* %PC
  %1372 = inttoptr i64 %1369 to double*
  %1373 = load double, double* %1372
  %1374 = bitcast i8* %1367 to double*
  store double %1373, double* %1374, align 1, !tbaa !2453
  %1375 = getelementptr inbounds i8, i8* %1367, i64 8
  %1376 = bitcast i8* %1375 to double*
  store double 0.000000e+00, double* %1376, align 1, !tbaa !2453
  %1377 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 88
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 5
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to double*
  %1383 = load double, double* %1382
  %1384 = bitcast i8* %1377 to double*
  store double %1383, double* %1384, align 1, !tbaa !2453
  %1385 = getelementptr inbounds i8, i8* %1377, i64 8
  %1386 = bitcast i8* %1385 to double*
  store double 0.000000e+00, double* %1386, align 1, !tbaa !2453
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 96
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 4
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i64*
  %1392 = load i64, i64* %1391
  store i64 %1392, i64* %RCX, align 8, !tbaa !2428
  %1393 = load i64, i64* %RBP
  %1394 = sub i64 %1393, 104
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 4
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %R8, align 8, !tbaa !2428
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 112
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 4
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to i64*
  %1404 = load i64, i64* %1403
  store i64 %1404, i64* %R9, align 8, !tbaa !2428
  %1405 = load i64, i64* %RBP
  %1406 = sub i64 %1405, 120
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %PC
  %1409 = inttoptr i64 %1406 to i64*
  %1410 = load i64, i64* %1409
  store i64 %1410, i64* %RAX, align 8, !tbaa !2428
  %1411 = load i64, i64* %RBP
  %1412 = sub i64 %1411, 160
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 7
  store i64 %1414, i64* %PC
  %1415 = inttoptr i64 %1412 to i64*
  %1416 = load i64, i64* %1415
  store i64 %1416, i64* %R10, align 8, !tbaa !2428
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 168
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 7
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %R11, align 8, !tbaa !2428
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 176
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 7
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i64*
  %1428 = load i64, i64* %1427
  store i64 %1428, i64* %RBX, align 8, !tbaa !2428
  %1429 = load i64, i64* %RBP
  %1430 = sub i64 %1429, 184
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 7
  store i64 %1432, i64* %PC
  %1433 = inttoptr i64 %1430 to i64*
  %1434 = load i64, i64* %1433
  store i64 %1434, i64* %R14, align 8, !tbaa !2428
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 192
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 7
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %R15, align 8, !tbaa !2428
  %1441 = load i64, i64* %RBP
  %1442 = sub i64 %1441, 200
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 7
  store i64 %1444, i64* %PC
  %1445 = inttoptr i64 %1442 to i64*
  %1446 = load i64, i64* %1445
  store i64 %1446, i64* %R12, align 8, !tbaa !2428
  %1447 = load i64, i64* %RBP
  %1448 = sub i64 %1447, 208
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 7
  store i64 %1450, i64* %PC
  %1451 = inttoptr i64 %1448 to i64*
  %1452 = load i64, i64* %1451
  store i64 %1452, i64* %R13, align 8, !tbaa !2428
  %1453 = load i64, i64* %RBP
  %1454 = sub i64 %1453, 320
  %1455 = load i64, i64* %RAX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 7
  store i64 %1457, i64* %PC
  %1458 = inttoptr i64 %1454 to i64*
  store i64 %1455, i64* %1458
  %1459 = load i64, i64* %RBP
  %1460 = sub i64 %1459, 216
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 7
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 328
  %1467 = load i64, i64* %RAX
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 7
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1466 to i64*
  store i64 %1467, i64* %1470
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 224
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 7
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i64*
  %1476 = load i64, i64* %1475
  store i64 %1476, i64* %RAX, align 8, !tbaa !2428
  %1477 = load i64, i64* %RBP
  %1478 = sub i64 %1477, 336
  %1479 = load i64, i64* %RAX
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 7
  store i64 %1481, i64* %PC
  %1482 = inttoptr i64 %1478 to i64*
  store i64 %1479, i64* %1482
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 232
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 7
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i64*
  %1488 = load i64, i64* %1487
  store i64 %1488, i64* %RAX, align 8, !tbaa !2428
  %1489 = load i64, i64* %RBP
  %1490 = sub i64 %1489, 344
  %1491 = load i64, i64* %RAX
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 7
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1490 to i64*
  store i64 %1491, i64* %1494
  %1495 = load i64, i64* %RBP
  %1496 = sub i64 %1495, 320
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 7
  store i64 %1498, i64* %PC
  %1499 = inttoptr i64 %1496 to i64*
  %1500 = load i64, i64* %1499
  store i64 %1500, i64* %RAX, align 8, !tbaa !2428
  %1501 = load i64, i64* %RSP
  %1502 = load i64, i64* %RAX
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 4
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1501 to i64*
  store i64 %1502, i64* %1505
  %1506 = load i64, i64* %RSP
  %1507 = add i64 %1506, 8
  %1508 = load i64, i64* %R10
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 5
  store i64 %1510, i64* %PC
  %1511 = inttoptr i64 %1507 to i64*
  store i64 %1508, i64* %1511
  %1512 = load i64, i64* %RSP
  %1513 = add i64 %1512, 16
  %1514 = load i64, i64* %R11
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 5
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1513 to i64*
  store i64 %1514, i64* %1517
  %1518 = load i64, i64* %RSP
  %1519 = add i64 %1518, 24
  %1520 = load i64, i64* %RBX
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 5
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1519 to i64*
  store i64 %1520, i64* %1523
  %1524 = load i64, i64* %RSP
  %1525 = add i64 %1524, 32
  %1526 = load i64, i64* %R14
  %1527 = load i64, i64* %PC
  %1528 = add i64 %1527, 5
  store i64 %1528, i64* %PC
  %1529 = inttoptr i64 %1525 to i64*
  store i64 %1526, i64* %1529
  %1530 = load i64, i64* %RSP
  %1531 = add i64 %1530, 40
  %1532 = load i64, i64* %R15
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 5
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1531 to i64*
  store i64 %1532, i64* %1535
  %1536 = load i64, i64* %RSP
  %1537 = add i64 %1536, 48
  %1538 = load i64, i64* %R12
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 5
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1537 to i64*
  store i64 %1538, i64* %1541
  %1542 = load i64, i64* %RSP
  %1543 = add i64 %1542, 56
  %1544 = load i64, i64* %R13
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 5
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1543 to i64*
  store i64 %1544, i64* %1547
  %1548 = load i64, i64* %RBP
  %1549 = sub i64 %1548, 328
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 7
  store i64 %1551, i64* %PC
  %1552 = inttoptr i64 %1549 to i64*
  %1553 = load i64, i64* %1552
  store i64 %1553, i64* %RAX, align 8, !tbaa !2428
  %1554 = load i64, i64* %RSP
  %1555 = add i64 %1554, 64
  %1556 = load i64, i64* %RAX
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 5
  store i64 %1558, i64* %PC
  %1559 = inttoptr i64 %1555 to i64*
  store i64 %1556, i64* %1559
  %1560 = load i64, i64* %RBP
  %1561 = sub i64 %1560, 336
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 7
  store i64 %1563, i64* %PC
  %1564 = inttoptr i64 %1561 to i64*
  %1565 = load i64, i64* %1564
  store i64 %1565, i64* %RAX, align 8, !tbaa !2428
  %1566 = load i64, i64* %RSP
  %1567 = add i64 %1566, 72
  %1568 = load i64, i64* %RAX
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1567 to i64*
  store i64 %1568, i64* %1571
  %1572 = load i64, i64* %RBP
  %1573 = sub i64 %1572, 344
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 7
  store i64 %1575, i64* %PC
  %1576 = inttoptr i64 %1573 to i64*
  %1577 = load i64, i64* %1576
  store i64 %1577, i64* %RAX, align 8, !tbaa !2428
  %1578 = load i64, i64* %RSP
  %1579 = add i64 %1578, 80
  %1580 = load i64, i64* %RAX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 5
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1579 to i64*
  store i64 %1580, i64* %1583
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 5299
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 5
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 5
  store i64 %1589, i64* %PC
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1591 = load i64, i64* %1590, align 8, !tbaa !2428
  %1592 = add i64 %1591, -8
  %1593 = inttoptr i64 %1592 to i64*
  store i64 %1587, i64* %1593
  store i64 %1592, i64* %1590, align 8, !tbaa !2428
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1585, i64* %1594, align 8, !tbaa !2428
  %1595 = load i64, i64* %PC
  %1596 = call %struct.Memory* @sub_402260_kernel_fdtd_apml_StrictFP(%struct.State* %0, i64 %1595, %struct.Memory* %1345)
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 60
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 68
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  %1609 = load i32, i32* %1608
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RSI, align 8, !tbaa !2428
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 64
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 3
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  %1616 = load i32, i32* %1615
  %1617 = zext i32 %1616 to i64
  store i64 %1617, i64* %RDX, align 8, !tbaa !2428
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 128
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to i64*
  %1623 = load i64, i64* %1622
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 160
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 7
  store i64 %1627, i64* %PC
  %1628 = inttoptr i64 %1625 to i64*
  %1629 = load i64, i64* %1628
  store i64 %1629, i64* %R8, align 8, !tbaa !2428
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 8778
  %1632 = load i64, i64* %PC
  %1633 = add i64 %1632, 5
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 5
  store i64 %1635, i64* %PC
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1637 = load i64, i64* %1636, align 8, !tbaa !2428
  %1638 = add i64 %1637, -8
  %1639 = inttoptr i64 %1638 to i64*
  store i64 %1633, i64* %1639
  store i64 %1638, i64* %1636, align 8, !tbaa !2428
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1631, i64* %1640, align 8, !tbaa !2428
  %1641 = load i64, i64* %PC
  %1642 = call %struct.Memory* @sub_403010_check_FP(%struct.State* %0, i64 %1641, %struct.Memory* %1596)
  %1643 = load i32, i32* %EAX
  %1644 = zext i32 %1643 to i64
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 3
  store i64 %1646, i64* %PC
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1647, align 1, !tbaa !2432
  %1648 = and i32 %1643, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #16
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1654, align 1, !tbaa !2450
  %1655 = icmp eq i32 %1643, 0
  %1656 = zext i1 %1655 to i8
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1656, i8* %1657, align 1, !tbaa !2447
  %1658 = lshr i32 %1643, 31
  %1659 = trunc i32 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1659, i8* %1660, align 1, !tbaa !2448
  %1661 = lshr i32 %1643, 31
  %1662 = xor i32 %1658, %1661
  %1663 = add nuw nsw i32 %1662, %1661
  %1664 = icmp eq i32 %1663, 2
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1665, i8* %1666, align 1, !tbaa !2449
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 18
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 6
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 6
  store i64 %1672, i64* %PC
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1674 = load i8, i8* %1673, align 1, !tbaa !2447
  %1675 = icmp eq i8 %1674, 0
  %1676 = zext i1 %1675 to i8
  store i8 %1676, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1678 = select i1 %1675, i64 %1668, i64 %1670
  store i64 %1678, i64* %1677, align 8, !tbaa !2428
  %1679 = load i8, i8* %BRANCH_TAKEN
  %1680 = icmp eq i8 %1679, 1
  %1681 = load i64, i64* %RBP
  br i1 %1680, label %block_400de0, label %block_400dd4

block_400e36:                                     ; preds = %block_400e11
  %1682 = sub i64 %2246, 44
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 7
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1682 to i32*
  store i32 1, i32* %1685
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 362
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 5
  store i64 %1689, i64* %PC
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1687, i64* %1690, align 8, !tbaa !2428
  br label %block_400fa7

block_400dd4:                                     ; preds = %block_4008b0
  %1691 = sub i64 %1681, 44
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 1, i32* %1694
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 460
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  store i64 %1698, i64* %PC
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1696, i64* %1699, align 8, !tbaa !2428
  br label %block_400fa7

block_400e73:                                     ; preds = %block_400e42
  %1700 = sub i64 %2348, 60
  %1701 = load i64, i64* %PC
  %1702 = add i64 %1701, 3
  store i64 %1702, i64* %PC
  %1703 = inttoptr i64 %1700 to i32*
  %1704 = load i32, i32* %1703
  %1705 = zext i32 %1704 to i64
  store i64 %1705, i64* %RDI, align 8, !tbaa !2428
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 68
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 3
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to i32*
  %1711 = load i32, i32* %1710
  %1712 = zext i32 %1711 to i64
  store i64 %1712, i64* %RSI, align 8, !tbaa !2428
  %1713 = load i64, i64* %RBP
  %1714 = sub i64 %1713, 64
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 3
  store i64 %1716, i64* %PC
  %1717 = inttoptr i64 %1714 to i32*
  %1718 = load i32, i32* %1717
  %1719 = zext i32 %1718 to i64
  store i64 %1719, i64* %RDX, align 8, !tbaa !2428
  %1720 = load i64, i64* %RBP
  %1721 = sub i64 %1720, 160
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 7
  store i64 %1723, i64* %PC
  %1724 = inttoptr i64 %1721 to i64*
  %1725 = load i64, i64* %1724
  store i64 %1725, i64* %RCX, align 8, !tbaa !2428
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 168
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 7
  store i64 %1729, i64* %PC
  %1730 = inttoptr i64 %1727 to i64*
  %1731 = load i64, i64* %1730
  store i64 %1731, i64* %R8, align 8, !tbaa !2428
  %1732 = load i64, i64* %RBP
  %1733 = sub i64 %1732, 176
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 7
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i64*
  %1737 = load i64, i64* %1736
  store i64 %1737, i64* %R9, align 8, !tbaa !2428
  %1738 = load i64, i64* %RBP
  %1739 = sub i64 %1738, 184
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 7
  store i64 %1741, i64* %PC
  %1742 = inttoptr i64 %1739 to i64*
  %1743 = load i64, i64* %1742
  store i64 %1743, i64* %RAX, align 8, !tbaa !2428
  %1744 = load i64, i64* %RSP
  %1745 = load i64, i64* %RAX
  %1746 = load i64, i64* %PC
  %1747 = add i64 %1746, 4
  store i64 %1747, i64* %PC
  %1748 = inttoptr i64 %1744 to i64*
  store i64 %1745, i64* %1748
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 8980
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 5
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 5
  store i64 %1754, i64* %PC
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1756 = load i64, i64* %1755, align 8, !tbaa !2428
  %1757 = add i64 %1756, -8
  %1758 = inttoptr i64 %1757 to i64*
  store i64 %1752, i64* %1758
  store i64 %1757, i64* %1755, align 8, !tbaa !2428
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1750, i64* %1759, align 8, !tbaa !2428
  %1760 = load i64, i64* %PC
  %1761 = call %struct.Memory* @sub_4031b0_print_array(%struct.State* %0, i64 %1760, %struct.Memory* %2309)
  %1762 = load i64, i64* %RBP
  %1763 = sub i64 %1762, 96
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 4
  store i64 %1765, i64* %PC
  %1766 = inttoptr i64 %1763 to i64*
  %1767 = load i64, i64* %1766
  store i64 %1767, i64* %RAX, align 8, !tbaa !2428
  %1768 = load i64, i64* %RAX
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 3
  store i64 %1770, i64* %PC
  store i64 %1768, i64* %RDI, align 8, !tbaa !2428
  %1771 = load i64, i64* %PC
  %1772 = sub i64 %1771, 2344
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 5
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 5
  store i64 %1776, i64* %PC
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1778 = load i64, i64* %1777, align 8, !tbaa !2428
  %1779 = add i64 %1778, -8
  %1780 = inttoptr i64 %1779 to i64*
  store i64 %1774, i64* %1780
  store i64 %1779, i64* %1777, align 8, !tbaa !2428
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1772, i64* %1781, align 8, !tbaa !2428
  %1782 = load i64, i64* %PC
  %1783 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1782, %struct.Memory* %1761)
  %1784 = load i64, i64* %RBP
  %1785 = sub i64 %1784, 104
  %1786 = load i64, i64* %PC
  %1787 = add i64 %1786, 4
  store i64 %1787, i64* %PC
  %1788 = inttoptr i64 %1785 to i64*
  %1789 = load i64, i64* %1788
  store i64 %1789, i64* %RAX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RAX
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 3
  store i64 %1792, i64* %PC
  store i64 %1790, i64* %RDI, align 8, !tbaa !2428
  %1793 = load i64, i64* %PC
  %1794 = sub i64 %1793, 2356
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1800 = load i64, i64* %1799, align 8, !tbaa !2428
  %1801 = add i64 %1800, -8
  %1802 = inttoptr i64 %1801 to i64*
  store i64 %1796, i64* %1802
  store i64 %1801, i64* %1799, align 8, !tbaa !2428
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1794, i64* %1803, align 8, !tbaa !2428
  %1804 = load i64, i64* %PC
  %1805 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1804, %struct.Memory* %1783)
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 112
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %RAX, align 8, !tbaa !2428
  %1812 = load i64, i64* %RAX
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 3
  store i64 %1814, i64* %PC
  store i64 %1812, i64* %RDI, align 8, !tbaa !2428
  %1815 = load i64, i64* %PC
  %1816 = sub i64 %1815, 2368
  %1817 = load i64, i64* %PC
  %1818 = add i64 %1817, 5
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 5
  store i64 %1820, i64* %PC
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1822 = load i64, i64* %1821, align 8, !tbaa !2428
  %1823 = add i64 %1822, -8
  %1824 = inttoptr i64 %1823 to i64*
  store i64 %1818, i64* %1824
  store i64 %1823, i64* %1821, align 8, !tbaa !2428
  %1825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1816, i64* %1825, align 8, !tbaa !2428
  %1826 = load i64, i64* %PC
  %1827 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1826, %struct.Memory* %1805)
  %1828 = load i64, i64* %RBP
  %1829 = sub i64 %1828, 120
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 4
  store i64 %1831, i64* %PC
  %1832 = inttoptr i64 %1829 to i64*
  %1833 = load i64, i64* %1832
  store i64 %1833, i64* %RAX, align 8, !tbaa !2428
  %1834 = load i64, i64* %RAX
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 3
  store i64 %1836, i64* %PC
  store i64 %1834, i64* %RDI, align 8, !tbaa !2428
  %1837 = load i64, i64* %PC
  %1838 = sub i64 %1837, 2380
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 5
  %1841 = load i64, i64* %PC
  %1842 = add i64 %1841, 5
  store i64 %1842, i64* %PC
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1844 = load i64, i64* %1843, align 8, !tbaa !2428
  %1845 = add i64 %1844, -8
  %1846 = inttoptr i64 %1845 to i64*
  store i64 %1840, i64* %1846
  store i64 %1845, i64* %1843, align 8, !tbaa !2428
  %1847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1838, i64* %1847, align 8, !tbaa !2428
  %1848 = load i64, i64* %PC
  %1849 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1848, %struct.Memory* %1827)
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 128
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 4
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1851 to i64*
  %1855 = load i64, i64* %1854
  store i64 %1855, i64* %RAX, align 8, !tbaa !2428
  %1856 = load i64, i64* %RAX
  %1857 = load i64, i64* %PC
  %1858 = add i64 %1857, 3
  store i64 %1858, i64* %PC
  store i64 %1856, i64* %RDI, align 8, !tbaa !2428
  %1859 = load i64, i64* %PC
  %1860 = sub i64 %1859, 2392
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 5
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 5
  store i64 %1864, i64* %PC
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1866 = load i64, i64* %1865, align 8, !tbaa !2428
  %1867 = add i64 %1866, -8
  %1868 = inttoptr i64 %1867 to i64*
  store i64 %1862, i64* %1868
  store i64 %1867, i64* %1865, align 8, !tbaa !2428
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1860, i64* %1869, align 8, !tbaa !2428
  %1870 = load i64, i64* %PC
  %1871 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1870, %struct.Memory* %1849)
  %1872 = load i64, i64* %RBP
  %1873 = sub i64 %1872, 136
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 7
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i64*
  %1877 = load i64, i64* %1876
  store i64 %1877, i64* %RAX, align 8, !tbaa !2428
  %1878 = load i64, i64* %RAX
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  store i64 %1878, i64* %RDI, align 8, !tbaa !2428
  %1881 = load i64, i64* %PC
  %1882 = sub i64 %1881, 2407
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 5
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 5
  store i64 %1886, i64* %PC
  %1887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1888 = load i64, i64* %1887, align 8, !tbaa !2428
  %1889 = add i64 %1888, -8
  %1890 = inttoptr i64 %1889 to i64*
  store i64 %1884, i64* %1890
  store i64 %1889, i64* %1887, align 8, !tbaa !2428
  %1891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1882, i64* %1891, align 8, !tbaa !2428
  %1892 = load i64, i64* %PC
  %1893 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1892, %struct.Memory* %1871)
  %1894 = load i64, i64* %RBP
  %1895 = sub i64 %1894, 144
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 7
  store i64 %1897, i64* %PC
  %1898 = inttoptr i64 %1895 to i64*
  %1899 = load i64, i64* %1898
  store i64 %1899, i64* %RAX, align 8, !tbaa !2428
  %1900 = load i64, i64* %RAX
  %1901 = load i64, i64* %PC
  %1902 = add i64 %1901, 3
  store i64 %1902, i64* %PC
  store i64 %1900, i64* %RDI, align 8, !tbaa !2428
  %1903 = load i64, i64* %PC
  %1904 = sub i64 %1903, 2422
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 5
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 5
  store i64 %1908, i64* %PC
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1910 = load i64, i64* %1909, align 8, !tbaa !2428
  %1911 = add i64 %1910, -8
  %1912 = inttoptr i64 %1911 to i64*
  store i64 %1906, i64* %1912
  store i64 %1911, i64* %1909, align 8, !tbaa !2428
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1904, i64* %1913, align 8, !tbaa !2428
  %1914 = load i64, i64* %PC
  %1915 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1914, %struct.Memory* %1893)
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 152
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 7
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i64*
  %1921 = load i64, i64* %1920
  store i64 %1921, i64* %RAX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RAX
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 3
  store i64 %1924, i64* %PC
  store i64 %1922, i64* %RDI, align 8, !tbaa !2428
  %1925 = load i64, i64* %PC
  %1926 = sub i64 %1925, 2437
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 5
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 5
  store i64 %1930, i64* %PC
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1932 = load i64, i64* %1931, align 8, !tbaa !2428
  %1933 = add i64 %1932, -8
  %1934 = inttoptr i64 %1933 to i64*
  store i64 %1928, i64* %1934
  store i64 %1933, i64* %1931, align 8, !tbaa !2428
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1926, i64* %1935, align 8, !tbaa !2428
  %1936 = load i64, i64* %PC
  %1937 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1936, %struct.Memory* %1915)
  %1938 = load i64, i64* %RBP
  %1939 = sub i64 %1938, 160
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 7
  store i64 %1941, i64* %PC
  %1942 = inttoptr i64 %1939 to i64*
  %1943 = load i64, i64* %1942
  store i64 %1943, i64* %RAX, align 8, !tbaa !2428
  %1944 = load i64, i64* %RAX
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 3
  store i64 %1946, i64* %PC
  store i64 %1944, i64* %RDI, align 8, !tbaa !2428
  %1947 = load i64, i64* %PC
  %1948 = sub i64 %1947, 2452
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 5
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 5
  store i64 %1952, i64* %PC
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1954 = load i64, i64* %1953, align 8, !tbaa !2428
  %1955 = add i64 %1954, -8
  %1956 = inttoptr i64 %1955 to i64*
  store i64 %1950, i64* %1956
  store i64 %1955, i64* %1953, align 8, !tbaa !2428
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1948, i64* %1957, align 8, !tbaa !2428
  %1958 = load i64, i64* %PC
  %1959 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1958, %struct.Memory* %1937)
  %1960 = load i64, i64* %RBP
  %1961 = sub i64 %1960, 168
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 7
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RAX
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 3
  store i64 %1968, i64* %PC
  store i64 %1966, i64* %RDI, align 8, !tbaa !2428
  %1969 = load i64, i64* %PC
  %1970 = sub i64 %1969, 2467
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 5
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 5
  store i64 %1974, i64* %PC
  %1975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1976 = load i64, i64* %1975, align 8, !tbaa !2428
  %1977 = add i64 %1976, -8
  %1978 = inttoptr i64 %1977 to i64*
  store i64 %1972, i64* %1978
  store i64 %1977, i64* %1975, align 8, !tbaa !2428
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1970, i64* %1979, align 8, !tbaa !2428
  %1980 = load i64, i64* %PC
  %1981 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %1980, %struct.Memory* %1959)
  %1982 = load i64, i64* %RBP
  %1983 = sub i64 %1982, 176
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 7
  store i64 %1985, i64* %PC
  %1986 = inttoptr i64 %1983 to i64*
  %1987 = load i64, i64* %1986
  store i64 %1987, i64* %RAX, align 8, !tbaa !2428
  %1988 = load i64, i64* %RAX
  %1989 = load i64, i64* %PC
  %1990 = add i64 %1989, 3
  store i64 %1990, i64* %PC
  store i64 %1988, i64* %RDI, align 8, !tbaa !2428
  %1991 = load i64, i64* %PC
  %1992 = sub i64 %1991, 2482
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 5
  store i64 %1996, i64* %PC
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1998 = load i64, i64* %1997, align 8, !tbaa !2428
  %1999 = add i64 %1998, -8
  %2000 = inttoptr i64 %1999 to i64*
  store i64 %1994, i64* %2000
  store i64 %1999, i64* %1997, align 8, !tbaa !2428
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1992, i64* %2001, align 8, !tbaa !2428
  %2002 = load i64, i64* %PC
  %2003 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2002, %struct.Memory* %1981)
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 184
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 7
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i64*
  %2009 = load i64, i64* %2008
  store i64 %2009, i64* %RAX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RAX
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 3
  store i64 %2012, i64* %PC
  store i64 %2010, i64* %RDI, align 8, !tbaa !2428
  %2013 = load i64, i64* %PC
  %2014 = sub i64 %2013, 2497
  %2015 = load i64, i64* %PC
  %2016 = add i64 %2015, 5
  %2017 = load i64, i64* %PC
  %2018 = add i64 %2017, 5
  store i64 %2018, i64* %PC
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2020 = load i64, i64* %2019, align 8, !tbaa !2428
  %2021 = add i64 %2020, -8
  %2022 = inttoptr i64 %2021 to i64*
  store i64 %2016, i64* %2022
  store i64 %2021, i64* %2019, align 8, !tbaa !2428
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2014, i64* %2023, align 8, !tbaa !2428
  %2024 = load i64, i64* %PC
  %2025 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2024, %struct.Memory* %2003)
  %2026 = load i64, i64* %RBP
  %2027 = sub i64 %2026, 192
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 7
  store i64 %2029, i64* %PC
  %2030 = inttoptr i64 %2027 to i64*
  %2031 = load i64, i64* %2030
  store i64 %2031, i64* %RAX, align 8, !tbaa !2428
  %2032 = load i64, i64* %RAX
  %2033 = load i64, i64* %PC
  %2034 = add i64 %2033, 3
  store i64 %2034, i64* %PC
  store i64 %2032, i64* %RDI, align 8, !tbaa !2428
  %2035 = load i64, i64* %PC
  %2036 = sub i64 %2035, 2512
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 5
  %2039 = load i64, i64* %PC
  %2040 = add i64 %2039, 5
  store i64 %2040, i64* %PC
  %2041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2042 = load i64, i64* %2041, align 8, !tbaa !2428
  %2043 = add i64 %2042, -8
  %2044 = inttoptr i64 %2043 to i64*
  store i64 %2038, i64* %2044
  store i64 %2043, i64* %2041, align 8, !tbaa !2428
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2036, i64* %2045, align 8, !tbaa !2428
  %2046 = load i64, i64* %PC
  %2047 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2046, %struct.Memory* %2025)
  %2048 = load i64, i64* %RBP
  %2049 = sub i64 %2048, 200
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 7
  store i64 %2051, i64* %PC
  %2052 = inttoptr i64 %2049 to i64*
  %2053 = load i64, i64* %2052
  store i64 %2053, i64* %RAX, align 8, !tbaa !2428
  %2054 = load i64, i64* %RAX
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 3
  store i64 %2056, i64* %PC
  store i64 %2054, i64* %RDI, align 8, !tbaa !2428
  %2057 = load i64, i64* %PC
  %2058 = sub i64 %2057, 2527
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 5
  %2061 = load i64, i64* %PC
  %2062 = add i64 %2061, 5
  store i64 %2062, i64* %PC
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2064 = load i64, i64* %2063, align 8, !tbaa !2428
  %2065 = add i64 %2064, -8
  %2066 = inttoptr i64 %2065 to i64*
  store i64 %2060, i64* %2066
  store i64 %2065, i64* %2063, align 8, !tbaa !2428
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2058, i64* %2067, align 8, !tbaa !2428
  %2068 = load i64, i64* %PC
  %2069 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2068, %struct.Memory* %2047)
  %2070 = load i64, i64* %RBP
  %2071 = sub i64 %2070, 208
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 7
  store i64 %2073, i64* %PC
  %2074 = inttoptr i64 %2071 to i64*
  %2075 = load i64, i64* %2074
  store i64 %2075, i64* %RAX, align 8, !tbaa !2428
  %2076 = load i64, i64* %RAX
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 3
  store i64 %2078, i64* %PC
  store i64 %2076, i64* %RDI, align 8, !tbaa !2428
  %2079 = load i64, i64* %PC
  %2080 = sub i64 %2079, 2542
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 5
  %2083 = load i64, i64* %PC
  %2084 = add i64 %2083, 5
  store i64 %2084, i64* %PC
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2086 = load i64, i64* %2085, align 8, !tbaa !2428
  %2087 = add i64 %2086, -8
  %2088 = inttoptr i64 %2087 to i64*
  store i64 %2082, i64* %2088
  store i64 %2087, i64* %2085, align 8, !tbaa !2428
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2080, i64* %2089, align 8, !tbaa !2428
  %2090 = load i64, i64* %PC
  %2091 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2090, %struct.Memory* %2069)
  %2092 = load i64, i64* %RBP
  %2093 = sub i64 %2092, 216
  %2094 = load i64, i64* %PC
  %2095 = add i64 %2094, 7
  store i64 %2095, i64* %PC
  %2096 = inttoptr i64 %2093 to i64*
  %2097 = load i64, i64* %2096
  store i64 %2097, i64* %RAX, align 8, !tbaa !2428
  %2098 = load i64, i64* %RAX
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 3
  store i64 %2100, i64* %PC
  store i64 %2098, i64* %RDI, align 8, !tbaa !2428
  %2101 = load i64, i64* %PC
  %2102 = sub i64 %2101, 2557
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 5
  %2105 = load i64, i64* %PC
  %2106 = add i64 %2105, 5
  store i64 %2106, i64* %PC
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2108 = load i64, i64* %2107, align 8, !tbaa !2428
  %2109 = add i64 %2108, -8
  %2110 = inttoptr i64 %2109 to i64*
  store i64 %2104, i64* %2110
  store i64 %2109, i64* %2107, align 8, !tbaa !2428
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2102, i64* %2111, align 8, !tbaa !2428
  %2112 = load i64, i64* %PC
  %2113 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2112, %struct.Memory* %2091)
  %2114 = load i64, i64* %RBP
  %2115 = sub i64 %2114, 224
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 7
  store i64 %2117, i64* %PC
  %2118 = inttoptr i64 %2115 to i64*
  %2119 = load i64, i64* %2118
  store i64 %2119, i64* %RAX, align 8, !tbaa !2428
  %2120 = load i64, i64* %RAX
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 3
  store i64 %2122, i64* %PC
  store i64 %2120, i64* %RDI, align 8, !tbaa !2428
  %2123 = load i64, i64* %PC
  %2124 = sub i64 %2123, 2572
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 5
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 5
  store i64 %2128, i64* %PC
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2130 = load i64, i64* %2129, align 8, !tbaa !2428
  %2131 = add i64 %2130, -8
  %2132 = inttoptr i64 %2131 to i64*
  store i64 %2126, i64* %2132
  store i64 %2131, i64* %2129, align 8, !tbaa !2428
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2124, i64* %2133, align 8, !tbaa !2428
  %2134 = load i64, i64* %PC
  %2135 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2134, %struct.Memory* %2113)
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 232
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 7
  store i64 %2139, i64* %PC
  %2140 = inttoptr i64 %2137 to i64*
  %2141 = load i64, i64* %2140
  store i64 %2141, i64* %RAX, align 8, !tbaa !2428
  %2142 = load i64, i64* %RAX
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  store i64 %2142, i64* %RDI, align 8, !tbaa !2428
  %2145 = load i64, i64* %PC
  %2146 = sub i64 %2145, 2587
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 5
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 5
  store i64 %2150, i64* %PC
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2152 = load i64, i64* %2151, align 8, !tbaa !2428
  %2153 = add i64 %2152, -8
  %2154 = inttoptr i64 %2153 to i64*
  store i64 %2148, i64* %2154
  store i64 %2153, i64* %2151, align 8, !tbaa !2428
  %2155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2146, i64* %2155, align 8, !tbaa !2428
  %2156 = load i64, i64* %PC
  %2157 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2156, %struct.Memory* %2135)
  %2158 = load i64, i64* %RBP
  %2159 = sub i64 %2158, 44
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 7
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2159 to i32*
  store i32 0, i32* %2162
  br label %block_400fa7

block_400e11:                                     ; preds = %block_400de0
  %2163 = sub i64 %2523, 60
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 3
  store i64 %2165, i64* %PC
  %2166 = inttoptr i64 %2163 to i32*
  %2167 = load i32, i32* %2166
  %2168 = zext i32 %2167 to i64
  store i64 %2168, i64* %RDI, align 8, !tbaa !2428
  %2169 = load i64, i64* %RBP
  %2170 = sub i64 %2169, 68
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 3
  store i64 %2172, i64* %PC
  %2173 = inttoptr i64 %2170 to i32*
  %2174 = load i32, i32* %2173
  %2175 = zext i32 %2174 to i64
  store i64 %2175, i64* %RSI, align 8, !tbaa !2428
  %2176 = load i64, i64* %RBP
  %2177 = sub i64 %2176, 64
  %2178 = load i64, i64* %PC
  %2179 = add i64 %2178, 3
  store i64 %2179, i64* %PC
  %2180 = inttoptr i64 %2177 to i32*
  %2181 = load i32, i32* %2180
  %2182 = zext i32 %2181 to i64
  store i64 %2182, i64* %RDX, align 8, !tbaa !2428
  %2183 = load i64, i64* %RBP
  %2184 = sub i64 %2183, 144
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 7
  store i64 %2186, i64* %PC
  %2187 = inttoptr i64 %2184 to i64*
  %2188 = load i64, i64* %2187
  store i64 %2188, i64* %RCX, align 8, !tbaa !2428
  %2189 = load i64, i64* %RBP
  %2190 = sub i64 %2189, 176
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 7
  store i64 %2192, i64* %PC
  %2193 = inttoptr i64 %2190 to i64*
  %2194 = load i64, i64* %2193
  store i64 %2194, i64* %R8, align 8, !tbaa !2428
  %2195 = load i64, i64* %PC
  %2196 = add i64 %2195, 8680
  %2197 = load i64, i64* %PC
  %2198 = add i64 %2197, 5
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 5
  store i64 %2200, i64* %PC
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2202 = load i64, i64* %2201, align 8, !tbaa !2428
  %2203 = add i64 %2202, -8
  %2204 = inttoptr i64 %2203 to i64*
  store i64 %2198, i64* %2204
  store i64 %2203, i64* %2201, align 8, !tbaa !2428
  %2205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2196, i64* %2205, align 8, !tbaa !2428
  %2206 = load i64, i64* %PC
  %2207 = call %struct.Memory* @sub_403010_check_FP(%struct.State* %0, i64 %2206, %struct.Memory* %2484)
  %2208 = load i32, i32* %EAX
  %2209 = zext i32 %2208 to i64
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 3
  store i64 %2211, i64* %PC
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2212, align 1, !tbaa !2432
  %2213 = and i32 %2208, 255
  %2214 = call i32 @llvm.ctpop.i32(i32 %2213) #16
  %2215 = trunc i32 %2214 to i8
  %2216 = and i8 %2215, 1
  %2217 = xor i8 %2216, 1
  %2218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2217, i8* %2218, align 1, !tbaa !2446
  %2219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2219, align 1, !tbaa !2450
  %2220 = icmp eq i32 %2208, 0
  %2221 = zext i1 %2220 to i8
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2221, i8* %2222, align 1, !tbaa !2447
  %2223 = lshr i32 %2208, 31
  %2224 = trunc i32 %2223 to i8
  %2225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2224, i8* %2225, align 1, !tbaa !2448
  %2226 = lshr i32 %2208, 31
  %2227 = xor i32 %2223, %2226
  %2228 = add nuw nsw i32 %2227, %2226
  %2229 = icmp eq i32 %2228, 2
  %2230 = zext i1 %2229 to i8
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2230, i8* %2231, align 1, !tbaa !2449
  %2232 = load i64, i64* %PC
  %2233 = add i64 %2232, 18
  %2234 = load i64, i64* %PC
  %2235 = add i64 %2234, 6
  %2236 = load i64, i64* %PC
  %2237 = add i64 %2236, 6
  store i64 %2237, i64* %PC
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2239 = load i8, i8* %2238, align 1, !tbaa !2447
  %2240 = icmp eq i8 %2239, 0
  %2241 = zext i1 %2240 to i8
  store i8 %2241, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2243 = select i1 %2240, i64 %2233, i64 %2235
  store i64 %2243, i64* %2242, align 8, !tbaa !2428
  %2244 = load i8, i8* %BRANCH_TAKEN
  %2245 = icmp eq i8 %2244, 1
  %2246 = load i64, i64* %RBP
  br i1 %2245, label %block_400e42, label %block_400e36

block_400e05:                                     ; preds = %block_400de0
  %2247 = sub i64 %2523, 44
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 7
  store i64 %2249, i64* %PC
  %2250 = inttoptr i64 %2247 to i32*
  store i32 1, i32* %2250
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 411
  %2253 = load i64, i64* %PC
  %2254 = add i64 %2253, 5
  store i64 %2254, i64* %PC
  %2255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2252, i64* %2255, align 8, !tbaa !2428
  br label %block_400fa7

block_400e67:                                     ; preds = %block_400e42
  %2256 = sub i64 %2348, 44
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 7
  store i64 %2258, i64* %PC
  %2259 = inttoptr i64 %2256 to i32*
  store i32 1, i32* %2259
  %2260 = load i64, i64* %PC
  %2261 = add i64 %2260, 313
  %2262 = load i64, i64* %PC
  %2263 = add i64 %2262, 5
  store i64 %2263, i64* %PC
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2261, i64* %2264, align 8, !tbaa !2428
  br label %block_400fa7

block_400e42:                                     ; preds = %block_400e11
  %2265 = sub i64 %2246, 60
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 3
  store i64 %2267, i64* %PC
  %2268 = inttoptr i64 %2265 to i32*
  %2269 = load i32, i32* %2268
  %2270 = zext i32 %2269 to i64
  store i64 %2270, i64* %RDI, align 8, !tbaa !2428
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 68
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 3
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i32*
  %2276 = load i32, i32* %2275
  %2277 = zext i32 %2276 to i64
  store i64 %2277, i64* %RSI, align 8, !tbaa !2428
  %2278 = load i64, i64* %RBP
  %2279 = sub i64 %2278, 64
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 3
  store i64 %2281, i64* %PC
  %2282 = inttoptr i64 %2279 to i32*
  %2283 = load i32, i32* %2282
  %2284 = zext i32 %2283 to i64
  store i64 %2284, i64* %RDX, align 8, !tbaa !2428
  %2285 = load i64, i64* %RBP
  %2286 = sub i64 %2285, 152
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 7
  store i64 %2288, i64* %PC
  %2289 = inttoptr i64 %2286 to i64*
  %2290 = load i64, i64* %2289
  store i64 %2290, i64* %RCX, align 8, !tbaa !2428
  %2291 = load i64, i64* %RBP
  %2292 = sub i64 %2291, 184
  %2293 = load i64, i64* %PC
  %2294 = add i64 %2293, 7
  store i64 %2294, i64* %PC
  %2295 = inttoptr i64 %2292 to i64*
  %2296 = load i64, i64* %2295
  store i64 %2296, i64* %R8, align 8, !tbaa !2428
  %2297 = load i64, i64* %PC
  %2298 = add i64 %2297, 8631
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 5
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 5
  store i64 %2302, i64* %PC
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2304 = load i64, i64* %2303, align 8, !tbaa !2428
  %2305 = add i64 %2304, -8
  %2306 = inttoptr i64 %2305 to i64*
  store i64 %2300, i64* %2306
  store i64 %2305, i64* %2303, align 8, !tbaa !2428
  %2307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2298, i64* %2307, align 8, !tbaa !2428
  %2308 = load i64, i64* %PC
  %2309 = call %struct.Memory* @sub_403010_check_FP(%struct.State* %0, i64 %2308, %struct.Memory* %2207)
  %2310 = load i32, i32* %EAX
  %2311 = zext i32 %2310 to i64
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 3
  store i64 %2313, i64* %PC
  %2314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2314, align 1, !tbaa !2432
  %2315 = and i32 %2310, 255
  %2316 = call i32 @llvm.ctpop.i32(i32 %2315) #16
  %2317 = trunc i32 %2316 to i8
  %2318 = and i8 %2317, 1
  %2319 = xor i8 %2318, 1
  %2320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2319, i8* %2320, align 1, !tbaa !2446
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2321, align 1, !tbaa !2450
  %2322 = icmp eq i32 %2310, 0
  %2323 = zext i1 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2323, i8* %2324, align 1, !tbaa !2447
  %2325 = lshr i32 %2310, 31
  %2326 = trunc i32 %2325 to i8
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2326, i8* %2327, align 1, !tbaa !2448
  %2328 = lshr i32 %2310, 31
  %2329 = xor i32 %2325, %2328
  %2330 = add nuw nsw i32 %2329, %2328
  %2331 = icmp eq i32 %2330, 2
  %2332 = zext i1 %2331 to i8
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2332, i8* %2333, align 1, !tbaa !2449
  %2334 = load i64, i64* %PC
  %2335 = add i64 %2334, 18
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 6
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 6
  store i64 %2339, i64* %PC
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2341 = load i8, i8* %2340, align 1, !tbaa !2447
  %2342 = icmp eq i8 %2341, 0
  %2343 = zext i1 %2342 to i8
  store i8 %2343, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2345 = select i1 %2342, i64 %2335, i64 %2337
  store i64 %2345, i64* %2344, align 8, !tbaa !2428
  %2346 = load i8, i8* %BRANCH_TAKEN
  %2347 = icmp eq i8 %2346, 1
  %2348 = load i64, i64* %RBP
  br i1 %2347, label %block_400e73, label %block_400e67

block_400fa7:                                     ; preds = %block_400e67, %block_400e05, %block_400e73, %block_400dd4, %block_400e36
  %MEMORY.0 = phi %struct.Memory* [ %2157, %block_400e73 ], [ %2309, %block_400e67 ], [ %2207, %block_400e36 ], [ %2484, %block_400e05 ], [ %1642, %block_400dd4 ]
  %2349 = load i64, i64* %RBP
  %2350 = sub i64 %2349, 44
  %2351 = load i64, i64* %PC
  %2352 = add i64 %2351, 3
  store i64 %2352, i64* %PC
  %2353 = inttoptr i64 %2350 to i32*
  %2354 = load i32, i32* %2353
  %2355 = zext i32 %2354 to i64
  store i64 %2355, i64* %RAX, align 8, !tbaa !2428
  %2356 = load i64, i64* %RSP
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 7
  store i64 %2358, i64* %PC
  %2359 = add i64 392, %2356
  store i64 %2359, i64* %RSP, align 8, !tbaa !2428
  %2360 = icmp ult i64 %2359, %2356
  %2361 = icmp ult i64 %2359, 392
  %2362 = or i1 %2360, %2361
  %2363 = zext i1 %2362 to i8
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2363, i8* %2364, align 1, !tbaa !2432
  %2365 = trunc i64 %2359 to i32
  %2366 = and i32 %2365, 255
  %2367 = call i32 @llvm.ctpop.i32(i32 %2366) #16
  %2368 = trunc i32 %2367 to i8
  %2369 = and i8 %2368, 1
  %2370 = xor i8 %2369, 1
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2370, i8* %2371, align 1, !tbaa !2446
  %2372 = xor i64 392, %2356
  %2373 = xor i64 %2372, %2359
  %2374 = lshr i64 %2373, 4
  %2375 = trunc i64 %2374 to i8
  %2376 = and i8 %2375, 1
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2376, i8* %2377, align 1, !tbaa !2450
  %2378 = icmp eq i64 %2359, 0
  %2379 = zext i1 %2378 to i8
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2379, i8* %2380, align 1, !tbaa !2447
  %2381 = lshr i64 %2359, 63
  %2382 = trunc i64 %2381 to i8
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2382, i8* %2383, align 1, !tbaa !2448
  %2384 = lshr i64 %2356, 63
  %2385 = xor i64 %2381, %2384
  %2386 = add nuw nsw i64 %2385, %2381
  %2387 = icmp eq i64 %2386, 2
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2388, i8* %2389, align 1, !tbaa !2449
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 1
  store i64 %2391, i64* %PC
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2393 = load i64, i64* %2392, align 8, !tbaa !2428
  %2394 = add i64 %2393, 8
  %2395 = inttoptr i64 %2393 to i64*
  %2396 = load i64, i64* %2395
  store i64 %2396, i64* %RBX, align 8, !tbaa !2428
  store i64 %2394, i64* %2392, align 8, !tbaa !2428
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 2
  store i64 %2398, i64* %PC
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2400 = load i64, i64* %2399, align 8, !tbaa !2428
  %2401 = add i64 %2400, 8
  %2402 = inttoptr i64 %2400 to i64*
  %2403 = load i64, i64* %2402
  store i64 %2403, i64* %R12, align 8, !tbaa !2428
  store i64 %2401, i64* %2399, align 8, !tbaa !2428
  %2404 = load i64, i64* %PC
  %2405 = add i64 %2404, 2
  store i64 %2405, i64* %PC
  %2406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2407 = load i64, i64* %2406, align 8, !tbaa !2428
  %2408 = add i64 %2407, 8
  %2409 = inttoptr i64 %2407 to i64*
  %2410 = load i64, i64* %2409
  store i64 %2410, i64* %R13, align 8, !tbaa !2428
  store i64 %2408, i64* %2406, align 8, !tbaa !2428
  %2411 = load i64, i64* %PC
  %2412 = add i64 %2411, 2
  store i64 %2412, i64* %PC
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2414 = load i64, i64* %2413, align 8, !tbaa !2428
  %2415 = add i64 %2414, 8
  %2416 = inttoptr i64 %2414 to i64*
  %2417 = load i64, i64* %2416
  store i64 %2417, i64* %R14, align 8, !tbaa !2428
  store i64 %2415, i64* %2413, align 8, !tbaa !2428
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 2
  store i64 %2419, i64* %PC
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2421 = load i64, i64* %2420, align 8, !tbaa !2428
  %2422 = add i64 %2421, 8
  %2423 = inttoptr i64 %2421 to i64*
  %2424 = load i64, i64* %2423
  store i64 %2424, i64* %R15, align 8, !tbaa !2428
  store i64 %2422, i64* %2420, align 8, !tbaa !2428
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 1
  store i64 %2426, i64* %PC
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2428 = load i64, i64* %2427, align 8, !tbaa !2428
  %2429 = add i64 %2428, 8
  %2430 = inttoptr i64 %2428 to i64*
  %2431 = load i64, i64* %2430
  store i64 %2431, i64* %RBP, align 8, !tbaa !2428
  store i64 %2429, i64* %2427, align 8, !tbaa !2428
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 1
  store i64 %2433, i64* %PC
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2436 = load i64, i64* %2435, align 8, !tbaa !2428
  %2437 = inttoptr i64 %2436 to i64*
  %2438 = load i64, i64* %2437
  store i64 %2438, i64* %2434, align 8, !tbaa !2428
  %2439 = add i64 %2436, 8
  store i64 %2439, i64* %2435, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400de0:                                     ; preds = %block_4008b0
  %2440 = sub i64 %1681, 60
  %2441 = load i64, i64* %PC
  %2442 = add i64 %2441, 3
  store i64 %2442, i64* %PC
  %2443 = inttoptr i64 %2440 to i32*
  %2444 = load i32, i32* %2443
  %2445 = zext i32 %2444 to i64
  store i64 %2445, i64* %RDI, align 8, !tbaa !2428
  %2446 = load i64, i64* %RBP
  %2447 = sub i64 %2446, 68
  %2448 = load i64, i64* %PC
  %2449 = add i64 %2448, 3
  store i64 %2449, i64* %PC
  %2450 = inttoptr i64 %2447 to i32*
  %2451 = load i32, i32* %2450
  %2452 = zext i32 %2451 to i64
  store i64 %2452, i64* %RSI, align 8, !tbaa !2428
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 64
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 3
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i32*
  %2458 = load i32, i32* %2457
  %2459 = zext i32 %2458 to i64
  store i64 %2459, i64* %RDX, align 8, !tbaa !2428
  %2460 = load i64, i64* %RBP
  %2461 = sub i64 %2460, 136
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 7
  store i64 %2463, i64* %PC
  %2464 = inttoptr i64 %2461 to i64*
  %2465 = load i64, i64* %2464
  store i64 %2465, i64* %RCX, align 8, !tbaa !2428
  %2466 = load i64, i64* %RBP
  %2467 = sub i64 %2466, 168
  %2468 = load i64, i64* %PC
  %2469 = add i64 %2468, 7
  store i64 %2469, i64* %PC
  %2470 = inttoptr i64 %2467 to i64*
  %2471 = load i64, i64* %2470
  store i64 %2471, i64* %R8, align 8, !tbaa !2428
  %2472 = load i64, i64* %PC
  %2473 = add i64 %2472, 8729
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 5
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  store i64 %2477, i64* %PC
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2479 = load i64, i64* %2478, align 8, !tbaa !2428
  %2480 = add i64 %2479, -8
  %2481 = inttoptr i64 %2480 to i64*
  store i64 %2475, i64* %2481
  store i64 %2480, i64* %2478, align 8, !tbaa !2428
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2473, i64* %2482, align 8, !tbaa !2428
  %2483 = load i64, i64* %PC
  %2484 = call %struct.Memory* @sub_403010_check_FP(%struct.State* %0, i64 %2483, %struct.Memory* %1642)
  %2485 = load i32, i32* %EAX
  %2486 = zext i32 %2485 to i64
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 3
  store i64 %2488, i64* %PC
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2489, align 1, !tbaa !2432
  %2490 = and i32 %2485, 255
  %2491 = call i32 @llvm.ctpop.i32(i32 %2490) #16
  %2492 = trunc i32 %2491 to i8
  %2493 = and i8 %2492, 1
  %2494 = xor i8 %2493, 1
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2494, i8* %2495, align 1, !tbaa !2446
  %2496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2496, align 1, !tbaa !2450
  %2497 = icmp eq i32 %2485, 0
  %2498 = zext i1 %2497 to i8
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2498, i8* %2499, align 1, !tbaa !2447
  %2500 = lshr i32 %2485, 31
  %2501 = trunc i32 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2501, i8* %2502, align 1, !tbaa !2448
  %2503 = lshr i32 %2485, 31
  %2504 = xor i32 %2500, %2503
  %2505 = add nuw nsw i32 %2504, %2503
  %2506 = icmp eq i32 %2505, 2
  %2507 = zext i1 %2506 to i8
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2507, i8* %2508, align 1, !tbaa !2449
  %2509 = load i64, i64* %PC
  %2510 = add i64 %2509, 18
  %2511 = load i64, i64* %PC
  %2512 = add i64 %2511, 6
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 6
  store i64 %2514, i64* %PC
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2516 = load i8, i8* %2515, align 1, !tbaa !2447
  %2517 = icmp eq i8 %2516, 0
  %2518 = zext i1 %2517 to i8
  store i8 %2518, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2520 = select i1 %2517, i64 %2510, i64 %2512
  store i64 %2520, i64* %2519, align 8, !tbaa !2428
  %2521 = load i8, i8* %BRANCH_TAKEN
  %2522 = icmp eq i8 %2521, 1
  %2523 = load i64, i64* %RBP
  br i1 %2522, label %block_400e11, label %block_400e05
}

; Function Attrs: noinline
define %struct.Memory* @sub_4031b0_print_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4031b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 7
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EDX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %ESI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 17
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %R8D = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 19
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R9D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 17
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R8 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 19
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R9 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %56 to %"class.std::bitset"*
  %57 = load i64, i64* %RBP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 1
  store i64 %59, i64* %PC
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %61 = load i64, i64* %60, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %57, i64* %63
  store i64 %62, i64* %60, align 8, !tbaa !2428
  %64 = load i64, i64* %RSP
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC
  store i64 %64, i64* %RBP, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = sub i64 %67, 96
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ult i64 %67, 96
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2432
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2446
  %81 = xor i64 96, %67
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2447
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2448
  %93 = lshr i64 %67, 63
  %94 = xor i64 %90, %93
  %95 = add nuw nsw i64 %94, %93
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %97, i8* %98, align 1, !tbaa !2449
  %99 = load i64, i64* %RBP
  %100 = add i64 %99, 16
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 4
  %107 = load i32, i32* %EDI
  %108 = zext i32 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 3
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %106 to i32*
  store i32 %107, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 8
  %114 = load i32, i32* %ESI
  %115 = zext i32 %114 to i64
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %113 to i32*
  store i32 %114, i32* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 12
  %121 = load i32, i32* %EDX
  %122 = zext i32 %121 to i64
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %120 to i32*
  store i32 %121, i32* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 24
  %128 = load i64, i64* %RCX
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 32
  %134 = load i64, i64* %R8
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %133 to i64*
  store i64 %134, i64* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 40
  %140 = load i64, i64* %R9
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 48
  %146 = load i64, i64* %RAX
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 52
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 7
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  store i32 0, i32* %154
  br label %block_4031dc

block_4031fb:                                     ; preds = %block_4031ef
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 60
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  store i32 0, i32* %159
  br label %block_403202

block_4031dc:                                     ; preds = %block_403387, %block_4031b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4031b0 ], [ %MEMORY.1, %block_403387 ]
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 52
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %161 to i32*
  %165 = load i32, i32* %164
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = load i32, i32* %EAX
  %168 = zext i32 %167 to i64
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 4
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i32*
  %174 = load i32, i32* %173
  %175 = sub i32 %167, %174
  %176 = icmp ult i32 %167, %174
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %177, i8* %178, align 1, !tbaa !2432
  %179 = and i32 %175, 255
  %180 = call i32 @llvm.ctpop.i32(i32 %179) #16
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %183, i8* %184, align 1, !tbaa !2446
  %185 = xor i32 %174, %167
  %186 = xor i32 %185, %175
  %187 = lshr i32 %186, 4
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %189, i8* %190, align 1, !tbaa !2450
  %191 = icmp eq i32 %175, 0
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %192, i8* %193, align 1, !tbaa !2447
  %194 = lshr i32 %175, 31
  %195 = trunc i32 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %195, i8* %196, align 1, !tbaa !2448
  %197 = lshr i32 %167, 31
  %198 = lshr i32 %174, 31
  %199 = xor i32 %198, %197
  %200 = xor i32 %194, %197
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 440
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 6
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %212 = load i8, i8* %211, align 1, !tbaa !2447
  %213 = icmp eq i8 %212, 0
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %215 = load i8, i8* %214, align 1, !tbaa !2448
  %216 = icmp ne i8 %215, 0
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %218 = load i8, i8* %217, align 1, !tbaa !2449
  %219 = icmp ne i8 %218, 0
  %220 = xor i1 %216, %219
  %221 = xor i1 %220, true
  %222 = and i1 %213, %221
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %225 = select i1 %222, i64 %206, i64 %208
  store i64 %225, i64* %224, align 8, !tbaa !2428
  %226 = load i8, i8* %BRANCH_TAKEN
  %227 = icmp eq i8 %226, 1
  br i1 %227, label %block_40339a, label %block_4031e8

block_403374:                                     ; preds = %block_403202
  %228 = add i64 %1531, 5
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %231, align 8, !tbaa !2428
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 56
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = trunc i64 %239 to i32
  %243 = add i32 1, %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = icmp ult i32 %243, %242
  %246 = icmp ult i32 %243, 1
  %247 = or i1 %245, %246
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %248, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %243, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 1, %239
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, %243
  %259 = lshr i32 %258, 4
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %261, i8* %262, align 1, !tbaa !2450
  %263 = icmp eq i32 %243, 0
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %264, i8* %265, align 1, !tbaa !2447
  %266 = lshr i32 %243, 31
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %267, i8* %268, align 1, !tbaa !2448
  %269 = lshr i32 %242, 31
  %270 = xor i32 %266, %269
  %271 = add nuw nsw i32 %270, %266
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %273, i8* %274, align 1, !tbaa !2449
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 56
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %PC
  %283 = sub i64 %282, 403
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %286, align 8, !tbaa !2428
  br label %block_4031ef

block_40320e:                                     ; preds = %block_403202
  %287 = add i64 %1531, 10
  store i64 %287, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 8
  store i64 %289, i64* %PC
  %290 = load i64, i64* @stderr
  store i64 %290, i64* %RDI, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 24
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %292 to i64*
  %296 = load i64, i64* %295
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 52
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = sext i32 %302 to i64
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = load i64, i64* %RCX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 7
  store i64 %306, i64* %PC
  %307 = sext i64 %304 to i128
  %308 = and i128 %307, -18446744073709551616
  %309 = zext i64 %304 to i128
  %310 = or i128 %308, %309
  %311 = mul nsw i128 33800, %310
  %312 = trunc i128 %311 to i64
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = sext i64 %312 to i128
  %314 = icmp ne i128 %313, %311
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %315, i8* %316, align 1, !tbaa !2432
  %317 = trunc i128 %311 to i32
  %318 = and i32 %317, 255
  %319 = call i32 @llvm.ctpop.i32(i32 %318) #16
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %322, i8* %323, align 1, !tbaa !2446
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %324, align 1, !tbaa !2450
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %325, align 1, !tbaa !2447
  %326 = lshr i64 %312, 63
  %327 = trunc i64 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %315, i8* %329, align 1, !tbaa !2449
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %RCX
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = add i64 %331, %330
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = icmp ult i64 %334, %330
  %336 = icmp ult i64 %334, %331
  %337 = or i1 %335, %336
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %338, i8* %339, align 1, !tbaa !2432
  %340 = trunc i64 %334 to i32
  %341 = and i32 %340, 255
  %342 = call i32 @llvm.ctpop.i32(i32 %341) #16
  %343 = trunc i32 %342 to i8
  %344 = and i8 %343, 1
  %345 = xor i8 %344, 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %345, i8* %346, align 1, !tbaa !2446
  %347 = xor i64 %331, %330
  %348 = xor i64 %347, %334
  %349 = lshr i64 %348, 4
  %350 = trunc i64 %349 to i8
  %351 = and i8 %350, 1
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %351, i8* %352, align 1, !tbaa !2450
  %353 = icmp eq i64 %334, 0
  %354 = zext i1 %353 to i8
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %354, i8* %355, align 1, !tbaa !2447
  %356 = lshr i64 %334, 63
  %357 = trunc i64 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %357, i8* %358, align 1, !tbaa !2448
  %359 = lshr i64 %330, 63
  %360 = lshr i64 %331, 63
  %361 = xor i64 %356, %359
  %362 = xor i64 %356, %360
  %363 = add nuw nsw i64 %361, %362
  %364 = icmp eq i64 %363, 2
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %365, i8* %366, align 1, !tbaa !2449
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 56
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i32*
  %372 = load i32, i32* %371
  %373 = sext i32 %372 to i64
  store i64 %373, i64* %RCX, align 8, !tbaa !2428
  %374 = load i64, i64* %RCX
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 7
  store i64 %376, i64* %PC
  %377 = sext i64 %374 to i128
  %378 = and i128 %377, -18446744073709551616
  %379 = zext i64 %374 to i128
  %380 = or i128 %378, %379
  %381 = mul nsw i128 520, %380
  %382 = trunc i128 %381 to i64
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %383 = sext i64 %382 to i128
  %384 = icmp ne i128 %383, %381
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %385, i8* %386, align 1, !tbaa !2432
  %387 = trunc i128 %381 to i32
  %388 = and i32 %387, 255
  %389 = call i32 @llvm.ctpop.i32(i32 %388) #16
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %392, i8* %393, align 1, !tbaa !2446
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %394, align 1, !tbaa !2450
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %395, align 1, !tbaa !2447
  %396 = lshr i64 %382, 63
  %397 = trunc i64 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %397, i8* %398, align 1, !tbaa !2448
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %385, i8* %399, align 1, !tbaa !2449
  %400 = load i64, i64* %RAX
  %401 = load i64, i64* %RCX
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 3
  store i64 %403, i64* %PC
  %404 = add i64 %401, %400
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  %405 = icmp ult i64 %404, %400
  %406 = icmp ult i64 %404, %401
  %407 = or i1 %405, %406
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %408, i8* %409, align 1, !tbaa !2432
  %410 = trunc i64 %404 to i32
  %411 = and i32 %410, 255
  %412 = call i32 @llvm.ctpop.i32(i32 %411) #16
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %415, i8* %416, align 1, !tbaa !2446
  %417 = xor i64 %401, %400
  %418 = xor i64 %417, %404
  %419 = lshr i64 %418, 4
  %420 = trunc i64 %419 to i8
  %421 = and i8 %420, 1
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = icmp eq i64 %404, 0
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %424, i8* %425, align 1, !tbaa !2447
  %426 = lshr i64 %404, 63
  %427 = trunc i64 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %427, i8* %428, align 1, !tbaa !2448
  %429 = lshr i64 %400, 63
  %430 = lshr i64 %401, 63
  %431 = xor i64 %426, %429
  %432 = xor i64 %426, %430
  %433 = add nuw nsw i64 %431, %432
  %434 = icmp eq i64 %433, 2
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %435, i8* %436, align 1, !tbaa !2449
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 60
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  store i64 %443, i64* %RCX, align 8, !tbaa !2428
  %444 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %445 = load i64, i64* %RAX
  %446 = load i64, i64* %RCX
  %447 = mul i64 %446, 8
  %448 = add i64 %447, %445
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 5
  store i64 %450, i64* %PC
  %451 = inttoptr i64 %448 to double*
  %452 = load double, double* %451
  %453 = bitcast i8* %444 to double*
  store double %452, double* %453, align 1, !tbaa !2453
  %454 = getelementptr inbounds i8, i8* %444, i64 8
  %455 = bitcast i8* %454 to double*
  store double 0.000000e+00, double* %455, align 1, !tbaa !2453
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 2
  store i64 %457, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %458 = load i64, i64* %PC
  %459 = sub i64 %458, 11419
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 5
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 5
  store i64 %463, i64* %PC
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %465 = load i64, i64* %464, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %461, i64* %467
  store i64 %466, i64* %464, align 8, !tbaa !2428
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %459, i64* %468, align 8, !tbaa !2428
  %469 = load i64, i64* %PC
  %470 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %469, %struct.Memory* %MEMORY.2)
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 10
  store i64 %472, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 8
  store i64 %474, i64* %PC
  %475 = load i64, i64* @stderr
  store i64 %475, i64* %RDI, align 8, !tbaa !2428
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 32
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480
  store i64 %481, i64* %RCX, align 8, !tbaa !2428
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 52
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486
  %488 = sext i32 %487 to i64
  store i64 %488, i64* %RDX, align 8, !tbaa !2428
  %489 = load i64, i64* %RDX
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 7
  store i64 %491, i64* %PC
  %492 = sext i64 %489 to i128
  %493 = and i128 %492, -18446744073709551616
  %494 = zext i64 %489 to i128
  %495 = or i128 %493, %494
  %496 = mul nsw i128 33800, %495
  %497 = trunc i128 %496 to i64
  store i64 %497, i64* %RDX, align 8, !tbaa !2428
  %498 = sext i64 %497 to i128
  %499 = icmp ne i128 %498, %496
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %500, i8* %501, align 1, !tbaa !2432
  %502 = trunc i128 %496 to i32
  %503 = and i32 %502, 255
  %504 = call i32 @llvm.ctpop.i32(i32 %503) #16
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %507, i8* %508, align 1, !tbaa !2446
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %509, align 1, !tbaa !2450
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %510, align 1, !tbaa !2447
  %511 = lshr i64 %497, 63
  %512 = trunc i64 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %512, i8* %513, align 1, !tbaa !2448
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %500, i8* %514, align 1, !tbaa !2449
  %515 = load i64, i64* %RCX
  %516 = load i64, i64* %RDX
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 3
  store i64 %518, i64* %PC
  %519 = add i64 %516, %515
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ult i64 %519, %515
  %521 = icmp ult i64 %519, %516
  %522 = or i1 %520, %521
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %523, i8* %524, align 1, !tbaa !2432
  %525 = trunc i64 %519 to i32
  %526 = and i32 %525, 255
  %527 = call i32 @llvm.ctpop.i32(i32 %526) #16
  %528 = trunc i32 %527 to i8
  %529 = and i8 %528, 1
  %530 = xor i8 %529, 1
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %530, i8* %531, align 1, !tbaa !2446
  %532 = xor i64 %516, %515
  %533 = xor i64 %532, %519
  %534 = lshr i64 %533, 4
  %535 = trunc i64 %534 to i8
  %536 = and i8 %535, 1
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %536, i8* %537, align 1, !tbaa !2450
  %538 = icmp eq i64 %519, 0
  %539 = zext i1 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %539, i8* %540, align 1, !tbaa !2447
  %541 = lshr i64 %519, 63
  %542 = trunc i64 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %542, i8* %543, align 1, !tbaa !2448
  %544 = lshr i64 %515, 63
  %545 = lshr i64 %516, 63
  %546 = xor i64 %541, %544
  %547 = xor i64 %541, %545
  %548 = add nuw nsw i64 %546, %547
  %549 = icmp eq i64 %548, 2
  %550 = zext i1 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %550, i8* %551, align 1, !tbaa !2449
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 56
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i32*
  %557 = load i32, i32* %556
  %558 = sext i32 %557 to i64
  store i64 %558, i64* %RDX, align 8, !tbaa !2428
  %559 = load i64, i64* %RDX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 7
  store i64 %561, i64* %PC
  %562 = sext i64 %559 to i128
  %563 = and i128 %562, -18446744073709551616
  %564 = zext i64 %559 to i128
  %565 = or i128 %563, %564
  %566 = mul nsw i128 520, %565
  %567 = trunc i128 %566 to i64
  store i64 %567, i64* %RDX, align 8, !tbaa !2428
  %568 = sext i64 %567 to i128
  %569 = icmp ne i128 %568, %566
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %570, i8* %571, align 1, !tbaa !2432
  %572 = trunc i128 %566 to i32
  %573 = and i32 %572, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %579, align 1, !tbaa !2450
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %580, align 1, !tbaa !2447
  %581 = lshr i64 %567, 63
  %582 = trunc i64 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %582, i8* %583, align 1, !tbaa !2448
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %570, i8* %584, align 1, !tbaa !2449
  %585 = load i64, i64* %RCX
  %586 = load i64, i64* %RDX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 3
  store i64 %588, i64* %PC
  %589 = add i64 %586, %585
  store i64 %589, i64* %RCX, align 8, !tbaa !2428
  %590 = icmp ult i64 %589, %585
  %591 = icmp ult i64 %589, %586
  %592 = or i1 %590, %591
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %593, i8* %594, align 1, !tbaa !2432
  %595 = trunc i64 %589 to i32
  %596 = and i32 %595, 255
  %597 = call i32 @llvm.ctpop.i32(i32 %596) #16
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %600, i8* %601, align 1, !tbaa !2446
  %602 = xor i64 %586, %585
  %603 = xor i64 %602, %589
  %604 = lshr i64 %603, 4
  %605 = trunc i64 %604 to i8
  %606 = and i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %606, i8* %607, align 1, !tbaa !2450
  %608 = icmp eq i64 %589, 0
  %609 = zext i1 %608 to i8
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %609, i8* %610, align 1, !tbaa !2447
  %611 = lshr i64 %589, 63
  %612 = trunc i64 %611 to i8
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %612, i8* %613, align 1, !tbaa !2448
  %614 = lshr i64 %585, 63
  %615 = lshr i64 %586, 63
  %616 = xor i64 %611, %614
  %617 = xor i64 %611, %615
  %618 = add nuw nsw i64 %616, %617
  %619 = icmp eq i64 %618, 2
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %620, i8* %621, align 1, !tbaa !2449
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 60
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = sext i32 %627 to i64
  store i64 %628, i64* %RDX, align 8, !tbaa !2428
  %629 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %630 = load i64, i64* %RCX
  %631 = load i64, i64* %RDX
  %632 = mul i64 %631, 8
  %633 = add i64 %632, %630
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 5
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to double*
  %637 = load double, double* %636
  %638 = bitcast i8* %629 to double*
  store double %637, double* %638, align 1, !tbaa !2453
  %639 = getelementptr inbounds i8, i8* %629, i64 8
  %640 = bitcast i8* %639 to double*
  store double 0.000000e+00, double* %640, align 1, !tbaa !2453
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 64
  %643 = load i32, i32* %EAX
  %644 = zext i32 %643 to i64
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %642 to i32*
  store i32 %643, i32* %647
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 2
  store i64 %649, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %650 = load i64, i64* %PC
  %651 = sub i64 %650, 11488
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 5
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 5
  store i64 %655, i64* %PC
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %657 = load i64, i64* %656, align 8, !tbaa !2428
  %658 = add i64 %657, -8
  %659 = inttoptr i64 %658 to i64*
  store i64 %653, i64* %659
  store i64 %658, i64* %656, align 8, !tbaa !2428
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %651, i64* %660, align 8, !tbaa !2428
  %661 = load i64, i64* %PC
  %662 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %661, %struct.Memory* %470)
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 10
  store i64 %664, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 8
  store i64 %666, i64* %PC
  %667 = load i64, i64* @stderr
  store i64 %667, i64* %RDI, align 8, !tbaa !2428
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 40
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i64*
  %673 = load i64, i64* %672
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 52
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %675 to i32*
  %679 = load i32, i32* %678
  %680 = sext i32 %679 to i64
  store i64 %680, i64* %RDX, align 8, !tbaa !2428
  %681 = load i64, i64* %RDX
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 7
  store i64 %683, i64* %PC
  %684 = sext i64 %681 to i128
  %685 = and i128 %684, -18446744073709551616
  %686 = zext i64 %681 to i128
  %687 = or i128 %685, %686
  %688 = mul nsw i128 33800, %687
  %689 = trunc i128 %688 to i64
  store i64 %689, i64* %RDX, align 8, !tbaa !2428
  %690 = sext i64 %689 to i128
  %691 = icmp ne i128 %690, %688
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %692, i8* %693, align 1, !tbaa !2432
  %694 = trunc i128 %688 to i32
  %695 = and i32 %694, 255
  %696 = call i32 @llvm.ctpop.i32(i32 %695) #16
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %699, i8* %700, align 1, !tbaa !2446
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %701, align 1, !tbaa !2450
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %702, align 1, !tbaa !2447
  %703 = lshr i64 %689, 63
  %704 = trunc i64 %703 to i8
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %704, i8* %705, align 1, !tbaa !2448
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %692, i8* %706, align 1, !tbaa !2449
  %707 = load i64, i64* %RCX
  %708 = load i64, i64* %RDX
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 3
  store i64 %710, i64* %PC
  %711 = add i64 %708, %707
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = icmp ult i64 %711, %707
  %713 = icmp ult i64 %711, %708
  %714 = or i1 %712, %713
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %715, i8* %716, align 1, !tbaa !2432
  %717 = trunc i64 %711 to i32
  %718 = and i32 %717, 255
  %719 = call i32 @llvm.ctpop.i32(i32 %718) #16
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %722, i8* %723, align 1, !tbaa !2446
  %724 = xor i64 %708, %707
  %725 = xor i64 %724, %711
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %728, i8* %729, align 1, !tbaa !2450
  %730 = icmp eq i64 %711, 0
  %731 = zext i1 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %731, i8* %732, align 1, !tbaa !2447
  %733 = lshr i64 %711, 63
  %734 = trunc i64 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %734, i8* %735, align 1, !tbaa !2448
  %736 = lshr i64 %707, 63
  %737 = lshr i64 %708, 63
  %738 = xor i64 %733, %736
  %739 = xor i64 %733, %737
  %740 = add nuw nsw i64 %738, %739
  %741 = icmp eq i64 %740, 2
  %742 = zext i1 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %742, i8* %743, align 1, !tbaa !2449
  %744 = load i64, i64* %RBP
  %745 = sub i64 %744, 56
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 4
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  %749 = load i32, i32* %748
  %750 = sext i32 %749 to i64
  store i64 %750, i64* %RDX, align 8, !tbaa !2428
  %751 = load i64, i64* %RDX
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 7
  store i64 %753, i64* %PC
  %754 = sext i64 %751 to i128
  %755 = and i128 %754, -18446744073709551616
  %756 = zext i64 %751 to i128
  %757 = or i128 %755, %756
  %758 = mul nsw i128 520, %757
  %759 = trunc i128 %758 to i64
  store i64 %759, i64* %RDX, align 8, !tbaa !2428
  %760 = sext i64 %759 to i128
  %761 = icmp ne i128 %760, %758
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %762, i8* %763, align 1, !tbaa !2432
  %764 = trunc i128 %758 to i32
  %765 = and i32 %764, 255
  %766 = call i32 @llvm.ctpop.i32(i32 %765) #16
  %767 = trunc i32 %766 to i8
  %768 = and i8 %767, 1
  %769 = xor i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %769, i8* %770, align 1, !tbaa !2446
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %771, align 1, !tbaa !2450
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %772, align 1, !tbaa !2447
  %773 = lshr i64 %759, 63
  %774 = trunc i64 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %774, i8* %775, align 1, !tbaa !2448
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %762, i8* %776, align 1, !tbaa !2449
  %777 = load i64, i64* %RCX
  %778 = load i64, i64* %RDX
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 3
  store i64 %780, i64* %PC
  %781 = add i64 %778, %777
  store i64 %781, i64* %RCX, align 8, !tbaa !2428
  %782 = icmp ult i64 %781, %777
  %783 = icmp ult i64 %781, %778
  %784 = or i1 %782, %783
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %785, i8* %786, align 1, !tbaa !2432
  %787 = trunc i64 %781 to i32
  %788 = and i32 %787, 255
  %789 = call i32 @llvm.ctpop.i32(i32 %788) #16
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %792, i8* %793, align 1, !tbaa !2446
  %794 = xor i64 %778, %777
  %795 = xor i64 %794, %781
  %796 = lshr i64 %795, 4
  %797 = trunc i64 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2450
  %800 = icmp eq i64 %781, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2447
  %803 = lshr i64 %781, 63
  %804 = trunc i64 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2448
  %806 = lshr i64 %777, 63
  %807 = lshr i64 %778, 63
  %808 = xor i64 %803, %806
  %809 = xor i64 %803, %807
  %810 = add nuw nsw i64 %808, %809
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %812, i8* %813, align 1, !tbaa !2449
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 60
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to i32*
  %819 = load i32, i32* %818
  %820 = sext i32 %819 to i64
  store i64 %820, i64* %RDX, align 8, !tbaa !2428
  %821 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %822 = load i64, i64* %RCX
  %823 = load i64, i64* %RDX
  %824 = mul i64 %823, 8
  %825 = add i64 %824, %822
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to double*
  %829 = load double, double* %828
  %830 = bitcast i8* %821 to double*
  store double %829, double* %830, align 1, !tbaa !2453
  %831 = getelementptr inbounds i8, i8* %821, i64 8
  %832 = bitcast i8* %831 to double*
  store double 0.000000e+00, double* %832, align 1, !tbaa !2453
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 68
  %835 = load i32, i32* %EAX
  %836 = zext i32 %835 to i64
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 3
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %834 to i32*
  store i32 %835, i32* %839
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 2
  store i64 %841, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %842 = load i64, i64* %PC
  %843 = sub i64 %842, 11557
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %849 = load i64, i64* %848, align 8, !tbaa !2428
  %850 = add i64 %849, -8
  %851 = inttoptr i64 %850 to i64*
  store i64 %845, i64* %851
  store i64 %850, i64* %848, align 8, !tbaa !2428
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %843, i64* %852, align 8, !tbaa !2428
  %853 = load i64, i64* %PC
  %854 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %853, %struct.Memory* %662)
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 10
  store i64 %856, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 8
  store i64 %858, i64* %PC
  %859 = load i64, i64* @stderr
  store i64 %859, i64* %RDI, align 8, !tbaa !2428
  %860 = load i64, i64* %RBP
  %861 = sub i64 %860, 48
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %RCX, align 8, !tbaa !2428
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 52
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 4
  store i64 %869, i64* %PC
  %870 = inttoptr i64 %867 to i32*
  %871 = load i32, i32* %870
  %872 = sext i32 %871 to i64
  store i64 %872, i64* %RDX, align 8, !tbaa !2428
  %873 = load i64, i64* %RDX
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 7
  store i64 %875, i64* %PC
  %876 = sext i64 %873 to i128
  %877 = and i128 %876, -18446744073709551616
  %878 = zext i64 %873 to i128
  %879 = or i128 %877, %878
  %880 = mul nsw i128 33800, %879
  %881 = trunc i128 %880 to i64
  store i64 %881, i64* %RDX, align 8, !tbaa !2428
  %882 = sext i64 %881 to i128
  %883 = icmp ne i128 %882, %880
  %884 = zext i1 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %884, i8* %885, align 1, !tbaa !2432
  %886 = trunc i128 %880 to i32
  %887 = and i32 %886, 255
  %888 = call i32 @llvm.ctpop.i32(i32 %887) #16
  %889 = trunc i32 %888 to i8
  %890 = and i8 %889, 1
  %891 = xor i8 %890, 1
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %891, i8* %892, align 1, !tbaa !2446
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %893, align 1, !tbaa !2450
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %894, align 1, !tbaa !2447
  %895 = lshr i64 %881, 63
  %896 = trunc i64 %895 to i8
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %896, i8* %897, align 1, !tbaa !2448
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %884, i8* %898, align 1, !tbaa !2449
  %899 = load i64, i64* %RCX
  %900 = load i64, i64* %RDX
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = add i64 %900, %899
  store i64 %903, i64* %RCX, align 8, !tbaa !2428
  %904 = icmp ult i64 %903, %899
  %905 = icmp ult i64 %903, %900
  %906 = or i1 %904, %905
  %907 = zext i1 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %907, i8* %908, align 1, !tbaa !2432
  %909 = trunc i64 %903 to i32
  %910 = and i32 %909, 255
  %911 = call i32 @llvm.ctpop.i32(i32 %910) #16
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %914, i8* %915, align 1, !tbaa !2446
  %916 = xor i64 %900, %899
  %917 = xor i64 %916, %903
  %918 = lshr i64 %917, 4
  %919 = trunc i64 %918 to i8
  %920 = and i8 %919, 1
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %920, i8* %921, align 1, !tbaa !2450
  %922 = icmp eq i64 %903, 0
  %923 = zext i1 %922 to i8
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %923, i8* %924, align 1, !tbaa !2447
  %925 = lshr i64 %903, 63
  %926 = trunc i64 %925 to i8
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %926, i8* %927, align 1, !tbaa !2448
  %928 = lshr i64 %899, 63
  %929 = lshr i64 %900, 63
  %930 = xor i64 %925, %928
  %931 = xor i64 %925, %929
  %932 = add nuw nsw i64 %930, %931
  %933 = icmp eq i64 %932, 2
  %934 = zext i1 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %934, i8* %935, align 1, !tbaa !2449
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 56
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i32*
  %941 = load i32, i32* %940
  %942 = sext i32 %941 to i64
  store i64 %942, i64* %RDX, align 8, !tbaa !2428
  %943 = load i64, i64* %RDX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 7
  store i64 %945, i64* %PC
  %946 = sext i64 %943 to i128
  %947 = and i128 %946, -18446744073709551616
  %948 = zext i64 %943 to i128
  %949 = or i128 %947, %948
  %950 = mul nsw i128 520, %949
  %951 = trunc i128 %950 to i64
  store i64 %951, i64* %RDX, align 8, !tbaa !2428
  %952 = sext i64 %951 to i128
  %953 = icmp ne i128 %952, %950
  %954 = zext i1 %953 to i8
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %954, i8* %955, align 1, !tbaa !2432
  %956 = trunc i128 %950 to i32
  %957 = and i32 %956, 255
  %958 = call i32 @llvm.ctpop.i32(i32 %957) #16
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %961, i8* %962, align 1, !tbaa !2446
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %963, align 1, !tbaa !2450
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %964, align 1, !tbaa !2447
  %965 = lshr i64 %951, 63
  %966 = trunc i64 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2448
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %954, i8* %968, align 1, !tbaa !2449
  %969 = load i64, i64* %RCX
  %970 = load i64, i64* %RDX
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 3
  store i64 %972, i64* %PC
  %973 = add i64 %970, %969
  store i64 %973, i64* %RCX, align 8, !tbaa !2428
  %974 = icmp ult i64 %973, %969
  %975 = icmp ult i64 %973, %970
  %976 = or i1 %974, %975
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %977, i8* %978, align 1, !tbaa !2432
  %979 = trunc i64 %973 to i32
  %980 = and i32 %979, 255
  %981 = call i32 @llvm.ctpop.i32(i32 %980) #16
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  %984 = xor i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %984, i8* %985, align 1, !tbaa !2446
  %986 = xor i64 %970, %969
  %987 = xor i64 %986, %973
  %988 = lshr i64 %987, 4
  %989 = trunc i64 %988 to i8
  %990 = and i8 %989, 1
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %990, i8* %991, align 1, !tbaa !2450
  %992 = icmp eq i64 %973, 0
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %993, i8* %994, align 1, !tbaa !2447
  %995 = lshr i64 %973, 63
  %996 = trunc i64 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %996, i8* %997, align 1, !tbaa !2448
  %998 = lshr i64 %969, 63
  %999 = lshr i64 %970, 63
  %1000 = xor i64 %995, %998
  %1001 = xor i64 %995, %999
  %1002 = add nuw nsw i64 %1000, %1001
  %1003 = icmp eq i64 %1002, 2
  %1004 = zext i1 %1003 to i8
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1004, i8* %1005, align 1, !tbaa !2449
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 60
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 4
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to i32*
  %1011 = load i32, i32* %1010
  %1012 = sext i32 %1011 to i64
  store i64 %1012, i64* %RDX, align 8, !tbaa !2428
  %1013 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1014 = load i64, i64* %RCX
  %1015 = load i64, i64* %RDX
  %1016 = mul i64 %1015, 8
  %1017 = add i64 %1016, %1014
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 5
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to double*
  %1021 = load double, double* %1020
  %1022 = bitcast i8* %1013 to double*
  store double %1021, double* %1022, align 1, !tbaa !2453
  %1023 = getelementptr inbounds i8, i8* %1013, i64 8
  %1024 = bitcast i8* %1023 to double*
  store double 0.000000e+00, double* %1024, align 1, !tbaa !2453
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 72
  %1027 = load i32, i32* %EAX
  %1028 = zext i32 %1027 to i64
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 3
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1026 to i32*
  store i32 %1027, i32* %1031
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 2
  store i64 %1033, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1034 = load i64, i64* %PC
  %1035 = sub i64 %1034, 11626
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 5
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 5
  store i64 %1039, i64* %PC
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1041 = load i64, i64* %1040, align 8, !tbaa !2428
  %1042 = add i64 %1041, -8
  %1043 = inttoptr i64 %1042 to i64*
  store i64 %1037, i64* %1043
  store i64 %1042, i64* %1040, align 8, !tbaa !2428
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1035, i64* %1044, align 8, !tbaa !2428
  %1045 = load i64, i64* %PC
  %1046 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %1045, %struct.Memory* %854)
  %1047 = bitcast i32* %R8D to i64*
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 6
  store i64 %1049, i64* %PC
  store i64 20, i64* %1047, align 8, !tbaa !2428
  %1050 = bitcast i32* %R9D to i64*
  %1051 = load i64, i64* %RBP
  %1052 = sub i64 %1051, 52
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 4
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1052 to i32*
  %1056 = load i32, i32* %1055
  %1057 = zext i32 %1056 to i64
  store i64 %1057, i64* %1050, align 8, !tbaa !2428
  %1058 = bitcast i32* %R9D to i64*
  %1059 = load i32, i32* %R9D
  %1060 = zext i32 %1059 to i64
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 8
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 5
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i32*
  %1066 = load i32, i32* %1065
  %1067 = shl i64 %1060, 32
  %1068 = ashr exact i64 %1067, 32
  %1069 = sext i32 %1066 to i64
  %1070 = mul nsw i64 %1069, %1068
  %1071 = trunc i64 %1070 to i32
  %1072 = and i64 %1070, 4294967295
  store i64 %1072, i64* %1058, align 8, !tbaa !2428
  %1073 = shl i64 %1070, 32
  %1074 = ashr exact i64 %1073, 32
  %1075 = icmp ne i64 %1074, %1070
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2432
  %1078 = and i32 %1071, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1084, align 1, !tbaa !2450
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1085, align 1, !tbaa !2447
  %1086 = lshr i32 %1071, 31
  %1087 = trunc i32 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1087, i8* %1088, align 1, !tbaa !2448
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1076, i8* %1089, align 1, !tbaa !2449
  %1090 = bitcast i32* %R9D to i64*
  %1091 = load i32, i32* %R9D
  %1092 = zext i32 %1091 to i64
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 56
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i32*
  %1098 = load i32, i32* %1097
  %1099 = add i32 %1098, %1091
  %1100 = zext i32 %1099 to i64
  store i64 %1100, i64* %1090, align 8, !tbaa !2428
  %1101 = icmp ult i32 %1099, %1091
  %1102 = icmp ult i32 %1099, %1098
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = and i32 %1099, 255
  %1107 = call i32 @llvm.ctpop.i32(i32 %1106) #16
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = xor i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1110, i8* %1111, align 1, !tbaa !2446
  %1112 = xor i32 %1098, %1091
  %1113 = xor i32 %1112, %1099
  %1114 = lshr i32 %1113, 4
  %1115 = trunc i32 %1114 to i8
  %1116 = and i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1116, i8* %1117, align 1, !tbaa !2450
  %1118 = icmp eq i32 %1099, 0
  %1119 = zext i1 %1118 to i8
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1119, i8* %1120, align 1, !tbaa !2447
  %1121 = lshr i32 %1099, 31
  %1122 = trunc i32 %1121 to i8
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1122, i8* %1123, align 1, !tbaa !2448
  %1124 = lshr i32 %1091, 31
  %1125 = lshr i32 %1098, 31
  %1126 = xor i32 %1121, %1124
  %1127 = xor i32 %1121, %1125
  %1128 = add nuw nsw i32 %1126, %1127
  %1129 = icmp eq i32 %1128, 2
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1130, i8* %1131, align 1, !tbaa !2449
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 76
  %1134 = load i32, i32* %EAX
  %1135 = zext i32 %1134 to i64
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 3
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1133 to i32*
  store i32 %1134, i32* %1138
  %1139 = load i32, i32* %R9D
  %1140 = zext i32 %1139 to i64
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 3
  store i64 %1142, i64* %PC
  %1143 = and i64 %1140, 4294967295
  store i64 %1143, i64* %RAX, align 8, !tbaa !2428
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 1
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1148 = bitcast %union.anon* %1147 to i32*
  %1149 = load i32, i32* %1148, align 8, !tbaa !2452
  %1150 = sext i32 %1149 to i64
  %1151 = lshr i64 %1150, 32
  store i64 %1151, i64* %1146, align 8, !tbaa !2428
  %1152 = load i32, i32* %R8D
  %1153 = zext i32 %1152 to i64
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 3
  store i64 %1155, i64* %PC
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1157 = bitcast %union.anon* %1156 to i32*
  %1158 = load i32, i32* %1157, align 8, !tbaa !2452
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1161 = bitcast %union.anon* %1160 to i32*
  %1162 = load i32, i32* %1161, align 8, !tbaa !2452
  %1163 = zext i32 %1162 to i64
  %1164 = shl i64 %1153, 32
  %1165 = ashr exact i64 %1164, 32
  %1166 = shl nuw i64 %1163, 32
  %1167 = or i64 %1166, %1159
  %1168 = sdiv i64 %1167, %1165
  %1169 = shl i64 %1168, 32
  %1170 = ashr exact i64 %1169, 32
  %1171 = icmp eq i64 %1168, %1170
  br i1 %1171, label %1176, label %1172

; <label>:1172:                                   ; preds = %block_40320e
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1174 = load i64, i64* %1173, align 8, !tbaa !2428
  %1175 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1174, %struct.Memory* %1046) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:1176:                                   ; preds = %block_40320e
  %1177 = srem i64 %1167, %1165
  %1178 = getelementptr inbounds %union.anon, %union.anon* %1156, i64 0, i32 0
  %1179 = and i64 %1168, 4294967295
  store i64 %1179, i64* %1178, align 8, !tbaa !2428
  %1180 = getelementptr inbounds %union.anon, %union.anon* %1160, i64 0, i32 0
  %1181 = and i64 %1177, 4294967295
  store i64 %1181, i64* %1180, align 8, !tbaa !2428
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1182, align 1, !tbaa !2432
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1183, align 1, !tbaa !2446
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1184, align 1, !tbaa !2450
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1185, align 1, !tbaa !2447
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1186, align 1, !tbaa !2448
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1187, align 1, !tbaa !2449
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %1172, %1176
  %1188 = phi %struct.Memory* [ %1175, %1172 ], [ %1046, %1176 ]
  %1189 = load i32, i32* %EDX
  %1190 = zext i32 %1189 to i64
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 3
  store i64 %1192, i64* %PC
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1193, align 1, !tbaa !2432
  %1194 = and i32 %1189, 255
  %1195 = call i32 @llvm.ctpop.i32(i32 %1194) #16
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1198, i8* %1199, align 1, !tbaa !2446
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1200, align 1, !tbaa !2450
  %1201 = icmp eq i32 %1189, 0
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1202, i8* %1203, align 1, !tbaa !2447
  %1204 = lshr i32 %1189, 31
  %1205 = trunc i32 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1205, i8* %1206, align 1, !tbaa !2448
  %1207 = lshr i32 %1189, 31
  %1208 = xor i32 %1204, %1207
  %1209 = add nuw nsw i32 %1208, %1207
  %1210 = icmp eq i32 %1209, 2
  %1211 = zext i1 %1210 to i8
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1211, i8* %1212, align 1, !tbaa !2449
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 34
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 6
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 6
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1220 = load i8, i8* %1219, align 1, !tbaa !2447
  %1221 = icmp eq i8 %1220, 0
  %1222 = zext i1 %1221 to i8
  store i8 %1222, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1224 = select i1 %1221, i64 %1214, i64 %1216
  store i64 %1224, i64* %1223, align 8, !tbaa !2428
  %1225 = load i8, i8* %BRANCH_TAKEN
  %1226 = icmp eq i8 %1225, 1
  br i1 %1226, label %block_403361, label %block_403345

block_4031e8:                                     ; preds = %block_4031dc
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 56
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 7
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i32*
  store i32 0, i32* %1231
  br label %block_4031ef

block_4031ef:                                     ; preds = %block_4031e8, %block_403374
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4031e8 ], [ %MEMORY.2, %block_403374 ]
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 56
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 3
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i32*
  %1237 = load i32, i32* %1236
  %1238 = zext i32 %1237 to i64
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  %1239 = load i32, i32* %EAX
  %1240 = zext i32 %1239 to i64
  %1241 = load i64, i64* %RBP
  %1242 = sub i64 %1241, 12
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 3
  store i64 %1244, i64* %PC
  %1245 = inttoptr i64 %1242 to i32*
  %1246 = load i32, i32* %1245
  %1247 = sub i32 %1239, %1246
  %1248 = icmp ult i32 %1239, %1246
  %1249 = zext i1 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1249, i8* %1250, align 1, !tbaa !2432
  %1251 = and i32 %1247, 255
  %1252 = call i32 @llvm.ctpop.i32(i32 %1251) #16
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = xor i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1255, i8* %1256, align 1, !tbaa !2446
  %1257 = xor i32 %1246, %1239
  %1258 = xor i32 %1257, %1247
  %1259 = lshr i32 %1258, 4
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1261, i8* %1262, align 1, !tbaa !2450
  %1263 = icmp eq i32 %1247, 0
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1264, i8* %1265, align 1, !tbaa !2447
  %1266 = lshr i32 %1247, 31
  %1267 = trunc i32 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1267, i8* %1268, align 1, !tbaa !2448
  %1269 = lshr i32 %1239, 31
  %1270 = lshr i32 %1246, 31
  %1271 = xor i32 %1270, %1269
  %1272 = xor i32 %1266, %1269
  %1273 = add nuw nsw i32 %1272, %1271
  %1274 = icmp eq i32 %1273, 2
  %1275 = zext i1 %1274 to i8
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1275, i8* %1276, align 1, !tbaa !2449
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 402
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 6
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 6
  store i64 %1282, i64* %PC
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1284 = load i8, i8* %1283, align 1, !tbaa !2447
  %1285 = icmp eq i8 %1284, 0
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1287 = load i8, i8* %1286, align 1, !tbaa !2448
  %1288 = icmp ne i8 %1287, 0
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1290 = load i8, i8* %1289, align 1, !tbaa !2449
  %1291 = icmp ne i8 %1290, 0
  %1292 = xor i1 %1288, %1291
  %1293 = xor i1 %1292, true
  %1294 = and i1 %1285, %1293
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1297 = select i1 %1294, i64 %1278, i64 %1280
  store i64 %1297, i64* %1296, align 8, !tbaa !2428
  %1298 = load i8, i8* %BRANCH_TAKEN
  %1299 = icmp eq i8 %1298, 1
  br i1 %1299, label %block_403387, label %block_4031fb

block_403387:                                     ; preds = %block_4031ef
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 5
  store i64 %1303, i64* %PC
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1301, i64* %1304, align 8, !tbaa !2428
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 52
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 3
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i32*
  %1310 = load i32, i32* %1309
  %1311 = zext i32 %1310 to i64
  store i64 %1311, i64* %RAX, align 8, !tbaa !2428
  %1312 = load i64, i64* %RAX
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 3
  store i64 %1314, i64* %PC
  %1315 = trunc i64 %1312 to i32
  %1316 = add i32 1, %1315
  %1317 = zext i32 %1316 to i64
  store i64 %1317, i64* %RAX, align 8, !tbaa !2428
  %1318 = icmp ult i32 %1316, %1315
  %1319 = icmp ult i32 %1316, 1
  %1320 = or i1 %1318, %1319
  %1321 = zext i1 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1321, i8* %1322, align 1, !tbaa !2432
  %1323 = and i32 %1316, 255
  %1324 = call i32 @llvm.ctpop.i32(i32 %1323) #16
  %1325 = trunc i32 %1324 to i8
  %1326 = and i8 %1325, 1
  %1327 = xor i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1327, i8* %1328, align 1, !tbaa !2446
  %1329 = xor i64 1, %1312
  %1330 = trunc i64 %1329 to i32
  %1331 = xor i32 %1330, %1316
  %1332 = lshr i32 %1331, 4
  %1333 = trunc i32 %1332 to i8
  %1334 = and i8 %1333, 1
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1334, i8* %1335, align 1, !tbaa !2450
  %1336 = icmp eq i32 %1316, 0
  %1337 = zext i1 %1336 to i8
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1337, i8* %1338, align 1, !tbaa !2447
  %1339 = lshr i32 %1316, 31
  %1340 = trunc i32 %1339 to i8
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1340, i8* %1341, align 1, !tbaa !2448
  %1342 = lshr i32 %1315, 31
  %1343 = xor i32 %1339, %1342
  %1344 = add nuw nsw i32 %1343, %1339
  %1345 = icmp eq i32 %1344, 2
  %1346 = zext i1 %1345 to i8
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1346, i8* %1347, align 1, !tbaa !2449
  %1348 = load i64, i64* %RBP
  %1349 = sub i64 %1348, 52
  %1350 = load i32, i32* %EAX
  %1351 = zext i32 %1350 to i64
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 3
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1349 to i32*
  store i32 %1350, i32* %1354
  %1355 = load i64, i64* %PC
  %1356 = sub i64 %1355, 441
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 5
  store i64 %1358, i64* %PC
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1356, i64* %1359, align 8, !tbaa !2428
  br label %block_4031dc

block_40339a:                                     ; preds = %block_4031dc
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 10
  store i64 %1361, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 8
  store i64 %1363, i64* %PC
  %1364 = load i64, i64* @stderr
  store i64 %1364, i64* %RDI, align 8, !tbaa !2428
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 2
  store i64 %1366, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1367 = load i64, i64* %PC
  %1368 = sub i64 %1367, 11774
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 5
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 5
  store i64 %1372, i64* %PC
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1374 = load i64, i64* %1373, align 8, !tbaa !2428
  %1375 = add i64 %1374, -8
  %1376 = inttoptr i64 %1375 to i64*
  store i64 %1370, i64* %1376
  store i64 %1375, i64* %1373, align 8, !tbaa !2428
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1368, i64* %1377, align 8, !tbaa !2428
  %1378 = load i64, i64* %PC
  %1379 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %1378, %struct.Memory* %MEMORY.0)
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 84
  %1382 = load i32, i32* %EAX
  %1383 = zext i32 %1382 to i64
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 3
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1381 to i32*
  store i32 %1382, i32* %1386
  %1387 = load i64, i64* %RSP
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = add i64 96, %1387
  store i64 %1390, i64* %RSP, align 8, !tbaa !2428
  %1391 = icmp ult i64 %1390, %1387
  %1392 = icmp ult i64 %1390, 96
  %1393 = or i1 %1391, %1392
  %1394 = zext i1 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1394, i8* %1395, align 1, !tbaa !2432
  %1396 = trunc i64 %1390 to i32
  %1397 = and i32 %1396, 255
  %1398 = call i32 @llvm.ctpop.i32(i32 %1397) #16
  %1399 = trunc i32 %1398 to i8
  %1400 = and i8 %1399, 1
  %1401 = xor i8 %1400, 1
  %1402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1401, i8* %1402, align 1, !tbaa !2446
  %1403 = xor i64 96, %1387
  %1404 = xor i64 %1403, %1390
  %1405 = lshr i64 %1404, 4
  %1406 = trunc i64 %1405 to i8
  %1407 = and i8 %1406, 1
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1407, i8* %1408, align 1, !tbaa !2450
  %1409 = icmp eq i64 %1390, 0
  %1410 = zext i1 %1409 to i8
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1410, i8* %1411, align 1, !tbaa !2447
  %1412 = lshr i64 %1390, 63
  %1413 = trunc i64 %1412 to i8
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1413, i8* %1414, align 1, !tbaa !2448
  %1415 = lshr i64 %1387, 63
  %1416 = xor i64 %1412, %1415
  %1417 = add nuw nsw i64 %1416, %1412
  %1418 = icmp eq i64 %1417, 2
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1419, i8* %1420, align 1, !tbaa !2449
  %1421 = load i64, i64* %PC
  %1422 = add i64 %1421, 1
  store i64 %1422, i64* %PC
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1424 = load i64, i64* %1423, align 8, !tbaa !2428
  %1425 = add i64 %1424, 8
  %1426 = inttoptr i64 %1424 to i64*
  %1427 = load i64, i64* %1426
  store i64 %1427, i64* %RBP, align 8, !tbaa !2428
  store i64 %1425, i64* %1423, align 8, !tbaa !2428
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 1
  store i64 %1429, i64* %PC
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1432 = load i64, i64* %1431, align 8, !tbaa !2428
  %1433 = inttoptr i64 %1432 to i64*
  %1434 = load i64, i64* %1433
  store i64 %1434, i64* %1430, align 8, !tbaa !2428
  %1435 = add i64 %1432, 8
  store i64 %1435, i64* %1431, align 8, !tbaa !2428
  ret %struct.Memory* %1379

block_403345:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 10
  store i64 %1437, i64* %PC
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 8
  store i64 %1439, i64* %PC
  %1440 = load i64, i64* @stderr
  store i64 %1440, i64* %RDI, align 8, !tbaa !2428
  %1441 = load i64, i64* %PC
  %1442 = add i64 %1441, 2
  store i64 %1442, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1443 = load i64, i64* %PC
  %1444 = sub i64 %1443, 11689
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 5
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 5
  store i64 %1448, i64* %PC
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1450 = load i64, i64* %1449, align 8, !tbaa !2428
  %1451 = add i64 %1450, -8
  %1452 = inttoptr i64 %1451 to i64*
  store i64 %1446, i64* %1452
  store i64 %1451, i64* %1449, align 8, !tbaa !2428
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1444, i64* %1453, align 8, !tbaa !2428
  %1454 = load i64, i64* %PC
  %1455 = call %struct.Memory* @ext_4005b0_fprintf(%struct.State* %0, i64 %1454, %struct.Memory* %1188)
  %1456 = load i64, i64* %RBP
  %1457 = sub i64 %1456, 80
  %1458 = load i32, i32* %EAX
  %1459 = zext i32 %1458 to i64
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 3
  store i64 %1461, i64* %PC
  %1462 = inttoptr i64 %1457 to i32*
  store i32 %1458, i32* %1462
  br label %block_403361

block_403202:                                     ; preds = %block_403361, %block_4031fb
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4031fb ], [ %MEMORY.3, %block_403361 ]
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 60
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 3
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1464 to i32*
  %1468 = load i32, i32* %1467
  %1469 = zext i32 %1468 to i64
  store i64 %1469, i64* %RAX, align 8, !tbaa !2428
  %1470 = load i32, i32* %EAX
  %1471 = zext i32 %1470 to i64
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 8
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 3
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1473 to i32*
  %1477 = load i32, i32* %1476
  %1478 = sub i32 %1470, %1477
  %1479 = icmp ult i32 %1470, %1477
  %1480 = zext i1 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1480, i8* %1481, align 1, !tbaa !2432
  %1482 = and i32 %1478, 255
  %1483 = call i32 @llvm.ctpop.i32(i32 %1482) #16
  %1484 = trunc i32 %1483 to i8
  %1485 = and i8 %1484, 1
  %1486 = xor i8 %1485, 1
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1486, i8* %1487, align 1, !tbaa !2446
  %1488 = xor i32 %1477, %1470
  %1489 = xor i32 %1488, %1478
  %1490 = lshr i32 %1489, 4
  %1491 = trunc i32 %1490 to i8
  %1492 = and i8 %1491, 1
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1492, i8* %1493, align 1, !tbaa !2450
  %1494 = icmp eq i32 %1478, 0
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1495, i8* %1496, align 1, !tbaa !2447
  %1497 = lshr i32 %1478, 31
  %1498 = trunc i32 %1497 to i8
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1498, i8* %1499, align 1, !tbaa !2448
  %1500 = lshr i32 %1470, 31
  %1501 = lshr i32 %1477, 31
  %1502 = xor i32 %1501, %1500
  %1503 = xor i32 %1497, %1500
  %1504 = add nuw nsw i32 %1503, %1502
  %1505 = icmp eq i32 %1504, 2
  %1506 = zext i1 %1505 to i8
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1506, i8* %1507, align 1, !tbaa !2449
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 364
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 6
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 6
  store i64 %1513, i64* %PC
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1515 = load i8, i8* %1514, align 1, !tbaa !2447
  %1516 = icmp eq i8 %1515, 0
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1518 = load i8, i8* %1517, align 1, !tbaa !2448
  %1519 = icmp ne i8 %1518, 0
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1521 = load i8, i8* %1520, align 1, !tbaa !2449
  %1522 = icmp ne i8 %1521, 0
  %1523 = xor i1 %1519, %1522
  %1524 = xor i1 %1523, true
  %1525 = and i1 %1516, %1524
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1528 = select i1 %1525, i64 %1509, i64 %1511
  store i64 %1528, i64* %1527, align 8, !tbaa !2428
  %1529 = load i8, i8* %BRANCH_TAKEN
  %1530 = icmp eq i8 %1529, 1
  %1531 = load i64, i64* %PC
  br i1 %1530, label %block_403374, label %block_40320e

block_403361:                                     ; preds = %block_403345, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.3 = phi %struct.Memory* [ %1188, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %1455, %block_403345 ]
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 5
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 5
  store i64 %1535, i64* %PC
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1533, i64* %1536, align 8, !tbaa !2428
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 60
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 3
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1538 to i32*
  %1542 = load i32, i32* %1541
  %1543 = zext i32 %1542 to i64
  store i64 %1543, i64* %RAX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RAX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 3
  store i64 %1546, i64* %PC
  %1547 = trunc i64 %1544 to i32
  %1548 = add i32 1, %1547
  %1549 = zext i32 %1548 to i64
  store i64 %1549, i64* %RAX, align 8, !tbaa !2428
  %1550 = icmp ult i32 %1548, %1547
  %1551 = icmp ult i32 %1548, 1
  %1552 = or i1 %1550, %1551
  %1553 = zext i1 %1552 to i8
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1553, i8* %1554, align 1, !tbaa !2432
  %1555 = and i32 %1548, 255
  %1556 = call i32 @llvm.ctpop.i32(i32 %1555) #16
  %1557 = trunc i32 %1556 to i8
  %1558 = and i8 %1557, 1
  %1559 = xor i8 %1558, 1
  %1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1559, i8* %1560, align 1, !tbaa !2446
  %1561 = xor i64 1, %1544
  %1562 = trunc i64 %1561 to i32
  %1563 = xor i32 %1562, %1548
  %1564 = lshr i32 %1563, 4
  %1565 = trunc i32 %1564 to i8
  %1566 = and i8 %1565, 1
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1566, i8* %1567, align 1, !tbaa !2450
  %1568 = icmp eq i32 %1548, 0
  %1569 = zext i1 %1568 to i8
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1569, i8* %1570, align 1, !tbaa !2447
  %1571 = lshr i32 %1548, 31
  %1572 = trunc i32 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1572, i8* %1573, align 1, !tbaa !2448
  %1574 = lshr i32 %1547, 31
  %1575 = xor i32 %1571, %1574
  %1576 = add nuw nsw i32 %1575, %1571
  %1577 = icmp eq i32 %1576, 2
  %1578 = zext i1 %1577 to i8
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1578, i8* %1579, align 1, !tbaa !2449
  %1580 = load i64, i64* %RBP
  %1581 = sub i64 %1580, 60
  %1582 = load i32, i32* %EAX
  %1583 = zext i32 %1582 to i64
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 3
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1581 to i32*
  store i32 %1582, i32* %1586
  %1587 = load i64, i64* %PC
  %1588 = sub i64 %1587, 365
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1588, i64* %1591, align 8, !tbaa !2428
  br label %block_403202
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4006c0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4006c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4006c0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4006c0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400690___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400690___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400690___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_403430___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403430;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_403430___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403430___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4033c0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4033c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4033c0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4033c0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4008b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4008b0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040e8___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040e0_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4005b0_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4005c0_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_604108_posix_memalign(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d8_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040f0_calloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_alloc_data() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4007f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_alloc_data_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_flush_cache() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4006d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_flush_cache_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4006d0_polybench_flush_cache(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_stop() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400790;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_timer_stop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400790_polybench_timer_stop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_print() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4007b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_timer_print_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4007b0_polybench_timer_print(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x403434;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_403434__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_prepare_instruments() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_prepare_instruments_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400750_polybench_prepare_instruments(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_start() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_timer_start_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400760_polybench_timer_start(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400550__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4033c0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_403430___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2445, !2445, i64 0}
!2453 = !{!2454, !2454, i64 0}
!2454 = !{!"double", !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
