; ModuleID = 'mcsema/test.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_403440__rodata_type = type <{ [112 x i8], [7 x i8], [51 x i8], [8 x i8], [84 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604060__bss_type = type <{ [8 x i8], [8 x i8] }>
%polybench_papi_counters_threadid_type = type <{ [8 x i8] }>
%polybench_program_total_flops_type = type <{ [8 x i8] }>
%polybench_c_end_type = type <{ [8 x i8] }>
%polybench_t_end_type = type <{ [8 x i8] }>
%polybench_t_start_type = type <{ [8 x i8] }>
%polybench_c_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external local_unnamed_addr global i64, align 32
@seg_403440__rodata = internal constant %seg_403440__rodata_type <{ [112 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00E@\00\00\00\00\00J\A2@\00\00\00\00\00\00&@\00\00\00\00\00\00$@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\00\00\00\00\00\00\18@\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\F1h\E3\88\B5\F8\E4>\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [7 x i8] c"%0.6f\0A\00", [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", [8 x i8] c"%0.2lf \00", [84 x i8] c"A[%d][%d][%d] = %lf and B[%d][%d][%d] = %lf differ more than FP_ABSTOLERANCE = %lf\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4006c0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400690___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604060__bss = internal global %seg_604060__bss_type zeroinitializer
@polybench_papi_counters_threadid = local_unnamed_addr global %polybench_papi_counters_threadid_type zeroinitializer
@polybench_program_total_flops = local_unnamed_addr global %polybench_program_total_flops_type zeroinitializer
@polybench_c_end = local_unnamed_addr global %polybench_c_end_type zeroinitializer
@polybench_t_end = local_unnamed_addr global %polybench_t_end_type zeroinitializer
@polybench_t_start = local_unnamed_addr global %polybench_t_start_type zeroinitializer
@polybench_c_start = local_unnamed_addr global %polybench_c_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4006c0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400690___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_403430___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4033c0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_alloc_data_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_flush_cache_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_stop_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_print_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_prepare_instruments_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_start_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005e0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4005e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2447
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2448
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2449
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2450
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2446
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2447
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2448
  store i8 0, i8* %7, align 1, !tbaa !2449
  store i8 0, i8* %8, align 1, !tbaa !2450
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_403430___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_4033c0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_6040e8___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400620_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400648:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 6307928, i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !2432
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2450
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %12, align 1, !tbaa !2447
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2448
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2449
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %8, 40
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %7, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %17 = add i64 %8, 41
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %5 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  %20 = add i64 %5, 8
  store i64 %20, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400780_rtclock(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %11, align 1, !tbaa !2451
  %12 = add i64 %10, 7
  store i64 %12, i64* %PC, align 8
  %13 = load i64, i64* %9, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  store i64 %7, i64* %6, align 8, !tbaa !2428
  %14 = add i64 %10, 8
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %7 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %PC, align 8, !tbaa !2428
  %17 = add i64 %7, 8
  store i64 %17, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400760_polybench_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400750_polybench_prepare_instruments(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 23
  %17 = add i64 %15, 5
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %5, align 8, !tbaa !2428
  store i64 %16, i64* %PC, align 8, !tbaa !2428
  %21 = tail call %struct.Memory* @sub_400780_rtclock(%struct.State* nonnull %0, i64 %16, %struct.Memory* %14)
  %22 = load i64, i64* %PC, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %24 = load i64, i64* %23, align 1
  store i64 %24, i64* bitcast (%polybench_t_start_type* @polybench_t_start to i64*), align 8
  %25 = add i64 %22, 10
  store i64 %25, i64* %PC, align 8
  %26 = load i64, i64* %5, align 8, !tbaa !2428
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  store i64 %27, i64* %5, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %33 = add i64 %26, 16
  store i64 %33, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %21
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4007f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2450
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -12
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = sext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %57, -24
  %65 = add i64 %59, 9
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sext i32 %62 to i128
  %69 = and i128 %68, -18446744073709551616
  %70 = sext i64 %67 to i128
  %71 = and i128 %70, -18446744073709551616
  %72 = zext i64 %63 to i128
  %73 = or i128 %69, %72
  %74 = zext i64 %67 to i128
  %75 = or i128 %71, %74
  %76 = mul nsw i128 %75, %73
  %77 = trunc i128 %76 to i64
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = sext i64 %77 to i128
  %79 = icmp ne i128 %78, %76
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %13, align 1, !tbaa !2432
  %81 = trunc i128 %76 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2450
  store i8 0, i8* %28, align 1, !tbaa !2447
  %87 = lshr i64 %77, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2448
  store i8 %80, i8* %37, align 1, !tbaa !2449
  %89 = add i64 %59, 13
  store i64 %89, i64* %PC, align 8
  store i64 %77, i64* %66, align 8
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -24
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %96 = add i64 %92, 28
  %97 = add i64 %92, 9
  %98 = load i64, i64* %RSP, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  store i64 %99, i64* %RSP, align 8, !tbaa !2428
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %101 = tail call %struct.Memory* @sub_400830_xmalloc(%struct.State* nonnull %0, i64 %96, %struct.Memory* %2)
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -32
  %104 = load i64, i64* %RAX, align 8
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  store i64 %104, i64* %107, align 8
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -32
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = load i64, i64* %RSP, align 8
  %115 = add i64 %114, 32
  store i64 %115, i64* %RSP, align 8, !tbaa !2428
  %116 = icmp ugt i64 %114, -33
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %13, align 1, !tbaa !2432
  %118 = trunc i64 %115 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #9
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %20, align 1, !tbaa !2446
  %124 = xor i64 %115, %114
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %25, align 1, !tbaa !2450
  %128 = icmp eq i64 %115, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %28, align 1, !tbaa !2447
  %130 = lshr i64 %115, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2448
  %132 = lshr i64 %114, 63
  %133 = xor i64 %130, %132
  %134 = add nuw nsw i64 %133, %130
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %37, align 1, !tbaa !2449
  %137 = add i64 %110, 9
  store i64 %137, i64* %PC, align 8
  %138 = add i64 %114, 40
  %139 = inttoptr i64 %115 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RBP, align 8, !tbaa !2428
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %141 = add i64 %110, 10
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  %144 = add i64 %114, 48
  store i64 %144, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %101
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402260_kernel_fdtd_apml_StrictFP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_402260:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -104
  store i64 %39, i64* %RSP, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 56
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %36, 16
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2450
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, 96
  %70 = add i64 %38, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %68, 88
  %74 = add i64 %38, 12
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R10, align 8, !tbaa !2428
  %77 = add i64 %68, 80
  %78 = add i64 %38, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R11, align 8, !tbaa !2428
  %81 = add i64 %68, 72
  %82 = add i64 %38, 20
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBX, align 8, !tbaa !2428
  %85 = add i64 %68, 64
  %86 = add i64 %38, 24
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %R14, align 8, !tbaa !2428
  %89 = add i64 %68, 56
  %90 = add i64 %38, 28
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %R15, align 8, !tbaa !2428
  %93 = add i64 %68, 48
  %94 = add i64 %38, 32
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %R12, align 8, !tbaa !2428
  %97 = add i64 %68, 40
  %98 = add i64 %38, 36
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %R13, align 8, !tbaa !2428
  %101 = add i64 %68, -208
  %102 = add i64 %38, 43
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %72, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, 32
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -216
  %111 = add i64 %106, 11
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, 24
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %119 = add i64 %113, -224
  %120 = add i64 %115, 11
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, 16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %122, -44
  %129 = load i32, i32* %EDI, align 4
  %130 = add i64 %124, 7
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %131, align 4
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = load i32, i32* %ESI, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -52
  %140 = load i32, i32* %EDX, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -64
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %149 = load i64, i64* %148, align 1
  %150 = inttoptr i64 %145 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC, align 8
  %155 = bitcast %union.VectorReg* %7 to double*
  %156 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %157 = load i64, i64* %156, align 1
  %158 = inttoptr i64 %152 to i64*
  store i64 %157, i64* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -80
  %161 = load i64, i64* %RCX, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  store i64 %161, i64* %164, align 8
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -88
  %167 = load i64, i64* %R8, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170, align 8
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -96
  %173 = load i64, i64* %R9, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %176, align 8
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -104
  %179 = load i64, i64* %RAX, align 8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %178 to i64*
  store i64 %179, i64* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -224
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = add i64 %183, -112
  %190 = add i64 %185, 11
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -216
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RCX, align 8, !tbaa !2428
  %198 = add i64 %192, -120
  %199 = add i64 %194, 11
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -128
  %203 = load i64, i64* %R13, align 8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -136
  %209 = load i64, i64* %R12, align 8
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212, align 8
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -144
  %215 = load i64, i64* %R15, align 8
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 7
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218, align 8
  %219 = load i64, i64* %RBP, align 8
  %220 = add i64 %219, -152
  %221 = load i64, i64* %R14, align 8
  %222 = load i64, i64* %PC, align 8
  %223 = add i64 %222, 7
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224, align 8
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -160
  %227 = load i64, i64* %RBX, align 8
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %226 to i64*
  store i64 %227, i64* %230, align 8
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -168
  %233 = load i64, i64* %R11, align 8
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %232 to i64*
  store i64 %233, i64* %236, align 8
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -176
  %239 = load i64, i64* %R10, align 8
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 7
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242, align 8
  %243 = load i64, i64* %RBP, align 8
  %244 = add i64 %243, -208
  %245 = load i64, i64* %PC, align 8
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %R8, align 8, !tbaa !2428
  %249 = add i64 %243, -184
  %250 = add i64 %245, 14
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  store i64 %248, i64* %251, align 8
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -188
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, 10
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %253 to i32*
  store i32 0, i32* %256, align 4
  %257 = bitcast [32 x %union.VectorReg]* %6 to double*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %259 = bitcast i64* %258 to double*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %261 = bitcast i64* %260 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402331

block_4029df:                                     ; preds = %block_4029d0
  %262 = add i64 %4841, -196
  %263 = add i64 %4803, 42
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %262 to i32*
  %265 = load i32, i32* %264, align 4
  %266 = sext i32 %265 to i64
  store i64 %266, i64* %RCX, align 8, !tbaa !2428
  %267 = shl nsw i64 %266, 3
  %268 = add i64 %267, %4850
  %269 = add i64 %4803, 47
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %272 = add i64 %4841, -80
  %273 = add i64 %4803, 51
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %272 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = add i64 %4841, -188
  %277 = add i64 %4803, 58
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i32*
  %279 = load i32, i32* %278, align 4
  %280 = sext i32 %279 to i64
  %281 = mul nsw i64 %280, 520
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %282 = lshr i64 %281, 63
  %283 = add i64 %281, %275
  store i64 %283, i64* %RAX, align 8, !tbaa !2428
  %284 = icmp ult i64 %283, %275
  %285 = icmp ult i64 %283, %281
  %286 = or i1 %284, %285
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %42, align 1, !tbaa !2432
  %288 = trunc i64 %283 to i32
  %289 = and i32 %288, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #9
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %49, align 1, !tbaa !2446
  %294 = xor i64 %281, %275
  %295 = xor i64 %294, %283
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  store i8 %298, i8* %55, align 1, !tbaa !2450
  %299 = icmp eq i64 %283, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %58, align 1, !tbaa !2447
  %301 = lshr i64 %283, 63
  %302 = trunc i64 %301 to i8
  store i8 %302, i8* %61, align 1, !tbaa !2448
  %303 = lshr i64 %275, 63
  %304 = xor i64 %301, %303
  %305 = xor i64 %301, %282
  %306 = add nuw nsw i64 %304, %305
  %307 = icmp eq i64 %306, 2
  %308 = zext i1 %307 to i8
  store i8 %308, i8* %67, align 1, !tbaa !2449
  %309 = add i64 %4803, 75
  store i64 %309, i64* %PC, align 8
  %310 = load i32, i32* %264, align 4
  %311 = sext i32 %310 to i64
  store i64 %311, i64* %RCX, align 8, !tbaa !2428
  %312 = shl nsw i64 %311, 3
  %313 = add i64 %312, %283
  %314 = add i64 %4803, 80
  store i64 %314, i64* %PC, align 8
  %315 = bitcast i64 %271 to double
  %316 = inttoptr i64 %313 to double*
  %317 = load double, double* %316, align 8
  %318 = fsub double %315, %317
  store double %318, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -128
  %321 = add i64 %4803, 84
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = add i64 %319, -188
  %325 = add i64 %4803, 91
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i32*
  %327 = load i32, i32* %326, align 4
  %328 = sext i32 %327 to i64
  %329 = mul nsw i64 %328, 33800
  store i64 %329, i64* %RCX, align 8, !tbaa !2428
  %330 = lshr i64 %329, 63
  %331 = add i64 %329, %323
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = icmp ult i64 %331, %323
  %333 = icmp ult i64 %331, %329
  %334 = or i1 %332, %333
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %42, align 1, !tbaa !2432
  %336 = trunc i64 %331 to i32
  %337 = and i32 %336, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #9
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %49, align 1, !tbaa !2446
  %342 = xor i64 %329, %323
  %343 = xor i64 %342, %331
  %344 = lshr i64 %343, 4
  %345 = trunc i64 %344 to i8
  %346 = and i8 %345, 1
  store i8 %346, i8* %55, align 1, !tbaa !2450
  %347 = icmp eq i64 %331, 0
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %58, align 1, !tbaa !2447
  %349 = lshr i64 %331, 63
  %350 = trunc i64 %349 to i8
  store i8 %350, i8* %61, align 1, !tbaa !2448
  %351 = lshr i64 %323, 63
  %352 = xor i64 %349, %351
  %353 = xor i64 %349, %330
  %354 = add nuw nsw i64 %352, %353
  %355 = icmp eq i64 %354, 2
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %67, align 1, !tbaa !2449
  %357 = add i64 %319, -52
  %358 = add i64 %4803, 105
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i32*
  %360 = load i32, i32* %359, align 4
  %361 = sext i32 %360 to i64
  %362 = mul nsw i64 %361, 520
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = lshr i64 %362, 63
  %364 = add i64 %362, %331
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = icmp ult i64 %364, %331
  %366 = icmp ult i64 %364, %362
  %367 = or i1 %365, %366
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %42, align 1, !tbaa !2432
  %369 = trunc i64 %364 to i32
  %370 = and i32 %369, 255
  %371 = tail call i32 @llvm.ctpop.i32(i32 %370) #9
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  store i8 %374, i8* %49, align 1, !tbaa !2446
  %375 = xor i64 %362, %331
  %376 = xor i64 %375, %364
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %55, align 1, !tbaa !2450
  %380 = icmp eq i64 %364, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %58, align 1, !tbaa !2447
  %382 = lshr i64 %364, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %61, align 1, !tbaa !2448
  %384 = xor i64 %382, %349
  %385 = xor i64 %382, %363
  %386 = add nuw nsw i64 %384, %385
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %67, align 1, !tbaa !2449
  %389 = load i64, i64* %RBP, align 8
  %390 = add i64 %389, -196
  %391 = add i64 %4803, 121
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = add i32 %393, 1
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RDX, align 8, !tbaa !2428
  %396 = icmp eq i32 %393, -1
  %397 = icmp eq i32 %394, 0
  %398 = or i1 %396, %397
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %42, align 1, !tbaa !2432
  %400 = and i32 %394, 255
  %401 = tail call i32 @llvm.ctpop.i32(i32 %400) #9
  %402 = trunc i32 %401 to i8
  %403 = and i8 %402, 1
  %404 = xor i8 %403, 1
  store i8 %404, i8* %49, align 1, !tbaa !2446
  %405 = xor i32 %394, %393
  %406 = lshr i32 %405, 4
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  store i8 %408, i8* %55, align 1, !tbaa !2450
  %409 = zext i1 %397 to i8
  store i8 %409, i8* %58, align 1, !tbaa !2447
  %410 = lshr i32 %394, 31
  %411 = trunc i32 %410 to i8
  store i8 %411, i8* %61, align 1, !tbaa !2448
  %412 = lshr i32 %393, 31
  %413 = xor i32 %410, %412
  %414 = add nuw nsw i32 %413, %410
  %415 = icmp eq i32 %414, 2
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %67, align 1, !tbaa !2449
  %417 = sext i32 %394 to i64
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = shl nsw i64 %417, 3
  %419 = add i64 %364, %418
  %420 = add i64 %4803, 132
  store i64 %420, i64* %PC, align 8
  %421 = load double, double* %257, align 1
  %422 = inttoptr i64 %419 to double*
  %423 = load double, double* %422, align 8
  %424 = fadd double %421, %423
  store double %424, double* %257, align 1, !tbaa !2452
  %425 = add i64 %389, -128
  %426 = add i64 %4803, 136
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  %428 = load i64, i64* %427, align 8
  store i64 %428, i64* %RAX, align 8, !tbaa !2428
  %429 = add i64 %389, -188
  %430 = add i64 %4803, 143
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = mul nsw i64 %433, 33800
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = lshr i64 %434, 63
  %436 = add i64 %434, %428
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = icmp ult i64 %436, %428
  %438 = icmp ult i64 %436, %434
  %439 = or i1 %437, %438
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %42, align 1, !tbaa !2432
  %441 = trunc i64 %436 to i32
  %442 = and i32 %441, 255
  %443 = tail call i32 @llvm.ctpop.i32(i32 %442) #9
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  store i8 %446, i8* %49, align 1, !tbaa !2446
  %447 = xor i64 %434, %428
  %448 = xor i64 %447, %436
  %449 = lshr i64 %448, 4
  %450 = trunc i64 %449 to i8
  %451 = and i8 %450, 1
  store i8 %451, i8* %55, align 1, !tbaa !2450
  %452 = icmp eq i64 %436, 0
  %453 = zext i1 %452 to i8
  store i8 %453, i8* %58, align 1, !tbaa !2447
  %454 = lshr i64 %436, 63
  %455 = trunc i64 %454 to i8
  store i8 %455, i8* %61, align 1, !tbaa !2448
  %456 = lshr i64 %428, 63
  %457 = xor i64 %454, %456
  %458 = xor i64 %454, %435
  %459 = add nuw nsw i64 %457, %458
  %460 = icmp eq i64 %459, 2
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %67, align 1, !tbaa !2449
  %462 = load i64, i64* %RBP, align 8
  %463 = add i64 %462, -52
  %464 = add i64 %4803, 157
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %463 to i32*
  %466 = load i32, i32* %465, align 4
  %467 = sext i32 %466 to i64
  %468 = mul nsw i64 %467, 520
  store i64 %468, i64* %RCX, align 8, !tbaa !2428
  %469 = lshr i64 %468, 63
  %470 = add i64 %468, %436
  store i64 %470, i64* %RAX, align 8, !tbaa !2428
  %471 = icmp ult i64 %470, %436
  %472 = icmp ult i64 %470, %468
  %473 = or i1 %471, %472
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %42, align 1, !tbaa !2432
  %475 = trunc i64 %470 to i32
  %476 = and i32 %475, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #9
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %49, align 1, !tbaa !2446
  %481 = xor i64 %468, %436
  %482 = xor i64 %481, %470
  %483 = lshr i64 %482, 4
  %484 = trunc i64 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %55, align 1, !tbaa !2450
  %486 = icmp eq i64 %470, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %58, align 1, !tbaa !2447
  %488 = lshr i64 %470, 63
  %489 = trunc i64 %488 to i8
  store i8 %489, i8* %61, align 1, !tbaa !2448
  %490 = xor i64 %488, %454
  %491 = xor i64 %488, %469
  %492 = add nuw nsw i64 %490, %491
  %493 = icmp eq i64 %492, 2
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %67, align 1, !tbaa !2449
  %495 = add i64 %462, -196
  %496 = add i64 %4803, 174
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %495 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = sext i32 %498 to i64
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = shl nsw i64 %499, 3
  %501 = add i64 %500, %470
  %502 = add i64 %4803, 179
  store i64 %502, i64* %PC, align 8
  %503 = load double, double* %257, align 1
  %504 = inttoptr i64 %501 to double*
  %505 = load double, double* %504, align 8
  %506 = fsub double %503, %505
  store double %506, double* %257, align 1, !tbaa !2452
  %507 = add i64 %462, -96
  %508 = add i64 %4803, 183
  store i64 %508, i64* %PC, align 8
  %509 = inttoptr i64 %507 to i64*
  %510 = load i64, i64* %509, align 8
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = add i64 %462, -188
  %512 = add i64 %4803, 190
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = sext i32 %514 to i64
  %516 = mul nsw i64 %515, 520
  store i64 %516, i64* %RCX, align 8, !tbaa !2428
  %517 = lshr i64 %516, 63
  %518 = add i64 %516, %510
  store i64 %518, i64* %RAX, align 8, !tbaa !2428
  %519 = icmp ult i64 %518, %510
  %520 = icmp ult i64 %518, %516
  %521 = or i1 %519, %520
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %42, align 1, !tbaa !2432
  %523 = trunc i64 %518 to i32
  %524 = and i32 %523, 255
  %525 = tail call i32 @llvm.ctpop.i32(i32 %524) #9
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  %528 = xor i8 %527, 1
  store i8 %528, i8* %49, align 1, !tbaa !2446
  %529 = xor i64 %516, %510
  %530 = xor i64 %529, %518
  %531 = lshr i64 %530, 4
  %532 = trunc i64 %531 to i8
  %533 = and i8 %532, 1
  store i8 %533, i8* %55, align 1, !tbaa !2450
  %534 = icmp eq i64 %518, 0
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %58, align 1, !tbaa !2447
  %536 = lshr i64 %518, 63
  %537 = trunc i64 %536 to i8
  store i8 %537, i8* %61, align 1, !tbaa !2448
  %538 = lshr i64 %510, 63
  %539 = xor i64 %536, %538
  %540 = xor i64 %536, %517
  %541 = add nuw nsw i64 %539, %540
  %542 = icmp eq i64 %541, 2
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %67, align 1, !tbaa !2449
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -192
  %546 = add i64 %4803, 207
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i32*
  %548 = load i32, i32* %547, align 4
  %549 = sext i32 %548 to i64
  store i64 %549, i64* %RCX, align 8, !tbaa !2428
  %550 = shl nsw i64 %549, 3
  %551 = add i64 %550, %518
  %552 = add i64 %4803, 212
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %551 to double*
  store double %506, double* %553, align 8
  %554 = load i64, i64* %RBP, align 8
  %555 = add i64 %554, -176
  %556 = load i64, i64* %PC, align 8
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %555 to i64*
  %559 = load i64, i64* %558, align 8
  store i64 %559, i64* %RAX, align 8, !tbaa !2428
  %560 = add i64 %554, -52
  %561 = add i64 %556, 11
  store i64 %561, i64* %PC, align 8
  %562 = inttoptr i64 %560 to i32*
  %563 = load i32, i32* %562, align 4
  %564 = sext i32 %563 to i64
  store i64 %564, i64* %RCX, align 8, !tbaa !2428
  %565 = shl nsw i64 %564, 3
  %566 = add i64 %565, %559
  %567 = add i64 %556, 16
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i64*
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %570 = add i64 %554, -184
  %571 = add i64 %556, 23
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = add i64 %554, -192
  %575 = add i64 %556, 30
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = sext i32 %577 to i64
  store i64 %578, i64* %RCX, align 8, !tbaa !2428
  %579 = shl nsw i64 %578, 3
  %580 = add i64 %579, %573
  %581 = add i64 %556, 35
  store i64 %581, i64* %PC, align 8
  %582 = bitcast i64 %569 to double
  %583 = inttoptr i64 %580 to double*
  %584 = load double, double* %583, align 8
  %585 = fdiv double %582, %584
  store double %585, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %586 = add i64 %554, -112
  %587 = add i64 %556, 39
  store i64 %587, i64* %PC, align 8
  %588 = inttoptr i64 %586 to i64*
  %589 = load i64, i64* %588, align 8
  store i64 %589, i64* %RAX, align 8, !tbaa !2428
  %590 = add i64 %554, -188
  %591 = add i64 %556, 46
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %590 to i32*
  %593 = load i32, i32* %592, align 4
  %594 = sext i32 %593 to i64
  %595 = mul nsw i64 %594, 33800
  store i64 %595, i64* %RCX, align 8, !tbaa !2428
  %596 = lshr i64 %595, 63
  %597 = add i64 %595, %589
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = icmp ult i64 %597, %589
  %599 = icmp ult i64 %597, %595
  %600 = or i1 %598, %599
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %42, align 1, !tbaa !2432
  %602 = trunc i64 %597 to i32
  %603 = and i32 %602, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #9
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %49, align 1, !tbaa !2446
  %608 = xor i64 %595, %589
  %609 = xor i64 %608, %597
  %610 = lshr i64 %609, 4
  %611 = trunc i64 %610 to i8
  %612 = and i8 %611, 1
  store i8 %612, i8* %55, align 1, !tbaa !2450
  %613 = icmp eq i64 %597, 0
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %58, align 1, !tbaa !2447
  %615 = lshr i64 %597, 63
  %616 = trunc i64 %615 to i8
  store i8 %616, i8* %61, align 1, !tbaa !2448
  %617 = lshr i64 %589, 63
  %618 = xor i64 %615, %617
  %619 = xor i64 %615, %596
  %620 = add nuw nsw i64 %618, %619
  %621 = icmp eq i64 %620, 2
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %67, align 1, !tbaa !2449
  %623 = load i64, i64* %RBP, align 8
  %624 = add i64 %623, -192
  %625 = add i64 %556, 63
  store i64 %625, i64* %PC, align 8
  %626 = inttoptr i64 %624 to i32*
  %627 = load i32, i32* %626, align 4
  %628 = sext i32 %627 to i64
  %629 = mul nsw i64 %628, 520
  store i64 %629, i64* %RCX, align 8, !tbaa !2428
  %630 = lshr i64 %629, 63
  %631 = add i64 %629, %597
  store i64 %631, i64* %RAX, align 8, !tbaa !2428
  %632 = icmp ult i64 %631, %597
  %633 = icmp ult i64 %631, %629
  %634 = or i1 %632, %633
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %42, align 1, !tbaa !2432
  %636 = trunc i64 %631 to i32
  %637 = and i32 %636, 255
  %638 = tail call i32 @llvm.ctpop.i32(i32 %637) #9
  %639 = trunc i32 %638 to i8
  %640 = and i8 %639, 1
  %641 = xor i8 %640, 1
  store i8 %641, i8* %49, align 1, !tbaa !2446
  %642 = xor i64 %629, %597
  %643 = xor i64 %642, %631
  %644 = lshr i64 %643, 4
  %645 = trunc i64 %644 to i8
  %646 = and i8 %645, 1
  store i8 %646, i8* %55, align 1, !tbaa !2450
  %647 = icmp eq i64 %631, 0
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %58, align 1, !tbaa !2447
  %649 = lshr i64 %631, 63
  %650 = trunc i64 %649 to i8
  store i8 %650, i8* %61, align 1, !tbaa !2448
  %651 = xor i64 %649, %615
  %652 = xor i64 %649, %630
  %653 = add nuw nsw i64 %651, %652
  %654 = icmp eq i64 %653, 2
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %67, align 1, !tbaa !2449
  %656 = add i64 %623, -196
  %657 = add i64 %556, 80
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i32*
  %659 = load i32, i32* %658, align 4
  %660 = sext i32 %659 to i64
  store i64 %660, i64* %RCX, align 8, !tbaa !2428
  %661 = shl nsw i64 %660, 3
  %662 = add i64 %661, %631
  %663 = add i64 %556, 85
  store i64 %663, i64* %PC, align 8
  %664 = load double, double* %257, align 1
  %665 = inttoptr i64 %662 to double*
  %666 = load double, double* %665, align 8
  %667 = fmul double %664, %666
  store double %667, double* %257, align 1, !tbaa !2452
  %668 = add i64 %623, -72
  %669 = add i64 %556, 90
  store i64 %669, i64* %PC, align 8
  %670 = inttoptr i64 %668 to i64*
  %671 = load i64, i64* %670, align 8
  store i64 %671, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %672 = add i64 %623, -184
  %673 = add i64 %556, 97
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %672 to i64*
  %675 = load i64, i64* %674, align 8
  store i64 %675, i64* %RAX, align 8, !tbaa !2428
  %676 = add i64 %556, 104
  store i64 %676, i64* %PC, align 8
  %677 = load i32, i32* %626, align 4
  %678 = sext i32 %677 to i64
  store i64 %678, i64* %RCX, align 8, !tbaa !2428
  %679 = shl nsw i64 %678, 3
  %680 = add i64 %679, %675
  %681 = add i64 %556, 109
  store i64 %681, i64* %PC, align 8
  %682 = bitcast i64 %671 to double
  %683 = inttoptr i64 %680 to double*
  %684 = load double, double* %683, align 8
  %685 = fdiv double %682, %684
  store double %685, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %686 = load i64, i64* %RBP, align 8
  %687 = add i64 %686, -96
  %688 = add i64 %556, 113
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %687 to i64*
  %690 = load i64, i64* %689, align 8
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = add i64 %686, -188
  %692 = add i64 %556, 120
  store i64 %692, i64* %PC, align 8
  %693 = inttoptr i64 %691 to i32*
  %694 = load i32, i32* %693, align 4
  %695 = sext i32 %694 to i64
  %696 = mul nsw i64 %695, 520
  store i64 %696, i64* %RCX, align 8, !tbaa !2428
  %697 = lshr i64 %696, 63
  %698 = add i64 %696, %690
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = icmp ult i64 %698, %690
  %700 = icmp ult i64 %698, %696
  %701 = or i1 %699, %700
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %42, align 1, !tbaa !2432
  %703 = trunc i64 %698 to i32
  %704 = and i32 %703, 255
  %705 = tail call i32 @llvm.ctpop.i32(i32 %704) #9
  %706 = trunc i32 %705 to i8
  %707 = and i8 %706, 1
  %708 = xor i8 %707, 1
  store i8 %708, i8* %49, align 1, !tbaa !2446
  %709 = xor i64 %696, %690
  %710 = xor i64 %709, %698
  %711 = lshr i64 %710, 4
  %712 = trunc i64 %711 to i8
  %713 = and i8 %712, 1
  store i8 %713, i8* %55, align 1, !tbaa !2450
  %714 = icmp eq i64 %698, 0
  %715 = zext i1 %714 to i8
  store i8 %715, i8* %58, align 1, !tbaa !2447
  %716 = lshr i64 %698, 63
  %717 = trunc i64 %716 to i8
  store i8 %717, i8* %61, align 1, !tbaa !2448
  %718 = lshr i64 %690, 63
  %719 = xor i64 %716, %718
  %720 = xor i64 %716, %697
  %721 = add nuw nsw i64 %719, %720
  %722 = icmp eq i64 %721, 2
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %67, align 1, !tbaa !2449
  %724 = add i64 %686, -192
  %725 = add i64 %556, 137
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i32*
  %727 = load i32, i32* %726, align 4
  %728 = sext i32 %727 to i64
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = shl nsw i64 %728, 3
  %730 = add i64 %729, %698
  %731 = add i64 %556, 142
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to double*
  %733 = load double, double* %732, align 8
  %734 = fmul double %685, %733
  store double %734, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %735 = load double, double* %257, align 1
  %736 = fsub double %735, %734
  store double %736, double* %257, align 1, !tbaa !2452
  %737 = add i64 %686, -104
  %738 = add i64 %556, 150
  store i64 %738, i64* %PC, align 8
  %739 = inttoptr i64 %737 to i64*
  %740 = load i64, i64* %739, align 8
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = load i64, i64* %RBP, align 8
  %742 = add i64 %741, -188
  %743 = add i64 %556, 157
  store i64 %743, i64* %PC, align 8
  %744 = inttoptr i64 %742 to i32*
  %745 = load i32, i32* %744, align 4
  %746 = sext i32 %745 to i64
  %747 = mul nsw i64 %746, 520
  store i64 %747, i64* %RCX, align 8, !tbaa !2428
  %748 = lshr i64 %747, 63
  %749 = add i64 %747, %740
  store i64 %749, i64* %RAX, align 8, !tbaa !2428
  %750 = icmp ult i64 %749, %740
  %751 = icmp ult i64 %749, %747
  %752 = or i1 %750, %751
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %42, align 1, !tbaa !2432
  %754 = trunc i64 %749 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #9
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %49, align 1, !tbaa !2446
  %760 = xor i64 %747, %740
  %761 = xor i64 %760, %749
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %55, align 1, !tbaa !2450
  %765 = icmp eq i64 %749, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %58, align 1, !tbaa !2447
  %767 = lshr i64 %749, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %61, align 1, !tbaa !2448
  %769 = lshr i64 %740, 63
  %770 = xor i64 %767, %769
  %771 = xor i64 %767, %748
  %772 = add nuw nsw i64 %770, %771
  %773 = icmp eq i64 %772, 2
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %67, align 1, !tbaa !2449
  %775 = add i64 %741, -192
  %776 = add i64 %556, 174
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %775 to i32*
  %778 = load i32, i32* %777, align 4
  %779 = sext i32 %778 to i64
  store i64 %779, i64* %RCX, align 8, !tbaa !2428
  %780 = shl nsw i64 %779, 3
  %781 = add i64 %780, %749
  %782 = add i64 %556, 179
  store i64 %782, i64* %PC, align 8
  %783 = inttoptr i64 %781 to double*
  store double %736, double* %783, align 8
  %784 = load i64, i64* %RBP, align 8
  %785 = add i64 %784, -160
  %786 = load i64, i64* %PC, align 8
  %787 = add i64 %786, 7
  store i64 %787, i64* %PC, align 8
  %788 = inttoptr i64 %785 to i64*
  %789 = load i64, i64* %788, align 8
  store i64 %789, i64* %RAX, align 8, !tbaa !2428
  %790 = add i64 %784, -196
  %791 = add i64 %786, 14
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %790 to i32*
  %793 = load i32, i32* %792, align 4
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RCX, align 8, !tbaa !2428
  %795 = shl nsw i64 %794, 3
  %796 = add i64 %795, %789
  %797 = add i64 %786, 19
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %796 to i64*
  %799 = load i64, i64* %798, align 8
  store i64 %799, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %800 = add i64 %784, -168
  %801 = add i64 %786, 26
  store i64 %801, i64* %PC, align 8
  %802 = inttoptr i64 %800 to i64*
  %803 = load i64, i64* %802, align 8
  store i64 %803, i64* %RAX, align 8, !tbaa !2428
  %804 = add i64 %786, 33
  store i64 %804, i64* %PC, align 8
  %805 = load i32, i32* %792, align 4
  %806 = sext i32 %805 to i64
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %807 = shl nsw i64 %806, 3
  %808 = add i64 %807, %803
  %809 = add i64 %786, 38
  store i64 %809, i64* %PC, align 8
  %810 = bitcast i64 %799 to double
  %811 = inttoptr i64 %808 to double*
  %812 = load double, double* %811, align 8
  %813 = fdiv double %810, %812
  store double %813, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %814 = add i64 %784, -136
  %815 = add i64 %786, 45
  store i64 %815, i64* %PC, align 8
  %816 = inttoptr i64 %814 to i64*
  %817 = load i64, i64* %816, align 8
  store i64 %817, i64* %RAX, align 8, !tbaa !2428
  %818 = add i64 %784, -188
  %819 = add i64 %786, 52
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %818 to i32*
  %821 = load i32, i32* %820, align 4
  %822 = sext i32 %821 to i64
  %823 = mul nsw i64 %822, 33800
  store i64 %823, i64* %RCX, align 8, !tbaa !2428
  %824 = lshr i64 %823, 63
  %825 = add i64 %823, %817
  store i64 %825, i64* %RAX, align 8, !tbaa !2428
  %826 = icmp ult i64 %825, %817
  %827 = icmp ult i64 %825, %823
  %828 = or i1 %826, %827
  %829 = zext i1 %828 to i8
  store i8 %829, i8* %42, align 1, !tbaa !2432
  %830 = trunc i64 %825 to i32
  %831 = and i32 %830, 255
  %832 = tail call i32 @llvm.ctpop.i32(i32 %831) #9
  %833 = trunc i32 %832 to i8
  %834 = and i8 %833, 1
  %835 = xor i8 %834, 1
  store i8 %835, i8* %49, align 1, !tbaa !2446
  %836 = xor i64 %823, %817
  %837 = xor i64 %836, %825
  %838 = lshr i64 %837, 4
  %839 = trunc i64 %838 to i8
  %840 = and i8 %839, 1
  store i8 %840, i8* %55, align 1, !tbaa !2450
  %841 = icmp eq i64 %825, 0
  %842 = zext i1 %841 to i8
  store i8 %842, i8* %58, align 1, !tbaa !2447
  %843 = lshr i64 %825, 63
  %844 = trunc i64 %843 to i8
  store i8 %844, i8* %61, align 1, !tbaa !2448
  %845 = lshr i64 %817, 63
  %846 = xor i64 %843, %845
  %847 = xor i64 %843, %824
  %848 = add nuw nsw i64 %846, %847
  %849 = icmp eq i64 %848, 2
  %850 = zext i1 %849 to i8
  store i8 %850, i8* %67, align 1, !tbaa !2449
  %851 = load i64, i64* %RBP, align 8
  %852 = add i64 %851, -52
  %853 = add i64 %786, 66
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %852 to i32*
  %855 = load i32, i32* %854, align 4
  %856 = sext i32 %855 to i64
  %857 = mul nsw i64 %856, 520
  store i64 %857, i64* %RCX, align 8, !tbaa !2428
  %858 = lshr i64 %857, 63
  %859 = add i64 %857, %825
  store i64 %859, i64* %RAX, align 8, !tbaa !2428
  %860 = icmp ult i64 %859, %825
  %861 = icmp ult i64 %859, %857
  %862 = or i1 %860, %861
  %863 = zext i1 %862 to i8
  store i8 %863, i8* %42, align 1, !tbaa !2432
  %864 = trunc i64 %859 to i32
  %865 = and i32 %864, 255
  %866 = tail call i32 @llvm.ctpop.i32(i32 %865) #9
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  store i8 %869, i8* %49, align 1, !tbaa !2446
  %870 = xor i64 %857, %825
  %871 = xor i64 %870, %859
  %872 = lshr i64 %871, 4
  %873 = trunc i64 %872 to i8
  %874 = and i8 %873, 1
  store i8 %874, i8* %55, align 1, !tbaa !2450
  %875 = icmp eq i64 %859, 0
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %58, align 1, !tbaa !2447
  %877 = lshr i64 %859, 63
  %878 = trunc i64 %877 to i8
  store i8 %878, i8* %61, align 1, !tbaa !2448
  %879 = xor i64 %877, %843
  %880 = xor i64 %877, %858
  %881 = add nuw nsw i64 %879, %880
  %882 = icmp eq i64 %881, 2
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %67, align 1, !tbaa !2449
  %884 = add i64 %851, -196
  %885 = add i64 %786, 83
  store i64 %885, i64* %PC, align 8
  %886 = inttoptr i64 %884 to i32*
  %887 = load i32, i32* %886, align 4
  %888 = sext i32 %887 to i64
  store i64 %888, i64* %RCX, align 8, !tbaa !2428
  %889 = shl nsw i64 %888, 3
  %890 = add i64 %889, %859
  %891 = add i64 %786, 88
  store i64 %891, i64* %PC, align 8
  %892 = load double, double* %257, align 1
  %893 = inttoptr i64 %890 to double*
  %894 = load double, double* %893, align 8
  %895 = fmul double %892, %894
  store double %895, double* %257, align 1, !tbaa !2452
  %896 = add i64 %851, -64
  %897 = add i64 %786, 93
  store i64 %897, i64* %PC, align 8
  %898 = inttoptr i64 %896 to i64*
  %899 = load i64, i64* %898, align 8
  store i64 %899, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %900 = add i64 %851, -152
  %901 = add i64 %786, 100
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %900 to i64*
  %903 = load i64, i64* %902, align 8
  store i64 %903, i64* %RAX, align 8, !tbaa !2428
  %904 = add i64 %851, -188
  %905 = add i64 %786, 107
  store i64 %905, i64* %PC, align 8
  %906 = inttoptr i64 %904 to i32*
  %907 = load i32, i32* %906, align 4
  %908 = sext i32 %907 to i64
  store i64 %908, i64* %RCX, align 8, !tbaa !2428
  %909 = shl nsw i64 %908, 3
  %910 = add i64 %909, %903
  %911 = add i64 %786, 112
  store i64 %911, i64* %PC, align 8
  %912 = bitcast i64 %899 to double
  %913 = inttoptr i64 %910 to double*
  %914 = load double, double* %913, align 8
  %915 = fmul double %912, %914
  store double %915, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %916 = load i64, i64* %RBP, align 8
  %917 = add i64 %916, -168
  %918 = add i64 %786, 119
  store i64 %918, i64* %PC, align 8
  %919 = inttoptr i64 %917 to i64*
  %920 = load i64, i64* %919, align 8
  store i64 %920, i64* %RAX, align 8, !tbaa !2428
  %921 = add i64 %916, -196
  %922 = add i64 %786, 126
  store i64 %922, i64* %PC, align 8
  %923 = inttoptr i64 %921 to i32*
  %924 = load i32, i32* %923, align 4
  %925 = sext i32 %924 to i64
  store i64 %925, i64* %RCX, align 8, !tbaa !2428
  %926 = shl nsw i64 %925, 3
  %927 = add i64 %926, %920
  %928 = add i64 %786, 131
  store i64 %928, i64* %PC, align 8
  %929 = inttoptr i64 %927 to double*
  %930 = load double, double* %929, align 8
  %931 = fdiv double %915, %930
  store double %931, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %932 = add i64 %916, -104
  %933 = add i64 %786, 135
  store i64 %933, i64* %PC, align 8
  %934 = inttoptr i64 %932 to i64*
  %935 = load i64, i64* %934, align 8
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = add i64 %916, -188
  %937 = add i64 %786, 142
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = sext i32 %939 to i64
  %941 = mul nsw i64 %940, 520
  store i64 %941, i64* %RCX, align 8, !tbaa !2428
  %942 = lshr i64 %941, 63
  %943 = add i64 %941, %935
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = icmp ult i64 %943, %935
  %945 = icmp ult i64 %943, %941
  %946 = or i1 %944, %945
  %947 = zext i1 %946 to i8
  store i8 %947, i8* %42, align 1, !tbaa !2432
  %948 = trunc i64 %943 to i32
  %949 = and i32 %948, 255
  %950 = tail call i32 @llvm.ctpop.i32(i32 %949) #9
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  store i8 %953, i8* %49, align 1, !tbaa !2446
  %954 = xor i64 %941, %935
  %955 = xor i64 %954, %943
  %956 = lshr i64 %955, 4
  %957 = trunc i64 %956 to i8
  %958 = and i8 %957, 1
  store i8 %958, i8* %55, align 1, !tbaa !2450
  %959 = icmp eq i64 %943, 0
  %960 = zext i1 %959 to i8
  store i8 %960, i8* %58, align 1, !tbaa !2447
  %961 = lshr i64 %943, 63
  %962 = trunc i64 %961 to i8
  store i8 %962, i8* %61, align 1, !tbaa !2448
  %963 = lshr i64 %935, 63
  %964 = xor i64 %961, %963
  %965 = xor i64 %961, %942
  %966 = add nuw nsw i64 %964, %965
  %967 = icmp eq i64 %966, 2
  %968 = zext i1 %967 to i8
  store i8 %968, i8* %67, align 1, !tbaa !2449
  %969 = add i64 %916, -192
  %970 = add i64 %786, 159
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %969 to i32*
  %972 = load i32, i32* %971, align 4
  %973 = sext i32 %972 to i64
  store i64 %973, i64* %RCX, align 8, !tbaa !2428
  %974 = shl nsw i64 %973, 3
  %975 = add i64 %974, %943
  %976 = add i64 %786, 164
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %975 to double*
  %978 = load double, double* %977, align 8
  %979 = fmul double %931, %978
  store double %979, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %980 = load double, double* %257, align 1
  %981 = fadd double %980, %979
  store double %981, double* %257, align 1, !tbaa !2452
  %982 = load i64, i64* %RBP, align 8
  %983 = add i64 %982, -64
  %984 = add i64 %786, 173
  store i64 %984, i64* %PC, align 8
  %985 = inttoptr i64 %983 to i64*
  %986 = load i64, i64* %985, align 8
  store i64 %986, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %987 = add i64 %982, -144
  %988 = add i64 %786, 180
  store i64 %988, i64* %PC, align 8
  %989 = inttoptr i64 %987 to i64*
  %990 = load i64, i64* %989, align 8
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = add i64 %982, -188
  %992 = add i64 %786, 187
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i32*
  %994 = load i32, i32* %993, align 4
  %995 = sext i32 %994 to i64
  store i64 %995, i64* %RCX, align 8, !tbaa !2428
  %996 = shl nsw i64 %995, 3
  %997 = add i64 %996, %990
  %998 = add i64 %786, 192
  store i64 %998, i64* %PC, align 8
  %999 = bitcast i64 %986 to double
  %1000 = inttoptr i64 %997 to double*
  %1001 = load double, double* %1000, align 8
  %1002 = fmul double %999, %1001
  store double %1002, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1003 = add i64 %982, -168
  %1004 = add i64 %786, 199
  store i64 %1004, i64* %PC, align 8
  %1005 = inttoptr i64 %1003 to i64*
  %1006 = load i64, i64* %1005, align 8
  store i64 %1006, i64* %RAX, align 8, !tbaa !2428
  %1007 = add i64 %982, -196
  %1008 = add i64 %786, 206
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1007 to i32*
  %1010 = load i32, i32* %1009, align 4
  %1011 = sext i32 %1010 to i64
  store i64 %1011, i64* %RCX, align 8, !tbaa !2428
  %1012 = shl nsw i64 %1011, 3
  %1013 = add i64 %1012, %1006
  %1014 = add i64 %786, 211
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1013 to double*
  %1016 = load double, double* %1015, align 8
  %1017 = fdiv double %1002, %1016
  store double %1017, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1018 = add i64 %982, -112
  %1019 = add i64 %786, 215
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i64*
  %1021 = load i64, i64* %1020, align 8
  store i64 %1021, i64* %RAX, align 8, !tbaa !2428
  %1022 = add i64 %786, 222
  store i64 %1022, i64* %PC, align 8
  %1023 = load i32, i32* %993, align 4
  %1024 = sext i32 %1023 to i64
  %1025 = mul nsw i64 %1024, 33800
  store i64 %1025, i64* %RCX, align 8, !tbaa !2428
  %1026 = lshr i64 %1025, 63
  %1027 = add i64 %1025, %1021
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1028 = icmp ult i64 %1027, %1021
  %1029 = icmp ult i64 %1027, %1025
  %1030 = or i1 %1028, %1029
  %1031 = zext i1 %1030 to i8
  store i8 %1031, i8* %42, align 1, !tbaa !2432
  %1032 = trunc i64 %1027 to i32
  %1033 = and i32 %1032, 255
  %1034 = tail call i32 @llvm.ctpop.i32(i32 %1033) #9
  %1035 = trunc i32 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = xor i8 %1036, 1
  store i8 %1037, i8* %49, align 1, !tbaa !2446
  %1038 = xor i64 %1025, %1021
  %1039 = xor i64 %1038, %1027
  %1040 = lshr i64 %1039, 4
  %1041 = trunc i64 %1040 to i8
  %1042 = and i8 %1041, 1
  store i8 %1042, i8* %55, align 1, !tbaa !2450
  %1043 = icmp eq i64 %1027, 0
  %1044 = zext i1 %1043 to i8
  store i8 %1044, i8* %58, align 1, !tbaa !2447
  %1045 = lshr i64 %1027, 63
  %1046 = trunc i64 %1045 to i8
  store i8 %1046, i8* %61, align 1, !tbaa !2448
  %1047 = lshr i64 %1021, 63
  %1048 = xor i64 %1045, %1047
  %1049 = xor i64 %1045, %1026
  %1050 = add nuw nsw i64 %1048, %1049
  %1051 = icmp eq i64 %1050, 2
  %1052 = zext i1 %1051 to i8
  store i8 %1052, i8* %67, align 1, !tbaa !2449
  %1053 = load i64, i64* %RBP, align 8
  %1054 = add i64 %1053, -52
  %1055 = add i64 %786, 236
  store i64 %1055, i64* %PC, align 8
  %1056 = inttoptr i64 %1054 to i32*
  %1057 = load i32, i32* %1056, align 4
  %1058 = sext i32 %1057 to i64
  %1059 = mul nsw i64 %1058, 520
  store i64 %1059, i64* %RCX, align 8, !tbaa !2428
  %1060 = lshr i64 %1059, 63
  %1061 = add i64 %1059, %1027
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = icmp ult i64 %1061, %1027
  %1063 = icmp ult i64 %1061, %1059
  %1064 = or i1 %1062, %1063
  %1065 = zext i1 %1064 to i8
  store i8 %1065, i8* %42, align 1, !tbaa !2432
  %1066 = trunc i64 %1061 to i32
  %1067 = and i32 %1066, 255
  %1068 = tail call i32 @llvm.ctpop.i32(i32 %1067) #9
  %1069 = trunc i32 %1068 to i8
  %1070 = and i8 %1069, 1
  %1071 = xor i8 %1070, 1
  store i8 %1071, i8* %49, align 1, !tbaa !2446
  %1072 = xor i64 %1059, %1027
  %1073 = xor i64 %1072, %1061
  %1074 = lshr i64 %1073, 4
  %1075 = trunc i64 %1074 to i8
  %1076 = and i8 %1075, 1
  store i8 %1076, i8* %55, align 1, !tbaa !2450
  %1077 = icmp eq i64 %1061, 0
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %58, align 1, !tbaa !2447
  %1079 = lshr i64 %1061, 63
  %1080 = trunc i64 %1079 to i8
  store i8 %1080, i8* %61, align 1, !tbaa !2448
  %1081 = xor i64 %1079, %1045
  %1082 = xor i64 %1079, %1060
  %1083 = add nuw nsw i64 %1081, %1082
  %1084 = icmp eq i64 %1083, 2
  %1085 = zext i1 %1084 to i8
  store i8 %1085, i8* %67, align 1, !tbaa !2449
  %1086 = add i64 %1053, -196
  %1087 = add i64 %786, 253
  store i64 %1087, i64* %PC, align 8
  %1088 = inttoptr i64 %1086 to i32*
  %1089 = load i32, i32* %1088, align 4
  %1090 = sext i32 %1089 to i64
  store i64 %1090, i64* %RCX, align 8, !tbaa !2428
  %1091 = shl nsw i64 %1090, 3
  %1092 = add i64 %1091, %1061
  %1093 = add i64 %786, 258
  store i64 %1093, i64* %PC, align 8
  %1094 = load double, double* %155, align 1
  %1095 = inttoptr i64 %1092 to double*
  %1096 = load double, double* %1095, align 8
  %1097 = fmul double %1094, %1096
  store double %1097, double* %155, align 1, !tbaa !2452
  %1098 = load double, double* %257, align 1
  %1099 = fsub double %1098, %1097
  store double %1099, double* %257, align 1, !tbaa !2452
  %1100 = add i64 %1053, -136
  %1101 = add i64 %786, 269
  store i64 %1101, i64* %PC, align 8
  %1102 = inttoptr i64 %1100 to i64*
  %1103 = load i64, i64* %1102, align 8
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = add i64 %1053, -188
  %1105 = add i64 %786, 276
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1104 to i32*
  %1107 = load i32, i32* %1106, align 4
  %1108 = sext i32 %1107 to i64
  %1109 = mul nsw i64 %1108, 33800
  store i64 %1109, i64* %RCX, align 8, !tbaa !2428
  %1110 = lshr i64 %1109, 63
  %1111 = add i64 %1109, %1103
  store i64 %1111, i64* %RAX, align 8, !tbaa !2428
  %1112 = icmp ult i64 %1111, %1103
  %1113 = icmp ult i64 %1111, %1109
  %1114 = or i1 %1112, %1113
  %1115 = zext i1 %1114 to i8
  store i8 %1115, i8* %42, align 1, !tbaa !2432
  %1116 = trunc i64 %1111 to i32
  %1117 = and i32 %1116, 255
  %1118 = tail call i32 @llvm.ctpop.i32(i32 %1117) #9
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  store i8 %1121, i8* %49, align 1, !tbaa !2446
  %1122 = xor i64 %1109, %1103
  %1123 = xor i64 %1122, %1111
  %1124 = lshr i64 %1123, 4
  %1125 = trunc i64 %1124 to i8
  %1126 = and i8 %1125, 1
  store i8 %1126, i8* %55, align 1, !tbaa !2450
  %1127 = icmp eq i64 %1111, 0
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %58, align 1, !tbaa !2447
  %1129 = lshr i64 %1111, 63
  %1130 = trunc i64 %1129 to i8
  store i8 %1130, i8* %61, align 1, !tbaa !2448
  %1131 = lshr i64 %1103, 63
  %1132 = xor i64 %1129, %1131
  %1133 = xor i64 %1129, %1110
  %1134 = add nuw nsw i64 %1132, %1133
  %1135 = icmp eq i64 %1134, 2
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %67, align 1, !tbaa !2449
  %1137 = load i64, i64* %RBP, align 8
  %1138 = add i64 %1137, -52
  %1139 = add i64 %786, 290
  store i64 %1139, i64* %PC, align 8
  %1140 = inttoptr i64 %1138 to i32*
  %1141 = load i32, i32* %1140, align 4
  %1142 = sext i32 %1141 to i64
  %1143 = mul nsw i64 %1142, 520
  store i64 %1143, i64* %RCX, align 8, !tbaa !2428
  %1144 = lshr i64 %1143, 63
  %1145 = add i64 %1143, %1111
  store i64 %1145, i64* %RAX, align 8, !tbaa !2428
  %1146 = icmp ult i64 %1145, %1111
  %1147 = icmp ult i64 %1145, %1143
  %1148 = or i1 %1146, %1147
  %1149 = zext i1 %1148 to i8
  store i8 %1149, i8* %42, align 1, !tbaa !2432
  %1150 = trunc i64 %1145 to i32
  %1151 = and i32 %1150, 255
  %1152 = tail call i32 @llvm.ctpop.i32(i32 %1151) #9
  %1153 = trunc i32 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = xor i8 %1154, 1
  store i8 %1155, i8* %49, align 1, !tbaa !2446
  %1156 = xor i64 %1143, %1111
  %1157 = xor i64 %1156, %1145
  %1158 = lshr i64 %1157, 4
  %1159 = trunc i64 %1158 to i8
  %1160 = and i8 %1159, 1
  store i8 %1160, i8* %55, align 1, !tbaa !2450
  %1161 = icmp eq i64 %1145, 0
  %1162 = zext i1 %1161 to i8
  store i8 %1162, i8* %58, align 1, !tbaa !2447
  %1163 = lshr i64 %1145, 63
  %1164 = trunc i64 %1163 to i8
  store i8 %1164, i8* %61, align 1, !tbaa !2448
  %1165 = xor i64 %1163, %1129
  %1166 = xor i64 %1163, %1144
  %1167 = add nuw nsw i64 %1165, %1166
  %1168 = icmp eq i64 %1167, 2
  %1169 = zext i1 %1168 to i8
  store i8 %1169, i8* %67, align 1, !tbaa !2449
  %1170 = add i64 %1137, -196
  %1171 = add i64 %786, 307
  store i64 %1171, i64* %PC, align 8
  %1172 = inttoptr i64 %1170 to i32*
  %1173 = load i32, i32* %1172, align 4
  %1174 = sext i32 %1173 to i64
  store i64 %1174, i64* %RCX, align 8, !tbaa !2428
  %1175 = shl nsw i64 %1174, 3
  %1176 = add i64 %1175, %1145
  %1177 = add i64 %786, 312
  store i64 %1177, i64* %PC, align 8
  %1178 = load i64, i64* %148, align 1
  %1179 = inttoptr i64 %1176 to i64*
  store i64 %1178, i64* %1179, align 8
  %1180 = load i64, i64* %RBP, align 8
  %1181 = add i64 %1180, -104
  %1182 = load i64, i64* %PC, align 8
  %1183 = add i64 %1182, 4
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1181 to i64*
  %1185 = load i64, i64* %1184, align 8
  store i64 %1185, i64* %RAX, align 8, !tbaa !2428
  %1186 = add i64 %1180, -188
  %1187 = add i64 %1182, 11
  store i64 %1187, i64* %PC, align 8
  %1188 = inttoptr i64 %1186 to i32*
  %1189 = load i32, i32* %1188, align 4
  %1190 = sext i32 %1189 to i64
  %1191 = mul nsw i64 %1190, 520
  store i64 %1191, i64* %RCX, align 8, !tbaa !2428
  %1192 = lshr i64 %1191, 63
  %1193 = add i64 %1191, %1185
  store i64 %1193, i64* %RAX, align 8, !tbaa !2428
  %1194 = icmp ult i64 %1193, %1185
  %1195 = icmp ult i64 %1193, %1191
  %1196 = or i1 %1194, %1195
  %1197 = zext i1 %1196 to i8
  store i8 %1197, i8* %42, align 1, !tbaa !2432
  %1198 = trunc i64 %1193 to i32
  %1199 = and i32 %1198, 255
  %1200 = tail call i32 @llvm.ctpop.i32(i32 %1199) #9
  %1201 = trunc i32 %1200 to i8
  %1202 = and i8 %1201, 1
  %1203 = xor i8 %1202, 1
  store i8 %1203, i8* %49, align 1, !tbaa !2446
  %1204 = xor i64 %1191, %1185
  %1205 = xor i64 %1204, %1193
  %1206 = lshr i64 %1205, 4
  %1207 = trunc i64 %1206 to i8
  %1208 = and i8 %1207, 1
  store i8 %1208, i8* %55, align 1, !tbaa !2450
  %1209 = icmp eq i64 %1193, 0
  %1210 = zext i1 %1209 to i8
  store i8 %1210, i8* %58, align 1, !tbaa !2447
  %1211 = lshr i64 %1193, 63
  %1212 = trunc i64 %1211 to i8
  store i8 %1212, i8* %61, align 1, !tbaa !2448
  %1213 = lshr i64 %1185, 63
  %1214 = xor i64 %1211, %1213
  %1215 = xor i64 %1211, %1192
  %1216 = add nuw nsw i64 %1214, %1215
  %1217 = icmp eq i64 %1216, 2
  %1218 = zext i1 %1217 to i8
  store i8 %1218, i8* %67, align 1, !tbaa !2449
  %1219 = add i64 %1180, -192
  %1220 = add i64 %1182, 28
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1219 to i32*
  %1222 = load i32, i32* %1221, align 4
  %1223 = sext i32 %1222 to i64
  store i64 %1223, i64* %RCX, align 8, !tbaa !2428
  %1224 = shl nsw i64 %1223, 3
  %1225 = add i64 %1224, %1193
  %1226 = add i64 %1182, 33
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1225 to i64*
  %1228 = load i64, i64* %1227, align 8
  store i64 %1228, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1229 = add i64 %1180, -112
  %1230 = add i64 %1182, 37
  store i64 %1230, i64* %PC, align 8
  %1231 = inttoptr i64 %1229 to i64*
  %1232 = load i64, i64* %1231, align 8
  store i64 %1232, i64* %RAX, align 8, !tbaa !2428
  %1233 = add i64 %1182, 44
  store i64 %1233, i64* %PC, align 8
  %1234 = load i32, i32* %1188, align 4
  %1235 = sext i32 %1234 to i64
  %1236 = mul nsw i64 %1235, 33800
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1237 = lshr i64 %1236, 63
  %1238 = add i64 %1236, %1232
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  %1239 = icmp ult i64 %1238, %1232
  %1240 = icmp ult i64 %1238, %1236
  %1241 = or i1 %1239, %1240
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %42, align 1, !tbaa !2432
  %1243 = trunc i64 %1238 to i32
  %1244 = and i32 %1243, 255
  %1245 = tail call i32 @llvm.ctpop.i32(i32 %1244) #9
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  store i8 %1248, i8* %49, align 1, !tbaa !2446
  %1249 = xor i64 %1236, %1232
  %1250 = xor i64 %1249, %1238
  %1251 = lshr i64 %1250, 4
  %1252 = trunc i64 %1251 to i8
  %1253 = and i8 %1252, 1
  store i8 %1253, i8* %55, align 1, !tbaa !2450
  %1254 = icmp eq i64 %1238, 0
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %58, align 1, !tbaa !2447
  %1256 = lshr i64 %1238, 63
  %1257 = trunc i64 %1256 to i8
  store i8 %1257, i8* %61, align 1, !tbaa !2448
  %1258 = lshr i64 %1232, 63
  %1259 = xor i64 %1256, %1258
  %1260 = xor i64 %1256, %1237
  %1261 = add nuw nsw i64 %1259, %1260
  %1262 = icmp eq i64 %1261, 2
  %1263 = zext i1 %1262 to i8
  store i8 %1263, i8* %67, align 1, !tbaa !2449
  %1264 = load i64, i64* %RBP, align 8
  %1265 = add i64 %1264, -52
  %1266 = add i64 %1182, 58
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1265 to i32*
  %1268 = load i32, i32* %1267, align 4
  %1269 = sext i32 %1268 to i64
  %1270 = mul nsw i64 %1269, 520
  store i64 %1270, i64* %RCX, align 8, !tbaa !2428
  %1271 = lshr i64 %1270, 63
  %1272 = add i64 %1270, %1238
  store i64 %1272, i64* %RAX, align 8, !tbaa !2428
  %1273 = icmp ult i64 %1272, %1238
  %1274 = icmp ult i64 %1272, %1270
  %1275 = or i1 %1273, %1274
  %1276 = zext i1 %1275 to i8
  store i8 %1276, i8* %42, align 1, !tbaa !2432
  %1277 = trunc i64 %1272 to i32
  %1278 = and i32 %1277, 255
  %1279 = tail call i32 @llvm.ctpop.i32(i32 %1278) #9
  %1280 = trunc i32 %1279 to i8
  %1281 = and i8 %1280, 1
  %1282 = xor i8 %1281, 1
  store i8 %1282, i8* %49, align 1, !tbaa !2446
  %1283 = xor i64 %1270, %1238
  %1284 = xor i64 %1283, %1272
  %1285 = lshr i64 %1284, 4
  %1286 = trunc i64 %1285 to i8
  %1287 = and i8 %1286, 1
  store i8 %1287, i8* %55, align 1, !tbaa !2450
  %1288 = icmp eq i64 %1272, 0
  %1289 = zext i1 %1288 to i8
  store i8 %1289, i8* %58, align 1, !tbaa !2447
  %1290 = lshr i64 %1272, 63
  %1291 = trunc i64 %1290 to i8
  store i8 %1291, i8* %61, align 1, !tbaa !2448
  %1292 = xor i64 %1290, %1256
  %1293 = xor i64 %1290, %1271
  %1294 = add nuw nsw i64 %1292, %1293
  %1295 = icmp eq i64 %1294, 2
  %1296 = zext i1 %1295 to i8
  store i8 %1296, i8* %67, align 1, !tbaa !2449
  %1297 = add i64 %1264, -196
  %1298 = add i64 %1182, 75
  store i64 %1298, i64* %PC, align 8
  %1299 = inttoptr i64 %1297 to i32*
  %1300 = load i32, i32* %1299, align 4
  %1301 = sext i32 %1300 to i64
  store i64 %1301, i64* %RCX, align 8, !tbaa !2428
  %1302 = shl nsw i64 %1301, 3
  %1303 = add i64 %1302, %1272
  %1304 = add i64 %1182, 80
  store i64 %1304, i64* %PC, align 8
  %1305 = load i64, i64* %148, align 1
  %1306 = inttoptr i64 %1303 to i64*
  store i64 %1305, i64* %1306, align 8
  %1307 = load i64, i64* %RBP, align 8
  %1308 = add i64 %1307, -196
  %1309 = load i64, i64* %PC, align 8
  %1310 = add i64 %1309, 6
  store i64 %1310, i64* %PC, align 8
  %1311 = inttoptr i64 %1308 to i32*
  %1312 = load i32, i32* %1311, align 4
  %1313 = add i32 %1312, 1
  %1314 = zext i32 %1313 to i64
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = icmp eq i32 %1312, -1
  %1316 = icmp eq i32 %1313, 0
  %1317 = or i1 %1315, %1316
  %1318 = zext i1 %1317 to i8
  store i8 %1318, i8* %42, align 1, !tbaa !2432
  %1319 = and i32 %1313, 255
  %1320 = tail call i32 @llvm.ctpop.i32(i32 %1319) #9
  %1321 = trunc i32 %1320 to i8
  %1322 = and i8 %1321, 1
  %1323 = xor i8 %1322, 1
  store i8 %1323, i8* %49, align 1, !tbaa !2446
  %1324 = xor i32 %1313, %1312
  %1325 = lshr i32 %1324, 4
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  store i8 %1327, i8* %55, align 1, !tbaa !2450
  %1328 = zext i1 %1316 to i8
  store i8 %1328, i8* %58, align 1, !tbaa !2447
  %1329 = lshr i32 %1313, 31
  %1330 = trunc i32 %1329 to i8
  store i8 %1330, i8* %61, align 1, !tbaa !2448
  %1331 = lshr i32 %1312, 31
  %1332 = xor i32 %1329, %1331
  %1333 = add nuw nsw i32 %1332, %1329
  %1334 = icmp eq i32 %1333, 2
  %1335 = zext i1 %1334 to i8
  store i8 %1335, i8* %67, align 1, !tbaa !2449
  %1336 = add i64 %1309, 15
  store i64 %1336, i64* %PC, align 8
  store i32 %1313, i32* %1311, align 4
  %1337 = load i64, i64* %PC, align 8
  %1338 = add i64 %1337, -813
  store i64 %1338, i64* %PC, align 8, !tbaa !2428
  br label %block_4029d0

block_402ffb:                                     ; preds = %block_402331
  %1339 = load i64, i64* %RSP, align 8
  %1340 = add i64 %1339, 56
  store i64 %1340, i64* %RSP, align 8, !tbaa !2428
  %1341 = icmp ugt i64 %1339, -57
  %1342 = zext i1 %1341 to i8
  store i8 %1342, i8* %42, align 1, !tbaa !2432
  %1343 = trunc i64 %1340 to i32
  %1344 = and i32 %1343, 255
  %1345 = tail call i32 @llvm.ctpop.i32(i32 %1344) #9
  %1346 = trunc i32 %1345 to i8
  %1347 = and i8 %1346, 1
  %1348 = xor i8 %1347, 1
  store i8 %1348, i8* %49, align 1, !tbaa !2446
  %1349 = xor i64 %1339, 16
  %1350 = xor i64 %1349, %1340
  %1351 = lshr i64 %1350, 4
  %1352 = trunc i64 %1351 to i8
  %1353 = and i8 %1352, 1
  store i8 %1353, i8* %55, align 1, !tbaa !2450
  %1354 = icmp eq i64 %1340, 0
  %1355 = zext i1 %1354 to i8
  store i8 %1355, i8* %58, align 1, !tbaa !2447
  %1356 = lshr i64 %1340, 63
  %1357 = trunc i64 %1356 to i8
  store i8 %1357, i8* %61, align 1, !tbaa !2448
  %1358 = lshr i64 %1339, 63
  %1359 = xor i64 %1356, %1358
  %1360 = add nuw nsw i64 %1359, %1356
  %1361 = icmp eq i64 %1360, 2
  %1362 = zext i1 %1361 to i8
  store i8 %1362, i8* %67, align 1, !tbaa !2449
  %1363 = add i64 %2458, 5
  store i64 %1363, i64* %PC, align 8
  %1364 = add i64 %1339, 64
  %1365 = inttoptr i64 %1340 to i64*
  %1366 = load i64, i64* %1365, align 8
  store i64 %1366, i64* %RBX, align 8, !tbaa !2428
  store i64 %1364, i64* %RSP, align 8, !tbaa !2428
  %1367 = add i64 %2458, 7
  store i64 %1367, i64* %PC, align 8
  %1368 = add i64 %1339, 72
  %1369 = inttoptr i64 %1364 to i64*
  %1370 = load i64, i64* %1369, align 8
  store i64 %1370, i64* %R12, align 8, !tbaa !2428
  store i64 %1368, i64* %RSP, align 8, !tbaa !2428
  %1371 = add i64 %2458, 9
  store i64 %1371, i64* %PC, align 8
  %1372 = add i64 %1339, 80
  %1373 = inttoptr i64 %1368 to i64*
  %1374 = load i64, i64* %1373, align 8
  store i64 %1374, i64* %R13, align 8, !tbaa !2428
  store i64 %1372, i64* %RSP, align 8, !tbaa !2428
  %1375 = add i64 %2458, 11
  store i64 %1375, i64* %PC, align 8
  %1376 = add i64 %1339, 88
  %1377 = inttoptr i64 %1372 to i64*
  %1378 = load i64, i64* %1377, align 8
  store i64 %1378, i64* %R14, align 8, !tbaa !2428
  store i64 %1376, i64* %RSP, align 8, !tbaa !2428
  %1379 = add i64 %2458, 13
  store i64 %1379, i64* %PC, align 8
  %1380 = add i64 %1339, 96
  %1381 = inttoptr i64 %1376 to i64*
  %1382 = load i64, i64* %1381, align 8
  store i64 %1382, i64* %R15, align 8, !tbaa !2428
  store i64 %1380, i64* %RSP, align 8, !tbaa !2428
  %1383 = add i64 %2458, 14
  store i64 %1383, i64* %PC, align 8
  %1384 = add i64 %1339, 104
  %1385 = inttoptr i64 %1380 to i64*
  %1386 = load i64, i64* %1385, align 8
  store i64 %1386, i64* %RBP, align 8, !tbaa !2428
  store i64 %1384, i64* %RSP, align 8, !tbaa !2428
  %1387 = add i64 %2458, 15
  store i64 %1387, i64* %PC, align 8
  %1388 = inttoptr i64 %1384 to i64*
  %1389 = load i64, i64* %1388, align 8
  store i64 %1389, i64* %PC, align 8, !tbaa !2428
  %1390 = add i64 %1339, 112
  store i64 %1390, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402359:                                     ; preds = %block_40234a
  %1391 = add i64 %2490, -196
  %1392 = add i64 %2526, 10
  store i64 %1392, i64* %PC, align 8
  %1393 = inttoptr i64 %1391 to i32*
  store i32 0, i32* %1393, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_402363

block_4026c3:                                     ; preds = %block_402363
  %1394 = add i64 %2602, -48
  %1395 = add i64 %2564, 42
  store i64 %1395, i64* %PC, align 8
  %1396 = inttoptr i64 %1394 to i32*
  %1397 = load i32, i32* %1396, align 4
  %1398 = sext i32 %1397 to i64
  store i64 %1398, i64* %RCX, align 8, !tbaa !2428
  %1399 = shl nsw i64 %1398, 3
  %1400 = add i64 %1399, %2611
  %1401 = add i64 %2564, 47
  store i64 %1401, i64* %PC, align 8
  %1402 = inttoptr i64 %1400 to i64*
  %1403 = load i64, i64* %1402, align 8
  store i64 %1403, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1404 = add i64 %2602, -120
  %1405 = add i64 %2564, 51
  store i64 %1405, i64* %PC, align 8
  %1406 = inttoptr i64 %1404 to i64*
  %1407 = load i64, i64* %1406, align 8
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  %1408 = add i64 %2602, -188
  %1409 = add i64 %2564, 58
  store i64 %1409, i64* %PC, align 8
  %1410 = inttoptr i64 %1408 to i32*
  %1411 = load i32, i32* %1410, align 4
  %1412 = sext i32 %1411 to i64
  %1413 = mul nsw i64 %1412, 33800
  store i64 %1413, i64* %RCX, align 8, !tbaa !2428
  %1414 = lshr i64 %1413, 63
  %1415 = add i64 %1413, %1407
  store i64 %1415, i64* %RAX, align 8, !tbaa !2428
  %1416 = icmp ult i64 %1415, %1407
  %1417 = icmp ult i64 %1415, %1413
  %1418 = or i1 %1416, %1417
  %1419 = zext i1 %1418 to i8
  store i8 %1419, i8* %42, align 1, !tbaa !2432
  %1420 = trunc i64 %1415 to i32
  %1421 = and i32 %1420, 255
  %1422 = tail call i32 @llvm.ctpop.i32(i32 %1421) #9
  %1423 = trunc i32 %1422 to i8
  %1424 = and i8 %1423, 1
  %1425 = xor i8 %1424, 1
  store i8 %1425, i8* %49, align 1, !tbaa !2446
  %1426 = xor i64 %1413, %1407
  %1427 = xor i64 %1426, %1415
  %1428 = lshr i64 %1427, 4
  %1429 = trunc i64 %1428 to i8
  %1430 = and i8 %1429, 1
  store i8 %1430, i8* %55, align 1, !tbaa !2450
  %1431 = icmp eq i64 %1415, 0
  %1432 = zext i1 %1431 to i8
  store i8 %1432, i8* %58, align 1, !tbaa !2447
  %1433 = lshr i64 %1415, 63
  %1434 = trunc i64 %1433 to i8
  store i8 %1434, i8* %61, align 1, !tbaa !2448
  %1435 = lshr i64 %1407, 63
  %1436 = xor i64 %1433, %1435
  %1437 = xor i64 %1433, %1414
  %1438 = add nuw nsw i64 %1436, %1437
  %1439 = icmp eq i64 %1438, 2
  %1440 = zext i1 %1439 to i8
  store i8 %1440, i8* %67, align 1, !tbaa !2449
  %1441 = add i64 %2564, 74
  store i64 %1441, i64* %PC, align 8
  %1442 = load i32, i32* %2605, align 4
  %1443 = add i32 %1442, 1
  %1444 = zext i32 %1443 to i64
  store i64 %1444, i64* %RDX, align 8, !tbaa !2428
  %1445 = sext i32 %1443 to i64
  %1446 = mul nsw i64 %1445, 520
  store i64 %1446, i64* %RCX, align 8, !tbaa !2428
  %1447 = lshr i64 %1446, 63
  %1448 = load i64, i64* %RAX, align 8
  %1449 = add i64 %1446, %1448
  store i64 %1449, i64* %RAX, align 8, !tbaa !2428
  %1450 = icmp ult i64 %1449, %1448
  %1451 = icmp ult i64 %1449, %1446
  %1452 = or i1 %1450, %1451
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %42, align 1, !tbaa !2432
  %1454 = trunc i64 %1449 to i32
  %1455 = and i32 %1454, 255
  %1456 = tail call i32 @llvm.ctpop.i32(i32 %1455) #9
  %1457 = trunc i32 %1456 to i8
  %1458 = and i8 %1457, 1
  %1459 = xor i8 %1458, 1
  store i8 %1459, i8* %49, align 1, !tbaa !2446
  %1460 = xor i64 %1446, %1448
  %1461 = xor i64 %1460, %1449
  %1462 = lshr i64 %1461, 4
  %1463 = trunc i64 %1462 to i8
  %1464 = and i8 %1463, 1
  store i8 %1464, i8* %55, align 1, !tbaa !2450
  %1465 = icmp eq i64 %1449, 0
  %1466 = zext i1 %1465 to i8
  store i8 %1466, i8* %58, align 1, !tbaa !2447
  %1467 = lshr i64 %1449, 63
  %1468 = trunc i64 %1467 to i8
  store i8 %1468, i8* %61, align 1, !tbaa !2448
  %1469 = lshr i64 %1448, 63
  %1470 = xor i64 %1467, %1469
  %1471 = xor i64 %1467, %1447
  %1472 = add nuw nsw i64 %1470, %1471
  %1473 = icmp eq i64 %1472, 2
  %1474 = zext i1 %1473 to i8
  store i8 %1474, i8* %67, align 1, !tbaa !2449
  %1475 = load i64, i64* %RBP, align 8
  %1476 = add i64 %1475, -48
  %1477 = add i64 %2564, 94
  store i64 %1477, i64* %PC, align 8
  %1478 = inttoptr i64 %1476 to i32*
  %1479 = load i32, i32* %1478, align 4
  %1480 = sext i32 %1479 to i64
  store i64 %1480, i64* %RCX, align 8, !tbaa !2428
  %1481 = shl nsw i64 %1480, 3
  %1482 = add i64 %1481, %1449
  %1483 = add i64 %2564, 99
  store i64 %1483, i64* %PC, align 8
  %1484 = load double, double* %257, align 1
  %1485 = inttoptr i64 %1482 to double*
  %1486 = load double, double* %1485, align 8
  %1487 = fsub double %1484, %1486
  store double %1487, double* %257, align 1, !tbaa !2452
  %1488 = add i64 %1475, -88
  %1489 = add i64 %2564, 103
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1488 to i64*
  %1491 = load i64, i64* %1490, align 8
  store i64 %1491, i64* %RAX, align 8, !tbaa !2428
  %1492 = add i64 %1475, -188
  %1493 = add i64 %2564, 110
  store i64 %1493, i64* %PC, align 8
  %1494 = inttoptr i64 %1492 to i32*
  %1495 = load i32, i32* %1494, align 4
  %1496 = sext i32 %1495 to i64
  %1497 = mul nsw i64 %1496, 520
  store i64 %1497, i64* %RCX, align 8, !tbaa !2428
  %1498 = lshr i64 %1497, 63
  %1499 = add i64 %1497, %1491
  store i64 %1499, i64* %RAX, align 8, !tbaa !2428
  %1500 = icmp ult i64 %1499, %1491
  %1501 = icmp ult i64 %1499, %1497
  %1502 = or i1 %1500, %1501
  %1503 = zext i1 %1502 to i8
  store i8 %1503, i8* %42, align 1, !tbaa !2432
  %1504 = trunc i64 %1499 to i32
  %1505 = and i32 %1504, 255
  %1506 = tail call i32 @llvm.ctpop.i32(i32 %1505) #9
  %1507 = trunc i32 %1506 to i8
  %1508 = and i8 %1507, 1
  %1509 = xor i8 %1508, 1
  store i8 %1509, i8* %49, align 1, !tbaa !2446
  %1510 = xor i64 %1497, %1491
  %1511 = xor i64 %1510, %1499
  %1512 = lshr i64 %1511, 4
  %1513 = trunc i64 %1512 to i8
  %1514 = and i8 %1513, 1
  store i8 %1514, i8* %55, align 1, !tbaa !2450
  %1515 = icmp eq i64 %1499, 0
  %1516 = zext i1 %1515 to i8
  store i8 %1516, i8* %58, align 1, !tbaa !2447
  %1517 = lshr i64 %1499, 63
  %1518 = trunc i64 %1517 to i8
  store i8 %1518, i8* %61, align 1, !tbaa !2448
  %1519 = lshr i64 %1491, 63
  %1520 = xor i64 %1517, %1519
  %1521 = xor i64 %1517, %1498
  %1522 = add nuw nsw i64 %1520, %1521
  %1523 = icmp eq i64 %1522, 2
  %1524 = zext i1 %1523 to i8
  store i8 %1524, i8* %67, align 1, !tbaa !2449
  %1525 = add i64 %1475, -192
  %1526 = add i64 %2564, 127
  store i64 %1526, i64* %PC, align 8
  %1527 = inttoptr i64 %1525 to i32*
  %1528 = load i32, i32* %1527, align 4
  %1529 = sext i32 %1528 to i64
  store i64 %1529, i64* %RCX, align 8, !tbaa !2428
  %1530 = shl nsw i64 %1529, 3
  %1531 = add i64 %1530, %1499
  %1532 = add i64 %2564, 132
  store i64 %1532, i64* %PC, align 8
  %1533 = inttoptr i64 %1531 to double*
  %1534 = load double, double* %1533, align 8
  %1535 = fadd double %1487, %1534
  store double %1535, double* %257, align 1, !tbaa !2452
  %1536 = load i64, i64* %RBP, align 8
  %1537 = add i64 %1536, -128
  %1538 = add i64 %2564, 136
  store i64 %1538, i64* %PC, align 8
  %1539 = inttoptr i64 %1537 to i64*
  %1540 = load i64, i64* %1539, align 8
  store i64 %1540, i64* %RAX, align 8, !tbaa !2428
  %1541 = add i64 %1536, -188
  %1542 = add i64 %2564, 143
  store i64 %1542, i64* %PC, align 8
  %1543 = inttoptr i64 %1541 to i32*
  %1544 = load i32, i32* %1543, align 4
  %1545 = sext i32 %1544 to i64
  %1546 = mul nsw i64 %1545, 33800
  store i64 %1546, i64* %RCX, align 8, !tbaa !2428
  %1547 = lshr i64 %1546, 63
  %1548 = add i64 %1546, %1540
  store i64 %1548, i64* %RAX, align 8, !tbaa !2428
  %1549 = icmp ult i64 %1548, %1540
  %1550 = icmp ult i64 %1548, %1546
  %1551 = or i1 %1549, %1550
  %1552 = zext i1 %1551 to i8
  store i8 %1552, i8* %42, align 1, !tbaa !2432
  %1553 = trunc i64 %1548 to i32
  %1554 = and i32 %1553, 255
  %1555 = tail call i32 @llvm.ctpop.i32(i32 %1554) #9
  %1556 = trunc i32 %1555 to i8
  %1557 = and i8 %1556, 1
  %1558 = xor i8 %1557, 1
  store i8 %1558, i8* %49, align 1, !tbaa !2446
  %1559 = xor i64 %1546, %1540
  %1560 = xor i64 %1559, %1548
  %1561 = lshr i64 %1560, 4
  %1562 = trunc i64 %1561 to i8
  %1563 = and i8 %1562, 1
  store i8 %1563, i8* %55, align 1, !tbaa !2450
  %1564 = icmp eq i64 %1548, 0
  %1565 = zext i1 %1564 to i8
  store i8 %1565, i8* %58, align 1, !tbaa !2447
  %1566 = lshr i64 %1548, 63
  %1567 = trunc i64 %1566 to i8
  store i8 %1567, i8* %61, align 1, !tbaa !2448
  %1568 = lshr i64 %1540, 63
  %1569 = xor i64 %1566, %1568
  %1570 = xor i64 %1566, %1547
  %1571 = add nuw nsw i64 %1569, %1570
  %1572 = icmp eq i64 %1571, 2
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %67, align 1, !tbaa !2449
  %1574 = add i64 %1536, -192
  %1575 = add i64 %2564, 160
  store i64 %1575, i64* %PC, align 8
  %1576 = inttoptr i64 %1574 to i32*
  %1577 = load i32, i32* %1576, align 4
  %1578 = sext i32 %1577 to i64
  %1579 = mul nsw i64 %1578, 520
  store i64 %1579, i64* %RCX, align 8, !tbaa !2428
  %1580 = lshr i64 %1579, 63
  %1581 = add i64 %1579, %1548
  store i64 %1581, i64* %RAX, align 8, !tbaa !2428
  %1582 = icmp ult i64 %1581, %1548
  %1583 = icmp ult i64 %1581, %1579
  %1584 = or i1 %1582, %1583
  %1585 = zext i1 %1584 to i8
  store i8 %1585, i8* %42, align 1, !tbaa !2432
  %1586 = trunc i64 %1581 to i32
  %1587 = and i32 %1586, 255
  %1588 = tail call i32 @llvm.ctpop.i32(i32 %1587) #9
  %1589 = trunc i32 %1588 to i8
  %1590 = and i8 %1589, 1
  %1591 = xor i8 %1590, 1
  store i8 %1591, i8* %49, align 1, !tbaa !2446
  %1592 = xor i64 %1579, %1548
  %1593 = xor i64 %1592, %1581
  %1594 = lshr i64 %1593, 4
  %1595 = trunc i64 %1594 to i8
  %1596 = and i8 %1595, 1
  store i8 %1596, i8* %55, align 1, !tbaa !2450
  %1597 = icmp eq i64 %1581, 0
  %1598 = zext i1 %1597 to i8
  store i8 %1598, i8* %58, align 1, !tbaa !2447
  %1599 = lshr i64 %1581, 63
  %1600 = trunc i64 %1599 to i8
  store i8 %1600, i8* %61, align 1, !tbaa !2448
  %1601 = xor i64 %1599, %1566
  %1602 = xor i64 %1599, %1580
  %1603 = add nuw nsw i64 %1601, %1602
  %1604 = icmp eq i64 %1603, 2
  %1605 = zext i1 %1604 to i8
  store i8 %1605, i8* %67, align 1, !tbaa !2449
  %1606 = load i64, i64* %RBP, align 8
  %1607 = add i64 %1606, -48
  %1608 = add i64 %2564, 174
  store i64 %1608, i64* %PC, align 8
  %1609 = inttoptr i64 %1607 to i32*
  %1610 = load i32, i32* %1609, align 4
  %1611 = sext i32 %1610 to i64
  store i64 %1611, i64* %RCX, align 8, !tbaa !2428
  %1612 = shl nsw i64 %1611, 3
  %1613 = add i64 %1612, %1581
  %1614 = add i64 %2564, 179
  store i64 %1614, i64* %PC, align 8
  %1615 = load double, double* %257, align 1
  %1616 = inttoptr i64 %1613 to double*
  %1617 = load double, double* %1616, align 8
  %1618 = fsub double %1615, %1617
  store double %1618, double* %257, align 1, !tbaa !2452
  %1619 = add i64 %1606, -96
  %1620 = add i64 %2564, 183
  store i64 %1620, i64* %PC, align 8
  %1621 = inttoptr i64 %1619 to i64*
  %1622 = load i64, i64* %1621, align 8
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = add i64 %1606, -188
  %1624 = add i64 %2564, 190
  store i64 %1624, i64* %PC, align 8
  %1625 = inttoptr i64 %1623 to i32*
  %1626 = load i32, i32* %1625, align 4
  %1627 = sext i32 %1626 to i64
  %1628 = mul nsw i64 %1627, 520
  store i64 %1628, i64* %RCX, align 8, !tbaa !2428
  %1629 = lshr i64 %1628, 63
  %1630 = add i64 %1628, %1622
  store i64 %1630, i64* %RAX, align 8, !tbaa !2428
  %1631 = icmp ult i64 %1630, %1622
  %1632 = icmp ult i64 %1630, %1628
  %1633 = or i1 %1631, %1632
  %1634 = zext i1 %1633 to i8
  store i8 %1634, i8* %42, align 1, !tbaa !2432
  %1635 = trunc i64 %1630 to i32
  %1636 = and i32 %1635, 255
  %1637 = tail call i32 @llvm.ctpop.i32(i32 %1636) #9
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  store i8 %1640, i8* %49, align 1, !tbaa !2446
  %1641 = xor i64 %1628, %1622
  %1642 = xor i64 %1641, %1630
  %1643 = lshr i64 %1642, 4
  %1644 = trunc i64 %1643 to i8
  %1645 = and i8 %1644, 1
  store i8 %1645, i8* %55, align 1, !tbaa !2450
  %1646 = icmp eq i64 %1630, 0
  %1647 = zext i1 %1646 to i8
  store i8 %1647, i8* %58, align 1, !tbaa !2447
  %1648 = lshr i64 %1630, 63
  %1649 = trunc i64 %1648 to i8
  store i8 %1649, i8* %61, align 1, !tbaa !2448
  %1650 = lshr i64 %1622, 63
  %1651 = xor i64 %1648, %1650
  %1652 = xor i64 %1648, %1629
  %1653 = add nuw nsw i64 %1651, %1652
  %1654 = icmp eq i64 %1653, 2
  %1655 = zext i1 %1654 to i8
  store i8 %1655, i8* %67, align 1, !tbaa !2449
  %1656 = add i64 %1606, -192
  %1657 = add i64 %2564, 207
  store i64 %1657, i64* %PC, align 8
  %1658 = inttoptr i64 %1656 to i32*
  %1659 = load i32, i32* %1658, align 4
  %1660 = sext i32 %1659 to i64
  store i64 %1660, i64* %RCX, align 8, !tbaa !2428
  %1661 = shl nsw i64 %1660, 3
  %1662 = add i64 %1661, %1630
  %1663 = add i64 %2564, 212
  store i64 %1663, i64* %PC, align 8
  %1664 = inttoptr i64 %1662 to double*
  store double %1618, double* %1664, align 8
  %1665 = load i64, i64* %RBP, align 8
  %1666 = add i64 %1665, -176
  %1667 = load i64, i64* %PC, align 8
  %1668 = add i64 %1667, 7
  store i64 %1668, i64* %PC, align 8
  %1669 = inttoptr i64 %1666 to i64*
  %1670 = load i64, i64* %1669, align 8
  store i64 %1670, i64* %RAX, align 8, !tbaa !2428
  %1671 = add i64 %1665, -192
  %1672 = add i64 %1667, 14
  store i64 %1672, i64* %PC, align 8
  %1673 = inttoptr i64 %1671 to i32*
  %1674 = load i32, i32* %1673, align 4
  %1675 = sext i32 %1674 to i64
  store i64 %1675, i64* %RCX, align 8, !tbaa !2428
  %1676 = shl nsw i64 %1675, 3
  %1677 = add i64 %1676, %1670
  %1678 = add i64 %1667, 19
  store i64 %1678, i64* %PC, align 8
  %1679 = inttoptr i64 %1677 to i64*
  %1680 = load i64, i64* %1679, align 8
  store i64 %1680, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1681 = add i64 %1665, -184
  %1682 = add i64 %1667, 26
  store i64 %1682, i64* %PC, align 8
  %1683 = inttoptr i64 %1681 to i64*
  %1684 = load i64, i64* %1683, align 8
  store i64 %1684, i64* %RAX, align 8, !tbaa !2428
  %1685 = add i64 %1667, 33
  store i64 %1685, i64* %PC, align 8
  %1686 = load i32, i32* %1673, align 4
  %1687 = sext i32 %1686 to i64
  store i64 %1687, i64* %RCX, align 8, !tbaa !2428
  %1688 = shl nsw i64 %1687, 3
  %1689 = add i64 %1688, %1684
  %1690 = add i64 %1667, 38
  store i64 %1690, i64* %PC, align 8
  %1691 = bitcast i64 %1680 to double
  %1692 = inttoptr i64 %1689 to double*
  %1693 = load double, double* %1692, align 8
  %1694 = fdiv double %1691, %1693
  store double %1694, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %1695 = add i64 %1665, -112
  %1696 = add i64 %1667, 42
  store i64 %1696, i64* %PC, align 8
  %1697 = inttoptr i64 %1695 to i64*
  %1698 = load i64, i64* %1697, align 8
  store i64 %1698, i64* %RAX, align 8, !tbaa !2428
  %1699 = add i64 %1665, -188
  %1700 = add i64 %1667, 49
  store i64 %1700, i64* %PC, align 8
  %1701 = inttoptr i64 %1699 to i32*
  %1702 = load i32, i32* %1701, align 4
  %1703 = sext i32 %1702 to i64
  %1704 = mul nsw i64 %1703, 33800
  store i64 %1704, i64* %RCX, align 8, !tbaa !2428
  %1705 = lshr i64 %1704, 63
  %1706 = add i64 %1704, %1698
  store i64 %1706, i64* %RAX, align 8, !tbaa !2428
  %1707 = icmp ult i64 %1706, %1698
  %1708 = icmp ult i64 %1706, %1704
  %1709 = or i1 %1707, %1708
  %1710 = zext i1 %1709 to i8
  store i8 %1710, i8* %42, align 1, !tbaa !2432
  %1711 = trunc i64 %1706 to i32
  %1712 = and i32 %1711, 255
  %1713 = tail call i32 @llvm.ctpop.i32(i32 %1712) #9
  %1714 = trunc i32 %1713 to i8
  %1715 = and i8 %1714, 1
  %1716 = xor i8 %1715, 1
  store i8 %1716, i8* %49, align 1, !tbaa !2446
  %1717 = xor i64 %1704, %1698
  %1718 = xor i64 %1717, %1706
  %1719 = lshr i64 %1718, 4
  %1720 = trunc i64 %1719 to i8
  %1721 = and i8 %1720, 1
  store i8 %1721, i8* %55, align 1, !tbaa !2450
  %1722 = icmp eq i64 %1706, 0
  %1723 = zext i1 %1722 to i8
  store i8 %1723, i8* %58, align 1, !tbaa !2447
  %1724 = lshr i64 %1706, 63
  %1725 = trunc i64 %1724 to i8
  store i8 %1725, i8* %61, align 1, !tbaa !2448
  %1726 = lshr i64 %1698, 63
  %1727 = xor i64 %1724, %1726
  %1728 = xor i64 %1724, %1705
  %1729 = add nuw nsw i64 %1727, %1728
  %1730 = icmp eq i64 %1729, 2
  %1731 = zext i1 %1730 to i8
  store i8 %1731, i8* %67, align 1, !tbaa !2449
  %1732 = load i64, i64* %RBP, align 8
  %1733 = add i64 %1732, -192
  %1734 = add i64 %1667, 66
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to i32*
  %1736 = load i32, i32* %1735, align 4
  %1737 = sext i32 %1736 to i64
  %1738 = mul nsw i64 %1737, 520
  store i64 %1738, i64* %RCX, align 8, !tbaa !2428
  %1739 = lshr i64 %1738, 63
  %1740 = add i64 %1738, %1706
  store i64 %1740, i64* %RAX, align 8, !tbaa !2428
  %1741 = icmp ult i64 %1740, %1706
  %1742 = icmp ult i64 %1740, %1738
  %1743 = or i1 %1741, %1742
  %1744 = zext i1 %1743 to i8
  store i8 %1744, i8* %42, align 1, !tbaa !2432
  %1745 = trunc i64 %1740 to i32
  %1746 = and i32 %1745, 255
  %1747 = tail call i32 @llvm.ctpop.i32(i32 %1746) #9
  %1748 = trunc i32 %1747 to i8
  %1749 = and i8 %1748, 1
  %1750 = xor i8 %1749, 1
  store i8 %1750, i8* %49, align 1, !tbaa !2446
  %1751 = xor i64 %1738, %1706
  %1752 = xor i64 %1751, %1740
  %1753 = lshr i64 %1752, 4
  %1754 = trunc i64 %1753 to i8
  %1755 = and i8 %1754, 1
  store i8 %1755, i8* %55, align 1, !tbaa !2450
  %1756 = icmp eq i64 %1740, 0
  %1757 = zext i1 %1756 to i8
  store i8 %1757, i8* %58, align 1, !tbaa !2447
  %1758 = lshr i64 %1740, 63
  %1759 = trunc i64 %1758 to i8
  store i8 %1759, i8* %61, align 1, !tbaa !2448
  %1760 = xor i64 %1758, %1724
  %1761 = xor i64 %1758, %1739
  %1762 = add nuw nsw i64 %1760, %1761
  %1763 = icmp eq i64 %1762, 2
  %1764 = zext i1 %1763 to i8
  store i8 %1764, i8* %67, align 1, !tbaa !2449
  %1765 = add i64 %1732, -48
  %1766 = add i64 %1667, 80
  store i64 %1766, i64* %PC, align 8
  %1767 = inttoptr i64 %1765 to i32*
  %1768 = load i32, i32* %1767, align 4
  %1769 = sext i32 %1768 to i64
  store i64 %1769, i64* %RCX, align 8, !tbaa !2428
  %1770 = shl nsw i64 %1769, 3
  %1771 = add i64 %1770, %1740
  %1772 = add i64 %1667, 85
  store i64 %1772, i64* %PC, align 8
  %1773 = load double, double* %257, align 1
  %1774 = inttoptr i64 %1771 to double*
  %1775 = load double, double* %1774, align 8
  %1776 = fmul double %1773, %1775
  store double %1776, double* %257, align 1, !tbaa !2452
  %1777 = add i64 %1732, -72
  %1778 = add i64 %1667, 90
  store i64 %1778, i64* %PC, align 8
  %1779 = inttoptr i64 %1777 to i64*
  %1780 = load i64, i64* %1779, align 8
  store i64 %1780, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %1781 = add i64 %1732, -184
  %1782 = add i64 %1667, 97
  store i64 %1782, i64* %PC, align 8
  %1783 = inttoptr i64 %1781 to i64*
  %1784 = load i64, i64* %1783, align 8
  store i64 %1784, i64* %RAX, align 8, !tbaa !2428
  %1785 = add i64 %1667, 104
  store i64 %1785, i64* %PC, align 8
  %1786 = load i32, i32* %1735, align 4
  %1787 = sext i32 %1786 to i64
  store i64 %1787, i64* %RCX, align 8, !tbaa !2428
  %1788 = shl nsw i64 %1787, 3
  %1789 = add i64 %1788, %1784
  %1790 = add i64 %1667, 109
  store i64 %1790, i64* %PC, align 8
  %1791 = bitcast i64 %1780 to double
  %1792 = inttoptr i64 %1789 to double*
  %1793 = load double, double* %1792, align 8
  %1794 = fdiv double %1791, %1793
  store double %1794, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1795 = load i64, i64* %RBP, align 8
  %1796 = add i64 %1795, -96
  %1797 = add i64 %1667, 113
  store i64 %1797, i64* %PC, align 8
  %1798 = inttoptr i64 %1796 to i64*
  %1799 = load i64, i64* %1798, align 8
  store i64 %1799, i64* %RAX, align 8, !tbaa !2428
  %1800 = add i64 %1795, -188
  %1801 = add i64 %1667, 120
  store i64 %1801, i64* %PC, align 8
  %1802 = inttoptr i64 %1800 to i32*
  %1803 = load i32, i32* %1802, align 4
  %1804 = sext i32 %1803 to i64
  %1805 = mul nsw i64 %1804, 520
  store i64 %1805, i64* %RCX, align 8, !tbaa !2428
  %1806 = lshr i64 %1805, 63
  %1807 = add i64 %1805, %1799
  store i64 %1807, i64* %RAX, align 8, !tbaa !2428
  %1808 = icmp ult i64 %1807, %1799
  %1809 = icmp ult i64 %1807, %1805
  %1810 = or i1 %1808, %1809
  %1811 = zext i1 %1810 to i8
  store i8 %1811, i8* %42, align 1, !tbaa !2432
  %1812 = trunc i64 %1807 to i32
  %1813 = and i32 %1812, 255
  %1814 = tail call i32 @llvm.ctpop.i32(i32 %1813) #9
  %1815 = trunc i32 %1814 to i8
  %1816 = and i8 %1815, 1
  %1817 = xor i8 %1816, 1
  store i8 %1817, i8* %49, align 1, !tbaa !2446
  %1818 = xor i64 %1805, %1799
  %1819 = xor i64 %1818, %1807
  %1820 = lshr i64 %1819, 4
  %1821 = trunc i64 %1820 to i8
  %1822 = and i8 %1821, 1
  store i8 %1822, i8* %55, align 1, !tbaa !2450
  %1823 = icmp eq i64 %1807, 0
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %58, align 1, !tbaa !2447
  %1825 = lshr i64 %1807, 63
  %1826 = trunc i64 %1825 to i8
  store i8 %1826, i8* %61, align 1, !tbaa !2448
  %1827 = lshr i64 %1799, 63
  %1828 = xor i64 %1825, %1827
  %1829 = xor i64 %1825, %1806
  %1830 = add nuw nsw i64 %1828, %1829
  %1831 = icmp eq i64 %1830, 2
  %1832 = zext i1 %1831 to i8
  store i8 %1832, i8* %67, align 1, !tbaa !2449
  %1833 = add i64 %1795, -192
  %1834 = add i64 %1667, 137
  store i64 %1834, i64* %PC, align 8
  %1835 = inttoptr i64 %1833 to i32*
  %1836 = load i32, i32* %1835, align 4
  %1837 = sext i32 %1836 to i64
  store i64 %1837, i64* %RCX, align 8, !tbaa !2428
  %1838 = shl nsw i64 %1837, 3
  %1839 = add i64 %1838, %1807
  %1840 = add i64 %1667, 142
  store i64 %1840, i64* %PC, align 8
  %1841 = inttoptr i64 %1839 to double*
  %1842 = load double, double* %1841, align 8
  %1843 = fmul double %1794, %1842
  store double %1843, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1844 = load double, double* %257, align 1
  %1845 = fsub double %1844, %1843
  store double %1845, double* %257, align 1, !tbaa !2452
  %1846 = add i64 %1795, -104
  %1847 = add i64 %1667, 150
  store i64 %1847, i64* %PC, align 8
  %1848 = inttoptr i64 %1846 to i64*
  %1849 = load i64, i64* %1848, align 8
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RBP, align 8
  %1851 = add i64 %1850, -188
  %1852 = add i64 %1667, 157
  store i64 %1852, i64* %PC, align 8
  %1853 = inttoptr i64 %1851 to i32*
  %1854 = load i32, i32* %1853, align 4
  %1855 = sext i32 %1854 to i64
  %1856 = mul nsw i64 %1855, 520
  store i64 %1856, i64* %RCX, align 8, !tbaa !2428
  %1857 = lshr i64 %1856, 63
  %1858 = add i64 %1856, %1849
  store i64 %1858, i64* %RAX, align 8, !tbaa !2428
  %1859 = icmp ult i64 %1858, %1849
  %1860 = icmp ult i64 %1858, %1856
  %1861 = or i1 %1859, %1860
  %1862 = zext i1 %1861 to i8
  store i8 %1862, i8* %42, align 1, !tbaa !2432
  %1863 = trunc i64 %1858 to i32
  %1864 = and i32 %1863, 255
  %1865 = tail call i32 @llvm.ctpop.i32(i32 %1864) #9
  %1866 = trunc i32 %1865 to i8
  %1867 = and i8 %1866, 1
  %1868 = xor i8 %1867, 1
  store i8 %1868, i8* %49, align 1, !tbaa !2446
  %1869 = xor i64 %1856, %1849
  %1870 = xor i64 %1869, %1858
  %1871 = lshr i64 %1870, 4
  %1872 = trunc i64 %1871 to i8
  %1873 = and i8 %1872, 1
  store i8 %1873, i8* %55, align 1, !tbaa !2450
  %1874 = icmp eq i64 %1858, 0
  %1875 = zext i1 %1874 to i8
  store i8 %1875, i8* %58, align 1, !tbaa !2447
  %1876 = lshr i64 %1858, 63
  %1877 = trunc i64 %1876 to i8
  store i8 %1877, i8* %61, align 1, !tbaa !2448
  %1878 = lshr i64 %1849, 63
  %1879 = xor i64 %1876, %1878
  %1880 = xor i64 %1876, %1857
  %1881 = add nuw nsw i64 %1879, %1880
  %1882 = icmp eq i64 %1881, 2
  %1883 = zext i1 %1882 to i8
  store i8 %1883, i8* %67, align 1, !tbaa !2449
  %1884 = add i64 %1850, -192
  %1885 = add i64 %1667, 174
  store i64 %1885, i64* %PC, align 8
  %1886 = inttoptr i64 %1884 to i32*
  %1887 = load i32, i32* %1886, align 4
  %1888 = sext i32 %1887 to i64
  store i64 %1888, i64* %RCX, align 8, !tbaa !2428
  %1889 = shl nsw i64 %1888, 3
  %1890 = add i64 %1889, %1858
  %1891 = add i64 %1667, 179
  store i64 %1891, i64* %PC, align 8
  %1892 = inttoptr i64 %1890 to double*
  store double %1845, double* %1892, align 8
  %1893 = load i64, i64* %RBP, align 8
  %1894 = add i64 %1893, -160
  %1895 = load i64, i64* %PC, align 8
  %1896 = add i64 %1895, 7
  store i64 %1896, i64* %PC, align 8
  %1897 = inttoptr i64 %1894 to i64*
  %1898 = load i64, i64* %1897, align 8
  store i64 %1898, i64* %RAX, align 8, !tbaa !2428
  %1899 = add i64 %1893, -48
  %1900 = add i64 %1895, 11
  store i64 %1900, i64* %PC, align 8
  %1901 = inttoptr i64 %1899 to i32*
  %1902 = load i32, i32* %1901, align 4
  %1903 = sext i32 %1902 to i64
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1904 = shl nsw i64 %1903, 3
  %1905 = add i64 %1904, %1898
  %1906 = add i64 %1895, 16
  store i64 %1906, i64* %PC, align 8
  %1907 = inttoptr i64 %1905 to i64*
  %1908 = load i64, i64* %1907, align 8
  store i64 %1908, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1909 = add i64 %1893, -168
  %1910 = add i64 %1895, 23
  store i64 %1910, i64* %PC, align 8
  %1911 = inttoptr i64 %1909 to i64*
  %1912 = load i64, i64* %1911, align 8
  store i64 %1912, i64* %RAX, align 8, !tbaa !2428
  %1913 = add i64 %1895, 27
  store i64 %1913, i64* %PC, align 8
  %1914 = load i32, i32* %1901, align 4
  %1915 = sext i32 %1914 to i64
  store i64 %1915, i64* %RCX, align 8, !tbaa !2428
  %1916 = shl nsw i64 %1915, 3
  %1917 = add i64 %1916, %1912
  %1918 = add i64 %1895, 32
  store i64 %1918, i64* %PC, align 8
  %1919 = bitcast i64 %1908 to double
  %1920 = inttoptr i64 %1917 to double*
  %1921 = load double, double* %1920, align 8
  %1922 = fdiv double %1919, %1921
  store double %1922, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %1923 = add i64 %1893, -136
  %1924 = add i64 %1895, 39
  store i64 %1924, i64* %PC, align 8
  %1925 = inttoptr i64 %1923 to i64*
  %1926 = load i64, i64* %1925, align 8
  store i64 %1926, i64* %RAX, align 8, !tbaa !2428
  %1927 = add i64 %1893, -188
  %1928 = add i64 %1895, 46
  store i64 %1928, i64* %PC, align 8
  %1929 = inttoptr i64 %1927 to i32*
  %1930 = load i32, i32* %1929, align 4
  %1931 = sext i32 %1930 to i64
  %1932 = mul nsw i64 %1931, 33800
  store i64 %1932, i64* %RCX, align 8, !tbaa !2428
  %1933 = lshr i64 %1932, 63
  %1934 = add i64 %1932, %1926
  store i64 %1934, i64* %RAX, align 8, !tbaa !2428
  %1935 = icmp ult i64 %1934, %1926
  %1936 = icmp ult i64 %1934, %1932
  %1937 = or i1 %1935, %1936
  %1938 = zext i1 %1937 to i8
  store i8 %1938, i8* %42, align 1, !tbaa !2432
  %1939 = trunc i64 %1934 to i32
  %1940 = and i32 %1939, 255
  %1941 = tail call i32 @llvm.ctpop.i32(i32 %1940) #9
  %1942 = trunc i32 %1941 to i8
  %1943 = and i8 %1942, 1
  %1944 = xor i8 %1943, 1
  store i8 %1944, i8* %49, align 1, !tbaa !2446
  %1945 = xor i64 %1932, %1926
  %1946 = xor i64 %1945, %1934
  %1947 = lshr i64 %1946, 4
  %1948 = trunc i64 %1947 to i8
  %1949 = and i8 %1948, 1
  store i8 %1949, i8* %55, align 1, !tbaa !2450
  %1950 = icmp eq i64 %1934, 0
  %1951 = zext i1 %1950 to i8
  store i8 %1951, i8* %58, align 1, !tbaa !2447
  %1952 = lshr i64 %1934, 63
  %1953 = trunc i64 %1952 to i8
  store i8 %1953, i8* %61, align 1, !tbaa !2448
  %1954 = lshr i64 %1926, 63
  %1955 = xor i64 %1952, %1954
  %1956 = xor i64 %1952, %1933
  %1957 = add nuw nsw i64 %1955, %1956
  %1958 = icmp eq i64 %1957, 2
  %1959 = zext i1 %1958 to i8
  store i8 %1959, i8* %67, align 1, !tbaa !2449
  %1960 = load i64, i64* %RBP, align 8
  %1961 = add i64 %1960, -192
  %1962 = add i64 %1895, 63
  store i64 %1962, i64* %PC, align 8
  %1963 = inttoptr i64 %1961 to i32*
  %1964 = load i32, i32* %1963, align 4
  %1965 = sext i32 %1964 to i64
  %1966 = mul nsw i64 %1965, 520
  store i64 %1966, i64* %RCX, align 8, !tbaa !2428
  %1967 = lshr i64 %1966, 63
  %1968 = add i64 %1966, %1934
  store i64 %1968, i64* %RAX, align 8, !tbaa !2428
  %1969 = icmp ult i64 %1968, %1934
  %1970 = icmp ult i64 %1968, %1966
  %1971 = or i1 %1969, %1970
  %1972 = zext i1 %1971 to i8
  store i8 %1972, i8* %42, align 1, !tbaa !2432
  %1973 = trunc i64 %1968 to i32
  %1974 = and i32 %1973, 255
  %1975 = tail call i32 @llvm.ctpop.i32(i32 %1974) #9
  %1976 = trunc i32 %1975 to i8
  %1977 = and i8 %1976, 1
  %1978 = xor i8 %1977, 1
  store i8 %1978, i8* %49, align 1, !tbaa !2446
  %1979 = xor i64 %1966, %1934
  %1980 = xor i64 %1979, %1968
  %1981 = lshr i64 %1980, 4
  %1982 = trunc i64 %1981 to i8
  %1983 = and i8 %1982, 1
  store i8 %1983, i8* %55, align 1, !tbaa !2450
  %1984 = icmp eq i64 %1968, 0
  %1985 = zext i1 %1984 to i8
  store i8 %1985, i8* %58, align 1, !tbaa !2447
  %1986 = lshr i64 %1968, 63
  %1987 = trunc i64 %1986 to i8
  store i8 %1987, i8* %61, align 1, !tbaa !2448
  %1988 = xor i64 %1986, %1952
  %1989 = xor i64 %1986, %1967
  %1990 = add nuw nsw i64 %1988, %1989
  %1991 = icmp eq i64 %1990, 2
  %1992 = zext i1 %1991 to i8
  store i8 %1992, i8* %67, align 1, !tbaa !2449
  %1993 = add i64 %1960, -48
  %1994 = add i64 %1895, 77
  store i64 %1994, i64* %PC, align 8
  %1995 = inttoptr i64 %1993 to i32*
  %1996 = load i32, i32* %1995, align 4
  %1997 = sext i32 %1996 to i64
  store i64 %1997, i64* %RCX, align 8, !tbaa !2428
  %1998 = shl nsw i64 %1997, 3
  %1999 = add i64 %1998, %1968
  %2000 = add i64 %1895, 82
  store i64 %2000, i64* %PC, align 8
  %2001 = load double, double* %257, align 1
  %2002 = inttoptr i64 %1999 to double*
  %2003 = load double, double* %2002, align 8
  %2004 = fmul double %2001, %2003
  store double %2004, double* %257, align 1, !tbaa !2452
  %2005 = add i64 %1960, -64
  %2006 = add i64 %1895, 87
  store i64 %2006, i64* %PC, align 8
  %2007 = inttoptr i64 %2005 to i64*
  %2008 = load i64, i64* %2007, align 8
  store i64 %2008, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %2009 = add i64 %1960, -152
  %2010 = add i64 %1895, 94
  store i64 %2010, i64* %PC, align 8
  %2011 = inttoptr i64 %2009 to i64*
  %2012 = load i64, i64* %2011, align 8
  store i64 %2012, i64* %RAX, align 8, !tbaa !2428
  %2013 = add i64 %1960, -188
  %2014 = add i64 %1895, 101
  store i64 %2014, i64* %PC, align 8
  %2015 = inttoptr i64 %2013 to i32*
  %2016 = load i32, i32* %2015, align 4
  %2017 = sext i32 %2016 to i64
  store i64 %2017, i64* %RCX, align 8, !tbaa !2428
  %2018 = shl nsw i64 %2017, 3
  %2019 = add i64 %2018, %2012
  %2020 = add i64 %1895, 106
  store i64 %2020, i64* %PC, align 8
  %2021 = bitcast i64 %2008 to double
  %2022 = inttoptr i64 %2019 to double*
  %2023 = load double, double* %2022, align 8
  %2024 = fmul double %2021, %2023
  store double %2024, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, -168
  %2027 = add i64 %1895, 113
  store i64 %2027, i64* %PC, align 8
  %2028 = inttoptr i64 %2026 to i64*
  %2029 = load i64, i64* %2028, align 8
  store i64 %2029, i64* %RAX, align 8, !tbaa !2428
  %2030 = add i64 %2025, -48
  %2031 = add i64 %1895, 117
  store i64 %2031, i64* %PC, align 8
  %2032 = inttoptr i64 %2030 to i32*
  %2033 = load i32, i32* %2032, align 4
  %2034 = sext i32 %2033 to i64
  store i64 %2034, i64* %RCX, align 8, !tbaa !2428
  %2035 = shl nsw i64 %2034, 3
  %2036 = add i64 %2035, %2029
  %2037 = add i64 %1895, 122
  store i64 %2037, i64* %PC, align 8
  %2038 = inttoptr i64 %2036 to double*
  %2039 = load double, double* %2038, align 8
  %2040 = fdiv double %2024, %2039
  store double %2040, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2041 = add i64 %2025, -104
  %2042 = add i64 %1895, 126
  store i64 %2042, i64* %PC, align 8
  %2043 = inttoptr i64 %2041 to i64*
  %2044 = load i64, i64* %2043, align 8
  store i64 %2044, i64* %RAX, align 8, !tbaa !2428
  %2045 = add i64 %2025, -188
  %2046 = add i64 %1895, 133
  store i64 %2046, i64* %PC, align 8
  %2047 = inttoptr i64 %2045 to i32*
  %2048 = load i32, i32* %2047, align 4
  %2049 = sext i32 %2048 to i64
  %2050 = mul nsw i64 %2049, 520
  store i64 %2050, i64* %RCX, align 8, !tbaa !2428
  %2051 = lshr i64 %2050, 63
  %2052 = add i64 %2050, %2044
  store i64 %2052, i64* %RAX, align 8, !tbaa !2428
  %2053 = icmp ult i64 %2052, %2044
  %2054 = icmp ult i64 %2052, %2050
  %2055 = or i1 %2053, %2054
  %2056 = zext i1 %2055 to i8
  store i8 %2056, i8* %42, align 1, !tbaa !2432
  %2057 = trunc i64 %2052 to i32
  %2058 = and i32 %2057, 255
  %2059 = tail call i32 @llvm.ctpop.i32(i32 %2058) #9
  %2060 = trunc i32 %2059 to i8
  %2061 = and i8 %2060, 1
  %2062 = xor i8 %2061, 1
  store i8 %2062, i8* %49, align 1, !tbaa !2446
  %2063 = xor i64 %2050, %2044
  %2064 = xor i64 %2063, %2052
  %2065 = lshr i64 %2064, 4
  %2066 = trunc i64 %2065 to i8
  %2067 = and i8 %2066, 1
  store i8 %2067, i8* %55, align 1, !tbaa !2450
  %2068 = icmp eq i64 %2052, 0
  %2069 = zext i1 %2068 to i8
  store i8 %2069, i8* %58, align 1, !tbaa !2447
  %2070 = lshr i64 %2052, 63
  %2071 = trunc i64 %2070 to i8
  store i8 %2071, i8* %61, align 1, !tbaa !2448
  %2072 = lshr i64 %2044, 63
  %2073 = xor i64 %2070, %2072
  %2074 = xor i64 %2070, %2051
  %2075 = add nuw nsw i64 %2073, %2074
  %2076 = icmp eq i64 %2075, 2
  %2077 = zext i1 %2076 to i8
  store i8 %2077, i8* %67, align 1, !tbaa !2449
  %2078 = add i64 %2025, -192
  %2079 = add i64 %1895, 150
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i32*
  %2081 = load i32, i32* %2080, align 4
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = shl nsw i64 %2082, 3
  %2084 = add i64 %2083, %2052
  %2085 = add i64 %1895, 155
  store i64 %2085, i64* %PC, align 8
  %2086 = inttoptr i64 %2084 to double*
  %2087 = load double, double* %2086, align 8
  %2088 = fmul double %2040, %2087
  store double %2088, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2089 = load double, double* %257, align 1
  %2090 = fadd double %2089, %2088
  store double %2090, double* %257, align 1, !tbaa !2452
  %2091 = load i64, i64* %RBP, align 8
  %2092 = add i64 %2091, -64
  %2093 = add i64 %1895, 164
  store i64 %2093, i64* %PC, align 8
  %2094 = inttoptr i64 %2092 to i64*
  %2095 = load i64, i64* %2094, align 8
  store i64 %2095, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %2096 = add i64 %2091, -144
  %2097 = add i64 %1895, 171
  store i64 %2097, i64* %PC, align 8
  %2098 = inttoptr i64 %2096 to i64*
  %2099 = load i64, i64* %2098, align 8
  store i64 %2099, i64* %RAX, align 8, !tbaa !2428
  %2100 = add i64 %2091, -188
  %2101 = add i64 %1895, 178
  store i64 %2101, i64* %PC, align 8
  %2102 = inttoptr i64 %2100 to i32*
  %2103 = load i32, i32* %2102, align 4
  %2104 = sext i32 %2103 to i64
  store i64 %2104, i64* %RCX, align 8, !tbaa !2428
  %2105 = shl nsw i64 %2104, 3
  %2106 = add i64 %2105, %2099
  %2107 = add i64 %1895, 183
  store i64 %2107, i64* %PC, align 8
  %2108 = bitcast i64 %2095 to double
  %2109 = inttoptr i64 %2106 to double*
  %2110 = load double, double* %2109, align 8
  %2111 = fmul double %2108, %2110
  store double %2111, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2112 = add i64 %2091, -168
  %2113 = add i64 %1895, 190
  store i64 %2113, i64* %PC, align 8
  %2114 = inttoptr i64 %2112 to i64*
  %2115 = load i64, i64* %2114, align 8
  store i64 %2115, i64* %RAX, align 8, !tbaa !2428
  %2116 = add i64 %2091, -48
  %2117 = add i64 %1895, 194
  store i64 %2117, i64* %PC, align 8
  %2118 = inttoptr i64 %2116 to i32*
  %2119 = load i32, i32* %2118, align 4
  %2120 = sext i32 %2119 to i64
  store i64 %2120, i64* %RCX, align 8, !tbaa !2428
  %2121 = shl nsw i64 %2120, 3
  %2122 = add i64 %2121, %2115
  %2123 = add i64 %1895, 199
  store i64 %2123, i64* %PC, align 8
  %2124 = inttoptr i64 %2122 to double*
  %2125 = load double, double* %2124, align 8
  %2126 = fdiv double %2111, %2125
  store double %2126, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2127 = add i64 %2091, -112
  %2128 = add i64 %1895, 203
  store i64 %2128, i64* %PC, align 8
  %2129 = inttoptr i64 %2127 to i64*
  %2130 = load i64, i64* %2129, align 8
  store i64 %2130, i64* %RAX, align 8, !tbaa !2428
  %2131 = add i64 %1895, 210
  store i64 %2131, i64* %PC, align 8
  %2132 = load i32, i32* %2102, align 4
  %2133 = sext i32 %2132 to i64
  %2134 = mul nsw i64 %2133, 33800
  store i64 %2134, i64* %RCX, align 8, !tbaa !2428
  %2135 = lshr i64 %2134, 63
  %2136 = add i64 %2134, %2130
  store i64 %2136, i64* %RAX, align 8, !tbaa !2428
  %2137 = icmp ult i64 %2136, %2130
  %2138 = icmp ult i64 %2136, %2134
  %2139 = or i1 %2137, %2138
  %2140 = zext i1 %2139 to i8
  store i8 %2140, i8* %42, align 1, !tbaa !2432
  %2141 = trunc i64 %2136 to i32
  %2142 = and i32 %2141, 255
  %2143 = tail call i32 @llvm.ctpop.i32(i32 %2142) #9
  %2144 = trunc i32 %2143 to i8
  %2145 = and i8 %2144, 1
  %2146 = xor i8 %2145, 1
  store i8 %2146, i8* %49, align 1, !tbaa !2446
  %2147 = xor i64 %2134, %2130
  %2148 = xor i64 %2147, %2136
  %2149 = lshr i64 %2148, 4
  %2150 = trunc i64 %2149 to i8
  %2151 = and i8 %2150, 1
  store i8 %2151, i8* %55, align 1, !tbaa !2450
  %2152 = icmp eq i64 %2136, 0
  %2153 = zext i1 %2152 to i8
  store i8 %2153, i8* %58, align 1, !tbaa !2447
  %2154 = lshr i64 %2136, 63
  %2155 = trunc i64 %2154 to i8
  store i8 %2155, i8* %61, align 1, !tbaa !2448
  %2156 = lshr i64 %2130, 63
  %2157 = xor i64 %2154, %2156
  %2158 = xor i64 %2154, %2135
  %2159 = add nuw nsw i64 %2157, %2158
  %2160 = icmp eq i64 %2159, 2
  %2161 = zext i1 %2160 to i8
  store i8 %2161, i8* %67, align 1, !tbaa !2449
  %2162 = load i64, i64* %RBP, align 8
  %2163 = add i64 %2162, -192
  %2164 = add i64 %1895, 227
  store i64 %2164, i64* %PC, align 8
  %2165 = inttoptr i64 %2163 to i32*
  %2166 = load i32, i32* %2165, align 4
  %2167 = sext i32 %2166 to i64
  %2168 = mul nsw i64 %2167, 520
  store i64 %2168, i64* %RCX, align 8, !tbaa !2428
  %2169 = lshr i64 %2168, 63
  %2170 = add i64 %2168, %2136
  store i64 %2170, i64* %RAX, align 8, !tbaa !2428
  %2171 = icmp ult i64 %2170, %2136
  %2172 = icmp ult i64 %2170, %2168
  %2173 = or i1 %2171, %2172
  %2174 = zext i1 %2173 to i8
  store i8 %2174, i8* %42, align 1, !tbaa !2432
  %2175 = trunc i64 %2170 to i32
  %2176 = and i32 %2175, 255
  %2177 = tail call i32 @llvm.ctpop.i32(i32 %2176) #9
  %2178 = trunc i32 %2177 to i8
  %2179 = and i8 %2178, 1
  %2180 = xor i8 %2179, 1
  store i8 %2180, i8* %49, align 1, !tbaa !2446
  %2181 = xor i64 %2168, %2136
  %2182 = xor i64 %2181, %2170
  %2183 = lshr i64 %2182, 4
  %2184 = trunc i64 %2183 to i8
  %2185 = and i8 %2184, 1
  store i8 %2185, i8* %55, align 1, !tbaa !2450
  %2186 = icmp eq i64 %2170, 0
  %2187 = zext i1 %2186 to i8
  store i8 %2187, i8* %58, align 1, !tbaa !2447
  %2188 = lshr i64 %2170, 63
  %2189 = trunc i64 %2188 to i8
  store i8 %2189, i8* %61, align 1, !tbaa !2448
  %2190 = xor i64 %2188, %2154
  %2191 = xor i64 %2188, %2169
  %2192 = add nuw nsw i64 %2190, %2191
  %2193 = icmp eq i64 %2192, 2
  %2194 = zext i1 %2193 to i8
  store i8 %2194, i8* %67, align 1, !tbaa !2449
  %2195 = add i64 %2162, -48
  %2196 = add i64 %1895, 241
  store i64 %2196, i64* %PC, align 8
  %2197 = inttoptr i64 %2195 to i32*
  %2198 = load i32, i32* %2197, align 4
  %2199 = sext i32 %2198 to i64
  store i64 %2199, i64* %RCX, align 8, !tbaa !2428
  %2200 = shl nsw i64 %2199, 3
  %2201 = add i64 %2200, %2170
  %2202 = add i64 %1895, 246
  store i64 %2202, i64* %PC, align 8
  %2203 = load double, double* %155, align 1
  %2204 = inttoptr i64 %2201 to double*
  %2205 = load double, double* %2204, align 8
  %2206 = fmul double %2203, %2205
  store double %2206, double* %155, align 1, !tbaa !2452
  %2207 = load double, double* %257, align 1
  %2208 = fsub double %2207, %2206
  store double %2208, double* %257, align 1, !tbaa !2452
  %2209 = add i64 %2162, -136
  %2210 = add i64 %1895, 257
  store i64 %2210, i64* %PC, align 8
  %2211 = inttoptr i64 %2209 to i64*
  %2212 = load i64, i64* %2211, align 8
  store i64 %2212, i64* %RAX, align 8, !tbaa !2428
  %2213 = add i64 %2162, -188
  %2214 = add i64 %1895, 264
  store i64 %2214, i64* %PC, align 8
  %2215 = inttoptr i64 %2213 to i32*
  %2216 = load i32, i32* %2215, align 4
  %2217 = sext i32 %2216 to i64
  %2218 = mul nsw i64 %2217, 33800
  store i64 %2218, i64* %RCX, align 8, !tbaa !2428
  %2219 = lshr i64 %2218, 63
  %2220 = add i64 %2218, %2212
  store i64 %2220, i64* %RAX, align 8, !tbaa !2428
  %2221 = icmp ult i64 %2220, %2212
  %2222 = icmp ult i64 %2220, %2218
  %2223 = or i1 %2221, %2222
  %2224 = zext i1 %2223 to i8
  store i8 %2224, i8* %42, align 1, !tbaa !2432
  %2225 = trunc i64 %2220 to i32
  %2226 = and i32 %2225, 255
  %2227 = tail call i32 @llvm.ctpop.i32(i32 %2226) #9
  %2228 = trunc i32 %2227 to i8
  %2229 = and i8 %2228, 1
  %2230 = xor i8 %2229, 1
  store i8 %2230, i8* %49, align 1, !tbaa !2446
  %2231 = xor i64 %2218, %2212
  %2232 = xor i64 %2231, %2220
  %2233 = lshr i64 %2232, 4
  %2234 = trunc i64 %2233 to i8
  %2235 = and i8 %2234, 1
  store i8 %2235, i8* %55, align 1, !tbaa !2450
  %2236 = icmp eq i64 %2220, 0
  %2237 = zext i1 %2236 to i8
  store i8 %2237, i8* %58, align 1, !tbaa !2447
  %2238 = lshr i64 %2220, 63
  %2239 = trunc i64 %2238 to i8
  store i8 %2239, i8* %61, align 1, !tbaa !2448
  %2240 = lshr i64 %2212, 63
  %2241 = xor i64 %2238, %2240
  %2242 = xor i64 %2238, %2219
  %2243 = add nuw nsw i64 %2241, %2242
  %2244 = icmp eq i64 %2243, 2
  %2245 = zext i1 %2244 to i8
  store i8 %2245, i8* %67, align 1, !tbaa !2449
  %2246 = load i64, i64* %RBP, align 8
  %2247 = add i64 %2246, -192
  %2248 = add i64 %1895, 281
  store i64 %2248, i64* %PC, align 8
  %2249 = inttoptr i64 %2247 to i32*
  %2250 = load i32, i32* %2249, align 4
  %2251 = sext i32 %2250 to i64
  %2252 = mul nsw i64 %2251, 520
  store i64 %2252, i64* %RCX, align 8, !tbaa !2428
  %2253 = lshr i64 %2252, 63
  %2254 = add i64 %2252, %2220
  store i64 %2254, i64* %RAX, align 8, !tbaa !2428
  %2255 = icmp ult i64 %2254, %2220
  %2256 = icmp ult i64 %2254, %2252
  %2257 = or i1 %2255, %2256
  %2258 = zext i1 %2257 to i8
  store i8 %2258, i8* %42, align 1, !tbaa !2432
  %2259 = trunc i64 %2254 to i32
  %2260 = and i32 %2259, 255
  %2261 = tail call i32 @llvm.ctpop.i32(i32 %2260) #9
  %2262 = trunc i32 %2261 to i8
  %2263 = and i8 %2262, 1
  %2264 = xor i8 %2263, 1
  store i8 %2264, i8* %49, align 1, !tbaa !2446
  %2265 = xor i64 %2252, %2220
  %2266 = xor i64 %2265, %2254
  %2267 = lshr i64 %2266, 4
  %2268 = trunc i64 %2267 to i8
  %2269 = and i8 %2268, 1
  store i8 %2269, i8* %55, align 1, !tbaa !2450
  %2270 = icmp eq i64 %2254, 0
  %2271 = zext i1 %2270 to i8
  store i8 %2271, i8* %58, align 1, !tbaa !2447
  %2272 = lshr i64 %2254, 63
  %2273 = trunc i64 %2272 to i8
  store i8 %2273, i8* %61, align 1, !tbaa !2448
  %2274 = xor i64 %2272, %2238
  %2275 = xor i64 %2272, %2253
  %2276 = add nuw nsw i64 %2274, %2275
  %2277 = icmp eq i64 %2276, 2
  %2278 = zext i1 %2277 to i8
  store i8 %2278, i8* %67, align 1, !tbaa !2449
  %2279 = add i64 %2246, -48
  %2280 = add i64 %1895, 295
  store i64 %2280, i64* %PC, align 8
  %2281 = inttoptr i64 %2279 to i32*
  %2282 = load i32, i32* %2281, align 4
  %2283 = sext i32 %2282 to i64
  store i64 %2283, i64* %RCX, align 8, !tbaa !2428
  %2284 = shl nsw i64 %2283, 3
  %2285 = add i64 %2284, %2254
  %2286 = add i64 %1895, 300
  store i64 %2286, i64* %PC, align 8
  %2287 = load i64, i64* %148, align 1
  %2288 = inttoptr i64 %2285 to i64*
  store i64 %2287, i64* %2288, align 8
  %2289 = load i64, i64* %RBP, align 8
  %2290 = add i64 %2289, -104
  %2291 = load i64, i64* %PC, align 8
  %2292 = add i64 %2291, 4
  store i64 %2292, i64* %PC, align 8
  %2293 = inttoptr i64 %2290 to i64*
  %2294 = load i64, i64* %2293, align 8
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = add i64 %2289, -188
  %2296 = add i64 %2291, 11
  store i64 %2296, i64* %PC, align 8
  %2297 = inttoptr i64 %2295 to i32*
  %2298 = load i32, i32* %2297, align 4
  %2299 = sext i32 %2298 to i64
  %2300 = mul nsw i64 %2299, 520
  store i64 %2300, i64* %RCX, align 8, !tbaa !2428
  %2301 = lshr i64 %2300, 63
  %2302 = add i64 %2300, %2294
  store i64 %2302, i64* %RAX, align 8, !tbaa !2428
  %2303 = icmp ult i64 %2302, %2294
  %2304 = icmp ult i64 %2302, %2300
  %2305 = or i1 %2303, %2304
  %2306 = zext i1 %2305 to i8
  store i8 %2306, i8* %42, align 1, !tbaa !2432
  %2307 = trunc i64 %2302 to i32
  %2308 = and i32 %2307, 255
  %2309 = tail call i32 @llvm.ctpop.i32(i32 %2308) #9
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  store i8 %2312, i8* %49, align 1, !tbaa !2446
  %2313 = xor i64 %2300, %2294
  %2314 = xor i64 %2313, %2302
  %2315 = lshr i64 %2314, 4
  %2316 = trunc i64 %2315 to i8
  %2317 = and i8 %2316, 1
  store i8 %2317, i8* %55, align 1, !tbaa !2450
  %2318 = icmp eq i64 %2302, 0
  %2319 = zext i1 %2318 to i8
  store i8 %2319, i8* %58, align 1, !tbaa !2447
  %2320 = lshr i64 %2302, 63
  %2321 = trunc i64 %2320 to i8
  store i8 %2321, i8* %61, align 1, !tbaa !2448
  %2322 = lshr i64 %2294, 63
  %2323 = xor i64 %2320, %2322
  %2324 = xor i64 %2320, %2301
  %2325 = add nuw nsw i64 %2323, %2324
  %2326 = icmp eq i64 %2325, 2
  %2327 = zext i1 %2326 to i8
  store i8 %2327, i8* %67, align 1, !tbaa !2449
  %2328 = add i64 %2289, -192
  %2329 = add i64 %2291, 28
  store i64 %2329, i64* %PC, align 8
  %2330 = inttoptr i64 %2328 to i32*
  %2331 = load i32, i32* %2330, align 4
  %2332 = sext i32 %2331 to i64
  store i64 %2332, i64* %RCX, align 8, !tbaa !2428
  %2333 = shl nsw i64 %2332, 3
  %2334 = add i64 %2333, %2302
  %2335 = add i64 %2291, 33
  store i64 %2335, i64* %PC, align 8
  %2336 = inttoptr i64 %2334 to i64*
  %2337 = load i64, i64* %2336, align 8
  store i64 %2337, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %2338 = add i64 %2289, -112
  %2339 = add i64 %2291, 37
  store i64 %2339, i64* %PC, align 8
  %2340 = inttoptr i64 %2338 to i64*
  %2341 = load i64, i64* %2340, align 8
  store i64 %2341, i64* %RAX, align 8, !tbaa !2428
  %2342 = add i64 %2291, 44
  store i64 %2342, i64* %PC, align 8
  %2343 = load i32, i32* %2297, align 4
  %2344 = sext i32 %2343 to i64
  %2345 = mul nsw i64 %2344, 33800
  store i64 %2345, i64* %RCX, align 8, !tbaa !2428
  %2346 = lshr i64 %2345, 63
  %2347 = add i64 %2345, %2341
  store i64 %2347, i64* %RAX, align 8, !tbaa !2428
  %2348 = icmp ult i64 %2347, %2341
  %2349 = icmp ult i64 %2347, %2345
  %2350 = or i1 %2348, %2349
  %2351 = zext i1 %2350 to i8
  store i8 %2351, i8* %42, align 1, !tbaa !2432
  %2352 = trunc i64 %2347 to i32
  %2353 = and i32 %2352, 255
  %2354 = tail call i32 @llvm.ctpop.i32(i32 %2353) #9
  %2355 = trunc i32 %2354 to i8
  %2356 = and i8 %2355, 1
  %2357 = xor i8 %2356, 1
  store i8 %2357, i8* %49, align 1, !tbaa !2446
  %2358 = xor i64 %2345, %2341
  %2359 = xor i64 %2358, %2347
  %2360 = lshr i64 %2359, 4
  %2361 = trunc i64 %2360 to i8
  %2362 = and i8 %2361, 1
  store i8 %2362, i8* %55, align 1, !tbaa !2450
  %2363 = icmp eq i64 %2347, 0
  %2364 = zext i1 %2363 to i8
  store i8 %2364, i8* %58, align 1, !tbaa !2447
  %2365 = lshr i64 %2347, 63
  %2366 = trunc i64 %2365 to i8
  store i8 %2366, i8* %61, align 1, !tbaa !2448
  %2367 = lshr i64 %2341, 63
  %2368 = xor i64 %2365, %2367
  %2369 = xor i64 %2365, %2346
  %2370 = add nuw nsw i64 %2368, %2369
  %2371 = icmp eq i64 %2370, 2
  %2372 = zext i1 %2371 to i8
  store i8 %2372, i8* %67, align 1, !tbaa !2449
  %2373 = load i64, i64* %RBP, align 8
  %2374 = add i64 %2373, -192
  %2375 = add i64 %2291, 61
  store i64 %2375, i64* %PC, align 8
  %2376 = inttoptr i64 %2374 to i32*
  %2377 = load i32, i32* %2376, align 4
  %2378 = sext i32 %2377 to i64
  %2379 = mul nsw i64 %2378, 520
  store i64 %2379, i64* %RCX, align 8, !tbaa !2428
  %2380 = lshr i64 %2379, 63
  %2381 = add i64 %2379, %2347
  store i64 %2381, i64* %RAX, align 8, !tbaa !2428
  %2382 = icmp ult i64 %2381, %2347
  %2383 = icmp ult i64 %2381, %2379
  %2384 = or i1 %2382, %2383
  %2385 = zext i1 %2384 to i8
  store i8 %2385, i8* %42, align 1, !tbaa !2432
  %2386 = trunc i64 %2381 to i32
  %2387 = and i32 %2386, 255
  %2388 = tail call i32 @llvm.ctpop.i32(i32 %2387) #9
  %2389 = trunc i32 %2388 to i8
  %2390 = and i8 %2389, 1
  %2391 = xor i8 %2390, 1
  store i8 %2391, i8* %49, align 1, !tbaa !2446
  %2392 = xor i64 %2379, %2347
  %2393 = xor i64 %2392, %2381
  %2394 = lshr i64 %2393, 4
  %2395 = trunc i64 %2394 to i8
  %2396 = and i8 %2395, 1
  store i8 %2396, i8* %55, align 1, !tbaa !2450
  %2397 = icmp eq i64 %2381, 0
  %2398 = zext i1 %2397 to i8
  store i8 %2398, i8* %58, align 1, !tbaa !2447
  %2399 = lshr i64 %2381, 63
  %2400 = trunc i64 %2399 to i8
  store i8 %2400, i8* %61, align 1, !tbaa !2448
  %2401 = xor i64 %2399, %2365
  %2402 = xor i64 %2399, %2380
  %2403 = add nuw nsw i64 %2401, %2402
  %2404 = icmp eq i64 %2403, 2
  %2405 = zext i1 %2404 to i8
  store i8 %2405, i8* %67, align 1, !tbaa !2449
  %2406 = add i64 %2373, -48
  %2407 = add i64 %2291, 75
  store i64 %2407, i64* %PC, align 8
  %2408 = inttoptr i64 %2406 to i32*
  %2409 = load i32, i32* %2408, align 4
  %2410 = sext i32 %2409 to i64
  store i64 %2410, i64* %RCX, align 8, !tbaa !2428
  %2411 = shl nsw i64 %2410, 3
  %2412 = add i64 %2411, %2381
  %2413 = add i64 %2291, 80
  store i64 %2413, i64* %PC, align 8
  %2414 = load i64, i64* %148, align 1
  %2415 = inttoptr i64 %2412 to i64*
  store i64 %2414, i64* %2415, align 8
  %2416 = load i64, i64* %RBP, align 8
  %2417 = add i64 %2416, -196
  %2418 = load i64, i64* %PC, align 8
  %2419 = add i64 %2418, 10
  store i64 %2419, i64* %PC, align 8
  %2420 = inttoptr i64 %2417 to i32*
  store i32 0, i32* %2420, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_4029d0

block_402331:                                     ; preds = %block_402fe2, %block_402260
  %2421 = phi i64 [ %2488, %block_402fe2 ], [ %.pre, %block_402260 ]
  %2422 = load i64, i64* %RBP, align 8
  %2423 = add i64 %2422, -188
  %2424 = add i64 %2421, 6
  store i64 %2424, i64* %PC, align 8
  %2425 = inttoptr i64 %2423 to i32*
  %2426 = load i32, i32* %2425, align 4
  %2427 = zext i32 %2426 to i64
  store i64 %2427, i64* %RAX, align 8, !tbaa !2428
  %2428 = add i64 %2422, -44
  %2429 = add i64 %2421, 9
  store i64 %2429, i64* %PC, align 8
  %2430 = inttoptr i64 %2428 to i32*
  %2431 = load i32, i32* %2430, align 4
  %2432 = sub i32 %2426, %2431
  %2433 = icmp ult i32 %2426, %2431
  %2434 = zext i1 %2433 to i8
  store i8 %2434, i8* %42, align 1, !tbaa !2432
  %2435 = and i32 %2432, 255
  %2436 = tail call i32 @llvm.ctpop.i32(i32 %2435) #9
  %2437 = trunc i32 %2436 to i8
  %2438 = and i8 %2437, 1
  %2439 = xor i8 %2438, 1
  store i8 %2439, i8* %49, align 1, !tbaa !2446
  %2440 = xor i32 %2431, %2426
  %2441 = xor i32 %2440, %2432
  %2442 = lshr i32 %2441, 4
  %2443 = trunc i32 %2442 to i8
  %2444 = and i8 %2443, 1
  store i8 %2444, i8* %55, align 1, !tbaa !2450
  %2445 = icmp eq i32 %2432, 0
  %2446 = zext i1 %2445 to i8
  store i8 %2446, i8* %58, align 1, !tbaa !2447
  %2447 = lshr i32 %2432, 31
  %2448 = trunc i32 %2447 to i8
  store i8 %2448, i8* %61, align 1, !tbaa !2448
  %2449 = lshr i32 %2426, 31
  %2450 = lshr i32 %2431, 31
  %2451 = xor i32 %2450, %2449
  %2452 = xor i32 %2447, %2449
  %2453 = add nuw nsw i32 %2452, %2451
  %2454 = icmp eq i32 %2453, 2
  %2455 = zext i1 %2454 to i8
  store i8 %2455, i8* %67, align 1, !tbaa !2449
  %2456 = icmp ne i8 %2448, 0
  %2457 = xor i1 %2456, %2454
  %.v15 = select i1 %2457, i64 15, i64 3274
  %2458 = add i64 %2421, %.v15
  store i64 %2458, i64* %PC, align 8, !tbaa !2428
  br i1 %2457, label %block_402340, label %block_402ffb

block_402fe2:                                     ; preds = %block_40234a
  %2459 = add i64 %2490, -188
  %2460 = add i64 %2526, 11
  store i64 %2460, i64* %PC, align 8
  %2461 = inttoptr i64 %2459 to i32*
  %2462 = load i32, i32* %2461, align 4
  %2463 = add i32 %2462, 1
  %2464 = zext i32 %2463 to i64
  store i64 %2464, i64* %RAX, align 8, !tbaa !2428
  %2465 = icmp eq i32 %2462, -1
  %2466 = icmp eq i32 %2463, 0
  %2467 = or i1 %2465, %2466
  %2468 = zext i1 %2467 to i8
  store i8 %2468, i8* %42, align 1, !tbaa !2432
  %2469 = and i32 %2463, 255
  %2470 = tail call i32 @llvm.ctpop.i32(i32 %2469) #9
  %2471 = trunc i32 %2470 to i8
  %2472 = and i8 %2471, 1
  %2473 = xor i8 %2472, 1
  store i8 %2473, i8* %49, align 1, !tbaa !2446
  %2474 = xor i32 %2463, %2462
  %2475 = lshr i32 %2474, 4
  %2476 = trunc i32 %2475 to i8
  %2477 = and i8 %2476, 1
  store i8 %2477, i8* %55, align 1, !tbaa !2450
  %2478 = zext i1 %2466 to i8
  store i8 %2478, i8* %58, align 1, !tbaa !2447
  %2479 = lshr i32 %2463, 31
  %2480 = trunc i32 %2479 to i8
  store i8 %2480, i8* %61, align 1, !tbaa !2448
  %2481 = lshr i32 %2462, 31
  %2482 = xor i32 %2479, %2481
  %2483 = add nuw nsw i32 %2482, %2479
  %2484 = icmp eq i32 %2483, 2
  %2485 = zext i1 %2484 to i8
  store i8 %2485, i8* %67, align 1, !tbaa !2449
  %2486 = add i64 %2526, 20
  store i64 %2486, i64* %PC, align 8
  store i32 %2463, i32* %2461, align 4
  %2487 = load i64, i64* %PC, align 8
  %2488 = add i64 %2487, -3269
  store i64 %2488, i64* %PC, align 8, !tbaa !2428
  br label %block_402331

block_40234a:                                     ; preds = %block_402340, %block_402d02
  %2489 = phi i64 [ %.pre10, %block_402340 ], [ %4762, %block_402d02 ]
  %2490 = load i64, i64* %RBP, align 8
  %2491 = add i64 %2490, -192
  %2492 = add i64 %2489, 6
  store i64 %2492, i64* %PC, align 8
  %2493 = inttoptr i64 %2491 to i32*
  %2494 = load i32, i32* %2493, align 4
  %2495 = zext i32 %2494 to i64
  store i64 %2495, i64* %RAX, align 8, !tbaa !2428
  %2496 = add i64 %2490, -52
  %2497 = add i64 %2489, 9
  store i64 %2497, i64* %PC, align 8
  %2498 = inttoptr i64 %2496 to i32*
  %2499 = load i32, i32* %2498, align 4
  %2500 = sub i32 %2494, %2499
  %2501 = icmp ult i32 %2494, %2499
  %2502 = zext i1 %2501 to i8
  store i8 %2502, i8* %42, align 1, !tbaa !2432
  %2503 = and i32 %2500, 255
  %2504 = tail call i32 @llvm.ctpop.i32(i32 %2503) #9
  %2505 = trunc i32 %2504 to i8
  %2506 = and i8 %2505, 1
  %2507 = xor i8 %2506, 1
  store i8 %2507, i8* %49, align 1, !tbaa !2446
  %2508 = xor i32 %2499, %2494
  %2509 = xor i32 %2508, %2500
  %2510 = lshr i32 %2509, 4
  %2511 = trunc i32 %2510 to i8
  %2512 = and i8 %2511, 1
  store i8 %2512, i8* %55, align 1, !tbaa !2450
  %2513 = icmp eq i32 %2500, 0
  %2514 = zext i1 %2513 to i8
  store i8 %2514, i8* %58, align 1, !tbaa !2447
  %2515 = lshr i32 %2500, 31
  %2516 = trunc i32 %2515 to i8
  store i8 %2516, i8* %61, align 1, !tbaa !2448
  %2517 = lshr i32 %2494, 31
  %2518 = lshr i32 %2499, 31
  %2519 = xor i32 %2518, %2517
  %2520 = xor i32 %2515, %2517
  %2521 = add nuw nsw i32 %2520, %2519
  %2522 = icmp eq i32 %2521, 2
  %2523 = zext i1 %2522 to i8
  store i8 %2523, i8* %67, align 1, !tbaa !2449
  %2524 = icmp ne i8 %2516, 0
  %2525 = xor i1 %2524, %2522
  %.v = select i1 %2525, i64 15, i64 3224
  %2526 = add i64 %2489, %.v
  store i64 %2526, i64* %PC, align 8, !tbaa !2428
  br i1 %2525, label %block_402359, label %block_402fe2

block_402363:                                     ; preds = %block_402372, %block_402359
  %2527 = phi i64 [ %3746, %block_402372 ], [ %.pre11, %block_402359 ]
  %2528 = load i64, i64* %RBP, align 8
  %2529 = add i64 %2528, -196
  %2530 = add i64 %2527, 6
  store i64 %2530, i64* %PC, align 8
  %2531 = inttoptr i64 %2529 to i32*
  %2532 = load i32, i32* %2531, align 4
  %2533 = zext i32 %2532 to i64
  store i64 %2533, i64* %RAX, align 8, !tbaa !2428
  %2534 = add i64 %2528, -48
  %2535 = add i64 %2527, 9
  store i64 %2535, i64* %PC, align 8
  %2536 = inttoptr i64 %2534 to i32*
  %2537 = load i32, i32* %2536, align 4
  %2538 = sub i32 %2532, %2537
  %2539 = icmp ult i32 %2532, %2537
  %2540 = zext i1 %2539 to i8
  store i8 %2540, i8* %42, align 1, !tbaa !2432
  %2541 = and i32 %2538, 255
  %2542 = tail call i32 @llvm.ctpop.i32(i32 %2541) #9
  %2543 = trunc i32 %2542 to i8
  %2544 = and i8 %2543, 1
  %2545 = xor i8 %2544, 1
  store i8 %2545, i8* %49, align 1, !tbaa !2446
  %2546 = xor i32 %2537, %2532
  %2547 = xor i32 %2546, %2538
  %2548 = lshr i32 %2547, 4
  %2549 = trunc i32 %2548 to i8
  %2550 = and i8 %2549, 1
  store i8 %2550, i8* %55, align 1, !tbaa !2450
  %2551 = icmp eq i32 %2538, 0
  %2552 = zext i1 %2551 to i8
  store i8 %2552, i8* %58, align 1, !tbaa !2447
  %2553 = lshr i32 %2538, 31
  %2554 = trunc i32 %2553 to i8
  store i8 %2554, i8* %61, align 1, !tbaa !2448
  %2555 = lshr i32 %2532, 31
  %2556 = lshr i32 %2537, 31
  %2557 = xor i32 %2556, %2555
  %2558 = xor i32 %2553, %2555
  %2559 = add nuw nsw i32 %2558, %2557
  %2560 = icmp eq i32 %2559, 2
  %2561 = zext i1 %2560 to i8
  store i8 %2561, i8* %67, align 1, !tbaa !2449
  %2562 = icmp ne i8 %2554, 0
  %2563 = xor i1 %2562, %2560
  %.v13 = select i1 %2563, i64 15, i64 864
  %2564 = add i64 %2527, %.v13
  %2565 = add i64 %2528, -120
  %2566 = add i64 %2564, 4
  store i64 %2566, i64* %PC, align 8
  %2567 = inttoptr i64 %2565 to i64*
  %2568 = load i64, i64* %2567, align 8
  store i64 %2568, i64* %RAX, align 8, !tbaa !2428
  %2569 = add i64 %2528, -188
  %2570 = add i64 %2564, 11
  store i64 %2570, i64* %PC, align 8
  %2571 = inttoptr i64 %2569 to i32*
  %2572 = load i32, i32* %2571, align 4
  %2573 = sext i32 %2572 to i64
  %2574 = mul nsw i64 %2573, 33800
  store i64 %2574, i64* %RCX, align 8, !tbaa !2428
  %2575 = lshr i64 %2574, 63
  %2576 = add i64 %2574, %2568
  store i64 %2576, i64* %RAX, align 8, !tbaa !2428
  %2577 = icmp ult i64 %2576, %2568
  %2578 = icmp ult i64 %2576, %2574
  %2579 = or i1 %2577, %2578
  %2580 = zext i1 %2579 to i8
  store i8 %2580, i8* %42, align 1, !tbaa !2432
  %2581 = trunc i64 %2576 to i32
  %2582 = and i32 %2581, 255
  %2583 = tail call i32 @llvm.ctpop.i32(i32 %2582) #9
  %2584 = trunc i32 %2583 to i8
  %2585 = and i8 %2584, 1
  %2586 = xor i8 %2585, 1
  store i8 %2586, i8* %49, align 1, !tbaa !2446
  %2587 = xor i64 %2574, %2568
  %2588 = xor i64 %2587, %2576
  %2589 = lshr i64 %2588, 4
  %2590 = trunc i64 %2589 to i8
  %2591 = and i8 %2590, 1
  store i8 %2591, i8* %55, align 1, !tbaa !2450
  %2592 = icmp eq i64 %2576, 0
  %2593 = zext i1 %2592 to i8
  store i8 %2593, i8* %58, align 1, !tbaa !2447
  %2594 = lshr i64 %2576, 63
  %2595 = trunc i64 %2594 to i8
  store i8 %2595, i8* %61, align 1, !tbaa !2448
  %2596 = lshr i64 %2568, 63
  %2597 = xor i64 %2594, %2596
  %2598 = xor i64 %2594, %2575
  %2599 = add nuw nsw i64 %2597, %2598
  %2600 = icmp eq i64 %2599, 2
  %2601 = zext i1 %2600 to i8
  store i8 %2601, i8* %67, align 1, !tbaa !2449
  %2602 = load i64, i64* %RBP, align 8
  %2603 = add i64 %2602, -192
  %2604 = add i64 %2564, 28
  store i64 %2604, i64* %PC, align 8
  %2605 = inttoptr i64 %2603 to i32*
  %2606 = load i32, i32* %2605, align 4
  %2607 = sext i32 %2606 to i64
  %2608 = mul nsw i64 %2607, 520
  store i64 %2608, i64* %RCX, align 8, !tbaa !2428
  %2609 = lshr i64 %2608, 63
  %2610 = add i64 %2564, 38
  store i64 %2610, i64* %PC, align 8
  %2611 = add i64 %2608, %2576
  store i64 %2611, i64* %RAX, align 8, !tbaa !2428
  %2612 = icmp ult i64 %2611, %2576
  %2613 = icmp ult i64 %2611, %2608
  %2614 = or i1 %2612, %2613
  %2615 = zext i1 %2614 to i8
  store i8 %2615, i8* %42, align 1, !tbaa !2432
  %2616 = trunc i64 %2611 to i32
  %2617 = and i32 %2616, 255
  %2618 = tail call i32 @llvm.ctpop.i32(i32 %2617) #9
  %2619 = trunc i32 %2618 to i8
  %2620 = and i8 %2619, 1
  %2621 = xor i8 %2620, 1
  store i8 %2621, i8* %49, align 1, !tbaa !2446
  %2622 = xor i64 %2608, %2576
  %2623 = xor i64 %2622, %2611
  %2624 = lshr i64 %2623, 4
  %2625 = trunc i64 %2624 to i8
  %2626 = and i8 %2625, 1
  store i8 %2626, i8* %55, align 1, !tbaa !2450
  %2627 = icmp eq i64 %2611, 0
  %2628 = zext i1 %2627 to i8
  store i8 %2628, i8* %58, align 1, !tbaa !2447
  %2629 = lshr i64 %2611, 63
  %2630 = trunc i64 %2629 to i8
  store i8 %2630, i8* %61, align 1, !tbaa !2448
  %2631 = xor i64 %2629, %2594
  %2632 = xor i64 %2629, %2609
  %2633 = add nuw nsw i64 %2631, %2632
  %2634 = icmp eq i64 %2633, 2
  %2635 = zext i1 %2634 to i8
  store i8 %2635, i8* %67, align 1, !tbaa !2449
  br i1 %2563, label %block_402372, label %block_4026c3

block_402372:                                     ; preds = %block_402363
  %2636 = add i64 %2602, -196
  %2637 = add i64 %2564, 45
  store i64 %2637, i64* %PC, align 8
  %2638 = inttoptr i64 %2636 to i32*
  %2639 = load i32, i32* %2638, align 4
  %2640 = sext i32 %2639 to i64
  store i64 %2640, i64* %RCX, align 8, !tbaa !2428
  %2641 = shl nsw i64 %2640, 3
  %2642 = add i64 %2641, %2611
  %2643 = add i64 %2564, 50
  store i64 %2643, i64* %PC, align 8
  %2644 = inttoptr i64 %2642 to i64*
  %2645 = load i64, i64* %2644, align 8
  store i64 %2645, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %2646 = add i64 %2602, -120
  %2647 = add i64 %2564, 54
  store i64 %2647, i64* %PC, align 8
  %2648 = inttoptr i64 %2646 to i64*
  %2649 = load i64, i64* %2648, align 8
  store i64 %2649, i64* %RAX, align 8, !tbaa !2428
  %2650 = add i64 %2602, -188
  %2651 = add i64 %2564, 61
  store i64 %2651, i64* %PC, align 8
  %2652 = inttoptr i64 %2650 to i32*
  %2653 = load i32, i32* %2652, align 4
  %2654 = sext i32 %2653 to i64
  %2655 = mul nsw i64 %2654, 33800
  store i64 %2655, i64* %RCX, align 8, !tbaa !2428
  %2656 = lshr i64 %2655, 63
  %2657 = add i64 %2655, %2649
  store i64 %2657, i64* %RAX, align 8, !tbaa !2428
  %2658 = icmp ult i64 %2657, %2649
  %2659 = icmp ult i64 %2657, %2655
  %2660 = or i1 %2658, %2659
  %2661 = zext i1 %2660 to i8
  store i8 %2661, i8* %42, align 1, !tbaa !2432
  %2662 = trunc i64 %2657 to i32
  %2663 = and i32 %2662, 255
  %2664 = tail call i32 @llvm.ctpop.i32(i32 %2663) #9
  %2665 = trunc i32 %2664 to i8
  %2666 = and i8 %2665, 1
  %2667 = xor i8 %2666, 1
  store i8 %2667, i8* %49, align 1, !tbaa !2446
  %2668 = xor i64 %2655, %2649
  %2669 = xor i64 %2668, %2657
  %2670 = lshr i64 %2669, 4
  %2671 = trunc i64 %2670 to i8
  %2672 = and i8 %2671, 1
  store i8 %2672, i8* %55, align 1, !tbaa !2450
  %2673 = icmp eq i64 %2657, 0
  %2674 = zext i1 %2673 to i8
  store i8 %2674, i8* %58, align 1, !tbaa !2447
  %2675 = lshr i64 %2657, 63
  %2676 = trunc i64 %2675 to i8
  store i8 %2676, i8* %61, align 1, !tbaa !2448
  %2677 = lshr i64 %2649, 63
  %2678 = xor i64 %2675, %2677
  %2679 = xor i64 %2675, %2656
  %2680 = add nuw nsw i64 %2678, %2679
  %2681 = icmp eq i64 %2680, 2
  %2682 = zext i1 %2681 to i8
  store i8 %2682, i8* %67, align 1, !tbaa !2449
  %2683 = add i64 %2564, 77
  store i64 %2683, i64* %PC, align 8
  %2684 = load i32, i32* %2605, align 4
  %2685 = add i32 %2684, 1
  %2686 = zext i32 %2685 to i64
  store i64 %2686, i64* %RDX, align 8, !tbaa !2428
  %2687 = sext i32 %2685 to i64
  %2688 = mul nsw i64 %2687, 520
  store i64 %2688, i64* %RCX, align 8, !tbaa !2428
  %2689 = lshr i64 %2688, 63
  %2690 = load i64, i64* %RAX, align 8
  %2691 = add i64 %2688, %2690
  store i64 %2691, i64* %RAX, align 8, !tbaa !2428
  %2692 = icmp ult i64 %2691, %2690
  %2693 = icmp ult i64 %2691, %2688
  %2694 = or i1 %2692, %2693
  %2695 = zext i1 %2694 to i8
  store i8 %2695, i8* %42, align 1, !tbaa !2432
  %2696 = trunc i64 %2691 to i32
  %2697 = and i32 %2696, 255
  %2698 = tail call i32 @llvm.ctpop.i32(i32 %2697) #9
  %2699 = trunc i32 %2698 to i8
  %2700 = and i8 %2699, 1
  %2701 = xor i8 %2700, 1
  store i8 %2701, i8* %49, align 1, !tbaa !2446
  %2702 = xor i64 %2688, %2690
  %2703 = xor i64 %2702, %2691
  %2704 = lshr i64 %2703, 4
  %2705 = trunc i64 %2704 to i8
  %2706 = and i8 %2705, 1
  store i8 %2706, i8* %55, align 1, !tbaa !2450
  %2707 = icmp eq i64 %2691, 0
  %2708 = zext i1 %2707 to i8
  store i8 %2708, i8* %58, align 1, !tbaa !2447
  %2709 = lshr i64 %2691, 63
  %2710 = trunc i64 %2709 to i8
  store i8 %2710, i8* %61, align 1, !tbaa !2448
  %2711 = lshr i64 %2690, 63
  %2712 = xor i64 %2709, %2711
  %2713 = xor i64 %2709, %2689
  %2714 = add nuw nsw i64 %2712, %2713
  %2715 = icmp eq i64 %2714, 2
  %2716 = zext i1 %2715 to i8
  store i8 %2716, i8* %67, align 1, !tbaa !2449
  %2717 = load i64, i64* %RBP, align 8
  %2718 = add i64 %2717, -196
  %2719 = add i64 %2564, 100
  store i64 %2719, i64* %PC, align 8
  %2720 = inttoptr i64 %2718 to i32*
  %2721 = load i32, i32* %2720, align 4
  %2722 = sext i32 %2721 to i64
  store i64 %2722, i64* %RCX, align 8, !tbaa !2428
  %2723 = shl nsw i64 %2722, 3
  %2724 = add i64 %2723, %2691
  %2725 = add i64 %2564, 105
  store i64 %2725, i64* %PC, align 8
  %2726 = load double, double* %257, align 1
  %2727 = inttoptr i64 %2724 to double*
  %2728 = load double, double* %2727, align 8
  %2729 = fsub double %2726, %2728
  store double %2729, double* %257, align 1, !tbaa !2452
  %2730 = add i64 %2717, -128
  %2731 = add i64 %2564, 109
  store i64 %2731, i64* %PC, align 8
  %2732 = inttoptr i64 %2730 to i64*
  %2733 = load i64, i64* %2732, align 8
  store i64 %2733, i64* %RAX, align 8, !tbaa !2428
  %2734 = add i64 %2717, -188
  %2735 = add i64 %2564, 116
  store i64 %2735, i64* %PC, align 8
  %2736 = inttoptr i64 %2734 to i32*
  %2737 = load i32, i32* %2736, align 4
  %2738 = sext i32 %2737 to i64
  %2739 = mul nsw i64 %2738, 33800
  store i64 %2739, i64* %RCX, align 8, !tbaa !2428
  %2740 = lshr i64 %2739, 63
  %2741 = add i64 %2739, %2733
  store i64 %2741, i64* %RAX, align 8, !tbaa !2428
  %2742 = icmp ult i64 %2741, %2733
  %2743 = icmp ult i64 %2741, %2739
  %2744 = or i1 %2742, %2743
  %2745 = zext i1 %2744 to i8
  store i8 %2745, i8* %42, align 1, !tbaa !2432
  %2746 = trunc i64 %2741 to i32
  %2747 = and i32 %2746, 255
  %2748 = tail call i32 @llvm.ctpop.i32(i32 %2747) #9
  %2749 = trunc i32 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = xor i8 %2750, 1
  store i8 %2751, i8* %49, align 1, !tbaa !2446
  %2752 = xor i64 %2739, %2733
  %2753 = xor i64 %2752, %2741
  %2754 = lshr i64 %2753, 4
  %2755 = trunc i64 %2754 to i8
  %2756 = and i8 %2755, 1
  store i8 %2756, i8* %55, align 1, !tbaa !2450
  %2757 = icmp eq i64 %2741, 0
  %2758 = zext i1 %2757 to i8
  store i8 %2758, i8* %58, align 1, !tbaa !2447
  %2759 = lshr i64 %2741, 63
  %2760 = trunc i64 %2759 to i8
  store i8 %2760, i8* %61, align 1, !tbaa !2448
  %2761 = lshr i64 %2733, 63
  %2762 = xor i64 %2759, %2761
  %2763 = xor i64 %2759, %2740
  %2764 = add nuw nsw i64 %2762, %2763
  %2765 = icmp eq i64 %2764, 2
  %2766 = zext i1 %2765 to i8
  store i8 %2766, i8* %67, align 1, !tbaa !2449
  %2767 = add i64 %2717, -192
  %2768 = add i64 %2564, 133
  store i64 %2768, i64* %PC, align 8
  %2769 = inttoptr i64 %2767 to i32*
  %2770 = load i32, i32* %2769, align 4
  %2771 = sext i32 %2770 to i64
  %2772 = mul nsw i64 %2771, 520
  store i64 %2772, i64* %RCX, align 8, !tbaa !2428
  %2773 = lshr i64 %2772, 63
  %2774 = add i64 %2772, %2741
  store i64 %2774, i64* %RAX, align 8, !tbaa !2428
  %2775 = icmp ult i64 %2774, %2741
  %2776 = icmp ult i64 %2774, %2772
  %2777 = or i1 %2775, %2776
  %2778 = zext i1 %2777 to i8
  store i8 %2778, i8* %42, align 1, !tbaa !2432
  %2779 = trunc i64 %2774 to i32
  %2780 = and i32 %2779, 255
  %2781 = tail call i32 @llvm.ctpop.i32(i32 %2780) #9
  %2782 = trunc i32 %2781 to i8
  %2783 = and i8 %2782, 1
  %2784 = xor i8 %2783, 1
  store i8 %2784, i8* %49, align 1, !tbaa !2446
  %2785 = xor i64 %2772, %2741
  %2786 = xor i64 %2785, %2774
  %2787 = lshr i64 %2786, 4
  %2788 = trunc i64 %2787 to i8
  %2789 = and i8 %2788, 1
  store i8 %2789, i8* %55, align 1, !tbaa !2450
  %2790 = icmp eq i64 %2774, 0
  %2791 = zext i1 %2790 to i8
  store i8 %2791, i8* %58, align 1, !tbaa !2447
  %2792 = lshr i64 %2774, 63
  %2793 = trunc i64 %2792 to i8
  store i8 %2793, i8* %61, align 1, !tbaa !2448
  %2794 = xor i64 %2792, %2759
  %2795 = xor i64 %2792, %2773
  %2796 = add nuw nsw i64 %2794, %2795
  %2797 = icmp eq i64 %2796, 2
  %2798 = zext i1 %2797 to i8
  store i8 %2798, i8* %67, align 1, !tbaa !2449
  %2799 = load i64, i64* %RBP, align 8
  %2800 = add i64 %2799, -196
  %2801 = add i64 %2564, 149
  store i64 %2801, i64* %PC, align 8
  %2802 = inttoptr i64 %2800 to i32*
  %2803 = load i32, i32* %2802, align 4
  %2804 = add i32 %2803, 1
  %2805 = zext i32 %2804 to i64
  store i64 %2805, i64* %RDX, align 8, !tbaa !2428
  %2806 = icmp eq i32 %2803, -1
  %2807 = icmp eq i32 %2804, 0
  %2808 = or i1 %2806, %2807
  %2809 = zext i1 %2808 to i8
  store i8 %2809, i8* %42, align 1, !tbaa !2432
  %2810 = and i32 %2804, 255
  %2811 = tail call i32 @llvm.ctpop.i32(i32 %2810) #9
  %2812 = trunc i32 %2811 to i8
  %2813 = and i8 %2812, 1
  %2814 = xor i8 %2813, 1
  store i8 %2814, i8* %49, align 1, !tbaa !2446
  %2815 = xor i32 %2804, %2803
  %2816 = lshr i32 %2815, 4
  %2817 = trunc i32 %2816 to i8
  %2818 = and i8 %2817, 1
  store i8 %2818, i8* %55, align 1, !tbaa !2450
  %2819 = zext i1 %2807 to i8
  store i8 %2819, i8* %58, align 1, !tbaa !2447
  %2820 = lshr i32 %2804, 31
  %2821 = trunc i32 %2820 to i8
  store i8 %2821, i8* %61, align 1, !tbaa !2448
  %2822 = lshr i32 %2803, 31
  %2823 = xor i32 %2820, %2822
  %2824 = add nuw nsw i32 %2823, %2820
  %2825 = icmp eq i32 %2824, 2
  %2826 = zext i1 %2825 to i8
  store i8 %2826, i8* %67, align 1, !tbaa !2449
  %2827 = sext i32 %2804 to i64
  store i64 %2827, i64* %RCX, align 8, !tbaa !2428
  %2828 = shl nsw i64 %2827, 3
  %2829 = add i64 %2774, %2828
  %2830 = add i64 %2564, 160
  store i64 %2830, i64* %PC, align 8
  %2831 = load double, double* %257, align 1
  %2832 = inttoptr i64 %2829 to double*
  %2833 = load double, double* %2832, align 8
  %2834 = fadd double %2831, %2833
  store double %2834, double* %257, align 1, !tbaa !2452
  %2835 = add i64 %2799, -128
  %2836 = add i64 %2564, 164
  store i64 %2836, i64* %PC, align 8
  %2837 = inttoptr i64 %2835 to i64*
  %2838 = load i64, i64* %2837, align 8
  store i64 %2838, i64* %RAX, align 8, !tbaa !2428
  %2839 = add i64 %2799, -188
  %2840 = add i64 %2564, 171
  store i64 %2840, i64* %PC, align 8
  %2841 = inttoptr i64 %2839 to i32*
  %2842 = load i32, i32* %2841, align 4
  %2843 = sext i32 %2842 to i64
  %2844 = mul nsw i64 %2843, 33800
  store i64 %2844, i64* %RCX, align 8, !tbaa !2428
  %2845 = lshr i64 %2844, 63
  %2846 = add i64 %2844, %2838
  store i64 %2846, i64* %RAX, align 8, !tbaa !2428
  %2847 = icmp ult i64 %2846, %2838
  %2848 = icmp ult i64 %2846, %2844
  %2849 = or i1 %2847, %2848
  %2850 = zext i1 %2849 to i8
  store i8 %2850, i8* %42, align 1, !tbaa !2432
  %2851 = trunc i64 %2846 to i32
  %2852 = and i32 %2851, 255
  %2853 = tail call i32 @llvm.ctpop.i32(i32 %2852) #9
  %2854 = trunc i32 %2853 to i8
  %2855 = and i8 %2854, 1
  %2856 = xor i8 %2855, 1
  store i8 %2856, i8* %49, align 1, !tbaa !2446
  %2857 = xor i64 %2844, %2838
  %2858 = xor i64 %2857, %2846
  %2859 = lshr i64 %2858, 4
  %2860 = trunc i64 %2859 to i8
  %2861 = and i8 %2860, 1
  store i8 %2861, i8* %55, align 1, !tbaa !2450
  %2862 = icmp eq i64 %2846, 0
  %2863 = zext i1 %2862 to i8
  store i8 %2863, i8* %58, align 1, !tbaa !2447
  %2864 = lshr i64 %2846, 63
  %2865 = trunc i64 %2864 to i8
  store i8 %2865, i8* %61, align 1, !tbaa !2448
  %2866 = lshr i64 %2838, 63
  %2867 = xor i64 %2864, %2866
  %2868 = xor i64 %2864, %2845
  %2869 = add nuw nsw i64 %2867, %2868
  %2870 = icmp eq i64 %2869, 2
  %2871 = zext i1 %2870 to i8
  store i8 %2871, i8* %67, align 1, !tbaa !2449
  %2872 = load i64, i64* %RBP, align 8
  %2873 = add i64 %2872, -192
  %2874 = add i64 %2564, 188
  store i64 %2874, i64* %PC, align 8
  %2875 = inttoptr i64 %2873 to i32*
  %2876 = load i32, i32* %2875, align 4
  %2877 = sext i32 %2876 to i64
  %2878 = mul nsw i64 %2877, 520
  store i64 %2878, i64* %RCX, align 8, !tbaa !2428
  %2879 = lshr i64 %2878, 63
  %2880 = add i64 %2878, %2846
  store i64 %2880, i64* %RAX, align 8, !tbaa !2428
  %2881 = icmp ult i64 %2880, %2846
  %2882 = icmp ult i64 %2880, %2878
  %2883 = or i1 %2881, %2882
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %42, align 1, !tbaa !2432
  %2885 = trunc i64 %2880 to i32
  %2886 = and i32 %2885, 255
  %2887 = tail call i32 @llvm.ctpop.i32(i32 %2886) #9
  %2888 = trunc i32 %2887 to i8
  %2889 = and i8 %2888, 1
  %2890 = xor i8 %2889, 1
  store i8 %2890, i8* %49, align 1, !tbaa !2446
  %2891 = xor i64 %2878, %2846
  %2892 = xor i64 %2891, %2880
  %2893 = lshr i64 %2892, 4
  %2894 = trunc i64 %2893 to i8
  %2895 = and i8 %2894, 1
  store i8 %2895, i8* %55, align 1, !tbaa !2450
  %2896 = icmp eq i64 %2880, 0
  %2897 = zext i1 %2896 to i8
  store i8 %2897, i8* %58, align 1, !tbaa !2447
  %2898 = lshr i64 %2880, 63
  %2899 = trunc i64 %2898 to i8
  store i8 %2899, i8* %61, align 1, !tbaa !2448
  %2900 = xor i64 %2898, %2864
  %2901 = xor i64 %2898, %2879
  %2902 = add nuw nsw i64 %2900, %2901
  %2903 = icmp eq i64 %2902, 2
  %2904 = zext i1 %2903 to i8
  store i8 %2904, i8* %67, align 1, !tbaa !2449
  %2905 = add i64 %2872, -196
  %2906 = add i64 %2564, 205
  store i64 %2906, i64* %PC, align 8
  %2907 = inttoptr i64 %2905 to i32*
  %2908 = load i32, i32* %2907, align 4
  %2909 = sext i32 %2908 to i64
  store i64 %2909, i64* %RCX, align 8, !tbaa !2428
  %2910 = shl nsw i64 %2909, 3
  %2911 = add i64 %2910, %2880
  %2912 = add i64 %2564, 210
  store i64 %2912, i64* %PC, align 8
  %2913 = load double, double* %257, align 1
  %2914 = inttoptr i64 %2911 to double*
  %2915 = load double, double* %2914, align 8
  %2916 = fsub double %2913, %2915
  store double %2916, double* %257, align 1, !tbaa !2452
  %2917 = add i64 %2872, -96
  %2918 = add i64 %2564, 214
  store i64 %2918, i64* %PC, align 8
  %2919 = inttoptr i64 %2917 to i64*
  %2920 = load i64, i64* %2919, align 8
  store i64 %2920, i64* %RAX, align 8, !tbaa !2428
  %2921 = add i64 %2872, -188
  %2922 = add i64 %2564, 221
  store i64 %2922, i64* %PC, align 8
  %2923 = inttoptr i64 %2921 to i32*
  %2924 = load i32, i32* %2923, align 4
  %2925 = sext i32 %2924 to i64
  %2926 = mul nsw i64 %2925, 520
  store i64 %2926, i64* %RCX, align 8, !tbaa !2428
  %2927 = lshr i64 %2926, 63
  %2928 = add i64 %2926, %2920
  store i64 %2928, i64* %RAX, align 8, !tbaa !2428
  %2929 = icmp ult i64 %2928, %2920
  %2930 = icmp ult i64 %2928, %2926
  %2931 = or i1 %2929, %2930
  %2932 = zext i1 %2931 to i8
  store i8 %2932, i8* %42, align 1, !tbaa !2432
  %2933 = trunc i64 %2928 to i32
  %2934 = and i32 %2933, 255
  %2935 = tail call i32 @llvm.ctpop.i32(i32 %2934) #9
  %2936 = trunc i32 %2935 to i8
  %2937 = and i8 %2936, 1
  %2938 = xor i8 %2937, 1
  store i8 %2938, i8* %49, align 1, !tbaa !2446
  %2939 = xor i64 %2926, %2920
  %2940 = xor i64 %2939, %2928
  %2941 = lshr i64 %2940, 4
  %2942 = trunc i64 %2941 to i8
  %2943 = and i8 %2942, 1
  store i8 %2943, i8* %55, align 1, !tbaa !2450
  %2944 = icmp eq i64 %2928, 0
  %2945 = zext i1 %2944 to i8
  store i8 %2945, i8* %58, align 1, !tbaa !2447
  %2946 = lshr i64 %2928, 63
  %2947 = trunc i64 %2946 to i8
  store i8 %2947, i8* %61, align 1, !tbaa !2448
  %2948 = lshr i64 %2920, 63
  %2949 = xor i64 %2946, %2948
  %2950 = xor i64 %2946, %2927
  %2951 = add nuw nsw i64 %2949, %2950
  %2952 = icmp eq i64 %2951, 2
  %2953 = zext i1 %2952 to i8
  store i8 %2953, i8* %67, align 1, !tbaa !2449
  %2954 = load i64, i64* %RBP, align 8
  %2955 = add i64 %2954, -192
  %2956 = add i64 %2564, 238
  store i64 %2956, i64* %PC, align 8
  %2957 = inttoptr i64 %2955 to i32*
  %2958 = load i32, i32* %2957, align 4
  %2959 = sext i32 %2958 to i64
  store i64 %2959, i64* %RCX, align 8, !tbaa !2428
  %2960 = shl nsw i64 %2959, 3
  %2961 = add i64 %2960, %2928
  %2962 = add i64 %2564, 243
  store i64 %2962, i64* %PC, align 8
  %2963 = inttoptr i64 %2961 to double*
  store double %2916, double* %2963, align 8
  %2964 = load i64, i64* %RBP, align 8
  %2965 = add i64 %2964, -176
  %2966 = load i64, i64* %PC, align 8
  %2967 = add i64 %2966, 7
  store i64 %2967, i64* %PC, align 8
  %2968 = inttoptr i64 %2965 to i64*
  %2969 = load i64, i64* %2968, align 8
  store i64 %2969, i64* %RAX, align 8, !tbaa !2428
  %2970 = add i64 %2964, -192
  %2971 = add i64 %2966, 14
  store i64 %2971, i64* %PC, align 8
  %2972 = inttoptr i64 %2970 to i32*
  %2973 = load i32, i32* %2972, align 4
  %2974 = sext i32 %2973 to i64
  store i64 %2974, i64* %RCX, align 8, !tbaa !2428
  %2975 = shl nsw i64 %2974, 3
  %2976 = add i64 %2975, %2969
  %2977 = add i64 %2966, 19
  store i64 %2977, i64* %PC, align 8
  %2978 = inttoptr i64 %2976 to i64*
  %2979 = load i64, i64* %2978, align 8
  store i64 %2979, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %2980 = add i64 %2964, -184
  %2981 = add i64 %2966, 26
  store i64 %2981, i64* %PC, align 8
  %2982 = inttoptr i64 %2980 to i64*
  %2983 = load i64, i64* %2982, align 8
  store i64 %2983, i64* %RAX, align 8, !tbaa !2428
  %2984 = add i64 %2966, 33
  store i64 %2984, i64* %PC, align 8
  %2985 = load i32, i32* %2972, align 4
  %2986 = sext i32 %2985 to i64
  store i64 %2986, i64* %RCX, align 8, !tbaa !2428
  %2987 = shl nsw i64 %2986, 3
  %2988 = add i64 %2987, %2983
  %2989 = add i64 %2966, 38
  store i64 %2989, i64* %PC, align 8
  %2990 = bitcast i64 %2979 to double
  %2991 = inttoptr i64 %2988 to double*
  %2992 = load double, double* %2991, align 8
  %2993 = fdiv double %2990, %2992
  store double %2993, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %2994 = add i64 %2964, -112
  %2995 = add i64 %2966, 42
  store i64 %2995, i64* %PC, align 8
  %2996 = inttoptr i64 %2994 to i64*
  %2997 = load i64, i64* %2996, align 8
  store i64 %2997, i64* %RAX, align 8, !tbaa !2428
  %2998 = add i64 %2964, -188
  %2999 = add i64 %2966, 49
  store i64 %2999, i64* %PC, align 8
  %3000 = inttoptr i64 %2998 to i32*
  %3001 = load i32, i32* %3000, align 4
  %3002 = sext i32 %3001 to i64
  %3003 = mul nsw i64 %3002, 33800
  store i64 %3003, i64* %RCX, align 8, !tbaa !2428
  %3004 = lshr i64 %3003, 63
  %3005 = add i64 %3003, %2997
  store i64 %3005, i64* %RAX, align 8, !tbaa !2428
  %3006 = icmp ult i64 %3005, %2997
  %3007 = icmp ult i64 %3005, %3003
  %3008 = or i1 %3006, %3007
  %3009 = zext i1 %3008 to i8
  store i8 %3009, i8* %42, align 1, !tbaa !2432
  %3010 = trunc i64 %3005 to i32
  %3011 = and i32 %3010, 255
  %3012 = tail call i32 @llvm.ctpop.i32(i32 %3011) #9
  %3013 = trunc i32 %3012 to i8
  %3014 = and i8 %3013, 1
  %3015 = xor i8 %3014, 1
  store i8 %3015, i8* %49, align 1, !tbaa !2446
  %3016 = xor i64 %3003, %2997
  %3017 = xor i64 %3016, %3005
  %3018 = lshr i64 %3017, 4
  %3019 = trunc i64 %3018 to i8
  %3020 = and i8 %3019, 1
  store i8 %3020, i8* %55, align 1, !tbaa !2450
  %3021 = icmp eq i64 %3005, 0
  %3022 = zext i1 %3021 to i8
  store i8 %3022, i8* %58, align 1, !tbaa !2447
  %3023 = lshr i64 %3005, 63
  %3024 = trunc i64 %3023 to i8
  store i8 %3024, i8* %61, align 1, !tbaa !2448
  %3025 = lshr i64 %2997, 63
  %3026 = xor i64 %3023, %3025
  %3027 = xor i64 %3023, %3004
  %3028 = add nuw nsw i64 %3026, %3027
  %3029 = icmp eq i64 %3028, 2
  %3030 = zext i1 %3029 to i8
  store i8 %3030, i8* %67, align 1, !tbaa !2449
  %3031 = load i64, i64* %RBP, align 8
  %3032 = add i64 %3031, -192
  %3033 = add i64 %2966, 66
  store i64 %3033, i64* %PC, align 8
  %3034 = inttoptr i64 %3032 to i32*
  %3035 = load i32, i32* %3034, align 4
  %3036 = sext i32 %3035 to i64
  %3037 = mul nsw i64 %3036, 520
  store i64 %3037, i64* %RCX, align 8, !tbaa !2428
  %3038 = lshr i64 %3037, 63
  %3039 = add i64 %3037, %3005
  store i64 %3039, i64* %RAX, align 8, !tbaa !2428
  %3040 = icmp ult i64 %3039, %3005
  %3041 = icmp ult i64 %3039, %3037
  %3042 = or i1 %3040, %3041
  %3043 = zext i1 %3042 to i8
  store i8 %3043, i8* %42, align 1, !tbaa !2432
  %3044 = trunc i64 %3039 to i32
  %3045 = and i32 %3044, 255
  %3046 = tail call i32 @llvm.ctpop.i32(i32 %3045) #9
  %3047 = trunc i32 %3046 to i8
  %3048 = and i8 %3047, 1
  %3049 = xor i8 %3048, 1
  store i8 %3049, i8* %49, align 1, !tbaa !2446
  %3050 = xor i64 %3037, %3005
  %3051 = xor i64 %3050, %3039
  %3052 = lshr i64 %3051, 4
  %3053 = trunc i64 %3052 to i8
  %3054 = and i8 %3053, 1
  store i8 %3054, i8* %55, align 1, !tbaa !2450
  %3055 = icmp eq i64 %3039, 0
  %3056 = zext i1 %3055 to i8
  store i8 %3056, i8* %58, align 1, !tbaa !2447
  %3057 = lshr i64 %3039, 63
  %3058 = trunc i64 %3057 to i8
  store i8 %3058, i8* %61, align 1, !tbaa !2448
  %3059 = xor i64 %3057, %3023
  %3060 = xor i64 %3057, %3038
  %3061 = add nuw nsw i64 %3059, %3060
  %3062 = icmp eq i64 %3061, 2
  %3063 = zext i1 %3062 to i8
  store i8 %3063, i8* %67, align 1, !tbaa !2449
  %3064 = add i64 %3031, -196
  %3065 = add i64 %2966, 83
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i32*
  %3067 = load i32, i32* %3066, align 4
  %3068 = sext i32 %3067 to i64
  store i64 %3068, i64* %RCX, align 8, !tbaa !2428
  %3069 = shl nsw i64 %3068, 3
  %3070 = add i64 %3069, %3039
  %3071 = add i64 %2966, 88
  store i64 %3071, i64* %PC, align 8
  %3072 = load double, double* %257, align 1
  %3073 = inttoptr i64 %3070 to double*
  %3074 = load double, double* %3073, align 8
  %3075 = fmul double %3072, %3074
  store double %3075, double* %257, align 1, !tbaa !2452
  %3076 = add i64 %3031, -72
  %3077 = add i64 %2966, 93
  store i64 %3077, i64* %PC, align 8
  %3078 = inttoptr i64 %3076 to i64*
  %3079 = load i64, i64* %3078, align 8
  store i64 %3079, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %3080 = add i64 %3031, -184
  %3081 = add i64 %2966, 100
  store i64 %3081, i64* %PC, align 8
  %3082 = inttoptr i64 %3080 to i64*
  %3083 = load i64, i64* %3082, align 8
  store i64 %3083, i64* %RAX, align 8, !tbaa !2428
  %3084 = add i64 %2966, 107
  store i64 %3084, i64* %PC, align 8
  %3085 = load i32, i32* %3034, align 4
  %3086 = sext i32 %3085 to i64
  store i64 %3086, i64* %RCX, align 8, !tbaa !2428
  %3087 = shl nsw i64 %3086, 3
  %3088 = add i64 %3087, %3083
  %3089 = add i64 %2966, 112
  store i64 %3089, i64* %PC, align 8
  %3090 = bitcast i64 %3079 to double
  %3091 = inttoptr i64 %3088 to double*
  %3092 = load double, double* %3091, align 8
  %3093 = fdiv double %3090, %3092
  store double %3093, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3094 = load i64, i64* %RBP, align 8
  %3095 = add i64 %3094, -96
  %3096 = add i64 %2966, 116
  store i64 %3096, i64* %PC, align 8
  %3097 = inttoptr i64 %3095 to i64*
  %3098 = load i64, i64* %3097, align 8
  store i64 %3098, i64* %RAX, align 8, !tbaa !2428
  %3099 = add i64 %3094, -188
  %3100 = add i64 %2966, 123
  store i64 %3100, i64* %PC, align 8
  %3101 = inttoptr i64 %3099 to i32*
  %3102 = load i32, i32* %3101, align 4
  %3103 = sext i32 %3102 to i64
  %3104 = mul nsw i64 %3103, 520
  store i64 %3104, i64* %RCX, align 8, !tbaa !2428
  %3105 = lshr i64 %3104, 63
  %3106 = add i64 %3104, %3098
  store i64 %3106, i64* %RAX, align 8, !tbaa !2428
  %3107 = icmp ult i64 %3106, %3098
  %3108 = icmp ult i64 %3106, %3104
  %3109 = or i1 %3107, %3108
  %3110 = zext i1 %3109 to i8
  store i8 %3110, i8* %42, align 1, !tbaa !2432
  %3111 = trunc i64 %3106 to i32
  %3112 = and i32 %3111, 255
  %3113 = tail call i32 @llvm.ctpop.i32(i32 %3112) #9
  %3114 = trunc i32 %3113 to i8
  %3115 = and i8 %3114, 1
  %3116 = xor i8 %3115, 1
  store i8 %3116, i8* %49, align 1, !tbaa !2446
  %3117 = xor i64 %3104, %3098
  %3118 = xor i64 %3117, %3106
  %3119 = lshr i64 %3118, 4
  %3120 = trunc i64 %3119 to i8
  %3121 = and i8 %3120, 1
  store i8 %3121, i8* %55, align 1, !tbaa !2450
  %3122 = icmp eq i64 %3106, 0
  %3123 = zext i1 %3122 to i8
  store i8 %3123, i8* %58, align 1, !tbaa !2447
  %3124 = lshr i64 %3106, 63
  %3125 = trunc i64 %3124 to i8
  store i8 %3125, i8* %61, align 1, !tbaa !2448
  %3126 = lshr i64 %3098, 63
  %3127 = xor i64 %3124, %3126
  %3128 = xor i64 %3124, %3105
  %3129 = add nuw nsw i64 %3127, %3128
  %3130 = icmp eq i64 %3129, 2
  %3131 = zext i1 %3130 to i8
  store i8 %3131, i8* %67, align 1, !tbaa !2449
  %3132 = add i64 %3094, -192
  %3133 = add i64 %2966, 140
  store i64 %3133, i64* %PC, align 8
  %3134 = inttoptr i64 %3132 to i32*
  %3135 = load i32, i32* %3134, align 4
  %3136 = sext i32 %3135 to i64
  store i64 %3136, i64* %RCX, align 8, !tbaa !2428
  %3137 = shl nsw i64 %3136, 3
  %3138 = add i64 %3137, %3106
  %3139 = add i64 %2966, 145
  store i64 %3139, i64* %PC, align 8
  %3140 = inttoptr i64 %3138 to double*
  %3141 = load double, double* %3140, align 8
  %3142 = fmul double %3093, %3141
  store double %3142, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3143 = load double, double* %257, align 1
  %3144 = fsub double %3143, %3142
  store double %3144, double* %257, align 1, !tbaa !2452
  %3145 = add i64 %3094, -104
  %3146 = add i64 %2966, 153
  store i64 %3146, i64* %PC, align 8
  %3147 = inttoptr i64 %3145 to i64*
  %3148 = load i64, i64* %3147, align 8
  store i64 %3148, i64* %RAX, align 8, !tbaa !2428
  %3149 = load i64, i64* %RBP, align 8
  %3150 = add i64 %3149, -188
  %3151 = add i64 %2966, 160
  store i64 %3151, i64* %PC, align 8
  %3152 = inttoptr i64 %3150 to i32*
  %3153 = load i32, i32* %3152, align 4
  %3154 = sext i32 %3153 to i64
  %3155 = mul nsw i64 %3154, 520
  store i64 %3155, i64* %RCX, align 8, !tbaa !2428
  %3156 = lshr i64 %3155, 63
  %3157 = add i64 %3155, %3148
  store i64 %3157, i64* %RAX, align 8, !tbaa !2428
  %3158 = icmp ult i64 %3157, %3148
  %3159 = icmp ult i64 %3157, %3155
  %3160 = or i1 %3158, %3159
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %42, align 1, !tbaa !2432
  %3162 = trunc i64 %3157 to i32
  %3163 = and i32 %3162, 255
  %3164 = tail call i32 @llvm.ctpop.i32(i32 %3163) #9
  %3165 = trunc i32 %3164 to i8
  %3166 = and i8 %3165, 1
  %3167 = xor i8 %3166, 1
  store i8 %3167, i8* %49, align 1, !tbaa !2446
  %3168 = xor i64 %3155, %3148
  %3169 = xor i64 %3168, %3157
  %3170 = lshr i64 %3169, 4
  %3171 = trunc i64 %3170 to i8
  %3172 = and i8 %3171, 1
  store i8 %3172, i8* %55, align 1, !tbaa !2450
  %3173 = icmp eq i64 %3157, 0
  %3174 = zext i1 %3173 to i8
  store i8 %3174, i8* %58, align 1, !tbaa !2447
  %3175 = lshr i64 %3157, 63
  %3176 = trunc i64 %3175 to i8
  store i8 %3176, i8* %61, align 1, !tbaa !2448
  %3177 = lshr i64 %3148, 63
  %3178 = xor i64 %3175, %3177
  %3179 = xor i64 %3175, %3156
  %3180 = add nuw nsw i64 %3178, %3179
  %3181 = icmp eq i64 %3180, 2
  %3182 = zext i1 %3181 to i8
  store i8 %3182, i8* %67, align 1, !tbaa !2449
  %3183 = add i64 %3149, -192
  %3184 = add i64 %2966, 177
  store i64 %3184, i64* %PC, align 8
  %3185 = inttoptr i64 %3183 to i32*
  %3186 = load i32, i32* %3185, align 4
  %3187 = sext i32 %3186 to i64
  store i64 %3187, i64* %RCX, align 8, !tbaa !2428
  %3188 = shl nsw i64 %3187, 3
  %3189 = add i64 %3188, %3157
  %3190 = add i64 %2966, 182
  store i64 %3190, i64* %PC, align 8
  %3191 = inttoptr i64 %3189 to double*
  store double %3144, double* %3191, align 8
  %3192 = load i64, i64* %RBP, align 8
  %3193 = add i64 %3192, -160
  %3194 = load i64, i64* %PC, align 8
  %3195 = add i64 %3194, 7
  store i64 %3195, i64* %PC, align 8
  %3196 = inttoptr i64 %3193 to i64*
  %3197 = load i64, i64* %3196, align 8
  store i64 %3197, i64* %RAX, align 8, !tbaa !2428
  %3198 = add i64 %3192, -196
  %3199 = add i64 %3194, 14
  store i64 %3199, i64* %PC, align 8
  %3200 = inttoptr i64 %3198 to i32*
  %3201 = load i32, i32* %3200, align 4
  %3202 = sext i32 %3201 to i64
  store i64 %3202, i64* %RCX, align 8, !tbaa !2428
  %3203 = shl nsw i64 %3202, 3
  %3204 = add i64 %3203, %3197
  %3205 = add i64 %3194, 19
  store i64 %3205, i64* %PC, align 8
  %3206 = inttoptr i64 %3204 to i64*
  %3207 = load i64, i64* %3206, align 8
  store i64 %3207, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3208 = add i64 %3192, -168
  %3209 = add i64 %3194, 26
  store i64 %3209, i64* %PC, align 8
  %3210 = inttoptr i64 %3208 to i64*
  %3211 = load i64, i64* %3210, align 8
  store i64 %3211, i64* %RAX, align 8, !tbaa !2428
  %3212 = add i64 %3194, 33
  store i64 %3212, i64* %PC, align 8
  %3213 = load i32, i32* %3200, align 4
  %3214 = sext i32 %3213 to i64
  store i64 %3214, i64* %RCX, align 8, !tbaa !2428
  %3215 = shl nsw i64 %3214, 3
  %3216 = add i64 %3215, %3211
  %3217 = add i64 %3194, 38
  store i64 %3217, i64* %PC, align 8
  %3218 = bitcast i64 %3207 to double
  %3219 = inttoptr i64 %3216 to double*
  %3220 = load double, double* %3219, align 8
  %3221 = fdiv double %3218, %3220
  store double %3221, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %3222 = add i64 %3192, -136
  %3223 = add i64 %3194, 45
  store i64 %3223, i64* %PC, align 8
  %3224 = inttoptr i64 %3222 to i64*
  %3225 = load i64, i64* %3224, align 8
  store i64 %3225, i64* %RAX, align 8, !tbaa !2428
  %3226 = add i64 %3192, -188
  %3227 = add i64 %3194, 52
  store i64 %3227, i64* %PC, align 8
  %3228 = inttoptr i64 %3226 to i32*
  %3229 = load i32, i32* %3228, align 4
  %3230 = sext i32 %3229 to i64
  %3231 = mul nsw i64 %3230, 33800
  store i64 %3231, i64* %RCX, align 8, !tbaa !2428
  %3232 = lshr i64 %3231, 63
  %3233 = add i64 %3231, %3225
  store i64 %3233, i64* %RAX, align 8, !tbaa !2428
  %3234 = icmp ult i64 %3233, %3225
  %3235 = icmp ult i64 %3233, %3231
  %3236 = or i1 %3234, %3235
  %3237 = zext i1 %3236 to i8
  store i8 %3237, i8* %42, align 1, !tbaa !2432
  %3238 = trunc i64 %3233 to i32
  %3239 = and i32 %3238, 255
  %3240 = tail call i32 @llvm.ctpop.i32(i32 %3239) #9
  %3241 = trunc i32 %3240 to i8
  %3242 = and i8 %3241, 1
  %3243 = xor i8 %3242, 1
  store i8 %3243, i8* %49, align 1, !tbaa !2446
  %3244 = xor i64 %3231, %3225
  %3245 = xor i64 %3244, %3233
  %3246 = lshr i64 %3245, 4
  %3247 = trunc i64 %3246 to i8
  %3248 = and i8 %3247, 1
  store i8 %3248, i8* %55, align 1, !tbaa !2450
  %3249 = icmp eq i64 %3233, 0
  %3250 = zext i1 %3249 to i8
  store i8 %3250, i8* %58, align 1, !tbaa !2447
  %3251 = lshr i64 %3233, 63
  %3252 = trunc i64 %3251 to i8
  store i8 %3252, i8* %61, align 1, !tbaa !2448
  %3253 = lshr i64 %3225, 63
  %3254 = xor i64 %3251, %3253
  %3255 = xor i64 %3251, %3232
  %3256 = add nuw nsw i64 %3254, %3255
  %3257 = icmp eq i64 %3256, 2
  %3258 = zext i1 %3257 to i8
  store i8 %3258, i8* %67, align 1, !tbaa !2449
  %3259 = load i64, i64* %RBP, align 8
  %3260 = add i64 %3259, -192
  %3261 = add i64 %3194, 69
  store i64 %3261, i64* %PC, align 8
  %3262 = inttoptr i64 %3260 to i32*
  %3263 = load i32, i32* %3262, align 4
  %3264 = sext i32 %3263 to i64
  %3265 = mul nsw i64 %3264, 520
  store i64 %3265, i64* %RCX, align 8, !tbaa !2428
  %3266 = lshr i64 %3265, 63
  %3267 = add i64 %3265, %3233
  store i64 %3267, i64* %RAX, align 8, !tbaa !2428
  %3268 = icmp ult i64 %3267, %3233
  %3269 = icmp ult i64 %3267, %3265
  %3270 = or i1 %3268, %3269
  %3271 = zext i1 %3270 to i8
  store i8 %3271, i8* %42, align 1, !tbaa !2432
  %3272 = trunc i64 %3267 to i32
  %3273 = and i32 %3272, 255
  %3274 = tail call i32 @llvm.ctpop.i32(i32 %3273) #9
  %3275 = trunc i32 %3274 to i8
  %3276 = and i8 %3275, 1
  %3277 = xor i8 %3276, 1
  store i8 %3277, i8* %49, align 1, !tbaa !2446
  %3278 = xor i64 %3265, %3233
  %3279 = xor i64 %3278, %3267
  %3280 = lshr i64 %3279, 4
  %3281 = trunc i64 %3280 to i8
  %3282 = and i8 %3281, 1
  store i8 %3282, i8* %55, align 1, !tbaa !2450
  %3283 = icmp eq i64 %3267, 0
  %3284 = zext i1 %3283 to i8
  store i8 %3284, i8* %58, align 1, !tbaa !2447
  %3285 = lshr i64 %3267, 63
  %3286 = trunc i64 %3285 to i8
  store i8 %3286, i8* %61, align 1, !tbaa !2448
  %3287 = xor i64 %3285, %3251
  %3288 = xor i64 %3285, %3266
  %3289 = add nuw nsw i64 %3287, %3288
  %3290 = icmp eq i64 %3289, 2
  %3291 = zext i1 %3290 to i8
  store i8 %3291, i8* %67, align 1, !tbaa !2449
  %3292 = add i64 %3259, -196
  %3293 = add i64 %3194, 86
  store i64 %3293, i64* %PC, align 8
  %3294 = inttoptr i64 %3292 to i32*
  %3295 = load i32, i32* %3294, align 4
  %3296 = sext i32 %3295 to i64
  store i64 %3296, i64* %RCX, align 8, !tbaa !2428
  %3297 = shl nsw i64 %3296, 3
  %3298 = add i64 %3297, %3267
  %3299 = add i64 %3194, 91
  store i64 %3299, i64* %PC, align 8
  %3300 = load double, double* %257, align 1
  %3301 = inttoptr i64 %3298 to double*
  %3302 = load double, double* %3301, align 8
  %3303 = fmul double %3300, %3302
  store double %3303, double* %257, align 1, !tbaa !2452
  %3304 = add i64 %3259, -64
  %3305 = add i64 %3194, 96
  store i64 %3305, i64* %PC, align 8
  %3306 = inttoptr i64 %3304 to i64*
  %3307 = load i64, i64* %3306, align 8
  store i64 %3307, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %3308 = add i64 %3259, -152
  %3309 = add i64 %3194, 103
  store i64 %3309, i64* %PC, align 8
  %3310 = inttoptr i64 %3308 to i64*
  %3311 = load i64, i64* %3310, align 8
  store i64 %3311, i64* %RAX, align 8, !tbaa !2428
  %3312 = add i64 %3259, -188
  %3313 = add i64 %3194, 110
  store i64 %3313, i64* %PC, align 8
  %3314 = inttoptr i64 %3312 to i32*
  %3315 = load i32, i32* %3314, align 4
  %3316 = sext i32 %3315 to i64
  store i64 %3316, i64* %RCX, align 8, !tbaa !2428
  %3317 = shl nsw i64 %3316, 3
  %3318 = add i64 %3317, %3311
  %3319 = add i64 %3194, 115
  store i64 %3319, i64* %PC, align 8
  %3320 = bitcast i64 %3307 to double
  %3321 = inttoptr i64 %3318 to double*
  %3322 = load double, double* %3321, align 8
  %3323 = fmul double %3320, %3322
  store double %3323, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3324 = load i64, i64* %RBP, align 8
  %3325 = add i64 %3324, -168
  %3326 = add i64 %3194, 122
  store i64 %3326, i64* %PC, align 8
  %3327 = inttoptr i64 %3325 to i64*
  %3328 = load i64, i64* %3327, align 8
  store i64 %3328, i64* %RAX, align 8, !tbaa !2428
  %3329 = add i64 %3324, -196
  %3330 = add i64 %3194, 129
  store i64 %3330, i64* %PC, align 8
  %3331 = inttoptr i64 %3329 to i32*
  %3332 = load i32, i32* %3331, align 4
  %3333 = sext i32 %3332 to i64
  store i64 %3333, i64* %RCX, align 8, !tbaa !2428
  %3334 = shl nsw i64 %3333, 3
  %3335 = add i64 %3334, %3328
  %3336 = add i64 %3194, 134
  store i64 %3336, i64* %PC, align 8
  %3337 = inttoptr i64 %3335 to double*
  %3338 = load double, double* %3337, align 8
  %3339 = fdiv double %3323, %3338
  store double %3339, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3340 = add i64 %3324, -104
  %3341 = add i64 %3194, 138
  store i64 %3341, i64* %PC, align 8
  %3342 = inttoptr i64 %3340 to i64*
  %3343 = load i64, i64* %3342, align 8
  store i64 %3343, i64* %RAX, align 8, !tbaa !2428
  %3344 = add i64 %3324, -188
  %3345 = add i64 %3194, 145
  store i64 %3345, i64* %PC, align 8
  %3346 = inttoptr i64 %3344 to i32*
  %3347 = load i32, i32* %3346, align 4
  %3348 = sext i32 %3347 to i64
  %3349 = mul nsw i64 %3348, 520
  store i64 %3349, i64* %RCX, align 8, !tbaa !2428
  %3350 = lshr i64 %3349, 63
  %3351 = add i64 %3349, %3343
  store i64 %3351, i64* %RAX, align 8, !tbaa !2428
  %3352 = icmp ult i64 %3351, %3343
  %3353 = icmp ult i64 %3351, %3349
  %3354 = or i1 %3352, %3353
  %3355 = zext i1 %3354 to i8
  store i8 %3355, i8* %42, align 1, !tbaa !2432
  %3356 = trunc i64 %3351 to i32
  %3357 = and i32 %3356, 255
  %3358 = tail call i32 @llvm.ctpop.i32(i32 %3357) #9
  %3359 = trunc i32 %3358 to i8
  %3360 = and i8 %3359, 1
  %3361 = xor i8 %3360, 1
  store i8 %3361, i8* %49, align 1, !tbaa !2446
  %3362 = xor i64 %3349, %3343
  %3363 = xor i64 %3362, %3351
  %3364 = lshr i64 %3363, 4
  %3365 = trunc i64 %3364 to i8
  %3366 = and i8 %3365, 1
  store i8 %3366, i8* %55, align 1, !tbaa !2450
  %3367 = icmp eq i64 %3351, 0
  %3368 = zext i1 %3367 to i8
  store i8 %3368, i8* %58, align 1, !tbaa !2447
  %3369 = lshr i64 %3351, 63
  %3370 = trunc i64 %3369 to i8
  store i8 %3370, i8* %61, align 1, !tbaa !2448
  %3371 = lshr i64 %3343, 63
  %3372 = xor i64 %3369, %3371
  %3373 = xor i64 %3369, %3350
  %3374 = add nuw nsw i64 %3372, %3373
  %3375 = icmp eq i64 %3374, 2
  %3376 = zext i1 %3375 to i8
  store i8 %3376, i8* %67, align 1, !tbaa !2449
  %3377 = add i64 %3324, -192
  %3378 = add i64 %3194, 162
  store i64 %3378, i64* %PC, align 8
  %3379 = inttoptr i64 %3377 to i32*
  %3380 = load i32, i32* %3379, align 4
  %3381 = sext i32 %3380 to i64
  store i64 %3381, i64* %RCX, align 8, !tbaa !2428
  %3382 = shl nsw i64 %3381, 3
  %3383 = add i64 %3382, %3351
  %3384 = add i64 %3194, 167
  store i64 %3384, i64* %PC, align 8
  %3385 = inttoptr i64 %3383 to double*
  %3386 = load double, double* %3385, align 8
  %3387 = fmul double %3339, %3386
  store double %3387, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3388 = load double, double* %257, align 1
  %3389 = fadd double %3388, %3387
  store double %3389, double* %257, align 1, !tbaa !2452
  %3390 = load i64, i64* %RBP, align 8
  %3391 = add i64 %3390, -64
  %3392 = add i64 %3194, 176
  store i64 %3392, i64* %PC, align 8
  %3393 = inttoptr i64 %3391 to i64*
  %3394 = load i64, i64* %3393, align 8
  store i64 %3394, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %3395 = add i64 %3390, -144
  %3396 = add i64 %3194, 183
  store i64 %3396, i64* %PC, align 8
  %3397 = inttoptr i64 %3395 to i64*
  %3398 = load i64, i64* %3397, align 8
  store i64 %3398, i64* %RAX, align 8, !tbaa !2428
  %3399 = add i64 %3390, -188
  %3400 = add i64 %3194, 190
  store i64 %3400, i64* %PC, align 8
  %3401 = inttoptr i64 %3399 to i32*
  %3402 = load i32, i32* %3401, align 4
  %3403 = sext i32 %3402 to i64
  store i64 %3403, i64* %RCX, align 8, !tbaa !2428
  %3404 = shl nsw i64 %3403, 3
  %3405 = add i64 %3404, %3398
  %3406 = add i64 %3194, 195
  store i64 %3406, i64* %PC, align 8
  %3407 = bitcast i64 %3394 to double
  %3408 = inttoptr i64 %3405 to double*
  %3409 = load double, double* %3408, align 8
  %3410 = fmul double %3407, %3409
  store double %3410, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3411 = add i64 %3390, -168
  %3412 = add i64 %3194, 202
  store i64 %3412, i64* %PC, align 8
  %3413 = inttoptr i64 %3411 to i64*
  %3414 = load i64, i64* %3413, align 8
  store i64 %3414, i64* %RAX, align 8, !tbaa !2428
  %3415 = add i64 %3390, -196
  %3416 = add i64 %3194, 209
  store i64 %3416, i64* %PC, align 8
  %3417 = inttoptr i64 %3415 to i32*
  %3418 = load i32, i32* %3417, align 4
  %3419 = sext i32 %3418 to i64
  store i64 %3419, i64* %RCX, align 8, !tbaa !2428
  %3420 = shl nsw i64 %3419, 3
  %3421 = add i64 %3420, %3414
  %3422 = add i64 %3194, 214
  store i64 %3422, i64* %PC, align 8
  %3423 = inttoptr i64 %3421 to double*
  %3424 = load double, double* %3423, align 8
  %3425 = fdiv double %3410, %3424
  store double %3425, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3426 = add i64 %3390, -112
  %3427 = add i64 %3194, 218
  store i64 %3427, i64* %PC, align 8
  %3428 = inttoptr i64 %3426 to i64*
  %3429 = load i64, i64* %3428, align 8
  store i64 %3429, i64* %RAX, align 8, !tbaa !2428
  %3430 = add i64 %3194, 225
  store i64 %3430, i64* %PC, align 8
  %3431 = load i32, i32* %3401, align 4
  %3432 = sext i32 %3431 to i64
  %3433 = mul nsw i64 %3432, 33800
  store i64 %3433, i64* %RCX, align 8, !tbaa !2428
  %3434 = lshr i64 %3433, 63
  %3435 = add i64 %3433, %3429
  store i64 %3435, i64* %RAX, align 8, !tbaa !2428
  %3436 = icmp ult i64 %3435, %3429
  %3437 = icmp ult i64 %3435, %3433
  %3438 = or i1 %3436, %3437
  %3439 = zext i1 %3438 to i8
  store i8 %3439, i8* %42, align 1, !tbaa !2432
  %3440 = trunc i64 %3435 to i32
  %3441 = and i32 %3440, 255
  %3442 = tail call i32 @llvm.ctpop.i32(i32 %3441) #9
  %3443 = trunc i32 %3442 to i8
  %3444 = and i8 %3443, 1
  %3445 = xor i8 %3444, 1
  store i8 %3445, i8* %49, align 1, !tbaa !2446
  %3446 = xor i64 %3433, %3429
  %3447 = xor i64 %3446, %3435
  %3448 = lshr i64 %3447, 4
  %3449 = trunc i64 %3448 to i8
  %3450 = and i8 %3449, 1
  store i8 %3450, i8* %55, align 1, !tbaa !2450
  %3451 = icmp eq i64 %3435, 0
  %3452 = zext i1 %3451 to i8
  store i8 %3452, i8* %58, align 1, !tbaa !2447
  %3453 = lshr i64 %3435, 63
  %3454 = trunc i64 %3453 to i8
  store i8 %3454, i8* %61, align 1, !tbaa !2448
  %3455 = lshr i64 %3429, 63
  %3456 = xor i64 %3453, %3455
  %3457 = xor i64 %3453, %3434
  %3458 = add nuw nsw i64 %3456, %3457
  %3459 = icmp eq i64 %3458, 2
  %3460 = zext i1 %3459 to i8
  store i8 %3460, i8* %67, align 1, !tbaa !2449
  %3461 = load i64, i64* %RBP, align 8
  %3462 = add i64 %3461, -192
  %3463 = add i64 %3194, 242
  store i64 %3463, i64* %PC, align 8
  %3464 = inttoptr i64 %3462 to i32*
  %3465 = load i32, i32* %3464, align 4
  %3466 = sext i32 %3465 to i64
  %3467 = mul nsw i64 %3466, 520
  store i64 %3467, i64* %RCX, align 8, !tbaa !2428
  %3468 = lshr i64 %3467, 63
  %3469 = add i64 %3467, %3435
  store i64 %3469, i64* %RAX, align 8, !tbaa !2428
  %3470 = icmp ult i64 %3469, %3435
  %3471 = icmp ult i64 %3469, %3467
  %3472 = or i1 %3470, %3471
  %3473 = zext i1 %3472 to i8
  store i8 %3473, i8* %42, align 1, !tbaa !2432
  %3474 = trunc i64 %3469 to i32
  %3475 = and i32 %3474, 255
  %3476 = tail call i32 @llvm.ctpop.i32(i32 %3475) #9
  %3477 = trunc i32 %3476 to i8
  %3478 = and i8 %3477, 1
  %3479 = xor i8 %3478, 1
  store i8 %3479, i8* %49, align 1, !tbaa !2446
  %3480 = xor i64 %3467, %3435
  %3481 = xor i64 %3480, %3469
  %3482 = lshr i64 %3481, 4
  %3483 = trunc i64 %3482 to i8
  %3484 = and i8 %3483, 1
  store i8 %3484, i8* %55, align 1, !tbaa !2450
  %3485 = icmp eq i64 %3469, 0
  %3486 = zext i1 %3485 to i8
  store i8 %3486, i8* %58, align 1, !tbaa !2447
  %3487 = lshr i64 %3469, 63
  %3488 = trunc i64 %3487 to i8
  store i8 %3488, i8* %61, align 1, !tbaa !2448
  %3489 = xor i64 %3487, %3453
  %3490 = xor i64 %3487, %3468
  %3491 = add nuw nsw i64 %3489, %3490
  %3492 = icmp eq i64 %3491, 2
  %3493 = zext i1 %3492 to i8
  store i8 %3493, i8* %67, align 1, !tbaa !2449
  %3494 = add i64 %3461, -196
  %3495 = add i64 %3194, 259
  store i64 %3495, i64* %PC, align 8
  %3496 = inttoptr i64 %3494 to i32*
  %3497 = load i32, i32* %3496, align 4
  %3498 = sext i32 %3497 to i64
  store i64 %3498, i64* %RCX, align 8, !tbaa !2428
  %3499 = shl nsw i64 %3498, 3
  %3500 = add i64 %3499, %3469
  %3501 = add i64 %3194, 264
  store i64 %3501, i64* %PC, align 8
  %3502 = load double, double* %155, align 1
  %3503 = inttoptr i64 %3500 to double*
  %3504 = load double, double* %3503, align 8
  %3505 = fmul double %3502, %3504
  store double %3505, double* %155, align 1, !tbaa !2452
  %3506 = load double, double* %257, align 1
  %3507 = fsub double %3506, %3505
  store double %3507, double* %257, align 1, !tbaa !2452
  %3508 = add i64 %3461, -136
  %3509 = add i64 %3194, 275
  store i64 %3509, i64* %PC, align 8
  %3510 = inttoptr i64 %3508 to i64*
  %3511 = load i64, i64* %3510, align 8
  store i64 %3511, i64* %RAX, align 8, !tbaa !2428
  %3512 = add i64 %3461, -188
  %3513 = add i64 %3194, 282
  store i64 %3513, i64* %PC, align 8
  %3514 = inttoptr i64 %3512 to i32*
  %3515 = load i32, i32* %3514, align 4
  %3516 = sext i32 %3515 to i64
  %3517 = mul nsw i64 %3516, 33800
  store i64 %3517, i64* %RCX, align 8, !tbaa !2428
  %3518 = lshr i64 %3517, 63
  %3519 = add i64 %3517, %3511
  store i64 %3519, i64* %RAX, align 8, !tbaa !2428
  %3520 = icmp ult i64 %3519, %3511
  %3521 = icmp ult i64 %3519, %3517
  %3522 = or i1 %3520, %3521
  %3523 = zext i1 %3522 to i8
  store i8 %3523, i8* %42, align 1, !tbaa !2432
  %3524 = trunc i64 %3519 to i32
  %3525 = and i32 %3524, 255
  %3526 = tail call i32 @llvm.ctpop.i32(i32 %3525) #9
  %3527 = trunc i32 %3526 to i8
  %3528 = and i8 %3527, 1
  %3529 = xor i8 %3528, 1
  store i8 %3529, i8* %49, align 1, !tbaa !2446
  %3530 = xor i64 %3517, %3511
  %3531 = xor i64 %3530, %3519
  %3532 = lshr i64 %3531, 4
  %3533 = trunc i64 %3532 to i8
  %3534 = and i8 %3533, 1
  store i8 %3534, i8* %55, align 1, !tbaa !2450
  %3535 = icmp eq i64 %3519, 0
  %3536 = zext i1 %3535 to i8
  store i8 %3536, i8* %58, align 1, !tbaa !2447
  %3537 = lshr i64 %3519, 63
  %3538 = trunc i64 %3537 to i8
  store i8 %3538, i8* %61, align 1, !tbaa !2448
  %3539 = lshr i64 %3511, 63
  %3540 = xor i64 %3537, %3539
  %3541 = xor i64 %3537, %3518
  %3542 = add nuw nsw i64 %3540, %3541
  %3543 = icmp eq i64 %3542, 2
  %3544 = zext i1 %3543 to i8
  store i8 %3544, i8* %67, align 1, !tbaa !2449
  %3545 = load i64, i64* %RBP, align 8
  %3546 = add i64 %3545, -192
  %3547 = add i64 %3194, 299
  store i64 %3547, i64* %PC, align 8
  %3548 = inttoptr i64 %3546 to i32*
  %3549 = load i32, i32* %3548, align 4
  %3550 = sext i32 %3549 to i64
  %3551 = mul nsw i64 %3550, 520
  store i64 %3551, i64* %RCX, align 8, !tbaa !2428
  %3552 = lshr i64 %3551, 63
  %3553 = add i64 %3551, %3519
  store i64 %3553, i64* %RAX, align 8, !tbaa !2428
  %3554 = icmp ult i64 %3553, %3519
  %3555 = icmp ult i64 %3553, %3551
  %3556 = or i1 %3554, %3555
  %3557 = zext i1 %3556 to i8
  store i8 %3557, i8* %42, align 1, !tbaa !2432
  %3558 = trunc i64 %3553 to i32
  %3559 = and i32 %3558, 255
  %3560 = tail call i32 @llvm.ctpop.i32(i32 %3559) #9
  %3561 = trunc i32 %3560 to i8
  %3562 = and i8 %3561, 1
  %3563 = xor i8 %3562, 1
  store i8 %3563, i8* %49, align 1, !tbaa !2446
  %3564 = xor i64 %3551, %3519
  %3565 = xor i64 %3564, %3553
  %3566 = lshr i64 %3565, 4
  %3567 = trunc i64 %3566 to i8
  %3568 = and i8 %3567, 1
  store i8 %3568, i8* %55, align 1, !tbaa !2450
  %3569 = icmp eq i64 %3553, 0
  %3570 = zext i1 %3569 to i8
  store i8 %3570, i8* %58, align 1, !tbaa !2447
  %3571 = lshr i64 %3553, 63
  %3572 = trunc i64 %3571 to i8
  store i8 %3572, i8* %61, align 1, !tbaa !2448
  %3573 = xor i64 %3571, %3537
  %3574 = xor i64 %3571, %3552
  %3575 = add nuw nsw i64 %3573, %3574
  %3576 = icmp eq i64 %3575, 2
  %3577 = zext i1 %3576 to i8
  store i8 %3577, i8* %67, align 1, !tbaa !2449
  %3578 = add i64 %3545, -196
  %3579 = add i64 %3194, 316
  store i64 %3579, i64* %PC, align 8
  %3580 = inttoptr i64 %3578 to i32*
  %3581 = load i32, i32* %3580, align 4
  %3582 = sext i32 %3581 to i64
  store i64 %3582, i64* %RCX, align 8, !tbaa !2428
  %3583 = shl nsw i64 %3582, 3
  %3584 = add i64 %3583, %3553
  %3585 = add i64 %3194, 321
  store i64 %3585, i64* %PC, align 8
  %3586 = load i64, i64* %148, align 1
  %3587 = inttoptr i64 %3584 to i64*
  store i64 %3586, i64* %3587, align 8
  %3588 = load i64, i64* %RBP, align 8
  %3589 = add i64 %3588, -104
  %3590 = load i64, i64* %PC, align 8
  %3591 = add i64 %3590, 4
  store i64 %3591, i64* %PC, align 8
  %3592 = inttoptr i64 %3589 to i64*
  %3593 = load i64, i64* %3592, align 8
  store i64 %3593, i64* %RAX, align 8, !tbaa !2428
  %3594 = add i64 %3588, -188
  %3595 = add i64 %3590, 11
  store i64 %3595, i64* %PC, align 8
  %3596 = inttoptr i64 %3594 to i32*
  %3597 = load i32, i32* %3596, align 4
  %3598 = sext i32 %3597 to i64
  %3599 = mul nsw i64 %3598, 520
  store i64 %3599, i64* %RCX, align 8, !tbaa !2428
  %3600 = lshr i64 %3599, 63
  %3601 = add i64 %3599, %3593
  store i64 %3601, i64* %RAX, align 8, !tbaa !2428
  %3602 = icmp ult i64 %3601, %3593
  %3603 = icmp ult i64 %3601, %3599
  %3604 = or i1 %3602, %3603
  %3605 = zext i1 %3604 to i8
  store i8 %3605, i8* %42, align 1, !tbaa !2432
  %3606 = trunc i64 %3601 to i32
  %3607 = and i32 %3606, 255
  %3608 = tail call i32 @llvm.ctpop.i32(i32 %3607) #9
  %3609 = trunc i32 %3608 to i8
  %3610 = and i8 %3609, 1
  %3611 = xor i8 %3610, 1
  store i8 %3611, i8* %49, align 1, !tbaa !2446
  %3612 = xor i64 %3599, %3593
  %3613 = xor i64 %3612, %3601
  %3614 = lshr i64 %3613, 4
  %3615 = trunc i64 %3614 to i8
  %3616 = and i8 %3615, 1
  store i8 %3616, i8* %55, align 1, !tbaa !2450
  %3617 = icmp eq i64 %3601, 0
  %3618 = zext i1 %3617 to i8
  store i8 %3618, i8* %58, align 1, !tbaa !2447
  %3619 = lshr i64 %3601, 63
  %3620 = trunc i64 %3619 to i8
  store i8 %3620, i8* %61, align 1, !tbaa !2448
  %3621 = lshr i64 %3593, 63
  %3622 = xor i64 %3619, %3621
  %3623 = xor i64 %3619, %3600
  %3624 = add nuw nsw i64 %3622, %3623
  %3625 = icmp eq i64 %3624, 2
  %3626 = zext i1 %3625 to i8
  store i8 %3626, i8* %67, align 1, !tbaa !2449
  %3627 = add i64 %3588, -192
  %3628 = add i64 %3590, 28
  store i64 %3628, i64* %PC, align 8
  %3629 = inttoptr i64 %3627 to i32*
  %3630 = load i32, i32* %3629, align 4
  %3631 = sext i32 %3630 to i64
  store i64 %3631, i64* %RCX, align 8, !tbaa !2428
  %3632 = shl nsw i64 %3631, 3
  %3633 = add i64 %3632, %3601
  %3634 = add i64 %3590, 33
  store i64 %3634, i64* %PC, align 8
  %3635 = inttoptr i64 %3633 to i64*
  %3636 = load i64, i64* %3635, align 8
  store i64 %3636, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3637 = add i64 %3588, -112
  %3638 = add i64 %3590, 37
  store i64 %3638, i64* %PC, align 8
  %3639 = inttoptr i64 %3637 to i64*
  %3640 = load i64, i64* %3639, align 8
  store i64 %3640, i64* %RAX, align 8, !tbaa !2428
  %3641 = add i64 %3590, 44
  store i64 %3641, i64* %PC, align 8
  %3642 = load i32, i32* %3596, align 4
  %3643 = sext i32 %3642 to i64
  %3644 = mul nsw i64 %3643, 33800
  store i64 %3644, i64* %RCX, align 8, !tbaa !2428
  %3645 = lshr i64 %3644, 63
  %3646 = add i64 %3644, %3640
  store i64 %3646, i64* %RAX, align 8, !tbaa !2428
  %3647 = icmp ult i64 %3646, %3640
  %3648 = icmp ult i64 %3646, %3644
  %3649 = or i1 %3647, %3648
  %3650 = zext i1 %3649 to i8
  store i8 %3650, i8* %42, align 1, !tbaa !2432
  %3651 = trunc i64 %3646 to i32
  %3652 = and i32 %3651, 255
  %3653 = tail call i32 @llvm.ctpop.i32(i32 %3652) #9
  %3654 = trunc i32 %3653 to i8
  %3655 = and i8 %3654, 1
  %3656 = xor i8 %3655, 1
  store i8 %3656, i8* %49, align 1, !tbaa !2446
  %3657 = xor i64 %3644, %3640
  %3658 = xor i64 %3657, %3646
  %3659 = lshr i64 %3658, 4
  %3660 = trunc i64 %3659 to i8
  %3661 = and i8 %3660, 1
  store i8 %3661, i8* %55, align 1, !tbaa !2450
  %3662 = icmp eq i64 %3646, 0
  %3663 = zext i1 %3662 to i8
  store i8 %3663, i8* %58, align 1, !tbaa !2447
  %3664 = lshr i64 %3646, 63
  %3665 = trunc i64 %3664 to i8
  store i8 %3665, i8* %61, align 1, !tbaa !2448
  %3666 = lshr i64 %3640, 63
  %3667 = xor i64 %3664, %3666
  %3668 = xor i64 %3664, %3645
  %3669 = add nuw nsw i64 %3667, %3668
  %3670 = icmp eq i64 %3669, 2
  %3671 = zext i1 %3670 to i8
  store i8 %3671, i8* %67, align 1, !tbaa !2449
  %3672 = load i64, i64* %RBP, align 8
  %3673 = add i64 %3672, -192
  %3674 = add i64 %3590, 61
  store i64 %3674, i64* %PC, align 8
  %3675 = inttoptr i64 %3673 to i32*
  %3676 = load i32, i32* %3675, align 4
  %3677 = sext i32 %3676 to i64
  %3678 = mul nsw i64 %3677, 520
  store i64 %3678, i64* %RCX, align 8, !tbaa !2428
  %3679 = lshr i64 %3678, 63
  %3680 = add i64 %3678, %3646
  store i64 %3680, i64* %RAX, align 8, !tbaa !2428
  %3681 = icmp ult i64 %3680, %3646
  %3682 = icmp ult i64 %3680, %3678
  %3683 = or i1 %3681, %3682
  %3684 = zext i1 %3683 to i8
  store i8 %3684, i8* %42, align 1, !tbaa !2432
  %3685 = trunc i64 %3680 to i32
  %3686 = and i32 %3685, 255
  %3687 = tail call i32 @llvm.ctpop.i32(i32 %3686) #9
  %3688 = trunc i32 %3687 to i8
  %3689 = and i8 %3688, 1
  %3690 = xor i8 %3689, 1
  store i8 %3690, i8* %49, align 1, !tbaa !2446
  %3691 = xor i64 %3678, %3646
  %3692 = xor i64 %3691, %3680
  %3693 = lshr i64 %3692, 4
  %3694 = trunc i64 %3693 to i8
  %3695 = and i8 %3694, 1
  store i8 %3695, i8* %55, align 1, !tbaa !2450
  %3696 = icmp eq i64 %3680, 0
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %58, align 1, !tbaa !2447
  %3698 = lshr i64 %3680, 63
  %3699 = trunc i64 %3698 to i8
  store i8 %3699, i8* %61, align 1, !tbaa !2448
  %3700 = xor i64 %3698, %3664
  %3701 = xor i64 %3698, %3679
  %3702 = add nuw nsw i64 %3700, %3701
  %3703 = icmp eq i64 %3702, 2
  %3704 = zext i1 %3703 to i8
  store i8 %3704, i8* %67, align 1, !tbaa !2449
  %3705 = add i64 %3672, -196
  %3706 = add i64 %3590, 78
  store i64 %3706, i64* %PC, align 8
  %3707 = inttoptr i64 %3705 to i32*
  %3708 = load i32, i32* %3707, align 4
  %3709 = sext i32 %3708 to i64
  store i64 %3709, i64* %RCX, align 8, !tbaa !2428
  %3710 = shl nsw i64 %3709, 3
  %3711 = add i64 %3710, %3680
  %3712 = add i64 %3590, 83
  store i64 %3712, i64* %PC, align 8
  %3713 = load i64, i64* %148, align 1
  %3714 = inttoptr i64 %3711 to i64*
  store i64 %3713, i64* %3714, align 8
  %3715 = load i64, i64* %RBP, align 8
  %3716 = add i64 %3715, -196
  %3717 = load i64, i64* %PC, align 8
  %3718 = add i64 %3717, 6
  store i64 %3718, i64* %PC, align 8
  %3719 = inttoptr i64 %3716 to i32*
  %3720 = load i32, i32* %3719, align 4
  %3721 = add i32 %3720, 1
  %3722 = zext i32 %3721 to i64
  store i64 %3722, i64* %RAX, align 8, !tbaa !2428
  %3723 = icmp eq i32 %3720, -1
  %3724 = icmp eq i32 %3721, 0
  %3725 = or i1 %3723, %3724
  %3726 = zext i1 %3725 to i8
  store i8 %3726, i8* %42, align 1, !tbaa !2432
  %3727 = and i32 %3721, 255
  %3728 = tail call i32 @llvm.ctpop.i32(i32 %3727) #9
  %3729 = trunc i32 %3728 to i8
  %3730 = and i8 %3729, 1
  %3731 = xor i8 %3730, 1
  store i8 %3731, i8* %49, align 1, !tbaa !2446
  %3732 = xor i32 %3721, %3720
  %3733 = lshr i32 %3732, 4
  %3734 = trunc i32 %3733 to i8
  %3735 = and i8 %3734, 1
  store i8 %3735, i8* %55, align 1, !tbaa !2450
  %3736 = zext i1 %3724 to i8
  store i8 %3736, i8* %58, align 1, !tbaa !2447
  %3737 = lshr i32 %3721, 31
  %3738 = trunc i32 %3737 to i8
  store i8 %3738, i8* %61, align 1, !tbaa !2448
  %3739 = lshr i32 %3720, 31
  %3740 = xor i32 %3737, %3739
  %3741 = add nuw nsw i32 %3740, %3737
  %3742 = icmp eq i32 %3741, 2
  %3743 = zext i1 %3742 to i8
  store i8 %3743, i8* %67, align 1, !tbaa !2449
  %3744 = add i64 %3717, 15
  store i64 %3744, i64* %PC, align 8
  store i32 %3721, i32* %3719, align 4
  %3745 = load i64, i64* %PC, align 8
  %3746 = add i64 %3745, -859
  store i64 %3746, i64* %PC, align 8, !tbaa !2428
  br label %block_402363

block_402d02:                                     ; preds = %block_4029d0
  %3747 = add i64 %4841, -48
  %3748 = add i64 %4803, 39
  store i64 %3748, i64* %PC, align 8
  %3749 = inttoptr i64 %3747 to i32*
  %3750 = load i32, i32* %3749, align 4
  %3751 = sext i32 %3750 to i64
  store i64 %3751, i64* %RCX, align 8, !tbaa !2428
  %3752 = shl nsw i64 %3751, 3
  %3753 = add i64 %3752, %4850
  %3754 = add i64 %4803, 44
  store i64 %3754, i64* %PC, align 8
  %3755 = inttoptr i64 %3753 to i64*
  %3756 = load i64, i64* %3755, align 8
  store i64 %3756, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3757 = add i64 %4841, -80
  %3758 = add i64 %4803, 48
  store i64 %3758, i64* %PC, align 8
  %3759 = inttoptr i64 %3757 to i64*
  %3760 = load i64, i64* %3759, align 8
  store i64 %3760, i64* %RAX, align 8, !tbaa !2428
  %3761 = add i64 %4841, -188
  %3762 = add i64 %4803, 55
  store i64 %3762, i64* %PC, align 8
  %3763 = inttoptr i64 %3761 to i32*
  %3764 = load i32, i32* %3763, align 4
  %3765 = sext i32 %3764 to i64
  %3766 = mul nsw i64 %3765, 520
  store i64 %3766, i64* %RCX, align 8, !tbaa !2428
  %3767 = lshr i64 %3766, 63
  %3768 = add i64 %3766, %3760
  store i64 %3768, i64* %RAX, align 8, !tbaa !2428
  %3769 = icmp ult i64 %3768, %3760
  %3770 = icmp ult i64 %3768, %3766
  %3771 = or i1 %3769, %3770
  %3772 = zext i1 %3771 to i8
  store i8 %3772, i8* %42, align 1, !tbaa !2432
  %3773 = trunc i64 %3768 to i32
  %3774 = and i32 %3773, 255
  %3775 = tail call i32 @llvm.ctpop.i32(i32 %3774) #9
  %3776 = trunc i32 %3775 to i8
  %3777 = and i8 %3776, 1
  %3778 = xor i8 %3777, 1
  store i8 %3778, i8* %49, align 1, !tbaa !2446
  %3779 = xor i64 %3766, %3760
  %3780 = xor i64 %3779, %3768
  %3781 = lshr i64 %3780, 4
  %3782 = trunc i64 %3781 to i8
  %3783 = and i8 %3782, 1
  store i8 %3783, i8* %55, align 1, !tbaa !2450
  %3784 = icmp eq i64 %3768, 0
  %3785 = zext i1 %3784 to i8
  store i8 %3785, i8* %58, align 1, !tbaa !2447
  %3786 = lshr i64 %3768, 63
  %3787 = trunc i64 %3786 to i8
  store i8 %3787, i8* %61, align 1, !tbaa !2448
  %3788 = lshr i64 %3760, 63
  %3789 = xor i64 %3786, %3788
  %3790 = xor i64 %3786, %3767
  %3791 = add nuw nsw i64 %3789, %3790
  %3792 = icmp eq i64 %3791, 2
  %3793 = zext i1 %3792 to i8
  store i8 %3793, i8* %67, align 1, !tbaa !2449
  %3794 = add i64 %4803, 69
  store i64 %3794, i64* %PC, align 8
  %3795 = load i32, i32* %3749, align 4
  %3796 = sext i32 %3795 to i64
  store i64 %3796, i64* %RCX, align 8, !tbaa !2428
  %3797 = shl nsw i64 %3796, 3
  %3798 = add i64 %3797, %3768
  %3799 = add i64 %4803, 74
  store i64 %3799, i64* %PC, align 8
  %3800 = bitcast i64 %3756 to double
  %3801 = inttoptr i64 %3798 to double*
  %3802 = load double, double* %3801, align 8
  %3803 = fsub double %3800, %3802
  store double %3803, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %3804 = load i64, i64* %RBP, align 8
  %3805 = add i64 %3804, -88
  %3806 = add i64 %4803, 78
  store i64 %3806, i64* %PC, align 8
  %3807 = inttoptr i64 %3805 to i64*
  %3808 = load i64, i64* %3807, align 8
  store i64 %3808, i64* %RAX, align 8, !tbaa !2428
  %3809 = add i64 %3804, -188
  %3810 = add i64 %4803, 85
  store i64 %3810, i64* %PC, align 8
  %3811 = inttoptr i64 %3809 to i32*
  %3812 = load i32, i32* %3811, align 4
  %3813 = sext i32 %3812 to i64
  %3814 = mul nsw i64 %3813, 520
  store i64 %3814, i64* %RCX, align 8, !tbaa !2428
  %3815 = lshr i64 %3814, 63
  %3816 = add i64 %3814, %3808
  store i64 %3816, i64* %RAX, align 8, !tbaa !2428
  %3817 = icmp ult i64 %3816, %3808
  %3818 = icmp ult i64 %3816, %3814
  %3819 = or i1 %3817, %3818
  %3820 = zext i1 %3819 to i8
  store i8 %3820, i8* %42, align 1, !tbaa !2432
  %3821 = trunc i64 %3816 to i32
  %3822 = and i32 %3821, 255
  %3823 = tail call i32 @llvm.ctpop.i32(i32 %3822) #9
  %3824 = trunc i32 %3823 to i8
  %3825 = and i8 %3824, 1
  %3826 = xor i8 %3825, 1
  store i8 %3826, i8* %49, align 1, !tbaa !2446
  %3827 = xor i64 %3814, %3808
  %3828 = xor i64 %3827, %3816
  %3829 = lshr i64 %3828, 4
  %3830 = trunc i64 %3829 to i8
  %3831 = and i8 %3830, 1
  store i8 %3831, i8* %55, align 1, !tbaa !2450
  %3832 = icmp eq i64 %3816, 0
  %3833 = zext i1 %3832 to i8
  store i8 %3833, i8* %58, align 1, !tbaa !2447
  %3834 = lshr i64 %3816, 63
  %3835 = trunc i64 %3834 to i8
  store i8 %3835, i8* %61, align 1, !tbaa !2448
  %3836 = lshr i64 %3808, 63
  %3837 = xor i64 %3834, %3836
  %3838 = xor i64 %3834, %3815
  %3839 = add nuw nsw i64 %3837, %3838
  %3840 = icmp eq i64 %3839, 2
  %3841 = zext i1 %3840 to i8
  store i8 %3841, i8* %67, align 1, !tbaa !2449
  %3842 = add i64 %3804, -52
  %3843 = add i64 %4803, 99
  store i64 %3843, i64* %PC, align 8
  %3844 = inttoptr i64 %3842 to i32*
  %3845 = load i32, i32* %3844, align 4
  %3846 = sext i32 %3845 to i64
  store i64 %3846, i64* %RCX, align 8, !tbaa !2428
  %3847 = shl nsw i64 %3846, 3
  %3848 = add i64 %3847, %3816
  %3849 = add i64 %4803, 104
  store i64 %3849, i64* %PC, align 8
  %3850 = inttoptr i64 %3848 to double*
  %3851 = load double, double* %3850, align 8
  %3852 = fadd double %3803, %3851
  store double %3852, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %3853 = add i64 %3804, -128
  %3854 = add i64 %4803, 108
  store i64 %3854, i64* %PC, align 8
  %3855 = inttoptr i64 %3853 to i64*
  %3856 = load i64, i64* %3855, align 8
  store i64 %3856, i64* %RAX, align 8, !tbaa !2428
  %3857 = add i64 %4803, 115
  store i64 %3857, i64* %PC, align 8
  %3858 = load i32, i32* %3811, align 4
  %3859 = sext i32 %3858 to i64
  %3860 = mul nsw i64 %3859, 33800
  store i64 %3860, i64* %RCX, align 8, !tbaa !2428
  %3861 = lshr i64 %3860, 63
  %3862 = add i64 %3860, %3856
  store i64 %3862, i64* %RAX, align 8, !tbaa !2428
  %3863 = icmp ult i64 %3862, %3856
  %3864 = icmp ult i64 %3862, %3860
  %3865 = or i1 %3863, %3864
  %3866 = zext i1 %3865 to i8
  store i8 %3866, i8* %42, align 1, !tbaa !2432
  %3867 = trunc i64 %3862 to i32
  %3868 = and i32 %3867, 255
  %3869 = tail call i32 @llvm.ctpop.i32(i32 %3868) #9
  %3870 = trunc i32 %3869 to i8
  %3871 = and i8 %3870, 1
  %3872 = xor i8 %3871, 1
  store i8 %3872, i8* %49, align 1, !tbaa !2446
  %3873 = xor i64 %3860, %3856
  %3874 = xor i64 %3873, %3862
  %3875 = lshr i64 %3874, 4
  %3876 = trunc i64 %3875 to i8
  %3877 = and i8 %3876, 1
  store i8 %3877, i8* %55, align 1, !tbaa !2450
  %3878 = icmp eq i64 %3862, 0
  %3879 = zext i1 %3878 to i8
  store i8 %3879, i8* %58, align 1, !tbaa !2447
  %3880 = lshr i64 %3862, 63
  %3881 = trunc i64 %3880 to i8
  store i8 %3881, i8* %61, align 1, !tbaa !2448
  %3882 = lshr i64 %3856, 63
  %3883 = xor i64 %3880, %3882
  %3884 = xor i64 %3880, %3861
  %3885 = add nuw nsw i64 %3883, %3884
  %3886 = icmp eq i64 %3885, 2
  %3887 = zext i1 %3886 to i8
  store i8 %3887, i8* %67, align 1, !tbaa !2449
  %3888 = load i64, i64* %RBP, align 8
  %3889 = add i64 %3888, -52
  %3890 = add i64 %4803, 129
  store i64 %3890, i64* %PC, align 8
  %3891 = inttoptr i64 %3889 to i32*
  %3892 = load i32, i32* %3891, align 4
  %3893 = sext i32 %3892 to i64
  %3894 = mul nsw i64 %3893, 520
  store i64 %3894, i64* %RCX, align 8, !tbaa !2428
  %3895 = lshr i64 %3894, 63
  %3896 = add i64 %3894, %3862
  store i64 %3896, i64* %RAX, align 8, !tbaa !2428
  %3897 = icmp ult i64 %3896, %3862
  %3898 = icmp ult i64 %3896, %3894
  %3899 = or i1 %3897, %3898
  %3900 = zext i1 %3899 to i8
  store i8 %3900, i8* %42, align 1, !tbaa !2432
  %3901 = trunc i64 %3896 to i32
  %3902 = and i32 %3901, 255
  %3903 = tail call i32 @llvm.ctpop.i32(i32 %3902) #9
  %3904 = trunc i32 %3903 to i8
  %3905 = and i8 %3904, 1
  %3906 = xor i8 %3905, 1
  store i8 %3906, i8* %49, align 1, !tbaa !2446
  %3907 = xor i64 %3894, %3862
  %3908 = xor i64 %3907, %3896
  %3909 = lshr i64 %3908, 4
  %3910 = trunc i64 %3909 to i8
  %3911 = and i8 %3910, 1
  store i8 %3911, i8* %55, align 1, !tbaa !2450
  %3912 = icmp eq i64 %3896, 0
  %3913 = zext i1 %3912 to i8
  store i8 %3913, i8* %58, align 1, !tbaa !2447
  %3914 = lshr i64 %3896, 63
  %3915 = trunc i64 %3914 to i8
  store i8 %3915, i8* %61, align 1, !tbaa !2448
  %3916 = xor i64 %3914, %3880
  %3917 = xor i64 %3914, %3895
  %3918 = add nuw nsw i64 %3916, %3917
  %3919 = icmp eq i64 %3918, 2
  %3920 = zext i1 %3919 to i8
  store i8 %3920, i8* %67, align 1, !tbaa !2449
  %3921 = add i64 %3888, -48
  %3922 = add i64 %4803, 143
  store i64 %3922, i64* %PC, align 8
  %3923 = inttoptr i64 %3921 to i32*
  %3924 = load i32, i32* %3923, align 4
  %3925 = sext i32 %3924 to i64
  store i64 %3925, i64* %RCX, align 8, !tbaa !2428
  %3926 = shl nsw i64 %3925, 3
  %3927 = add i64 %3926, %3896
  %3928 = add i64 %4803, 148
  store i64 %3928, i64* %PC, align 8
  %3929 = load double, double* %257, align 1
  %3930 = inttoptr i64 %3927 to double*
  %3931 = load double, double* %3930, align 8
  %3932 = fsub double %3929, %3931
  store double %3932, double* %257, align 1, !tbaa !2452
  %3933 = add i64 %3888, -96
  %3934 = add i64 %4803, 152
  store i64 %3934, i64* %PC, align 8
  %3935 = inttoptr i64 %3933 to i64*
  %3936 = load i64, i64* %3935, align 8
  store i64 %3936, i64* %RAX, align 8, !tbaa !2428
  %3937 = add i64 %3888, -188
  %3938 = add i64 %4803, 159
  store i64 %3938, i64* %PC, align 8
  %3939 = inttoptr i64 %3937 to i32*
  %3940 = load i32, i32* %3939, align 4
  %3941 = sext i32 %3940 to i64
  %3942 = mul nsw i64 %3941, 520
  store i64 %3942, i64* %RCX, align 8, !tbaa !2428
  %3943 = lshr i64 %3942, 63
  %3944 = add i64 %3942, %3936
  store i64 %3944, i64* %RAX, align 8, !tbaa !2428
  %3945 = icmp ult i64 %3944, %3936
  %3946 = icmp ult i64 %3944, %3942
  %3947 = or i1 %3945, %3946
  %3948 = zext i1 %3947 to i8
  store i8 %3948, i8* %42, align 1, !tbaa !2432
  %3949 = trunc i64 %3944 to i32
  %3950 = and i32 %3949, 255
  %3951 = tail call i32 @llvm.ctpop.i32(i32 %3950) #9
  %3952 = trunc i32 %3951 to i8
  %3953 = and i8 %3952, 1
  %3954 = xor i8 %3953, 1
  store i8 %3954, i8* %49, align 1, !tbaa !2446
  %3955 = xor i64 %3942, %3936
  %3956 = xor i64 %3955, %3944
  %3957 = lshr i64 %3956, 4
  %3958 = trunc i64 %3957 to i8
  %3959 = and i8 %3958, 1
  store i8 %3959, i8* %55, align 1, !tbaa !2450
  %3960 = icmp eq i64 %3944, 0
  %3961 = zext i1 %3960 to i8
  store i8 %3961, i8* %58, align 1, !tbaa !2447
  %3962 = lshr i64 %3944, 63
  %3963 = trunc i64 %3962 to i8
  store i8 %3963, i8* %61, align 1, !tbaa !2448
  %3964 = lshr i64 %3936, 63
  %3965 = xor i64 %3962, %3964
  %3966 = xor i64 %3962, %3943
  %3967 = add nuw nsw i64 %3965, %3966
  %3968 = icmp eq i64 %3967, 2
  %3969 = zext i1 %3968 to i8
  store i8 %3969, i8* %67, align 1, !tbaa !2449
  %3970 = load i64, i64* %RBP, align 8
  %3971 = add i64 %3970, -192
  %3972 = add i64 %4803, 176
  store i64 %3972, i64* %PC, align 8
  %3973 = inttoptr i64 %3971 to i32*
  %3974 = load i32, i32* %3973, align 4
  %3975 = sext i32 %3974 to i64
  store i64 %3975, i64* %RCX, align 8, !tbaa !2428
  %3976 = shl nsw i64 %3975, 3
  %3977 = add i64 %3976, %3944
  %3978 = add i64 %4803, 181
  store i64 %3978, i64* %PC, align 8
  %3979 = inttoptr i64 %3977 to double*
  store double %3932, double* %3979, align 8
  %3980 = load i64, i64* %RBP, align 8
  %3981 = add i64 %3980, -176
  %3982 = load i64, i64* %PC, align 8
  %3983 = add i64 %3982, 7
  store i64 %3983, i64* %PC, align 8
  %3984 = inttoptr i64 %3981 to i64*
  %3985 = load i64, i64* %3984, align 8
  store i64 %3985, i64* %RAX, align 8, !tbaa !2428
  %3986 = add i64 %3980, -52
  %3987 = add i64 %3982, 11
  store i64 %3987, i64* %PC, align 8
  %3988 = inttoptr i64 %3986 to i32*
  %3989 = load i32, i32* %3988, align 4
  %3990 = sext i32 %3989 to i64
  store i64 %3990, i64* %RCX, align 8, !tbaa !2428
  %3991 = shl nsw i64 %3990, 3
  %3992 = add i64 %3991, %3985
  %3993 = add i64 %3982, 16
  store i64 %3993, i64* %PC, align 8
  %3994 = inttoptr i64 %3992 to i64*
  %3995 = load i64, i64* %3994, align 8
  store i64 %3995, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3996 = add i64 %3980, -184
  %3997 = add i64 %3982, 23
  store i64 %3997, i64* %PC, align 8
  %3998 = inttoptr i64 %3996 to i64*
  %3999 = load i64, i64* %3998, align 8
  store i64 %3999, i64* %RAX, align 8, !tbaa !2428
  %4000 = add i64 %3982, 27
  store i64 %4000, i64* %PC, align 8
  %4001 = load i32, i32* %3988, align 4
  %4002 = sext i32 %4001 to i64
  store i64 %4002, i64* %RCX, align 8, !tbaa !2428
  %4003 = shl nsw i64 %4002, 3
  %4004 = add i64 %4003, %3999
  %4005 = add i64 %3982, 32
  store i64 %4005, i64* %PC, align 8
  %4006 = bitcast i64 %3995 to double
  %4007 = inttoptr i64 %4004 to double*
  %4008 = load double, double* %4007, align 8
  %4009 = fdiv double %4006, %4008
  store double %4009, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %4010 = add i64 %3980, -112
  %4011 = add i64 %3982, 36
  store i64 %4011, i64* %PC, align 8
  %4012 = inttoptr i64 %4010 to i64*
  %4013 = load i64, i64* %4012, align 8
  store i64 %4013, i64* %RAX, align 8, !tbaa !2428
  %4014 = add i64 %3980, -188
  %4015 = add i64 %3982, 43
  store i64 %4015, i64* %PC, align 8
  %4016 = inttoptr i64 %4014 to i32*
  %4017 = load i32, i32* %4016, align 4
  %4018 = sext i32 %4017 to i64
  %4019 = mul nsw i64 %4018, 33800
  store i64 %4019, i64* %RCX, align 8, !tbaa !2428
  %4020 = lshr i64 %4019, 63
  %4021 = add i64 %4019, %4013
  store i64 %4021, i64* %RAX, align 8, !tbaa !2428
  %4022 = icmp ult i64 %4021, %4013
  %4023 = icmp ult i64 %4021, %4019
  %4024 = or i1 %4022, %4023
  %4025 = zext i1 %4024 to i8
  store i8 %4025, i8* %42, align 1, !tbaa !2432
  %4026 = trunc i64 %4021 to i32
  %4027 = and i32 %4026, 255
  %4028 = tail call i32 @llvm.ctpop.i32(i32 %4027) #9
  %4029 = trunc i32 %4028 to i8
  %4030 = and i8 %4029, 1
  %4031 = xor i8 %4030, 1
  store i8 %4031, i8* %49, align 1, !tbaa !2446
  %4032 = xor i64 %4019, %4013
  %4033 = xor i64 %4032, %4021
  %4034 = lshr i64 %4033, 4
  %4035 = trunc i64 %4034 to i8
  %4036 = and i8 %4035, 1
  store i8 %4036, i8* %55, align 1, !tbaa !2450
  %4037 = icmp eq i64 %4021, 0
  %4038 = zext i1 %4037 to i8
  store i8 %4038, i8* %58, align 1, !tbaa !2447
  %4039 = lshr i64 %4021, 63
  %4040 = trunc i64 %4039 to i8
  store i8 %4040, i8* %61, align 1, !tbaa !2448
  %4041 = lshr i64 %4013, 63
  %4042 = xor i64 %4039, %4041
  %4043 = xor i64 %4039, %4020
  %4044 = add nuw nsw i64 %4042, %4043
  %4045 = icmp eq i64 %4044, 2
  %4046 = zext i1 %4045 to i8
  store i8 %4046, i8* %67, align 1, !tbaa !2449
  %4047 = load i64, i64* %RBP, align 8
  %4048 = add i64 %4047, -52
  %4049 = add i64 %3982, 57
  store i64 %4049, i64* %PC, align 8
  %4050 = inttoptr i64 %4048 to i32*
  %4051 = load i32, i32* %4050, align 4
  %4052 = sext i32 %4051 to i64
  %4053 = mul nsw i64 %4052, 520
  store i64 %4053, i64* %RCX, align 8, !tbaa !2428
  %4054 = lshr i64 %4053, 63
  %4055 = add i64 %4053, %4021
  store i64 %4055, i64* %RAX, align 8, !tbaa !2428
  %4056 = icmp ult i64 %4055, %4021
  %4057 = icmp ult i64 %4055, %4053
  %4058 = or i1 %4056, %4057
  %4059 = zext i1 %4058 to i8
  store i8 %4059, i8* %42, align 1, !tbaa !2432
  %4060 = trunc i64 %4055 to i32
  %4061 = and i32 %4060, 255
  %4062 = tail call i32 @llvm.ctpop.i32(i32 %4061) #9
  %4063 = trunc i32 %4062 to i8
  %4064 = and i8 %4063, 1
  %4065 = xor i8 %4064, 1
  store i8 %4065, i8* %49, align 1, !tbaa !2446
  %4066 = xor i64 %4053, %4021
  %4067 = xor i64 %4066, %4055
  %4068 = lshr i64 %4067, 4
  %4069 = trunc i64 %4068 to i8
  %4070 = and i8 %4069, 1
  store i8 %4070, i8* %55, align 1, !tbaa !2450
  %4071 = icmp eq i64 %4055, 0
  %4072 = zext i1 %4071 to i8
  store i8 %4072, i8* %58, align 1, !tbaa !2447
  %4073 = lshr i64 %4055, 63
  %4074 = trunc i64 %4073 to i8
  store i8 %4074, i8* %61, align 1, !tbaa !2448
  %4075 = xor i64 %4073, %4039
  %4076 = xor i64 %4073, %4054
  %4077 = add nuw nsw i64 %4075, %4076
  %4078 = icmp eq i64 %4077, 2
  %4079 = zext i1 %4078 to i8
  store i8 %4079, i8* %67, align 1, !tbaa !2449
  %4080 = add i64 %4047, -48
  %4081 = add i64 %3982, 71
  store i64 %4081, i64* %PC, align 8
  %4082 = inttoptr i64 %4080 to i32*
  %4083 = load i32, i32* %4082, align 4
  %4084 = sext i32 %4083 to i64
  store i64 %4084, i64* %RCX, align 8, !tbaa !2428
  %4085 = shl nsw i64 %4084, 3
  %4086 = add i64 %4085, %4055
  %4087 = add i64 %3982, 76
  store i64 %4087, i64* %PC, align 8
  %4088 = load double, double* %257, align 1
  %4089 = inttoptr i64 %4086 to double*
  %4090 = load double, double* %4089, align 8
  %4091 = fmul double %4088, %4090
  store double %4091, double* %257, align 1, !tbaa !2452
  %4092 = add i64 %4047, -72
  %4093 = add i64 %3982, 81
  store i64 %4093, i64* %PC, align 8
  %4094 = inttoptr i64 %4092 to i64*
  %4095 = load i64, i64* %4094, align 8
  store i64 %4095, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %4096 = add i64 %4047, -184
  %4097 = add i64 %3982, 88
  store i64 %4097, i64* %PC, align 8
  %4098 = inttoptr i64 %4096 to i64*
  %4099 = load i64, i64* %4098, align 8
  store i64 %4099, i64* %RAX, align 8, !tbaa !2428
  %4100 = add i64 %3982, 92
  store i64 %4100, i64* %PC, align 8
  %4101 = load i32, i32* %4050, align 4
  %4102 = sext i32 %4101 to i64
  store i64 %4102, i64* %RCX, align 8, !tbaa !2428
  %4103 = shl nsw i64 %4102, 3
  %4104 = add i64 %4103, %4099
  %4105 = add i64 %3982, 97
  store i64 %4105, i64* %PC, align 8
  %4106 = bitcast i64 %4095 to double
  %4107 = inttoptr i64 %4104 to double*
  %4108 = load double, double* %4107, align 8
  %4109 = fdiv double %4106, %4108
  store double %4109, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4110 = load i64, i64* %RBP, align 8
  %4111 = add i64 %4110, -96
  %4112 = add i64 %3982, 101
  store i64 %4112, i64* %PC, align 8
  %4113 = inttoptr i64 %4111 to i64*
  %4114 = load i64, i64* %4113, align 8
  store i64 %4114, i64* %RAX, align 8, !tbaa !2428
  %4115 = add i64 %4110, -188
  %4116 = add i64 %3982, 108
  store i64 %4116, i64* %PC, align 8
  %4117 = inttoptr i64 %4115 to i32*
  %4118 = load i32, i32* %4117, align 4
  %4119 = sext i32 %4118 to i64
  %4120 = mul nsw i64 %4119, 520
  store i64 %4120, i64* %RCX, align 8, !tbaa !2428
  %4121 = lshr i64 %4120, 63
  %4122 = add i64 %4120, %4114
  store i64 %4122, i64* %RAX, align 8, !tbaa !2428
  %4123 = icmp ult i64 %4122, %4114
  %4124 = icmp ult i64 %4122, %4120
  %4125 = or i1 %4123, %4124
  %4126 = zext i1 %4125 to i8
  store i8 %4126, i8* %42, align 1, !tbaa !2432
  %4127 = trunc i64 %4122 to i32
  %4128 = and i32 %4127, 255
  %4129 = tail call i32 @llvm.ctpop.i32(i32 %4128) #9
  %4130 = trunc i32 %4129 to i8
  %4131 = and i8 %4130, 1
  %4132 = xor i8 %4131, 1
  store i8 %4132, i8* %49, align 1, !tbaa !2446
  %4133 = xor i64 %4120, %4114
  %4134 = xor i64 %4133, %4122
  %4135 = lshr i64 %4134, 4
  %4136 = trunc i64 %4135 to i8
  %4137 = and i8 %4136, 1
  store i8 %4137, i8* %55, align 1, !tbaa !2450
  %4138 = icmp eq i64 %4122, 0
  %4139 = zext i1 %4138 to i8
  store i8 %4139, i8* %58, align 1, !tbaa !2447
  %4140 = lshr i64 %4122, 63
  %4141 = trunc i64 %4140 to i8
  store i8 %4141, i8* %61, align 1, !tbaa !2448
  %4142 = lshr i64 %4114, 63
  %4143 = xor i64 %4140, %4142
  %4144 = xor i64 %4140, %4121
  %4145 = add nuw nsw i64 %4143, %4144
  %4146 = icmp eq i64 %4145, 2
  %4147 = zext i1 %4146 to i8
  store i8 %4147, i8* %67, align 1, !tbaa !2449
  %4148 = add i64 %4110, -192
  %4149 = add i64 %3982, 125
  store i64 %4149, i64* %PC, align 8
  %4150 = inttoptr i64 %4148 to i32*
  %4151 = load i32, i32* %4150, align 4
  %4152 = sext i32 %4151 to i64
  store i64 %4152, i64* %RCX, align 8, !tbaa !2428
  %4153 = shl nsw i64 %4152, 3
  %4154 = add i64 %4153, %4122
  %4155 = add i64 %3982, 130
  store i64 %4155, i64* %PC, align 8
  %4156 = inttoptr i64 %4154 to double*
  %4157 = load double, double* %4156, align 8
  %4158 = fmul double %4109, %4157
  store double %4158, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4159 = load double, double* %257, align 1
  %4160 = fsub double %4159, %4158
  store double %4160, double* %257, align 1, !tbaa !2452
  %4161 = add i64 %4110, -104
  %4162 = add i64 %3982, 138
  store i64 %4162, i64* %PC, align 8
  %4163 = inttoptr i64 %4161 to i64*
  %4164 = load i64, i64* %4163, align 8
  store i64 %4164, i64* %RAX, align 8, !tbaa !2428
  %4165 = load i64, i64* %RBP, align 8
  %4166 = add i64 %4165, -188
  %4167 = add i64 %3982, 145
  store i64 %4167, i64* %PC, align 8
  %4168 = inttoptr i64 %4166 to i32*
  %4169 = load i32, i32* %4168, align 4
  %4170 = sext i32 %4169 to i64
  %4171 = mul nsw i64 %4170, 520
  store i64 %4171, i64* %RCX, align 8, !tbaa !2428
  %4172 = lshr i64 %4171, 63
  %4173 = add i64 %4171, %4164
  store i64 %4173, i64* %RAX, align 8, !tbaa !2428
  %4174 = icmp ult i64 %4173, %4164
  %4175 = icmp ult i64 %4173, %4171
  %4176 = or i1 %4174, %4175
  %4177 = zext i1 %4176 to i8
  store i8 %4177, i8* %42, align 1, !tbaa !2432
  %4178 = trunc i64 %4173 to i32
  %4179 = and i32 %4178, 255
  %4180 = tail call i32 @llvm.ctpop.i32(i32 %4179) #9
  %4181 = trunc i32 %4180 to i8
  %4182 = and i8 %4181, 1
  %4183 = xor i8 %4182, 1
  store i8 %4183, i8* %49, align 1, !tbaa !2446
  %4184 = xor i64 %4171, %4164
  %4185 = xor i64 %4184, %4173
  %4186 = lshr i64 %4185, 4
  %4187 = trunc i64 %4186 to i8
  %4188 = and i8 %4187, 1
  store i8 %4188, i8* %55, align 1, !tbaa !2450
  %4189 = icmp eq i64 %4173, 0
  %4190 = zext i1 %4189 to i8
  store i8 %4190, i8* %58, align 1, !tbaa !2447
  %4191 = lshr i64 %4173, 63
  %4192 = trunc i64 %4191 to i8
  store i8 %4192, i8* %61, align 1, !tbaa !2448
  %4193 = lshr i64 %4164, 63
  %4194 = xor i64 %4191, %4193
  %4195 = xor i64 %4191, %4172
  %4196 = add nuw nsw i64 %4194, %4195
  %4197 = icmp eq i64 %4196, 2
  %4198 = zext i1 %4197 to i8
  store i8 %4198, i8* %67, align 1, !tbaa !2449
  %4199 = add i64 %4165, -192
  %4200 = add i64 %3982, 162
  store i64 %4200, i64* %PC, align 8
  %4201 = inttoptr i64 %4199 to i32*
  %4202 = load i32, i32* %4201, align 4
  %4203 = sext i32 %4202 to i64
  store i64 %4203, i64* %RCX, align 8, !tbaa !2428
  %4204 = shl nsw i64 %4203, 3
  %4205 = add i64 %4204, %4173
  %4206 = add i64 %3982, 167
  store i64 %4206, i64* %PC, align 8
  %4207 = inttoptr i64 %4205 to double*
  store double %4160, double* %4207, align 8
  %4208 = load i64, i64* %RBP, align 8
  %4209 = add i64 %4208, -160
  %4210 = load i64, i64* %PC, align 8
  %4211 = add i64 %4210, 7
  store i64 %4211, i64* %PC, align 8
  %4212 = inttoptr i64 %4209 to i64*
  %4213 = load i64, i64* %4212, align 8
  store i64 %4213, i64* %RAX, align 8, !tbaa !2428
  %4214 = add i64 %4208, -48
  %4215 = add i64 %4210, 11
  store i64 %4215, i64* %PC, align 8
  %4216 = inttoptr i64 %4214 to i32*
  %4217 = load i32, i32* %4216, align 4
  %4218 = sext i32 %4217 to i64
  store i64 %4218, i64* %RCX, align 8, !tbaa !2428
  %4219 = shl nsw i64 %4218, 3
  %4220 = add i64 %4219, %4213
  %4221 = add i64 %4210, 16
  store i64 %4221, i64* %PC, align 8
  %4222 = inttoptr i64 %4220 to i64*
  %4223 = load i64, i64* %4222, align 8
  store i64 %4223, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %4224 = add i64 %4208, -168
  %4225 = add i64 %4210, 23
  store i64 %4225, i64* %PC, align 8
  %4226 = inttoptr i64 %4224 to i64*
  %4227 = load i64, i64* %4226, align 8
  store i64 %4227, i64* %RAX, align 8, !tbaa !2428
  %4228 = add i64 %4210, 27
  store i64 %4228, i64* %PC, align 8
  %4229 = load i32, i32* %4216, align 4
  %4230 = sext i32 %4229 to i64
  store i64 %4230, i64* %RCX, align 8, !tbaa !2428
  %4231 = shl nsw i64 %4230, 3
  %4232 = add i64 %4231, %4227
  %4233 = add i64 %4210, 32
  store i64 %4233, i64* %PC, align 8
  %4234 = bitcast i64 %4223 to double
  %4235 = inttoptr i64 %4232 to double*
  %4236 = load double, double* %4235, align 8
  %4237 = fdiv double %4234, %4236
  store double %4237, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %4238 = add i64 %4208, -136
  %4239 = add i64 %4210, 39
  store i64 %4239, i64* %PC, align 8
  %4240 = inttoptr i64 %4238 to i64*
  %4241 = load i64, i64* %4240, align 8
  store i64 %4241, i64* %RAX, align 8, !tbaa !2428
  %4242 = add i64 %4208, -188
  %4243 = add i64 %4210, 46
  store i64 %4243, i64* %PC, align 8
  %4244 = inttoptr i64 %4242 to i32*
  %4245 = load i32, i32* %4244, align 4
  %4246 = sext i32 %4245 to i64
  %4247 = mul nsw i64 %4246, 33800
  store i64 %4247, i64* %RCX, align 8, !tbaa !2428
  %4248 = lshr i64 %4247, 63
  %4249 = add i64 %4247, %4241
  store i64 %4249, i64* %RAX, align 8, !tbaa !2428
  %4250 = icmp ult i64 %4249, %4241
  %4251 = icmp ult i64 %4249, %4247
  %4252 = or i1 %4250, %4251
  %4253 = zext i1 %4252 to i8
  store i8 %4253, i8* %42, align 1, !tbaa !2432
  %4254 = trunc i64 %4249 to i32
  %4255 = and i32 %4254, 255
  %4256 = tail call i32 @llvm.ctpop.i32(i32 %4255) #9
  %4257 = trunc i32 %4256 to i8
  %4258 = and i8 %4257, 1
  %4259 = xor i8 %4258, 1
  store i8 %4259, i8* %49, align 1, !tbaa !2446
  %4260 = xor i64 %4247, %4241
  %4261 = xor i64 %4260, %4249
  %4262 = lshr i64 %4261, 4
  %4263 = trunc i64 %4262 to i8
  %4264 = and i8 %4263, 1
  store i8 %4264, i8* %55, align 1, !tbaa !2450
  %4265 = icmp eq i64 %4249, 0
  %4266 = zext i1 %4265 to i8
  store i8 %4266, i8* %58, align 1, !tbaa !2447
  %4267 = lshr i64 %4249, 63
  %4268 = trunc i64 %4267 to i8
  store i8 %4268, i8* %61, align 1, !tbaa !2448
  %4269 = lshr i64 %4241, 63
  %4270 = xor i64 %4267, %4269
  %4271 = xor i64 %4267, %4248
  %4272 = add nuw nsw i64 %4270, %4271
  %4273 = icmp eq i64 %4272, 2
  %4274 = zext i1 %4273 to i8
  store i8 %4274, i8* %67, align 1, !tbaa !2449
  %4275 = load i64, i64* %RBP, align 8
  %4276 = add i64 %4275, -52
  %4277 = add i64 %4210, 60
  store i64 %4277, i64* %PC, align 8
  %4278 = inttoptr i64 %4276 to i32*
  %4279 = load i32, i32* %4278, align 4
  %4280 = sext i32 %4279 to i64
  %4281 = mul nsw i64 %4280, 520
  store i64 %4281, i64* %RCX, align 8, !tbaa !2428
  %4282 = lshr i64 %4281, 63
  %4283 = add i64 %4281, %4249
  store i64 %4283, i64* %RAX, align 8, !tbaa !2428
  %4284 = icmp ult i64 %4283, %4249
  %4285 = icmp ult i64 %4283, %4281
  %4286 = or i1 %4284, %4285
  %4287 = zext i1 %4286 to i8
  store i8 %4287, i8* %42, align 1, !tbaa !2432
  %4288 = trunc i64 %4283 to i32
  %4289 = and i32 %4288, 255
  %4290 = tail call i32 @llvm.ctpop.i32(i32 %4289) #9
  %4291 = trunc i32 %4290 to i8
  %4292 = and i8 %4291, 1
  %4293 = xor i8 %4292, 1
  store i8 %4293, i8* %49, align 1, !tbaa !2446
  %4294 = xor i64 %4281, %4249
  %4295 = xor i64 %4294, %4283
  %4296 = lshr i64 %4295, 4
  %4297 = trunc i64 %4296 to i8
  %4298 = and i8 %4297, 1
  store i8 %4298, i8* %55, align 1, !tbaa !2450
  %4299 = icmp eq i64 %4283, 0
  %4300 = zext i1 %4299 to i8
  store i8 %4300, i8* %58, align 1, !tbaa !2447
  %4301 = lshr i64 %4283, 63
  %4302 = trunc i64 %4301 to i8
  store i8 %4302, i8* %61, align 1, !tbaa !2448
  %4303 = xor i64 %4301, %4267
  %4304 = xor i64 %4301, %4282
  %4305 = add nuw nsw i64 %4303, %4304
  %4306 = icmp eq i64 %4305, 2
  %4307 = zext i1 %4306 to i8
  store i8 %4307, i8* %67, align 1, !tbaa !2449
  %4308 = add i64 %4275, -48
  %4309 = add i64 %4210, 74
  store i64 %4309, i64* %PC, align 8
  %4310 = inttoptr i64 %4308 to i32*
  %4311 = load i32, i32* %4310, align 4
  %4312 = sext i32 %4311 to i64
  store i64 %4312, i64* %RCX, align 8, !tbaa !2428
  %4313 = shl nsw i64 %4312, 3
  %4314 = add i64 %4313, %4283
  %4315 = add i64 %4210, 79
  store i64 %4315, i64* %PC, align 8
  %4316 = load double, double* %257, align 1
  %4317 = inttoptr i64 %4314 to double*
  %4318 = load double, double* %4317, align 8
  %4319 = fmul double %4316, %4318
  store double %4319, double* %257, align 1, !tbaa !2452
  %4320 = add i64 %4275, -64
  %4321 = add i64 %4210, 84
  store i64 %4321, i64* %PC, align 8
  %4322 = inttoptr i64 %4320 to i64*
  %4323 = load i64, i64* %4322, align 8
  store i64 %4323, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %4324 = add i64 %4275, -152
  %4325 = add i64 %4210, 91
  store i64 %4325, i64* %PC, align 8
  %4326 = inttoptr i64 %4324 to i64*
  %4327 = load i64, i64* %4326, align 8
  store i64 %4327, i64* %RAX, align 8, !tbaa !2428
  %4328 = add i64 %4275, -188
  %4329 = add i64 %4210, 98
  store i64 %4329, i64* %PC, align 8
  %4330 = inttoptr i64 %4328 to i32*
  %4331 = load i32, i32* %4330, align 4
  %4332 = sext i32 %4331 to i64
  store i64 %4332, i64* %RCX, align 8, !tbaa !2428
  %4333 = shl nsw i64 %4332, 3
  %4334 = add i64 %4333, %4327
  %4335 = add i64 %4210, 103
  store i64 %4335, i64* %PC, align 8
  %4336 = bitcast i64 %4323 to double
  %4337 = inttoptr i64 %4334 to double*
  %4338 = load double, double* %4337, align 8
  %4339 = fmul double %4336, %4338
  store double %4339, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4340 = load i64, i64* %RBP, align 8
  %4341 = add i64 %4340, -168
  %4342 = add i64 %4210, 110
  store i64 %4342, i64* %PC, align 8
  %4343 = inttoptr i64 %4341 to i64*
  %4344 = load i64, i64* %4343, align 8
  store i64 %4344, i64* %RAX, align 8, !tbaa !2428
  %4345 = add i64 %4340, -48
  %4346 = add i64 %4210, 114
  store i64 %4346, i64* %PC, align 8
  %4347 = inttoptr i64 %4345 to i32*
  %4348 = load i32, i32* %4347, align 4
  %4349 = sext i32 %4348 to i64
  store i64 %4349, i64* %RCX, align 8, !tbaa !2428
  %4350 = shl nsw i64 %4349, 3
  %4351 = add i64 %4350, %4344
  %4352 = add i64 %4210, 119
  store i64 %4352, i64* %PC, align 8
  %4353 = inttoptr i64 %4351 to double*
  %4354 = load double, double* %4353, align 8
  %4355 = fdiv double %4339, %4354
  store double %4355, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4356 = add i64 %4340, -104
  %4357 = add i64 %4210, 123
  store i64 %4357, i64* %PC, align 8
  %4358 = inttoptr i64 %4356 to i64*
  %4359 = load i64, i64* %4358, align 8
  store i64 %4359, i64* %RAX, align 8, !tbaa !2428
  %4360 = add i64 %4340, -188
  %4361 = add i64 %4210, 130
  store i64 %4361, i64* %PC, align 8
  %4362 = inttoptr i64 %4360 to i32*
  %4363 = load i32, i32* %4362, align 4
  %4364 = sext i32 %4363 to i64
  %4365 = mul nsw i64 %4364, 520
  store i64 %4365, i64* %RCX, align 8, !tbaa !2428
  %4366 = lshr i64 %4365, 63
  %4367 = add i64 %4365, %4359
  store i64 %4367, i64* %RAX, align 8, !tbaa !2428
  %4368 = icmp ult i64 %4367, %4359
  %4369 = icmp ult i64 %4367, %4365
  %4370 = or i1 %4368, %4369
  %4371 = zext i1 %4370 to i8
  store i8 %4371, i8* %42, align 1, !tbaa !2432
  %4372 = trunc i64 %4367 to i32
  %4373 = and i32 %4372, 255
  %4374 = tail call i32 @llvm.ctpop.i32(i32 %4373) #9
  %4375 = trunc i32 %4374 to i8
  %4376 = and i8 %4375, 1
  %4377 = xor i8 %4376, 1
  store i8 %4377, i8* %49, align 1, !tbaa !2446
  %4378 = xor i64 %4365, %4359
  %4379 = xor i64 %4378, %4367
  %4380 = lshr i64 %4379, 4
  %4381 = trunc i64 %4380 to i8
  %4382 = and i8 %4381, 1
  store i8 %4382, i8* %55, align 1, !tbaa !2450
  %4383 = icmp eq i64 %4367, 0
  %4384 = zext i1 %4383 to i8
  store i8 %4384, i8* %58, align 1, !tbaa !2447
  %4385 = lshr i64 %4367, 63
  %4386 = trunc i64 %4385 to i8
  store i8 %4386, i8* %61, align 1, !tbaa !2448
  %4387 = lshr i64 %4359, 63
  %4388 = xor i64 %4385, %4387
  %4389 = xor i64 %4385, %4366
  %4390 = add nuw nsw i64 %4388, %4389
  %4391 = icmp eq i64 %4390, 2
  %4392 = zext i1 %4391 to i8
  store i8 %4392, i8* %67, align 1, !tbaa !2449
  %4393 = add i64 %4340, -192
  %4394 = add i64 %4210, 147
  store i64 %4394, i64* %PC, align 8
  %4395 = inttoptr i64 %4393 to i32*
  %4396 = load i32, i32* %4395, align 4
  %4397 = sext i32 %4396 to i64
  store i64 %4397, i64* %RCX, align 8, !tbaa !2428
  %4398 = shl nsw i64 %4397, 3
  %4399 = add i64 %4398, %4367
  %4400 = add i64 %4210, 152
  store i64 %4400, i64* %PC, align 8
  %4401 = inttoptr i64 %4399 to double*
  %4402 = load double, double* %4401, align 8
  %4403 = fmul double %4355, %4402
  store double %4403, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4404 = load double, double* %257, align 1
  %4405 = fadd double %4404, %4403
  store double %4405, double* %257, align 1, !tbaa !2452
  %4406 = load i64, i64* %RBP, align 8
  %4407 = add i64 %4406, -64
  %4408 = add i64 %4210, 161
  store i64 %4408, i64* %PC, align 8
  %4409 = inttoptr i64 %4407 to i64*
  %4410 = load i64, i64* %4409, align 8
  store i64 %4410, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %4411 = add i64 %4406, -144
  %4412 = add i64 %4210, 168
  store i64 %4412, i64* %PC, align 8
  %4413 = inttoptr i64 %4411 to i64*
  %4414 = load i64, i64* %4413, align 8
  store i64 %4414, i64* %RAX, align 8, !tbaa !2428
  %4415 = add i64 %4406, -188
  %4416 = add i64 %4210, 175
  store i64 %4416, i64* %PC, align 8
  %4417 = inttoptr i64 %4415 to i32*
  %4418 = load i32, i32* %4417, align 4
  %4419 = sext i32 %4418 to i64
  store i64 %4419, i64* %RCX, align 8, !tbaa !2428
  %4420 = shl nsw i64 %4419, 3
  %4421 = add i64 %4420, %4414
  %4422 = add i64 %4210, 180
  store i64 %4422, i64* %PC, align 8
  %4423 = bitcast i64 %4410 to double
  %4424 = inttoptr i64 %4421 to double*
  %4425 = load double, double* %4424, align 8
  %4426 = fmul double %4423, %4425
  store double %4426, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4427 = add i64 %4406, -168
  %4428 = add i64 %4210, 187
  store i64 %4428, i64* %PC, align 8
  %4429 = inttoptr i64 %4427 to i64*
  %4430 = load i64, i64* %4429, align 8
  store i64 %4430, i64* %RAX, align 8, !tbaa !2428
  %4431 = add i64 %4406, -48
  %4432 = add i64 %4210, 191
  store i64 %4432, i64* %PC, align 8
  %4433 = inttoptr i64 %4431 to i32*
  %4434 = load i32, i32* %4433, align 4
  %4435 = sext i32 %4434 to i64
  store i64 %4435, i64* %RCX, align 8, !tbaa !2428
  %4436 = shl nsw i64 %4435, 3
  %4437 = add i64 %4436, %4430
  %4438 = add i64 %4210, 196
  store i64 %4438, i64* %PC, align 8
  %4439 = inttoptr i64 %4437 to double*
  %4440 = load double, double* %4439, align 8
  %4441 = fdiv double %4426, %4440
  store double %4441, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4442 = add i64 %4406, -112
  %4443 = add i64 %4210, 200
  store i64 %4443, i64* %PC, align 8
  %4444 = inttoptr i64 %4442 to i64*
  %4445 = load i64, i64* %4444, align 8
  store i64 %4445, i64* %RAX, align 8, !tbaa !2428
  %4446 = add i64 %4210, 207
  store i64 %4446, i64* %PC, align 8
  %4447 = load i32, i32* %4417, align 4
  %4448 = sext i32 %4447 to i64
  %4449 = mul nsw i64 %4448, 33800
  store i64 %4449, i64* %RCX, align 8, !tbaa !2428
  %4450 = lshr i64 %4449, 63
  %4451 = add i64 %4449, %4445
  store i64 %4451, i64* %RAX, align 8, !tbaa !2428
  %4452 = icmp ult i64 %4451, %4445
  %4453 = icmp ult i64 %4451, %4449
  %4454 = or i1 %4452, %4453
  %4455 = zext i1 %4454 to i8
  store i8 %4455, i8* %42, align 1, !tbaa !2432
  %4456 = trunc i64 %4451 to i32
  %4457 = and i32 %4456, 255
  %4458 = tail call i32 @llvm.ctpop.i32(i32 %4457) #9
  %4459 = trunc i32 %4458 to i8
  %4460 = and i8 %4459, 1
  %4461 = xor i8 %4460, 1
  store i8 %4461, i8* %49, align 1, !tbaa !2446
  %4462 = xor i64 %4449, %4445
  %4463 = xor i64 %4462, %4451
  %4464 = lshr i64 %4463, 4
  %4465 = trunc i64 %4464 to i8
  %4466 = and i8 %4465, 1
  store i8 %4466, i8* %55, align 1, !tbaa !2450
  %4467 = icmp eq i64 %4451, 0
  %4468 = zext i1 %4467 to i8
  store i8 %4468, i8* %58, align 1, !tbaa !2447
  %4469 = lshr i64 %4451, 63
  %4470 = trunc i64 %4469 to i8
  store i8 %4470, i8* %61, align 1, !tbaa !2448
  %4471 = lshr i64 %4445, 63
  %4472 = xor i64 %4469, %4471
  %4473 = xor i64 %4469, %4450
  %4474 = add nuw nsw i64 %4472, %4473
  %4475 = icmp eq i64 %4474, 2
  %4476 = zext i1 %4475 to i8
  store i8 %4476, i8* %67, align 1, !tbaa !2449
  %4477 = load i64, i64* %RBP, align 8
  %4478 = add i64 %4477, -52
  %4479 = add i64 %4210, 221
  store i64 %4479, i64* %PC, align 8
  %4480 = inttoptr i64 %4478 to i32*
  %4481 = load i32, i32* %4480, align 4
  %4482 = sext i32 %4481 to i64
  %4483 = mul nsw i64 %4482, 520
  store i64 %4483, i64* %RCX, align 8, !tbaa !2428
  %4484 = lshr i64 %4483, 63
  %4485 = add i64 %4483, %4451
  store i64 %4485, i64* %RAX, align 8, !tbaa !2428
  %4486 = icmp ult i64 %4485, %4451
  %4487 = icmp ult i64 %4485, %4483
  %4488 = or i1 %4486, %4487
  %4489 = zext i1 %4488 to i8
  store i8 %4489, i8* %42, align 1, !tbaa !2432
  %4490 = trunc i64 %4485 to i32
  %4491 = and i32 %4490, 255
  %4492 = tail call i32 @llvm.ctpop.i32(i32 %4491) #9
  %4493 = trunc i32 %4492 to i8
  %4494 = and i8 %4493, 1
  %4495 = xor i8 %4494, 1
  store i8 %4495, i8* %49, align 1, !tbaa !2446
  %4496 = xor i64 %4483, %4451
  %4497 = xor i64 %4496, %4485
  %4498 = lshr i64 %4497, 4
  %4499 = trunc i64 %4498 to i8
  %4500 = and i8 %4499, 1
  store i8 %4500, i8* %55, align 1, !tbaa !2450
  %4501 = icmp eq i64 %4485, 0
  %4502 = zext i1 %4501 to i8
  store i8 %4502, i8* %58, align 1, !tbaa !2447
  %4503 = lshr i64 %4485, 63
  %4504 = trunc i64 %4503 to i8
  store i8 %4504, i8* %61, align 1, !tbaa !2448
  %4505 = xor i64 %4503, %4469
  %4506 = xor i64 %4503, %4484
  %4507 = add nuw nsw i64 %4505, %4506
  %4508 = icmp eq i64 %4507, 2
  %4509 = zext i1 %4508 to i8
  store i8 %4509, i8* %67, align 1, !tbaa !2449
  %4510 = add i64 %4477, -48
  %4511 = add i64 %4210, 235
  store i64 %4511, i64* %PC, align 8
  %4512 = inttoptr i64 %4510 to i32*
  %4513 = load i32, i32* %4512, align 4
  %4514 = sext i32 %4513 to i64
  store i64 %4514, i64* %RCX, align 8, !tbaa !2428
  %4515 = shl nsw i64 %4514, 3
  %4516 = add i64 %4515, %4485
  %4517 = add i64 %4210, 240
  store i64 %4517, i64* %PC, align 8
  %4518 = load double, double* %155, align 1
  %4519 = inttoptr i64 %4516 to double*
  %4520 = load double, double* %4519, align 8
  %4521 = fmul double %4518, %4520
  store double %4521, double* %155, align 1, !tbaa !2452
  %4522 = load double, double* %257, align 1
  %4523 = fsub double %4522, %4521
  store double %4523, double* %257, align 1, !tbaa !2452
  %4524 = add i64 %4477, -136
  %4525 = add i64 %4210, 251
  store i64 %4525, i64* %PC, align 8
  %4526 = inttoptr i64 %4524 to i64*
  %4527 = load i64, i64* %4526, align 8
  store i64 %4527, i64* %RAX, align 8, !tbaa !2428
  %4528 = add i64 %4477, -188
  %4529 = add i64 %4210, 258
  store i64 %4529, i64* %PC, align 8
  %4530 = inttoptr i64 %4528 to i32*
  %4531 = load i32, i32* %4530, align 4
  %4532 = sext i32 %4531 to i64
  %4533 = mul nsw i64 %4532, 33800
  store i64 %4533, i64* %RCX, align 8, !tbaa !2428
  %4534 = lshr i64 %4533, 63
  %4535 = add i64 %4533, %4527
  store i64 %4535, i64* %RAX, align 8, !tbaa !2428
  %4536 = icmp ult i64 %4535, %4527
  %4537 = icmp ult i64 %4535, %4533
  %4538 = or i1 %4536, %4537
  %4539 = zext i1 %4538 to i8
  store i8 %4539, i8* %42, align 1, !tbaa !2432
  %4540 = trunc i64 %4535 to i32
  %4541 = and i32 %4540, 255
  %4542 = tail call i32 @llvm.ctpop.i32(i32 %4541) #9
  %4543 = trunc i32 %4542 to i8
  %4544 = and i8 %4543, 1
  %4545 = xor i8 %4544, 1
  store i8 %4545, i8* %49, align 1, !tbaa !2446
  %4546 = xor i64 %4533, %4527
  %4547 = xor i64 %4546, %4535
  %4548 = lshr i64 %4547, 4
  %4549 = trunc i64 %4548 to i8
  %4550 = and i8 %4549, 1
  store i8 %4550, i8* %55, align 1, !tbaa !2450
  %4551 = icmp eq i64 %4535, 0
  %4552 = zext i1 %4551 to i8
  store i8 %4552, i8* %58, align 1, !tbaa !2447
  %4553 = lshr i64 %4535, 63
  %4554 = trunc i64 %4553 to i8
  store i8 %4554, i8* %61, align 1, !tbaa !2448
  %4555 = lshr i64 %4527, 63
  %4556 = xor i64 %4553, %4555
  %4557 = xor i64 %4553, %4534
  %4558 = add nuw nsw i64 %4556, %4557
  %4559 = icmp eq i64 %4558, 2
  %4560 = zext i1 %4559 to i8
  store i8 %4560, i8* %67, align 1, !tbaa !2449
  %4561 = load i64, i64* %RBP, align 8
  %4562 = add i64 %4561, -52
  %4563 = add i64 %4210, 272
  store i64 %4563, i64* %PC, align 8
  %4564 = inttoptr i64 %4562 to i32*
  %4565 = load i32, i32* %4564, align 4
  %4566 = sext i32 %4565 to i64
  %4567 = mul nsw i64 %4566, 520
  store i64 %4567, i64* %RCX, align 8, !tbaa !2428
  %4568 = lshr i64 %4567, 63
  %4569 = add i64 %4567, %4535
  store i64 %4569, i64* %RAX, align 8, !tbaa !2428
  %4570 = icmp ult i64 %4569, %4535
  %4571 = icmp ult i64 %4569, %4567
  %4572 = or i1 %4570, %4571
  %4573 = zext i1 %4572 to i8
  store i8 %4573, i8* %42, align 1, !tbaa !2432
  %4574 = trunc i64 %4569 to i32
  %4575 = and i32 %4574, 255
  %4576 = tail call i32 @llvm.ctpop.i32(i32 %4575) #9
  %4577 = trunc i32 %4576 to i8
  %4578 = and i8 %4577, 1
  %4579 = xor i8 %4578, 1
  store i8 %4579, i8* %49, align 1, !tbaa !2446
  %4580 = xor i64 %4567, %4535
  %4581 = xor i64 %4580, %4569
  %4582 = lshr i64 %4581, 4
  %4583 = trunc i64 %4582 to i8
  %4584 = and i8 %4583, 1
  store i8 %4584, i8* %55, align 1, !tbaa !2450
  %4585 = icmp eq i64 %4569, 0
  %4586 = zext i1 %4585 to i8
  store i8 %4586, i8* %58, align 1, !tbaa !2447
  %4587 = lshr i64 %4569, 63
  %4588 = trunc i64 %4587 to i8
  store i8 %4588, i8* %61, align 1, !tbaa !2448
  %4589 = xor i64 %4587, %4553
  %4590 = xor i64 %4587, %4568
  %4591 = add nuw nsw i64 %4589, %4590
  %4592 = icmp eq i64 %4591, 2
  %4593 = zext i1 %4592 to i8
  store i8 %4593, i8* %67, align 1, !tbaa !2449
  %4594 = add i64 %4561, -48
  %4595 = add i64 %4210, 286
  store i64 %4595, i64* %PC, align 8
  %4596 = inttoptr i64 %4594 to i32*
  %4597 = load i32, i32* %4596, align 4
  %4598 = sext i32 %4597 to i64
  store i64 %4598, i64* %RCX, align 8, !tbaa !2428
  %4599 = shl nsw i64 %4598, 3
  %4600 = add i64 %4599, %4569
  %4601 = add i64 %4210, 291
  store i64 %4601, i64* %PC, align 8
  %4602 = load i64, i64* %148, align 1
  %4603 = inttoptr i64 %4600 to i64*
  store i64 %4602, i64* %4603, align 8
  %4604 = load i64, i64* %RBP, align 8
  %4605 = add i64 %4604, -104
  %4606 = load i64, i64* %PC, align 8
  %4607 = add i64 %4606, 4
  store i64 %4607, i64* %PC, align 8
  %4608 = inttoptr i64 %4605 to i64*
  %4609 = load i64, i64* %4608, align 8
  store i64 %4609, i64* %RAX, align 8, !tbaa !2428
  %4610 = add i64 %4604, -188
  %4611 = add i64 %4606, 11
  store i64 %4611, i64* %PC, align 8
  %4612 = inttoptr i64 %4610 to i32*
  %4613 = load i32, i32* %4612, align 4
  %4614 = sext i32 %4613 to i64
  %4615 = mul nsw i64 %4614, 520
  store i64 %4615, i64* %RCX, align 8, !tbaa !2428
  %4616 = lshr i64 %4615, 63
  %4617 = add i64 %4615, %4609
  store i64 %4617, i64* %RAX, align 8, !tbaa !2428
  %4618 = icmp ult i64 %4617, %4609
  %4619 = icmp ult i64 %4617, %4615
  %4620 = or i1 %4618, %4619
  %4621 = zext i1 %4620 to i8
  store i8 %4621, i8* %42, align 1, !tbaa !2432
  %4622 = trunc i64 %4617 to i32
  %4623 = and i32 %4622, 255
  %4624 = tail call i32 @llvm.ctpop.i32(i32 %4623) #9
  %4625 = trunc i32 %4624 to i8
  %4626 = and i8 %4625, 1
  %4627 = xor i8 %4626, 1
  store i8 %4627, i8* %49, align 1, !tbaa !2446
  %4628 = xor i64 %4615, %4609
  %4629 = xor i64 %4628, %4617
  %4630 = lshr i64 %4629, 4
  %4631 = trunc i64 %4630 to i8
  %4632 = and i8 %4631, 1
  store i8 %4632, i8* %55, align 1, !tbaa !2450
  %4633 = icmp eq i64 %4617, 0
  %4634 = zext i1 %4633 to i8
  store i8 %4634, i8* %58, align 1, !tbaa !2447
  %4635 = lshr i64 %4617, 63
  %4636 = trunc i64 %4635 to i8
  store i8 %4636, i8* %61, align 1, !tbaa !2448
  %4637 = lshr i64 %4609, 63
  %4638 = xor i64 %4635, %4637
  %4639 = xor i64 %4635, %4616
  %4640 = add nuw nsw i64 %4638, %4639
  %4641 = icmp eq i64 %4640, 2
  %4642 = zext i1 %4641 to i8
  store i8 %4642, i8* %67, align 1, !tbaa !2449
  %4643 = add i64 %4604, -192
  %4644 = add i64 %4606, 28
  store i64 %4644, i64* %PC, align 8
  %4645 = inttoptr i64 %4643 to i32*
  %4646 = load i32, i32* %4645, align 4
  %4647 = sext i32 %4646 to i64
  store i64 %4647, i64* %RCX, align 8, !tbaa !2428
  %4648 = shl nsw i64 %4647, 3
  %4649 = add i64 %4648, %4617
  %4650 = add i64 %4606, 33
  store i64 %4650, i64* %PC, align 8
  %4651 = inttoptr i64 %4649 to i64*
  %4652 = load i64, i64* %4651, align 8
  store i64 %4652, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %4653 = add i64 %4604, -112
  %4654 = add i64 %4606, 37
  store i64 %4654, i64* %PC, align 8
  %4655 = inttoptr i64 %4653 to i64*
  %4656 = load i64, i64* %4655, align 8
  store i64 %4656, i64* %RAX, align 8, !tbaa !2428
  %4657 = add i64 %4606, 44
  store i64 %4657, i64* %PC, align 8
  %4658 = load i32, i32* %4612, align 4
  %4659 = sext i32 %4658 to i64
  %4660 = mul nsw i64 %4659, 33800
  store i64 %4660, i64* %RCX, align 8, !tbaa !2428
  %4661 = lshr i64 %4660, 63
  %4662 = add i64 %4660, %4656
  store i64 %4662, i64* %RAX, align 8, !tbaa !2428
  %4663 = icmp ult i64 %4662, %4656
  %4664 = icmp ult i64 %4662, %4660
  %4665 = or i1 %4663, %4664
  %4666 = zext i1 %4665 to i8
  store i8 %4666, i8* %42, align 1, !tbaa !2432
  %4667 = trunc i64 %4662 to i32
  %4668 = and i32 %4667, 255
  %4669 = tail call i32 @llvm.ctpop.i32(i32 %4668) #9
  %4670 = trunc i32 %4669 to i8
  %4671 = and i8 %4670, 1
  %4672 = xor i8 %4671, 1
  store i8 %4672, i8* %49, align 1, !tbaa !2446
  %4673 = xor i64 %4660, %4656
  %4674 = xor i64 %4673, %4662
  %4675 = lshr i64 %4674, 4
  %4676 = trunc i64 %4675 to i8
  %4677 = and i8 %4676, 1
  store i8 %4677, i8* %55, align 1, !tbaa !2450
  %4678 = icmp eq i64 %4662, 0
  %4679 = zext i1 %4678 to i8
  store i8 %4679, i8* %58, align 1, !tbaa !2447
  %4680 = lshr i64 %4662, 63
  %4681 = trunc i64 %4680 to i8
  store i8 %4681, i8* %61, align 1, !tbaa !2448
  %4682 = lshr i64 %4656, 63
  %4683 = xor i64 %4680, %4682
  %4684 = xor i64 %4680, %4661
  %4685 = add nuw nsw i64 %4683, %4684
  %4686 = icmp eq i64 %4685, 2
  %4687 = zext i1 %4686 to i8
  store i8 %4687, i8* %67, align 1, !tbaa !2449
  %4688 = load i64, i64* %RBP, align 8
  %4689 = add i64 %4688, -52
  %4690 = add i64 %4606, 58
  store i64 %4690, i64* %PC, align 8
  %4691 = inttoptr i64 %4689 to i32*
  %4692 = load i32, i32* %4691, align 4
  %4693 = sext i32 %4692 to i64
  %4694 = mul nsw i64 %4693, 520
  store i64 %4694, i64* %RCX, align 8, !tbaa !2428
  %4695 = lshr i64 %4694, 63
  %4696 = add i64 %4694, %4662
  store i64 %4696, i64* %RAX, align 8, !tbaa !2428
  %4697 = icmp ult i64 %4696, %4662
  %4698 = icmp ult i64 %4696, %4694
  %4699 = or i1 %4697, %4698
  %4700 = zext i1 %4699 to i8
  store i8 %4700, i8* %42, align 1, !tbaa !2432
  %4701 = trunc i64 %4696 to i32
  %4702 = and i32 %4701, 255
  %4703 = tail call i32 @llvm.ctpop.i32(i32 %4702) #9
  %4704 = trunc i32 %4703 to i8
  %4705 = and i8 %4704, 1
  %4706 = xor i8 %4705, 1
  store i8 %4706, i8* %49, align 1, !tbaa !2446
  %4707 = xor i64 %4694, %4662
  %4708 = xor i64 %4707, %4696
  %4709 = lshr i64 %4708, 4
  %4710 = trunc i64 %4709 to i8
  %4711 = and i8 %4710, 1
  store i8 %4711, i8* %55, align 1, !tbaa !2450
  %4712 = icmp eq i64 %4696, 0
  %4713 = zext i1 %4712 to i8
  store i8 %4713, i8* %58, align 1, !tbaa !2447
  %4714 = lshr i64 %4696, 63
  %4715 = trunc i64 %4714 to i8
  store i8 %4715, i8* %61, align 1, !tbaa !2448
  %4716 = xor i64 %4714, %4680
  %4717 = xor i64 %4714, %4695
  %4718 = add nuw nsw i64 %4716, %4717
  %4719 = icmp eq i64 %4718, 2
  %4720 = zext i1 %4719 to i8
  store i8 %4720, i8* %67, align 1, !tbaa !2449
  %4721 = add i64 %4688, -48
  %4722 = add i64 %4606, 72
  store i64 %4722, i64* %PC, align 8
  %4723 = inttoptr i64 %4721 to i32*
  %4724 = load i32, i32* %4723, align 4
  %4725 = sext i32 %4724 to i64
  store i64 %4725, i64* %RCX, align 8, !tbaa !2428
  %4726 = shl nsw i64 %4725, 3
  %4727 = add i64 %4726, %4696
  %4728 = add i64 %4606, 77
  store i64 %4728, i64* %PC, align 8
  %4729 = load i64, i64* %148, align 1
  %4730 = inttoptr i64 %4727 to i64*
  store i64 %4729, i64* %4730, align 8
  %4731 = load i64, i64* %RBP, align 8
  %4732 = add i64 %4731, -192
  %4733 = load i64, i64* %PC, align 8
  %4734 = add i64 %4733, 6
  store i64 %4734, i64* %PC, align 8
  %4735 = inttoptr i64 %4732 to i32*
  %4736 = load i32, i32* %4735, align 4
  %4737 = add i32 %4736, 1
  %4738 = zext i32 %4737 to i64
  store i64 %4738, i64* %RAX, align 8, !tbaa !2428
  %4739 = icmp eq i32 %4736, -1
  %4740 = icmp eq i32 %4737, 0
  %4741 = or i1 %4739, %4740
  %4742 = zext i1 %4741 to i8
  store i8 %4742, i8* %42, align 1, !tbaa !2432
  %4743 = and i32 %4737, 255
  %4744 = tail call i32 @llvm.ctpop.i32(i32 %4743) #9
  %4745 = trunc i32 %4744 to i8
  %4746 = and i8 %4745, 1
  %4747 = xor i8 %4746, 1
  store i8 %4747, i8* %49, align 1, !tbaa !2446
  %4748 = xor i32 %4737, %4736
  %4749 = lshr i32 %4748, 4
  %4750 = trunc i32 %4749 to i8
  %4751 = and i8 %4750, 1
  store i8 %4751, i8* %55, align 1, !tbaa !2450
  %4752 = zext i1 %4740 to i8
  store i8 %4752, i8* %58, align 1, !tbaa !2447
  %4753 = lshr i32 %4737, 31
  %4754 = trunc i32 %4753 to i8
  store i8 %4754, i8* %61, align 1, !tbaa !2448
  %4755 = lshr i32 %4736, 31
  %4756 = xor i32 %4753, %4755
  %4757 = add nuw nsw i32 %4756, %4753
  %4758 = icmp eq i32 %4757, 2
  %4759 = zext i1 %4758 to i8
  store i8 %4759, i8* %67, align 1, !tbaa !2449
  %4760 = add i64 %4733, 15
  store i64 %4760, i64* %PC, align 8
  store i32 %4737, i32* %4735, align 4
  %4761 = load i64, i64* %PC, align 8
  %4762 = add i64 %4761, -3219
  store i64 %4762, i64* %PC, align 8, !tbaa !2428
  br label %block_40234a

block_402340:                                     ; preds = %block_402331
  %4763 = add i64 %2422, -192
  %4764 = add i64 %2458, 10
  store i64 %4764, i64* %PC, align 8
  %4765 = inttoptr i64 %4763 to i32*
  store i32 0, i32* %4765, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_40234a

block_4029d0:                                     ; preds = %block_4026c3, %block_4029df
  %4766 = phi i64 [ %.pre12, %block_4026c3 ], [ %1338, %block_4029df ]
  %4767 = load i64, i64* %RBP, align 8
  %4768 = add i64 %4767, -196
  %4769 = add i64 %4766, 6
  store i64 %4769, i64* %PC, align 8
  %4770 = inttoptr i64 %4768 to i32*
  %4771 = load i32, i32* %4770, align 4
  %4772 = zext i32 %4771 to i64
  store i64 %4772, i64* %RAX, align 8, !tbaa !2428
  %4773 = add i64 %4767, -48
  %4774 = add i64 %4766, 9
  store i64 %4774, i64* %PC, align 8
  %4775 = inttoptr i64 %4773 to i32*
  %4776 = load i32, i32* %4775, align 4
  %4777 = sub i32 %4771, %4776
  %4778 = icmp ult i32 %4771, %4776
  %4779 = zext i1 %4778 to i8
  store i8 %4779, i8* %42, align 1, !tbaa !2432
  %4780 = and i32 %4777, 255
  %4781 = tail call i32 @llvm.ctpop.i32(i32 %4780) #9
  %4782 = trunc i32 %4781 to i8
  %4783 = and i8 %4782, 1
  %4784 = xor i8 %4783, 1
  store i8 %4784, i8* %49, align 1, !tbaa !2446
  %4785 = xor i32 %4776, %4771
  %4786 = xor i32 %4785, %4777
  %4787 = lshr i32 %4786, 4
  %4788 = trunc i32 %4787 to i8
  %4789 = and i8 %4788, 1
  store i8 %4789, i8* %55, align 1, !tbaa !2450
  %4790 = icmp eq i32 %4777, 0
  %4791 = zext i1 %4790 to i8
  store i8 %4791, i8* %58, align 1, !tbaa !2447
  %4792 = lshr i32 %4777, 31
  %4793 = trunc i32 %4792 to i8
  store i8 %4793, i8* %61, align 1, !tbaa !2448
  %4794 = lshr i32 %4771, 31
  %4795 = lshr i32 %4776, 31
  %4796 = xor i32 %4795, %4794
  %4797 = xor i32 %4792, %4794
  %4798 = add nuw nsw i32 %4797, %4796
  %4799 = icmp eq i32 %4798, 2
  %4800 = zext i1 %4799 to i8
  store i8 %4800, i8* %67, align 1, !tbaa !2449
  %4801 = icmp ne i8 %4793, 0
  %4802 = xor i1 %4801, %4799
  %.v14 = select i1 %4802, i64 15, i64 818
  %4803 = add i64 %4766, %.v14
  %4804 = add i64 %4767, -120
  %4805 = add i64 %4803, 4
  store i64 %4805, i64* %PC, align 8
  %4806 = inttoptr i64 %4804 to i64*
  %4807 = load i64, i64* %4806, align 8
  store i64 %4807, i64* %RAX, align 8, !tbaa !2428
  %4808 = add i64 %4767, -188
  %4809 = add i64 %4803, 11
  store i64 %4809, i64* %PC, align 8
  %4810 = inttoptr i64 %4808 to i32*
  %4811 = load i32, i32* %4810, align 4
  %4812 = sext i32 %4811 to i64
  %4813 = mul nsw i64 %4812, 33800
  store i64 %4813, i64* %RCX, align 8, !tbaa !2428
  %4814 = lshr i64 %4813, 63
  %4815 = add i64 %4813, %4807
  store i64 %4815, i64* %RAX, align 8, !tbaa !2428
  %4816 = icmp ult i64 %4815, %4807
  %4817 = icmp ult i64 %4815, %4813
  %4818 = or i1 %4816, %4817
  %4819 = zext i1 %4818 to i8
  store i8 %4819, i8* %42, align 1, !tbaa !2432
  %4820 = trunc i64 %4815 to i32
  %4821 = and i32 %4820, 255
  %4822 = tail call i32 @llvm.ctpop.i32(i32 %4821) #9
  %4823 = trunc i32 %4822 to i8
  %4824 = and i8 %4823, 1
  %4825 = xor i8 %4824, 1
  store i8 %4825, i8* %49, align 1, !tbaa !2446
  %4826 = xor i64 %4813, %4807
  %4827 = xor i64 %4826, %4815
  %4828 = lshr i64 %4827, 4
  %4829 = trunc i64 %4828 to i8
  %4830 = and i8 %4829, 1
  store i8 %4830, i8* %55, align 1, !tbaa !2450
  %4831 = icmp eq i64 %4815, 0
  %4832 = zext i1 %4831 to i8
  store i8 %4832, i8* %58, align 1, !tbaa !2447
  %4833 = lshr i64 %4815, 63
  %4834 = trunc i64 %4833 to i8
  store i8 %4834, i8* %61, align 1, !tbaa !2448
  %4835 = lshr i64 %4807, 63
  %4836 = xor i64 %4833, %4835
  %4837 = xor i64 %4833, %4814
  %4838 = add nuw nsw i64 %4836, %4837
  %4839 = icmp eq i64 %4838, 2
  %4840 = zext i1 %4839 to i8
  store i8 %4840, i8* %67, align 1, !tbaa !2449
  %4841 = load i64, i64* %RBP, align 8
  %4842 = add i64 %4841, -52
  %4843 = add i64 %4803, 25
  store i64 %4843, i64* %PC, align 8
  %4844 = inttoptr i64 %4842 to i32*
  %4845 = load i32, i32* %4844, align 4
  %4846 = sext i32 %4845 to i64
  %4847 = mul nsw i64 %4846, 520
  store i64 %4847, i64* %RCX, align 8, !tbaa !2428
  %4848 = lshr i64 %4847, 63
  %4849 = add i64 %4803, 35
  store i64 %4849, i64* %PC, align 8
  %4850 = add i64 %4847, %4815
  store i64 %4850, i64* %RAX, align 8, !tbaa !2428
  %4851 = icmp ult i64 %4850, %4815
  %4852 = icmp ult i64 %4850, %4847
  %4853 = or i1 %4851, %4852
  %4854 = zext i1 %4853 to i8
  store i8 %4854, i8* %42, align 1, !tbaa !2432
  %4855 = trunc i64 %4850 to i32
  %4856 = and i32 %4855, 255
  %4857 = tail call i32 @llvm.ctpop.i32(i32 %4856) #9
  %4858 = trunc i32 %4857 to i8
  %4859 = and i8 %4858, 1
  %4860 = xor i8 %4859, 1
  store i8 %4860, i8* %49, align 1, !tbaa !2446
  %4861 = xor i64 %4847, %4815
  %4862 = xor i64 %4861, %4850
  %4863 = lshr i64 %4862, 4
  %4864 = trunc i64 %4863 to i8
  %4865 = and i8 %4864, 1
  store i8 %4865, i8* %55, align 1, !tbaa !2450
  %4866 = icmp eq i64 %4850, 0
  %4867 = zext i1 %4866 to i8
  store i8 %4867, i8* %58, align 1, !tbaa !2447
  %4868 = lshr i64 %4850, 63
  %4869 = trunc i64 %4868 to i8
  store i8 %4869, i8* %61, align 1, !tbaa !2448
  %4870 = xor i64 %4868, %4833
  %4871 = xor i64 %4868, %4848
  %4872 = add nuw nsw i64 %4870, %4871
  %4873 = icmp eq i64 %4872, 2
  %4874 = zext i1 %4873 to i8
  store i8 %4874, i8* %67, align 1, !tbaa !2449
  br i1 %4802, label %block_4029df, label %block_402d02
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400750_polybench_prepare_instruments(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -129
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_4006d0_polybench_flush_cache(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %5, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %5, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4014b0_kernel_fdtd_apml(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4014b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -104
  store i64 %39, i64* %RSP, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 56
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %36, 16
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2450
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, 96
  %70 = add i64 %38, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2428
  %73 = add i64 %68, 88
  %74 = add i64 %38, 12
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R10, align 8, !tbaa !2428
  %77 = add i64 %68, 80
  %78 = add i64 %38, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R11, align 8, !tbaa !2428
  %81 = add i64 %68, 72
  %82 = add i64 %38, 20
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBX, align 8, !tbaa !2428
  %85 = add i64 %68, 64
  %86 = add i64 %38, 24
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %R14, align 8, !tbaa !2428
  %89 = add i64 %68, 56
  %90 = add i64 %38, 28
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %R15, align 8, !tbaa !2428
  %93 = add i64 %68, 48
  %94 = add i64 %38, 32
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %R12, align 8, !tbaa !2428
  %97 = add i64 %68, 40
  %98 = add i64 %38, 36
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %R13, align 8, !tbaa !2428
  %101 = add i64 %68, -208
  %102 = add i64 %38, 43
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %72, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, 32
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -216
  %111 = add i64 %106, 11
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, 24
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %119 = add i64 %113, -224
  %120 = add i64 %115, 11
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, 16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = add i64 %122, -44
  %129 = load i32, i32* %EDI, align 4
  %130 = add i64 %124, 7
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %131, align 4
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = load i32, i32* %ESI, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -52
  %140 = load i32, i32* %EDX, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -64
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %149 = load i64, i64* %148, align 1
  %150 = inttoptr i64 %145 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC, align 8
  %155 = bitcast %union.VectorReg* %7 to double*
  %156 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %157 = load i64, i64* %156, align 1
  %158 = inttoptr i64 %152 to i64*
  store i64 %157, i64* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -80
  %161 = load i64, i64* %RCX, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  store i64 %161, i64* %164, align 8
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -88
  %167 = load i64, i64* %R8, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170, align 8
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -96
  %173 = load i64, i64* %R9, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %176, align 8
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -104
  %179 = load i64, i64* %RAX, align 8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %178 to i64*
  store i64 %179, i64* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -224
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = add i64 %183, -112
  %190 = add i64 %185, 11
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -216
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RCX, align 8, !tbaa !2428
  %198 = add i64 %192, -120
  %199 = add i64 %194, 11
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -128
  %203 = load i64, i64* %R13, align 8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -136
  %209 = load i64, i64* %R12, align 8
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212, align 8
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -144
  %215 = load i64, i64* %R15, align 8
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 7
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218, align 8
  %219 = load i64, i64* %RBP, align 8
  %220 = add i64 %219, -152
  %221 = load i64, i64* %R14, align 8
  %222 = load i64, i64* %PC, align 8
  %223 = add i64 %222, 7
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224, align 8
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -160
  %227 = load i64, i64* %RBX, align 8
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %226 to i64*
  store i64 %227, i64* %230, align 8
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -168
  %233 = load i64, i64* %R11, align 8
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %232 to i64*
  store i64 %233, i64* %236, align 8
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -176
  %239 = load i64, i64* %R10, align 8
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 7
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242, align 8
  %243 = load i64, i64* %RBP, align 8
  %244 = add i64 %243, -208
  %245 = load i64, i64* %PC, align 8
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %R8, align 8, !tbaa !2428
  %249 = add i64 %243, -184
  %250 = add i64 %245, 14
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  store i64 %248, i64* %251, align 8
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -188
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, 10
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %253 to i32*
  store i32 0, i32* %256, align 4
  %257 = bitcast [32 x %union.VectorReg]* %6 to double*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %259 = bitcast i64* %258 to double*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %261 = bitcast i64* %260 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401581

block_40159a:                                     ; preds = %block_401f52, %block_401590
  %262 = phi i64 [ %3616, %block_401f52 ], [ %.pre10, %block_401590 ]
  %263 = load i64, i64* %RBP, align 8
  %264 = add i64 %263, -192
  %265 = add i64 %262, 6
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = zext i32 %267 to i64
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = add i64 %263, -52
  %270 = add i64 %262, 9
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = sub i32 %267, %272
  %274 = icmp ult i32 %267, %272
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %42, align 1, !tbaa !2432
  %276 = and i32 %273, 255
  %277 = tail call i32 @llvm.ctpop.i32(i32 %276) #9
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %49, align 1, !tbaa !2446
  %281 = xor i32 %272, %267
  %282 = xor i32 %281, %273
  %283 = lshr i32 %282, 4
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  store i8 %285, i8* %55, align 1, !tbaa !2450
  %286 = icmp eq i32 %273, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %58, align 1, !tbaa !2447
  %288 = lshr i32 %273, 31
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %61, align 1, !tbaa !2448
  %290 = lshr i32 %267, 31
  %291 = lshr i32 %272, 31
  %292 = xor i32 %291, %290
  %293 = xor i32 %288, %290
  %294 = add nuw nsw i32 %293, %292
  %295 = icmp eq i32 %294, 2
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %67, align 1, !tbaa !2449
  %297 = icmp ne i8 %289, 0
  %298 = xor i1 %297, %295
  %.v = select i1 %298, i64 15, i64 3224
  %299 = add i64 %262, %.v
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  br i1 %298, label %block_4015a9, label %block_402232

block_401913:                                     ; preds = %block_4015b3
  %300 = add i64 %1402, -48
  %301 = add i64 %1364, 42
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = sext i32 %303 to i64
  store i64 %304, i64* %RCX, align 8, !tbaa !2428
  %305 = shl nsw i64 %304, 3
  %306 = add i64 %305, %1411
  %307 = add i64 %1364, 47
  store i64 %307, i64* %PC, align 8
  %308 = inttoptr i64 %306 to i64*
  %309 = load i64, i64* %308, align 8
  store i64 %309, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %310 = add i64 %1402, -120
  %311 = add i64 %1364, 51
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %RAX, align 8, !tbaa !2428
  %314 = add i64 %1402, -188
  %315 = add i64 %1364, 58
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = sext i32 %317 to i64
  %319 = mul nsw i64 %318, 33800
  store i64 %319, i64* %RCX, align 8, !tbaa !2428
  %320 = lshr i64 %319, 63
  %321 = add i64 %319, %313
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = icmp ult i64 %321, %313
  %323 = icmp ult i64 %321, %319
  %324 = or i1 %322, %323
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %42, align 1, !tbaa !2432
  %326 = trunc i64 %321 to i32
  %327 = and i32 %326, 255
  %328 = tail call i32 @llvm.ctpop.i32(i32 %327) #9
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  store i8 %331, i8* %49, align 1, !tbaa !2446
  %332 = xor i64 %319, %313
  %333 = xor i64 %332, %321
  %334 = lshr i64 %333, 4
  %335 = trunc i64 %334 to i8
  %336 = and i8 %335, 1
  store i8 %336, i8* %55, align 1, !tbaa !2450
  %337 = icmp eq i64 %321, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %58, align 1, !tbaa !2447
  %339 = lshr i64 %321, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %61, align 1, !tbaa !2448
  %341 = lshr i64 %313, 63
  %342 = xor i64 %339, %341
  %343 = xor i64 %339, %320
  %344 = add nuw nsw i64 %342, %343
  %345 = icmp eq i64 %344, 2
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %67, align 1, !tbaa !2449
  %347 = add i64 %1364, 74
  store i64 %347, i64* %PC, align 8
  %348 = load i32, i32* %1405, align 4
  %349 = add i32 %348, 1
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RDX, align 8, !tbaa !2428
  %351 = sext i32 %349 to i64
  %352 = mul nsw i64 %351, 520
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %353 = lshr i64 %352, 63
  %354 = load i64, i64* %RAX, align 8
  %355 = add i64 %352, %354
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = icmp ult i64 %355, %354
  %357 = icmp ult i64 %355, %352
  %358 = or i1 %356, %357
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %42, align 1, !tbaa !2432
  %360 = trunc i64 %355 to i32
  %361 = and i32 %360, 255
  %362 = tail call i32 @llvm.ctpop.i32(i32 %361) #9
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  store i8 %365, i8* %49, align 1, !tbaa !2446
  %366 = xor i64 %352, %354
  %367 = xor i64 %366, %355
  %368 = lshr i64 %367, 4
  %369 = trunc i64 %368 to i8
  %370 = and i8 %369, 1
  store i8 %370, i8* %55, align 1, !tbaa !2450
  %371 = icmp eq i64 %355, 0
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %58, align 1, !tbaa !2447
  %373 = lshr i64 %355, 63
  %374 = trunc i64 %373 to i8
  store i8 %374, i8* %61, align 1, !tbaa !2448
  %375 = lshr i64 %354, 63
  %376 = xor i64 %373, %375
  %377 = xor i64 %373, %353
  %378 = add nuw nsw i64 %376, %377
  %379 = icmp eq i64 %378, 2
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %67, align 1, !tbaa !2449
  %381 = load i64, i64* %RBP, align 8
  %382 = add i64 %381, -48
  %383 = add i64 %1364, 94
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = sext i32 %385 to i64
  store i64 %386, i64* %RCX, align 8, !tbaa !2428
  %387 = shl nsw i64 %386, 3
  %388 = add i64 %387, %355
  %389 = add i64 %1364, 99
  store i64 %389, i64* %PC, align 8
  %390 = load double, double* %257, align 1
  %391 = inttoptr i64 %388 to double*
  %392 = load double, double* %391, align 8
  %393 = fsub double %390, %392
  store double %393, double* %257, align 1, !tbaa !2452
  %394 = add i64 %381, -88
  %395 = add i64 %1364, 103
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %394 to i64*
  %397 = load i64, i64* %396, align 8
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = add i64 %381, -188
  %399 = add i64 %1364, 110
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %398 to i32*
  %401 = load i32, i32* %400, align 4
  %402 = sext i32 %401 to i64
  %403 = mul nsw i64 %402, 520
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = lshr i64 %403, 63
  %405 = add i64 %403, %397
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = icmp ult i64 %405, %397
  %407 = icmp ult i64 %405, %403
  %408 = or i1 %406, %407
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %42, align 1, !tbaa !2432
  %410 = trunc i64 %405 to i32
  %411 = and i32 %410, 255
  %412 = tail call i32 @llvm.ctpop.i32(i32 %411) #9
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  store i8 %415, i8* %49, align 1, !tbaa !2446
  %416 = xor i64 %403, %397
  %417 = xor i64 %416, %405
  %418 = lshr i64 %417, 4
  %419 = trunc i64 %418 to i8
  %420 = and i8 %419, 1
  store i8 %420, i8* %55, align 1, !tbaa !2450
  %421 = icmp eq i64 %405, 0
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %58, align 1, !tbaa !2447
  %423 = lshr i64 %405, 63
  %424 = trunc i64 %423 to i8
  store i8 %424, i8* %61, align 1, !tbaa !2448
  %425 = lshr i64 %397, 63
  %426 = xor i64 %423, %425
  %427 = xor i64 %423, %404
  %428 = add nuw nsw i64 %426, %427
  %429 = icmp eq i64 %428, 2
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %67, align 1, !tbaa !2449
  %431 = add i64 %381, -192
  %432 = add i64 %1364, 127
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = sext i32 %434 to i64
  store i64 %435, i64* %RCX, align 8, !tbaa !2428
  %436 = shl nsw i64 %435, 3
  %437 = add i64 %436, %405
  %438 = add i64 %1364, 132
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %437 to double*
  %440 = load double, double* %439, align 8
  %441 = fadd double %393, %440
  store double %441, double* %257, align 1, !tbaa !2452
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -128
  %444 = add i64 %1364, 136
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %443 to i64*
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = add i64 %442, -188
  %448 = add i64 %1364, 143
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = sext i32 %450 to i64
  %452 = mul nsw i64 %451, 33800
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %453 = lshr i64 %452, 63
  %454 = add i64 %452, %446
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = icmp ult i64 %454, %446
  %456 = icmp ult i64 %454, %452
  %457 = or i1 %455, %456
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %42, align 1, !tbaa !2432
  %459 = trunc i64 %454 to i32
  %460 = and i32 %459, 255
  %461 = tail call i32 @llvm.ctpop.i32(i32 %460) #9
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  store i8 %464, i8* %49, align 1, !tbaa !2446
  %465 = xor i64 %452, %446
  %466 = xor i64 %465, %454
  %467 = lshr i64 %466, 4
  %468 = trunc i64 %467 to i8
  %469 = and i8 %468, 1
  store i8 %469, i8* %55, align 1, !tbaa !2450
  %470 = icmp eq i64 %454, 0
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %58, align 1, !tbaa !2447
  %472 = lshr i64 %454, 63
  %473 = trunc i64 %472 to i8
  store i8 %473, i8* %61, align 1, !tbaa !2448
  %474 = lshr i64 %446, 63
  %475 = xor i64 %472, %474
  %476 = xor i64 %472, %453
  %477 = add nuw nsw i64 %475, %476
  %478 = icmp eq i64 %477, 2
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %67, align 1, !tbaa !2449
  %480 = add i64 %442, -192
  %481 = add i64 %1364, 160
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  %483 = load i32, i32* %482, align 4
  %484 = sext i32 %483 to i64
  %485 = mul nsw i64 %484, 520
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = lshr i64 %485, 63
  %487 = add i64 %485, %454
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = icmp ult i64 %487, %454
  %489 = icmp ult i64 %487, %485
  %490 = or i1 %488, %489
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %42, align 1, !tbaa !2432
  %492 = trunc i64 %487 to i32
  %493 = and i32 %492, 255
  %494 = tail call i32 @llvm.ctpop.i32(i32 %493) #9
  %495 = trunc i32 %494 to i8
  %496 = and i8 %495, 1
  %497 = xor i8 %496, 1
  store i8 %497, i8* %49, align 1, !tbaa !2446
  %498 = xor i64 %485, %454
  %499 = xor i64 %498, %487
  %500 = lshr i64 %499, 4
  %501 = trunc i64 %500 to i8
  %502 = and i8 %501, 1
  store i8 %502, i8* %55, align 1, !tbaa !2450
  %503 = icmp eq i64 %487, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %58, align 1, !tbaa !2447
  %505 = lshr i64 %487, 63
  %506 = trunc i64 %505 to i8
  store i8 %506, i8* %61, align 1, !tbaa !2448
  %507 = xor i64 %505, %472
  %508 = xor i64 %505, %486
  %509 = add nuw nsw i64 %507, %508
  %510 = icmp eq i64 %509, 2
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %67, align 1, !tbaa !2449
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -48
  %514 = add i64 %1364, 174
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = sext i32 %516 to i64
  store i64 %517, i64* %RCX, align 8, !tbaa !2428
  %518 = shl nsw i64 %517, 3
  %519 = add i64 %518, %487
  %520 = add i64 %1364, 179
  store i64 %520, i64* %PC, align 8
  %521 = load double, double* %257, align 1
  %522 = inttoptr i64 %519 to double*
  %523 = load double, double* %522, align 8
  %524 = fsub double %521, %523
  store double %524, double* %257, align 1, !tbaa !2452
  %525 = add i64 %512, -96
  %526 = add i64 %1364, 183
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i64*
  %528 = load i64, i64* %527, align 8
  store i64 %528, i64* %RAX, align 8, !tbaa !2428
  %529 = add i64 %512, -188
  %530 = add i64 %1364, 190
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i32*
  %532 = load i32, i32* %531, align 4
  %533 = sext i32 %532 to i64
  %534 = mul nsw i64 %533, 520
  store i64 %534, i64* %RCX, align 8, !tbaa !2428
  %535 = lshr i64 %534, 63
  %536 = add i64 %534, %528
  store i64 %536, i64* %RAX, align 8, !tbaa !2428
  %537 = icmp ult i64 %536, %528
  %538 = icmp ult i64 %536, %534
  %539 = or i1 %537, %538
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %42, align 1, !tbaa !2432
  %541 = trunc i64 %536 to i32
  %542 = and i32 %541, 255
  %543 = tail call i32 @llvm.ctpop.i32(i32 %542) #9
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* %49, align 1, !tbaa !2446
  %547 = xor i64 %534, %528
  %548 = xor i64 %547, %536
  %549 = lshr i64 %548, 4
  %550 = trunc i64 %549 to i8
  %551 = and i8 %550, 1
  store i8 %551, i8* %55, align 1, !tbaa !2450
  %552 = icmp eq i64 %536, 0
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %58, align 1, !tbaa !2447
  %554 = lshr i64 %536, 63
  %555 = trunc i64 %554 to i8
  store i8 %555, i8* %61, align 1, !tbaa !2448
  %556 = lshr i64 %528, 63
  %557 = xor i64 %554, %556
  %558 = xor i64 %554, %535
  %559 = add nuw nsw i64 %557, %558
  %560 = icmp eq i64 %559, 2
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %67, align 1, !tbaa !2449
  %562 = add i64 %512, -192
  %563 = add i64 %1364, 207
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i32*
  %565 = load i32, i32* %564, align 4
  %566 = sext i32 %565 to i64
  store i64 %566, i64* %RCX, align 8, !tbaa !2428
  %567 = shl nsw i64 %566, 3
  %568 = add i64 %567, %536
  %569 = add i64 %1364, 212
  store i64 %569, i64* %PC, align 8
  %570 = inttoptr i64 %568 to double*
  store double %524, double* %570, align 8
  %571 = load i64, i64* %RBP, align 8
  %572 = add i64 %571, -176
  %573 = load i64, i64* %PC, align 8
  %574 = add i64 %573, 7
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %572 to i64*
  %576 = load i64, i64* %575, align 8
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = add i64 %571, -192
  %578 = add i64 %573, 14
  store i64 %578, i64* %PC, align 8
  %579 = inttoptr i64 %577 to i32*
  %580 = load i32, i32* %579, align 4
  %581 = sext i32 %580 to i64
  store i64 %581, i64* %RCX, align 8, !tbaa !2428
  %582 = shl nsw i64 %581, 3
  %583 = add i64 %582, %576
  %584 = add i64 %573, 19
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %583 to i64*
  %586 = load i64, i64* %585, align 8
  store i64 %586, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %587 = add i64 %571, -184
  %588 = add i64 %573, 26
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i64*
  %590 = load i64, i64* %589, align 8
  store i64 %590, i64* %RAX, align 8, !tbaa !2428
  %591 = add i64 %573, 33
  store i64 %591, i64* %PC, align 8
  %592 = load i32, i32* %579, align 4
  %593 = sext i32 %592 to i64
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %594 = shl nsw i64 %593, 3
  %595 = add i64 %594, %590
  %596 = add i64 %573, 38
  store i64 %596, i64* %PC, align 8
  %597 = bitcast i64 %586 to double
  %598 = inttoptr i64 %595 to double*
  %599 = load double, double* %598, align 8
  %600 = fdiv double %597, %599
  store double %600, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %601 = add i64 %571, -112
  %602 = add i64 %573, 42
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i64*
  %604 = load i64, i64* %603, align 8
  store i64 %604, i64* %RAX, align 8, !tbaa !2428
  %605 = add i64 %571, -188
  %606 = add i64 %573, 49
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i32*
  %608 = load i32, i32* %607, align 4
  %609 = sext i32 %608 to i64
  %610 = mul nsw i64 %609, 33800
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = lshr i64 %610, 63
  %612 = add i64 %610, %604
  store i64 %612, i64* %RAX, align 8, !tbaa !2428
  %613 = icmp ult i64 %612, %604
  %614 = icmp ult i64 %612, %610
  %615 = or i1 %613, %614
  %616 = zext i1 %615 to i8
  store i8 %616, i8* %42, align 1, !tbaa !2432
  %617 = trunc i64 %612 to i32
  %618 = and i32 %617, 255
  %619 = tail call i32 @llvm.ctpop.i32(i32 %618) #9
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = xor i8 %621, 1
  store i8 %622, i8* %49, align 1, !tbaa !2446
  %623 = xor i64 %610, %604
  %624 = xor i64 %623, %612
  %625 = lshr i64 %624, 4
  %626 = trunc i64 %625 to i8
  %627 = and i8 %626, 1
  store i8 %627, i8* %55, align 1, !tbaa !2450
  %628 = icmp eq i64 %612, 0
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %58, align 1, !tbaa !2447
  %630 = lshr i64 %612, 63
  %631 = trunc i64 %630 to i8
  store i8 %631, i8* %61, align 1, !tbaa !2448
  %632 = lshr i64 %604, 63
  %633 = xor i64 %630, %632
  %634 = xor i64 %630, %611
  %635 = add nuw nsw i64 %633, %634
  %636 = icmp eq i64 %635, 2
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %67, align 1, !tbaa !2449
  %638 = load i64, i64* %RBP, align 8
  %639 = add i64 %638, -192
  %640 = add i64 %573, 66
  store i64 %640, i64* %PC, align 8
  %641 = inttoptr i64 %639 to i32*
  %642 = load i32, i32* %641, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, 520
  store i64 %644, i64* %RCX, align 8, !tbaa !2428
  %645 = lshr i64 %644, 63
  %646 = add i64 %644, %612
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = icmp ult i64 %646, %612
  %648 = icmp ult i64 %646, %644
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %42, align 1, !tbaa !2432
  %651 = trunc i64 %646 to i32
  %652 = and i32 %651, 255
  %653 = tail call i32 @llvm.ctpop.i32(i32 %652) #9
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  store i8 %656, i8* %49, align 1, !tbaa !2446
  %657 = xor i64 %644, %612
  %658 = xor i64 %657, %646
  %659 = lshr i64 %658, 4
  %660 = trunc i64 %659 to i8
  %661 = and i8 %660, 1
  store i8 %661, i8* %55, align 1, !tbaa !2450
  %662 = icmp eq i64 %646, 0
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %58, align 1, !tbaa !2447
  %664 = lshr i64 %646, 63
  %665 = trunc i64 %664 to i8
  store i8 %665, i8* %61, align 1, !tbaa !2448
  %666 = xor i64 %664, %630
  %667 = xor i64 %664, %645
  %668 = add nuw nsw i64 %666, %667
  %669 = icmp eq i64 %668, 2
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %67, align 1, !tbaa !2449
  %671 = add i64 %638, -48
  %672 = add i64 %573, 80
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = sext i32 %674 to i64
  store i64 %675, i64* %RCX, align 8, !tbaa !2428
  %676 = shl nsw i64 %675, 3
  %677 = add i64 %676, %646
  %678 = add i64 %573, 85
  store i64 %678, i64* %PC, align 8
  %679 = load double, double* %257, align 1
  %680 = inttoptr i64 %677 to double*
  %681 = load double, double* %680, align 8
  %682 = fmul double %679, %681
  store double %682, double* %257, align 1, !tbaa !2452
  %683 = add i64 %638, -72
  %684 = add i64 %573, 90
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  %686 = load i64, i64* %685, align 8
  store i64 %686, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %687 = add i64 %638, -184
  %688 = add i64 %573, 97
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %687 to i64*
  %690 = load i64, i64* %689, align 8
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = add i64 %573, 104
  store i64 %691, i64* %PC, align 8
  %692 = load i32, i32* %641, align 4
  %693 = sext i32 %692 to i64
  store i64 %693, i64* %RCX, align 8, !tbaa !2428
  %694 = shl nsw i64 %693, 3
  %695 = add i64 %694, %690
  %696 = add i64 %573, 109
  store i64 %696, i64* %PC, align 8
  %697 = bitcast i64 %686 to double
  %698 = inttoptr i64 %695 to double*
  %699 = load double, double* %698, align 8
  %700 = fdiv double %697, %699
  store double %700, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %701 = load i64, i64* %RBP, align 8
  %702 = add i64 %701, -96
  %703 = add i64 %573, 113
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = add i64 %701, -188
  %707 = add i64 %573, 120
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i32*
  %709 = load i32, i32* %708, align 4
  %710 = sext i32 %709 to i64
  %711 = mul nsw i64 %710, 520
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = lshr i64 %711, 63
  %713 = add i64 %711, %705
  store i64 %713, i64* %RAX, align 8, !tbaa !2428
  %714 = icmp ult i64 %713, %705
  %715 = icmp ult i64 %713, %711
  %716 = or i1 %714, %715
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %42, align 1, !tbaa !2432
  %718 = trunc i64 %713 to i32
  %719 = and i32 %718, 255
  %720 = tail call i32 @llvm.ctpop.i32(i32 %719) #9
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  store i8 %723, i8* %49, align 1, !tbaa !2446
  %724 = xor i64 %711, %705
  %725 = xor i64 %724, %713
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  store i8 %728, i8* %55, align 1, !tbaa !2450
  %729 = icmp eq i64 %713, 0
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %58, align 1, !tbaa !2447
  %731 = lshr i64 %713, 63
  %732 = trunc i64 %731 to i8
  store i8 %732, i8* %61, align 1, !tbaa !2448
  %733 = lshr i64 %705, 63
  %734 = xor i64 %731, %733
  %735 = xor i64 %731, %712
  %736 = add nuw nsw i64 %734, %735
  %737 = icmp eq i64 %736, 2
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %67, align 1, !tbaa !2449
  %739 = add i64 %701, -192
  %740 = add i64 %573, 137
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %739 to i32*
  %742 = load i32, i32* %741, align 4
  %743 = sext i32 %742 to i64
  store i64 %743, i64* %RCX, align 8, !tbaa !2428
  %744 = shl nsw i64 %743, 3
  %745 = add i64 %744, %713
  %746 = add i64 %573, 142
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to double*
  %748 = load double, double* %747, align 8
  %749 = fmul double %700, %748
  store double %749, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %750 = load double, double* %257, align 1
  %751 = fsub double %750, %749
  store double %751, double* %257, align 1, !tbaa !2452
  %752 = add i64 %701, -104
  %753 = add i64 %573, 150
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i64*
  %755 = load i64, i64* %754, align 8
  store i64 %755, i64* %RAX, align 8, !tbaa !2428
  %756 = load i64, i64* %RBP, align 8
  %757 = add i64 %756, -188
  %758 = add i64 %573, 157
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %757 to i32*
  %760 = load i32, i32* %759, align 4
  %761 = sext i32 %760 to i64
  %762 = mul nsw i64 %761, 520
  store i64 %762, i64* %RCX, align 8, !tbaa !2428
  %763 = lshr i64 %762, 63
  %764 = add i64 %762, %755
  store i64 %764, i64* %RAX, align 8, !tbaa !2428
  %765 = icmp ult i64 %764, %755
  %766 = icmp ult i64 %764, %762
  %767 = or i1 %765, %766
  %768 = zext i1 %767 to i8
  store i8 %768, i8* %42, align 1, !tbaa !2432
  %769 = trunc i64 %764 to i32
  %770 = and i32 %769, 255
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #9
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  store i8 %774, i8* %49, align 1, !tbaa !2446
  %775 = xor i64 %762, %755
  %776 = xor i64 %775, %764
  %777 = lshr i64 %776, 4
  %778 = trunc i64 %777 to i8
  %779 = and i8 %778, 1
  store i8 %779, i8* %55, align 1, !tbaa !2450
  %780 = icmp eq i64 %764, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %58, align 1, !tbaa !2447
  %782 = lshr i64 %764, 63
  %783 = trunc i64 %782 to i8
  store i8 %783, i8* %61, align 1, !tbaa !2448
  %784 = lshr i64 %755, 63
  %785 = xor i64 %782, %784
  %786 = xor i64 %782, %763
  %787 = add nuw nsw i64 %785, %786
  %788 = icmp eq i64 %787, 2
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %67, align 1, !tbaa !2449
  %790 = add i64 %756, -192
  %791 = add i64 %573, 174
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %790 to i32*
  %793 = load i32, i32* %792, align 4
  %794 = sext i32 %793 to i64
  store i64 %794, i64* %RCX, align 8, !tbaa !2428
  %795 = shl nsw i64 %794, 3
  %796 = add i64 %795, %764
  %797 = add i64 %573, 179
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %796 to double*
  store double %751, double* %798, align 8
  %799 = load i64, i64* %RBP, align 8
  %800 = add i64 %799, -160
  %801 = load i64, i64* %PC, align 8
  %802 = add i64 %801, 7
  store i64 %802, i64* %PC, align 8
  %803 = inttoptr i64 %800 to i64*
  %804 = load i64, i64* %803, align 8
  store i64 %804, i64* %RAX, align 8, !tbaa !2428
  %805 = add i64 %799, -48
  %806 = add i64 %801, 11
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %805 to i32*
  %808 = load i32, i32* %807, align 4
  %809 = sext i32 %808 to i64
  store i64 %809, i64* %RCX, align 8, !tbaa !2428
  %810 = shl nsw i64 %809, 3
  %811 = add i64 %810, %804
  %812 = add i64 %801, 16
  store i64 %812, i64* %PC, align 8
  %813 = inttoptr i64 %811 to i64*
  %814 = load i64, i64* %813, align 8
  store i64 %814, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %815 = add i64 %799, -168
  %816 = add i64 %801, 23
  store i64 %816, i64* %PC, align 8
  %817 = inttoptr i64 %815 to i64*
  %818 = load i64, i64* %817, align 8
  store i64 %818, i64* %RAX, align 8, !tbaa !2428
  %819 = add i64 %801, 27
  store i64 %819, i64* %PC, align 8
  %820 = load i32, i32* %807, align 4
  %821 = sext i32 %820 to i64
  store i64 %821, i64* %RCX, align 8, !tbaa !2428
  %822 = shl nsw i64 %821, 3
  %823 = add i64 %822, %818
  %824 = add i64 %801, 32
  store i64 %824, i64* %PC, align 8
  %825 = bitcast i64 %814 to double
  %826 = inttoptr i64 %823 to double*
  %827 = load double, double* %826, align 8
  %828 = fdiv double %825, %827
  store double %828, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %829 = add i64 %799, -136
  %830 = add i64 %801, 39
  store i64 %830, i64* %PC, align 8
  %831 = inttoptr i64 %829 to i64*
  %832 = load i64, i64* %831, align 8
  store i64 %832, i64* %RAX, align 8, !tbaa !2428
  %833 = add i64 %799, -188
  %834 = add i64 %801, 46
  store i64 %834, i64* %PC, align 8
  %835 = inttoptr i64 %833 to i32*
  %836 = load i32, i32* %835, align 4
  %837 = sext i32 %836 to i64
  %838 = mul nsw i64 %837, 33800
  store i64 %838, i64* %RCX, align 8, !tbaa !2428
  %839 = lshr i64 %838, 63
  %840 = add i64 %838, %832
  store i64 %840, i64* %RAX, align 8, !tbaa !2428
  %841 = icmp ult i64 %840, %832
  %842 = icmp ult i64 %840, %838
  %843 = or i1 %841, %842
  %844 = zext i1 %843 to i8
  store i8 %844, i8* %42, align 1, !tbaa !2432
  %845 = trunc i64 %840 to i32
  %846 = and i32 %845, 255
  %847 = tail call i32 @llvm.ctpop.i32(i32 %846) #9
  %848 = trunc i32 %847 to i8
  %849 = and i8 %848, 1
  %850 = xor i8 %849, 1
  store i8 %850, i8* %49, align 1, !tbaa !2446
  %851 = xor i64 %838, %832
  %852 = xor i64 %851, %840
  %853 = lshr i64 %852, 4
  %854 = trunc i64 %853 to i8
  %855 = and i8 %854, 1
  store i8 %855, i8* %55, align 1, !tbaa !2450
  %856 = icmp eq i64 %840, 0
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %58, align 1, !tbaa !2447
  %858 = lshr i64 %840, 63
  %859 = trunc i64 %858 to i8
  store i8 %859, i8* %61, align 1, !tbaa !2448
  %860 = lshr i64 %832, 63
  %861 = xor i64 %858, %860
  %862 = xor i64 %858, %839
  %863 = add nuw nsw i64 %861, %862
  %864 = icmp eq i64 %863, 2
  %865 = zext i1 %864 to i8
  store i8 %865, i8* %67, align 1, !tbaa !2449
  %866 = load i64, i64* %RBP, align 8
  %867 = add i64 %866, -192
  %868 = add i64 %801, 63
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %867 to i32*
  %870 = load i32, i32* %869, align 4
  %871 = sext i32 %870 to i64
  %872 = mul nsw i64 %871, 520
  store i64 %872, i64* %RCX, align 8, !tbaa !2428
  %873 = lshr i64 %872, 63
  %874 = add i64 %872, %840
  store i64 %874, i64* %RAX, align 8, !tbaa !2428
  %875 = icmp ult i64 %874, %840
  %876 = icmp ult i64 %874, %872
  %877 = or i1 %875, %876
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %42, align 1, !tbaa !2432
  %879 = trunc i64 %874 to i32
  %880 = and i32 %879, 255
  %881 = tail call i32 @llvm.ctpop.i32(i32 %880) #9
  %882 = trunc i32 %881 to i8
  %883 = and i8 %882, 1
  %884 = xor i8 %883, 1
  store i8 %884, i8* %49, align 1, !tbaa !2446
  %885 = xor i64 %872, %840
  %886 = xor i64 %885, %874
  %887 = lshr i64 %886, 4
  %888 = trunc i64 %887 to i8
  %889 = and i8 %888, 1
  store i8 %889, i8* %55, align 1, !tbaa !2450
  %890 = icmp eq i64 %874, 0
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %58, align 1, !tbaa !2447
  %892 = lshr i64 %874, 63
  %893 = trunc i64 %892 to i8
  store i8 %893, i8* %61, align 1, !tbaa !2448
  %894 = xor i64 %892, %858
  %895 = xor i64 %892, %873
  %896 = add nuw nsw i64 %894, %895
  %897 = icmp eq i64 %896, 2
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %67, align 1, !tbaa !2449
  %899 = add i64 %866, -48
  %900 = add i64 %801, 77
  store i64 %900, i64* %PC, align 8
  %901 = inttoptr i64 %899 to i32*
  %902 = load i32, i32* %901, align 4
  %903 = sext i32 %902 to i64
  store i64 %903, i64* %RCX, align 8, !tbaa !2428
  %904 = shl nsw i64 %903, 3
  %905 = add i64 %904, %874
  %906 = add i64 %801, 82
  store i64 %906, i64* %PC, align 8
  %907 = load double, double* %257, align 1
  %908 = inttoptr i64 %905 to double*
  %909 = load double, double* %908, align 8
  %910 = fmul double %907, %909
  store double %910, double* %257, align 1, !tbaa !2452
  %911 = add i64 %866, -64
  %912 = add i64 %801, 87
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i64*
  %914 = load i64, i64* %913, align 8
  store i64 %914, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %915 = add i64 %866, -152
  %916 = add i64 %801, 94
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %915 to i64*
  %918 = load i64, i64* %917, align 8
  store i64 %918, i64* %RAX, align 8, !tbaa !2428
  %919 = add i64 %866, -188
  %920 = add i64 %801, 101
  store i64 %920, i64* %PC, align 8
  %921 = inttoptr i64 %919 to i32*
  %922 = load i32, i32* %921, align 4
  %923 = sext i32 %922 to i64
  store i64 %923, i64* %RCX, align 8, !tbaa !2428
  %924 = shl nsw i64 %923, 3
  %925 = add i64 %924, %918
  %926 = add i64 %801, 106
  store i64 %926, i64* %PC, align 8
  %927 = bitcast i64 %914 to double
  %928 = inttoptr i64 %925 to double*
  %929 = load double, double* %928, align 8
  %930 = fmul double %927, %929
  store double %930, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %931 = load i64, i64* %RBP, align 8
  %932 = add i64 %931, -168
  %933 = add i64 %801, 113
  store i64 %933, i64* %PC, align 8
  %934 = inttoptr i64 %932 to i64*
  %935 = load i64, i64* %934, align 8
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = add i64 %931, -48
  %937 = add i64 %801, 117
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = sext i32 %939 to i64
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %941 = shl nsw i64 %940, 3
  %942 = add i64 %941, %935
  %943 = add i64 %801, 122
  store i64 %943, i64* %PC, align 8
  %944 = inttoptr i64 %942 to double*
  %945 = load double, double* %944, align 8
  %946 = fdiv double %930, %945
  store double %946, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %947 = add i64 %931, -104
  %948 = add i64 %801, 126
  store i64 %948, i64* %PC, align 8
  %949 = inttoptr i64 %947 to i64*
  %950 = load i64, i64* %949, align 8
  store i64 %950, i64* %RAX, align 8, !tbaa !2428
  %951 = add i64 %931, -188
  %952 = add i64 %801, 133
  store i64 %952, i64* %PC, align 8
  %953 = inttoptr i64 %951 to i32*
  %954 = load i32, i32* %953, align 4
  %955 = sext i32 %954 to i64
  %956 = mul nsw i64 %955, 520
  store i64 %956, i64* %RCX, align 8, !tbaa !2428
  %957 = lshr i64 %956, 63
  %958 = add i64 %956, %950
  store i64 %958, i64* %RAX, align 8, !tbaa !2428
  %959 = icmp ult i64 %958, %950
  %960 = icmp ult i64 %958, %956
  %961 = or i1 %959, %960
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %42, align 1, !tbaa !2432
  %963 = trunc i64 %958 to i32
  %964 = and i32 %963, 255
  %965 = tail call i32 @llvm.ctpop.i32(i32 %964) #9
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  %968 = xor i8 %967, 1
  store i8 %968, i8* %49, align 1, !tbaa !2446
  %969 = xor i64 %956, %950
  %970 = xor i64 %969, %958
  %971 = lshr i64 %970, 4
  %972 = trunc i64 %971 to i8
  %973 = and i8 %972, 1
  store i8 %973, i8* %55, align 1, !tbaa !2450
  %974 = icmp eq i64 %958, 0
  %975 = zext i1 %974 to i8
  store i8 %975, i8* %58, align 1, !tbaa !2447
  %976 = lshr i64 %958, 63
  %977 = trunc i64 %976 to i8
  store i8 %977, i8* %61, align 1, !tbaa !2448
  %978 = lshr i64 %950, 63
  %979 = xor i64 %976, %978
  %980 = xor i64 %976, %957
  %981 = add nuw nsw i64 %979, %980
  %982 = icmp eq i64 %981, 2
  %983 = zext i1 %982 to i8
  store i8 %983, i8* %67, align 1, !tbaa !2449
  %984 = add i64 %931, -192
  %985 = add i64 %801, 150
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %984 to i32*
  %987 = load i32, i32* %986, align 4
  %988 = sext i32 %987 to i64
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = shl nsw i64 %988, 3
  %990 = add i64 %989, %958
  %991 = add i64 %801, 155
  store i64 %991, i64* %PC, align 8
  %992 = inttoptr i64 %990 to double*
  %993 = load double, double* %992, align 8
  %994 = fmul double %946, %993
  store double %994, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %995 = load double, double* %257, align 1
  %996 = fadd double %995, %994
  store double %996, double* %257, align 1, !tbaa !2452
  %997 = load i64, i64* %RBP, align 8
  %998 = add i64 %997, -64
  %999 = add i64 %801, 164
  store i64 %999, i64* %PC, align 8
  %1000 = inttoptr i64 %998 to i64*
  %1001 = load i64, i64* %1000, align 8
  store i64 %1001, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %1002 = add i64 %997, -144
  %1003 = add i64 %801, 171
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = add i64 %997, -188
  %1007 = add i64 %801, 178
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to i32*
  %1009 = load i32, i32* %1008, align 4
  %1010 = sext i32 %1009 to i64
  store i64 %1010, i64* %RCX, align 8, !tbaa !2428
  %1011 = shl nsw i64 %1010, 3
  %1012 = add i64 %1011, %1005
  %1013 = add i64 %801, 183
  store i64 %1013, i64* %PC, align 8
  %1014 = bitcast i64 %1001 to double
  %1015 = inttoptr i64 %1012 to double*
  %1016 = load double, double* %1015, align 8
  %1017 = fmul double %1014, %1016
  store double %1017, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1018 = add i64 %997, -168
  %1019 = add i64 %801, 190
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i64*
  %1021 = load i64, i64* %1020, align 8
  store i64 %1021, i64* %RAX, align 8, !tbaa !2428
  %1022 = add i64 %997, -48
  %1023 = add i64 %801, 194
  store i64 %1023, i64* %PC, align 8
  %1024 = inttoptr i64 %1022 to i32*
  %1025 = load i32, i32* %1024, align 4
  %1026 = sext i32 %1025 to i64
  store i64 %1026, i64* %RCX, align 8, !tbaa !2428
  %1027 = shl nsw i64 %1026, 3
  %1028 = add i64 %1027, %1021
  %1029 = add i64 %801, 199
  store i64 %1029, i64* %PC, align 8
  %1030 = inttoptr i64 %1028 to double*
  %1031 = load double, double* %1030, align 8
  %1032 = fdiv double %1017, %1031
  store double %1032, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1033 = add i64 %997, -112
  %1034 = add i64 %801, 203
  store i64 %1034, i64* %PC, align 8
  %1035 = inttoptr i64 %1033 to i64*
  %1036 = load i64, i64* %1035, align 8
  store i64 %1036, i64* %RAX, align 8, !tbaa !2428
  %1037 = add i64 %801, 210
  store i64 %1037, i64* %PC, align 8
  %1038 = load i32, i32* %1008, align 4
  %1039 = sext i32 %1038 to i64
  %1040 = mul nsw i64 %1039, 33800
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1041 = lshr i64 %1040, 63
  %1042 = add i64 %1040, %1036
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = icmp ult i64 %1042, %1036
  %1044 = icmp ult i64 %1042, %1040
  %1045 = or i1 %1043, %1044
  %1046 = zext i1 %1045 to i8
  store i8 %1046, i8* %42, align 1, !tbaa !2432
  %1047 = trunc i64 %1042 to i32
  %1048 = and i32 %1047, 255
  %1049 = tail call i32 @llvm.ctpop.i32(i32 %1048) #9
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  %1052 = xor i8 %1051, 1
  store i8 %1052, i8* %49, align 1, !tbaa !2446
  %1053 = xor i64 %1040, %1036
  %1054 = xor i64 %1053, %1042
  %1055 = lshr i64 %1054, 4
  %1056 = trunc i64 %1055 to i8
  %1057 = and i8 %1056, 1
  store i8 %1057, i8* %55, align 1, !tbaa !2450
  %1058 = icmp eq i64 %1042, 0
  %1059 = zext i1 %1058 to i8
  store i8 %1059, i8* %58, align 1, !tbaa !2447
  %1060 = lshr i64 %1042, 63
  %1061 = trunc i64 %1060 to i8
  store i8 %1061, i8* %61, align 1, !tbaa !2448
  %1062 = lshr i64 %1036, 63
  %1063 = xor i64 %1060, %1062
  %1064 = xor i64 %1060, %1041
  %1065 = add nuw nsw i64 %1063, %1064
  %1066 = icmp eq i64 %1065, 2
  %1067 = zext i1 %1066 to i8
  store i8 %1067, i8* %67, align 1, !tbaa !2449
  %1068 = load i64, i64* %RBP, align 8
  %1069 = add i64 %1068, -192
  %1070 = add i64 %801, 227
  store i64 %1070, i64* %PC, align 8
  %1071 = inttoptr i64 %1069 to i32*
  %1072 = load i32, i32* %1071, align 4
  %1073 = sext i32 %1072 to i64
  %1074 = mul nsw i64 %1073, 520
  store i64 %1074, i64* %RCX, align 8, !tbaa !2428
  %1075 = lshr i64 %1074, 63
  %1076 = add i64 %1074, %1042
  store i64 %1076, i64* %RAX, align 8, !tbaa !2428
  %1077 = icmp ult i64 %1076, %1042
  %1078 = icmp ult i64 %1076, %1074
  %1079 = or i1 %1077, %1078
  %1080 = zext i1 %1079 to i8
  store i8 %1080, i8* %42, align 1, !tbaa !2432
  %1081 = trunc i64 %1076 to i32
  %1082 = and i32 %1081, 255
  %1083 = tail call i32 @llvm.ctpop.i32(i32 %1082) #9
  %1084 = trunc i32 %1083 to i8
  %1085 = and i8 %1084, 1
  %1086 = xor i8 %1085, 1
  store i8 %1086, i8* %49, align 1, !tbaa !2446
  %1087 = xor i64 %1074, %1042
  %1088 = xor i64 %1087, %1076
  %1089 = lshr i64 %1088, 4
  %1090 = trunc i64 %1089 to i8
  %1091 = and i8 %1090, 1
  store i8 %1091, i8* %55, align 1, !tbaa !2450
  %1092 = icmp eq i64 %1076, 0
  %1093 = zext i1 %1092 to i8
  store i8 %1093, i8* %58, align 1, !tbaa !2447
  %1094 = lshr i64 %1076, 63
  %1095 = trunc i64 %1094 to i8
  store i8 %1095, i8* %61, align 1, !tbaa !2448
  %1096 = xor i64 %1094, %1060
  %1097 = xor i64 %1094, %1075
  %1098 = add nuw nsw i64 %1096, %1097
  %1099 = icmp eq i64 %1098, 2
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %67, align 1, !tbaa !2449
  %1101 = add i64 %1068, -48
  %1102 = add i64 %801, 241
  store i64 %1102, i64* %PC, align 8
  %1103 = inttoptr i64 %1101 to i32*
  %1104 = load i32, i32* %1103, align 4
  %1105 = sext i32 %1104 to i64
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = shl nsw i64 %1105, 3
  %1107 = add i64 %1106, %1076
  %1108 = add i64 %801, 246
  store i64 %1108, i64* %PC, align 8
  %1109 = load double, double* %155, align 1
  %1110 = inttoptr i64 %1107 to double*
  %1111 = load double, double* %1110, align 8
  %1112 = fmul double %1109, %1111
  store double %1112, double* %155, align 1, !tbaa !2452
  %1113 = load double, double* %257, align 1
  %1114 = fsub double %1113, %1112
  store double %1114, double* %257, align 1, !tbaa !2452
  %1115 = add i64 %1068, -136
  %1116 = add i64 %801, 257
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i64*
  %1118 = load i64, i64* %1117, align 8
  store i64 %1118, i64* %RAX, align 8, !tbaa !2428
  %1119 = add i64 %1068, -188
  %1120 = add i64 %801, 264
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i32*
  %1122 = load i32, i32* %1121, align 4
  %1123 = sext i32 %1122 to i64
  %1124 = mul nsw i64 %1123, 33800
  store i64 %1124, i64* %RCX, align 8, !tbaa !2428
  %1125 = lshr i64 %1124, 63
  %1126 = add i64 %1124, %1118
  store i64 %1126, i64* %RAX, align 8, !tbaa !2428
  %1127 = icmp ult i64 %1126, %1118
  %1128 = icmp ult i64 %1126, %1124
  %1129 = or i1 %1127, %1128
  %1130 = zext i1 %1129 to i8
  store i8 %1130, i8* %42, align 1, !tbaa !2432
  %1131 = trunc i64 %1126 to i32
  %1132 = and i32 %1131, 255
  %1133 = tail call i32 @llvm.ctpop.i32(i32 %1132) #9
  %1134 = trunc i32 %1133 to i8
  %1135 = and i8 %1134, 1
  %1136 = xor i8 %1135, 1
  store i8 %1136, i8* %49, align 1, !tbaa !2446
  %1137 = xor i64 %1124, %1118
  %1138 = xor i64 %1137, %1126
  %1139 = lshr i64 %1138, 4
  %1140 = trunc i64 %1139 to i8
  %1141 = and i8 %1140, 1
  store i8 %1141, i8* %55, align 1, !tbaa !2450
  %1142 = icmp eq i64 %1126, 0
  %1143 = zext i1 %1142 to i8
  store i8 %1143, i8* %58, align 1, !tbaa !2447
  %1144 = lshr i64 %1126, 63
  %1145 = trunc i64 %1144 to i8
  store i8 %1145, i8* %61, align 1, !tbaa !2448
  %1146 = lshr i64 %1118, 63
  %1147 = xor i64 %1144, %1146
  %1148 = xor i64 %1144, %1125
  %1149 = add nuw nsw i64 %1147, %1148
  %1150 = icmp eq i64 %1149, 2
  %1151 = zext i1 %1150 to i8
  store i8 %1151, i8* %67, align 1, !tbaa !2449
  %1152 = load i64, i64* %RBP, align 8
  %1153 = add i64 %1152, -192
  %1154 = add i64 %801, 281
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1153 to i32*
  %1156 = load i32, i32* %1155, align 4
  %1157 = sext i32 %1156 to i64
  %1158 = mul nsw i64 %1157, 520
  store i64 %1158, i64* %RCX, align 8, !tbaa !2428
  %1159 = lshr i64 %1158, 63
  %1160 = add i64 %1158, %1126
  store i64 %1160, i64* %RAX, align 8, !tbaa !2428
  %1161 = icmp ult i64 %1160, %1126
  %1162 = icmp ult i64 %1160, %1158
  %1163 = or i1 %1161, %1162
  %1164 = zext i1 %1163 to i8
  store i8 %1164, i8* %42, align 1, !tbaa !2432
  %1165 = trunc i64 %1160 to i32
  %1166 = and i32 %1165, 255
  %1167 = tail call i32 @llvm.ctpop.i32(i32 %1166) #9
  %1168 = trunc i32 %1167 to i8
  %1169 = and i8 %1168, 1
  %1170 = xor i8 %1169, 1
  store i8 %1170, i8* %49, align 1, !tbaa !2446
  %1171 = xor i64 %1158, %1126
  %1172 = xor i64 %1171, %1160
  %1173 = lshr i64 %1172, 4
  %1174 = trunc i64 %1173 to i8
  %1175 = and i8 %1174, 1
  store i8 %1175, i8* %55, align 1, !tbaa !2450
  %1176 = icmp eq i64 %1160, 0
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %58, align 1, !tbaa !2447
  %1178 = lshr i64 %1160, 63
  %1179 = trunc i64 %1178 to i8
  store i8 %1179, i8* %61, align 1, !tbaa !2448
  %1180 = xor i64 %1178, %1144
  %1181 = xor i64 %1178, %1159
  %1182 = add nuw nsw i64 %1180, %1181
  %1183 = icmp eq i64 %1182, 2
  %1184 = zext i1 %1183 to i8
  store i8 %1184, i8* %67, align 1, !tbaa !2449
  %1185 = add i64 %1152, -48
  %1186 = add i64 %801, 295
  store i64 %1186, i64* %PC, align 8
  %1187 = inttoptr i64 %1185 to i32*
  %1188 = load i32, i32* %1187, align 4
  %1189 = sext i32 %1188 to i64
  store i64 %1189, i64* %RCX, align 8, !tbaa !2428
  %1190 = shl nsw i64 %1189, 3
  %1191 = add i64 %1190, %1160
  %1192 = add i64 %801, 300
  store i64 %1192, i64* %PC, align 8
  %1193 = load i64, i64* %148, align 1
  %1194 = inttoptr i64 %1191 to i64*
  store i64 %1193, i64* %1194, align 8
  %1195 = load i64, i64* %RBP, align 8
  %1196 = add i64 %1195, -104
  %1197 = load i64, i64* %PC, align 8
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC, align 8
  %1199 = inttoptr i64 %1196 to i64*
  %1200 = load i64, i64* %1199, align 8
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = add i64 %1195, -188
  %1202 = add i64 %1197, 11
  store i64 %1202, i64* %PC, align 8
  %1203 = inttoptr i64 %1201 to i32*
  %1204 = load i32, i32* %1203, align 4
  %1205 = sext i32 %1204 to i64
  %1206 = mul nsw i64 %1205, 520
  store i64 %1206, i64* %RCX, align 8, !tbaa !2428
  %1207 = lshr i64 %1206, 63
  %1208 = add i64 %1206, %1200
  store i64 %1208, i64* %RAX, align 8, !tbaa !2428
  %1209 = icmp ult i64 %1208, %1200
  %1210 = icmp ult i64 %1208, %1206
  %1211 = or i1 %1209, %1210
  %1212 = zext i1 %1211 to i8
  store i8 %1212, i8* %42, align 1, !tbaa !2432
  %1213 = trunc i64 %1208 to i32
  %1214 = and i32 %1213, 255
  %1215 = tail call i32 @llvm.ctpop.i32(i32 %1214) #9
  %1216 = trunc i32 %1215 to i8
  %1217 = and i8 %1216, 1
  %1218 = xor i8 %1217, 1
  store i8 %1218, i8* %49, align 1, !tbaa !2446
  %1219 = xor i64 %1206, %1200
  %1220 = xor i64 %1219, %1208
  %1221 = lshr i64 %1220, 4
  %1222 = trunc i64 %1221 to i8
  %1223 = and i8 %1222, 1
  store i8 %1223, i8* %55, align 1, !tbaa !2450
  %1224 = icmp eq i64 %1208, 0
  %1225 = zext i1 %1224 to i8
  store i8 %1225, i8* %58, align 1, !tbaa !2447
  %1226 = lshr i64 %1208, 63
  %1227 = trunc i64 %1226 to i8
  store i8 %1227, i8* %61, align 1, !tbaa !2448
  %1228 = lshr i64 %1200, 63
  %1229 = xor i64 %1226, %1228
  %1230 = xor i64 %1226, %1207
  %1231 = add nuw nsw i64 %1229, %1230
  %1232 = icmp eq i64 %1231, 2
  %1233 = zext i1 %1232 to i8
  store i8 %1233, i8* %67, align 1, !tbaa !2449
  %1234 = add i64 %1195, -192
  %1235 = add i64 %1197, 28
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1234 to i32*
  %1237 = load i32, i32* %1236, align 4
  %1238 = sext i32 %1237 to i64
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1239 = shl nsw i64 %1238, 3
  %1240 = add i64 %1239, %1208
  %1241 = add i64 %1197, 33
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i64*
  %1243 = load i64, i64* %1242, align 8
  store i64 %1243, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1244 = add i64 %1195, -112
  %1245 = add i64 %1197, 37
  store i64 %1245, i64* %PC, align 8
  %1246 = inttoptr i64 %1244 to i64*
  %1247 = load i64, i64* %1246, align 8
  store i64 %1247, i64* %RAX, align 8, !tbaa !2428
  %1248 = add i64 %1197, 44
  store i64 %1248, i64* %PC, align 8
  %1249 = load i32, i32* %1203, align 4
  %1250 = sext i32 %1249 to i64
  %1251 = mul nsw i64 %1250, 33800
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = lshr i64 %1251, 63
  %1253 = add i64 %1251, %1247
  store i64 %1253, i64* %RAX, align 8, !tbaa !2428
  %1254 = icmp ult i64 %1253, %1247
  %1255 = icmp ult i64 %1253, %1251
  %1256 = or i1 %1254, %1255
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %42, align 1, !tbaa !2432
  %1258 = trunc i64 %1253 to i32
  %1259 = and i32 %1258, 255
  %1260 = tail call i32 @llvm.ctpop.i32(i32 %1259) #9
  %1261 = trunc i32 %1260 to i8
  %1262 = and i8 %1261, 1
  %1263 = xor i8 %1262, 1
  store i8 %1263, i8* %49, align 1, !tbaa !2446
  %1264 = xor i64 %1251, %1247
  %1265 = xor i64 %1264, %1253
  %1266 = lshr i64 %1265, 4
  %1267 = trunc i64 %1266 to i8
  %1268 = and i8 %1267, 1
  store i8 %1268, i8* %55, align 1, !tbaa !2450
  %1269 = icmp eq i64 %1253, 0
  %1270 = zext i1 %1269 to i8
  store i8 %1270, i8* %58, align 1, !tbaa !2447
  %1271 = lshr i64 %1253, 63
  %1272 = trunc i64 %1271 to i8
  store i8 %1272, i8* %61, align 1, !tbaa !2448
  %1273 = lshr i64 %1247, 63
  %1274 = xor i64 %1271, %1273
  %1275 = xor i64 %1271, %1252
  %1276 = add nuw nsw i64 %1274, %1275
  %1277 = icmp eq i64 %1276, 2
  %1278 = zext i1 %1277 to i8
  store i8 %1278, i8* %67, align 1, !tbaa !2449
  %1279 = load i64, i64* %RBP, align 8
  %1280 = add i64 %1279, -192
  %1281 = add i64 %1197, 61
  store i64 %1281, i64* %PC, align 8
  %1282 = inttoptr i64 %1280 to i32*
  %1283 = load i32, i32* %1282, align 4
  %1284 = sext i32 %1283 to i64
  %1285 = mul nsw i64 %1284, 520
  store i64 %1285, i64* %RCX, align 8, !tbaa !2428
  %1286 = lshr i64 %1285, 63
  %1287 = add i64 %1285, %1253
  store i64 %1287, i64* %RAX, align 8, !tbaa !2428
  %1288 = icmp ult i64 %1287, %1253
  %1289 = icmp ult i64 %1287, %1285
  %1290 = or i1 %1288, %1289
  %1291 = zext i1 %1290 to i8
  store i8 %1291, i8* %42, align 1, !tbaa !2432
  %1292 = trunc i64 %1287 to i32
  %1293 = and i32 %1292, 255
  %1294 = tail call i32 @llvm.ctpop.i32(i32 %1293) #9
  %1295 = trunc i32 %1294 to i8
  %1296 = and i8 %1295, 1
  %1297 = xor i8 %1296, 1
  store i8 %1297, i8* %49, align 1, !tbaa !2446
  %1298 = xor i64 %1285, %1253
  %1299 = xor i64 %1298, %1287
  %1300 = lshr i64 %1299, 4
  %1301 = trunc i64 %1300 to i8
  %1302 = and i8 %1301, 1
  store i8 %1302, i8* %55, align 1, !tbaa !2450
  %1303 = icmp eq i64 %1287, 0
  %1304 = zext i1 %1303 to i8
  store i8 %1304, i8* %58, align 1, !tbaa !2447
  %1305 = lshr i64 %1287, 63
  %1306 = trunc i64 %1305 to i8
  store i8 %1306, i8* %61, align 1, !tbaa !2448
  %1307 = xor i64 %1305, %1271
  %1308 = xor i64 %1305, %1286
  %1309 = add nuw nsw i64 %1307, %1308
  %1310 = icmp eq i64 %1309, 2
  %1311 = zext i1 %1310 to i8
  store i8 %1311, i8* %67, align 1, !tbaa !2449
  %1312 = add i64 %1279, -48
  %1313 = add i64 %1197, 75
  store i64 %1313, i64* %PC, align 8
  %1314 = inttoptr i64 %1312 to i32*
  %1315 = load i32, i32* %1314, align 4
  %1316 = sext i32 %1315 to i64
  store i64 %1316, i64* %RCX, align 8, !tbaa !2428
  %1317 = shl nsw i64 %1316, 3
  %1318 = add i64 %1317, %1287
  %1319 = add i64 %1197, 80
  store i64 %1319, i64* %PC, align 8
  %1320 = load i64, i64* %148, align 1
  %1321 = inttoptr i64 %1318 to i64*
  store i64 %1320, i64* %1321, align 8
  %1322 = load i64, i64* %RBP, align 8
  %1323 = add i64 %1322, -196
  %1324 = load i64, i64* %PC, align 8
  %1325 = add i64 %1324, 10
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1323 to i32*
  store i32 0, i32* %1326, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_401c20

block_4015b3:                                     ; preds = %block_4015c2, %block_4015a9
  %1327 = phi i64 [ %4727, %block_4015c2 ], [ %.pre11, %block_4015a9 ]
  %1328 = load i64, i64* %RBP, align 8
  %1329 = add i64 %1328, -196
  %1330 = add i64 %1327, 6
  store i64 %1330, i64* %PC, align 8
  %1331 = inttoptr i64 %1329 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = zext i32 %1332 to i64
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = add i64 %1328, -48
  %1335 = add i64 %1327, 9
  store i64 %1335, i64* %PC, align 8
  %1336 = inttoptr i64 %1334 to i32*
  %1337 = load i32, i32* %1336, align 4
  %1338 = sub i32 %1332, %1337
  %1339 = icmp ult i32 %1332, %1337
  %1340 = zext i1 %1339 to i8
  store i8 %1340, i8* %42, align 1, !tbaa !2432
  %1341 = and i32 %1338, 255
  %1342 = tail call i32 @llvm.ctpop.i32(i32 %1341) #9
  %1343 = trunc i32 %1342 to i8
  %1344 = and i8 %1343, 1
  %1345 = xor i8 %1344, 1
  store i8 %1345, i8* %49, align 1, !tbaa !2446
  %1346 = xor i32 %1337, %1332
  %1347 = xor i32 %1346, %1338
  %1348 = lshr i32 %1347, 4
  %1349 = trunc i32 %1348 to i8
  %1350 = and i8 %1349, 1
  store i8 %1350, i8* %55, align 1, !tbaa !2450
  %1351 = icmp eq i32 %1338, 0
  %1352 = zext i1 %1351 to i8
  store i8 %1352, i8* %58, align 1, !tbaa !2447
  %1353 = lshr i32 %1338, 31
  %1354 = trunc i32 %1353 to i8
  store i8 %1354, i8* %61, align 1, !tbaa !2448
  %1355 = lshr i32 %1332, 31
  %1356 = lshr i32 %1337, 31
  %1357 = xor i32 %1356, %1355
  %1358 = xor i32 %1353, %1355
  %1359 = add nuw nsw i32 %1358, %1357
  %1360 = icmp eq i32 %1359, 2
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %67, align 1, !tbaa !2449
  %1362 = icmp ne i8 %1354, 0
  %1363 = xor i1 %1362, %1360
  %.v13 = select i1 %1363, i64 15, i64 864
  %1364 = add i64 %1327, %.v13
  %1365 = add i64 %1328, -120
  %1366 = add i64 %1364, 4
  store i64 %1366, i64* %PC, align 8
  %1367 = inttoptr i64 %1365 to i64*
  %1368 = load i64, i64* %1367, align 8
  store i64 %1368, i64* %RAX, align 8, !tbaa !2428
  %1369 = add i64 %1328, -188
  %1370 = add i64 %1364, 11
  store i64 %1370, i64* %PC, align 8
  %1371 = inttoptr i64 %1369 to i32*
  %1372 = load i32, i32* %1371, align 4
  %1373 = sext i32 %1372 to i64
  %1374 = mul nsw i64 %1373, 33800
  store i64 %1374, i64* %RCX, align 8, !tbaa !2428
  %1375 = lshr i64 %1374, 63
  %1376 = add i64 %1374, %1368
  store i64 %1376, i64* %RAX, align 8, !tbaa !2428
  %1377 = icmp ult i64 %1376, %1368
  %1378 = icmp ult i64 %1376, %1374
  %1379 = or i1 %1377, %1378
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %42, align 1, !tbaa !2432
  %1381 = trunc i64 %1376 to i32
  %1382 = and i32 %1381, 255
  %1383 = tail call i32 @llvm.ctpop.i32(i32 %1382) #9
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  store i8 %1386, i8* %49, align 1, !tbaa !2446
  %1387 = xor i64 %1374, %1368
  %1388 = xor i64 %1387, %1376
  %1389 = lshr i64 %1388, 4
  %1390 = trunc i64 %1389 to i8
  %1391 = and i8 %1390, 1
  store i8 %1391, i8* %55, align 1, !tbaa !2450
  %1392 = icmp eq i64 %1376, 0
  %1393 = zext i1 %1392 to i8
  store i8 %1393, i8* %58, align 1, !tbaa !2447
  %1394 = lshr i64 %1376, 63
  %1395 = trunc i64 %1394 to i8
  store i8 %1395, i8* %61, align 1, !tbaa !2448
  %1396 = lshr i64 %1368, 63
  %1397 = xor i64 %1394, %1396
  %1398 = xor i64 %1394, %1375
  %1399 = add nuw nsw i64 %1397, %1398
  %1400 = icmp eq i64 %1399, 2
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %67, align 1, !tbaa !2449
  %1402 = load i64, i64* %RBP, align 8
  %1403 = add i64 %1402, -192
  %1404 = add i64 %1364, 28
  store i64 %1404, i64* %PC, align 8
  %1405 = inttoptr i64 %1403 to i32*
  %1406 = load i32, i32* %1405, align 4
  %1407 = sext i32 %1406 to i64
  %1408 = mul nsw i64 %1407, 520
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = lshr i64 %1408, 63
  %1410 = add i64 %1364, 38
  store i64 %1410, i64* %PC, align 8
  %1411 = add i64 %1408, %1376
  store i64 %1411, i64* %RAX, align 8, !tbaa !2428
  %1412 = icmp ult i64 %1411, %1376
  %1413 = icmp ult i64 %1411, %1408
  %1414 = or i1 %1412, %1413
  %1415 = zext i1 %1414 to i8
  store i8 %1415, i8* %42, align 1, !tbaa !2432
  %1416 = trunc i64 %1411 to i32
  %1417 = and i32 %1416, 255
  %1418 = tail call i32 @llvm.ctpop.i32(i32 %1417) #9
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  %1421 = xor i8 %1420, 1
  store i8 %1421, i8* %49, align 1, !tbaa !2446
  %1422 = xor i64 %1408, %1376
  %1423 = xor i64 %1422, %1411
  %1424 = lshr i64 %1423, 4
  %1425 = trunc i64 %1424 to i8
  %1426 = and i8 %1425, 1
  store i8 %1426, i8* %55, align 1, !tbaa !2450
  %1427 = icmp eq i64 %1411, 0
  %1428 = zext i1 %1427 to i8
  store i8 %1428, i8* %58, align 1, !tbaa !2447
  %1429 = lshr i64 %1411, 63
  %1430 = trunc i64 %1429 to i8
  store i8 %1430, i8* %61, align 1, !tbaa !2448
  %1431 = xor i64 %1429, %1394
  %1432 = xor i64 %1429, %1409
  %1433 = add nuw nsw i64 %1431, %1432
  %1434 = icmp eq i64 %1433, 2
  %1435 = zext i1 %1434 to i8
  store i8 %1435, i8* %67, align 1, !tbaa !2449
  br i1 %1363, label %block_4015c2, label %block_401913

block_401c2f:                                     ; preds = %block_401c20
  %1436 = add i64 %4841, -196
  %1437 = add i64 %4803, 42
  store i64 %1437, i64* %PC, align 8
  %1438 = inttoptr i64 %1436 to i32*
  %1439 = load i32, i32* %1438, align 4
  %1440 = sext i32 %1439 to i64
  store i64 %1440, i64* %RCX, align 8, !tbaa !2428
  %1441 = shl nsw i64 %1440, 3
  %1442 = add i64 %1441, %4850
  %1443 = add i64 %4803, 47
  store i64 %1443, i64* %PC, align 8
  %1444 = inttoptr i64 %1442 to i64*
  %1445 = load i64, i64* %1444, align 8
  store i64 %1445, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1446 = add i64 %4841, -80
  %1447 = add i64 %4803, 51
  store i64 %1447, i64* %PC, align 8
  %1448 = inttoptr i64 %1446 to i64*
  %1449 = load i64, i64* %1448, align 8
  store i64 %1449, i64* %RAX, align 8, !tbaa !2428
  %1450 = add i64 %4841, -188
  %1451 = add i64 %4803, 58
  store i64 %1451, i64* %PC, align 8
  %1452 = inttoptr i64 %1450 to i32*
  %1453 = load i32, i32* %1452, align 4
  %1454 = sext i32 %1453 to i64
  %1455 = mul nsw i64 %1454, 520
  store i64 %1455, i64* %RCX, align 8, !tbaa !2428
  %1456 = lshr i64 %1455, 63
  %1457 = add i64 %1455, %1449
  store i64 %1457, i64* %RAX, align 8, !tbaa !2428
  %1458 = icmp ult i64 %1457, %1449
  %1459 = icmp ult i64 %1457, %1455
  %1460 = or i1 %1458, %1459
  %1461 = zext i1 %1460 to i8
  store i8 %1461, i8* %42, align 1, !tbaa !2432
  %1462 = trunc i64 %1457 to i32
  %1463 = and i32 %1462, 255
  %1464 = tail call i32 @llvm.ctpop.i32(i32 %1463) #9
  %1465 = trunc i32 %1464 to i8
  %1466 = and i8 %1465, 1
  %1467 = xor i8 %1466, 1
  store i8 %1467, i8* %49, align 1, !tbaa !2446
  %1468 = xor i64 %1455, %1449
  %1469 = xor i64 %1468, %1457
  %1470 = lshr i64 %1469, 4
  %1471 = trunc i64 %1470 to i8
  %1472 = and i8 %1471, 1
  store i8 %1472, i8* %55, align 1, !tbaa !2450
  %1473 = icmp eq i64 %1457, 0
  %1474 = zext i1 %1473 to i8
  store i8 %1474, i8* %58, align 1, !tbaa !2447
  %1475 = lshr i64 %1457, 63
  %1476 = trunc i64 %1475 to i8
  store i8 %1476, i8* %61, align 1, !tbaa !2448
  %1477 = lshr i64 %1449, 63
  %1478 = xor i64 %1475, %1477
  %1479 = xor i64 %1475, %1456
  %1480 = add nuw nsw i64 %1478, %1479
  %1481 = icmp eq i64 %1480, 2
  %1482 = zext i1 %1481 to i8
  store i8 %1482, i8* %67, align 1, !tbaa !2449
  %1483 = add i64 %4803, 75
  store i64 %1483, i64* %PC, align 8
  %1484 = load i32, i32* %1438, align 4
  %1485 = sext i32 %1484 to i64
  store i64 %1485, i64* %RCX, align 8, !tbaa !2428
  %1486 = shl nsw i64 %1485, 3
  %1487 = add i64 %1486, %1457
  %1488 = add i64 %4803, 80
  store i64 %1488, i64* %PC, align 8
  %1489 = bitcast i64 %1445 to double
  %1490 = inttoptr i64 %1487 to double*
  %1491 = load double, double* %1490, align 8
  %1492 = fsub double %1489, %1491
  store double %1492, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %1493 = load i64, i64* %RBP, align 8
  %1494 = add i64 %1493, -128
  %1495 = add i64 %4803, 84
  store i64 %1495, i64* %PC, align 8
  %1496 = inttoptr i64 %1494 to i64*
  %1497 = load i64, i64* %1496, align 8
  store i64 %1497, i64* %RAX, align 8, !tbaa !2428
  %1498 = add i64 %1493, -188
  %1499 = add i64 %4803, 91
  store i64 %1499, i64* %PC, align 8
  %1500 = inttoptr i64 %1498 to i32*
  %1501 = load i32, i32* %1500, align 4
  %1502 = sext i32 %1501 to i64
  %1503 = mul nsw i64 %1502, 33800
  store i64 %1503, i64* %RCX, align 8, !tbaa !2428
  %1504 = lshr i64 %1503, 63
  %1505 = add i64 %1503, %1497
  store i64 %1505, i64* %RAX, align 8, !tbaa !2428
  %1506 = icmp ult i64 %1505, %1497
  %1507 = icmp ult i64 %1505, %1503
  %1508 = or i1 %1506, %1507
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %42, align 1, !tbaa !2432
  %1510 = trunc i64 %1505 to i32
  %1511 = and i32 %1510, 255
  %1512 = tail call i32 @llvm.ctpop.i32(i32 %1511) #9
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = xor i8 %1514, 1
  store i8 %1515, i8* %49, align 1, !tbaa !2446
  %1516 = xor i64 %1503, %1497
  %1517 = xor i64 %1516, %1505
  %1518 = lshr i64 %1517, 4
  %1519 = trunc i64 %1518 to i8
  %1520 = and i8 %1519, 1
  store i8 %1520, i8* %55, align 1, !tbaa !2450
  %1521 = icmp eq i64 %1505, 0
  %1522 = zext i1 %1521 to i8
  store i8 %1522, i8* %58, align 1, !tbaa !2447
  %1523 = lshr i64 %1505, 63
  %1524 = trunc i64 %1523 to i8
  store i8 %1524, i8* %61, align 1, !tbaa !2448
  %1525 = lshr i64 %1497, 63
  %1526 = xor i64 %1523, %1525
  %1527 = xor i64 %1523, %1504
  %1528 = add nuw nsw i64 %1526, %1527
  %1529 = icmp eq i64 %1528, 2
  %1530 = zext i1 %1529 to i8
  store i8 %1530, i8* %67, align 1, !tbaa !2449
  %1531 = add i64 %1493, -52
  %1532 = add i64 %4803, 105
  store i64 %1532, i64* %PC, align 8
  %1533 = inttoptr i64 %1531 to i32*
  %1534 = load i32, i32* %1533, align 4
  %1535 = sext i32 %1534 to i64
  %1536 = mul nsw i64 %1535, 520
  store i64 %1536, i64* %RCX, align 8, !tbaa !2428
  %1537 = lshr i64 %1536, 63
  %1538 = add i64 %1536, %1505
  store i64 %1538, i64* %RAX, align 8, !tbaa !2428
  %1539 = icmp ult i64 %1538, %1505
  %1540 = icmp ult i64 %1538, %1536
  %1541 = or i1 %1539, %1540
  %1542 = zext i1 %1541 to i8
  store i8 %1542, i8* %42, align 1, !tbaa !2432
  %1543 = trunc i64 %1538 to i32
  %1544 = and i32 %1543, 255
  %1545 = tail call i32 @llvm.ctpop.i32(i32 %1544) #9
  %1546 = trunc i32 %1545 to i8
  %1547 = and i8 %1546, 1
  %1548 = xor i8 %1547, 1
  store i8 %1548, i8* %49, align 1, !tbaa !2446
  %1549 = xor i64 %1536, %1505
  %1550 = xor i64 %1549, %1538
  %1551 = lshr i64 %1550, 4
  %1552 = trunc i64 %1551 to i8
  %1553 = and i8 %1552, 1
  store i8 %1553, i8* %55, align 1, !tbaa !2450
  %1554 = icmp eq i64 %1538, 0
  %1555 = zext i1 %1554 to i8
  store i8 %1555, i8* %58, align 1, !tbaa !2447
  %1556 = lshr i64 %1538, 63
  %1557 = trunc i64 %1556 to i8
  store i8 %1557, i8* %61, align 1, !tbaa !2448
  %1558 = xor i64 %1556, %1523
  %1559 = xor i64 %1556, %1537
  %1560 = add nuw nsw i64 %1558, %1559
  %1561 = icmp eq i64 %1560, 2
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %67, align 1, !tbaa !2449
  %1563 = load i64, i64* %RBP, align 8
  %1564 = add i64 %1563, -196
  %1565 = add i64 %4803, 121
  store i64 %1565, i64* %PC, align 8
  %1566 = inttoptr i64 %1564 to i32*
  %1567 = load i32, i32* %1566, align 4
  %1568 = add i32 %1567, 1
  %1569 = zext i32 %1568 to i64
  store i64 %1569, i64* %RDX, align 8, !tbaa !2428
  %1570 = icmp eq i32 %1567, -1
  %1571 = icmp eq i32 %1568, 0
  %1572 = or i1 %1570, %1571
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %42, align 1, !tbaa !2432
  %1574 = and i32 %1568, 255
  %1575 = tail call i32 @llvm.ctpop.i32(i32 %1574) #9
  %1576 = trunc i32 %1575 to i8
  %1577 = and i8 %1576, 1
  %1578 = xor i8 %1577, 1
  store i8 %1578, i8* %49, align 1, !tbaa !2446
  %1579 = xor i32 %1568, %1567
  %1580 = lshr i32 %1579, 4
  %1581 = trunc i32 %1580 to i8
  %1582 = and i8 %1581, 1
  store i8 %1582, i8* %55, align 1, !tbaa !2450
  %1583 = zext i1 %1571 to i8
  store i8 %1583, i8* %58, align 1, !tbaa !2447
  %1584 = lshr i32 %1568, 31
  %1585 = trunc i32 %1584 to i8
  store i8 %1585, i8* %61, align 1, !tbaa !2448
  %1586 = lshr i32 %1567, 31
  %1587 = xor i32 %1584, %1586
  %1588 = add nuw nsw i32 %1587, %1584
  %1589 = icmp eq i32 %1588, 2
  %1590 = zext i1 %1589 to i8
  store i8 %1590, i8* %67, align 1, !tbaa !2449
  %1591 = sext i32 %1568 to i64
  store i64 %1591, i64* %RCX, align 8, !tbaa !2428
  %1592 = shl nsw i64 %1591, 3
  %1593 = add i64 %1538, %1592
  %1594 = add i64 %4803, 132
  store i64 %1594, i64* %PC, align 8
  %1595 = load double, double* %257, align 1
  %1596 = inttoptr i64 %1593 to double*
  %1597 = load double, double* %1596, align 8
  %1598 = fadd double %1595, %1597
  store double %1598, double* %257, align 1, !tbaa !2452
  %1599 = add i64 %1563, -128
  %1600 = add i64 %4803, 136
  store i64 %1600, i64* %PC, align 8
  %1601 = inttoptr i64 %1599 to i64*
  %1602 = load i64, i64* %1601, align 8
  store i64 %1602, i64* %RAX, align 8, !tbaa !2428
  %1603 = add i64 %1563, -188
  %1604 = add i64 %4803, 143
  store i64 %1604, i64* %PC, align 8
  %1605 = inttoptr i64 %1603 to i32*
  %1606 = load i32, i32* %1605, align 4
  %1607 = sext i32 %1606 to i64
  %1608 = mul nsw i64 %1607, 33800
  store i64 %1608, i64* %RCX, align 8, !tbaa !2428
  %1609 = lshr i64 %1608, 63
  %1610 = add i64 %1608, %1602
  store i64 %1610, i64* %RAX, align 8, !tbaa !2428
  %1611 = icmp ult i64 %1610, %1602
  %1612 = icmp ult i64 %1610, %1608
  %1613 = or i1 %1611, %1612
  %1614 = zext i1 %1613 to i8
  store i8 %1614, i8* %42, align 1, !tbaa !2432
  %1615 = trunc i64 %1610 to i32
  %1616 = and i32 %1615, 255
  %1617 = tail call i32 @llvm.ctpop.i32(i32 %1616) #9
  %1618 = trunc i32 %1617 to i8
  %1619 = and i8 %1618, 1
  %1620 = xor i8 %1619, 1
  store i8 %1620, i8* %49, align 1, !tbaa !2446
  %1621 = xor i64 %1608, %1602
  %1622 = xor i64 %1621, %1610
  %1623 = lshr i64 %1622, 4
  %1624 = trunc i64 %1623 to i8
  %1625 = and i8 %1624, 1
  store i8 %1625, i8* %55, align 1, !tbaa !2450
  %1626 = icmp eq i64 %1610, 0
  %1627 = zext i1 %1626 to i8
  store i8 %1627, i8* %58, align 1, !tbaa !2447
  %1628 = lshr i64 %1610, 63
  %1629 = trunc i64 %1628 to i8
  store i8 %1629, i8* %61, align 1, !tbaa !2448
  %1630 = lshr i64 %1602, 63
  %1631 = xor i64 %1628, %1630
  %1632 = xor i64 %1628, %1609
  %1633 = add nuw nsw i64 %1631, %1632
  %1634 = icmp eq i64 %1633, 2
  %1635 = zext i1 %1634 to i8
  store i8 %1635, i8* %67, align 1, !tbaa !2449
  %1636 = load i64, i64* %RBP, align 8
  %1637 = add i64 %1636, -52
  %1638 = add i64 %4803, 157
  store i64 %1638, i64* %PC, align 8
  %1639 = inttoptr i64 %1637 to i32*
  %1640 = load i32, i32* %1639, align 4
  %1641 = sext i32 %1640 to i64
  %1642 = mul nsw i64 %1641, 520
  store i64 %1642, i64* %RCX, align 8, !tbaa !2428
  %1643 = lshr i64 %1642, 63
  %1644 = add i64 %1642, %1610
  store i64 %1644, i64* %RAX, align 8, !tbaa !2428
  %1645 = icmp ult i64 %1644, %1610
  %1646 = icmp ult i64 %1644, %1642
  %1647 = or i1 %1645, %1646
  %1648 = zext i1 %1647 to i8
  store i8 %1648, i8* %42, align 1, !tbaa !2432
  %1649 = trunc i64 %1644 to i32
  %1650 = and i32 %1649, 255
  %1651 = tail call i32 @llvm.ctpop.i32(i32 %1650) #9
  %1652 = trunc i32 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = xor i8 %1653, 1
  store i8 %1654, i8* %49, align 1, !tbaa !2446
  %1655 = xor i64 %1642, %1610
  %1656 = xor i64 %1655, %1644
  %1657 = lshr i64 %1656, 4
  %1658 = trunc i64 %1657 to i8
  %1659 = and i8 %1658, 1
  store i8 %1659, i8* %55, align 1, !tbaa !2450
  %1660 = icmp eq i64 %1644, 0
  %1661 = zext i1 %1660 to i8
  store i8 %1661, i8* %58, align 1, !tbaa !2447
  %1662 = lshr i64 %1644, 63
  %1663 = trunc i64 %1662 to i8
  store i8 %1663, i8* %61, align 1, !tbaa !2448
  %1664 = xor i64 %1662, %1628
  %1665 = xor i64 %1662, %1643
  %1666 = add nuw nsw i64 %1664, %1665
  %1667 = icmp eq i64 %1666, 2
  %1668 = zext i1 %1667 to i8
  store i8 %1668, i8* %67, align 1, !tbaa !2449
  %1669 = add i64 %1636, -196
  %1670 = add i64 %4803, 174
  store i64 %1670, i64* %PC, align 8
  %1671 = inttoptr i64 %1669 to i32*
  %1672 = load i32, i32* %1671, align 4
  %1673 = sext i32 %1672 to i64
  store i64 %1673, i64* %RCX, align 8, !tbaa !2428
  %1674 = shl nsw i64 %1673, 3
  %1675 = add i64 %1674, %1644
  %1676 = add i64 %4803, 179
  store i64 %1676, i64* %PC, align 8
  %1677 = load double, double* %257, align 1
  %1678 = inttoptr i64 %1675 to double*
  %1679 = load double, double* %1678, align 8
  %1680 = fsub double %1677, %1679
  store double %1680, double* %257, align 1, !tbaa !2452
  %1681 = add i64 %1636, -96
  %1682 = add i64 %4803, 183
  store i64 %1682, i64* %PC, align 8
  %1683 = inttoptr i64 %1681 to i64*
  %1684 = load i64, i64* %1683, align 8
  store i64 %1684, i64* %RAX, align 8, !tbaa !2428
  %1685 = add i64 %1636, -188
  %1686 = add i64 %4803, 190
  store i64 %1686, i64* %PC, align 8
  %1687 = inttoptr i64 %1685 to i32*
  %1688 = load i32, i32* %1687, align 4
  %1689 = sext i32 %1688 to i64
  %1690 = mul nsw i64 %1689, 520
  store i64 %1690, i64* %RCX, align 8, !tbaa !2428
  %1691 = lshr i64 %1690, 63
  %1692 = add i64 %1690, %1684
  store i64 %1692, i64* %RAX, align 8, !tbaa !2428
  %1693 = icmp ult i64 %1692, %1684
  %1694 = icmp ult i64 %1692, %1690
  %1695 = or i1 %1693, %1694
  %1696 = zext i1 %1695 to i8
  store i8 %1696, i8* %42, align 1, !tbaa !2432
  %1697 = trunc i64 %1692 to i32
  %1698 = and i32 %1697, 255
  %1699 = tail call i32 @llvm.ctpop.i32(i32 %1698) #9
  %1700 = trunc i32 %1699 to i8
  %1701 = and i8 %1700, 1
  %1702 = xor i8 %1701, 1
  store i8 %1702, i8* %49, align 1, !tbaa !2446
  %1703 = xor i64 %1690, %1684
  %1704 = xor i64 %1703, %1692
  %1705 = lshr i64 %1704, 4
  %1706 = trunc i64 %1705 to i8
  %1707 = and i8 %1706, 1
  store i8 %1707, i8* %55, align 1, !tbaa !2450
  %1708 = icmp eq i64 %1692, 0
  %1709 = zext i1 %1708 to i8
  store i8 %1709, i8* %58, align 1, !tbaa !2447
  %1710 = lshr i64 %1692, 63
  %1711 = trunc i64 %1710 to i8
  store i8 %1711, i8* %61, align 1, !tbaa !2448
  %1712 = lshr i64 %1684, 63
  %1713 = xor i64 %1710, %1712
  %1714 = xor i64 %1710, %1691
  %1715 = add nuw nsw i64 %1713, %1714
  %1716 = icmp eq i64 %1715, 2
  %1717 = zext i1 %1716 to i8
  store i8 %1717, i8* %67, align 1, !tbaa !2449
  %1718 = load i64, i64* %RBP, align 8
  %1719 = add i64 %1718, -192
  %1720 = add i64 %4803, 207
  store i64 %1720, i64* %PC, align 8
  %1721 = inttoptr i64 %1719 to i32*
  %1722 = load i32, i32* %1721, align 4
  %1723 = sext i32 %1722 to i64
  store i64 %1723, i64* %RCX, align 8, !tbaa !2428
  %1724 = shl nsw i64 %1723, 3
  %1725 = add i64 %1724, %1692
  %1726 = add i64 %4803, 212
  store i64 %1726, i64* %PC, align 8
  %1727 = inttoptr i64 %1725 to double*
  store double %1680, double* %1727, align 8
  %1728 = load i64, i64* %RBP, align 8
  %1729 = add i64 %1728, -176
  %1730 = load i64, i64* %PC, align 8
  %1731 = add i64 %1730, 7
  store i64 %1731, i64* %PC, align 8
  %1732 = inttoptr i64 %1729 to i64*
  %1733 = load i64, i64* %1732, align 8
  store i64 %1733, i64* %RAX, align 8, !tbaa !2428
  %1734 = add i64 %1728, -52
  %1735 = add i64 %1730, 11
  store i64 %1735, i64* %PC, align 8
  %1736 = inttoptr i64 %1734 to i32*
  %1737 = load i32, i32* %1736, align 4
  %1738 = sext i32 %1737 to i64
  store i64 %1738, i64* %RCX, align 8, !tbaa !2428
  %1739 = shl nsw i64 %1738, 3
  %1740 = add i64 %1739, %1733
  %1741 = add i64 %1730, 16
  store i64 %1741, i64* %PC, align 8
  %1742 = inttoptr i64 %1740 to i64*
  %1743 = load i64, i64* %1742, align 8
  store i64 %1743, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1744 = add i64 %1728, -184
  %1745 = add i64 %1730, 23
  store i64 %1745, i64* %PC, align 8
  %1746 = inttoptr i64 %1744 to i64*
  %1747 = load i64, i64* %1746, align 8
  store i64 %1747, i64* %RAX, align 8, !tbaa !2428
  %1748 = add i64 %1728, -192
  %1749 = add i64 %1730, 30
  store i64 %1749, i64* %PC, align 8
  %1750 = inttoptr i64 %1748 to i32*
  %1751 = load i32, i32* %1750, align 4
  %1752 = sext i32 %1751 to i64
  store i64 %1752, i64* %RCX, align 8, !tbaa !2428
  %1753 = shl nsw i64 %1752, 3
  %1754 = add i64 %1753, %1747
  %1755 = add i64 %1730, 35
  store i64 %1755, i64* %PC, align 8
  %1756 = bitcast i64 %1743 to double
  %1757 = inttoptr i64 %1754 to double*
  %1758 = load double, double* %1757, align 8
  %1759 = fdiv double %1756, %1758
  store double %1759, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %1760 = add i64 %1728, -112
  %1761 = add i64 %1730, 39
  store i64 %1761, i64* %PC, align 8
  %1762 = inttoptr i64 %1760 to i64*
  %1763 = load i64, i64* %1762, align 8
  store i64 %1763, i64* %RAX, align 8, !tbaa !2428
  %1764 = add i64 %1728, -188
  %1765 = add i64 %1730, 46
  store i64 %1765, i64* %PC, align 8
  %1766 = inttoptr i64 %1764 to i32*
  %1767 = load i32, i32* %1766, align 4
  %1768 = sext i32 %1767 to i64
  %1769 = mul nsw i64 %1768, 33800
  store i64 %1769, i64* %RCX, align 8, !tbaa !2428
  %1770 = lshr i64 %1769, 63
  %1771 = add i64 %1769, %1763
  store i64 %1771, i64* %RAX, align 8, !tbaa !2428
  %1772 = icmp ult i64 %1771, %1763
  %1773 = icmp ult i64 %1771, %1769
  %1774 = or i1 %1772, %1773
  %1775 = zext i1 %1774 to i8
  store i8 %1775, i8* %42, align 1, !tbaa !2432
  %1776 = trunc i64 %1771 to i32
  %1777 = and i32 %1776, 255
  %1778 = tail call i32 @llvm.ctpop.i32(i32 %1777) #9
  %1779 = trunc i32 %1778 to i8
  %1780 = and i8 %1779, 1
  %1781 = xor i8 %1780, 1
  store i8 %1781, i8* %49, align 1, !tbaa !2446
  %1782 = xor i64 %1769, %1763
  %1783 = xor i64 %1782, %1771
  %1784 = lshr i64 %1783, 4
  %1785 = trunc i64 %1784 to i8
  %1786 = and i8 %1785, 1
  store i8 %1786, i8* %55, align 1, !tbaa !2450
  %1787 = icmp eq i64 %1771, 0
  %1788 = zext i1 %1787 to i8
  store i8 %1788, i8* %58, align 1, !tbaa !2447
  %1789 = lshr i64 %1771, 63
  %1790 = trunc i64 %1789 to i8
  store i8 %1790, i8* %61, align 1, !tbaa !2448
  %1791 = lshr i64 %1763, 63
  %1792 = xor i64 %1789, %1791
  %1793 = xor i64 %1789, %1770
  %1794 = add nuw nsw i64 %1792, %1793
  %1795 = icmp eq i64 %1794, 2
  %1796 = zext i1 %1795 to i8
  store i8 %1796, i8* %67, align 1, !tbaa !2449
  %1797 = load i64, i64* %RBP, align 8
  %1798 = add i64 %1797, -192
  %1799 = add i64 %1730, 63
  store i64 %1799, i64* %PC, align 8
  %1800 = inttoptr i64 %1798 to i32*
  %1801 = load i32, i32* %1800, align 4
  %1802 = sext i32 %1801 to i64
  %1803 = mul nsw i64 %1802, 520
  store i64 %1803, i64* %RCX, align 8, !tbaa !2428
  %1804 = lshr i64 %1803, 63
  %1805 = add i64 %1803, %1771
  store i64 %1805, i64* %RAX, align 8, !tbaa !2428
  %1806 = icmp ult i64 %1805, %1771
  %1807 = icmp ult i64 %1805, %1803
  %1808 = or i1 %1806, %1807
  %1809 = zext i1 %1808 to i8
  store i8 %1809, i8* %42, align 1, !tbaa !2432
  %1810 = trunc i64 %1805 to i32
  %1811 = and i32 %1810, 255
  %1812 = tail call i32 @llvm.ctpop.i32(i32 %1811) #9
  %1813 = trunc i32 %1812 to i8
  %1814 = and i8 %1813, 1
  %1815 = xor i8 %1814, 1
  store i8 %1815, i8* %49, align 1, !tbaa !2446
  %1816 = xor i64 %1803, %1771
  %1817 = xor i64 %1816, %1805
  %1818 = lshr i64 %1817, 4
  %1819 = trunc i64 %1818 to i8
  %1820 = and i8 %1819, 1
  store i8 %1820, i8* %55, align 1, !tbaa !2450
  %1821 = icmp eq i64 %1805, 0
  %1822 = zext i1 %1821 to i8
  store i8 %1822, i8* %58, align 1, !tbaa !2447
  %1823 = lshr i64 %1805, 63
  %1824 = trunc i64 %1823 to i8
  store i8 %1824, i8* %61, align 1, !tbaa !2448
  %1825 = xor i64 %1823, %1789
  %1826 = xor i64 %1823, %1804
  %1827 = add nuw nsw i64 %1825, %1826
  %1828 = icmp eq i64 %1827, 2
  %1829 = zext i1 %1828 to i8
  store i8 %1829, i8* %67, align 1, !tbaa !2449
  %1830 = add i64 %1797, -196
  %1831 = add i64 %1730, 80
  store i64 %1831, i64* %PC, align 8
  %1832 = inttoptr i64 %1830 to i32*
  %1833 = load i32, i32* %1832, align 4
  %1834 = sext i32 %1833 to i64
  store i64 %1834, i64* %RCX, align 8, !tbaa !2428
  %1835 = shl nsw i64 %1834, 3
  %1836 = add i64 %1835, %1805
  %1837 = add i64 %1730, 85
  store i64 %1837, i64* %PC, align 8
  %1838 = load double, double* %257, align 1
  %1839 = inttoptr i64 %1836 to double*
  %1840 = load double, double* %1839, align 8
  %1841 = fmul double %1838, %1840
  store double %1841, double* %257, align 1, !tbaa !2452
  %1842 = add i64 %1797, -72
  %1843 = add i64 %1730, 90
  store i64 %1843, i64* %PC, align 8
  %1844 = inttoptr i64 %1842 to i64*
  %1845 = load i64, i64* %1844, align 8
  store i64 %1845, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %1846 = add i64 %1797, -184
  %1847 = add i64 %1730, 97
  store i64 %1847, i64* %PC, align 8
  %1848 = inttoptr i64 %1846 to i64*
  %1849 = load i64, i64* %1848, align 8
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = add i64 %1730, 104
  store i64 %1850, i64* %PC, align 8
  %1851 = load i32, i32* %1800, align 4
  %1852 = sext i32 %1851 to i64
  store i64 %1852, i64* %RCX, align 8, !tbaa !2428
  %1853 = shl nsw i64 %1852, 3
  %1854 = add i64 %1853, %1849
  %1855 = add i64 %1730, 109
  store i64 %1855, i64* %PC, align 8
  %1856 = bitcast i64 %1845 to double
  %1857 = inttoptr i64 %1854 to double*
  %1858 = load double, double* %1857, align 8
  %1859 = fdiv double %1856, %1858
  store double %1859, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1860 = load i64, i64* %RBP, align 8
  %1861 = add i64 %1860, -96
  %1862 = add i64 %1730, 113
  store i64 %1862, i64* %PC, align 8
  %1863 = inttoptr i64 %1861 to i64*
  %1864 = load i64, i64* %1863, align 8
  store i64 %1864, i64* %RAX, align 8, !tbaa !2428
  %1865 = add i64 %1860, -188
  %1866 = add i64 %1730, 120
  store i64 %1866, i64* %PC, align 8
  %1867 = inttoptr i64 %1865 to i32*
  %1868 = load i32, i32* %1867, align 4
  %1869 = sext i32 %1868 to i64
  %1870 = mul nsw i64 %1869, 520
  store i64 %1870, i64* %RCX, align 8, !tbaa !2428
  %1871 = lshr i64 %1870, 63
  %1872 = add i64 %1870, %1864
  store i64 %1872, i64* %RAX, align 8, !tbaa !2428
  %1873 = icmp ult i64 %1872, %1864
  %1874 = icmp ult i64 %1872, %1870
  %1875 = or i1 %1873, %1874
  %1876 = zext i1 %1875 to i8
  store i8 %1876, i8* %42, align 1, !tbaa !2432
  %1877 = trunc i64 %1872 to i32
  %1878 = and i32 %1877, 255
  %1879 = tail call i32 @llvm.ctpop.i32(i32 %1878) #9
  %1880 = trunc i32 %1879 to i8
  %1881 = and i8 %1880, 1
  %1882 = xor i8 %1881, 1
  store i8 %1882, i8* %49, align 1, !tbaa !2446
  %1883 = xor i64 %1870, %1864
  %1884 = xor i64 %1883, %1872
  %1885 = lshr i64 %1884, 4
  %1886 = trunc i64 %1885 to i8
  %1887 = and i8 %1886, 1
  store i8 %1887, i8* %55, align 1, !tbaa !2450
  %1888 = icmp eq i64 %1872, 0
  %1889 = zext i1 %1888 to i8
  store i8 %1889, i8* %58, align 1, !tbaa !2447
  %1890 = lshr i64 %1872, 63
  %1891 = trunc i64 %1890 to i8
  store i8 %1891, i8* %61, align 1, !tbaa !2448
  %1892 = lshr i64 %1864, 63
  %1893 = xor i64 %1890, %1892
  %1894 = xor i64 %1890, %1871
  %1895 = add nuw nsw i64 %1893, %1894
  %1896 = icmp eq i64 %1895, 2
  %1897 = zext i1 %1896 to i8
  store i8 %1897, i8* %67, align 1, !tbaa !2449
  %1898 = add i64 %1860, -192
  %1899 = add i64 %1730, 137
  store i64 %1899, i64* %PC, align 8
  %1900 = inttoptr i64 %1898 to i32*
  %1901 = load i32, i32* %1900, align 4
  %1902 = sext i32 %1901 to i64
  store i64 %1902, i64* %RCX, align 8, !tbaa !2428
  %1903 = shl nsw i64 %1902, 3
  %1904 = add i64 %1903, %1872
  %1905 = add i64 %1730, 142
  store i64 %1905, i64* %PC, align 8
  %1906 = inttoptr i64 %1904 to double*
  %1907 = load double, double* %1906, align 8
  %1908 = fmul double %1859, %1907
  store double %1908, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %1909 = load double, double* %257, align 1
  %1910 = fsub double %1909, %1908
  store double %1910, double* %257, align 1, !tbaa !2452
  %1911 = add i64 %1860, -104
  %1912 = add i64 %1730, 150
  store i64 %1912, i64* %PC, align 8
  %1913 = inttoptr i64 %1911 to i64*
  %1914 = load i64, i64* %1913, align 8
  store i64 %1914, i64* %RAX, align 8, !tbaa !2428
  %1915 = load i64, i64* %RBP, align 8
  %1916 = add i64 %1915, -188
  %1917 = add i64 %1730, 157
  store i64 %1917, i64* %PC, align 8
  %1918 = inttoptr i64 %1916 to i32*
  %1919 = load i32, i32* %1918, align 4
  %1920 = sext i32 %1919 to i64
  %1921 = mul nsw i64 %1920, 520
  store i64 %1921, i64* %RCX, align 8, !tbaa !2428
  %1922 = lshr i64 %1921, 63
  %1923 = add i64 %1921, %1914
  store i64 %1923, i64* %RAX, align 8, !tbaa !2428
  %1924 = icmp ult i64 %1923, %1914
  %1925 = icmp ult i64 %1923, %1921
  %1926 = or i1 %1924, %1925
  %1927 = zext i1 %1926 to i8
  store i8 %1927, i8* %42, align 1, !tbaa !2432
  %1928 = trunc i64 %1923 to i32
  %1929 = and i32 %1928, 255
  %1930 = tail call i32 @llvm.ctpop.i32(i32 %1929) #9
  %1931 = trunc i32 %1930 to i8
  %1932 = and i8 %1931, 1
  %1933 = xor i8 %1932, 1
  store i8 %1933, i8* %49, align 1, !tbaa !2446
  %1934 = xor i64 %1921, %1914
  %1935 = xor i64 %1934, %1923
  %1936 = lshr i64 %1935, 4
  %1937 = trunc i64 %1936 to i8
  %1938 = and i8 %1937, 1
  store i8 %1938, i8* %55, align 1, !tbaa !2450
  %1939 = icmp eq i64 %1923, 0
  %1940 = zext i1 %1939 to i8
  store i8 %1940, i8* %58, align 1, !tbaa !2447
  %1941 = lshr i64 %1923, 63
  %1942 = trunc i64 %1941 to i8
  store i8 %1942, i8* %61, align 1, !tbaa !2448
  %1943 = lshr i64 %1914, 63
  %1944 = xor i64 %1941, %1943
  %1945 = xor i64 %1941, %1922
  %1946 = add nuw nsw i64 %1944, %1945
  %1947 = icmp eq i64 %1946, 2
  %1948 = zext i1 %1947 to i8
  store i8 %1948, i8* %67, align 1, !tbaa !2449
  %1949 = add i64 %1915, -192
  %1950 = add i64 %1730, 174
  store i64 %1950, i64* %PC, align 8
  %1951 = inttoptr i64 %1949 to i32*
  %1952 = load i32, i32* %1951, align 4
  %1953 = sext i32 %1952 to i64
  store i64 %1953, i64* %RCX, align 8, !tbaa !2428
  %1954 = shl nsw i64 %1953, 3
  %1955 = add i64 %1954, %1923
  %1956 = add i64 %1730, 179
  store i64 %1956, i64* %PC, align 8
  %1957 = inttoptr i64 %1955 to double*
  store double %1910, double* %1957, align 8
  %1958 = load i64, i64* %RBP, align 8
  %1959 = add i64 %1958, -160
  %1960 = load i64, i64* %PC, align 8
  %1961 = add i64 %1960, 7
  store i64 %1961, i64* %PC, align 8
  %1962 = inttoptr i64 %1959 to i64*
  %1963 = load i64, i64* %1962, align 8
  store i64 %1963, i64* %RAX, align 8, !tbaa !2428
  %1964 = add i64 %1958, -196
  %1965 = add i64 %1960, 14
  store i64 %1965, i64* %PC, align 8
  %1966 = inttoptr i64 %1964 to i32*
  %1967 = load i32, i32* %1966, align 4
  %1968 = sext i32 %1967 to i64
  store i64 %1968, i64* %RCX, align 8, !tbaa !2428
  %1969 = shl nsw i64 %1968, 3
  %1970 = add i64 %1969, %1963
  %1971 = add i64 %1960, 19
  store i64 %1971, i64* %PC, align 8
  %1972 = inttoptr i64 %1970 to i64*
  %1973 = load i64, i64* %1972, align 8
  store i64 %1973, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %1974 = add i64 %1958, -168
  %1975 = add i64 %1960, 26
  store i64 %1975, i64* %PC, align 8
  %1976 = inttoptr i64 %1974 to i64*
  %1977 = load i64, i64* %1976, align 8
  store i64 %1977, i64* %RAX, align 8, !tbaa !2428
  %1978 = add i64 %1960, 33
  store i64 %1978, i64* %PC, align 8
  %1979 = load i32, i32* %1966, align 4
  %1980 = sext i32 %1979 to i64
  store i64 %1980, i64* %RCX, align 8, !tbaa !2428
  %1981 = shl nsw i64 %1980, 3
  %1982 = add i64 %1981, %1977
  %1983 = add i64 %1960, 38
  store i64 %1983, i64* %PC, align 8
  %1984 = bitcast i64 %1973 to double
  %1985 = inttoptr i64 %1982 to double*
  %1986 = load double, double* %1985, align 8
  %1987 = fdiv double %1984, %1986
  store double %1987, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %1988 = add i64 %1958, -136
  %1989 = add i64 %1960, 45
  store i64 %1989, i64* %PC, align 8
  %1990 = inttoptr i64 %1988 to i64*
  %1991 = load i64, i64* %1990, align 8
  store i64 %1991, i64* %RAX, align 8, !tbaa !2428
  %1992 = add i64 %1958, -188
  %1993 = add i64 %1960, 52
  store i64 %1993, i64* %PC, align 8
  %1994 = inttoptr i64 %1992 to i32*
  %1995 = load i32, i32* %1994, align 4
  %1996 = sext i32 %1995 to i64
  %1997 = mul nsw i64 %1996, 33800
  store i64 %1997, i64* %RCX, align 8, !tbaa !2428
  %1998 = lshr i64 %1997, 63
  %1999 = add i64 %1997, %1991
  store i64 %1999, i64* %RAX, align 8, !tbaa !2428
  %2000 = icmp ult i64 %1999, %1991
  %2001 = icmp ult i64 %1999, %1997
  %2002 = or i1 %2000, %2001
  %2003 = zext i1 %2002 to i8
  store i8 %2003, i8* %42, align 1, !tbaa !2432
  %2004 = trunc i64 %1999 to i32
  %2005 = and i32 %2004, 255
  %2006 = tail call i32 @llvm.ctpop.i32(i32 %2005) #9
  %2007 = trunc i32 %2006 to i8
  %2008 = and i8 %2007, 1
  %2009 = xor i8 %2008, 1
  store i8 %2009, i8* %49, align 1, !tbaa !2446
  %2010 = xor i64 %1997, %1991
  %2011 = xor i64 %2010, %1999
  %2012 = lshr i64 %2011, 4
  %2013 = trunc i64 %2012 to i8
  %2014 = and i8 %2013, 1
  store i8 %2014, i8* %55, align 1, !tbaa !2450
  %2015 = icmp eq i64 %1999, 0
  %2016 = zext i1 %2015 to i8
  store i8 %2016, i8* %58, align 1, !tbaa !2447
  %2017 = lshr i64 %1999, 63
  %2018 = trunc i64 %2017 to i8
  store i8 %2018, i8* %61, align 1, !tbaa !2448
  %2019 = lshr i64 %1991, 63
  %2020 = xor i64 %2017, %2019
  %2021 = xor i64 %2017, %1998
  %2022 = add nuw nsw i64 %2020, %2021
  %2023 = icmp eq i64 %2022, 2
  %2024 = zext i1 %2023 to i8
  store i8 %2024, i8* %67, align 1, !tbaa !2449
  %2025 = load i64, i64* %RBP, align 8
  %2026 = add i64 %2025, -52
  %2027 = add i64 %1960, 66
  store i64 %2027, i64* %PC, align 8
  %2028 = inttoptr i64 %2026 to i32*
  %2029 = load i32, i32* %2028, align 4
  %2030 = sext i32 %2029 to i64
  %2031 = mul nsw i64 %2030, 520
  store i64 %2031, i64* %RCX, align 8, !tbaa !2428
  %2032 = lshr i64 %2031, 63
  %2033 = add i64 %2031, %1999
  store i64 %2033, i64* %RAX, align 8, !tbaa !2428
  %2034 = icmp ult i64 %2033, %1999
  %2035 = icmp ult i64 %2033, %2031
  %2036 = or i1 %2034, %2035
  %2037 = zext i1 %2036 to i8
  store i8 %2037, i8* %42, align 1, !tbaa !2432
  %2038 = trunc i64 %2033 to i32
  %2039 = and i32 %2038, 255
  %2040 = tail call i32 @llvm.ctpop.i32(i32 %2039) #9
  %2041 = trunc i32 %2040 to i8
  %2042 = and i8 %2041, 1
  %2043 = xor i8 %2042, 1
  store i8 %2043, i8* %49, align 1, !tbaa !2446
  %2044 = xor i64 %2031, %1999
  %2045 = xor i64 %2044, %2033
  %2046 = lshr i64 %2045, 4
  %2047 = trunc i64 %2046 to i8
  %2048 = and i8 %2047, 1
  store i8 %2048, i8* %55, align 1, !tbaa !2450
  %2049 = icmp eq i64 %2033, 0
  %2050 = zext i1 %2049 to i8
  store i8 %2050, i8* %58, align 1, !tbaa !2447
  %2051 = lshr i64 %2033, 63
  %2052 = trunc i64 %2051 to i8
  store i8 %2052, i8* %61, align 1, !tbaa !2448
  %2053 = xor i64 %2051, %2017
  %2054 = xor i64 %2051, %2032
  %2055 = add nuw nsw i64 %2053, %2054
  %2056 = icmp eq i64 %2055, 2
  %2057 = zext i1 %2056 to i8
  store i8 %2057, i8* %67, align 1, !tbaa !2449
  %2058 = add i64 %2025, -196
  %2059 = add i64 %1960, 83
  store i64 %2059, i64* %PC, align 8
  %2060 = inttoptr i64 %2058 to i32*
  %2061 = load i32, i32* %2060, align 4
  %2062 = sext i32 %2061 to i64
  store i64 %2062, i64* %RCX, align 8, !tbaa !2428
  %2063 = shl nsw i64 %2062, 3
  %2064 = add i64 %2063, %2033
  %2065 = add i64 %1960, 88
  store i64 %2065, i64* %PC, align 8
  %2066 = load double, double* %257, align 1
  %2067 = inttoptr i64 %2064 to double*
  %2068 = load double, double* %2067, align 8
  %2069 = fmul double %2066, %2068
  store double %2069, double* %257, align 1, !tbaa !2452
  %2070 = add i64 %2025, -64
  %2071 = add i64 %1960, 93
  store i64 %2071, i64* %PC, align 8
  %2072 = inttoptr i64 %2070 to i64*
  %2073 = load i64, i64* %2072, align 8
  store i64 %2073, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %2074 = add i64 %2025, -152
  %2075 = add i64 %1960, 100
  store i64 %2075, i64* %PC, align 8
  %2076 = inttoptr i64 %2074 to i64*
  %2077 = load i64, i64* %2076, align 8
  store i64 %2077, i64* %RAX, align 8, !tbaa !2428
  %2078 = add i64 %2025, -188
  %2079 = add i64 %1960, 107
  store i64 %2079, i64* %PC, align 8
  %2080 = inttoptr i64 %2078 to i32*
  %2081 = load i32, i32* %2080, align 4
  %2082 = sext i32 %2081 to i64
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = shl nsw i64 %2082, 3
  %2084 = add i64 %2083, %2077
  %2085 = add i64 %1960, 112
  store i64 %2085, i64* %PC, align 8
  %2086 = bitcast i64 %2073 to double
  %2087 = inttoptr i64 %2084 to double*
  %2088 = load double, double* %2087, align 8
  %2089 = fmul double %2086, %2088
  store double %2089, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2090 = load i64, i64* %RBP, align 8
  %2091 = add i64 %2090, -168
  %2092 = add i64 %1960, 119
  store i64 %2092, i64* %PC, align 8
  %2093 = inttoptr i64 %2091 to i64*
  %2094 = load i64, i64* %2093, align 8
  store i64 %2094, i64* %RAX, align 8, !tbaa !2428
  %2095 = add i64 %2090, -196
  %2096 = add i64 %1960, 126
  store i64 %2096, i64* %PC, align 8
  %2097 = inttoptr i64 %2095 to i32*
  %2098 = load i32, i32* %2097, align 4
  %2099 = sext i32 %2098 to i64
  store i64 %2099, i64* %RCX, align 8, !tbaa !2428
  %2100 = shl nsw i64 %2099, 3
  %2101 = add i64 %2100, %2094
  %2102 = add i64 %1960, 131
  store i64 %2102, i64* %PC, align 8
  %2103 = inttoptr i64 %2101 to double*
  %2104 = load double, double* %2103, align 8
  %2105 = fdiv double %2089, %2104
  store double %2105, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2106 = add i64 %2090, -104
  %2107 = add i64 %1960, 135
  store i64 %2107, i64* %PC, align 8
  %2108 = inttoptr i64 %2106 to i64*
  %2109 = load i64, i64* %2108, align 8
  store i64 %2109, i64* %RAX, align 8, !tbaa !2428
  %2110 = add i64 %2090, -188
  %2111 = add i64 %1960, 142
  store i64 %2111, i64* %PC, align 8
  %2112 = inttoptr i64 %2110 to i32*
  %2113 = load i32, i32* %2112, align 4
  %2114 = sext i32 %2113 to i64
  %2115 = mul nsw i64 %2114, 520
  store i64 %2115, i64* %RCX, align 8, !tbaa !2428
  %2116 = lshr i64 %2115, 63
  %2117 = add i64 %2115, %2109
  store i64 %2117, i64* %RAX, align 8, !tbaa !2428
  %2118 = icmp ult i64 %2117, %2109
  %2119 = icmp ult i64 %2117, %2115
  %2120 = or i1 %2118, %2119
  %2121 = zext i1 %2120 to i8
  store i8 %2121, i8* %42, align 1, !tbaa !2432
  %2122 = trunc i64 %2117 to i32
  %2123 = and i32 %2122, 255
  %2124 = tail call i32 @llvm.ctpop.i32(i32 %2123) #9
  %2125 = trunc i32 %2124 to i8
  %2126 = and i8 %2125, 1
  %2127 = xor i8 %2126, 1
  store i8 %2127, i8* %49, align 1, !tbaa !2446
  %2128 = xor i64 %2115, %2109
  %2129 = xor i64 %2128, %2117
  %2130 = lshr i64 %2129, 4
  %2131 = trunc i64 %2130 to i8
  %2132 = and i8 %2131, 1
  store i8 %2132, i8* %55, align 1, !tbaa !2450
  %2133 = icmp eq i64 %2117, 0
  %2134 = zext i1 %2133 to i8
  store i8 %2134, i8* %58, align 1, !tbaa !2447
  %2135 = lshr i64 %2117, 63
  %2136 = trunc i64 %2135 to i8
  store i8 %2136, i8* %61, align 1, !tbaa !2448
  %2137 = lshr i64 %2109, 63
  %2138 = xor i64 %2135, %2137
  %2139 = xor i64 %2135, %2116
  %2140 = add nuw nsw i64 %2138, %2139
  %2141 = icmp eq i64 %2140, 2
  %2142 = zext i1 %2141 to i8
  store i8 %2142, i8* %67, align 1, !tbaa !2449
  %2143 = add i64 %2090, -192
  %2144 = add i64 %1960, 159
  store i64 %2144, i64* %PC, align 8
  %2145 = inttoptr i64 %2143 to i32*
  %2146 = load i32, i32* %2145, align 4
  %2147 = sext i32 %2146 to i64
  store i64 %2147, i64* %RCX, align 8, !tbaa !2428
  %2148 = shl nsw i64 %2147, 3
  %2149 = add i64 %2148, %2117
  %2150 = add i64 %1960, 164
  store i64 %2150, i64* %PC, align 8
  %2151 = inttoptr i64 %2149 to double*
  %2152 = load double, double* %2151, align 8
  %2153 = fmul double %2105, %2152
  store double %2153, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2154 = load double, double* %257, align 1
  %2155 = fadd double %2154, %2153
  store double %2155, double* %257, align 1, !tbaa !2452
  %2156 = load i64, i64* %RBP, align 8
  %2157 = add i64 %2156, -64
  %2158 = add i64 %1960, 173
  store i64 %2158, i64* %PC, align 8
  %2159 = inttoptr i64 %2157 to i64*
  %2160 = load i64, i64* %2159, align 8
  store i64 %2160, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %2161 = add i64 %2156, -144
  %2162 = add i64 %1960, 180
  store i64 %2162, i64* %PC, align 8
  %2163 = inttoptr i64 %2161 to i64*
  %2164 = load i64, i64* %2163, align 8
  store i64 %2164, i64* %RAX, align 8, !tbaa !2428
  %2165 = add i64 %2156, -188
  %2166 = add i64 %1960, 187
  store i64 %2166, i64* %PC, align 8
  %2167 = inttoptr i64 %2165 to i32*
  %2168 = load i32, i32* %2167, align 4
  %2169 = sext i32 %2168 to i64
  store i64 %2169, i64* %RCX, align 8, !tbaa !2428
  %2170 = shl nsw i64 %2169, 3
  %2171 = add i64 %2170, %2164
  %2172 = add i64 %1960, 192
  store i64 %2172, i64* %PC, align 8
  %2173 = bitcast i64 %2160 to double
  %2174 = inttoptr i64 %2171 to double*
  %2175 = load double, double* %2174, align 8
  %2176 = fmul double %2173, %2175
  store double %2176, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2177 = add i64 %2156, -168
  %2178 = add i64 %1960, 199
  store i64 %2178, i64* %PC, align 8
  %2179 = inttoptr i64 %2177 to i64*
  %2180 = load i64, i64* %2179, align 8
  store i64 %2180, i64* %RAX, align 8, !tbaa !2428
  %2181 = add i64 %2156, -196
  %2182 = add i64 %1960, 206
  store i64 %2182, i64* %PC, align 8
  %2183 = inttoptr i64 %2181 to i32*
  %2184 = load i32, i32* %2183, align 4
  %2185 = sext i32 %2184 to i64
  store i64 %2185, i64* %RCX, align 8, !tbaa !2428
  %2186 = shl nsw i64 %2185, 3
  %2187 = add i64 %2186, %2180
  %2188 = add i64 %1960, 211
  store i64 %2188, i64* %PC, align 8
  %2189 = inttoptr i64 %2187 to double*
  %2190 = load double, double* %2189, align 8
  %2191 = fdiv double %2176, %2190
  store double %2191, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2192 = add i64 %2156, -112
  %2193 = add i64 %1960, 215
  store i64 %2193, i64* %PC, align 8
  %2194 = inttoptr i64 %2192 to i64*
  %2195 = load i64, i64* %2194, align 8
  store i64 %2195, i64* %RAX, align 8, !tbaa !2428
  %2196 = add i64 %1960, 222
  store i64 %2196, i64* %PC, align 8
  %2197 = load i32, i32* %2167, align 4
  %2198 = sext i32 %2197 to i64
  %2199 = mul nsw i64 %2198, 33800
  store i64 %2199, i64* %RCX, align 8, !tbaa !2428
  %2200 = lshr i64 %2199, 63
  %2201 = add i64 %2199, %2195
  store i64 %2201, i64* %RAX, align 8, !tbaa !2428
  %2202 = icmp ult i64 %2201, %2195
  %2203 = icmp ult i64 %2201, %2199
  %2204 = or i1 %2202, %2203
  %2205 = zext i1 %2204 to i8
  store i8 %2205, i8* %42, align 1, !tbaa !2432
  %2206 = trunc i64 %2201 to i32
  %2207 = and i32 %2206, 255
  %2208 = tail call i32 @llvm.ctpop.i32(i32 %2207) #9
  %2209 = trunc i32 %2208 to i8
  %2210 = and i8 %2209, 1
  %2211 = xor i8 %2210, 1
  store i8 %2211, i8* %49, align 1, !tbaa !2446
  %2212 = xor i64 %2199, %2195
  %2213 = xor i64 %2212, %2201
  %2214 = lshr i64 %2213, 4
  %2215 = trunc i64 %2214 to i8
  %2216 = and i8 %2215, 1
  store i8 %2216, i8* %55, align 1, !tbaa !2450
  %2217 = icmp eq i64 %2201, 0
  %2218 = zext i1 %2217 to i8
  store i8 %2218, i8* %58, align 1, !tbaa !2447
  %2219 = lshr i64 %2201, 63
  %2220 = trunc i64 %2219 to i8
  store i8 %2220, i8* %61, align 1, !tbaa !2448
  %2221 = lshr i64 %2195, 63
  %2222 = xor i64 %2219, %2221
  %2223 = xor i64 %2219, %2200
  %2224 = add nuw nsw i64 %2222, %2223
  %2225 = icmp eq i64 %2224, 2
  %2226 = zext i1 %2225 to i8
  store i8 %2226, i8* %67, align 1, !tbaa !2449
  %2227 = load i64, i64* %RBP, align 8
  %2228 = add i64 %2227, -52
  %2229 = add i64 %1960, 236
  store i64 %2229, i64* %PC, align 8
  %2230 = inttoptr i64 %2228 to i32*
  %2231 = load i32, i32* %2230, align 4
  %2232 = sext i32 %2231 to i64
  %2233 = mul nsw i64 %2232, 520
  store i64 %2233, i64* %RCX, align 8, !tbaa !2428
  %2234 = lshr i64 %2233, 63
  %2235 = add i64 %2233, %2201
  store i64 %2235, i64* %RAX, align 8, !tbaa !2428
  %2236 = icmp ult i64 %2235, %2201
  %2237 = icmp ult i64 %2235, %2233
  %2238 = or i1 %2236, %2237
  %2239 = zext i1 %2238 to i8
  store i8 %2239, i8* %42, align 1, !tbaa !2432
  %2240 = trunc i64 %2235 to i32
  %2241 = and i32 %2240, 255
  %2242 = tail call i32 @llvm.ctpop.i32(i32 %2241) #9
  %2243 = trunc i32 %2242 to i8
  %2244 = and i8 %2243, 1
  %2245 = xor i8 %2244, 1
  store i8 %2245, i8* %49, align 1, !tbaa !2446
  %2246 = xor i64 %2233, %2201
  %2247 = xor i64 %2246, %2235
  %2248 = lshr i64 %2247, 4
  %2249 = trunc i64 %2248 to i8
  %2250 = and i8 %2249, 1
  store i8 %2250, i8* %55, align 1, !tbaa !2450
  %2251 = icmp eq i64 %2235, 0
  %2252 = zext i1 %2251 to i8
  store i8 %2252, i8* %58, align 1, !tbaa !2447
  %2253 = lshr i64 %2235, 63
  %2254 = trunc i64 %2253 to i8
  store i8 %2254, i8* %61, align 1, !tbaa !2448
  %2255 = xor i64 %2253, %2219
  %2256 = xor i64 %2253, %2234
  %2257 = add nuw nsw i64 %2255, %2256
  %2258 = icmp eq i64 %2257, 2
  %2259 = zext i1 %2258 to i8
  store i8 %2259, i8* %67, align 1, !tbaa !2449
  %2260 = add i64 %2227, -196
  %2261 = add i64 %1960, 253
  store i64 %2261, i64* %PC, align 8
  %2262 = inttoptr i64 %2260 to i32*
  %2263 = load i32, i32* %2262, align 4
  %2264 = sext i32 %2263 to i64
  store i64 %2264, i64* %RCX, align 8, !tbaa !2428
  %2265 = shl nsw i64 %2264, 3
  %2266 = add i64 %2265, %2235
  %2267 = add i64 %1960, 258
  store i64 %2267, i64* %PC, align 8
  %2268 = load double, double* %155, align 1
  %2269 = inttoptr i64 %2266 to double*
  %2270 = load double, double* %2269, align 8
  %2271 = fmul double %2268, %2270
  store double %2271, double* %155, align 1, !tbaa !2452
  %2272 = load double, double* %257, align 1
  %2273 = fsub double %2272, %2271
  store double %2273, double* %257, align 1, !tbaa !2452
  %2274 = add i64 %2227, -136
  %2275 = add i64 %1960, 269
  store i64 %2275, i64* %PC, align 8
  %2276 = inttoptr i64 %2274 to i64*
  %2277 = load i64, i64* %2276, align 8
  store i64 %2277, i64* %RAX, align 8, !tbaa !2428
  %2278 = add i64 %2227, -188
  %2279 = add i64 %1960, 276
  store i64 %2279, i64* %PC, align 8
  %2280 = inttoptr i64 %2278 to i32*
  %2281 = load i32, i32* %2280, align 4
  %2282 = sext i32 %2281 to i64
  %2283 = mul nsw i64 %2282, 33800
  store i64 %2283, i64* %RCX, align 8, !tbaa !2428
  %2284 = lshr i64 %2283, 63
  %2285 = add i64 %2283, %2277
  store i64 %2285, i64* %RAX, align 8, !tbaa !2428
  %2286 = icmp ult i64 %2285, %2277
  %2287 = icmp ult i64 %2285, %2283
  %2288 = or i1 %2286, %2287
  %2289 = zext i1 %2288 to i8
  store i8 %2289, i8* %42, align 1, !tbaa !2432
  %2290 = trunc i64 %2285 to i32
  %2291 = and i32 %2290, 255
  %2292 = tail call i32 @llvm.ctpop.i32(i32 %2291) #9
  %2293 = trunc i32 %2292 to i8
  %2294 = and i8 %2293, 1
  %2295 = xor i8 %2294, 1
  store i8 %2295, i8* %49, align 1, !tbaa !2446
  %2296 = xor i64 %2283, %2277
  %2297 = xor i64 %2296, %2285
  %2298 = lshr i64 %2297, 4
  %2299 = trunc i64 %2298 to i8
  %2300 = and i8 %2299, 1
  store i8 %2300, i8* %55, align 1, !tbaa !2450
  %2301 = icmp eq i64 %2285, 0
  %2302 = zext i1 %2301 to i8
  store i8 %2302, i8* %58, align 1, !tbaa !2447
  %2303 = lshr i64 %2285, 63
  %2304 = trunc i64 %2303 to i8
  store i8 %2304, i8* %61, align 1, !tbaa !2448
  %2305 = lshr i64 %2277, 63
  %2306 = xor i64 %2303, %2305
  %2307 = xor i64 %2303, %2284
  %2308 = add nuw nsw i64 %2306, %2307
  %2309 = icmp eq i64 %2308, 2
  %2310 = zext i1 %2309 to i8
  store i8 %2310, i8* %67, align 1, !tbaa !2449
  %2311 = load i64, i64* %RBP, align 8
  %2312 = add i64 %2311, -52
  %2313 = add i64 %1960, 290
  store i64 %2313, i64* %PC, align 8
  %2314 = inttoptr i64 %2312 to i32*
  %2315 = load i32, i32* %2314, align 4
  %2316 = sext i32 %2315 to i64
  %2317 = mul nsw i64 %2316, 520
  store i64 %2317, i64* %RCX, align 8, !tbaa !2428
  %2318 = lshr i64 %2317, 63
  %2319 = add i64 %2317, %2285
  store i64 %2319, i64* %RAX, align 8, !tbaa !2428
  %2320 = icmp ult i64 %2319, %2285
  %2321 = icmp ult i64 %2319, %2317
  %2322 = or i1 %2320, %2321
  %2323 = zext i1 %2322 to i8
  store i8 %2323, i8* %42, align 1, !tbaa !2432
  %2324 = trunc i64 %2319 to i32
  %2325 = and i32 %2324, 255
  %2326 = tail call i32 @llvm.ctpop.i32(i32 %2325) #9
  %2327 = trunc i32 %2326 to i8
  %2328 = and i8 %2327, 1
  %2329 = xor i8 %2328, 1
  store i8 %2329, i8* %49, align 1, !tbaa !2446
  %2330 = xor i64 %2317, %2285
  %2331 = xor i64 %2330, %2319
  %2332 = lshr i64 %2331, 4
  %2333 = trunc i64 %2332 to i8
  %2334 = and i8 %2333, 1
  store i8 %2334, i8* %55, align 1, !tbaa !2450
  %2335 = icmp eq i64 %2319, 0
  %2336 = zext i1 %2335 to i8
  store i8 %2336, i8* %58, align 1, !tbaa !2447
  %2337 = lshr i64 %2319, 63
  %2338 = trunc i64 %2337 to i8
  store i8 %2338, i8* %61, align 1, !tbaa !2448
  %2339 = xor i64 %2337, %2303
  %2340 = xor i64 %2337, %2318
  %2341 = add nuw nsw i64 %2339, %2340
  %2342 = icmp eq i64 %2341, 2
  %2343 = zext i1 %2342 to i8
  store i8 %2343, i8* %67, align 1, !tbaa !2449
  %2344 = add i64 %2311, -196
  %2345 = add i64 %1960, 307
  store i64 %2345, i64* %PC, align 8
  %2346 = inttoptr i64 %2344 to i32*
  %2347 = load i32, i32* %2346, align 4
  %2348 = sext i32 %2347 to i64
  store i64 %2348, i64* %RCX, align 8, !tbaa !2428
  %2349 = shl nsw i64 %2348, 3
  %2350 = add i64 %2349, %2319
  %2351 = add i64 %1960, 312
  store i64 %2351, i64* %PC, align 8
  %2352 = load i64, i64* %148, align 1
  %2353 = inttoptr i64 %2350 to i64*
  store i64 %2352, i64* %2353, align 8
  %2354 = load i64, i64* %RBP, align 8
  %2355 = add i64 %2354, -104
  %2356 = load i64, i64* %PC, align 8
  %2357 = add i64 %2356, 4
  store i64 %2357, i64* %PC, align 8
  %2358 = inttoptr i64 %2355 to i64*
  %2359 = load i64, i64* %2358, align 8
  store i64 %2359, i64* %RAX, align 8, !tbaa !2428
  %2360 = add i64 %2354, -188
  %2361 = add i64 %2356, 11
  store i64 %2361, i64* %PC, align 8
  %2362 = inttoptr i64 %2360 to i32*
  %2363 = load i32, i32* %2362, align 4
  %2364 = sext i32 %2363 to i64
  %2365 = mul nsw i64 %2364, 520
  store i64 %2365, i64* %RCX, align 8, !tbaa !2428
  %2366 = lshr i64 %2365, 63
  %2367 = add i64 %2365, %2359
  store i64 %2367, i64* %RAX, align 8, !tbaa !2428
  %2368 = icmp ult i64 %2367, %2359
  %2369 = icmp ult i64 %2367, %2365
  %2370 = or i1 %2368, %2369
  %2371 = zext i1 %2370 to i8
  store i8 %2371, i8* %42, align 1, !tbaa !2432
  %2372 = trunc i64 %2367 to i32
  %2373 = and i32 %2372, 255
  %2374 = tail call i32 @llvm.ctpop.i32(i32 %2373) #9
  %2375 = trunc i32 %2374 to i8
  %2376 = and i8 %2375, 1
  %2377 = xor i8 %2376, 1
  store i8 %2377, i8* %49, align 1, !tbaa !2446
  %2378 = xor i64 %2365, %2359
  %2379 = xor i64 %2378, %2367
  %2380 = lshr i64 %2379, 4
  %2381 = trunc i64 %2380 to i8
  %2382 = and i8 %2381, 1
  store i8 %2382, i8* %55, align 1, !tbaa !2450
  %2383 = icmp eq i64 %2367, 0
  %2384 = zext i1 %2383 to i8
  store i8 %2384, i8* %58, align 1, !tbaa !2447
  %2385 = lshr i64 %2367, 63
  %2386 = trunc i64 %2385 to i8
  store i8 %2386, i8* %61, align 1, !tbaa !2448
  %2387 = lshr i64 %2359, 63
  %2388 = xor i64 %2385, %2387
  %2389 = xor i64 %2385, %2366
  %2390 = add nuw nsw i64 %2388, %2389
  %2391 = icmp eq i64 %2390, 2
  %2392 = zext i1 %2391 to i8
  store i8 %2392, i8* %67, align 1, !tbaa !2449
  %2393 = add i64 %2354, -192
  %2394 = add i64 %2356, 28
  store i64 %2394, i64* %PC, align 8
  %2395 = inttoptr i64 %2393 to i32*
  %2396 = load i32, i32* %2395, align 4
  %2397 = sext i32 %2396 to i64
  store i64 %2397, i64* %RCX, align 8, !tbaa !2428
  %2398 = shl nsw i64 %2397, 3
  %2399 = add i64 %2398, %2367
  %2400 = add i64 %2356, 33
  store i64 %2400, i64* %PC, align 8
  %2401 = inttoptr i64 %2399 to i64*
  %2402 = load i64, i64* %2401, align 8
  store i64 %2402, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %2403 = add i64 %2354, -112
  %2404 = add i64 %2356, 37
  store i64 %2404, i64* %PC, align 8
  %2405 = inttoptr i64 %2403 to i64*
  %2406 = load i64, i64* %2405, align 8
  store i64 %2406, i64* %RAX, align 8, !tbaa !2428
  %2407 = add i64 %2356, 44
  store i64 %2407, i64* %PC, align 8
  %2408 = load i32, i32* %2362, align 4
  %2409 = sext i32 %2408 to i64
  %2410 = mul nsw i64 %2409, 33800
  store i64 %2410, i64* %RCX, align 8, !tbaa !2428
  %2411 = lshr i64 %2410, 63
  %2412 = add i64 %2410, %2406
  store i64 %2412, i64* %RAX, align 8, !tbaa !2428
  %2413 = icmp ult i64 %2412, %2406
  %2414 = icmp ult i64 %2412, %2410
  %2415 = or i1 %2413, %2414
  %2416 = zext i1 %2415 to i8
  store i8 %2416, i8* %42, align 1, !tbaa !2432
  %2417 = trunc i64 %2412 to i32
  %2418 = and i32 %2417, 255
  %2419 = tail call i32 @llvm.ctpop.i32(i32 %2418) #9
  %2420 = trunc i32 %2419 to i8
  %2421 = and i8 %2420, 1
  %2422 = xor i8 %2421, 1
  store i8 %2422, i8* %49, align 1, !tbaa !2446
  %2423 = xor i64 %2410, %2406
  %2424 = xor i64 %2423, %2412
  %2425 = lshr i64 %2424, 4
  %2426 = trunc i64 %2425 to i8
  %2427 = and i8 %2426, 1
  store i8 %2427, i8* %55, align 1, !tbaa !2450
  %2428 = icmp eq i64 %2412, 0
  %2429 = zext i1 %2428 to i8
  store i8 %2429, i8* %58, align 1, !tbaa !2447
  %2430 = lshr i64 %2412, 63
  %2431 = trunc i64 %2430 to i8
  store i8 %2431, i8* %61, align 1, !tbaa !2448
  %2432 = lshr i64 %2406, 63
  %2433 = xor i64 %2430, %2432
  %2434 = xor i64 %2430, %2411
  %2435 = add nuw nsw i64 %2433, %2434
  %2436 = icmp eq i64 %2435, 2
  %2437 = zext i1 %2436 to i8
  store i8 %2437, i8* %67, align 1, !tbaa !2449
  %2438 = load i64, i64* %RBP, align 8
  %2439 = add i64 %2438, -52
  %2440 = add i64 %2356, 58
  store i64 %2440, i64* %PC, align 8
  %2441 = inttoptr i64 %2439 to i32*
  %2442 = load i32, i32* %2441, align 4
  %2443 = sext i32 %2442 to i64
  %2444 = mul nsw i64 %2443, 520
  store i64 %2444, i64* %RCX, align 8, !tbaa !2428
  %2445 = lshr i64 %2444, 63
  %2446 = add i64 %2444, %2412
  store i64 %2446, i64* %RAX, align 8, !tbaa !2428
  %2447 = icmp ult i64 %2446, %2412
  %2448 = icmp ult i64 %2446, %2444
  %2449 = or i1 %2447, %2448
  %2450 = zext i1 %2449 to i8
  store i8 %2450, i8* %42, align 1, !tbaa !2432
  %2451 = trunc i64 %2446 to i32
  %2452 = and i32 %2451, 255
  %2453 = tail call i32 @llvm.ctpop.i32(i32 %2452) #9
  %2454 = trunc i32 %2453 to i8
  %2455 = and i8 %2454, 1
  %2456 = xor i8 %2455, 1
  store i8 %2456, i8* %49, align 1, !tbaa !2446
  %2457 = xor i64 %2444, %2412
  %2458 = xor i64 %2457, %2446
  %2459 = lshr i64 %2458, 4
  %2460 = trunc i64 %2459 to i8
  %2461 = and i8 %2460, 1
  store i8 %2461, i8* %55, align 1, !tbaa !2450
  %2462 = icmp eq i64 %2446, 0
  %2463 = zext i1 %2462 to i8
  store i8 %2463, i8* %58, align 1, !tbaa !2447
  %2464 = lshr i64 %2446, 63
  %2465 = trunc i64 %2464 to i8
  store i8 %2465, i8* %61, align 1, !tbaa !2448
  %2466 = xor i64 %2464, %2430
  %2467 = xor i64 %2464, %2445
  %2468 = add nuw nsw i64 %2466, %2467
  %2469 = icmp eq i64 %2468, 2
  %2470 = zext i1 %2469 to i8
  store i8 %2470, i8* %67, align 1, !tbaa !2449
  %2471 = add i64 %2438, -196
  %2472 = add i64 %2356, 75
  store i64 %2472, i64* %PC, align 8
  %2473 = inttoptr i64 %2471 to i32*
  %2474 = load i32, i32* %2473, align 4
  %2475 = sext i32 %2474 to i64
  store i64 %2475, i64* %RCX, align 8, !tbaa !2428
  %2476 = shl nsw i64 %2475, 3
  %2477 = add i64 %2476, %2446
  %2478 = add i64 %2356, 80
  store i64 %2478, i64* %PC, align 8
  %2479 = load i64, i64* %148, align 1
  %2480 = inttoptr i64 %2477 to i64*
  store i64 %2479, i64* %2480, align 8
  %2481 = load i64, i64* %RBP, align 8
  %2482 = add i64 %2481, -196
  %2483 = load i64, i64* %PC, align 8
  %2484 = add i64 %2483, 6
  store i64 %2484, i64* %PC, align 8
  %2485 = inttoptr i64 %2482 to i32*
  %2486 = load i32, i32* %2485, align 4
  %2487 = add i32 %2486, 1
  %2488 = zext i32 %2487 to i64
  store i64 %2488, i64* %RAX, align 8, !tbaa !2428
  %2489 = icmp eq i32 %2486, -1
  %2490 = icmp eq i32 %2487, 0
  %2491 = or i1 %2489, %2490
  %2492 = zext i1 %2491 to i8
  store i8 %2492, i8* %42, align 1, !tbaa !2432
  %2493 = and i32 %2487, 255
  %2494 = tail call i32 @llvm.ctpop.i32(i32 %2493) #9
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = xor i8 %2496, 1
  store i8 %2497, i8* %49, align 1, !tbaa !2446
  %2498 = xor i32 %2487, %2486
  %2499 = lshr i32 %2498, 4
  %2500 = trunc i32 %2499 to i8
  %2501 = and i8 %2500, 1
  store i8 %2501, i8* %55, align 1, !tbaa !2450
  %2502 = zext i1 %2490 to i8
  store i8 %2502, i8* %58, align 1, !tbaa !2447
  %2503 = lshr i32 %2487, 31
  %2504 = trunc i32 %2503 to i8
  store i8 %2504, i8* %61, align 1, !tbaa !2448
  %2505 = lshr i32 %2486, 31
  %2506 = xor i32 %2503, %2505
  %2507 = add nuw nsw i32 %2506, %2503
  %2508 = icmp eq i32 %2507, 2
  %2509 = zext i1 %2508 to i8
  store i8 %2509, i8* %67, align 1, !tbaa !2449
  %2510 = add i64 %2483, 15
  store i64 %2510, i64* %PC, align 8
  store i32 %2487, i32* %2485, align 4
  %2511 = load i64, i64* %PC, align 8
  %2512 = add i64 %2511, -813
  store i64 %2512, i64* %PC, align 8, !tbaa !2428
  br label %block_401c20

block_40224b:                                     ; preds = %block_401581
  %2513 = load i64, i64* %RSP, align 8
  %2514 = add i64 %2513, 56
  store i64 %2514, i64* %RSP, align 8, !tbaa !2428
  %2515 = icmp ugt i64 %2513, -57
  %2516 = zext i1 %2515 to i8
  store i8 %2516, i8* %42, align 1, !tbaa !2432
  %2517 = trunc i64 %2514 to i32
  %2518 = and i32 %2517, 255
  %2519 = tail call i32 @llvm.ctpop.i32(i32 %2518) #9
  %2520 = trunc i32 %2519 to i8
  %2521 = and i8 %2520, 1
  %2522 = xor i8 %2521, 1
  store i8 %2522, i8* %49, align 1, !tbaa !2446
  %2523 = xor i64 %2513, 16
  %2524 = xor i64 %2523, %2514
  %2525 = lshr i64 %2524, 4
  %2526 = trunc i64 %2525 to i8
  %2527 = and i8 %2526, 1
  store i8 %2527, i8* %55, align 1, !tbaa !2450
  %2528 = icmp eq i64 %2514, 0
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %58, align 1, !tbaa !2447
  %2530 = lshr i64 %2514, 63
  %2531 = trunc i64 %2530 to i8
  store i8 %2531, i8* %61, align 1, !tbaa !2448
  %2532 = lshr i64 %2513, 63
  %2533 = xor i64 %2530, %2532
  %2534 = add nuw nsw i64 %2533, %2530
  %2535 = icmp eq i64 %2534, 2
  %2536 = zext i1 %2535 to i8
  store i8 %2536, i8* %67, align 1, !tbaa !2449
  %2537 = add i64 %4765, 5
  store i64 %2537, i64* %PC, align 8
  %2538 = add i64 %2513, 64
  %2539 = inttoptr i64 %2514 to i64*
  %2540 = load i64, i64* %2539, align 8
  store i64 %2540, i64* %RBX, align 8, !tbaa !2428
  store i64 %2538, i64* %RSP, align 8, !tbaa !2428
  %2541 = add i64 %4765, 7
  store i64 %2541, i64* %PC, align 8
  %2542 = add i64 %2513, 72
  %2543 = inttoptr i64 %2538 to i64*
  %2544 = load i64, i64* %2543, align 8
  store i64 %2544, i64* %R12, align 8, !tbaa !2428
  store i64 %2542, i64* %RSP, align 8, !tbaa !2428
  %2545 = add i64 %4765, 9
  store i64 %2545, i64* %PC, align 8
  %2546 = add i64 %2513, 80
  %2547 = inttoptr i64 %2542 to i64*
  %2548 = load i64, i64* %2547, align 8
  store i64 %2548, i64* %R13, align 8, !tbaa !2428
  store i64 %2546, i64* %RSP, align 8, !tbaa !2428
  %2549 = add i64 %4765, 11
  store i64 %2549, i64* %PC, align 8
  %2550 = add i64 %2513, 88
  %2551 = inttoptr i64 %2546 to i64*
  %2552 = load i64, i64* %2551, align 8
  store i64 %2552, i64* %R14, align 8, !tbaa !2428
  store i64 %2550, i64* %RSP, align 8, !tbaa !2428
  %2553 = add i64 %4765, 13
  store i64 %2553, i64* %PC, align 8
  %2554 = add i64 %2513, 96
  %2555 = inttoptr i64 %2550 to i64*
  %2556 = load i64, i64* %2555, align 8
  store i64 %2556, i64* %R15, align 8, !tbaa !2428
  store i64 %2554, i64* %RSP, align 8, !tbaa !2428
  %2557 = add i64 %4765, 14
  store i64 %2557, i64* %PC, align 8
  %2558 = add i64 %2513, 104
  %2559 = inttoptr i64 %2554 to i64*
  %2560 = load i64, i64* %2559, align 8
  store i64 %2560, i64* %RBP, align 8, !tbaa !2428
  store i64 %2558, i64* %RSP, align 8, !tbaa !2428
  %2561 = add i64 %4765, 15
  store i64 %2561, i64* %PC, align 8
  %2562 = inttoptr i64 %2558 to i64*
  %2563 = load i64, i64* %2562, align 8
  store i64 %2563, i64* %PC, align 8, !tbaa !2428
  %2564 = add i64 %2513, 112
  store i64 %2564, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401590:                                     ; preds = %block_401581
  %2565 = add i64 %4729, -192
  %2566 = add i64 %4765, 10
  store i64 %2566, i64* %PC, align 8
  %2567 = inttoptr i64 %2565 to i32*
  store i32 0, i32* %2567, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_40159a

block_4015a9:                                     ; preds = %block_40159a
  %2568 = add i64 %263, -196
  %2569 = add i64 %299, 10
  store i64 %2569, i64* %PC, align 8
  %2570 = inttoptr i64 %2568 to i32*
  store i32 0, i32* %2570, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_4015b3

block_402232:                                     ; preds = %block_40159a
  %2571 = add i64 %263, -188
  %2572 = add i64 %299, 11
  store i64 %2572, i64* %PC, align 8
  %2573 = inttoptr i64 %2571 to i32*
  %2574 = load i32, i32* %2573, align 4
  %2575 = add i32 %2574, 1
  %2576 = zext i32 %2575 to i64
  store i64 %2576, i64* %RAX, align 8, !tbaa !2428
  %2577 = icmp eq i32 %2574, -1
  %2578 = icmp eq i32 %2575, 0
  %2579 = or i1 %2577, %2578
  %2580 = zext i1 %2579 to i8
  store i8 %2580, i8* %42, align 1, !tbaa !2432
  %2581 = and i32 %2575, 255
  %2582 = tail call i32 @llvm.ctpop.i32(i32 %2581) #9
  %2583 = trunc i32 %2582 to i8
  %2584 = and i8 %2583, 1
  %2585 = xor i8 %2584, 1
  store i8 %2585, i8* %49, align 1, !tbaa !2446
  %2586 = xor i32 %2575, %2574
  %2587 = lshr i32 %2586, 4
  %2588 = trunc i32 %2587 to i8
  %2589 = and i8 %2588, 1
  store i8 %2589, i8* %55, align 1, !tbaa !2450
  %2590 = zext i1 %2578 to i8
  store i8 %2590, i8* %58, align 1, !tbaa !2447
  %2591 = lshr i32 %2575, 31
  %2592 = trunc i32 %2591 to i8
  store i8 %2592, i8* %61, align 1, !tbaa !2448
  %2593 = lshr i32 %2574, 31
  %2594 = xor i32 %2591, %2593
  %2595 = add nuw nsw i32 %2594, %2591
  %2596 = icmp eq i32 %2595, 2
  %2597 = zext i1 %2596 to i8
  store i8 %2597, i8* %67, align 1, !tbaa !2449
  %2598 = add i64 %299, 20
  store i64 %2598, i64* %PC, align 8
  store i32 %2575, i32* %2573, align 4
  %2599 = load i64, i64* %PC, align 8
  %2600 = add i64 %2599, -3269
  store i64 %2600, i64* %PC, align 8, !tbaa !2428
  br label %block_401581

block_401f52:                                     ; preds = %block_401c20
  %2601 = add i64 %4841, -48
  %2602 = add i64 %4803, 39
  store i64 %2602, i64* %PC, align 8
  %2603 = inttoptr i64 %2601 to i32*
  %2604 = load i32, i32* %2603, align 4
  %2605 = sext i32 %2604 to i64
  store i64 %2605, i64* %RCX, align 8, !tbaa !2428
  %2606 = shl nsw i64 %2605, 3
  %2607 = add i64 %2606, %4850
  %2608 = add i64 %4803, 44
  store i64 %2608, i64* %PC, align 8
  %2609 = inttoptr i64 %2607 to i64*
  %2610 = load i64, i64* %2609, align 8
  store i64 %2610, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %2611 = add i64 %4841, -80
  %2612 = add i64 %4803, 48
  store i64 %2612, i64* %PC, align 8
  %2613 = inttoptr i64 %2611 to i64*
  %2614 = load i64, i64* %2613, align 8
  store i64 %2614, i64* %RAX, align 8, !tbaa !2428
  %2615 = add i64 %4841, -188
  %2616 = add i64 %4803, 55
  store i64 %2616, i64* %PC, align 8
  %2617 = inttoptr i64 %2615 to i32*
  %2618 = load i32, i32* %2617, align 4
  %2619 = sext i32 %2618 to i64
  %2620 = mul nsw i64 %2619, 520
  store i64 %2620, i64* %RCX, align 8, !tbaa !2428
  %2621 = lshr i64 %2620, 63
  %2622 = add i64 %2620, %2614
  store i64 %2622, i64* %RAX, align 8, !tbaa !2428
  %2623 = icmp ult i64 %2622, %2614
  %2624 = icmp ult i64 %2622, %2620
  %2625 = or i1 %2623, %2624
  %2626 = zext i1 %2625 to i8
  store i8 %2626, i8* %42, align 1, !tbaa !2432
  %2627 = trunc i64 %2622 to i32
  %2628 = and i32 %2627, 255
  %2629 = tail call i32 @llvm.ctpop.i32(i32 %2628) #9
  %2630 = trunc i32 %2629 to i8
  %2631 = and i8 %2630, 1
  %2632 = xor i8 %2631, 1
  store i8 %2632, i8* %49, align 1, !tbaa !2446
  %2633 = xor i64 %2620, %2614
  %2634 = xor i64 %2633, %2622
  %2635 = lshr i64 %2634, 4
  %2636 = trunc i64 %2635 to i8
  %2637 = and i8 %2636, 1
  store i8 %2637, i8* %55, align 1, !tbaa !2450
  %2638 = icmp eq i64 %2622, 0
  %2639 = zext i1 %2638 to i8
  store i8 %2639, i8* %58, align 1, !tbaa !2447
  %2640 = lshr i64 %2622, 63
  %2641 = trunc i64 %2640 to i8
  store i8 %2641, i8* %61, align 1, !tbaa !2448
  %2642 = lshr i64 %2614, 63
  %2643 = xor i64 %2640, %2642
  %2644 = xor i64 %2640, %2621
  %2645 = add nuw nsw i64 %2643, %2644
  %2646 = icmp eq i64 %2645, 2
  %2647 = zext i1 %2646 to i8
  store i8 %2647, i8* %67, align 1, !tbaa !2449
  %2648 = add i64 %4803, 69
  store i64 %2648, i64* %PC, align 8
  %2649 = load i32, i32* %2603, align 4
  %2650 = sext i32 %2649 to i64
  store i64 %2650, i64* %RCX, align 8, !tbaa !2428
  %2651 = shl nsw i64 %2650, 3
  %2652 = add i64 %2651, %2622
  %2653 = add i64 %4803, 74
  store i64 %2653, i64* %PC, align 8
  %2654 = bitcast i64 %2610 to double
  %2655 = inttoptr i64 %2652 to double*
  %2656 = load double, double* %2655, align 8
  %2657 = fsub double %2654, %2656
  store double %2657, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %2658 = load i64, i64* %RBP, align 8
  %2659 = add i64 %2658, -88
  %2660 = add i64 %4803, 78
  store i64 %2660, i64* %PC, align 8
  %2661 = inttoptr i64 %2659 to i64*
  %2662 = load i64, i64* %2661, align 8
  store i64 %2662, i64* %RAX, align 8, !tbaa !2428
  %2663 = add i64 %2658, -188
  %2664 = add i64 %4803, 85
  store i64 %2664, i64* %PC, align 8
  %2665 = inttoptr i64 %2663 to i32*
  %2666 = load i32, i32* %2665, align 4
  %2667 = sext i32 %2666 to i64
  %2668 = mul nsw i64 %2667, 520
  store i64 %2668, i64* %RCX, align 8, !tbaa !2428
  %2669 = lshr i64 %2668, 63
  %2670 = add i64 %2668, %2662
  store i64 %2670, i64* %RAX, align 8, !tbaa !2428
  %2671 = icmp ult i64 %2670, %2662
  %2672 = icmp ult i64 %2670, %2668
  %2673 = or i1 %2671, %2672
  %2674 = zext i1 %2673 to i8
  store i8 %2674, i8* %42, align 1, !tbaa !2432
  %2675 = trunc i64 %2670 to i32
  %2676 = and i32 %2675, 255
  %2677 = tail call i32 @llvm.ctpop.i32(i32 %2676) #9
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  %2680 = xor i8 %2679, 1
  store i8 %2680, i8* %49, align 1, !tbaa !2446
  %2681 = xor i64 %2668, %2662
  %2682 = xor i64 %2681, %2670
  %2683 = lshr i64 %2682, 4
  %2684 = trunc i64 %2683 to i8
  %2685 = and i8 %2684, 1
  store i8 %2685, i8* %55, align 1, !tbaa !2450
  %2686 = icmp eq i64 %2670, 0
  %2687 = zext i1 %2686 to i8
  store i8 %2687, i8* %58, align 1, !tbaa !2447
  %2688 = lshr i64 %2670, 63
  %2689 = trunc i64 %2688 to i8
  store i8 %2689, i8* %61, align 1, !tbaa !2448
  %2690 = lshr i64 %2662, 63
  %2691 = xor i64 %2688, %2690
  %2692 = xor i64 %2688, %2669
  %2693 = add nuw nsw i64 %2691, %2692
  %2694 = icmp eq i64 %2693, 2
  %2695 = zext i1 %2694 to i8
  store i8 %2695, i8* %67, align 1, !tbaa !2449
  %2696 = add i64 %2658, -52
  %2697 = add i64 %4803, 99
  store i64 %2697, i64* %PC, align 8
  %2698 = inttoptr i64 %2696 to i32*
  %2699 = load i32, i32* %2698, align 4
  %2700 = sext i32 %2699 to i64
  store i64 %2700, i64* %RCX, align 8, !tbaa !2428
  %2701 = shl nsw i64 %2700, 3
  %2702 = add i64 %2701, %2670
  %2703 = add i64 %4803, 104
  store i64 %2703, i64* %PC, align 8
  %2704 = inttoptr i64 %2702 to double*
  %2705 = load double, double* %2704, align 8
  %2706 = fadd double %2657, %2705
  store double %2706, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %2707 = add i64 %2658, -128
  %2708 = add i64 %4803, 108
  store i64 %2708, i64* %PC, align 8
  %2709 = inttoptr i64 %2707 to i64*
  %2710 = load i64, i64* %2709, align 8
  store i64 %2710, i64* %RAX, align 8, !tbaa !2428
  %2711 = add i64 %4803, 115
  store i64 %2711, i64* %PC, align 8
  %2712 = load i32, i32* %2665, align 4
  %2713 = sext i32 %2712 to i64
  %2714 = mul nsw i64 %2713, 33800
  store i64 %2714, i64* %RCX, align 8, !tbaa !2428
  %2715 = lshr i64 %2714, 63
  %2716 = add i64 %2714, %2710
  store i64 %2716, i64* %RAX, align 8, !tbaa !2428
  %2717 = icmp ult i64 %2716, %2710
  %2718 = icmp ult i64 %2716, %2714
  %2719 = or i1 %2717, %2718
  %2720 = zext i1 %2719 to i8
  store i8 %2720, i8* %42, align 1, !tbaa !2432
  %2721 = trunc i64 %2716 to i32
  %2722 = and i32 %2721, 255
  %2723 = tail call i32 @llvm.ctpop.i32(i32 %2722) #9
  %2724 = trunc i32 %2723 to i8
  %2725 = and i8 %2724, 1
  %2726 = xor i8 %2725, 1
  store i8 %2726, i8* %49, align 1, !tbaa !2446
  %2727 = xor i64 %2714, %2710
  %2728 = xor i64 %2727, %2716
  %2729 = lshr i64 %2728, 4
  %2730 = trunc i64 %2729 to i8
  %2731 = and i8 %2730, 1
  store i8 %2731, i8* %55, align 1, !tbaa !2450
  %2732 = icmp eq i64 %2716, 0
  %2733 = zext i1 %2732 to i8
  store i8 %2733, i8* %58, align 1, !tbaa !2447
  %2734 = lshr i64 %2716, 63
  %2735 = trunc i64 %2734 to i8
  store i8 %2735, i8* %61, align 1, !tbaa !2448
  %2736 = lshr i64 %2710, 63
  %2737 = xor i64 %2734, %2736
  %2738 = xor i64 %2734, %2715
  %2739 = add nuw nsw i64 %2737, %2738
  %2740 = icmp eq i64 %2739, 2
  %2741 = zext i1 %2740 to i8
  store i8 %2741, i8* %67, align 1, !tbaa !2449
  %2742 = load i64, i64* %RBP, align 8
  %2743 = add i64 %2742, -52
  %2744 = add i64 %4803, 129
  store i64 %2744, i64* %PC, align 8
  %2745 = inttoptr i64 %2743 to i32*
  %2746 = load i32, i32* %2745, align 4
  %2747 = sext i32 %2746 to i64
  %2748 = mul nsw i64 %2747, 520
  store i64 %2748, i64* %RCX, align 8, !tbaa !2428
  %2749 = lshr i64 %2748, 63
  %2750 = add i64 %2748, %2716
  store i64 %2750, i64* %RAX, align 8, !tbaa !2428
  %2751 = icmp ult i64 %2750, %2716
  %2752 = icmp ult i64 %2750, %2748
  %2753 = or i1 %2751, %2752
  %2754 = zext i1 %2753 to i8
  store i8 %2754, i8* %42, align 1, !tbaa !2432
  %2755 = trunc i64 %2750 to i32
  %2756 = and i32 %2755, 255
  %2757 = tail call i32 @llvm.ctpop.i32(i32 %2756) #9
  %2758 = trunc i32 %2757 to i8
  %2759 = and i8 %2758, 1
  %2760 = xor i8 %2759, 1
  store i8 %2760, i8* %49, align 1, !tbaa !2446
  %2761 = xor i64 %2748, %2716
  %2762 = xor i64 %2761, %2750
  %2763 = lshr i64 %2762, 4
  %2764 = trunc i64 %2763 to i8
  %2765 = and i8 %2764, 1
  store i8 %2765, i8* %55, align 1, !tbaa !2450
  %2766 = icmp eq i64 %2750, 0
  %2767 = zext i1 %2766 to i8
  store i8 %2767, i8* %58, align 1, !tbaa !2447
  %2768 = lshr i64 %2750, 63
  %2769 = trunc i64 %2768 to i8
  store i8 %2769, i8* %61, align 1, !tbaa !2448
  %2770 = xor i64 %2768, %2734
  %2771 = xor i64 %2768, %2749
  %2772 = add nuw nsw i64 %2770, %2771
  %2773 = icmp eq i64 %2772, 2
  %2774 = zext i1 %2773 to i8
  store i8 %2774, i8* %67, align 1, !tbaa !2449
  %2775 = add i64 %2742, -48
  %2776 = add i64 %4803, 143
  store i64 %2776, i64* %PC, align 8
  %2777 = inttoptr i64 %2775 to i32*
  %2778 = load i32, i32* %2777, align 4
  %2779 = sext i32 %2778 to i64
  store i64 %2779, i64* %RCX, align 8, !tbaa !2428
  %2780 = shl nsw i64 %2779, 3
  %2781 = add i64 %2780, %2750
  %2782 = add i64 %4803, 148
  store i64 %2782, i64* %PC, align 8
  %2783 = load double, double* %257, align 1
  %2784 = inttoptr i64 %2781 to double*
  %2785 = load double, double* %2784, align 8
  %2786 = fsub double %2783, %2785
  store double %2786, double* %257, align 1, !tbaa !2452
  %2787 = add i64 %2742, -96
  %2788 = add i64 %4803, 152
  store i64 %2788, i64* %PC, align 8
  %2789 = inttoptr i64 %2787 to i64*
  %2790 = load i64, i64* %2789, align 8
  store i64 %2790, i64* %RAX, align 8, !tbaa !2428
  %2791 = add i64 %2742, -188
  %2792 = add i64 %4803, 159
  store i64 %2792, i64* %PC, align 8
  %2793 = inttoptr i64 %2791 to i32*
  %2794 = load i32, i32* %2793, align 4
  %2795 = sext i32 %2794 to i64
  %2796 = mul nsw i64 %2795, 520
  store i64 %2796, i64* %RCX, align 8, !tbaa !2428
  %2797 = lshr i64 %2796, 63
  %2798 = add i64 %2796, %2790
  store i64 %2798, i64* %RAX, align 8, !tbaa !2428
  %2799 = icmp ult i64 %2798, %2790
  %2800 = icmp ult i64 %2798, %2796
  %2801 = or i1 %2799, %2800
  %2802 = zext i1 %2801 to i8
  store i8 %2802, i8* %42, align 1, !tbaa !2432
  %2803 = trunc i64 %2798 to i32
  %2804 = and i32 %2803, 255
  %2805 = tail call i32 @llvm.ctpop.i32(i32 %2804) #9
  %2806 = trunc i32 %2805 to i8
  %2807 = and i8 %2806, 1
  %2808 = xor i8 %2807, 1
  store i8 %2808, i8* %49, align 1, !tbaa !2446
  %2809 = xor i64 %2796, %2790
  %2810 = xor i64 %2809, %2798
  %2811 = lshr i64 %2810, 4
  %2812 = trunc i64 %2811 to i8
  %2813 = and i8 %2812, 1
  store i8 %2813, i8* %55, align 1, !tbaa !2450
  %2814 = icmp eq i64 %2798, 0
  %2815 = zext i1 %2814 to i8
  store i8 %2815, i8* %58, align 1, !tbaa !2447
  %2816 = lshr i64 %2798, 63
  %2817 = trunc i64 %2816 to i8
  store i8 %2817, i8* %61, align 1, !tbaa !2448
  %2818 = lshr i64 %2790, 63
  %2819 = xor i64 %2816, %2818
  %2820 = xor i64 %2816, %2797
  %2821 = add nuw nsw i64 %2819, %2820
  %2822 = icmp eq i64 %2821, 2
  %2823 = zext i1 %2822 to i8
  store i8 %2823, i8* %67, align 1, !tbaa !2449
  %2824 = load i64, i64* %RBP, align 8
  %2825 = add i64 %2824, -192
  %2826 = add i64 %4803, 176
  store i64 %2826, i64* %PC, align 8
  %2827 = inttoptr i64 %2825 to i32*
  %2828 = load i32, i32* %2827, align 4
  %2829 = sext i32 %2828 to i64
  store i64 %2829, i64* %RCX, align 8, !tbaa !2428
  %2830 = shl nsw i64 %2829, 3
  %2831 = add i64 %2830, %2798
  %2832 = add i64 %4803, 181
  store i64 %2832, i64* %PC, align 8
  %2833 = inttoptr i64 %2831 to double*
  store double %2786, double* %2833, align 8
  %2834 = load i64, i64* %RBP, align 8
  %2835 = add i64 %2834, -176
  %2836 = load i64, i64* %PC, align 8
  %2837 = add i64 %2836, 7
  store i64 %2837, i64* %PC, align 8
  %2838 = inttoptr i64 %2835 to i64*
  %2839 = load i64, i64* %2838, align 8
  store i64 %2839, i64* %RAX, align 8, !tbaa !2428
  %2840 = add i64 %2834, -52
  %2841 = add i64 %2836, 11
  store i64 %2841, i64* %PC, align 8
  %2842 = inttoptr i64 %2840 to i32*
  %2843 = load i32, i32* %2842, align 4
  %2844 = sext i32 %2843 to i64
  store i64 %2844, i64* %RCX, align 8, !tbaa !2428
  %2845 = shl nsw i64 %2844, 3
  %2846 = add i64 %2845, %2839
  %2847 = add i64 %2836, 16
  store i64 %2847, i64* %PC, align 8
  %2848 = inttoptr i64 %2846 to i64*
  %2849 = load i64, i64* %2848, align 8
  store i64 %2849, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %2850 = add i64 %2834, -184
  %2851 = add i64 %2836, 23
  store i64 %2851, i64* %PC, align 8
  %2852 = inttoptr i64 %2850 to i64*
  %2853 = load i64, i64* %2852, align 8
  store i64 %2853, i64* %RAX, align 8, !tbaa !2428
  %2854 = add i64 %2836, 27
  store i64 %2854, i64* %PC, align 8
  %2855 = load i32, i32* %2842, align 4
  %2856 = sext i32 %2855 to i64
  store i64 %2856, i64* %RCX, align 8, !tbaa !2428
  %2857 = shl nsw i64 %2856, 3
  %2858 = add i64 %2857, %2853
  %2859 = add i64 %2836, 32
  store i64 %2859, i64* %PC, align 8
  %2860 = bitcast i64 %2849 to double
  %2861 = inttoptr i64 %2858 to double*
  %2862 = load double, double* %2861, align 8
  %2863 = fdiv double %2860, %2862
  store double %2863, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %2864 = add i64 %2834, -112
  %2865 = add i64 %2836, 36
  store i64 %2865, i64* %PC, align 8
  %2866 = inttoptr i64 %2864 to i64*
  %2867 = load i64, i64* %2866, align 8
  store i64 %2867, i64* %RAX, align 8, !tbaa !2428
  %2868 = add i64 %2834, -188
  %2869 = add i64 %2836, 43
  store i64 %2869, i64* %PC, align 8
  %2870 = inttoptr i64 %2868 to i32*
  %2871 = load i32, i32* %2870, align 4
  %2872 = sext i32 %2871 to i64
  %2873 = mul nsw i64 %2872, 33800
  store i64 %2873, i64* %RCX, align 8, !tbaa !2428
  %2874 = lshr i64 %2873, 63
  %2875 = add i64 %2873, %2867
  store i64 %2875, i64* %RAX, align 8, !tbaa !2428
  %2876 = icmp ult i64 %2875, %2867
  %2877 = icmp ult i64 %2875, %2873
  %2878 = or i1 %2876, %2877
  %2879 = zext i1 %2878 to i8
  store i8 %2879, i8* %42, align 1, !tbaa !2432
  %2880 = trunc i64 %2875 to i32
  %2881 = and i32 %2880, 255
  %2882 = tail call i32 @llvm.ctpop.i32(i32 %2881) #9
  %2883 = trunc i32 %2882 to i8
  %2884 = and i8 %2883, 1
  %2885 = xor i8 %2884, 1
  store i8 %2885, i8* %49, align 1, !tbaa !2446
  %2886 = xor i64 %2873, %2867
  %2887 = xor i64 %2886, %2875
  %2888 = lshr i64 %2887, 4
  %2889 = trunc i64 %2888 to i8
  %2890 = and i8 %2889, 1
  store i8 %2890, i8* %55, align 1, !tbaa !2450
  %2891 = icmp eq i64 %2875, 0
  %2892 = zext i1 %2891 to i8
  store i8 %2892, i8* %58, align 1, !tbaa !2447
  %2893 = lshr i64 %2875, 63
  %2894 = trunc i64 %2893 to i8
  store i8 %2894, i8* %61, align 1, !tbaa !2448
  %2895 = lshr i64 %2867, 63
  %2896 = xor i64 %2893, %2895
  %2897 = xor i64 %2893, %2874
  %2898 = add nuw nsw i64 %2896, %2897
  %2899 = icmp eq i64 %2898, 2
  %2900 = zext i1 %2899 to i8
  store i8 %2900, i8* %67, align 1, !tbaa !2449
  %2901 = load i64, i64* %RBP, align 8
  %2902 = add i64 %2901, -52
  %2903 = add i64 %2836, 57
  store i64 %2903, i64* %PC, align 8
  %2904 = inttoptr i64 %2902 to i32*
  %2905 = load i32, i32* %2904, align 4
  %2906 = sext i32 %2905 to i64
  %2907 = mul nsw i64 %2906, 520
  store i64 %2907, i64* %RCX, align 8, !tbaa !2428
  %2908 = lshr i64 %2907, 63
  %2909 = add i64 %2907, %2875
  store i64 %2909, i64* %RAX, align 8, !tbaa !2428
  %2910 = icmp ult i64 %2909, %2875
  %2911 = icmp ult i64 %2909, %2907
  %2912 = or i1 %2910, %2911
  %2913 = zext i1 %2912 to i8
  store i8 %2913, i8* %42, align 1, !tbaa !2432
  %2914 = trunc i64 %2909 to i32
  %2915 = and i32 %2914, 255
  %2916 = tail call i32 @llvm.ctpop.i32(i32 %2915) #9
  %2917 = trunc i32 %2916 to i8
  %2918 = and i8 %2917, 1
  %2919 = xor i8 %2918, 1
  store i8 %2919, i8* %49, align 1, !tbaa !2446
  %2920 = xor i64 %2907, %2875
  %2921 = xor i64 %2920, %2909
  %2922 = lshr i64 %2921, 4
  %2923 = trunc i64 %2922 to i8
  %2924 = and i8 %2923, 1
  store i8 %2924, i8* %55, align 1, !tbaa !2450
  %2925 = icmp eq i64 %2909, 0
  %2926 = zext i1 %2925 to i8
  store i8 %2926, i8* %58, align 1, !tbaa !2447
  %2927 = lshr i64 %2909, 63
  %2928 = trunc i64 %2927 to i8
  store i8 %2928, i8* %61, align 1, !tbaa !2448
  %2929 = xor i64 %2927, %2893
  %2930 = xor i64 %2927, %2908
  %2931 = add nuw nsw i64 %2929, %2930
  %2932 = icmp eq i64 %2931, 2
  %2933 = zext i1 %2932 to i8
  store i8 %2933, i8* %67, align 1, !tbaa !2449
  %2934 = add i64 %2901, -48
  %2935 = add i64 %2836, 71
  store i64 %2935, i64* %PC, align 8
  %2936 = inttoptr i64 %2934 to i32*
  %2937 = load i32, i32* %2936, align 4
  %2938 = sext i32 %2937 to i64
  store i64 %2938, i64* %RCX, align 8, !tbaa !2428
  %2939 = shl nsw i64 %2938, 3
  %2940 = add i64 %2939, %2909
  %2941 = add i64 %2836, 76
  store i64 %2941, i64* %PC, align 8
  %2942 = load double, double* %257, align 1
  %2943 = inttoptr i64 %2940 to double*
  %2944 = load double, double* %2943, align 8
  %2945 = fmul double %2942, %2944
  store double %2945, double* %257, align 1, !tbaa !2452
  %2946 = add i64 %2901, -72
  %2947 = add i64 %2836, 81
  store i64 %2947, i64* %PC, align 8
  %2948 = inttoptr i64 %2946 to i64*
  %2949 = load i64, i64* %2948, align 8
  store i64 %2949, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %2950 = add i64 %2901, -184
  %2951 = add i64 %2836, 88
  store i64 %2951, i64* %PC, align 8
  %2952 = inttoptr i64 %2950 to i64*
  %2953 = load i64, i64* %2952, align 8
  store i64 %2953, i64* %RAX, align 8, !tbaa !2428
  %2954 = add i64 %2836, 92
  store i64 %2954, i64* %PC, align 8
  %2955 = load i32, i32* %2904, align 4
  %2956 = sext i32 %2955 to i64
  store i64 %2956, i64* %RCX, align 8, !tbaa !2428
  %2957 = shl nsw i64 %2956, 3
  %2958 = add i64 %2957, %2953
  %2959 = add i64 %2836, 97
  store i64 %2959, i64* %PC, align 8
  %2960 = bitcast i64 %2949 to double
  %2961 = inttoptr i64 %2958 to double*
  %2962 = load double, double* %2961, align 8
  %2963 = fdiv double %2960, %2962
  store double %2963, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %2964 = load i64, i64* %RBP, align 8
  %2965 = add i64 %2964, -96
  %2966 = add i64 %2836, 101
  store i64 %2966, i64* %PC, align 8
  %2967 = inttoptr i64 %2965 to i64*
  %2968 = load i64, i64* %2967, align 8
  store i64 %2968, i64* %RAX, align 8, !tbaa !2428
  %2969 = add i64 %2964, -188
  %2970 = add i64 %2836, 108
  store i64 %2970, i64* %PC, align 8
  %2971 = inttoptr i64 %2969 to i32*
  %2972 = load i32, i32* %2971, align 4
  %2973 = sext i32 %2972 to i64
  %2974 = mul nsw i64 %2973, 520
  store i64 %2974, i64* %RCX, align 8, !tbaa !2428
  %2975 = lshr i64 %2974, 63
  %2976 = add i64 %2974, %2968
  store i64 %2976, i64* %RAX, align 8, !tbaa !2428
  %2977 = icmp ult i64 %2976, %2968
  %2978 = icmp ult i64 %2976, %2974
  %2979 = or i1 %2977, %2978
  %2980 = zext i1 %2979 to i8
  store i8 %2980, i8* %42, align 1, !tbaa !2432
  %2981 = trunc i64 %2976 to i32
  %2982 = and i32 %2981, 255
  %2983 = tail call i32 @llvm.ctpop.i32(i32 %2982) #9
  %2984 = trunc i32 %2983 to i8
  %2985 = and i8 %2984, 1
  %2986 = xor i8 %2985, 1
  store i8 %2986, i8* %49, align 1, !tbaa !2446
  %2987 = xor i64 %2974, %2968
  %2988 = xor i64 %2987, %2976
  %2989 = lshr i64 %2988, 4
  %2990 = trunc i64 %2989 to i8
  %2991 = and i8 %2990, 1
  store i8 %2991, i8* %55, align 1, !tbaa !2450
  %2992 = icmp eq i64 %2976, 0
  %2993 = zext i1 %2992 to i8
  store i8 %2993, i8* %58, align 1, !tbaa !2447
  %2994 = lshr i64 %2976, 63
  %2995 = trunc i64 %2994 to i8
  store i8 %2995, i8* %61, align 1, !tbaa !2448
  %2996 = lshr i64 %2968, 63
  %2997 = xor i64 %2994, %2996
  %2998 = xor i64 %2994, %2975
  %2999 = add nuw nsw i64 %2997, %2998
  %3000 = icmp eq i64 %2999, 2
  %3001 = zext i1 %3000 to i8
  store i8 %3001, i8* %67, align 1, !tbaa !2449
  %3002 = add i64 %2964, -192
  %3003 = add i64 %2836, 125
  store i64 %3003, i64* %PC, align 8
  %3004 = inttoptr i64 %3002 to i32*
  %3005 = load i32, i32* %3004, align 4
  %3006 = sext i32 %3005 to i64
  store i64 %3006, i64* %RCX, align 8, !tbaa !2428
  %3007 = shl nsw i64 %3006, 3
  %3008 = add i64 %3007, %2976
  %3009 = add i64 %2836, 130
  store i64 %3009, i64* %PC, align 8
  %3010 = inttoptr i64 %3008 to double*
  %3011 = load double, double* %3010, align 8
  %3012 = fmul double %2963, %3011
  store double %3012, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3013 = load double, double* %257, align 1
  %3014 = fsub double %3013, %3012
  store double %3014, double* %257, align 1, !tbaa !2452
  %3015 = add i64 %2964, -104
  %3016 = add i64 %2836, 138
  store i64 %3016, i64* %PC, align 8
  %3017 = inttoptr i64 %3015 to i64*
  %3018 = load i64, i64* %3017, align 8
  store i64 %3018, i64* %RAX, align 8, !tbaa !2428
  %3019 = load i64, i64* %RBP, align 8
  %3020 = add i64 %3019, -188
  %3021 = add i64 %2836, 145
  store i64 %3021, i64* %PC, align 8
  %3022 = inttoptr i64 %3020 to i32*
  %3023 = load i32, i32* %3022, align 4
  %3024 = sext i32 %3023 to i64
  %3025 = mul nsw i64 %3024, 520
  store i64 %3025, i64* %RCX, align 8, !tbaa !2428
  %3026 = lshr i64 %3025, 63
  %3027 = add i64 %3025, %3018
  store i64 %3027, i64* %RAX, align 8, !tbaa !2428
  %3028 = icmp ult i64 %3027, %3018
  %3029 = icmp ult i64 %3027, %3025
  %3030 = or i1 %3028, %3029
  %3031 = zext i1 %3030 to i8
  store i8 %3031, i8* %42, align 1, !tbaa !2432
  %3032 = trunc i64 %3027 to i32
  %3033 = and i32 %3032, 255
  %3034 = tail call i32 @llvm.ctpop.i32(i32 %3033) #9
  %3035 = trunc i32 %3034 to i8
  %3036 = and i8 %3035, 1
  %3037 = xor i8 %3036, 1
  store i8 %3037, i8* %49, align 1, !tbaa !2446
  %3038 = xor i64 %3025, %3018
  %3039 = xor i64 %3038, %3027
  %3040 = lshr i64 %3039, 4
  %3041 = trunc i64 %3040 to i8
  %3042 = and i8 %3041, 1
  store i8 %3042, i8* %55, align 1, !tbaa !2450
  %3043 = icmp eq i64 %3027, 0
  %3044 = zext i1 %3043 to i8
  store i8 %3044, i8* %58, align 1, !tbaa !2447
  %3045 = lshr i64 %3027, 63
  %3046 = trunc i64 %3045 to i8
  store i8 %3046, i8* %61, align 1, !tbaa !2448
  %3047 = lshr i64 %3018, 63
  %3048 = xor i64 %3045, %3047
  %3049 = xor i64 %3045, %3026
  %3050 = add nuw nsw i64 %3048, %3049
  %3051 = icmp eq i64 %3050, 2
  %3052 = zext i1 %3051 to i8
  store i8 %3052, i8* %67, align 1, !tbaa !2449
  %3053 = add i64 %3019, -192
  %3054 = add i64 %2836, 162
  store i64 %3054, i64* %PC, align 8
  %3055 = inttoptr i64 %3053 to i32*
  %3056 = load i32, i32* %3055, align 4
  %3057 = sext i32 %3056 to i64
  store i64 %3057, i64* %RCX, align 8, !tbaa !2428
  %3058 = shl nsw i64 %3057, 3
  %3059 = add i64 %3058, %3027
  %3060 = add i64 %2836, 167
  store i64 %3060, i64* %PC, align 8
  %3061 = inttoptr i64 %3059 to double*
  store double %3014, double* %3061, align 8
  %3062 = load i64, i64* %RBP, align 8
  %3063 = add i64 %3062, -160
  %3064 = load i64, i64* %PC, align 8
  %3065 = add i64 %3064, 7
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3063 to i64*
  %3067 = load i64, i64* %3066, align 8
  store i64 %3067, i64* %RAX, align 8, !tbaa !2428
  %3068 = add i64 %3062, -48
  %3069 = add i64 %3064, 11
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to i32*
  %3071 = load i32, i32* %3070, align 4
  %3072 = sext i32 %3071 to i64
  store i64 %3072, i64* %RCX, align 8, !tbaa !2428
  %3073 = shl nsw i64 %3072, 3
  %3074 = add i64 %3073, %3067
  %3075 = add i64 %3064, 16
  store i64 %3075, i64* %PC, align 8
  %3076 = inttoptr i64 %3074 to i64*
  %3077 = load i64, i64* %3076, align 8
  store i64 %3077, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3078 = add i64 %3062, -168
  %3079 = add i64 %3064, 23
  store i64 %3079, i64* %PC, align 8
  %3080 = inttoptr i64 %3078 to i64*
  %3081 = load i64, i64* %3080, align 8
  store i64 %3081, i64* %RAX, align 8, !tbaa !2428
  %3082 = add i64 %3064, 27
  store i64 %3082, i64* %PC, align 8
  %3083 = load i32, i32* %3070, align 4
  %3084 = sext i32 %3083 to i64
  store i64 %3084, i64* %RCX, align 8, !tbaa !2428
  %3085 = shl nsw i64 %3084, 3
  %3086 = add i64 %3085, %3081
  %3087 = add i64 %3064, 32
  store i64 %3087, i64* %PC, align 8
  %3088 = bitcast i64 %3077 to double
  %3089 = inttoptr i64 %3086 to double*
  %3090 = load double, double* %3089, align 8
  %3091 = fdiv double %3088, %3090
  store double %3091, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %3092 = add i64 %3062, -136
  %3093 = add i64 %3064, 39
  store i64 %3093, i64* %PC, align 8
  %3094 = inttoptr i64 %3092 to i64*
  %3095 = load i64, i64* %3094, align 8
  store i64 %3095, i64* %RAX, align 8, !tbaa !2428
  %3096 = add i64 %3062, -188
  %3097 = add i64 %3064, 46
  store i64 %3097, i64* %PC, align 8
  %3098 = inttoptr i64 %3096 to i32*
  %3099 = load i32, i32* %3098, align 4
  %3100 = sext i32 %3099 to i64
  %3101 = mul nsw i64 %3100, 33800
  store i64 %3101, i64* %RCX, align 8, !tbaa !2428
  %3102 = lshr i64 %3101, 63
  %3103 = add i64 %3101, %3095
  store i64 %3103, i64* %RAX, align 8, !tbaa !2428
  %3104 = icmp ult i64 %3103, %3095
  %3105 = icmp ult i64 %3103, %3101
  %3106 = or i1 %3104, %3105
  %3107 = zext i1 %3106 to i8
  store i8 %3107, i8* %42, align 1, !tbaa !2432
  %3108 = trunc i64 %3103 to i32
  %3109 = and i32 %3108, 255
  %3110 = tail call i32 @llvm.ctpop.i32(i32 %3109) #9
  %3111 = trunc i32 %3110 to i8
  %3112 = and i8 %3111, 1
  %3113 = xor i8 %3112, 1
  store i8 %3113, i8* %49, align 1, !tbaa !2446
  %3114 = xor i64 %3101, %3095
  %3115 = xor i64 %3114, %3103
  %3116 = lshr i64 %3115, 4
  %3117 = trunc i64 %3116 to i8
  %3118 = and i8 %3117, 1
  store i8 %3118, i8* %55, align 1, !tbaa !2450
  %3119 = icmp eq i64 %3103, 0
  %3120 = zext i1 %3119 to i8
  store i8 %3120, i8* %58, align 1, !tbaa !2447
  %3121 = lshr i64 %3103, 63
  %3122 = trunc i64 %3121 to i8
  store i8 %3122, i8* %61, align 1, !tbaa !2448
  %3123 = lshr i64 %3095, 63
  %3124 = xor i64 %3121, %3123
  %3125 = xor i64 %3121, %3102
  %3126 = add nuw nsw i64 %3124, %3125
  %3127 = icmp eq i64 %3126, 2
  %3128 = zext i1 %3127 to i8
  store i8 %3128, i8* %67, align 1, !tbaa !2449
  %3129 = load i64, i64* %RBP, align 8
  %3130 = add i64 %3129, -52
  %3131 = add i64 %3064, 60
  store i64 %3131, i64* %PC, align 8
  %3132 = inttoptr i64 %3130 to i32*
  %3133 = load i32, i32* %3132, align 4
  %3134 = sext i32 %3133 to i64
  %3135 = mul nsw i64 %3134, 520
  store i64 %3135, i64* %RCX, align 8, !tbaa !2428
  %3136 = lshr i64 %3135, 63
  %3137 = add i64 %3135, %3103
  store i64 %3137, i64* %RAX, align 8, !tbaa !2428
  %3138 = icmp ult i64 %3137, %3103
  %3139 = icmp ult i64 %3137, %3135
  %3140 = or i1 %3138, %3139
  %3141 = zext i1 %3140 to i8
  store i8 %3141, i8* %42, align 1, !tbaa !2432
  %3142 = trunc i64 %3137 to i32
  %3143 = and i32 %3142, 255
  %3144 = tail call i32 @llvm.ctpop.i32(i32 %3143) #9
  %3145 = trunc i32 %3144 to i8
  %3146 = and i8 %3145, 1
  %3147 = xor i8 %3146, 1
  store i8 %3147, i8* %49, align 1, !tbaa !2446
  %3148 = xor i64 %3135, %3103
  %3149 = xor i64 %3148, %3137
  %3150 = lshr i64 %3149, 4
  %3151 = trunc i64 %3150 to i8
  %3152 = and i8 %3151, 1
  store i8 %3152, i8* %55, align 1, !tbaa !2450
  %3153 = icmp eq i64 %3137, 0
  %3154 = zext i1 %3153 to i8
  store i8 %3154, i8* %58, align 1, !tbaa !2447
  %3155 = lshr i64 %3137, 63
  %3156 = trunc i64 %3155 to i8
  store i8 %3156, i8* %61, align 1, !tbaa !2448
  %3157 = xor i64 %3155, %3121
  %3158 = xor i64 %3155, %3136
  %3159 = add nuw nsw i64 %3157, %3158
  %3160 = icmp eq i64 %3159, 2
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %67, align 1, !tbaa !2449
  %3162 = add i64 %3129, -48
  %3163 = add i64 %3064, 74
  store i64 %3163, i64* %PC, align 8
  %3164 = inttoptr i64 %3162 to i32*
  %3165 = load i32, i32* %3164, align 4
  %3166 = sext i32 %3165 to i64
  store i64 %3166, i64* %RCX, align 8, !tbaa !2428
  %3167 = shl nsw i64 %3166, 3
  %3168 = add i64 %3167, %3137
  %3169 = add i64 %3064, 79
  store i64 %3169, i64* %PC, align 8
  %3170 = load double, double* %257, align 1
  %3171 = inttoptr i64 %3168 to double*
  %3172 = load double, double* %3171, align 8
  %3173 = fmul double %3170, %3172
  store double %3173, double* %257, align 1, !tbaa !2452
  %3174 = add i64 %3129, -64
  %3175 = add i64 %3064, 84
  store i64 %3175, i64* %PC, align 8
  %3176 = inttoptr i64 %3174 to i64*
  %3177 = load i64, i64* %3176, align 8
  store i64 %3177, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %3178 = add i64 %3129, -152
  %3179 = add i64 %3064, 91
  store i64 %3179, i64* %PC, align 8
  %3180 = inttoptr i64 %3178 to i64*
  %3181 = load i64, i64* %3180, align 8
  store i64 %3181, i64* %RAX, align 8, !tbaa !2428
  %3182 = add i64 %3129, -188
  %3183 = add i64 %3064, 98
  store i64 %3183, i64* %PC, align 8
  %3184 = inttoptr i64 %3182 to i32*
  %3185 = load i32, i32* %3184, align 4
  %3186 = sext i32 %3185 to i64
  store i64 %3186, i64* %RCX, align 8, !tbaa !2428
  %3187 = shl nsw i64 %3186, 3
  %3188 = add i64 %3187, %3181
  %3189 = add i64 %3064, 103
  store i64 %3189, i64* %PC, align 8
  %3190 = bitcast i64 %3177 to double
  %3191 = inttoptr i64 %3188 to double*
  %3192 = load double, double* %3191, align 8
  %3193 = fmul double %3190, %3192
  store double %3193, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3194 = load i64, i64* %RBP, align 8
  %3195 = add i64 %3194, -168
  %3196 = add i64 %3064, 110
  store i64 %3196, i64* %PC, align 8
  %3197 = inttoptr i64 %3195 to i64*
  %3198 = load i64, i64* %3197, align 8
  store i64 %3198, i64* %RAX, align 8, !tbaa !2428
  %3199 = add i64 %3194, -48
  %3200 = add i64 %3064, 114
  store i64 %3200, i64* %PC, align 8
  %3201 = inttoptr i64 %3199 to i32*
  %3202 = load i32, i32* %3201, align 4
  %3203 = sext i32 %3202 to i64
  store i64 %3203, i64* %RCX, align 8, !tbaa !2428
  %3204 = shl nsw i64 %3203, 3
  %3205 = add i64 %3204, %3198
  %3206 = add i64 %3064, 119
  store i64 %3206, i64* %PC, align 8
  %3207 = inttoptr i64 %3205 to double*
  %3208 = load double, double* %3207, align 8
  %3209 = fdiv double %3193, %3208
  store double %3209, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3210 = add i64 %3194, -104
  %3211 = add i64 %3064, 123
  store i64 %3211, i64* %PC, align 8
  %3212 = inttoptr i64 %3210 to i64*
  %3213 = load i64, i64* %3212, align 8
  store i64 %3213, i64* %RAX, align 8, !tbaa !2428
  %3214 = add i64 %3194, -188
  %3215 = add i64 %3064, 130
  store i64 %3215, i64* %PC, align 8
  %3216 = inttoptr i64 %3214 to i32*
  %3217 = load i32, i32* %3216, align 4
  %3218 = sext i32 %3217 to i64
  %3219 = mul nsw i64 %3218, 520
  store i64 %3219, i64* %RCX, align 8, !tbaa !2428
  %3220 = lshr i64 %3219, 63
  %3221 = add i64 %3219, %3213
  store i64 %3221, i64* %RAX, align 8, !tbaa !2428
  %3222 = icmp ult i64 %3221, %3213
  %3223 = icmp ult i64 %3221, %3219
  %3224 = or i1 %3222, %3223
  %3225 = zext i1 %3224 to i8
  store i8 %3225, i8* %42, align 1, !tbaa !2432
  %3226 = trunc i64 %3221 to i32
  %3227 = and i32 %3226, 255
  %3228 = tail call i32 @llvm.ctpop.i32(i32 %3227) #9
  %3229 = trunc i32 %3228 to i8
  %3230 = and i8 %3229, 1
  %3231 = xor i8 %3230, 1
  store i8 %3231, i8* %49, align 1, !tbaa !2446
  %3232 = xor i64 %3219, %3213
  %3233 = xor i64 %3232, %3221
  %3234 = lshr i64 %3233, 4
  %3235 = trunc i64 %3234 to i8
  %3236 = and i8 %3235, 1
  store i8 %3236, i8* %55, align 1, !tbaa !2450
  %3237 = icmp eq i64 %3221, 0
  %3238 = zext i1 %3237 to i8
  store i8 %3238, i8* %58, align 1, !tbaa !2447
  %3239 = lshr i64 %3221, 63
  %3240 = trunc i64 %3239 to i8
  store i8 %3240, i8* %61, align 1, !tbaa !2448
  %3241 = lshr i64 %3213, 63
  %3242 = xor i64 %3239, %3241
  %3243 = xor i64 %3239, %3220
  %3244 = add nuw nsw i64 %3242, %3243
  %3245 = icmp eq i64 %3244, 2
  %3246 = zext i1 %3245 to i8
  store i8 %3246, i8* %67, align 1, !tbaa !2449
  %3247 = add i64 %3194, -192
  %3248 = add i64 %3064, 147
  store i64 %3248, i64* %PC, align 8
  %3249 = inttoptr i64 %3247 to i32*
  %3250 = load i32, i32* %3249, align 4
  %3251 = sext i32 %3250 to i64
  store i64 %3251, i64* %RCX, align 8, !tbaa !2428
  %3252 = shl nsw i64 %3251, 3
  %3253 = add i64 %3252, %3221
  %3254 = add i64 %3064, 152
  store i64 %3254, i64* %PC, align 8
  %3255 = inttoptr i64 %3253 to double*
  %3256 = load double, double* %3255, align 8
  %3257 = fmul double %3209, %3256
  store double %3257, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3258 = load double, double* %257, align 1
  %3259 = fadd double %3258, %3257
  store double %3259, double* %257, align 1, !tbaa !2452
  %3260 = load i64, i64* %RBP, align 8
  %3261 = add i64 %3260, -64
  %3262 = add i64 %3064, 161
  store i64 %3262, i64* %PC, align 8
  %3263 = inttoptr i64 %3261 to i64*
  %3264 = load i64, i64* %3263, align 8
  store i64 %3264, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %3265 = add i64 %3260, -144
  %3266 = add i64 %3064, 168
  store i64 %3266, i64* %PC, align 8
  %3267 = inttoptr i64 %3265 to i64*
  %3268 = load i64, i64* %3267, align 8
  store i64 %3268, i64* %RAX, align 8, !tbaa !2428
  %3269 = add i64 %3260, -188
  %3270 = add i64 %3064, 175
  store i64 %3270, i64* %PC, align 8
  %3271 = inttoptr i64 %3269 to i32*
  %3272 = load i32, i32* %3271, align 4
  %3273 = sext i32 %3272 to i64
  store i64 %3273, i64* %RCX, align 8, !tbaa !2428
  %3274 = shl nsw i64 %3273, 3
  %3275 = add i64 %3274, %3268
  %3276 = add i64 %3064, 180
  store i64 %3276, i64* %PC, align 8
  %3277 = bitcast i64 %3264 to double
  %3278 = inttoptr i64 %3275 to double*
  %3279 = load double, double* %3278, align 8
  %3280 = fmul double %3277, %3279
  store double %3280, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3281 = add i64 %3260, -168
  %3282 = add i64 %3064, 187
  store i64 %3282, i64* %PC, align 8
  %3283 = inttoptr i64 %3281 to i64*
  %3284 = load i64, i64* %3283, align 8
  store i64 %3284, i64* %RAX, align 8, !tbaa !2428
  %3285 = add i64 %3260, -48
  %3286 = add i64 %3064, 191
  store i64 %3286, i64* %PC, align 8
  %3287 = inttoptr i64 %3285 to i32*
  %3288 = load i32, i32* %3287, align 4
  %3289 = sext i32 %3288 to i64
  store i64 %3289, i64* %RCX, align 8, !tbaa !2428
  %3290 = shl nsw i64 %3289, 3
  %3291 = add i64 %3290, %3284
  %3292 = add i64 %3064, 196
  store i64 %3292, i64* %PC, align 8
  %3293 = inttoptr i64 %3291 to double*
  %3294 = load double, double* %3293, align 8
  %3295 = fdiv double %3280, %3294
  store double %3295, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %3296 = add i64 %3260, -112
  %3297 = add i64 %3064, 200
  store i64 %3297, i64* %PC, align 8
  %3298 = inttoptr i64 %3296 to i64*
  %3299 = load i64, i64* %3298, align 8
  store i64 %3299, i64* %RAX, align 8, !tbaa !2428
  %3300 = add i64 %3064, 207
  store i64 %3300, i64* %PC, align 8
  %3301 = load i32, i32* %3271, align 4
  %3302 = sext i32 %3301 to i64
  %3303 = mul nsw i64 %3302, 33800
  store i64 %3303, i64* %RCX, align 8, !tbaa !2428
  %3304 = lshr i64 %3303, 63
  %3305 = add i64 %3303, %3299
  store i64 %3305, i64* %RAX, align 8, !tbaa !2428
  %3306 = icmp ult i64 %3305, %3299
  %3307 = icmp ult i64 %3305, %3303
  %3308 = or i1 %3306, %3307
  %3309 = zext i1 %3308 to i8
  store i8 %3309, i8* %42, align 1, !tbaa !2432
  %3310 = trunc i64 %3305 to i32
  %3311 = and i32 %3310, 255
  %3312 = tail call i32 @llvm.ctpop.i32(i32 %3311) #9
  %3313 = trunc i32 %3312 to i8
  %3314 = and i8 %3313, 1
  %3315 = xor i8 %3314, 1
  store i8 %3315, i8* %49, align 1, !tbaa !2446
  %3316 = xor i64 %3303, %3299
  %3317 = xor i64 %3316, %3305
  %3318 = lshr i64 %3317, 4
  %3319 = trunc i64 %3318 to i8
  %3320 = and i8 %3319, 1
  store i8 %3320, i8* %55, align 1, !tbaa !2450
  %3321 = icmp eq i64 %3305, 0
  %3322 = zext i1 %3321 to i8
  store i8 %3322, i8* %58, align 1, !tbaa !2447
  %3323 = lshr i64 %3305, 63
  %3324 = trunc i64 %3323 to i8
  store i8 %3324, i8* %61, align 1, !tbaa !2448
  %3325 = lshr i64 %3299, 63
  %3326 = xor i64 %3323, %3325
  %3327 = xor i64 %3323, %3304
  %3328 = add nuw nsw i64 %3326, %3327
  %3329 = icmp eq i64 %3328, 2
  %3330 = zext i1 %3329 to i8
  store i8 %3330, i8* %67, align 1, !tbaa !2449
  %3331 = load i64, i64* %RBP, align 8
  %3332 = add i64 %3331, -52
  %3333 = add i64 %3064, 221
  store i64 %3333, i64* %PC, align 8
  %3334 = inttoptr i64 %3332 to i32*
  %3335 = load i32, i32* %3334, align 4
  %3336 = sext i32 %3335 to i64
  %3337 = mul nsw i64 %3336, 520
  store i64 %3337, i64* %RCX, align 8, !tbaa !2428
  %3338 = lshr i64 %3337, 63
  %3339 = add i64 %3337, %3305
  store i64 %3339, i64* %RAX, align 8, !tbaa !2428
  %3340 = icmp ult i64 %3339, %3305
  %3341 = icmp ult i64 %3339, %3337
  %3342 = or i1 %3340, %3341
  %3343 = zext i1 %3342 to i8
  store i8 %3343, i8* %42, align 1, !tbaa !2432
  %3344 = trunc i64 %3339 to i32
  %3345 = and i32 %3344, 255
  %3346 = tail call i32 @llvm.ctpop.i32(i32 %3345) #9
  %3347 = trunc i32 %3346 to i8
  %3348 = and i8 %3347, 1
  %3349 = xor i8 %3348, 1
  store i8 %3349, i8* %49, align 1, !tbaa !2446
  %3350 = xor i64 %3337, %3305
  %3351 = xor i64 %3350, %3339
  %3352 = lshr i64 %3351, 4
  %3353 = trunc i64 %3352 to i8
  %3354 = and i8 %3353, 1
  store i8 %3354, i8* %55, align 1, !tbaa !2450
  %3355 = icmp eq i64 %3339, 0
  %3356 = zext i1 %3355 to i8
  store i8 %3356, i8* %58, align 1, !tbaa !2447
  %3357 = lshr i64 %3339, 63
  %3358 = trunc i64 %3357 to i8
  store i8 %3358, i8* %61, align 1, !tbaa !2448
  %3359 = xor i64 %3357, %3323
  %3360 = xor i64 %3357, %3338
  %3361 = add nuw nsw i64 %3359, %3360
  %3362 = icmp eq i64 %3361, 2
  %3363 = zext i1 %3362 to i8
  store i8 %3363, i8* %67, align 1, !tbaa !2449
  %3364 = add i64 %3331, -48
  %3365 = add i64 %3064, 235
  store i64 %3365, i64* %PC, align 8
  %3366 = inttoptr i64 %3364 to i32*
  %3367 = load i32, i32* %3366, align 4
  %3368 = sext i32 %3367 to i64
  store i64 %3368, i64* %RCX, align 8, !tbaa !2428
  %3369 = shl nsw i64 %3368, 3
  %3370 = add i64 %3369, %3339
  %3371 = add i64 %3064, 240
  store i64 %3371, i64* %PC, align 8
  %3372 = load double, double* %155, align 1
  %3373 = inttoptr i64 %3370 to double*
  %3374 = load double, double* %3373, align 8
  %3375 = fmul double %3372, %3374
  store double %3375, double* %155, align 1, !tbaa !2452
  %3376 = load double, double* %257, align 1
  %3377 = fsub double %3376, %3375
  store double %3377, double* %257, align 1, !tbaa !2452
  %3378 = add i64 %3331, -136
  %3379 = add i64 %3064, 251
  store i64 %3379, i64* %PC, align 8
  %3380 = inttoptr i64 %3378 to i64*
  %3381 = load i64, i64* %3380, align 8
  store i64 %3381, i64* %RAX, align 8, !tbaa !2428
  %3382 = add i64 %3331, -188
  %3383 = add i64 %3064, 258
  store i64 %3383, i64* %PC, align 8
  %3384 = inttoptr i64 %3382 to i32*
  %3385 = load i32, i32* %3384, align 4
  %3386 = sext i32 %3385 to i64
  %3387 = mul nsw i64 %3386, 33800
  store i64 %3387, i64* %RCX, align 8, !tbaa !2428
  %3388 = lshr i64 %3387, 63
  %3389 = add i64 %3387, %3381
  store i64 %3389, i64* %RAX, align 8, !tbaa !2428
  %3390 = icmp ult i64 %3389, %3381
  %3391 = icmp ult i64 %3389, %3387
  %3392 = or i1 %3390, %3391
  %3393 = zext i1 %3392 to i8
  store i8 %3393, i8* %42, align 1, !tbaa !2432
  %3394 = trunc i64 %3389 to i32
  %3395 = and i32 %3394, 255
  %3396 = tail call i32 @llvm.ctpop.i32(i32 %3395) #9
  %3397 = trunc i32 %3396 to i8
  %3398 = and i8 %3397, 1
  %3399 = xor i8 %3398, 1
  store i8 %3399, i8* %49, align 1, !tbaa !2446
  %3400 = xor i64 %3387, %3381
  %3401 = xor i64 %3400, %3389
  %3402 = lshr i64 %3401, 4
  %3403 = trunc i64 %3402 to i8
  %3404 = and i8 %3403, 1
  store i8 %3404, i8* %55, align 1, !tbaa !2450
  %3405 = icmp eq i64 %3389, 0
  %3406 = zext i1 %3405 to i8
  store i8 %3406, i8* %58, align 1, !tbaa !2447
  %3407 = lshr i64 %3389, 63
  %3408 = trunc i64 %3407 to i8
  store i8 %3408, i8* %61, align 1, !tbaa !2448
  %3409 = lshr i64 %3381, 63
  %3410 = xor i64 %3407, %3409
  %3411 = xor i64 %3407, %3388
  %3412 = add nuw nsw i64 %3410, %3411
  %3413 = icmp eq i64 %3412, 2
  %3414 = zext i1 %3413 to i8
  store i8 %3414, i8* %67, align 1, !tbaa !2449
  %3415 = load i64, i64* %RBP, align 8
  %3416 = add i64 %3415, -52
  %3417 = add i64 %3064, 272
  store i64 %3417, i64* %PC, align 8
  %3418 = inttoptr i64 %3416 to i32*
  %3419 = load i32, i32* %3418, align 4
  %3420 = sext i32 %3419 to i64
  %3421 = mul nsw i64 %3420, 520
  store i64 %3421, i64* %RCX, align 8, !tbaa !2428
  %3422 = lshr i64 %3421, 63
  %3423 = add i64 %3421, %3389
  store i64 %3423, i64* %RAX, align 8, !tbaa !2428
  %3424 = icmp ult i64 %3423, %3389
  %3425 = icmp ult i64 %3423, %3421
  %3426 = or i1 %3424, %3425
  %3427 = zext i1 %3426 to i8
  store i8 %3427, i8* %42, align 1, !tbaa !2432
  %3428 = trunc i64 %3423 to i32
  %3429 = and i32 %3428, 255
  %3430 = tail call i32 @llvm.ctpop.i32(i32 %3429) #9
  %3431 = trunc i32 %3430 to i8
  %3432 = and i8 %3431, 1
  %3433 = xor i8 %3432, 1
  store i8 %3433, i8* %49, align 1, !tbaa !2446
  %3434 = xor i64 %3421, %3389
  %3435 = xor i64 %3434, %3423
  %3436 = lshr i64 %3435, 4
  %3437 = trunc i64 %3436 to i8
  %3438 = and i8 %3437, 1
  store i8 %3438, i8* %55, align 1, !tbaa !2450
  %3439 = icmp eq i64 %3423, 0
  %3440 = zext i1 %3439 to i8
  store i8 %3440, i8* %58, align 1, !tbaa !2447
  %3441 = lshr i64 %3423, 63
  %3442 = trunc i64 %3441 to i8
  store i8 %3442, i8* %61, align 1, !tbaa !2448
  %3443 = xor i64 %3441, %3407
  %3444 = xor i64 %3441, %3422
  %3445 = add nuw nsw i64 %3443, %3444
  %3446 = icmp eq i64 %3445, 2
  %3447 = zext i1 %3446 to i8
  store i8 %3447, i8* %67, align 1, !tbaa !2449
  %3448 = add i64 %3415, -48
  %3449 = add i64 %3064, 286
  store i64 %3449, i64* %PC, align 8
  %3450 = inttoptr i64 %3448 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = sext i32 %3451 to i64
  store i64 %3452, i64* %RCX, align 8, !tbaa !2428
  %3453 = shl nsw i64 %3452, 3
  %3454 = add i64 %3453, %3423
  %3455 = add i64 %3064, 291
  store i64 %3455, i64* %PC, align 8
  %3456 = load i64, i64* %148, align 1
  %3457 = inttoptr i64 %3454 to i64*
  store i64 %3456, i64* %3457, align 8
  %3458 = load i64, i64* %RBP, align 8
  %3459 = add i64 %3458, -104
  %3460 = load i64, i64* %PC, align 8
  %3461 = add i64 %3460, 4
  store i64 %3461, i64* %PC, align 8
  %3462 = inttoptr i64 %3459 to i64*
  %3463 = load i64, i64* %3462, align 8
  store i64 %3463, i64* %RAX, align 8, !tbaa !2428
  %3464 = add i64 %3458, -188
  %3465 = add i64 %3460, 11
  store i64 %3465, i64* %PC, align 8
  %3466 = inttoptr i64 %3464 to i32*
  %3467 = load i32, i32* %3466, align 4
  %3468 = sext i32 %3467 to i64
  %3469 = mul nsw i64 %3468, 520
  store i64 %3469, i64* %RCX, align 8, !tbaa !2428
  %3470 = lshr i64 %3469, 63
  %3471 = add i64 %3469, %3463
  store i64 %3471, i64* %RAX, align 8, !tbaa !2428
  %3472 = icmp ult i64 %3471, %3463
  %3473 = icmp ult i64 %3471, %3469
  %3474 = or i1 %3472, %3473
  %3475 = zext i1 %3474 to i8
  store i8 %3475, i8* %42, align 1, !tbaa !2432
  %3476 = trunc i64 %3471 to i32
  %3477 = and i32 %3476, 255
  %3478 = tail call i32 @llvm.ctpop.i32(i32 %3477) #9
  %3479 = trunc i32 %3478 to i8
  %3480 = and i8 %3479, 1
  %3481 = xor i8 %3480, 1
  store i8 %3481, i8* %49, align 1, !tbaa !2446
  %3482 = xor i64 %3469, %3463
  %3483 = xor i64 %3482, %3471
  %3484 = lshr i64 %3483, 4
  %3485 = trunc i64 %3484 to i8
  %3486 = and i8 %3485, 1
  store i8 %3486, i8* %55, align 1, !tbaa !2450
  %3487 = icmp eq i64 %3471, 0
  %3488 = zext i1 %3487 to i8
  store i8 %3488, i8* %58, align 1, !tbaa !2447
  %3489 = lshr i64 %3471, 63
  %3490 = trunc i64 %3489 to i8
  store i8 %3490, i8* %61, align 1, !tbaa !2448
  %3491 = lshr i64 %3463, 63
  %3492 = xor i64 %3489, %3491
  %3493 = xor i64 %3489, %3470
  %3494 = add nuw nsw i64 %3492, %3493
  %3495 = icmp eq i64 %3494, 2
  %3496 = zext i1 %3495 to i8
  store i8 %3496, i8* %67, align 1, !tbaa !2449
  %3497 = add i64 %3458, -192
  %3498 = add i64 %3460, 28
  store i64 %3498, i64* %PC, align 8
  %3499 = inttoptr i64 %3497 to i32*
  %3500 = load i32, i32* %3499, align 4
  %3501 = sext i32 %3500 to i64
  store i64 %3501, i64* %RCX, align 8, !tbaa !2428
  %3502 = shl nsw i64 %3501, 3
  %3503 = add i64 %3502, %3471
  %3504 = add i64 %3460, 33
  store i64 %3504, i64* %PC, align 8
  %3505 = inttoptr i64 %3503 to i64*
  %3506 = load i64, i64* %3505, align 8
  store i64 %3506, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3507 = add i64 %3458, -112
  %3508 = add i64 %3460, 37
  store i64 %3508, i64* %PC, align 8
  %3509 = inttoptr i64 %3507 to i64*
  %3510 = load i64, i64* %3509, align 8
  store i64 %3510, i64* %RAX, align 8, !tbaa !2428
  %3511 = add i64 %3460, 44
  store i64 %3511, i64* %PC, align 8
  %3512 = load i32, i32* %3466, align 4
  %3513 = sext i32 %3512 to i64
  %3514 = mul nsw i64 %3513, 33800
  store i64 %3514, i64* %RCX, align 8, !tbaa !2428
  %3515 = lshr i64 %3514, 63
  %3516 = add i64 %3514, %3510
  store i64 %3516, i64* %RAX, align 8, !tbaa !2428
  %3517 = icmp ult i64 %3516, %3510
  %3518 = icmp ult i64 %3516, %3514
  %3519 = or i1 %3517, %3518
  %3520 = zext i1 %3519 to i8
  store i8 %3520, i8* %42, align 1, !tbaa !2432
  %3521 = trunc i64 %3516 to i32
  %3522 = and i32 %3521, 255
  %3523 = tail call i32 @llvm.ctpop.i32(i32 %3522) #9
  %3524 = trunc i32 %3523 to i8
  %3525 = and i8 %3524, 1
  %3526 = xor i8 %3525, 1
  store i8 %3526, i8* %49, align 1, !tbaa !2446
  %3527 = xor i64 %3514, %3510
  %3528 = xor i64 %3527, %3516
  %3529 = lshr i64 %3528, 4
  %3530 = trunc i64 %3529 to i8
  %3531 = and i8 %3530, 1
  store i8 %3531, i8* %55, align 1, !tbaa !2450
  %3532 = icmp eq i64 %3516, 0
  %3533 = zext i1 %3532 to i8
  store i8 %3533, i8* %58, align 1, !tbaa !2447
  %3534 = lshr i64 %3516, 63
  %3535 = trunc i64 %3534 to i8
  store i8 %3535, i8* %61, align 1, !tbaa !2448
  %3536 = lshr i64 %3510, 63
  %3537 = xor i64 %3534, %3536
  %3538 = xor i64 %3534, %3515
  %3539 = add nuw nsw i64 %3537, %3538
  %3540 = icmp eq i64 %3539, 2
  %3541 = zext i1 %3540 to i8
  store i8 %3541, i8* %67, align 1, !tbaa !2449
  %3542 = load i64, i64* %RBP, align 8
  %3543 = add i64 %3542, -52
  %3544 = add i64 %3460, 58
  store i64 %3544, i64* %PC, align 8
  %3545 = inttoptr i64 %3543 to i32*
  %3546 = load i32, i32* %3545, align 4
  %3547 = sext i32 %3546 to i64
  %3548 = mul nsw i64 %3547, 520
  store i64 %3548, i64* %RCX, align 8, !tbaa !2428
  %3549 = lshr i64 %3548, 63
  %3550 = add i64 %3548, %3516
  store i64 %3550, i64* %RAX, align 8, !tbaa !2428
  %3551 = icmp ult i64 %3550, %3516
  %3552 = icmp ult i64 %3550, %3548
  %3553 = or i1 %3551, %3552
  %3554 = zext i1 %3553 to i8
  store i8 %3554, i8* %42, align 1, !tbaa !2432
  %3555 = trunc i64 %3550 to i32
  %3556 = and i32 %3555, 255
  %3557 = tail call i32 @llvm.ctpop.i32(i32 %3556) #9
  %3558 = trunc i32 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = xor i8 %3559, 1
  store i8 %3560, i8* %49, align 1, !tbaa !2446
  %3561 = xor i64 %3548, %3516
  %3562 = xor i64 %3561, %3550
  %3563 = lshr i64 %3562, 4
  %3564 = trunc i64 %3563 to i8
  %3565 = and i8 %3564, 1
  store i8 %3565, i8* %55, align 1, !tbaa !2450
  %3566 = icmp eq i64 %3550, 0
  %3567 = zext i1 %3566 to i8
  store i8 %3567, i8* %58, align 1, !tbaa !2447
  %3568 = lshr i64 %3550, 63
  %3569 = trunc i64 %3568 to i8
  store i8 %3569, i8* %61, align 1, !tbaa !2448
  %3570 = xor i64 %3568, %3534
  %3571 = xor i64 %3568, %3549
  %3572 = add nuw nsw i64 %3570, %3571
  %3573 = icmp eq i64 %3572, 2
  %3574 = zext i1 %3573 to i8
  store i8 %3574, i8* %67, align 1, !tbaa !2449
  %3575 = add i64 %3542, -48
  %3576 = add i64 %3460, 72
  store i64 %3576, i64* %PC, align 8
  %3577 = inttoptr i64 %3575 to i32*
  %3578 = load i32, i32* %3577, align 4
  %3579 = sext i32 %3578 to i64
  store i64 %3579, i64* %RCX, align 8, !tbaa !2428
  %3580 = shl nsw i64 %3579, 3
  %3581 = add i64 %3580, %3550
  %3582 = add i64 %3460, 77
  store i64 %3582, i64* %PC, align 8
  %3583 = load i64, i64* %148, align 1
  %3584 = inttoptr i64 %3581 to i64*
  store i64 %3583, i64* %3584, align 8
  %3585 = load i64, i64* %RBP, align 8
  %3586 = add i64 %3585, -192
  %3587 = load i64, i64* %PC, align 8
  %3588 = add i64 %3587, 6
  store i64 %3588, i64* %PC, align 8
  %3589 = inttoptr i64 %3586 to i32*
  %3590 = load i32, i32* %3589, align 4
  %3591 = add i32 %3590, 1
  %3592 = zext i32 %3591 to i64
  store i64 %3592, i64* %RAX, align 8, !tbaa !2428
  %3593 = icmp eq i32 %3590, -1
  %3594 = icmp eq i32 %3591, 0
  %3595 = or i1 %3593, %3594
  %3596 = zext i1 %3595 to i8
  store i8 %3596, i8* %42, align 1, !tbaa !2432
  %3597 = and i32 %3591, 255
  %3598 = tail call i32 @llvm.ctpop.i32(i32 %3597) #9
  %3599 = trunc i32 %3598 to i8
  %3600 = and i8 %3599, 1
  %3601 = xor i8 %3600, 1
  store i8 %3601, i8* %49, align 1, !tbaa !2446
  %3602 = xor i32 %3591, %3590
  %3603 = lshr i32 %3602, 4
  %3604 = trunc i32 %3603 to i8
  %3605 = and i8 %3604, 1
  store i8 %3605, i8* %55, align 1, !tbaa !2450
  %3606 = zext i1 %3594 to i8
  store i8 %3606, i8* %58, align 1, !tbaa !2447
  %3607 = lshr i32 %3591, 31
  %3608 = trunc i32 %3607 to i8
  store i8 %3608, i8* %61, align 1, !tbaa !2448
  %3609 = lshr i32 %3590, 31
  %3610 = xor i32 %3607, %3609
  %3611 = add nuw nsw i32 %3610, %3607
  %3612 = icmp eq i32 %3611, 2
  %3613 = zext i1 %3612 to i8
  store i8 %3613, i8* %67, align 1, !tbaa !2449
  %3614 = add i64 %3587, 15
  store i64 %3614, i64* %PC, align 8
  store i32 %3591, i32* %3589, align 4
  %3615 = load i64, i64* %PC, align 8
  %3616 = add i64 %3615, -3219
  store i64 %3616, i64* %PC, align 8, !tbaa !2428
  br label %block_40159a

block_4015c2:                                     ; preds = %block_4015b3
  %3617 = add i64 %1402, -196
  %3618 = add i64 %1364, 45
  store i64 %3618, i64* %PC, align 8
  %3619 = inttoptr i64 %3617 to i32*
  %3620 = load i32, i32* %3619, align 4
  %3621 = sext i32 %3620 to i64
  store i64 %3621, i64* %RCX, align 8, !tbaa !2428
  %3622 = shl nsw i64 %3621, 3
  %3623 = add i64 %3622, %1411
  %3624 = add i64 %1364, 50
  store i64 %3624, i64* %PC, align 8
  %3625 = inttoptr i64 %3623 to i64*
  %3626 = load i64, i64* %3625, align 8
  store i64 %3626, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3627 = add i64 %1402, -120
  %3628 = add i64 %1364, 54
  store i64 %3628, i64* %PC, align 8
  %3629 = inttoptr i64 %3627 to i64*
  %3630 = load i64, i64* %3629, align 8
  store i64 %3630, i64* %RAX, align 8, !tbaa !2428
  %3631 = add i64 %1402, -188
  %3632 = add i64 %1364, 61
  store i64 %3632, i64* %PC, align 8
  %3633 = inttoptr i64 %3631 to i32*
  %3634 = load i32, i32* %3633, align 4
  %3635 = sext i32 %3634 to i64
  %3636 = mul nsw i64 %3635, 33800
  store i64 %3636, i64* %RCX, align 8, !tbaa !2428
  %3637 = lshr i64 %3636, 63
  %3638 = add i64 %3636, %3630
  store i64 %3638, i64* %RAX, align 8, !tbaa !2428
  %3639 = icmp ult i64 %3638, %3630
  %3640 = icmp ult i64 %3638, %3636
  %3641 = or i1 %3639, %3640
  %3642 = zext i1 %3641 to i8
  store i8 %3642, i8* %42, align 1, !tbaa !2432
  %3643 = trunc i64 %3638 to i32
  %3644 = and i32 %3643, 255
  %3645 = tail call i32 @llvm.ctpop.i32(i32 %3644) #9
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  %3648 = xor i8 %3647, 1
  store i8 %3648, i8* %49, align 1, !tbaa !2446
  %3649 = xor i64 %3636, %3630
  %3650 = xor i64 %3649, %3638
  %3651 = lshr i64 %3650, 4
  %3652 = trunc i64 %3651 to i8
  %3653 = and i8 %3652, 1
  store i8 %3653, i8* %55, align 1, !tbaa !2450
  %3654 = icmp eq i64 %3638, 0
  %3655 = zext i1 %3654 to i8
  store i8 %3655, i8* %58, align 1, !tbaa !2447
  %3656 = lshr i64 %3638, 63
  %3657 = trunc i64 %3656 to i8
  store i8 %3657, i8* %61, align 1, !tbaa !2448
  %3658 = lshr i64 %3630, 63
  %3659 = xor i64 %3656, %3658
  %3660 = xor i64 %3656, %3637
  %3661 = add nuw nsw i64 %3659, %3660
  %3662 = icmp eq i64 %3661, 2
  %3663 = zext i1 %3662 to i8
  store i8 %3663, i8* %67, align 1, !tbaa !2449
  %3664 = add i64 %1364, 77
  store i64 %3664, i64* %PC, align 8
  %3665 = load i32, i32* %1405, align 4
  %3666 = add i32 %3665, 1
  %3667 = zext i32 %3666 to i64
  store i64 %3667, i64* %RDX, align 8, !tbaa !2428
  %3668 = sext i32 %3666 to i64
  %3669 = mul nsw i64 %3668, 520
  store i64 %3669, i64* %RCX, align 8, !tbaa !2428
  %3670 = lshr i64 %3669, 63
  %3671 = load i64, i64* %RAX, align 8
  %3672 = add i64 %3669, %3671
  store i64 %3672, i64* %RAX, align 8, !tbaa !2428
  %3673 = icmp ult i64 %3672, %3671
  %3674 = icmp ult i64 %3672, %3669
  %3675 = or i1 %3673, %3674
  %3676 = zext i1 %3675 to i8
  store i8 %3676, i8* %42, align 1, !tbaa !2432
  %3677 = trunc i64 %3672 to i32
  %3678 = and i32 %3677, 255
  %3679 = tail call i32 @llvm.ctpop.i32(i32 %3678) #9
  %3680 = trunc i32 %3679 to i8
  %3681 = and i8 %3680, 1
  %3682 = xor i8 %3681, 1
  store i8 %3682, i8* %49, align 1, !tbaa !2446
  %3683 = xor i64 %3669, %3671
  %3684 = xor i64 %3683, %3672
  %3685 = lshr i64 %3684, 4
  %3686 = trunc i64 %3685 to i8
  %3687 = and i8 %3686, 1
  store i8 %3687, i8* %55, align 1, !tbaa !2450
  %3688 = icmp eq i64 %3672, 0
  %3689 = zext i1 %3688 to i8
  store i8 %3689, i8* %58, align 1, !tbaa !2447
  %3690 = lshr i64 %3672, 63
  %3691 = trunc i64 %3690 to i8
  store i8 %3691, i8* %61, align 1, !tbaa !2448
  %3692 = lshr i64 %3671, 63
  %3693 = xor i64 %3690, %3692
  %3694 = xor i64 %3690, %3670
  %3695 = add nuw nsw i64 %3693, %3694
  %3696 = icmp eq i64 %3695, 2
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %67, align 1, !tbaa !2449
  %3698 = load i64, i64* %RBP, align 8
  %3699 = add i64 %3698, -196
  %3700 = add i64 %1364, 100
  store i64 %3700, i64* %PC, align 8
  %3701 = inttoptr i64 %3699 to i32*
  %3702 = load i32, i32* %3701, align 4
  %3703 = sext i32 %3702 to i64
  store i64 %3703, i64* %RCX, align 8, !tbaa !2428
  %3704 = shl nsw i64 %3703, 3
  %3705 = add i64 %3704, %3672
  %3706 = add i64 %1364, 105
  store i64 %3706, i64* %PC, align 8
  %3707 = load double, double* %257, align 1
  %3708 = inttoptr i64 %3705 to double*
  %3709 = load double, double* %3708, align 8
  %3710 = fsub double %3707, %3709
  store double %3710, double* %257, align 1, !tbaa !2452
  %3711 = add i64 %3698, -128
  %3712 = add i64 %1364, 109
  store i64 %3712, i64* %PC, align 8
  %3713 = inttoptr i64 %3711 to i64*
  %3714 = load i64, i64* %3713, align 8
  store i64 %3714, i64* %RAX, align 8, !tbaa !2428
  %3715 = add i64 %3698, -188
  %3716 = add i64 %1364, 116
  store i64 %3716, i64* %PC, align 8
  %3717 = inttoptr i64 %3715 to i32*
  %3718 = load i32, i32* %3717, align 4
  %3719 = sext i32 %3718 to i64
  %3720 = mul nsw i64 %3719, 33800
  store i64 %3720, i64* %RCX, align 8, !tbaa !2428
  %3721 = lshr i64 %3720, 63
  %3722 = add i64 %3720, %3714
  store i64 %3722, i64* %RAX, align 8, !tbaa !2428
  %3723 = icmp ult i64 %3722, %3714
  %3724 = icmp ult i64 %3722, %3720
  %3725 = or i1 %3723, %3724
  %3726 = zext i1 %3725 to i8
  store i8 %3726, i8* %42, align 1, !tbaa !2432
  %3727 = trunc i64 %3722 to i32
  %3728 = and i32 %3727, 255
  %3729 = tail call i32 @llvm.ctpop.i32(i32 %3728) #9
  %3730 = trunc i32 %3729 to i8
  %3731 = and i8 %3730, 1
  %3732 = xor i8 %3731, 1
  store i8 %3732, i8* %49, align 1, !tbaa !2446
  %3733 = xor i64 %3720, %3714
  %3734 = xor i64 %3733, %3722
  %3735 = lshr i64 %3734, 4
  %3736 = trunc i64 %3735 to i8
  %3737 = and i8 %3736, 1
  store i8 %3737, i8* %55, align 1, !tbaa !2450
  %3738 = icmp eq i64 %3722, 0
  %3739 = zext i1 %3738 to i8
  store i8 %3739, i8* %58, align 1, !tbaa !2447
  %3740 = lshr i64 %3722, 63
  %3741 = trunc i64 %3740 to i8
  store i8 %3741, i8* %61, align 1, !tbaa !2448
  %3742 = lshr i64 %3714, 63
  %3743 = xor i64 %3740, %3742
  %3744 = xor i64 %3740, %3721
  %3745 = add nuw nsw i64 %3743, %3744
  %3746 = icmp eq i64 %3745, 2
  %3747 = zext i1 %3746 to i8
  store i8 %3747, i8* %67, align 1, !tbaa !2449
  %3748 = add i64 %3698, -192
  %3749 = add i64 %1364, 133
  store i64 %3749, i64* %PC, align 8
  %3750 = inttoptr i64 %3748 to i32*
  %3751 = load i32, i32* %3750, align 4
  %3752 = sext i32 %3751 to i64
  %3753 = mul nsw i64 %3752, 520
  store i64 %3753, i64* %RCX, align 8, !tbaa !2428
  %3754 = lshr i64 %3753, 63
  %3755 = add i64 %3753, %3722
  store i64 %3755, i64* %RAX, align 8, !tbaa !2428
  %3756 = icmp ult i64 %3755, %3722
  %3757 = icmp ult i64 %3755, %3753
  %3758 = or i1 %3756, %3757
  %3759 = zext i1 %3758 to i8
  store i8 %3759, i8* %42, align 1, !tbaa !2432
  %3760 = trunc i64 %3755 to i32
  %3761 = and i32 %3760, 255
  %3762 = tail call i32 @llvm.ctpop.i32(i32 %3761) #9
  %3763 = trunc i32 %3762 to i8
  %3764 = and i8 %3763, 1
  %3765 = xor i8 %3764, 1
  store i8 %3765, i8* %49, align 1, !tbaa !2446
  %3766 = xor i64 %3753, %3722
  %3767 = xor i64 %3766, %3755
  %3768 = lshr i64 %3767, 4
  %3769 = trunc i64 %3768 to i8
  %3770 = and i8 %3769, 1
  store i8 %3770, i8* %55, align 1, !tbaa !2450
  %3771 = icmp eq i64 %3755, 0
  %3772 = zext i1 %3771 to i8
  store i8 %3772, i8* %58, align 1, !tbaa !2447
  %3773 = lshr i64 %3755, 63
  %3774 = trunc i64 %3773 to i8
  store i8 %3774, i8* %61, align 1, !tbaa !2448
  %3775 = xor i64 %3773, %3740
  %3776 = xor i64 %3773, %3754
  %3777 = add nuw nsw i64 %3775, %3776
  %3778 = icmp eq i64 %3777, 2
  %3779 = zext i1 %3778 to i8
  store i8 %3779, i8* %67, align 1, !tbaa !2449
  %3780 = load i64, i64* %RBP, align 8
  %3781 = add i64 %3780, -196
  %3782 = add i64 %1364, 149
  store i64 %3782, i64* %PC, align 8
  %3783 = inttoptr i64 %3781 to i32*
  %3784 = load i32, i32* %3783, align 4
  %3785 = add i32 %3784, 1
  %3786 = zext i32 %3785 to i64
  store i64 %3786, i64* %RDX, align 8, !tbaa !2428
  %3787 = icmp eq i32 %3784, -1
  %3788 = icmp eq i32 %3785, 0
  %3789 = or i1 %3787, %3788
  %3790 = zext i1 %3789 to i8
  store i8 %3790, i8* %42, align 1, !tbaa !2432
  %3791 = and i32 %3785, 255
  %3792 = tail call i32 @llvm.ctpop.i32(i32 %3791) #9
  %3793 = trunc i32 %3792 to i8
  %3794 = and i8 %3793, 1
  %3795 = xor i8 %3794, 1
  store i8 %3795, i8* %49, align 1, !tbaa !2446
  %3796 = xor i32 %3785, %3784
  %3797 = lshr i32 %3796, 4
  %3798 = trunc i32 %3797 to i8
  %3799 = and i8 %3798, 1
  store i8 %3799, i8* %55, align 1, !tbaa !2450
  %3800 = zext i1 %3788 to i8
  store i8 %3800, i8* %58, align 1, !tbaa !2447
  %3801 = lshr i32 %3785, 31
  %3802 = trunc i32 %3801 to i8
  store i8 %3802, i8* %61, align 1, !tbaa !2448
  %3803 = lshr i32 %3784, 31
  %3804 = xor i32 %3801, %3803
  %3805 = add nuw nsw i32 %3804, %3801
  %3806 = icmp eq i32 %3805, 2
  %3807 = zext i1 %3806 to i8
  store i8 %3807, i8* %67, align 1, !tbaa !2449
  %3808 = sext i32 %3785 to i64
  store i64 %3808, i64* %RCX, align 8, !tbaa !2428
  %3809 = shl nsw i64 %3808, 3
  %3810 = add i64 %3755, %3809
  %3811 = add i64 %1364, 160
  store i64 %3811, i64* %PC, align 8
  %3812 = load double, double* %257, align 1
  %3813 = inttoptr i64 %3810 to double*
  %3814 = load double, double* %3813, align 8
  %3815 = fadd double %3812, %3814
  store double %3815, double* %257, align 1, !tbaa !2452
  %3816 = add i64 %3780, -128
  %3817 = add i64 %1364, 164
  store i64 %3817, i64* %PC, align 8
  %3818 = inttoptr i64 %3816 to i64*
  %3819 = load i64, i64* %3818, align 8
  store i64 %3819, i64* %RAX, align 8, !tbaa !2428
  %3820 = add i64 %3780, -188
  %3821 = add i64 %1364, 171
  store i64 %3821, i64* %PC, align 8
  %3822 = inttoptr i64 %3820 to i32*
  %3823 = load i32, i32* %3822, align 4
  %3824 = sext i32 %3823 to i64
  %3825 = mul nsw i64 %3824, 33800
  store i64 %3825, i64* %RCX, align 8, !tbaa !2428
  %3826 = lshr i64 %3825, 63
  %3827 = add i64 %3825, %3819
  store i64 %3827, i64* %RAX, align 8, !tbaa !2428
  %3828 = icmp ult i64 %3827, %3819
  %3829 = icmp ult i64 %3827, %3825
  %3830 = or i1 %3828, %3829
  %3831 = zext i1 %3830 to i8
  store i8 %3831, i8* %42, align 1, !tbaa !2432
  %3832 = trunc i64 %3827 to i32
  %3833 = and i32 %3832, 255
  %3834 = tail call i32 @llvm.ctpop.i32(i32 %3833) #9
  %3835 = trunc i32 %3834 to i8
  %3836 = and i8 %3835, 1
  %3837 = xor i8 %3836, 1
  store i8 %3837, i8* %49, align 1, !tbaa !2446
  %3838 = xor i64 %3825, %3819
  %3839 = xor i64 %3838, %3827
  %3840 = lshr i64 %3839, 4
  %3841 = trunc i64 %3840 to i8
  %3842 = and i8 %3841, 1
  store i8 %3842, i8* %55, align 1, !tbaa !2450
  %3843 = icmp eq i64 %3827, 0
  %3844 = zext i1 %3843 to i8
  store i8 %3844, i8* %58, align 1, !tbaa !2447
  %3845 = lshr i64 %3827, 63
  %3846 = trunc i64 %3845 to i8
  store i8 %3846, i8* %61, align 1, !tbaa !2448
  %3847 = lshr i64 %3819, 63
  %3848 = xor i64 %3845, %3847
  %3849 = xor i64 %3845, %3826
  %3850 = add nuw nsw i64 %3848, %3849
  %3851 = icmp eq i64 %3850, 2
  %3852 = zext i1 %3851 to i8
  store i8 %3852, i8* %67, align 1, !tbaa !2449
  %3853 = load i64, i64* %RBP, align 8
  %3854 = add i64 %3853, -192
  %3855 = add i64 %1364, 188
  store i64 %3855, i64* %PC, align 8
  %3856 = inttoptr i64 %3854 to i32*
  %3857 = load i32, i32* %3856, align 4
  %3858 = sext i32 %3857 to i64
  %3859 = mul nsw i64 %3858, 520
  store i64 %3859, i64* %RCX, align 8, !tbaa !2428
  %3860 = lshr i64 %3859, 63
  %3861 = add i64 %3859, %3827
  store i64 %3861, i64* %RAX, align 8, !tbaa !2428
  %3862 = icmp ult i64 %3861, %3827
  %3863 = icmp ult i64 %3861, %3859
  %3864 = or i1 %3862, %3863
  %3865 = zext i1 %3864 to i8
  store i8 %3865, i8* %42, align 1, !tbaa !2432
  %3866 = trunc i64 %3861 to i32
  %3867 = and i32 %3866, 255
  %3868 = tail call i32 @llvm.ctpop.i32(i32 %3867) #9
  %3869 = trunc i32 %3868 to i8
  %3870 = and i8 %3869, 1
  %3871 = xor i8 %3870, 1
  store i8 %3871, i8* %49, align 1, !tbaa !2446
  %3872 = xor i64 %3859, %3827
  %3873 = xor i64 %3872, %3861
  %3874 = lshr i64 %3873, 4
  %3875 = trunc i64 %3874 to i8
  %3876 = and i8 %3875, 1
  store i8 %3876, i8* %55, align 1, !tbaa !2450
  %3877 = icmp eq i64 %3861, 0
  %3878 = zext i1 %3877 to i8
  store i8 %3878, i8* %58, align 1, !tbaa !2447
  %3879 = lshr i64 %3861, 63
  %3880 = trunc i64 %3879 to i8
  store i8 %3880, i8* %61, align 1, !tbaa !2448
  %3881 = xor i64 %3879, %3845
  %3882 = xor i64 %3879, %3860
  %3883 = add nuw nsw i64 %3881, %3882
  %3884 = icmp eq i64 %3883, 2
  %3885 = zext i1 %3884 to i8
  store i8 %3885, i8* %67, align 1, !tbaa !2449
  %3886 = add i64 %3853, -196
  %3887 = add i64 %1364, 205
  store i64 %3887, i64* %PC, align 8
  %3888 = inttoptr i64 %3886 to i32*
  %3889 = load i32, i32* %3888, align 4
  %3890 = sext i32 %3889 to i64
  store i64 %3890, i64* %RCX, align 8, !tbaa !2428
  %3891 = shl nsw i64 %3890, 3
  %3892 = add i64 %3891, %3861
  %3893 = add i64 %1364, 210
  store i64 %3893, i64* %PC, align 8
  %3894 = load double, double* %257, align 1
  %3895 = inttoptr i64 %3892 to double*
  %3896 = load double, double* %3895, align 8
  %3897 = fsub double %3894, %3896
  store double %3897, double* %257, align 1, !tbaa !2452
  %3898 = add i64 %3853, -96
  %3899 = add i64 %1364, 214
  store i64 %3899, i64* %PC, align 8
  %3900 = inttoptr i64 %3898 to i64*
  %3901 = load i64, i64* %3900, align 8
  store i64 %3901, i64* %RAX, align 8, !tbaa !2428
  %3902 = add i64 %3853, -188
  %3903 = add i64 %1364, 221
  store i64 %3903, i64* %PC, align 8
  %3904 = inttoptr i64 %3902 to i32*
  %3905 = load i32, i32* %3904, align 4
  %3906 = sext i32 %3905 to i64
  %3907 = mul nsw i64 %3906, 520
  store i64 %3907, i64* %RCX, align 8, !tbaa !2428
  %3908 = lshr i64 %3907, 63
  %3909 = add i64 %3907, %3901
  store i64 %3909, i64* %RAX, align 8, !tbaa !2428
  %3910 = icmp ult i64 %3909, %3901
  %3911 = icmp ult i64 %3909, %3907
  %3912 = or i1 %3910, %3911
  %3913 = zext i1 %3912 to i8
  store i8 %3913, i8* %42, align 1, !tbaa !2432
  %3914 = trunc i64 %3909 to i32
  %3915 = and i32 %3914, 255
  %3916 = tail call i32 @llvm.ctpop.i32(i32 %3915) #9
  %3917 = trunc i32 %3916 to i8
  %3918 = and i8 %3917, 1
  %3919 = xor i8 %3918, 1
  store i8 %3919, i8* %49, align 1, !tbaa !2446
  %3920 = xor i64 %3907, %3901
  %3921 = xor i64 %3920, %3909
  %3922 = lshr i64 %3921, 4
  %3923 = trunc i64 %3922 to i8
  %3924 = and i8 %3923, 1
  store i8 %3924, i8* %55, align 1, !tbaa !2450
  %3925 = icmp eq i64 %3909, 0
  %3926 = zext i1 %3925 to i8
  store i8 %3926, i8* %58, align 1, !tbaa !2447
  %3927 = lshr i64 %3909, 63
  %3928 = trunc i64 %3927 to i8
  store i8 %3928, i8* %61, align 1, !tbaa !2448
  %3929 = lshr i64 %3901, 63
  %3930 = xor i64 %3927, %3929
  %3931 = xor i64 %3927, %3908
  %3932 = add nuw nsw i64 %3930, %3931
  %3933 = icmp eq i64 %3932, 2
  %3934 = zext i1 %3933 to i8
  store i8 %3934, i8* %67, align 1, !tbaa !2449
  %3935 = load i64, i64* %RBP, align 8
  %3936 = add i64 %3935, -192
  %3937 = add i64 %1364, 238
  store i64 %3937, i64* %PC, align 8
  %3938 = inttoptr i64 %3936 to i32*
  %3939 = load i32, i32* %3938, align 4
  %3940 = sext i32 %3939 to i64
  store i64 %3940, i64* %RCX, align 8, !tbaa !2428
  %3941 = shl nsw i64 %3940, 3
  %3942 = add i64 %3941, %3909
  %3943 = add i64 %1364, 243
  store i64 %3943, i64* %PC, align 8
  %3944 = inttoptr i64 %3942 to double*
  store double %3897, double* %3944, align 8
  %3945 = load i64, i64* %RBP, align 8
  %3946 = add i64 %3945, -176
  %3947 = load i64, i64* %PC, align 8
  %3948 = add i64 %3947, 7
  store i64 %3948, i64* %PC, align 8
  %3949 = inttoptr i64 %3946 to i64*
  %3950 = load i64, i64* %3949, align 8
  store i64 %3950, i64* %RAX, align 8, !tbaa !2428
  %3951 = add i64 %3945, -192
  %3952 = add i64 %3947, 14
  store i64 %3952, i64* %PC, align 8
  %3953 = inttoptr i64 %3951 to i32*
  %3954 = load i32, i32* %3953, align 4
  %3955 = sext i32 %3954 to i64
  store i64 %3955, i64* %RCX, align 8, !tbaa !2428
  %3956 = shl nsw i64 %3955, 3
  %3957 = add i64 %3956, %3950
  %3958 = add i64 %3947, 19
  store i64 %3958, i64* %PC, align 8
  %3959 = inttoptr i64 %3957 to i64*
  %3960 = load i64, i64* %3959, align 8
  store i64 %3960, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %3961 = add i64 %3945, -184
  %3962 = add i64 %3947, 26
  store i64 %3962, i64* %PC, align 8
  %3963 = inttoptr i64 %3961 to i64*
  %3964 = load i64, i64* %3963, align 8
  store i64 %3964, i64* %RAX, align 8, !tbaa !2428
  %3965 = add i64 %3947, 33
  store i64 %3965, i64* %PC, align 8
  %3966 = load i32, i32* %3953, align 4
  %3967 = sext i32 %3966 to i64
  store i64 %3967, i64* %RCX, align 8, !tbaa !2428
  %3968 = shl nsw i64 %3967, 3
  %3969 = add i64 %3968, %3964
  %3970 = add i64 %3947, 38
  store i64 %3970, i64* %PC, align 8
  %3971 = bitcast i64 %3960 to double
  %3972 = inttoptr i64 %3969 to double*
  %3973 = load double, double* %3972, align 8
  %3974 = fdiv double %3971, %3973
  store double %3974, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %3975 = add i64 %3945, -112
  %3976 = add i64 %3947, 42
  store i64 %3976, i64* %PC, align 8
  %3977 = inttoptr i64 %3975 to i64*
  %3978 = load i64, i64* %3977, align 8
  store i64 %3978, i64* %RAX, align 8, !tbaa !2428
  %3979 = add i64 %3945, -188
  %3980 = add i64 %3947, 49
  store i64 %3980, i64* %PC, align 8
  %3981 = inttoptr i64 %3979 to i32*
  %3982 = load i32, i32* %3981, align 4
  %3983 = sext i32 %3982 to i64
  %3984 = mul nsw i64 %3983, 33800
  store i64 %3984, i64* %RCX, align 8, !tbaa !2428
  %3985 = lshr i64 %3984, 63
  %3986 = add i64 %3984, %3978
  store i64 %3986, i64* %RAX, align 8, !tbaa !2428
  %3987 = icmp ult i64 %3986, %3978
  %3988 = icmp ult i64 %3986, %3984
  %3989 = or i1 %3987, %3988
  %3990 = zext i1 %3989 to i8
  store i8 %3990, i8* %42, align 1, !tbaa !2432
  %3991 = trunc i64 %3986 to i32
  %3992 = and i32 %3991, 255
  %3993 = tail call i32 @llvm.ctpop.i32(i32 %3992) #9
  %3994 = trunc i32 %3993 to i8
  %3995 = and i8 %3994, 1
  %3996 = xor i8 %3995, 1
  store i8 %3996, i8* %49, align 1, !tbaa !2446
  %3997 = xor i64 %3984, %3978
  %3998 = xor i64 %3997, %3986
  %3999 = lshr i64 %3998, 4
  %4000 = trunc i64 %3999 to i8
  %4001 = and i8 %4000, 1
  store i8 %4001, i8* %55, align 1, !tbaa !2450
  %4002 = icmp eq i64 %3986, 0
  %4003 = zext i1 %4002 to i8
  store i8 %4003, i8* %58, align 1, !tbaa !2447
  %4004 = lshr i64 %3986, 63
  %4005 = trunc i64 %4004 to i8
  store i8 %4005, i8* %61, align 1, !tbaa !2448
  %4006 = lshr i64 %3978, 63
  %4007 = xor i64 %4004, %4006
  %4008 = xor i64 %4004, %3985
  %4009 = add nuw nsw i64 %4007, %4008
  %4010 = icmp eq i64 %4009, 2
  %4011 = zext i1 %4010 to i8
  store i8 %4011, i8* %67, align 1, !tbaa !2449
  %4012 = load i64, i64* %RBP, align 8
  %4013 = add i64 %4012, -192
  %4014 = add i64 %3947, 66
  store i64 %4014, i64* %PC, align 8
  %4015 = inttoptr i64 %4013 to i32*
  %4016 = load i32, i32* %4015, align 4
  %4017 = sext i32 %4016 to i64
  %4018 = mul nsw i64 %4017, 520
  store i64 %4018, i64* %RCX, align 8, !tbaa !2428
  %4019 = lshr i64 %4018, 63
  %4020 = add i64 %4018, %3986
  store i64 %4020, i64* %RAX, align 8, !tbaa !2428
  %4021 = icmp ult i64 %4020, %3986
  %4022 = icmp ult i64 %4020, %4018
  %4023 = or i1 %4021, %4022
  %4024 = zext i1 %4023 to i8
  store i8 %4024, i8* %42, align 1, !tbaa !2432
  %4025 = trunc i64 %4020 to i32
  %4026 = and i32 %4025, 255
  %4027 = tail call i32 @llvm.ctpop.i32(i32 %4026) #9
  %4028 = trunc i32 %4027 to i8
  %4029 = and i8 %4028, 1
  %4030 = xor i8 %4029, 1
  store i8 %4030, i8* %49, align 1, !tbaa !2446
  %4031 = xor i64 %4018, %3986
  %4032 = xor i64 %4031, %4020
  %4033 = lshr i64 %4032, 4
  %4034 = trunc i64 %4033 to i8
  %4035 = and i8 %4034, 1
  store i8 %4035, i8* %55, align 1, !tbaa !2450
  %4036 = icmp eq i64 %4020, 0
  %4037 = zext i1 %4036 to i8
  store i8 %4037, i8* %58, align 1, !tbaa !2447
  %4038 = lshr i64 %4020, 63
  %4039 = trunc i64 %4038 to i8
  store i8 %4039, i8* %61, align 1, !tbaa !2448
  %4040 = xor i64 %4038, %4004
  %4041 = xor i64 %4038, %4019
  %4042 = add nuw nsw i64 %4040, %4041
  %4043 = icmp eq i64 %4042, 2
  %4044 = zext i1 %4043 to i8
  store i8 %4044, i8* %67, align 1, !tbaa !2449
  %4045 = add i64 %4012, -196
  %4046 = add i64 %3947, 83
  store i64 %4046, i64* %PC, align 8
  %4047 = inttoptr i64 %4045 to i32*
  %4048 = load i32, i32* %4047, align 4
  %4049 = sext i32 %4048 to i64
  store i64 %4049, i64* %RCX, align 8, !tbaa !2428
  %4050 = shl nsw i64 %4049, 3
  %4051 = add i64 %4050, %4020
  %4052 = add i64 %3947, 88
  store i64 %4052, i64* %PC, align 8
  %4053 = load double, double* %257, align 1
  %4054 = inttoptr i64 %4051 to double*
  %4055 = load double, double* %4054, align 8
  %4056 = fmul double %4053, %4055
  store double %4056, double* %257, align 1, !tbaa !2452
  %4057 = add i64 %4012, -72
  %4058 = add i64 %3947, 93
  store i64 %4058, i64* %PC, align 8
  %4059 = inttoptr i64 %4057 to i64*
  %4060 = load i64, i64* %4059, align 8
  store i64 %4060, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %4061 = add i64 %4012, -184
  %4062 = add i64 %3947, 100
  store i64 %4062, i64* %PC, align 8
  %4063 = inttoptr i64 %4061 to i64*
  %4064 = load i64, i64* %4063, align 8
  store i64 %4064, i64* %RAX, align 8, !tbaa !2428
  %4065 = add i64 %3947, 107
  store i64 %4065, i64* %PC, align 8
  %4066 = load i32, i32* %4015, align 4
  %4067 = sext i32 %4066 to i64
  store i64 %4067, i64* %RCX, align 8, !tbaa !2428
  %4068 = shl nsw i64 %4067, 3
  %4069 = add i64 %4068, %4064
  %4070 = add i64 %3947, 112
  store i64 %4070, i64* %PC, align 8
  %4071 = bitcast i64 %4060 to double
  %4072 = inttoptr i64 %4069 to double*
  %4073 = load double, double* %4072, align 8
  %4074 = fdiv double %4071, %4073
  store double %4074, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4075 = load i64, i64* %RBP, align 8
  %4076 = add i64 %4075, -96
  %4077 = add i64 %3947, 116
  store i64 %4077, i64* %PC, align 8
  %4078 = inttoptr i64 %4076 to i64*
  %4079 = load i64, i64* %4078, align 8
  store i64 %4079, i64* %RAX, align 8, !tbaa !2428
  %4080 = add i64 %4075, -188
  %4081 = add i64 %3947, 123
  store i64 %4081, i64* %PC, align 8
  %4082 = inttoptr i64 %4080 to i32*
  %4083 = load i32, i32* %4082, align 4
  %4084 = sext i32 %4083 to i64
  %4085 = mul nsw i64 %4084, 520
  store i64 %4085, i64* %RCX, align 8, !tbaa !2428
  %4086 = lshr i64 %4085, 63
  %4087 = add i64 %4085, %4079
  store i64 %4087, i64* %RAX, align 8, !tbaa !2428
  %4088 = icmp ult i64 %4087, %4079
  %4089 = icmp ult i64 %4087, %4085
  %4090 = or i1 %4088, %4089
  %4091 = zext i1 %4090 to i8
  store i8 %4091, i8* %42, align 1, !tbaa !2432
  %4092 = trunc i64 %4087 to i32
  %4093 = and i32 %4092, 255
  %4094 = tail call i32 @llvm.ctpop.i32(i32 %4093) #9
  %4095 = trunc i32 %4094 to i8
  %4096 = and i8 %4095, 1
  %4097 = xor i8 %4096, 1
  store i8 %4097, i8* %49, align 1, !tbaa !2446
  %4098 = xor i64 %4085, %4079
  %4099 = xor i64 %4098, %4087
  %4100 = lshr i64 %4099, 4
  %4101 = trunc i64 %4100 to i8
  %4102 = and i8 %4101, 1
  store i8 %4102, i8* %55, align 1, !tbaa !2450
  %4103 = icmp eq i64 %4087, 0
  %4104 = zext i1 %4103 to i8
  store i8 %4104, i8* %58, align 1, !tbaa !2447
  %4105 = lshr i64 %4087, 63
  %4106 = trunc i64 %4105 to i8
  store i8 %4106, i8* %61, align 1, !tbaa !2448
  %4107 = lshr i64 %4079, 63
  %4108 = xor i64 %4105, %4107
  %4109 = xor i64 %4105, %4086
  %4110 = add nuw nsw i64 %4108, %4109
  %4111 = icmp eq i64 %4110, 2
  %4112 = zext i1 %4111 to i8
  store i8 %4112, i8* %67, align 1, !tbaa !2449
  %4113 = add i64 %4075, -192
  %4114 = add i64 %3947, 140
  store i64 %4114, i64* %PC, align 8
  %4115 = inttoptr i64 %4113 to i32*
  %4116 = load i32, i32* %4115, align 4
  %4117 = sext i32 %4116 to i64
  store i64 %4117, i64* %RCX, align 8, !tbaa !2428
  %4118 = shl nsw i64 %4117, 3
  %4119 = add i64 %4118, %4087
  %4120 = add i64 %3947, 145
  store i64 %4120, i64* %PC, align 8
  %4121 = inttoptr i64 %4119 to double*
  %4122 = load double, double* %4121, align 8
  %4123 = fmul double %4074, %4122
  store double %4123, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4124 = load double, double* %257, align 1
  %4125 = fsub double %4124, %4123
  store double %4125, double* %257, align 1, !tbaa !2452
  %4126 = add i64 %4075, -104
  %4127 = add i64 %3947, 153
  store i64 %4127, i64* %PC, align 8
  %4128 = inttoptr i64 %4126 to i64*
  %4129 = load i64, i64* %4128, align 8
  store i64 %4129, i64* %RAX, align 8, !tbaa !2428
  %4130 = load i64, i64* %RBP, align 8
  %4131 = add i64 %4130, -188
  %4132 = add i64 %3947, 160
  store i64 %4132, i64* %PC, align 8
  %4133 = inttoptr i64 %4131 to i32*
  %4134 = load i32, i32* %4133, align 4
  %4135 = sext i32 %4134 to i64
  %4136 = mul nsw i64 %4135, 520
  store i64 %4136, i64* %RCX, align 8, !tbaa !2428
  %4137 = lshr i64 %4136, 63
  %4138 = add i64 %4136, %4129
  store i64 %4138, i64* %RAX, align 8, !tbaa !2428
  %4139 = icmp ult i64 %4138, %4129
  %4140 = icmp ult i64 %4138, %4136
  %4141 = or i1 %4139, %4140
  %4142 = zext i1 %4141 to i8
  store i8 %4142, i8* %42, align 1, !tbaa !2432
  %4143 = trunc i64 %4138 to i32
  %4144 = and i32 %4143, 255
  %4145 = tail call i32 @llvm.ctpop.i32(i32 %4144) #9
  %4146 = trunc i32 %4145 to i8
  %4147 = and i8 %4146, 1
  %4148 = xor i8 %4147, 1
  store i8 %4148, i8* %49, align 1, !tbaa !2446
  %4149 = xor i64 %4136, %4129
  %4150 = xor i64 %4149, %4138
  %4151 = lshr i64 %4150, 4
  %4152 = trunc i64 %4151 to i8
  %4153 = and i8 %4152, 1
  store i8 %4153, i8* %55, align 1, !tbaa !2450
  %4154 = icmp eq i64 %4138, 0
  %4155 = zext i1 %4154 to i8
  store i8 %4155, i8* %58, align 1, !tbaa !2447
  %4156 = lshr i64 %4138, 63
  %4157 = trunc i64 %4156 to i8
  store i8 %4157, i8* %61, align 1, !tbaa !2448
  %4158 = lshr i64 %4129, 63
  %4159 = xor i64 %4156, %4158
  %4160 = xor i64 %4156, %4137
  %4161 = add nuw nsw i64 %4159, %4160
  %4162 = icmp eq i64 %4161, 2
  %4163 = zext i1 %4162 to i8
  store i8 %4163, i8* %67, align 1, !tbaa !2449
  %4164 = add i64 %4130, -192
  %4165 = add i64 %3947, 177
  store i64 %4165, i64* %PC, align 8
  %4166 = inttoptr i64 %4164 to i32*
  %4167 = load i32, i32* %4166, align 4
  %4168 = sext i32 %4167 to i64
  store i64 %4168, i64* %RCX, align 8, !tbaa !2428
  %4169 = shl nsw i64 %4168, 3
  %4170 = add i64 %4169, %4138
  %4171 = add i64 %3947, 182
  store i64 %4171, i64* %PC, align 8
  %4172 = inttoptr i64 %4170 to double*
  store double %4125, double* %4172, align 8
  %4173 = load i64, i64* %RBP, align 8
  %4174 = add i64 %4173, -160
  %4175 = load i64, i64* %PC, align 8
  %4176 = add i64 %4175, 7
  store i64 %4176, i64* %PC, align 8
  %4177 = inttoptr i64 %4174 to i64*
  %4178 = load i64, i64* %4177, align 8
  store i64 %4178, i64* %RAX, align 8, !tbaa !2428
  %4179 = add i64 %4173, -196
  %4180 = add i64 %4175, 14
  store i64 %4180, i64* %PC, align 8
  %4181 = inttoptr i64 %4179 to i32*
  %4182 = load i32, i32* %4181, align 4
  %4183 = sext i32 %4182 to i64
  store i64 %4183, i64* %RCX, align 8, !tbaa !2428
  %4184 = shl nsw i64 %4183, 3
  %4185 = add i64 %4184, %4178
  %4186 = add i64 %4175, 19
  store i64 %4186, i64* %PC, align 8
  %4187 = inttoptr i64 %4185 to i64*
  %4188 = load i64, i64* %4187, align 8
  store i64 %4188, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %4189 = add i64 %4173, -168
  %4190 = add i64 %4175, 26
  store i64 %4190, i64* %PC, align 8
  %4191 = inttoptr i64 %4189 to i64*
  %4192 = load i64, i64* %4191, align 8
  store i64 %4192, i64* %RAX, align 8, !tbaa !2428
  %4193 = add i64 %4175, 33
  store i64 %4193, i64* %PC, align 8
  %4194 = load i32, i32* %4181, align 4
  %4195 = sext i32 %4194 to i64
  store i64 %4195, i64* %RCX, align 8, !tbaa !2428
  %4196 = shl nsw i64 %4195, 3
  %4197 = add i64 %4196, %4192
  %4198 = add i64 %4175, 38
  store i64 %4198, i64* %PC, align 8
  %4199 = bitcast i64 %4188 to double
  %4200 = inttoptr i64 %4197 to double*
  %4201 = load double, double* %4200, align 8
  %4202 = fdiv double %4199, %4201
  store double %4202, double* %257, align 1, !tbaa !2452
  store i64 0, i64* %258, align 1, !tbaa !2452
  %4203 = add i64 %4173, -136
  %4204 = add i64 %4175, 45
  store i64 %4204, i64* %PC, align 8
  %4205 = inttoptr i64 %4203 to i64*
  %4206 = load i64, i64* %4205, align 8
  store i64 %4206, i64* %RAX, align 8, !tbaa !2428
  %4207 = add i64 %4173, -188
  %4208 = add i64 %4175, 52
  store i64 %4208, i64* %PC, align 8
  %4209 = inttoptr i64 %4207 to i32*
  %4210 = load i32, i32* %4209, align 4
  %4211 = sext i32 %4210 to i64
  %4212 = mul nsw i64 %4211, 33800
  store i64 %4212, i64* %RCX, align 8, !tbaa !2428
  %4213 = lshr i64 %4212, 63
  %4214 = add i64 %4212, %4206
  store i64 %4214, i64* %RAX, align 8, !tbaa !2428
  %4215 = icmp ult i64 %4214, %4206
  %4216 = icmp ult i64 %4214, %4212
  %4217 = or i1 %4215, %4216
  %4218 = zext i1 %4217 to i8
  store i8 %4218, i8* %42, align 1, !tbaa !2432
  %4219 = trunc i64 %4214 to i32
  %4220 = and i32 %4219, 255
  %4221 = tail call i32 @llvm.ctpop.i32(i32 %4220) #9
  %4222 = trunc i32 %4221 to i8
  %4223 = and i8 %4222, 1
  %4224 = xor i8 %4223, 1
  store i8 %4224, i8* %49, align 1, !tbaa !2446
  %4225 = xor i64 %4212, %4206
  %4226 = xor i64 %4225, %4214
  %4227 = lshr i64 %4226, 4
  %4228 = trunc i64 %4227 to i8
  %4229 = and i8 %4228, 1
  store i8 %4229, i8* %55, align 1, !tbaa !2450
  %4230 = icmp eq i64 %4214, 0
  %4231 = zext i1 %4230 to i8
  store i8 %4231, i8* %58, align 1, !tbaa !2447
  %4232 = lshr i64 %4214, 63
  %4233 = trunc i64 %4232 to i8
  store i8 %4233, i8* %61, align 1, !tbaa !2448
  %4234 = lshr i64 %4206, 63
  %4235 = xor i64 %4232, %4234
  %4236 = xor i64 %4232, %4213
  %4237 = add nuw nsw i64 %4235, %4236
  %4238 = icmp eq i64 %4237, 2
  %4239 = zext i1 %4238 to i8
  store i8 %4239, i8* %67, align 1, !tbaa !2449
  %4240 = load i64, i64* %RBP, align 8
  %4241 = add i64 %4240, -192
  %4242 = add i64 %4175, 69
  store i64 %4242, i64* %PC, align 8
  %4243 = inttoptr i64 %4241 to i32*
  %4244 = load i32, i32* %4243, align 4
  %4245 = sext i32 %4244 to i64
  %4246 = mul nsw i64 %4245, 520
  store i64 %4246, i64* %RCX, align 8, !tbaa !2428
  %4247 = lshr i64 %4246, 63
  %4248 = add i64 %4246, %4214
  store i64 %4248, i64* %RAX, align 8, !tbaa !2428
  %4249 = icmp ult i64 %4248, %4214
  %4250 = icmp ult i64 %4248, %4246
  %4251 = or i1 %4249, %4250
  %4252 = zext i1 %4251 to i8
  store i8 %4252, i8* %42, align 1, !tbaa !2432
  %4253 = trunc i64 %4248 to i32
  %4254 = and i32 %4253, 255
  %4255 = tail call i32 @llvm.ctpop.i32(i32 %4254) #9
  %4256 = trunc i32 %4255 to i8
  %4257 = and i8 %4256, 1
  %4258 = xor i8 %4257, 1
  store i8 %4258, i8* %49, align 1, !tbaa !2446
  %4259 = xor i64 %4246, %4214
  %4260 = xor i64 %4259, %4248
  %4261 = lshr i64 %4260, 4
  %4262 = trunc i64 %4261 to i8
  %4263 = and i8 %4262, 1
  store i8 %4263, i8* %55, align 1, !tbaa !2450
  %4264 = icmp eq i64 %4248, 0
  %4265 = zext i1 %4264 to i8
  store i8 %4265, i8* %58, align 1, !tbaa !2447
  %4266 = lshr i64 %4248, 63
  %4267 = trunc i64 %4266 to i8
  store i8 %4267, i8* %61, align 1, !tbaa !2448
  %4268 = xor i64 %4266, %4232
  %4269 = xor i64 %4266, %4247
  %4270 = add nuw nsw i64 %4268, %4269
  %4271 = icmp eq i64 %4270, 2
  %4272 = zext i1 %4271 to i8
  store i8 %4272, i8* %67, align 1, !tbaa !2449
  %4273 = add i64 %4240, -196
  %4274 = add i64 %4175, 86
  store i64 %4274, i64* %PC, align 8
  %4275 = inttoptr i64 %4273 to i32*
  %4276 = load i32, i32* %4275, align 4
  %4277 = sext i32 %4276 to i64
  store i64 %4277, i64* %RCX, align 8, !tbaa !2428
  %4278 = shl nsw i64 %4277, 3
  %4279 = add i64 %4278, %4248
  %4280 = add i64 %4175, 91
  store i64 %4280, i64* %PC, align 8
  %4281 = load double, double* %257, align 1
  %4282 = inttoptr i64 %4279 to double*
  %4283 = load double, double* %4282, align 8
  %4284 = fmul double %4281, %4283
  store double %4284, double* %257, align 1, !tbaa !2452
  %4285 = add i64 %4240, -64
  %4286 = add i64 %4175, 96
  store i64 %4286, i64* %PC, align 8
  %4287 = inttoptr i64 %4285 to i64*
  %4288 = load i64, i64* %4287, align 8
  store i64 %4288, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %4289 = add i64 %4240, -152
  %4290 = add i64 %4175, 103
  store i64 %4290, i64* %PC, align 8
  %4291 = inttoptr i64 %4289 to i64*
  %4292 = load i64, i64* %4291, align 8
  store i64 %4292, i64* %RAX, align 8, !tbaa !2428
  %4293 = add i64 %4240, -188
  %4294 = add i64 %4175, 110
  store i64 %4294, i64* %PC, align 8
  %4295 = inttoptr i64 %4293 to i32*
  %4296 = load i32, i32* %4295, align 4
  %4297 = sext i32 %4296 to i64
  store i64 %4297, i64* %RCX, align 8, !tbaa !2428
  %4298 = shl nsw i64 %4297, 3
  %4299 = add i64 %4298, %4292
  %4300 = add i64 %4175, 115
  store i64 %4300, i64* %PC, align 8
  %4301 = bitcast i64 %4288 to double
  %4302 = inttoptr i64 %4299 to double*
  %4303 = load double, double* %4302, align 8
  %4304 = fmul double %4301, %4303
  store double %4304, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4305 = load i64, i64* %RBP, align 8
  %4306 = add i64 %4305, -168
  %4307 = add i64 %4175, 122
  store i64 %4307, i64* %PC, align 8
  %4308 = inttoptr i64 %4306 to i64*
  %4309 = load i64, i64* %4308, align 8
  store i64 %4309, i64* %RAX, align 8, !tbaa !2428
  %4310 = add i64 %4305, -196
  %4311 = add i64 %4175, 129
  store i64 %4311, i64* %PC, align 8
  %4312 = inttoptr i64 %4310 to i32*
  %4313 = load i32, i32* %4312, align 4
  %4314 = sext i32 %4313 to i64
  store i64 %4314, i64* %RCX, align 8, !tbaa !2428
  %4315 = shl nsw i64 %4314, 3
  %4316 = add i64 %4315, %4309
  %4317 = add i64 %4175, 134
  store i64 %4317, i64* %PC, align 8
  %4318 = inttoptr i64 %4316 to double*
  %4319 = load double, double* %4318, align 8
  %4320 = fdiv double %4304, %4319
  store double %4320, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4321 = add i64 %4305, -104
  %4322 = add i64 %4175, 138
  store i64 %4322, i64* %PC, align 8
  %4323 = inttoptr i64 %4321 to i64*
  %4324 = load i64, i64* %4323, align 8
  store i64 %4324, i64* %RAX, align 8, !tbaa !2428
  %4325 = add i64 %4305, -188
  %4326 = add i64 %4175, 145
  store i64 %4326, i64* %PC, align 8
  %4327 = inttoptr i64 %4325 to i32*
  %4328 = load i32, i32* %4327, align 4
  %4329 = sext i32 %4328 to i64
  %4330 = mul nsw i64 %4329, 520
  store i64 %4330, i64* %RCX, align 8, !tbaa !2428
  %4331 = lshr i64 %4330, 63
  %4332 = add i64 %4330, %4324
  store i64 %4332, i64* %RAX, align 8, !tbaa !2428
  %4333 = icmp ult i64 %4332, %4324
  %4334 = icmp ult i64 %4332, %4330
  %4335 = or i1 %4333, %4334
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %42, align 1, !tbaa !2432
  %4337 = trunc i64 %4332 to i32
  %4338 = and i32 %4337, 255
  %4339 = tail call i32 @llvm.ctpop.i32(i32 %4338) #9
  %4340 = trunc i32 %4339 to i8
  %4341 = and i8 %4340, 1
  %4342 = xor i8 %4341, 1
  store i8 %4342, i8* %49, align 1, !tbaa !2446
  %4343 = xor i64 %4330, %4324
  %4344 = xor i64 %4343, %4332
  %4345 = lshr i64 %4344, 4
  %4346 = trunc i64 %4345 to i8
  %4347 = and i8 %4346, 1
  store i8 %4347, i8* %55, align 1, !tbaa !2450
  %4348 = icmp eq i64 %4332, 0
  %4349 = zext i1 %4348 to i8
  store i8 %4349, i8* %58, align 1, !tbaa !2447
  %4350 = lshr i64 %4332, 63
  %4351 = trunc i64 %4350 to i8
  store i8 %4351, i8* %61, align 1, !tbaa !2448
  %4352 = lshr i64 %4324, 63
  %4353 = xor i64 %4350, %4352
  %4354 = xor i64 %4350, %4331
  %4355 = add nuw nsw i64 %4353, %4354
  %4356 = icmp eq i64 %4355, 2
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %67, align 1, !tbaa !2449
  %4358 = add i64 %4305, -192
  %4359 = add i64 %4175, 162
  store i64 %4359, i64* %PC, align 8
  %4360 = inttoptr i64 %4358 to i32*
  %4361 = load i32, i32* %4360, align 4
  %4362 = sext i32 %4361 to i64
  store i64 %4362, i64* %RCX, align 8, !tbaa !2428
  %4363 = shl nsw i64 %4362, 3
  %4364 = add i64 %4363, %4332
  %4365 = add i64 %4175, 167
  store i64 %4365, i64* %PC, align 8
  %4366 = inttoptr i64 %4364 to double*
  %4367 = load double, double* %4366, align 8
  %4368 = fmul double %4320, %4367
  store double %4368, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4369 = load double, double* %257, align 1
  %4370 = fadd double %4369, %4368
  store double %4370, double* %257, align 1, !tbaa !2452
  %4371 = load i64, i64* %RBP, align 8
  %4372 = add i64 %4371, -64
  %4373 = add i64 %4175, 176
  store i64 %4373, i64* %PC, align 8
  %4374 = inttoptr i64 %4372 to i64*
  %4375 = load i64, i64* %4374, align 8
  store i64 %4375, i64* %156, align 1, !tbaa !2452
  store double 0.000000e+00, double* %261, align 1, !tbaa !2452
  %4376 = add i64 %4371, -144
  %4377 = add i64 %4175, 183
  store i64 %4377, i64* %PC, align 8
  %4378 = inttoptr i64 %4376 to i64*
  %4379 = load i64, i64* %4378, align 8
  store i64 %4379, i64* %RAX, align 8, !tbaa !2428
  %4380 = add i64 %4371, -188
  %4381 = add i64 %4175, 190
  store i64 %4381, i64* %PC, align 8
  %4382 = inttoptr i64 %4380 to i32*
  %4383 = load i32, i32* %4382, align 4
  %4384 = sext i32 %4383 to i64
  store i64 %4384, i64* %RCX, align 8, !tbaa !2428
  %4385 = shl nsw i64 %4384, 3
  %4386 = add i64 %4385, %4379
  %4387 = add i64 %4175, 195
  store i64 %4387, i64* %PC, align 8
  %4388 = bitcast i64 %4375 to double
  %4389 = inttoptr i64 %4386 to double*
  %4390 = load double, double* %4389, align 8
  %4391 = fmul double %4388, %4390
  store double %4391, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4392 = add i64 %4371, -168
  %4393 = add i64 %4175, 202
  store i64 %4393, i64* %PC, align 8
  %4394 = inttoptr i64 %4392 to i64*
  %4395 = load i64, i64* %4394, align 8
  store i64 %4395, i64* %RAX, align 8, !tbaa !2428
  %4396 = add i64 %4371, -196
  %4397 = add i64 %4175, 209
  store i64 %4397, i64* %PC, align 8
  %4398 = inttoptr i64 %4396 to i32*
  %4399 = load i32, i32* %4398, align 4
  %4400 = sext i32 %4399 to i64
  store i64 %4400, i64* %RCX, align 8, !tbaa !2428
  %4401 = shl nsw i64 %4400, 3
  %4402 = add i64 %4401, %4395
  %4403 = add i64 %4175, 214
  store i64 %4403, i64* %PC, align 8
  %4404 = inttoptr i64 %4402 to double*
  %4405 = load double, double* %4404, align 8
  %4406 = fdiv double %4391, %4405
  store double %4406, double* %155, align 1, !tbaa !2452
  store i64 0, i64* %260, align 1, !tbaa !2452
  %4407 = add i64 %4371, -112
  %4408 = add i64 %4175, 218
  store i64 %4408, i64* %PC, align 8
  %4409 = inttoptr i64 %4407 to i64*
  %4410 = load i64, i64* %4409, align 8
  store i64 %4410, i64* %RAX, align 8, !tbaa !2428
  %4411 = add i64 %4175, 225
  store i64 %4411, i64* %PC, align 8
  %4412 = load i32, i32* %4382, align 4
  %4413 = sext i32 %4412 to i64
  %4414 = mul nsw i64 %4413, 33800
  store i64 %4414, i64* %RCX, align 8, !tbaa !2428
  %4415 = lshr i64 %4414, 63
  %4416 = add i64 %4414, %4410
  store i64 %4416, i64* %RAX, align 8, !tbaa !2428
  %4417 = icmp ult i64 %4416, %4410
  %4418 = icmp ult i64 %4416, %4414
  %4419 = or i1 %4417, %4418
  %4420 = zext i1 %4419 to i8
  store i8 %4420, i8* %42, align 1, !tbaa !2432
  %4421 = trunc i64 %4416 to i32
  %4422 = and i32 %4421, 255
  %4423 = tail call i32 @llvm.ctpop.i32(i32 %4422) #9
  %4424 = trunc i32 %4423 to i8
  %4425 = and i8 %4424, 1
  %4426 = xor i8 %4425, 1
  store i8 %4426, i8* %49, align 1, !tbaa !2446
  %4427 = xor i64 %4414, %4410
  %4428 = xor i64 %4427, %4416
  %4429 = lshr i64 %4428, 4
  %4430 = trunc i64 %4429 to i8
  %4431 = and i8 %4430, 1
  store i8 %4431, i8* %55, align 1, !tbaa !2450
  %4432 = icmp eq i64 %4416, 0
  %4433 = zext i1 %4432 to i8
  store i8 %4433, i8* %58, align 1, !tbaa !2447
  %4434 = lshr i64 %4416, 63
  %4435 = trunc i64 %4434 to i8
  store i8 %4435, i8* %61, align 1, !tbaa !2448
  %4436 = lshr i64 %4410, 63
  %4437 = xor i64 %4434, %4436
  %4438 = xor i64 %4434, %4415
  %4439 = add nuw nsw i64 %4437, %4438
  %4440 = icmp eq i64 %4439, 2
  %4441 = zext i1 %4440 to i8
  store i8 %4441, i8* %67, align 1, !tbaa !2449
  %4442 = load i64, i64* %RBP, align 8
  %4443 = add i64 %4442, -192
  %4444 = add i64 %4175, 242
  store i64 %4444, i64* %PC, align 8
  %4445 = inttoptr i64 %4443 to i32*
  %4446 = load i32, i32* %4445, align 4
  %4447 = sext i32 %4446 to i64
  %4448 = mul nsw i64 %4447, 520
  store i64 %4448, i64* %RCX, align 8, !tbaa !2428
  %4449 = lshr i64 %4448, 63
  %4450 = add i64 %4448, %4416
  store i64 %4450, i64* %RAX, align 8, !tbaa !2428
  %4451 = icmp ult i64 %4450, %4416
  %4452 = icmp ult i64 %4450, %4448
  %4453 = or i1 %4451, %4452
  %4454 = zext i1 %4453 to i8
  store i8 %4454, i8* %42, align 1, !tbaa !2432
  %4455 = trunc i64 %4450 to i32
  %4456 = and i32 %4455, 255
  %4457 = tail call i32 @llvm.ctpop.i32(i32 %4456) #9
  %4458 = trunc i32 %4457 to i8
  %4459 = and i8 %4458, 1
  %4460 = xor i8 %4459, 1
  store i8 %4460, i8* %49, align 1, !tbaa !2446
  %4461 = xor i64 %4448, %4416
  %4462 = xor i64 %4461, %4450
  %4463 = lshr i64 %4462, 4
  %4464 = trunc i64 %4463 to i8
  %4465 = and i8 %4464, 1
  store i8 %4465, i8* %55, align 1, !tbaa !2450
  %4466 = icmp eq i64 %4450, 0
  %4467 = zext i1 %4466 to i8
  store i8 %4467, i8* %58, align 1, !tbaa !2447
  %4468 = lshr i64 %4450, 63
  %4469 = trunc i64 %4468 to i8
  store i8 %4469, i8* %61, align 1, !tbaa !2448
  %4470 = xor i64 %4468, %4434
  %4471 = xor i64 %4468, %4449
  %4472 = add nuw nsw i64 %4470, %4471
  %4473 = icmp eq i64 %4472, 2
  %4474 = zext i1 %4473 to i8
  store i8 %4474, i8* %67, align 1, !tbaa !2449
  %4475 = add i64 %4442, -196
  %4476 = add i64 %4175, 259
  store i64 %4476, i64* %PC, align 8
  %4477 = inttoptr i64 %4475 to i32*
  %4478 = load i32, i32* %4477, align 4
  %4479 = sext i32 %4478 to i64
  store i64 %4479, i64* %RCX, align 8, !tbaa !2428
  %4480 = shl nsw i64 %4479, 3
  %4481 = add i64 %4480, %4450
  %4482 = add i64 %4175, 264
  store i64 %4482, i64* %PC, align 8
  %4483 = load double, double* %155, align 1
  %4484 = inttoptr i64 %4481 to double*
  %4485 = load double, double* %4484, align 8
  %4486 = fmul double %4483, %4485
  store double %4486, double* %155, align 1, !tbaa !2452
  %4487 = load double, double* %257, align 1
  %4488 = fsub double %4487, %4486
  store double %4488, double* %257, align 1, !tbaa !2452
  %4489 = add i64 %4442, -136
  %4490 = add i64 %4175, 275
  store i64 %4490, i64* %PC, align 8
  %4491 = inttoptr i64 %4489 to i64*
  %4492 = load i64, i64* %4491, align 8
  store i64 %4492, i64* %RAX, align 8, !tbaa !2428
  %4493 = add i64 %4442, -188
  %4494 = add i64 %4175, 282
  store i64 %4494, i64* %PC, align 8
  %4495 = inttoptr i64 %4493 to i32*
  %4496 = load i32, i32* %4495, align 4
  %4497 = sext i32 %4496 to i64
  %4498 = mul nsw i64 %4497, 33800
  store i64 %4498, i64* %RCX, align 8, !tbaa !2428
  %4499 = lshr i64 %4498, 63
  %4500 = add i64 %4498, %4492
  store i64 %4500, i64* %RAX, align 8, !tbaa !2428
  %4501 = icmp ult i64 %4500, %4492
  %4502 = icmp ult i64 %4500, %4498
  %4503 = or i1 %4501, %4502
  %4504 = zext i1 %4503 to i8
  store i8 %4504, i8* %42, align 1, !tbaa !2432
  %4505 = trunc i64 %4500 to i32
  %4506 = and i32 %4505, 255
  %4507 = tail call i32 @llvm.ctpop.i32(i32 %4506) #9
  %4508 = trunc i32 %4507 to i8
  %4509 = and i8 %4508, 1
  %4510 = xor i8 %4509, 1
  store i8 %4510, i8* %49, align 1, !tbaa !2446
  %4511 = xor i64 %4498, %4492
  %4512 = xor i64 %4511, %4500
  %4513 = lshr i64 %4512, 4
  %4514 = trunc i64 %4513 to i8
  %4515 = and i8 %4514, 1
  store i8 %4515, i8* %55, align 1, !tbaa !2450
  %4516 = icmp eq i64 %4500, 0
  %4517 = zext i1 %4516 to i8
  store i8 %4517, i8* %58, align 1, !tbaa !2447
  %4518 = lshr i64 %4500, 63
  %4519 = trunc i64 %4518 to i8
  store i8 %4519, i8* %61, align 1, !tbaa !2448
  %4520 = lshr i64 %4492, 63
  %4521 = xor i64 %4518, %4520
  %4522 = xor i64 %4518, %4499
  %4523 = add nuw nsw i64 %4521, %4522
  %4524 = icmp eq i64 %4523, 2
  %4525 = zext i1 %4524 to i8
  store i8 %4525, i8* %67, align 1, !tbaa !2449
  %4526 = load i64, i64* %RBP, align 8
  %4527 = add i64 %4526, -192
  %4528 = add i64 %4175, 299
  store i64 %4528, i64* %PC, align 8
  %4529 = inttoptr i64 %4527 to i32*
  %4530 = load i32, i32* %4529, align 4
  %4531 = sext i32 %4530 to i64
  %4532 = mul nsw i64 %4531, 520
  store i64 %4532, i64* %RCX, align 8, !tbaa !2428
  %4533 = lshr i64 %4532, 63
  %4534 = add i64 %4532, %4500
  store i64 %4534, i64* %RAX, align 8, !tbaa !2428
  %4535 = icmp ult i64 %4534, %4500
  %4536 = icmp ult i64 %4534, %4532
  %4537 = or i1 %4535, %4536
  %4538 = zext i1 %4537 to i8
  store i8 %4538, i8* %42, align 1, !tbaa !2432
  %4539 = trunc i64 %4534 to i32
  %4540 = and i32 %4539, 255
  %4541 = tail call i32 @llvm.ctpop.i32(i32 %4540) #9
  %4542 = trunc i32 %4541 to i8
  %4543 = and i8 %4542, 1
  %4544 = xor i8 %4543, 1
  store i8 %4544, i8* %49, align 1, !tbaa !2446
  %4545 = xor i64 %4532, %4500
  %4546 = xor i64 %4545, %4534
  %4547 = lshr i64 %4546, 4
  %4548 = trunc i64 %4547 to i8
  %4549 = and i8 %4548, 1
  store i8 %4549, i8* %55, align 1, !tbaa !2450
  %4550 = icmp eq i64 %4534, 0
  %4551 = zext i1 %4550 to i8
  store i8 %4551, i8* %58, align 1, !tbaa !2447
  %4552 = lshr i64 %4534, 63
  %4553 = trunc i64 %4552 to i8
  store i8 %4553, i8* %61, align 1, !tbaa !2448
  %4554 = xor i64 %4552, %4518
  %4555 = xor i64 %4552, %4533
  %4556 = add nuw nsw i64 %4554, %4555
  %4557 = icmp eq i64 %4556, 2
  %4558 = zext i1 %4557 to i8
  store i8 %4558, i8* %67, align 1, !tbaa !2449
  %4559 = add i64 %4526, -196
  %4560 = add i64 %4175, 316
  store i64 %4560, i64* %PC, align 8
  %4561 = inttoptr i64 %4559 to i32*
  %4562 = load i32, i32* %4561, align 4
  %4563 = sext i32 %4562 to i64
  store i64 %4563, i64* %RCX, align 8, !tbaa !2428
  %4564 = shl nsw i64 %4563, 3
  %4565 = add i64 %4564, %4534
  %4566 = add i64 %4175, 321
  store i64 %4566, i64* %PC, align 8
  %4567 = load i64, i64* %148, align 1
  %4568 = inttoptr i64 %4565 to i64*
  store i64 %4567, i64* %4568, align 8
  %4569 = load i64, i64* %RBP, align 8
  %4570 = add i64 %4569, -104
  %4571 = load i64, i64* %PC, align 8
  %4572 = add i64 %4571, 4
  store i64 %4572, i64* %PC, align 8
  %4573 = inttoptr i64 %4570 to i64*
  %4574 = load i64, i64* %4573, align 8
  store i64 %4574, i64* %RAX, align 8, !tbaa !2428
  %4575 = add i64 %4569, -188
  %4576 = add i64 %4571, 11
  store i64 %4576, i64* %PC, align 8
  %4577 = inttoptr i64 %4575 to i32*
  %4578 = load i32, i32* %4577, align 4
  %4579 = sext i32 %4578 to i64
  %4580 = mul nsw i64 %4579, 520
  store i64 %4580, i64* %RCX, align 8, !tbaa !2428
  %4581 = lshr i64 %4580, 63
  %4582 = add i64 %4580, %4574
  store i64 %4582, i64* %RAX, align 8, !tbaa !2428
  %4583 = icmp ult i64 %4582, %4574
  %4584 = icmp ult i64 %4582, %4580
  %4585 = or i1 %4583, %4584
  %4586 = zext i1 %4585 to i8
  store i8 %4586, i8* %42, align 1, !tbaa !2432
  %4587 = trunc i64 %4582 to i32
  %4588 = and i32 %4587, 255
  %4589 = tail call i32 @llvm.ctpop.i32(i32 %4588) #9
  %4590 = trunc i32 %4589 to i8
  %4591 = and i8 %4590, 1
  %4592 = xor i8 %4591, 1
  store i8 %4592, i8* %49, align 1, !tbaa !2446
  %4593 = xor i64 %4580, %4574
  %4594 = xor i64 %4593, %4582
  %4595 = lshr i64 %4594, 4
  %4596 = trunc i64 %4595 to i8
  %4597 = and i8 %4596, 1
  store i8 %4597, i8* %55, align 1, !tbaa !2450
  %4598 = icmp eq i64 %4582, 0
  %4599 = zext i1 %4598 to i8
  store i8 %4599, i8* %58, align 1, !tbaa !2447
  %4600 = lshr i64 %4582, 63
  %4601 = trunc i64 %4600 to i8
  store i8 %4601, i8* %61, align 1, !tbaa !2448
  %4602 = lshr i64 %4574, 63
  %4603 = xor i64 %4600, %4602
  %4604 = xor i64 %4600, %4581
  %4605 = add nuw nsw i64 %4603, %4604
  %4606 = icmp eq i64 %4605, 2
  %4607 = zext i1 %4606 to i8
  store i8 %4607, i8* %67, align 1, !tbaa !2449
  %4608 = add i64 %4569, -192
  %4609 = add i64 %4571, 28
  store i64 %4609, i64* %PC, align 8
  %4610 = inttoptr i64 %4608 to i32*
  %4611 = load i32, i32* %4610, align 4
  %4612 = sext i32 %4611 to i64
  store i64 %4612, i64* %RCX, align 8, !tbaa !2428
  %4613 = shl nsw i64 %4612, 3
  %4614 = add i64 %4613, %4582
  %4615 = add i64 %4571, 33
  store i64 %4615, i64* %PC, align 8
  %4616 = inttoptr i64 %4614 to i64*
  %4617 = load i64, i64* %4616, align 8
  store i64 %4617, i64* %148, align 1, !tbaa !2452
  store double 0.000000e+00, double* %259, align 1, !tbaa !2452
  %4618 = add i64 %4569, -112
  %4619 = add i64 %4571, 37
  store i64 %4619, i64* %PC, align 8
  %4620 = inttoptr i64 %4618 to i64*
  %4621 = load i64, i64* %4620, align 8
  store i64 %4621, i64* %RAX, align 8, !tbaa !2428
  %4622 = add i64 %4571, 44
  store i64 %4622, i64* %PC, align 8
  %4623 = load i32, i32* %4577, align 4
  %4624 = sext i32 %4623 to i64
  %4625 = mul nsw i64 %4624, 33800
  store i64 %4625, i64* %RCX, align 8, !tbaa !2428
  %4626 = lshr i64 %4625, 63
  %4627 = add i64 %4625, %4621
  store i64 %4627, i64* %RAX, align 8, !tbaa !2428
  %4628 = icmp ult i64 %4627, %4621
  %4629 = icmp ult i64 %4627, %4625
  %4630 = or i1 %4628, %4629
  %4631 = zext i1 %4630 to i8
  store i8 %4631, i8* %42, align 1, !tbaa !2432
  %4632 = trunc i64 %4627 to i32
  %4633 = and i32 %4632, 255
  %4634 = tail call i32 @llvm.ctpop.i32(i32 %4633) #9
  %4635 = trunc i32 %4634 to i8
  %4636 = and i8 %4635, 1
  %4637 = xor i8 %4636, 1
  store i8 %4637, i8* %49, align 1, !tbaa !2446
  %4638 = xor i64 %4625, %4621
  %4639 = xor i64 %4638, %4627
  %4640 = lshr i64 %4639, 4
  %4641 = trunc i64 %4640 to i8
  %4642 = and i8 %4641, 1
  store i8 %4642, i8* %55, align 1, !tbaa !2450
  %4643 = icmp eq i64 %4627, 0
  %4644 = zext i1 %4643 to i8
  store i8 %4644, i8* %58, align 1, !tbaa !2447
  %4645 = lshr i64 %4627, 63
  %4646 = trunc i64 %4645 to i8
  store i8 %4646, i8* %61, align 1, !tbaa !2448
  %4647 = lshr i64 %4621, 63
  %4648 = xor i64 %4645, %4647
  %4649 = xor i64 %4645, %4626
  %4650 = add nuw nsw i64 %4648, %4649
  %4651 = icmp eq i64 %4650, 2
  %4652 = zext i1 %4651 to i8
  store i8 %4652, i8* %67, align 1, !tbaa !2449
  %4653 = load i64, i64* %RBP, align 8
  %4654 = add i64 %4653, -192
  %4655 = add i64 %4571, 61
  store i64 %4655, i64* %PC, align 8
  %4656 = inttoptr i64 %4654 to i32*
  %4657 = load i32, i32* %4656, align 4
  %4658 = sext i32 %4657 to i64
  %4659 = mul nsw i64 %4658, 520
  store i64 %4659, i64* %RCX, align 8, !tbaa !2428
  %4660 = lshr i64 %4659, 63
  %4661 = add i64 %4659, %4627
  store i64 %4661, i64* %RAX, align 8, !tbaa !2428
  %4662 = icmp ult i64 %4661, %4627
  %4663 = icmp ult i64 %4661, %4659
  %4664 = or i1 %4662, %4663
  %4665 = zext i1 %4664 to i8
  store i8 %4665, i8* %42, align 1, !tbaa !2432
  %4666 = trunc i64 %4661 to i32
  %4667 = and i32 %4666, 255
  %4668 = tail call i32 @llvm.ctpop.i32(i32 %4667) #9
  %4669 = trunc i32 %4668 to i8
  %4670 = and i8 %4669, 1
  %4671 = xor i8 %4670, 1
  store i8 %4671, i8* %49, align 1, !tbaa !2446
  %4672 = xor i64 %4659, %4627
  %4673 = xor i64 %4672, %4661
  %4674 = lshr i64 %4673, 4
  %4675 = trunc i64 %4674 to i8
  %4676 = and i8 %4675, 1
  store i8 %4676, i8* %55, align 1, !tbaa !2450
  %4677 = icmp eq i64 %4661, 0
  %4678 = zext i1 %4677 to i8
  store i8 %4678, i8* %58, align 1, !tbaa !2447
  %4679 = lshr i64 %4661, 63
  %4680 = trunc i64 %4679 to i8
  store i8 %4680, i8* %61, align 1, !tbaa !2448
  %4681 = xor i64 %4679, %4645
  %4682 = xor i64 %4679, %4660
  %4683 = add nuw nsw i64 %4681, %4682
  %4684 = icmp eq i64 %4683, 2
  %4685 = zext i1 %4684 to i8
  store i8 %4685, i8* %67, align 1, !tbaa !2449
  %4686 = add i64 %4653, -196
  %4687 = add i64 %4571, 78
  store i64 %4687, i64* %PC, align 8
  %4688 = inttoptr i64 %4686 to i32*
  %4689 = load i32, i32* %4688, align 4
  %4690 = sext i32 %4689 to i64
  store i64 %4690, i64* %RCX, align 8, !tbaa !2428
  %4691 = shl nsw i64 %4690, 3
  %4692 = add i64 %4691, %4661
  %4693 = add i64 %4571, 83
  store i64 %4693, i64* %PC, align 8
  %4694 = load i64, i64* %148, align 1
  %4695 = inttoptr i64 %4692 to i64*
  store i64 %4694, i64* %4695, align 8
  %4696 = load i64, i64* %RBP, align 8
  %4697 = add i64 %4696, -196
  %4698 = load i64, i64* %PC, align 8
  %4699 = add i64 %4698, 6
  store i64 %4699, i64* %PC, align 8
  %4700 = inttoptr i64 %4697 to i32*
  %4701 = load i32, i32* %4700, align 4
  %4702 = add i32 %4701, 1
  %4703 = zext i32 %4702 to i64
  store i64 %4703, i64* %RAX, align 8, !tbaa !2428
  %4704 = icmp eq i32 %4701, -1
  %4705 = icmp eq i32 %4702, 0
  %4706 = or i1 %4704, %4705
  %4707 = zext i1 %4706 to i8
  store i8 %4707, i8* %42, align 1, !tbaa !2432
  %4708 = and i32 %4702, 255
  %4709 = tail call i32 @llvm.ctpop.i32(i32 %4708) #9
  %4710 = trunc i32 %4709 to i8
  %4711 = and i8 %4710, 1
  %4712 = xor i8 %4711, 1
  store i8 %4712, i8* %49, align 1, !tbaa !2446
  %4713 = xor i32 %4702, %4701
  %4714 = lshr i32 %4713, 4
  %4715 = trunc i32 %4714 to i8
  %4716 = and i8 %4715, 1
  store i8 %4716, i8* %55, align 1, !tbaa !2450
  %4717 = zext i1 %4705 to i8
  store i8 %4717, i8* %58, align 1, !tbaa !2447
  %4718 = lshr i32 %4702, 31
  %4719 = trunc i32 %4718 to i8
  store i8 %4719, i8* %61, align 1, !tbaa !2448
  %4720 = lshr i32 %4701, 31
  %4721 = xor i32 %4718, %4720
  %4722 = add nuw nsw i32 %4721, %4718
  %4723 = icmp eq i32 %4722, 2
  %4724 = zext i1 %4723 to i8
  store i8 %4724, i8* %67, align 1, !tbaa !2449
  %4725 = add i64 %4698, 15
  store i64 %4725, i64* %PC, align 8
  store i32 %4702, i32* %4700, align 4
  %4726 = load i64, i64* %PC, align 8
  %4727 = add i64 %4726, -859
  store i64 %4727, i64* %PC, align 8, !tbaa !2428
  br label %block_4015b3

block_401581:                                     ; preds = %block_402232, %block_4014b0
  %4728 = phi i64 [ %2600, %block_402232 ], [ %.pre, %block_4014b0 ]
  %4729 = load i64, i64* %RBP, align 8
  %4730 = add i64 %4729, -188
  %4731 = add i64 %4728, 6
  store i64 %4731, i64* %PC, align 8
  %4732 = inttoptr i64 %4730 to i32*
  %4733 = load i32, i32* %4732, align 4
  %4734 = zext i32 %4733 to i64
  store i64 %4734, i64* %RAX, align 8, !tbaa !2428
  %4735 = add i64 %4729, -44
  %4736 = add i64 %4728, 9
  store i64 %4736, i64* %PC, align 8
  %4737 = inttoptr i64 %4735 to i32*
  %4738 = load i32, i32* %4737, align 4
  %4739 = sub i32 %4733, %4738
  %4740 = icmp ult i32 %4733, %4738
  %4741 = zext i1 %4740 to i8
  store i8 %4741, i8* %42, align 1, !tbaa !2432
  %4742 = and i32 %4739, 255
  %4743 = tail call i32 @llvm.ctpop.i32(i32 %4742) #9
  %4744 = trunc i32 %4743 to i8
  %4745 = and i8 %4744, 1
  %4746 = xor i8 %4745, 1
  store i8 %4746, i8* %49, align 1, !tbaa !2446
  %4747 = xor i32 %4738, %4733
  %4748 = xor i32 %4747, %4739
  %4749 = lshr i32 %4748, 4
  %4750 = trunc i32 %4749 to i8
  %4751 = and i8 %4750, 1
  store i8 %4751, i8* %55, align 1, !tbaa !2450
  %4752 = icmp eq i32 %4739, 0
  %4753 = zext i1 %4752 to i8
  store i8 %4753, i8* %58, align 1, !tbaa !2447
  %4754 = lshr i32 %4739, 31
  %4755 = trunc i32 %4754 to i8
  store i8 %4755, i8* %61, align 1, !tbaa !2448
  %4756 = lshr i32 %4733, 31
  %4757 = lshr i32 %4738, 31
  %4758 = xor i32 %4757, %4756
  %4759 = xor i32 %4754, %4756
  %4760 = add nuw nsw i32 %4759, %4758
  %4761 = icmp eq i32 %4760, 2
  %4762 = zext i1 %4761 to i8
  store i8 %4762, i8* %67, align 1, !tbaa !2449
  %4763 = icmp ne i8 %4755, 0
  %4764 = xor i1 %4763, %4761
  %.v15 = select i1 %4764, i64 15, i64 3274
  %4765 = add i64 %4728, %.v15
  store i64 %4765, i64* %PC, align 8, !tbaa !2428
  br i1 %4764, label %block_401590, label %block_40224b

block_401c20:                                     ; preds = %block_401c2f, %block_401913
  %4766 = phi i64 [ %2512, %block_401c2f ], [ %.pre12, %block_401913 ]
  %4767 = load i64, i64* %RBP, align 8
  %4768 = add i64 %4767, -196
  %4769 = add i64 %4766, 6
  store i64 %4769, i64* %PC, align 8
  %4770 = inttoptr i64 %4768 to i32*
  %4771 = load i32, i32* %4770, align 4
  %4772 = zext i32 %4771 to i64
  store i64 %4772, i64* %RAX, align 8, !tbaa !2428
  %4773 = add i64 %4767, -48
  %4774 = add i64 %4766, 9
  store i64 %4774, i64* %PC, align 8
  %4775 = inttoptr i64 %4773 to i32*
  %4776 = load i32, i32* %4775, align 4
  %4777 = sub i32 %4771, %4776
  %4778 = icmp ult i32 %4771, %4776
  %4779 = zext i1 %4778 to i8
  store i8 %4779, i8* %42, align 1, !tbaa !2432
  %4780 = and i32 %4777, 255
  %4781 = tail call i32 @llvm.ctpop.i32(i32 %4780) #9
  %4782 = trunc i32 %4781 to i8
  %4783 = and i8 %4782, 1
  %4784 = xor i8 %4783, 1
  store i8 %4784, i8* %49, align 1, !tbaa !2446
  %4785 = xor i32 %4776, %4771
  %4786 = xor i32 %4785, %4777
  %4787 = lshr i32 %4786, 4
  %4788 = trunc i32 %4787 to i8
  %4789 = and i8 %4788, 1
  store i8 %4789, i8* %55, align 1, !tbaa !2450
  %4790 = icmp eq i32 %4777, 0
  %4791 = zext i1 %4790 to i8
  store i8 %4791, i8* %58, align 1, !tbaa !2447
  %4792 = lshr i32 %4777, 31
  %4793 = trunc i32 %4792 to i8
  store i8 %4793, i8* %61, align 1, !tbaa !2448
  %4794 = lshr i32 %4771, 31
  %4795 = lshr i32 %4776, 31
  %4796 = xor i32 %4795, %4794
  %4797 = xor i32 %4792, %4794
  %4798 = add nuw nsw i32 %4797, %4796
  %4799 = icmp eq i32 %4798, 2
  %4800 = zext i1 %4799 to i8
  store i8 %4800, i8* %67, align 1, !tbaa !2449
  %4801 = icmp ne i8 %4793, 0
  %4802 = xor i1 %4801, %4799
  %.v14 = select i1 %4802, i64 15, i64 818
  %4803 = add i64 %4766, %.v14
  %4804 = add i64 %4767, -120
  %4805 = add i64 %4803, 4
  store i64 %4805, i64* %PC, align 8
  %4806 = inttoptr i64 %4804 to i64*
  %4807 = load i64, i64* %4806, align 8
  store i64 %4807, i64* %RAX, align 8, !tbaa !2428
  %4808 = add i64 %4767, -188
  %4809 = add i64 %4803, 11
  store i64 %4809, i64* %PC, align 8
  %4810 = inttoptr i64 %4808 to i32*
  %4811 = load i32, i32* %4810, align 4
  %4812 = sext i32 %4811 to i64
  %4813 = mul nsw i64 %4812, 33800
  store i64 %4813, i64* %RCX, align 8, !tbaa !2428
  %4814 = lshr i64 %4813, 63
  %4815 = add i64 %4813, %4807
  store i64 %4815, i64* %RAX, align 8, !tbaa !2428
  %4816 = icmp ult i64 %4815, %4807
  %4817 = icmp ult i64 %4815, %4813
  %4818 = or i1 %4816, %4817
  %4819 = zext i1 %4818 to i8
  store i8 %4819, i8* %42, align 1, !tbaa !2432
  %4820 = trunc i64 %4815 to i32
  %4821 = and i32 %4820, 255
  %4822 = tail call i32 @llvm.ctpop.i32(i32 %4821) #9
  %4823 = trunc i32 %4822 to i8
  %4824 = and i8 %4823, 1
  %4825 = xor i8 %4824, 1
  store i8 %4825, i8* %49, align 1, !tbaa !2446
  %4826 = xor i64 %4813, %4807
  %4827 = xor i64 %4826, %4815
  %4828 = lshr i64 %4827, 4
  %4829 = trunc i64 %4828 to i8
  %4830 = and i8 %4829, 1
  store i8 %4830, i8* %55, align 1, !tbaa !2450
  %4831 = icmp eq i64 %4815, 0
  %4832 = zext i1 %4831 to i8
  store i8 %4832, i8* %58, align 1, !tbaa !2447
  %4833 = lshr i64 %4815, 63
  %4834 = trunc i64 %4833 to i8
  store i8 %4834, i8* %61, align 1, !tbaa !2448
  %4835 = lshr i64 %4807, 63
  %4836 = xor i64 %4833, %4835
  %4837 = xor i64 %4833, %4814
  %4838 = add nuw nsw i64 %4836, %4837
  %4839 = icmp eq i64 %4838, 2
  %4840 = zext i1 %4839 to i8
  store i8 %4840, i8* %67, align 1, !tbaa !2449
  %4841 = load i64, i64* %RBP, align 8
  %4842 = add i64 %4841, -52
  %4843 = add i64 %4803, 25
  store i64 %4843, i64* %PC, align 8
  %4844 = inttoptr i64 %4842 to i32*
  %4845 = load i32, i32* %4844, align 4
  %4846 = sext i32 %4845 to i64
  %4847 = mul nsw i64 %4846, 520
  store i64 %4847, i64* %RCX, align 8, !tbaa !2428
  %4848 = lshr i64 %4847, 63
  %4849 = add i64 %4803, 35
  store i64 %4849, i64* %PC, align 8
  %4850 = add i64 %4847, %4815
  store i64 %4850, i64* %RAX, align 8, !tbaa !2428
  %4851 = icmp ult i64 %4850, %4815
  %4852 = icmp ult i64 %4850, %4847
  %4853 = or i1 %4851, %4852
  %4854 = zext i1 %4853 to i8
  store i8 %4854, i8* %42, align 1, !tbaa !2432
  %4855 = trunc i64 %4850 to i32
  %4856 = and i32 %4855, 255
  %4857 = tail call i32 @llvm.ctpop.i32(i32 %4856) #9
  %4858 = trunc i32 %4857 to i8
  %4859 = and i8 %4858, 1
  %4860 = xor i8 %4859, 1
  store i8 %4860, i8* %49, align 1, !tbaa !2446
  %4861 = xor i64 %4847, %4815
  %4862 = xor i64 %4861, %4850
  %4863 = lshr i64 %4862, 4
  %4864 = trunc i64 %4863 to i8
  %4865 = and i8 %4864, 1
  store i8 %4865, i8* %55, align 1, !tbaa !2450
  %4866 = icmp eq i64 %4850, 0
  %4867 = zext i1 %4866 to i8
  store i8 %4867, i8* %58, align 1, !tbaa !2447
  %4868 = lshr i64 %4850, 63
  %4869 = trunc i64 %4868 to i8
  store i8 %4869, i8* %61, align 1, !tbaa !2448
  %4870 = xor i64 %4868, %4833
  %4871 = xor i64 %4868, %4848
  %4872 = add nuw nsw i64 %4870, %4871
  %4873 = icmp eq i64 %4872, 2
  %4874 = zext i1 %4873 to i8
  store i8 %4874, i8* %67, align 1, !tbaa !2449
  br i1 %4802, label %block_401c2f, label %block_401f52
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006c0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4006c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400650_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4033c0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4033c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2454
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2454
  store i8 0, i8* %45, align 1, !tbaa !2454
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2454
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2454
  store i8 0, i8* %48, align 1, !tbaa !2454
  %63 = add i64 %38, -11915
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400550__init_proc(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2447
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_403416, label %block_4033f6

block_403416.loopexit:                            ; preds = %block_403400
  br label %block_403416

block_403416:                                     ; preds = %block_403416.loopexit, %block_4033c0
  %81 = phi i64 [ %80, %block_4033c0 ], [ %179, %block_403416.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_4033c0 ], [ %149, %block_403416.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #9
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2450
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2447
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2448
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2449
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4033f6:                                     ; preds = %block_4033c0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2447
  store i8 0, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2450
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_403400

block_403400:                                     ; preds = %block_403400, %block_4033f6
  %134 = phi i64 [ 0, %block_4033f6 ], [ %152, %block_403400 ]
  %135 = phi i64 [ %133, %block_4033f6 ], [ %179, %block_403400 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_4033f6 ], [ %149, %block_403400 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #9
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2450
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2447
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2448
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2449
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v2
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_403416.loopexit, label %block_403400
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007b0_polybench_timer_print(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4007b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2449
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %40 = load double, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*), align 8
  %41 = bitcast %union.VectorReg* %4 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %43 = load double, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*), align 8
  %44 = fsub double %40, %43
  store double %44, double* %41, align 1, !tbaa !2452
  store i64 0, i64* %42, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %45 = add i64 %10, -545
  %46 = add i64 %10, 42
  %47 = add i64 %7, -32
  %48 = inttoptr i64 %47 to i64*
  store i64 %46, i64* %48, align 8
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %49 = tail call fastcc %struct.Memory* @ext_6040e0_printf(%struct.State* nonnull %0, %struct.Memory* %2)
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -4
  %52 = load i32, i32* %EAX, align 4
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i32*
  store i32 %52, i32* %55, align 4
  %56 = load i64, i64* %RSP, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %56, 16
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ugt i64 %56, -17
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %14, align 1, !tbaa !2432
  %61 = trunc i64 %58 to i32
  %62 = and i32 %61, 255
  %63 = tail call i32 @llvm.ctpop.i32(i32 %62) #9
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  store i8 %66, i8* %21, align 1, !tbaa !2446
  %67 = xor i64 %56, 16
  %68 = xor i64 %67, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %27, align 1, !tbaa !2450
  %72 = icmp eq i64 %58, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2447
  %74 = lshr i64 %58, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %33, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %39, align 1, !tbaa !2449
  %81 = add i64 %57, 5
  store i64 %81, i64* %PC, align 8
  %82 = add i64 %56, 24
  %83 = inttoptr i64 %58 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBP, align 8, !tbaa !2428
  store i64 %82, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %57, 6
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %82 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %88 = add i64 %56, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %49
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_403430___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403430:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403434__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403434:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2432
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2446
  store i8 %10, i8* %11, align 1, !tbaa !2450
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2447
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2448
  store i8 %19, i8* %20, align 1, !tbaa !2449
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400790_polybench_timer_stop(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400790:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_400780_rtclock(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %17 = load i64, i64* %16, align 1
  store i64 %17, i64* bitcast (%polybench_t_end_type* @polybench_t_end to i64*), align 8
  %18 = add i64 %15, 10
  store i64 %18, i64* %PC, align 8
  %19 = load i64, i64* %5, align 8, !tbaa !2428
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  store i64 %20, i64* %5, align 8, !tbaa !2428
  %23 = add i64 %15, 11
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %20 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %PC, align 8, !tbaa !2428
  %26 = add i64 %19, 16
  store i64 %26, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400690___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400690:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #9
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2450
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2447
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2449
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_400699, label %block_4006b0

block_4006b0:                                     ; preds = %block_400690
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400699:                                     ; preds = %block_400690
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400620_deregister_tm_clones(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400650_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400650:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6307928, i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %8, -6307928
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2454
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2454
  store i8 0, i8* %13, align 1, !tbaa !2454
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2454
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2454
  store i8 0, i8* %16, align 1, !tbaa !2454
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %9, %.v
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_400688, label %block_400673

block_400673:                                     ; preds = %block_400650
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 0, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %13, align 1, !tbaa !2450
  %34 = add i64 %33, 21
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br label %block_400688

block_400688:                                     ; preds = %block_400673, %block_400650
  %35 = phi i64 [ %34, %block_400673 ], [ %33, %block_400650 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %RSP, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400610__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400610:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403010_check_FP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %7 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -120
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 112
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #9
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, 16
  %28 = xor i64 %27, %16
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = icmp eq i64 %16, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !2447
  %36 = lshr i64 %16, 63
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = lshr i64 %13, 63
  %40 = xor i64 %36, %39
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 88) to i64*), align 8
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %46, i64* %47, align 1, !tbaa !2452
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast i64* %48 to double*
  store double 0.000000e+00, double* %49, align 1, !tbaa !2452
  %50 = add i64 %12, -16
  %51 = load i32, i32* %EDI, align 4
  %52 = add i64 %15, 18
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -12
  %56 = load i32, i32* %ESI, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i32, i32* %EDX, align 4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 3
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %65, align 4
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -24
  %68 = load i64, i64* %RCX, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -32
  %74 = load i64, i64* %R8, align 8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77, align 8
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -56
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = load i64, i64* %47, align 1
  %83 = inttoptr i64 %79 to i64*
  store i64 %82, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -36
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 7
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i32*
  store i32 0, i32* %88, align 4
  %89 = bitcast %union.VectorReg* %9 to i8*
  %90 = bitcast %union.VectorReg* %9 to i32*
  %91 = getelementptr inbounds i8, i8* %89, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to i32*
  %95 = getelementptr inbounds i8, i8* %89, i64 12
  %96 = bitcast i8* %95 to i32*
  %97 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %98 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %99 = getelementptr inbounds i8, i8* %45, i64 4
  %100 = bitcast i8* %99 to i32*
  %101 = bitcast i64* %48 to i32*
  %102 = getelementptr inbounds i8, i8* %45, i64 12
  %103 = bitcast i8* %102 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40303d

block_40317e:                                     ; preds = %block_403055
  %104 = add i64 %524, -36
  %105 = add i64 %562, 8
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = add i32 %107, 1
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i32 %107, -1
  %111 = icmp eq i32 %108, 0
  %112 = or i1 %110, %111
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %19, align 1, !tbaa !2432
  %114 = and i32 %108, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #9
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2446
  %119 = xor i32 %108, %107
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %32, align 1, !tbaa !2450
  %123 = zext i1 %111 to i8
  store i8 %123, i8* %35, align 1, !tbaa !2447
  %124 = lshr i32 %108, 31
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %38, align 1, !tbaa !2448
  %126 = lshr i32 %107, 31
  %127 = xor i32 %124, %126
  %128 = add nuw nsw i32 %127, %124
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %44, align 1, !tbaa !2449
  %131 = add i64 %562, 14
  store i64 %131, i64* %PC, align 8
  store i32 %108, i32* %106, align 4
  %132 = load i64, i64* %PC, align 8
  %133 = add i64 %132, -335
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  br label %block_40303d

block_403191:                                     ; preds = %block_40303d
  %134 = add i64 %138, -4
  %135 = add i64 %176, 7
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i32*
  store i32 1, i32* %136, align 4
  %.pre33 = load i64, i64* %PC, align 8
  br label %block_403198

block_40303d:                                     ; preds = %block_40317e, %block_403010
  %137 = phi i64 [ %.pre, %block_403010 ], [ %133, %block_40317e ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403010 ], [ %MEMORY.3, %block_40317e ]
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -36
  %140 = add i64 %137, 3
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i32*
  %142 = load i32, i32* %141, align 4
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = add i64 %138, -8
  %145 = add i64 %137, 6
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = add i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RCX, align 8, !tbaa !2428
  %150 = lshr i32 %148, 31
  %151 = sub i32 %142, %148
  %152 = icmp ult i32 %142, %148
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %19, align 1, !tbaa !2432
  %154 = and i32 %151, 255
  %155 = tail call i32 @llvm.ctpop.i32(i32 %154) #9
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  store i8 %158, i8* %26, align 1, !tbaa !2446
  %159 = xor i32 %148, %142
  %160 = xor i32 %159, %151
  %161 = lshr i32 %160, 4
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  store i8 %163, i8* %32, align 1, !tbaa !2450
  %164 = icmp eq i32 %151, 0
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %35, align 1, !tbaa !2447
  %166 = lshr i32 %151, 31
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* %38, align 1, !tbaa !2448
  %168 = lshr i32 %142, 31
  %169 = xor i32 %150, %168
  %170 = xor i32 %166, %168
  %171 = add nuw nsw i32 %170, %169
  %172 = icmp eq i32 %171, 2
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %44, align 1, !tbaa !2449
  %174 = icmp ne i8 %167, 0
  %175 = xor i1 %174, %172
  %.v35 = select i1 %175, i64 17, i64 340
  %176 = add i64 %137, %.v35
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  br i1 %175, label %block_40304e, label %block_403191

block_40304e:                                     ; preds = %block_40303d
  %177 = add i64 %138, -40
  %178 = add i64 %176, 7
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i32*
  store i32 0, i32* %179, align 4
  %.pre30 = load i64, i64* %PC, align 8
  br label %block_403055

block_40316b:                                     ; preds = %block_40306d
  %180 = add i64 %211, -40
  %181 = add i64 %249, 8
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = add i32 %183, 1
  %185 = zext i32 %184 to i64
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = icmp eq i32 %183, -1
  %187 = icmp eq i32 %184, 0
  %188 = or i1 %186, %187
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %19, align 1, !tbaa !2432
  %190 = and i32 %184, 255
  %191 = tail call i32 @llvm.ctpop.i32(i32 %190) #9
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  store i8 %194, i8* %26, align 1, !tbaa !2446
  %195 = xor i32 %184, %183
  %196 = lshr i32 %195, 4
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  store i8 %198, i8* %32, align 1, !tbaa !2450
  %199 = zext i1 %187 to i8
  store i8 %199, i8* %35, align 1, !tbaa !2447
  %200 = lshr i32 %184, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %38, align 1, !tbaa !2448
  %202 = lshr i32 %183, 31
  %203 = xor i32 %200, %202
  %204 = add nuw nsw i32 %203, %200
  %205 = icmp eq i32 %204, 2
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %44, align 1, !tbaa !2449
  %207 = add i64 %249, 14
  store i64 %207, i64* %PC, align 8
  store i32 %184, i32* %182, align 4
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, -292
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  br label %block_403055

block_40306d:                                     ; preds = %block_403158, %block_403066
  %210 = phi i64 [ %.pre31, %block_403066 ], [ %669, %block_403158 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_403066 ], [ %478, %block_403158 ]
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -44
  %213 = add i64 %210, 3
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = zext i32 %215 to i64
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = add i64 %211, -12
  %218 = add i64 %210, 6
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = add i32 %220, 1
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %RCX, align 8, !tbaa !2428
  %223 = lshr i32 %221, 31
  %224 = sub i32 %215, %221
  %225 = icmp ult i32 %215, %221
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %19, align 1, !tbaa !2432
  %227 = and i32 %224, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227) #9
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %26, align 1, !tbaa !2446
  %232 = xor i32 %221, %215
  %233 = xor i32 %232, %224
  %234 = lshr i32 %233, 4
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  store i8 %236, i8* %32, align 1, !tbaa !2450
  %237 = icmp eq i32 %224, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %35, align 1, !tbaa !2447
  %239 = lshr i32 %224, 31
  %240 = trunc i32 %239 to i8
  store i8 %240, i8* %38, align 1, !tbaa !2448
  %241 = lshr i32 %215, 31
  %242 = xor i32 %223, %241
  %243 = xor i32 %239, %241
  %244 = add nuw nsw i32 %243, %242
  %245 = icmp eq i32 %244, 2
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %44, align 1, !tbaa !2449
  %247 = icmp ne i8 %240, 0
  %248 = xor i1 %247, %245
  %.v34 = select i1 %248, i64 17, i64 254
  %249 = add i64 %210, %.v34
  store i64 %249, i64* %PC, align 8, !tbaa !2428
  br i1 %248, label %block_40307e, label %block_40316b

block_40307e:                                     ; preds = %block_40306d
  %250 = add i64 %211, -24
  %251 = add i64 %249, 4
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %211, -36
  %255 = add i64 %249, 8
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 33800
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = lshr i64 %259, 63
  %261 = add i64 %259, %253
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = icmp ult i64 %261, %253
  %263 = icmp ult i64 %261, %259
  %264 = or i1 %262, %263
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %19, align 1, !tbaa !2432
  %266 = trunc i64 %261 to i32
  %267 = and i32 %266, 255
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267) #9
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %26, align 1, !tbaa !2446
  %272 = xor i64 %259, %253
  %273 = xor i64 %272, %261
  %274 = lshr i64 %273, 4
  %275 = trunc i64 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %32, align 1, !tbaa !2450
  %277 = icmp eq i64 %261, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %35, align 1, !tbaa !2447
  %279 = lshr i64 %261, 63
  %280 = trunc i64 %279 to i8
  store i8 %280, i8* %38, align 1, !tbaa !2448
  %281 = lshr i64 %253, 63
  %282 = xor i64 %279, %281
  %283 = xor i64 %279, %260
  %284 = add nuw nsw i64 %282, %283
  %285 = icmp eq i64 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %44, align 1, !tbaa !2449
  %287 = add i64 %211, -40
  %288 = add i64 %249, 22
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i32*
  %290 = load i32, i32* %289, align 4
  %291 = sext i32 %290 to i64
  %292 = mul nsw i64 %291, 520
  store i64 %292, i64* %RCX, align 8, !tbaa !2428
  %293 = lshr i64 %292, 63
  %294 = add i64 %292, %261
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = icmp ult i64 %294, %261
  %296 = icmp ult i64 %294, %292
  %297 = or i1 %295, %296
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %19, align 1, !tbaa !2432
  %299 = trunc i64 %294 to i32
  %300 = and i32 %299, 255
  %301 = tail call i32 @llvm.ctpop.i32(i32 %300) #9
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  %304 = xor i8 %303, 1
  store i8 %304, i8* %26, align 1, !tbaa !2446
  %305 = xor i64 %292, %261
  %306 = xor i64 %305, %294
  %307 = lshr i64 %306, 4
  %308 = trunc i64 %307 to i8
  %309 = and i8 %308, 1
  store i8 %309, i8* %32, align 1, !tbaa !2450
  %310 = icmp eq i64 %294, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %35, align 1, !tbaa !2447
  %312 = lshr i64 %294, 63
  %313 = trunc i64 %312 to i8
  store i8 %313, i8* %38, align 1, !tbaa !2448
  %314 = xor i64 %312, %279
  %315 = xor i64 %312, %293
  %316 = add nuw nsw i64 %314, %315
  %317 = icmp eq i64 %316, 2
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %44, align 1, !tbaa !2449
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -44
  %321 = add i64 %249, 36
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = sext i32 %323 to i64
  store i64 %324, i64* %RCX, align 8, !tbaa !2428
  %325 = shl nsw i64 %324, 3
  %326 = add i64 %325, %294
  %327 = add i64 %249, 41
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %326 to i64*
  %329 = load i64, i64* %328, align 8
  store i64 %329, i64* %47, align 1, !tbaa !2452
  store double 0.000000e+00, double* %49, align 1, !tbaa !2452
  %330 = add i64 %319, -64
  %331 = add i64 %249, 46
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i64*
  store i64 %329, i64* %332, align 8
  %333 = load i64, i64* %RBP, align 8
  %334 = add i64 %333, -32
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %334 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RAX, align 8, !tbaa !2428
  %339 = add i64 %333, -36
  %340 = add i64 %335, 8
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i32*
  %342 = load i32, i32* %341, align 4
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, 33800
  store i64 %344, i64* %RCX, align 8, !tbaa !2428
  %345 = lshr i64 %344, 63
  %346 = add i64 %344, %338
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = icmp ult i64 %346, %338
  %348 = icmp ult i64 %346, %344
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %19, align 1, !tbaa !2432
  %351 = trunc i64 %346 to i32
  %352 = and i32 %351, 255
  %353 = tail call i32 @llvm.ctpop.i32(i32 %352) #9
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  store i8 %356, i8* %26, align 1, !tbaa !2446
  %357 = xor i64 %344, %338
  %358 = xor i64 %357, %346
  %359 = lshr i64 %358, 4
  %360 = trunc i64 %359 to i8
  %361 = and i8 %360, 1
  store i8 %361, i8* %32, align 1, !tbaa !2450
  %362 = icmp eq i64 %346, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %35, align 1, !tbaa !2447
  %364 = lshr i64 %346, 63
  %365 = trunc i64 %364 to i8
  store i8 %365, i8* %38, align 1, !tbaa !2448
  %366 = lshr i64 %338, 63
  %367 = xor i64 %364, %366
  %368 = xor i64 %364, %345
  %369 = add nuw nsw i64 %367, %368
  %370 = icmp eq i64 %369, 2
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %44, align 1, !tbaa !2449
  %372 = add i64 %333, -40
  %373 = add i64 %335, 22
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %372 to i32*
  %375 = load i32, i32* %374, align 4
  %376 = sext i32 %375 to i64
  %377 = mul nsw i64 %376, 520
  store i64 %377, i64* %RCX, align 8, !tbaa !2428
  %378 = lshr i64 %377, 63
  %379 = add i64 %377, %346
  store i64 %379, i64* %RAX, align 8, !tbaa !2428
  %380 = icmp ult i64 %379, %346
  %381 = icmp ult i64 %379, %377
  %382 = or i1 %380, %381
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %19, align 1, !tbaa !2432
  %384 = trunc i64 %379 to i32
  %385 = and i32 %384, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #9
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %26, align 1, !tbaa !2446
  %390 = xor i64 %377, %346
  %391 = xor i64 %390, %379
  %392 = lshr i64 %391, 4
  %393 = trunc i64 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %32, align 1, !tbaa !2450
  %395 = icmp eq i64 %379, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %35, align 1, !tbaa !2447
  %397 = lshr i64 %379, 63
  %398 = trunc i64 %397 to i8
  store i8 %398, i8* %38, align 1, !tbaa !2448
  %399 = xor i64 %397, %364
  %400 = xor i64 %397, %378
  %401 = add nuw nsw i64 %399, %400
  %402 = icmp eq i64 %401, 2
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %44, align 1, !tbaa !2449
  %404 = load i64, i64* %RBP, align 8
  %405 = add i64 %404, -44
  %406 = add i64 %335, 36
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i32*
  %408 = load i32, i32* %407, align 4
  %409 = sext i32 %408 to i64
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = shl nsw i64 %409, 3
  %411 = add i64 %410, %379
  %412 = add i64 %335, 41
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %47, align 1, !tbaa !2452
  store double 0.000000e+00, double* %49, align 1, !tbaa !2452
  %415 = add i64 %404, -72
  %416 = add i64 %335, 46
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i64*
  store i64 %414, i64* %417, align 8
  %418 = load i64, i64* %RBP, align 8
  %419 = add i64 %418, -64
  %420 = load i64, i64* %PC, align 8
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %419 to i64*
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %47, align 1, !tbaa !2452
  store double 0.000000e+00, double* %49, align 1, !tbaa !2452
  %424 = add i64 %418, -72
  %425 = add i64 %420, 10
  store i64 %425, i64* %PC, align 8
  %426 = bitcast i64 %423 to double
  %427 = inttoptr i64 %424 to double*
  %428 = load double, double* %427, align 8
  %429 = fsub double %426, %428
  %430 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 96) to i32*), align 16
  %431 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 100) to i32*), align 4
  %432 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 104) to i32*), align 8
  %433 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 108) to i32*), align 4
  store i32 %430, i32* %90, align 1, !tbaa !2455
  store i32 %431, i32* %92, align 1, !tbaa !2455
  store i32 %432, i32* %94, align 1, !tbaa !2455
  store i32 %433, i32* %96, align 1, !tbaa !2455
  %434 = bitcast double %429 to i64
  %435 = load i64, i64* %97, align 1
  %436 = and i64 %435, %434
  %437 = trunc i64 %436 to i32
  %438 = lshr i64 %436, 32
  %439 = trunc i64 %438 to i32
  store i32 %437, i32* %98, align 1, !tbaa !2451
  store i32 %439, i32* %100, align 1, !tbaa !2451
  store i32 0, i32* %101, align 1, !tbaa !2451
  store i32 0, i32* %103, align 1, !tbaa !2451
  %440 = add i64 %418, -80
  %441 = add i64 %420, 26
  store i64 %441, i64* %PC, align 8
  %442 = load i64, i64* %47, align 1
  %443 = inttoptr i64 %440 to i64*
  store i64 %442, i64* %443, align 8
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -80
  %446 = load i64, i64* %PC, align 8
  %447 = add i64 %446, 5
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %445 to i64*
  %449 = load i64, i64* %448, align 8
  store i64 %449, i64* %47, align 1, !tbaa !2452
  store double 0.000000e+00, double* %49, align 1, !tbaa !2452
  %450 = add i64 %444, -56
  %451 = add i64 %446, 10
  store i64 %451, i64* %PC, align 8
  %452 = bitcast i64 %449 to double
  %453 = inttoptr i64 %450 to double*
  %454 = load double, double* %453, align 8
  %455 = fcmp uno double %452, %454
  br i1 %455, label %456, label %466

; <label>:456:                                    ; preds = %block_40307e
  %457 = fadd double %452, %454
  %458 = bitcast double %457 to i64
  %459 = and i64 %458, 9221120237041090560
  %460 = icmp eq i64 %459, 9218868437227405312
  %461 = and i64 %458, 2251799813685247
  %462 = icmp ne i64 %461, 0
  %463 = and i1 %460, %462
  br i1 %463, label %464, label %472

; <label>:464:                                    ; preds = %456
  %465 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %451, %struct.Memory* %MEMORY.1) #12
  %.pre32 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:466:                                    ; preds = %block_40307e
  %467 = fcmp ogt double %452, %454
  br i1 %467, label %472, label %468

; <label>:468:                                    ; preds = %466
  %469 = fcmp olt double %452, %454
  br i1 %469, label %472, label %470

; <label>:470:                                    ; preds = %468
  %471 = fcmp oeq double %452, %454
  br i1 %471, label %472, label %476

; <label>:472:                                    ; preds = %470, %468, %466, %456
  %473 = phi i8 [ 0, %466 ], [ 0, %468 ], [ 1, %470 ], [ 1, %456 ]
  %474 = phi i8 [ 0, %466 ], [ 0, %468 ], [ 0, %470 ], [ 1, %456 ]
  %475 = phi i8 [ 0, %466 ], [ 1, %468 ], [ 0, %470 ], [ 1, %456 ]
  store i8 %473, i8* %35, align 1, !tbaa !2454
  store i8 %474, i8* %26, align 1, !tbaa !2454
  store i8 %475, i8* %19, align 1, !tbaa !2454
  br label %476

; <label>:476:                                    ; preds = %472, %470
  store i8 0, i8* %44, align 1, !tbaa !2454
  store i8 0, i8* %38, align 1, !tbaa !2454
  store i8 0, i8* %32, align 1, !tbaa !2454
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %476, %464
  %477 = phi i64 [ %.pre32, %464 ], [ %451, %476 ]
  %478 = phi %struct.Memory* [ %465, %464 ], [ %MEMORY.1, %476 ]
  %479 = load i8, i8* %19, align 1, !tbaa !2432
  %480 = load i8, i8* %35, align 1, !tbaa !2447
  %481 = or i8 %480, %479
  %482 = icmp ne i8 %481, 0
  %.v52 = select i1 %482, i64 90, i64 6
  %483 = add i64 %477, %.v52
  store i64 %483, i64* %PC, align 8, !tbaa !2428
  br i1 %482, label %block_403158, label %block_403104

block_403198:                                     ; preds = %block_403104, %block_403191
  %484 = phi i64 [ %.pre33, %block_403191 ], [ %638, %block_403104 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_403191 ], [ %625, %block_403104 ]
  %485 = load i64, i64* %RBP, align 8
  %486 = add i64 %485, -4
  %487 = add i64 %484, 3
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i64
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = load i64, i64* %RSP, align 8
  %492 = add i64 %491, 112
  store i64 %492, i64* %RSP, align 8, !tbaa !2428
  %493 = icmp ugt i64 %491, -113
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %19, align 1, !tbaa !2432
  %495 = trunc i64 %492 to i32
  %496 = and i32 %495, 255
  %497 = tail call i32 @llvm.ctpop.i32(i32 %496) #9
  %498 = trunc i32 %497 to i8
  %499 = and i8 %498, 1
  %500 = xor i8 %499, 1
  store i8 %500, i8* %26, align 1, !tbaa !2446
  %501 = xor i64 %491, 16
  %502 = xor i64 %501, %492
  %503 = lshr i64 %502, 4
  %504 = trunc i64 %503 to i8
  %505 = and i8 %504, 1
  store i8 %505, i8* %32, align 1, !tbaa !2450
  %506 = icmp eq i64 %492, 0
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %35, align 1, !tbaa !2447
  %508 = lshr i64 %492, 63
  %509 = trunc i64 %508 to i8
  store i8 %509, i8* %38, align 1, !tbaa !2448
  %510 = lshr i64 %491, 63
  %511 = xor i64 %508, %510
  %512 = add nuw nsw i64 %511, %508
  %513 = icmp eq i64 %512, 2
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %44, align 1, !tbaa !2449
  %515 = add i64 %484, 8
  store i64 %515, i64* %PC, align 8
  %516 = add i64 %491, 120
  %517 = inttoptr i64 %492 to i64*
  %518 = load i64, i64* %517, align 8
  store i64 %518, i64* %RBP, align 8, !tbaa !2428
  store i64 %516, i64* %RSP, align 8, !tbaa !2428
  %519 = add i64 %484, 9
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %516 to i64*
  %521 = load i64, i64* %520, align 8
  store i64 %521, i64* %PC, align 8, !tbaa !2428
  %522 = add i64 %491, 128
  store i64 %522, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_403055:                                     ; preds = %block_40316b, %block_40304e
  %523 = phi i64 [ %.pre30, %block_40304e ], [ %209, %block_40316b ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_40304e ], [ %MEMORY.1, %block_40316b ]
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -40
  %526 = add i64 %523, 3
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i32*
  %528 = load i32, i32* %527, align 4
  %529 = zext i32 %528 to i64
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = add i64 %524, -16
  %531 = add i64 %523, 6
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %530 to i32*
  %533 = load i32, i32* %532, align 4
  %534 = add i32 %533, 1
  %535 = zext i32 %534 to i64
  store i64 %535, i64* %RCX, align 8, !tbaa !2428
  %536 = lshr i32 %534, 31
  %537 = sub i32 %528, %534
  %538 = icmp ult i32 %528, %534
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %19, align 1, !tbaa !2432
  %540 = and i32 %537, 255
  %541 = tail call i32 @llvm.ctpop.i32(i32 %540) #9
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  store i8 %544, i8* %26, align 1, !tbaa !2446
  %545 = xor i32 %534, %528
  %546 = xor i32 %545, %537
  %547 = lshr i32 %546, 4
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  store i8 %549, i8* %32, align 1, !tbaa !2450
  %550 = icmp eq i32 %537, 0
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %35, align 1, !tbaa !2447
  %552 = lshr i32 %537, 31
  %553 = trunc i32 %552 to i8
  store i8 %553, i8* %38, align 1, !tbaa !2448
  %554 = lshr i32 %528, 31
  %555 = xor i32 %536, %554
  %556 = xor i32 %552, %554
  %557 = add nuw nsw i32 %556, %555
  %558 = icmp eq i32 %557, 2
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %44, align 1, !tbaa !2449
  %560 = icmp ne i8 %553, 0
  %561 = xor i1 %560, %558
  %.v = select i1 %561, i64 17, i64 297
  %562 = add i64 %523, %.v
  store i64 %562, i64* %PC, align 8, !tbaa !2428
  br i1 %561, label %block_403066, label %block_40317e

block_403066:                                     ; preds = %block_403055
  %563 = add i64 %524, -44
  %564 = add i64 %562, 7
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i32*
  store i32 0, i32* %565, align 4
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_40306d

block_403104:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 178), i64* %RSI, align 8, !tbaa !2428
  %566 = load i64, i64* @stderr, align 32
  store i64 %566, i64* %RDI, align 8, !tbaa !2428
  %567 = load i64, i64* %RBP, align 8
  %568 = add i64 %567, -36
  %569 = add i64 %483, 21
  store i64 %569, i64* %PC, align 8
  %570 = inttoptr i64 %568 to i32*
  %571 = load i32, i32* %570, align 4
  %572 = zext i32 %571 to i64
  store i64 %572, i64* %RDX, align 8, !tbaa !2428
  %573 = add i64 %567, -40
  %574 = add i64 %483, 24
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i32*
  %576 = load i32, i32* %575, align 4
  %577 = zext i32 %576 to i64
  store i64 %577, i64* %RCX, align 8, !tbaa !2428
  %578 = add i64 %567, -44
  %579 = add i64 %483, 28
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i32*
  %581 = load i32, i32* %580, align 4
  %582 = zext i32 %581 to i64
  store i64 %582, i64* %R8, align 8, !tbaa !2428
  %583 = add i64 %567, -64
  %584 = add i64 %483, 33
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %583 to i64*
  %586 = load i64, i64* %585, align 8
  store i64 %586, i64* %47, align 1, !tbaa !2452
  store double 0.000000e+00, double* %49, align 1, !tbaa !2452
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %588 = add i64 %483, 37
  store i64 %588, i64* %PC, align 8
  %589 = load i32, i32* %570, align 4
  %590 = zext i32 %589 to i64
  store i64 %590, i64* %587, align 8, !tbaa !2428
  %591 = add i64 %483, 40
  store i64 %591, i64* %PC, align 8
  %592 = load i32, i32* %575, align 4
  %593 = zext i32 %592 to i64
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %594 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %595 = add i64 %483, 44
  store i64 %595, i64* %PC, align 8
  %596 = load i32, i32* %580, align 4
  %597 = zext i32 %596 to i64
  store i64 %597, i64* %594, align 8, !tbaa !2428
  %598 = add i64 %567, -72
  %599 = add i64 %483, 49
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to i64*
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %97, align 1, !tbaa !2452
  %602 = bitcast i64* %93 to double*
  store double 0.000000e+00, double* %602, align 1, !tbaa !2452
  %603 = add i64 %567, -56
  %604 = add i64 %483, 54
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %603 to i64*
  %606 = load i64, i64* %605, align 8
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %606, i64* %607, align 1, !tbaa !2452
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %609 = bitcast i64* %608 to double*
  store double 0.000000e+00, double* %609, align 1, !tbaa !2452
  %610 = bitcast i64* %RSP to i32**
  %611 = load i32*, i32** %610, align 8
  %612 = add i64 %483, 57
  store i64 %612, i64* %PC, align 8
  store i32 %592, i32* %611, align 4
  %613 = load i64, i64* %RSP, align 8
  %614 = add i64 %613, 8
  %615 = load i32, i32* %R10D, align 4
  %616 = load i64, i64* %PC, align 8
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %614 to i32*
  store i32 %615, i32* %618, align 4
  %619 = load i64, i64* %PC, align 8
  store i8 3, i8* %AL, align 1, !tbaa !2454
  %620 = add i64 %619, -11154
  %621 = add i64 %619, 7
  %622 = load i64, i64* %RSP, align 8, !tbaa !2428
  %623 = add i64 %622, -8
  %624 = inttoptr i64 %623 to i64*
  store i64 %621, i64* %624, align 8
  store i64 %623, i64* %RSP, align 8, !tbaa !2428
  store i64 %620, i64* %PC, align 8, !tbaa !2428
  %625 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %478)
  %626 = load i64, i64* %RBP, align 8
  %627 = add i64 %626, -4
  %628 = load i64, i64* %PC, align 8
  %629 = add i64 %628, 7
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %627 to i32*
  store i32 0, i32* %630, align 4
  %631 = load i64, i64* %RBP, align 8
  %632 = add i64 %631, -84
  %633 = load i32, i32* %EAX, align 4
  %634 = load i64, i64* %PC, align 8
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %632 to i32*
  store i32 %633, i32* %636, align 4
  %637 = load i64, i64* %PC, align 8
  %638 = add i64 %637, 69
  store i64 %638, i64* %PC, align 8, !tbaa !2428
  br label %block_403198

block_403158:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %639 = load i64, i64* %RBP, align 8
  %640 = add i64 %639, -44
  %641 = add i64 %483, 8
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i32*
  %643 = load i32, i32* %642, align 4
  %644 = add i32 %643, 1
  %645 = zext i32 %644 to i64
  store i64 %645, i64* %RAX, align 8, !tbaa !2428
  %646 = icmp eq i32 %643, -1
  %647 = icmp eq i32 %644, 0
  %648 = or i1 %646, %647
  %649 = zext i1 %648 to i8
  store i8 %649, i8* %19, align 1, !tbaa !2432
  %650 = and i32 %644, 255
  %651 = tail call i32 @llvm.ctpop.i32(i32 %650) #9
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  store i8 %654, i8* %26, align 1, !tbaa !2446
  %655 = xor i32 %644, %643
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  store i8 %658, i8* %32, align 1, !tbaa !2450
  %659 = zext i1 %647 to i8
  store i8 %659, i8* %35, align 1, !tbaa !2447
  %660 = lshr i32 %644, 31
  %661 = trunc i32 %660 to i8
  store i8 %661, i8* %38, align 1, !tbaa !2448
  %662 = lshr i32 %643, 31
  %663 = xor i32 %660, %662
  %664 = add nuw nsw i32 %663, %660
  %665 = icmp eq i32 %664, 2
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %44, align 1, !tbaa !2449
  %667 = add i64 %483, 14
  store i64 %667, i64* %PC, align 8
  store i32 %644, i32* %642, align 4
  %668 = load i64, i64* %PC, align 8
  %669 = add i64 %668, -249
  store i64 %669, i64* %PC, align 8, !tbaa !2428
  br label %block_40306d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400fc0_init_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400fc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = load i64, i64* %R15, align 8
  %17 = add i64 %15, 5
  store i64 %17, i64* %PC, align 8
  %18 = add i64 %12, -16
  %19 = inttoptr i64 %18 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %R14, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 2
  store i64 %22, i64* %PC, align 8
  %23 = add i64 %12, -24
  %24 = inttoptr i64 %23 to i64*
  store i64 %20, i64* %24, align 8
  %25 = load i64, i64* %R13, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 2
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %12, -32
  %29 = inttoptr i64 %28 to i64*
  store i64 %25, i64* %29, align 8
  %30 = load i64, i64* %R12, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %12, -40
  %34 = inttoptr i64 %33 to i64*
  store i64 %30, i64* %34, align 8
  %35 = load i64, i64* %RBX, align 8
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC, align 8
  %38 = add i64 %12, -48
  %39 = inttoptr i64 %38 to i64*
  store i64 %35, i64* %39, align 8
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %12, -72
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 24
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2432
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = tail call i32 @llvm.ctpop.i32(i32 %46) #9
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2446
  %52 = xor i64 %38, 16
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2450
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, 88
  %72 = add i64 %40, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RAX, align 8, !tbaa !2428
  %75 = add i64 %70, 80
  %76 = add i64 %40, 12
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %R10, align 8, !tbaa !2428
  %79 = add i64 %70, 72
  %80 = add i64 %40, 16
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %R11, align 8, !tbaa !2428
  %83 = add i64 %70, 64
  %84 = add i64 %40, 20
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %83 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %RBX, align 8, !tbaa !2428
  %87 = add i64 %70, 56
  %88 = add i64 %40, 24
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %R14, align 8, !tbaa !2428
  %91 = add i64 %70, 48
  %92 = add i64 %40, 28
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %R15, align 8, !tbaa !2428
  %95 = add i64 %70, 40
  %96 = add i64 %40, 32
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %R12, align 8, !tbaa !2428
  %99 = add i64 %70, 32
  %100 = add i64 %40, 36
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %R13, align 8, !tbaa !2428
  %103 = add i64 %70, -184
  %104 = add i64 %40, 43
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  store i64 %74, i64* %105, align 8
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, 24
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RAX, align 8, !tbaa !2428
  %112 = add i64 %106, -192
  %113 = add i64 %108, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %111, i64* %114, align 8
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, 16
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RAX, align 8, !tbaa !2428
  %121 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 8) to i64*), align 8
  %122 = bitcast [32 x %union.VectorReg]* %6 to double*
  %123 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %121, i64* %123, align 1, !tbaa !2452
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %125 = bitcast i64* %124 to double*
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %126 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 16) to i64*), align 16
  %127 = bitcast %union.VectorReg* %7 to double*
  %128 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %126, i64* %128, align 1, !tbaa !2452
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %130 = bitcast i64* %129 to double*
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %131 = add i64 %115, -44
  %132 = load i32, i32* %EDI, align 4
  %133 = add i64 %117, 23
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %131 to i32*
  store i32 %132, i32* %134, align 4
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -48
  %137 = load i32, i32* %ESI, align 4
  %138 = load i64, i64* %PC, align 8
  %139 = add i64 %138, 3
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %136 to i32*
  store i32 %137, i32* %140, align 4
  %141 = load i64, i64* %RBP, align 8
  %142 = add i64 %141, -52
  %143 = load i32, i32* %EDX, align 4
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %142 to i32*
  store i32 %143, i32* %146, align 4
  %147 = load i64, i64* %RBP, align 8
  %148 = add i64 %147, -64
  %149 = load i64, i64* %RCX, align 8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %148 to i64*
  store i64 %149, i64* %152, align 8
  %153 = load i64, i64* %RBP, align 8
  %154 = add i64 %153, -72
  %155 = load i64, i64* %R8, align 8
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %154 to i64*
  store i64 %155, i64* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -80
  %161 = load i64, i64* %R9, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  store i64 %161, i64* %164, align 8
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -88
  %167 = load i64, i64* %RAX, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170, align 8
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -192
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = add i64 %171, -96
  %178 = add i64 %173, 11
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i64*
  store i64 %176, i64* %179, align 8
  %180 = load i64, i64* %RBP, align 8
  %181 = add i64 %180, -104
  %182 = load i64, i64* %R13, align 8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  store i64 %182, i64* %185, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -112
  %188 = load i64, i64* %R12, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %187 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -120
  %194 = load i64, i64* %R15, align 8
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -128
  %200 = load i64, i64* %R14, align 8
  %201 = load i64, i64* %PC, align 8
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %199 to i64*
  store i64 %200, i64* %203, align 8
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -136
  %206 = load i64, i64* %RBX, align 8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 7
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %205 to i64*
  store i64 %206, i64* %209, align 8
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -144
  %212 = load i64, i64* %R11, align 8
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 7
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %215, align 8
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -152
  %218 = load i64, i64* %R10, align 8
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, 7
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221, align 8
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -184
  %224 = load i64, i64* %PC, align 8
  %225 = add i64 %224, 7
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %223 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %RCX, align 8, !tbaa !2428
  %228 = add i64 %222, -160
  %229 = add i64 %224, 14
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i64*
  store i64 %227, i64* %230, align 8
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -64
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %R8, align 8, !tbaa !2428
  %237 = add i64 %233, 9
  store i64 %237, i64* %PC, align 8
  %238 = load i64, i64* %128, align 1
  %239 = inttoptr i64 %236 to i64*
  store i64 %238, i64* %239, align 8
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -72
  %242 = load i64, i64* %PC, align 8
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %R8, align 8, !tbaa !2428
  %246 = add i64 %242, 9
  store i64 %246, i64* %PC, align 8
  %247 = load i64, i64* %123, align 1
  %248 = inttoptr i64 %245 to i64*
  store i64 %247, i64* %248, align 8
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -164
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 10
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i32*
  store i32 0, i32* %253, align 4
  %254 = bitcast %union.VectorReg* %8 to double*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %256 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_40108a

block_4012fb:                                     ; preds = %block_401253, %block_40130a
  %257 = phi i64 [ %.pre20, %block_401253 ], [ %746, %block_40130a ]
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -172
  %260 = add i64 %257, 6
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i32*
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = add i64 %258, -48
  %265 = add i64 %257, 9
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = sub i32 %262, %267
  %269 = icmp ult i32 %262, %267
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %44, align 1, !tbaa !2432
  %271 = and i32 %268, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271) #9
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %51, align 1, !tbaa !2446
  %276 = xor i32 %267, %262
  %277 = xor i32 %276, %268
  %278 = lshr i32 %277, 4
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  store i8 %280, i8* %57, align 1, !tbaa !2450
  %281 = icmp eq i32 %268, 0
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %60, align 1, !tbaa !2447
  %283 = lshr i32 %268, 31
  %284 = trunc i32 %283 to i8
  store i8 %284, i8* %63, align 1, !tbaa !2448
  %285 = lshr i32 %262, 31
  %286 = lshr i32 %267, 31
  %287 = xor i32 %286, %285
  %288 = xor i32 %283, %285
  %289 = add nuw nsw i32 %288, %287
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %69, align 1, !tbaa !2449
  %292 = icmp ne i8 %284, 0
  %293 = xor i1 %292, %290
  %.demorgan25 = or i1 %281, %293
  %.v = select i1 %.demorgan25, i64 15, i64 359
  %294 = add i64 %257, %.v
  store i64 %294, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan25, label %block_40130a, label %block_401462

block_401194:                                     ; preds = %block_401111
  %295 = add i64 %1364, 10
  store i64 %295, i64* %PC, align 8
  store i32 0, i32* %1331, align 4
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_40119e

block_401244:                                     ; preds = %block_40123a, %block_401462
  %296 = phi i64 [ %.pre19, %block_40123a ], [ %776, %block_401462 ]
  %297 = load i64, i64* %RBP, align 8
  %298 = add i64 %297, -168
  %299 = add i64 %296, 6
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %298 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = add i64 %297, -52
  %304 = add i64 %296, 9
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i32*
  %306 = load i32, i32* %305, align 4
  %307 = sub i32 %301, %306
  %308 = icmp ult i32 %301, %306
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %44, align 1, !tbaa !2432
  %310 = and i32 %307, 255
  %311 = tail call i32 @llvm.ctpop.i32(i32 %310) #9
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  store i8 %314, i8* %51, align 1, !tbaa !2446
  %315 = xor i32 %306, %301
  %316 = xor i32 %315, %307
  %317 = lshr i32 %316, 4
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  store i8 %319, i8* %57, align 1, !tbaa !2450
  %320 = icmp eq i32 %307, 0
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %60, align 1, !tbaa !2447
  %322 = lshr i32 %307, 31
  %323 = trunc i32 %322 to i8
  store i8 %323, i8* %63, align 1, !tbaa !2448
  %324 = lshr i32 %301, 31
  %325 = lshr i32 %306, 31
  %326 = xor i32 %325, %324
  %327 = xor i32 %322, %324
  %328 = add nuw nsw i32 %327, %326
  %329 = icmp eq i32 %328, 2
  %330 = zext i1 %329 to i8
  store i8 %330, i8* %69, align 1, !tbaa !2449
  %331 = icmp ne i8 %323, 0
  %332 = xor i1 %331, %329
  %.demorgan24 = or i1 %320, %332
  %.v26 = select i1 %.demorgan24, i64 15, i64 567
  %333 = add i64 %296, %.v26
  store i64 %333, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan24, label %block_401253, label %block_40147b

block_40130a:                                     ; preds = %block_4012fb
  %334 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 40) to i64*), align 8
  store i64 %334, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %335 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 48) to i64*), align 16
  store i64 %335, i64* %128, align 1, !tbaa !2452
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %336 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 56) to i64*), align 8
  store i64 %336, i64* %256, align 1, !tbaa !2452
  store double 0.000000e+00, double* %820, align 1, !tbaa !2452
  %337 = add i64 %258, -164
  %338 = add i64 %294, 32
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = sitofp i32 %340 to double
  store double %341, double* %819, align 1, !tbaa !2452
  %342 = add i64 %258, -168
  %343 = add i64 %294, 38
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i32*
  %345 = load i32, i32* %344, align 4
  %346 = add i32 %345, 3
  %347 = zext i32 %346 to i64
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = icmp ugt i32 %345, -4
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %44, align 1, !tbaa !2432
  %350 = and i32 %346, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #9
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %51, align 1, !tbaa !2446
  %355 = xor i32 %346, %345
  %356 = lshr i32 %355, 4
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  store i8 %358, i8* %57, align 1, !tbaa !2450
  %359 = icmp eq i32 %346, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %60, align 1, !tbaa !2447
  %361 = lshr i32 %346, 31
  %362 = trunc i32 %361 to i8
  store i8 %362, i8* %63, align 1, !tbaa !2448
  %363 = lshr i32 %345, 31
  %364 = xor i32 %361, %363
  %365 = add nuw nsw i32 %364, %361
  %366 = icmp eq i32 %365, 2
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %69, align 1, !tbaa !2449
  %368 = sitofp i32 %346 to double
  store double %368, double* %821, align 1, !tbaa !2452
  %369 = fmul double %368, %341
  store double %369, double* %819, align 1, !tbaa !2452
  %370 = add i64 %294, 57
  store i64 %370, i64* %PC, align 8
  %371 = load i32, i32* %261, align 4
  %372 = sitofp i32 %371 to double
  store double %372, double* %821, align 1, !tbaa !2452
  %373 = fadd double %372, %369
  %374 = bitcast i64 %336 to double
  %375 = fadd double %373, %374
  store double %375, double* %819, align 1, !tbaa !2452
  %376 = add i64 %294, 70
  store i64 %376, i64* %PC, align 8
  %377 = load i32, i32* %266, align 4
  %378 = sitofp i32 %377 to double
  store double %378, double* %254, align 1, !tbaa !2452
  %379 = fdiv double %375, %378
  store double %379, double* %819, align 1, !tbaa !2452
  %380 = add i64 %258, -96
  %381 = add i64 %294, 78
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382, align 8
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP, align 8
  %385 = add i64 %384, -164
  %386 = add i64 %294, 85
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = sext i32 %388 to i64
  %390 = mul nsw i64 %389, 33800
  store i64 %390, i64* %RDX, align 8, !tbaa !2428
  %391 = lshr i64 %390, 63
  %392 = add i64 %390, %383
  store i64 %392, i64* %RCX, align 8, !tbaa !2428
  %393 = icmp ult i64 %392, %383
  %394 = icmp ult i64 %392, %390
  %395 = or i1 %393, %394
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %44, align 1, !tbaa !2432
  %397 = trunc i64 %392 to i32
  %398 = and i32 %397, 255
  %399 = tail call i32 @llvm.ctpop.i32(i32 %398) #9
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  store i8 %402, i8* %51, align 1, !tbaa !2446
  %403 = xor i64 %390, %383
  %404 = xor i64 %403, %392
  %405 = lshr i64 %404, 4
  %406 = trunc i64 %405 to i8
  %407 = and i8 %406, 1
  store i8 %407, i8* %57, align 1, !tbaa !2450
  %408 = icmp eq i64 %392, 0
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %60, align 1, !tbaa !2447
  %410 = lshr i64 %392, 63
  %411 = trunc i64 %410 to i8
  store i8 %411, i8* %63, align 1, !tbaa !2448
  %412 = lshr i64 %383, 63
  %413 = xor i64 %410, %412
  %414 = xor i64 %410, %391
  %415 = add nuw nsw i64 %413, %414
  %416 = icmp eq i64 %415, 2
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %69, align 1, !tbaa !2449
  %418 = add i64 %384, -168
  %419 = add i64 %294, 102
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %418 to i32*
  %421 = load i32, i32* %420, align 4
  %422 = sext i32 %421 to i64
  %423 = mul nsw i64 %422, 520
  store i64 %423, i64* %RDX, align 8, !tbaa !2428
  %424 = lshr i64 %423, 63
  %425 = add i64 %423, %392
  store i64 %425, i64* %RCX, align 8, !tbaa !2428
  %426 = icmp ult i64 %425, %392
  %427 = icmp ult i64 %425, %423
  %428 = or i1 %426, %427
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %44, align 1, !tbaa !2432
  %430 = trunc i64 %425 to i32
  %431 = and i32 %430, 255
  %432 = tail call i32 @llvm.ctpop.i32(i32 %431) #9
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  store i8 %435, i8* %51, align 1, !tbaa !2446
  %436 = xor i64 %423, %392
  %437 = xor i64 %436, %425
  %438 = lshr i64 %437, 4
  %439 = trunc i64 %438 to i8
  %440 = and i8 %439, 1
  store i8 %440, i8* %57, align 1, !tbaa !2450
  %441 = icmp eq i64 %425, 0
  %442 = zext i1 %441 to i8
  store i8 %442, i8* %60, align 1, !tbaa !2447
  %443 = lshr i64 %425, 63
  %444 = trunc i64 %443 to i8
  store i8 %444, i8* %63, align 1, !tbaa !2448
  %445 = xor i64 %443, %410
  %446 = xor i64 %443, %424
  %447 = add nuw nsw i64 %445, %446
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %69, align 1, !tbaa !2449
  %450 = load i64, i64* %RBP, align 8
  %451 = add i64 %450, -172
  %452 = add i64 %294, 119
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i32*
  %454 = load i32, i32* %453, align 4
  %455 = sext i32 %454 to i64
  store i64 %455, i64* %RDX, align 8, !tbaa !2428
  %456 = shl nsw i64 %455, 3
  %457 = add i64 %456, %425
  %458 = add i64 %294, 124
  store i64 %458, i64* %PC, align 8
  %459 = load i64, i64* %822, align 1
  %460 = inttoptr i64 %457 to i64*
  store i64 %459, i64* %460, align 8
  %461 = load i64, i64* %RBP, align 8
  %462 = add i64 %461, -164
  %463 = load i64, i64* %PC, align 8
  %464 = add i64 %463, 8
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %462 to i32*
  %466 = load i32, i32* %465, align 4
  %467 = sitofp i32 %466 to double
  store double %467, double* %254, align 1, !tbaa !2452
  %468 = add i64 %461, -168
  %469 = add i64 %463, 14
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i32*
  %471 = load i32, i32* %470, align 4
  %472 = add i32 %471, 4
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RAX, align 8, !tbaa !2428
  %474 = icmp ugt i32 %471, -5
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %44, align 1, !tbaa !2432
  %476 = and i32 %472, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #9
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %51, align 1, !tbaa !2446
  %481 = xor i32 %472, %471
  %482 = lshr i32 %481, 4
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  store i8 %484, i8* %57, align 1, !tbaa !2450
  %485 = icmp eq i32 %472, 0
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %60, align 1, !tbaa !2447
  %487 = lshr i32 %472, 31
  %488 = trunc i32 %487 to i8
  store i8 %488, i8* %63, align 1, !tbaa !2448
  %489 = lshr i32 %471, 31
  %490 = xor i32 %487, %489
  %491 = add nuw nsw i32 %490, %487
  %492 = icmp eq i32 %491, 2
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %69, align 1, !tbaa !2449
  %494 = sitofp i32 %472 to double
  store double %494, double* %819, align 1, !tbaa !2452
  %495 = fmul double %494, %467
  store double %495, double* %254, align 1, !tbaa !2452
  %496 = add i64 %461, -172
  %497 = add i64 %463, 33
  store i64 %497, i64* %PC, align 8
  %498 = inttoptr i64 %496 to i32*
  %499 = load i32, i32* %498, align 4
  %500 = sitofp i32 %499 to double
  store double %500, double* %819, align 1, !tbaa !2452
  %501 = fadd double %500, %495
  %502 = load double, double* %127, align 1
  %503 = fadd double %501, %502
  store double %503, double* %254, align 1, !tbaa !2452
  %504 = add i64 %461, -52
  %505 = add i64 %463, 46
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %504 to i32*
  %507 = load i32, i32* %506, align 4
  %508 = sitofp i32 %507 to double
  store double %508, double* %127, align 1, !tbaa !2452
  %509 = fdiv double %503, %508
  store double %509, double* %254, align 1, !tbaa !2452
  %510 = add i64 %461, -104
  %511 = add i64 %463, 54
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %510 to i64*
  %513 = load i64, i64* %512, align 8
  store i64 %513, i64* %RCX, align 8, !tbaa !2428
  %514 = add i64 %463, 61
  store i64 %514, i64* %PC, align 8
  %515 = load i32, i32* %465, align 4
  %516 = sext i32 %515 to i64
  %517 = mul nsw i64 %516, 33800
  store i64 %517, i64* %RDX, align 8, !tbaa !2428
  %518 = lshr i64 %517, 63
  %519 = add i64 %517, %513
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ult i64 %519, %513
  %521 = icmp ult i64 %519, %517
  %522 = or i1 %520, %521
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %44, align 1, !tbaa !2432
  %524 = trunc i64 %519 to i32
  %525 = and i32 %524, 255
  %526 = tail call i32 @llvm.ctpop.i32(i32 %525) #9
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = xor i8 %528, 1
  store i8 %529, i8* %51, align 1, !tbaa !2446
  %530 = xor i64 %517, %513
  %531 = xor i64 %530, %519
  %532 = lshr i64 %531, 4
  %533 = trunc i64 %532 to i8
  %534 = and i8 %533, 1
  store i8 %534, i8* %57, align 1, !tbaa !2450
  %535 = icmp eq i64 %519, 0
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %60, align 1, !tbaa !2447
  %537 = lshr i64 %519, 63
  %538 = trunc i64 %537 to i8
  store i8 %538, i8* %63, align 1, !tbaa !2448
  %539 = lshr i64 %513, 63
  %540 = xor i64 %537, %539
  %541 = xor i64 %537, %518
  %542 = add nuw nsw i64 %540, %541
  %543 = icmp eq i64 %542, 2
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %69, align 1, !tbaa !2449
  %545 = load i64, i64* %RBP, align 8
  %546 = add i64 %545, -168
  %547 = add i64 %463, 78
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = sext i32 %549 to i64
  %551 = mul nsw i64 %550, 520
  store i64 %551, i64* %RDX, align 8, !tbaa !2428
  %552 = lshr i64 %551, 63
  %553 = add i64 %551, %519
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = icmp ult i64 %553, %519
  %555 = icmp ult i64 %553, %551
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %44, align 1, !tbaa !2432
  %558 = trunc i64 %553 to i32
  %559 = and i32 %558, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559) #9
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %51, align 1, !tbaa !2446
  %564 = xor i64 %551, %519
  %565 = xor i64 %564, %553
  %566 = lshr i64 %565, 4
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 1
  store i8 %568, i8* %57, align 1, !tbaa !2450
  %569 = icmp eq i64 %553, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %60, align 1, !tbaa !2447
  %571 = lshr i64 %553, 63
  %572 = trunc i64 %571 to i8
  store i8 %572, i8* %63, align 1, !tbaa !2448
  %573 = xor i64 %571, %537
  %574 = xor i64 %571, %552
  %575 = add nuw nsw i64 %573, %574
  %576 = icmp eq i64 %575, 2
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %69, align 1, !tbaa !2449
  %578 = add i64 %545, -172
  %579 = add i64 %463, 95
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i32*
  %581 = load i32, i32* %580, align 4
  %582 = sext i32 %581 to i64
  store i64 %582, i64* %RDX, align 8, !tbaa !2428
  %583 = shl nsw i64 %582, 3
  %584 = add i64 %583, %553
  %585 = add i64 %463, 100
  store i64 %585, i64* %PC, align 8
  %586 = load i64, i64* %256, align 1
  %587 = inttoptr i64 %584 to i64*
  store i64 %586, i64* %587, align 8
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -164
  %590 = load i64, i64* %PC, align 8
  %591 = add i64 %590, 8
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %589 to i32*
  %593 = load i32, i32* %592, align 4
  %594 = sitofp i32 %593 to double
  store double %594, double* %127, align 1, !tbaa !2452
  %595 = add i64 %588, -168
  %596 = add i64 %590, 14
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i32*
  %598 = load i32, i32* %597, align 4
  %599 = add i32 %598, 5
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = icmp ugt i32 %598, -6
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %44, align 1, !tbaa !2432
  %603 = and i32 %599, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #9
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %51, align 1, !tbaa !2446
  %608 = xor i32 %599, %598
  %609 = lshr i32 %608, 4
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  store i8 %611, i8* %57, align 1, !tbaa !2450
  %612 = icmp eq i32 %599, 0
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %60, align 1, !tbaa !2447
  %614 = lshr i32 %599, 31
  %615 = trunc i32 %614 to i8
  store i8 %615, i8* %63, align 1, !tbaa !2448
  %616 = lshr i32 %598, 31
  %617 = xor i32 %614, %616
  %618 = add nuw nsw i32 %617, %614
  %619 = icmp eq i32 %618, 2
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %69, align 1, !tbaa !2449
  %621 = sitofp i32 %599 to double
  store double %621, double* %254, align 1, !tbaa !2452
  %622 = fmul double %621, %594
  store double %622, double* %127, align 1, !tbaa !2452
  %623 = add i64 %588, -172
  %624 = add i64 %590, 33
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %623 to i32*
  %626 = load i32, i32* %625, align 4
  %627 = sitofp i32 %626 to double
  store double %627, double* %254, align 1, !tbaa !2452
  %628 = fadd double %627, %622
  %629 = load double, double* %122, align 1
  %630 = fadd double %628, %629
  store double %630, double* %127, align 1, !tbaa !2452
  %631 = add i64 %588, -44
  %632 = add i64 %590, 46
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %631 to i32*
  %634 = load i32, i32* %633, align 4
  %635 = sitofp i32 %634 to double
  store double %635, double* %122, align 1, !tbaa !2452
  %636 = fdiv double %630, %635
  store double %636, double* %127, align 1, !tbaa !2452
  %637 = add i64 %588, -112
  %638 = add i64 %590, 54
  store i64 %638, i64* %PC, align 8
  %639 = inttoptr i64 %637 to i64*
  %640 = load i64, i64* %639, align 8
  store i64 %640, i64* %RCX, align 8, !tbaa !2428
  %641 = add i64 %590, 61
  store i64 %641, i64* %PC, align 8
  %642 = load i32, i32* %592, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, 33800
  store i64 %644, i64* %RDX, align 8, !tbaa !2428
  %645 = lshr i64 %644, 63
  %646 = add i64 %644, %640
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  %647 = icmp ult i64 %646, %640
  %648 = icmp ult i64 %646, %644
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %44, align 1, !tbaa !2432
  %651 = trunc i64 %646 to i32
  %652 = and i32 %651, 255
  %653 = tail call i32 @llvm.ctpop.i32(i32 %652) #9
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  store i8 %656, i8* %51, align 1, !tbaa !2446
  %657 = xor i64 %644, %640
  %658 = xor i64 %657, %646
  %659 = lshr i64 %658, 4
  %660 = trunc i64 %659 to i8
  %661 = and i8 %660, 1
  store i8 %661, i8* %57, align 1, !tbaa !2450
  %662 = icmp eq i64 %646, 0
  %663 = zext i1 %662 to i8
  store i8 %663, i8* %60, align 1, !tbaa !2447
  %664 = lshr i64 %646, 63
  %665 = trunc i64 %664 to i8
  store i8 %665, i8* %63, align 1, !tbaa !2448
  %666 = lshr i64 %640, 63
  %667 = xor i64 %664, %666
  %668 = xor i64 %664, %645
  %669 = add nuw nsw i64 %667, %668
  %670 = icmp eq i64 %669, 2
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %69, align 1, !tbaa !2449
  %672 = load i64, i64* %RBP, align 8
  %673 = add i64 %672, -168
  %674 = add i64 %590, 78
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %673 to i32*
  %676 = load i32, i32* %675, align 4
  %677 = sext i32 %676 to i64
  %678 = mul nsw i64 %677, 520
  store i64 %678, i64* %RDX, align 8, !tbaa !2428
  %679 = lshr i64 %678, 63
  %680 = add i64 %678, %646
  store i64 %680, i64* %RCX, align 8, !tbaa !2428
  %681 = icmp ult i64 %680, %646
  %682 = icmp ult i64 %680, %678
  %683 = or i1 %681, %682
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %44, align 1, !tbaa !2432
  %685 = trunc i64 %680 to i32
  %686 = and i32 %685, 255
  %687 = tail call i32 @llvm.ctpop.i32(i32 %686) #9
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = xor i8 %689, 1
  store i8 %690, i8* %51, align 1, !tbaa !2446
  %691 = xor i64 %678, %646
  %692 = xor i64 %691, %680
  %693 = lshr i64 %692, 4
  %694 = trunc i64 %693 to i8
  %695 = and i8 %694, 1
  store i8 %695, i8* %57, align 1, !tbaa !2450
  %696 = icmp eq i64 %680, 0
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %60, align 1, !tbaa !2447
  %698 = lshr i64 %680, 63
  %699 = trunc i64 %698 to i8
  store i8 %699, i8* %63, align 1, !tbaa !2448
  %700 = xor i64 %698, %664
  %701 = xor i64 %698, %679
  %702 = add nuw nsw i64 %700, %701
  %703 = icmp eq i64 %702, 2
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %69, align 1, !tbaa !2449
  %705 = add i64 %672, -172
  %706 = add i64 %590, 95
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i32*
  %708 = load i32, i32* %707, align 4
  %709 = sext i32 %708 to i64
  store i64 %709, i64* %RDX, align 8, !tbaa !2428
  %710 = shl nsw i64 %709, 3
  %711 = add i64 %710, %680
  %712 = add i64 %590, 100
  store i64 %712, i64* %PC, align 8
  %713 = load i64, i64* %128, align 1
  %714 = inttoptr i64 %711 to i64*
  store i64 %713, i64* %714, align 8
  %715 = load i64, i64* %RBP, align 8
  %716 = add i64 %715, -172
  %717 = load i64, i64* %PC, align 8
  %718 = add i64 %717, 6
  store i64 %718, i64* %PC, align 8
  %719 = inttoptr i64 %716 to i32*
  %720 = load i32, i32* %719, align 4
  %721 = add i32 %720, 1
  %722 = zext i32 %721 to i64
  store i64 %722, i64* %RAX, align 8, !tbaa !2428
  %723 = icmp eq i32 %720, -1
  %724 = icmp eq i32 %721, 0
  %725 = or i1 %723, %724
  %726 = zext i1 %725 to i8
  store i8 %726, i8* %44, align 1, !tbaa !2432
  %727 = and i32 %721, 255
  %728 = tail call i32 @llvm.ctpop.i32(i32 %727) #9
  %729 = trunc i32 %728 to i8
  %730 = and i8 %729, 1
  %731 = xor i8 %730, 1
  store i8 %731, i8* %51, align 1, !tbaa !2446
  %732 = xor i32 %721, %720
  %733 = lshr i32 %732, 4
  %734 = trunc i32 %733 to i8
  %735 = and i8 %734, 1
  store i8 %735, i8* %57, align 1, !tbaa !2450
  %736 = zext i1 %724 to i8
  store i8 %736, i8* %60, align 1, !tbaa !2447
  %737 = lshr i32 %721, 31
  %738 = trunc i32 %737 to i8
  store i8 %738, i8* %63, align 1, !tbaa !2448
  %739 = lshr i32 %720, 31
  %740 = xor i32 %737, %739
  %741 = add nuw nsw i32 %740, %737
  %742 = icmp eq i32 %741, 2
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %69, align 1, !tbaa !2449
  %744 = add i64 %717, 15
  store i64 %744, i64* %PC, align 8
  store i32 %721, i32* %719, align 4
  %745 = load i64, i64* %PC, align 8
  %746 = add i64 %745, -354
  store i64 %746, i64* %PC, align 8, !tbaa !2428
  br label %block_4012fb

block_401462:                                     ; preds = %block_4012fb
  %747 = add i64 %258, -168
  %748 = add i64 %294, 11
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %747 to i32*
  %750 = load i32, i32* %749, align 4
  %751 = add i32 %750, 1
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = icmp eq i32 %750, -1
  %754 = icmp eq i32 %751, 0
  %755 = or i1 %753, %754
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %44, align 1, !tbaa !2432
  %757 = and i32 %751, 255
  %758 = tail call i32 @llvm.ctpop.i32(i32 %757) #9
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  store i8 %761, i8* %51, align 1, !tbaa !2446
  %762 = xor i32 %751, %750
  %763 = lshr i32 %762, 4
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  store i8 %765, i8* %57, align 1, !tbaa !2450
  %766 = zext i1 %754 to i8
  store i8 %766, i8* %60, align 1, !tbaa !2447
  %767 = lshr i32 %751, 31
  %768 = trunc i32 %767 to i8
  store i8 %768, i8* %63, align 1, !tbaa !2448
  %769 = lshr i32 %750, 31
  %770 = xor i32 %767, %769
  %771 = add nuw nsw i32 %770, %767
  %772 = icmp eq i32 %771, 2
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %69, align 1, !tbaa !2449
  %774 = add i64 %294, 20
  store i64 %774, i64* %PC, align 8
  store i32 %751, i32* %749, align 4
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, -562
  store i64 %776, i64* %PC, align 8, !tbaa !2428
  br label %block_401244

block_40123a:                                     ; preds = %block_40122b
  %777 = add i64 %781, -168
  %778 = add i64 %817, 10
  store i64 %778, i64* %PC, align 8
  %779 = inttoptr i64 %777 to i32*
  store i32 0, i32* %779, align 4
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_401244

block_40122b:                                     ; preds = %block_40147b, %block_401221
  %780 = phi i64 [ %1148, %block_40147b ], [ %.pre18, %block_401221 ]
  %781 = load i64, i64* %RBP, align 8
  %782 = add i64 %781, -164
  %783 = add i64 %780, 6
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i32*
  %785 = load i32, i32* %784, align 4
  %786 = zext i32 %785 to i64
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = add i64 %781, -44
  %788 = add i64 %780, 9
  store i64 %788, i64* %PC, align 8
  %789 = inttoptr i64 %787 to i32*
  %790 = load i32, i32* %789, align 4
  %791 = sub i32 %785, %790
  %792 = icmp ult i32 %785, %790
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %44, align 1, !tbaa !2432
  %794 = and i32 %791, 255
  %795 = tail call i32 @llvm.ctpop.i32(i32 %794) #9
  %796 = trunc i32 %795 to i8
  %797 = and i8 %796, 1
  %798 = xor i8 %797, 1
  store i8 %798, i8* %51, align 1, !tbaa !2446
  %799 = xor i32 %790, %785
  %800 = xor i32 %799, %791
  %801 = lshr i32 %800, 4
  %802 = trunc i32 %801 to i8
  %803 = and i8 %802, 1
  store i8 %803, i8* %57, align 1, !tbaa !2450
  %804 = icmp eq i32 %791, 0
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %60, align 1, !tbaa !2447
  %806 = lshr i32 %791, 31
  %807 = trunc i32 %806 to i8
  store i8 %807, i8* %63, align 1, !tbaa !2448
  %808 = lshr i32 %785, 31
  %809 = lshr i32 %790, 31
  %810 = xor i32 %809, %808
  %811 = xor i32 %806, %808
  %812 = add nuw nsw i32 %811, %810
  %813 = icmp eq i32 %812, 2
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %69, align 1, !tbaa !2449
  %815 = icmp ne i8 %807, 0
  %816 = xor i1 %815, %813
  %.demorgan23 = or i1 %804, %816
  %.v30 = select i1 %.demorgan23, i64 15, i64 617
  %817 = add i64 %780, %.v30
  store i64 %817, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan23, label %block_40123a, label %block_401494

block_401221:                                     ; preds = %block_40119e
  %818 = add i64 %1402, 10
  store i64 %818, i64* %PC, align 8
  store i32 0, i32* %1369, align 4
  %819 = bitcast %union.VectorReg* %9 to double*
  %820 = bitcast i64* %255 to double*
  %821 = bitcast %union.VectorReg* %1441 to double*
  %822 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_40122b

block_401120:                                     ; preds = %block_401111
  %823 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 80) to i64*), align 16
  store i64 %823, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %824 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 40) to i64*), align 8
  store i64 %824, i64* %128, align 1, !tbaa !2452
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %825 = add i64 %1364, 24
  store i64 %825, i64* %PC, align 8
  %826 = load i32, i32* %1331, align 4
  %827 = sitofp i32 %826 to double
  %828 = bitcast i64 %824 to double
  %829 = fadd double %827, %828
  store double %829, double* %254, align 1, !tbaa !2452
  %830 = add i64 %1364, 33
  store i64 %830, i64* %PC, align 8
  %831 = load i32, i32* %1336, align 4
  %832 = sitofp i32 %831 to double
  store double %832, double* %127, align 1, !tbaa !2452
  %833 = fdiv double %829, %832
  store double %833, double* %254, align 1, !tbaa !2452
  %834 = add i64 %1328, -136
  %835 = add i64 %1364, 44
  store i64 %835, i64* %PC, align 8
  %836 = inttoptr i64 %834 to i64*
  %837 = load i64, i64* %836, align 8
  store i64 %837, i64* %RAX, align 8, !tbaa !2428
  %838 = add i64 %1364, 51
  store i64 %838, i64* %PC, align 8
  %839 = load i32, i32* %1331, align 4
  %840 = sext i32 %839 to i64
  store i64 %840, i64* %RCX, align 8, !tbaa !2428
  %841 = shl nsw i64 %840, 3
  %842 = add i64 %841, %837
  %843 = add i64 %1364, 56
  store i64 %843, i64* %PC, align 8
  %844 = inttoptr i64 %842 to double*
  store double %833, double* %844, align 8
  %845 = load i64, i64* %RBP, align 8
  %846 = add i64 %845, -164
  %847 = load i64, i64* %PC, align 8
  %848 = add i64 %847, 8
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %846 to i32*
  %850 = load i32, i32* %849, align 4
  %851 = sitofp i32 %850 to double
  %852 = load double, double* %122, align 1
  %853 = fadd double %851, %852
  store double %853, double* %127, align 1, !tbaa !2452
  %854 = add i64 %845, -48
  %855 = add i64 %847, 17
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %854 to i32*
  %857 = load i32, i32* %856, align 4
  %858 = sitofp i32 %857 to double
  store double %858, double* %122, align 1, !tbaa !2452
  %859 = fdiv double %853, %858
  store double %859, double* %127, align 1, !tbaa !2452
  %860 = add i64 %845, -144
  %861 = add i64 %847, 28
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %860 to i64*
  %863 = load i64, i64* %862, align 8
  store i64 %863, i64* %RAX, align 8, !tbaa !2428
  %864 = add i64 %847, 35
  store i64 %864, i64* %PC, align 8
  %865 = load i32, i32* %849, align 4
  %866 = sext i32 %865 to i64
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = shl nsw i64 %866, 3
  %868 = add i64 %867, %863
  %869 = add i64 %847, 40
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to double*
  store double %859, double* %870, align 8
  %871 = load i64, i64* %RBP, align 8
  %872 = add i64 %871, -164
  %873 = load i64, i64* %PC, align 8
  %874 = add i64 %873, 6
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %872 to i32*
  %876 = load i32, i32* %875, align 4
  %877 = add i32 %876, 1
  %878 = zext i32 %877 to i64
  store i64 %878, i64* %RAX, align 8, !tbaa !2428
  %879 = icmp eq i32 %876, -1
  %880 = icmp eq i32 %877, 0
  %881 = or i1 %879, %880
  %882 = zext i1 %881 to i8
  store i8 %882, i8* %44, align 1, !tbaa !2432
  %883 = and i32 %877, 255
  %884 = tail call i32 @llvm.ctpop.i32(i32 %883) #9
  %885 = trunc i32 %884 to i8
  %886 = and i8 %885, 1
  %887 = xor i8 %886, 1
  store i8 %887, i8* %51, align 1, !tbaa !2446
  %888 = xor i32 %877, %876
  %889 = lshr i32 %888, 4
  %890 = trunc i32 %889 to i8
  %891 = and i8 %890, 1
  store i8 %891, i8* %57, align 1, !tbaa !2450
  %892 = zext i1 %880 to i8
  store i8 %892, i8* %60, align 1, !tbaa !2447
  %893 = lshr i32 %877, 31
  %894 = trunc i32 %893 to i8
  store i8 %894, i8* %63, align 1, !tbaa !2448
  %895 = lshr i32 %876, 31
  %896 = xor i32 %893, %895
  %897 = add nuw nsw i32 %896, %893
  %898 = icmp eq i32 %897, 2
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %69, align 1, !tbaa !2449
  %900 = add i64 %873, 15
  store i64 %900, i64* %PC, align 8
  store i32 %877, i32* %875, align 4
  %901 = load i64, i64* %PC, align 8
  %902 = add i64 %901, -126
  store i64 %902, i64* %PC, align 8, !tbaa !2428
  br label %block_401111

block_4011ad:                                     ; preds = %block_40119e
  %903 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 64) to i64*), align 16
  store i64 %903, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %904 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 72) to i64*), align 8
  store i64 %904, i64* %128, align 1, !tbaa !2452
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %905 = add i64 %1402, 24
  store i64 %905, i64* %PC, align 8
  %906 = load i32, i32* %1369, align 4
  %907 = sitofp i32 %906 to double
  %908 = bitcast i64 %904 to double
  %909 = fadd double %907, %908
  store double %909, double* %254, align 1, !tbaa !2452
  %910 = add i64 %1366, -48
  %911 = add i64 %1402, 33
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i32*
  %913 = load i32, i32* %912, align 4
  %914 = sitofp i32 %913 to double
  store double %914, double* %127, align 1, !tbaa !2452
  %915 = fdiv double %909, %914
  store double %915, double* %254, align 1, !tbaa !2452
  %916 = add i64 %1366, -152
  %917 = add i64 %1402, 44
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %916 to i64*
  %919 = load i64, i64* %918, align 8
  store i64 %919, i64* %RAX, align 8, !tbaa !2428
  %920 = add i64 %1402, 51
  store i64 %920, i64* %PC, align 8
  %921 = load i32, i32* %1369, align 4
  %922 = sext i32 %921 to i64
  store i64 %922, i64* %RCX, align 8, !tbaa !2428
  %923 = shl nsw i64 %922, 3
  %924 = add i64 %923, %919
  %925 = add i64 %1402, 56
  store i64 %925, i64* %PC, align 8
  %926 = inttoptr i64 %924 to double*
  store double %915, double* %926, align 8
  %927 = load i64, i64* %RBP, align 8
  %928 = add i64 %927, -164
  %929 = load i64, i64* %PC, align 8
  %930 = add i64 %929, 8
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %928 to i32*
  %932 = load i32, i32* %931, align 4
  %933 = sitofp i32 %932 to double
  %934 = load double, double* %122, align 1
  %935 = fadd double %933, %934
  store double %935, double* %127, align 1, !tbaa !2452
  %936 = add i64 %927, -48
  %937 = add i64 %929, 17
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = sitofp i32 %939 to double
  store double %940, double* %122, align 1, !tbaa !2452
  %941 = fdiv double %935, %940
  store double %941, double* %127, align 1, !tbaa !2452
  %942 = add i64 %927, -160
  %943 = add i64 %929, 28
  store i64 %943, i64* %PC, align 8
  %944 = inttoptr i64 %942 to i64*
  %945 = load i64, i64* %944, align 8
  store i64 %945, i64* %RAX, align 8, !tbaa !2428
  %946 = add i64 %929, 35
  store i64 %946, i64* %PC, align 8
  %947 = load i32, i32* %931, align 4
  %948 = sext i32 %947 to i64
  store i64 %948, i64* %RCX, align 8, !tbaa !2428
  %949 = shl nsw i64 %948, 3
  %950 = add i64 %949, %945
  %951 = add i64 %929, 40
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to double*
  store double %941, double* %952, align 8
  %953 = load i64, i64* %RBP, align 8
  %954 = add i64 %953, -164
  %955 = load i64, i64* %PC, align 8
  %956 = add i64 %955, 6
  store i64 %956, i64* %PC, align 8
  %957 = inttoptr i64 %954 to i32*
  %958 = load i32, i32* %957, align 4
  %959 = add i32 %958, 1
  %960 = zext i32 %959 to i64
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = icmp eq i32 %958, -1
  %962 = icmp eq i32 %959, 0
  %963 = or i1 %961, %962
  %964 = zext i1 %963 to i8
  store i8 %964, i8* %44, align 1, !tbaa !2432
  %965 = and i32 %959, 255
  %966 = tail call i32 @llvm.ctpop.i32(i32 %965) #9
  %967 = trunc i32 %966 to i8
  %968 = and i8 %967, 1
  %969 = xor i8 %968, 1
  store i8 %969, i8* %51, align 1, !tbaa !2446
  %970 = xor i32 %959, %958
  %971 = lshr i32 %970, 4
  %972 = trunc i32 %971 to i8
  %973 = and i8 %972, 1
  store i8 %973, i8* %57, align 1, !tbaa !2450
  %974 = zext i1 %962 to i8
  store i8 %974, i8* %60, align 1, !tbaa !2447
  %975 = lshr i32 %959, 31
  %976 = trunc i32 %975 to i8
  store i8 %976, i8* %63, align 1, !tbaa !2448
  %977 = lshr i32 %958, 31
  %978 = xor i32 %975, %977
  %979 = add nuw nsw i32 %978, %975
  %980 = icmp eq i32 %979, 2
  %981 = zext i1 %980 to i8
  store i8 %981, i8* %69, align 1, !tbaa !2449
  %982 = add i64 %955, 15
  store i64 %982, i64* %PC, align 8
  store i32 %959, i32* %957, align 4
  %983 = load i64, i64* %PC, align 8
  %984 = add i64 %983, -126
  store i64 %984, i64* %PC, align 8, !tbaa !2428
  br label %block_40119e

block_401099:                                     ; preds = %block_40108a
  %985 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 48) to i64*), align 16
  store i64 %985, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %986 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 56) to i64*), align 8
  store i64 %986, i64* %128, align 1, !tbaa !2452
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %987 = add i64 %1440, 24
  store i64 %987, i64* %PC, align 8
  %988 = load i32, i32* %1407, align 4
  %989 = sitofp i32 %988 to double
  %990 = bitcast i64 %986 to double
  %991 = fadd double %989, %990
  store double %991, double* %254, align 1, !tbaa !2452
  %992 = add i64 %1404, -48
  %993 = add i64 %1440, 33
  store i64 %993, i64* %PC, align 8
  %994 = inttoptr i64 %992 to i32*
  %995 = load i32, i32* %994, align 4
  %996 = sitofp i32 %995 to double
  store double %996, double* %127, align 1, !tbaa !2452
  %997 = fdiv double %991, %996
  store double %997, double* %254, align 1, !tbaa !2452
  %998 = add i64 %1404, -120
  %999 = add i64 %1440, 41
  store i64 %999, i64* %PC, align 8
  %1000 = inttoptr i64 %998 to i64*
  %1001 = load i64, i64* %1000, align 8
  store i64 %1001, i64* %RAX, align 8, !tbaa !2428
  %1002 = add i64 %1440, 48
  store i64 %1002, i64* %PC, align 8
  %1003 = load i32, i32* %1407, align 4
  %1004 = sext i32 %1003 to i64
  store i64 %1004, i64* %RCX, align 8, !tbaa !2428
  %1005 = shl nsw i64 %1004, 3
  %1006 = add i64 %1005, %1001
  %1007 = add i64 %1440, 53
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to double*
  store double %997, double* %1008, align 8
  %1009 = load i64, i64* %RBP, align 8
  %1010 = add i64 %1009, -164
  %1011 = load i64, i64* %PC, align 8
  %1012 = add i64 %1011, 8
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1010 to i32*
  %1014 = load i32, i32* %1013, align 4
  %1015 = sitofp i32 %1014 to double
  %1016 = load double, double* %122, align 1
  %1017 = fadd double %1015, %1016
  store double %1017, double* %127, align 1, !tbaa !2452
  %1018 = add i64 %1009, -48
  %1019 = add i64 %1011, 17
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i32*
  %1021 = load i32, i32* %1020, align 4
  %1022 = sitofp i32 %1021 to double
  store double %1022, double* %122, align 1, !tbaa !2452
  %1023 = fdiv double %1017, %1022
  store double %1023, double* %127, align 1, !tbaa !2452
  %1024 = add i64 %1009, -128
  %1025 = add i64 %1011, 25
  store i64 %1025, i64* %PC, align 8
  %1026 = inttoptr i64 %1024 to i64*
  %1027 = load i64, i64* %1026, align 8
  store i64 %1027, i64* %RAX, align 8, !tbaa !2428
  %1028 = add i64 %1011, 32
  store i64 %1028, i64* %PC, align 8
  %1029 = load i32, i32* %1013, align 4
  %1030 = sext i32 %1029 to i64
  store i64 %1030, i64* %RCX, align 8, !tbaa !2428
  %1031 = shl nsw i64 %1030, 3
  %1032 = add i64 %1031, %1027
  %1033 = add i64 %1011, 37
  store i64 %1033, i64* %PC, align 8
  %1034 = inttoptr i64 %1032 to double*
  store double %1023, double* %1034, align 8
  %1035 = load i64, i64* %RBP, align 8
  %1036 = add i64 %1035, -164
  %1037 = load i64, i64* %PC, align 8
  %1038 = add i64 %1037, 6
  store i64 %1038, i64* %PC, align 8
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039, align 4
  %1041 = add i32 %1040, 1
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = icmp eq i32 %1040, -1
  %1044 = icmp eq i32 %1041, 0
  %1045 = or i1 %1043, %1044
  %1046 = zext i1 %1045 to i8
  store i8 %1046, i8* %44, align 1, !tbaa !2432
  %1047 = and i32 %1041, 255
  %1048 = tail call i32 @llvm.ctpop.i32(i32 %1047) #9
  %1049 = trunc i32 %1048 to i8
  %1050 = and i8 %1049, 1
  %1051 = xor i8 %1050, 1
  store i8 %1051, i8* %51, align 1, !tbaa !2446
  %1052 = xor i32 %1041, %1040
  %1053 = lshr i32 %1052, 4
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  store i8 %1055, i8* %57, align 1, !tbaa !2450
  %1056 = zext i1 %1044 to i8
  store i8 %1056, i8* %60, align 1, !tbaa !2447
  %1057 = lshr i32 %1041, 31
  %1058 = trunc i32 %1057 to i8
  store i8 %1058, i8* %63, align 1, !tbaa !2448
  %1059 = lshr i32 %1040, 31
  %1060 = xor i32 %1057, %1059
  %1061 = add nuw nsw i32 %1060, %1057
  %1062 = icmp eq i32 %1061, 2
  %1063 = zext i1 %1062 to i8
  store i8 %1063, i8* %69, align 1, !tbaa !2449
  %1064 = add i64 %1037, 15
  store i64 %1064, i64* %PC, align 8
  store i32 %1041, i32* %1039, align 4
  %1065 = load i64, i64* %PC, align 8
  %1066 = add i64 %1065, -120
  store i64 %1066, i64* %PC, align 8, !tbaa !2428
  br label %block_40108a

block_401494:                                     ; preds = %block_40122b
  %1067 = load i64, i64* %RSP, align 8
  %1068 = add i64 %1067, 24
  store i64 %1068, i64* %RSP, align 8, !tbaa !2428
  %1069 = icmp ugt i64 %1067, -25
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %44, align 1, !tbaa !2432
  %1071 = trunc i64 %1068 to i32
  %1072 = and i32 %1071, 255
  %1073 = tail call i32 @llvm.ctpop.i32(i32 %1072) #9
  %1074 = trunc i32 %1073 to i8
  %1075 = and i8 %1074, 1
  %1076 = xor i8 %1075, 1
  store i8 %1076, i8* %51, align 1, !tbaa !2446
  %1077 = xor i64 %1067, 16
  %1078 = xor i64 %1077, %1068
  %1079 = lshr i64 %1078, 4
  %1080 = trunc i64 %1079 to i8
  %1081 = and i8 %1080, 1
  store i8 %1081, i8* %57, align 1, !tbaa !2450
  %1082 = icmp eq i64 %1068, 0
  %1083 = zext i1 %1082 to i8
  store i8 %1083, i8* %60, align 1, !tbaa !2447
  %1084 = lshr i64 %1068, 63
  %1085 = trunc i64 %1084 to i8
  store i8 %1085, i8* %63, align 1, !tbaa !2448
  %1086 = lshr i64 %1067, 63
  %1087 = xor i64 %1084, %1086
  %1088 = add nuw nsw i64 %1087, %1084
  %1089 = icmp eq i64 %1088, 2
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %69, align 1, !tbaa !2449
  %1091 = add i64 %817, 5
  store i64 %1091, i64* %PC, align 8
  %1092 = add i64 %1067, 32
  %1093 = inttoptr i64 %1068 to i64*
  %1094 = load i64, i64* %1093, align 8
  store i64 %1094, i64* %RBX, align 8, !tbaa !2428
  store i64 %1092, i64* %RSP, align 8, !tbaa !2428
  %1095 = add i64 %817, 7
  store i64 %1095, i64* %PC, align 8
  %1096 = add i64 %1067, 40
  %1097 = inttoptr i64 %1092 to i64*
  %1098 = load i64, i64* %1097, align 8
  store i64 %1098, i64* %R12, align 8, !tbaa !2428
  store i64 %1096, i64* %RSP, align 8, !tbaa !2428
  %1099 = add i64 %817, 9
  store i64 %1099, i64* %PC, align 8
  %1100 = add i64 %1067, 48
  %1101 = inttoptr i64 %1096 to i64*
  %1102 = load i64, i64* %1101, align 8
  store i64 %1102, i64* %R13, align 8, !tbaa !2428
  store i64 %1100, i64* %RSP, align 8, !tbaa !2428
  %1103 = add i64 %817, 11
  store i64 %1103, i64* %PC, align 8
  %1104 = add i64 %1067, 56
  %1105 = inttoptr i64 %1100 to i64*
  %1106 = load i64, i64* %1105, align 8
  store i64 %1106, i64* %R14, align 8, !tbaa !2428
  store i64 %1104, i64* %RSP, align 8, !tbaa !2428
  %1107 = add i64 %817, 13
  store i64 %1107, i64* %PC, align 8
  %1108 = add i64 %1067, 64
  %1109 = inttoptr i64 %1104 to i64*
  %1110 = load i64, i64* %1109, align 8
  store i64 %1110, i64* %R15, align 8, !tbaa !2428
  store i64 %1108, i64* %RSP, align 8, !tbaa !2428
  %1111 = add i64 %817, 14
  store i64 %1111, i64* %PC, align 8
  %1112 = add i64 %1067, 72
  %1113 = inttoptr i64 %1108 to i64*
  %1114 = load i64, i64* %1113, align 8
  store i64 %1114, i64* %RBP, align 8, !tbaa !2428
  store i64 %1112, i64* %RSP, align 8, !tbaa !2428
  %1115 = add i64 %817, 15
  store i64 %1115, i64* %PC, align 8
  %1116 = inttoptr i64 %1112 to i64*
  %1117 = load i64, i64* %1116, align 8
  store i64 %1117, i64* %PC, align 8, !tbaa !2428
  %1118 = add i64 %1067, 80
  store i64 %1118, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_40147b:                                     ; preds = %block_401244
  %1119 = add i64 %297, -164
  %1120 = add i64 %333, 11
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i32*
  %1122 = load i32, i32* %1121, align 4
  %1123 = add i32 %1122, 1
  %1124 = zext i32 %1123 to i64
  store i64 %1124, i64* %RAX, align 8, !tbaa !2428
  %1125 = icmp eq i32 %1122, -1
  %1126 = icmp eq i32 %1123, 0
  %1127 = or i1 %1125, %1126
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %44, align 1, !tbaa !2432
  %1129 = and i32 %1123, 255
  %1130 = tail call i32 @llvm.ctpop.i32(i32 %1129) #9
  %1131 = trunc i32 %1130 to i8
  %1132 = and i8 %1131, 1
  %1133 = xor i8 %1132, 1
  store i8 %1133, i8* %51, align 1, !tbaa !2446
  %1134 = xor i32 %1123, %1122
  %1135 = lshr i32 %1134, 4
  %1136 = trunc i32 %1135 to i8
  %1137 = and i8 %1136, 1
  store i8 %1137, i8* %57, align 1, !tbaa !2450
  %1138 = zext i1 %1126 to i8
  store i8 %1138, i8* %60, align 1, !tbaa !2447
  %1139 = lshr i32 %1123, 31
  %1140 = trunc i32 %1139 to i8
  store i8 %1140, i8* %63, align 1, !tbaa !2448
  %1141 = lshr i32 %1122, 31
  %1142 = xor i32 %1139, %1141
  %1143 = add nuw nsw i32 %1142, %1139
  %1144 = icmp eq i32 %1143, 2
  %1145 = zext i1 %1144 to i8
  store i8 %1145, i8* %69, align 1, !tbaa !2449
  %1146 = add i64 %333, 20
  store i64 %1146, i64* %PC, align 8
  store i32 %1123, i32* %1121, align 4
  %1147 = load i64, i64* %PC, align 8
  %1148 = add i64 %1147, -612
  store i64 %1148, i64* %PC, align 8, !tbaa !2428
  br label %block_40122b

block_401253:                                     ; preds = %block_401244
  %1149 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 24) to i64*), align 8
  store i64 %1149, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %1150 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 32) to i64*), align 16
  store i64 %1150, i64* %128, align 1, !tbaa !2452
  store double 0.000000e+00, double* %130, align 1, !tbaa !2452
  %1151 = add i64 %297, -164
  %1152 = add i64 %333, 24
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1151 to i32*
  %1154 = load i32, i32* %1153, align 4
  %1155 = sitofp i32 %1154 to double
  store double %1155, double* %254, align 1, !tbaa !2452
  %1156 = add i64 %333, 30
  store i64 %1156, i64* %PC, align 8
  %1157 = load i32, i32* %300, align 4
  %1158 = add i32 %1157, 1
  %1159 = zext i32 %1158 to i64
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = icmp eq i32 %1157, -1
  %1161 = icmp eq i32 %1158, 0
  %1162 = or i1 %1160, %1161
  %1163 = zext i1 %1162 to i8
  store i8 %1163, i8* %44, align 1, !tbaa !2432
  %1164 = and i32 %1158, 255
  %1165 = tail call i32 @llvm.ctpop.i32(i32 %1164) #9
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = xor i8 %1167, 1
  store i8 %1168, i8* %51, align 1, !tbaa !2446
  %1169 = xor i32 %1158, %1157
  %1170 = lshr i32 %1169, 4
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  store i8 %1172, i8* %57, align 1, !tbaa !2450
  %1173 = zext i1 %1161 to i8
  store i8 %1173, i8* %60, align 1, !tbaa !2447
  %1174 = lshr i32 %1158, 31
  %1175 = trunc i32 %1174 to i8
  store i8 %1175, i8* %63, align 1, !tbaa !2448
  %1176 = lshr i32 %1157, 31
  %1177 = xor i32 %1174, %1176
  %1178 = add nuw nsw i32 %1177, %1174
  %1179 = icmp eq i32 %1178, 2
  %1180 = zext i1 %1179 to i8
  store i8 %1180, i8* %69, align 1, !tbaa !2449
  %1181 = sitofp i32 %1158 to double
  store double %1181, double* %819, align 1, !tbaa !2452
  %1182 = fmul double %1181, %1155
  %1183 = bitcast i64 %1150 to double
  %1184 = fadd double %1182, %1183
  store double %1184, double* %254, align 1, !tbaa !2452
  %1185 = add i64 %333, 50
  store i64 %1185, i64* %PC, align 8
  %1186 = load i32, i32* %305, align 4
  %1187 = sitofp i32 %1186 to double
  store double %1187, double* %127, align 1, !tbaa !2452
  %1188 = fdiv double %1184, %1187
  store double %1188, double* %254, align 1, !tbaa !2452
  %1189 = add i64 %297, -88
  %1190 = add i64 %333, 58
  store i64 %1190, i64* %PC, align 8
  %1191 = inttoptr i64 %1189 to i64*
  %1192 = load i64, i64* %1191, align 8
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1193 = add i64 %333, 65
  store i64 %1193, i64* %PC, align 8
  %1194 = load i32, i32* %1153, align 4
  %1195 = sext i32 %1194 to i64
  %1196 = mul nsw i64 %1195, 520
  store i64 %1196, i64* %RDX, align 8, !tbaa !2428
  %1197 = lshr i64 %1196, 63
  %1198 = add i64 %1196, %1192
  store i64 %1198, i64* %RCX, align 8, !tbaa !2428
  %1199 = icmp ult i64 %1198, %1192
  %1200 = icmp ult i64 %1198, %1196
  %1201 = or i1 %1199, %1200
  %1202 = zext i1 %1201 to i8
  store i8 %1202, i8* %44, align 1, !tbaa !2432
  %1203 = trunc i64 %1198 to i32
  %1204 = and i32 %1203, 255
  %1205 = tail call i32 @llvm.ctpop.i32(i32 %1204) #9
  %1206 = trunc i32 %1205 to i8
  %1207 = and i8 %1206, 1
  %1208 = xor i8 %1207, 1
  store i8 %1208, i8* %51, align 1, !tbaa !2446
  %1209 = xor i64 %1196, %1192
  %1210 = xor i64 %1209, %1198
  %1211 = lshr i64 %1210, 4
  %1212 = trunc i64 %1211 to i8
  %1213 = and i8 %1212, 1
  store i8 %1213, i8* %57, align 1, !tbaa !2450
  %1214 = icmp eq i64 %1198, 0
  %1215 = zext i1 %1214 to i8
  store i8 %1215, i8* %60, align 1, !tbaa !2447
  %1216 = lshr i64 %1198, 63
  %1217 = trunc i64 %1216 to i8
  store i8 %1217, i8* %63, align 1, !tbaa !2448
  %1218 = lshr i64 %1192, 63
  %1219 = xor i64 %1216, %1218
  %1220 = xor i64 %1216, %1197
  %1221 = add nuw nsw i64 %1219, %1220
  %1222 = icmp eq i64 %1221, 2
  %1223 = zext i1 %1222 to i8
  store i8 %1223, i8* %69, align 1, !tbaa !2449
  %1224 = load i64, i64* %RBP, align 8
  %1225 = add i64 %1224, -168
  %1226 = add i64 %333, 82
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1225 to i32*
  %1228 = load i32, i32* %1227, align 4
  %1229 = sext i32 %1228 to i64
  store i64 %1229, i64* %RDX, align 8, !tbaa !2428
  %1230 = shl nsw i64 %1229, 3
  %1231 = add i64 %1230, %1198
  %1232 = add i64 %333, 87
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1231 to double*
  store double %1188, double* %1233, align 8
  %1234 = load i64, i64* %RBP, align 8
  %1235 = add i64 %1234, -164
  %1236 = load i64, i64* %PC, align 8
  %1237 = add i64 %1236, 8
  store i64 %1237, i64* %PC, align 8
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238, align 4
  %1240 = sitofp i32 %1239 to double
  store double %1240, double* %127, align 1, !tbaa !2452
  %1241 = add i64 %1234, -168
  %1242 = add i64 %1236, 14
  store i64 %1242, i64* %PC, align 8
  %1243 = inttoptr i64 %1241 to i32*
  %1244 = load i32, i32* %1243, align 4
  %1245 = add i32 %1244, 2
  %1246 = zext i32 %1245 to i64
  store i64 %1246, i64* %RAX, align 8, !tbaa !2428
  %1247 = icmp ugt i32 %1244, -3
  %1248 = zext i1 %1247 to i8
  store i8 %1248, i8* %44, align 1, !tbaa !2432
  %1249 = and i32 %1245, 255
  %1250 = tail call i32 @llvm.ctpop.i32(i32 %1249) #9
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  store i8 %1253, i8* %51, align 1, !tbaa !2446
  %1254 = xor i32 %1245, %1244
  %1255 = lshr i32 %1254, 4
  %1256 = trunc i32 %1255 to i8
  %1257 = and i8 %1256, 1
  store i8 %1257, i8* %57, align 1, !tbaa !2450
  %1258 = icmp eq i32 %1245, 0
  %1259 = zext i1 %1258 to i8
  store i8 %1259, i8* %60, align 1, !tbaa !2447
  %1260 = lshr i32 %1245, 31
  %1261 = trunc i32 %1260 to i8
  store i8 %1261, i8* %63, align 1, !tbaa !2448
  %1262 = lshr i32 %1244, 31
  %1263 = xor i32 %1260, %1262
  %1264 = add nuw nsw i32 %1263, %1260
  %1265 = icmp eq i32 %1264, 2
  %1266 = zext i1 %1265 to i8
  store i8 %1266, i8* %69, align 1, !tbaa !2449
  %1267 = sitofp i32 %1245 to double
  store double %1267, double* %254, align 1, !tbaa !2452
  %1268 = fmul double %1267, %1240
  %1269 = load double, double* %122, align 1
  %1270 = fadd double %1268, %1269
  store double %1270, double* %127, align 1, !tbaa !2452
  %1271 = add i64 %1234, -52
  %1272 = add i64 %1236, 34
  store i64 %1272, i64* %PC, align 8
  %1273 = inttoptr i64 %1271 to i32*
  %1274 = load i32, i32* %1273, align 4
  %1275 = sitofp i32 %1274 to double
  store double %1275, double* %122, align 1, !tbaa !2452
  %1276 = fdiv double %1270, %1275
  store double %1276, double* %127, align 1, !tbaa !2452
  %1277 = add i64 %1234, -80
  %1278 = add i64 %1236, 42
  store i64 %1278, i64* %PC, align 8
  %1279 = inttoptr i64 %1277 to i64*
  %1280 = load i64, i64* %1279, align 8
  store i64 %1280, i64* %RCX, align 8, !tbaa !2428
  %1281 = add i64 %1236, 49
  store i64 %1281, i64* %PC, align 8
  %1282 = load i32, i32* %1238, align 4
  %1283 = sext i32 %1282 to i64
  %1284 = mul nsw i64 %1283, 520
  store i64 %1284, i64* %RDX, align 8, !tbaa !2428
  %1285 = lshr i64 %1284, 63
  %1286 = add i64 %1284, %1280
  store i64 %1286, i64* %RCX, align 8, !tbaa !2428
  %1287 = icmp ult i64 %1286, %1280
  %1288 = icmp ult i64 %1286, %1284
  %1289 = or i1 %1287, %1288
  %1290 = zext i1 %1289 to i8
  store i8 %1290, i8* %44, align 1, !tbaa !2432
  %1291 = trunc i64 %1286 to i32
  %1292 = and i32 %1291, 255
  %1293 = tail call i32 @llvm.ctpop.i32(i32 %1292) #9
  %1294 = trunc i32 %1293 to i8
  %1295 = and i8 %1294, 1
  %1296 = xor i8 %1295, 1
  store i8 %1296, i8* %51, align 1, !tbaa !2446
  %1297 = xor i64 %1284, %1280
  %1298 = xor i64 %1297, %1286
  %1299 = lshr i64 %1298, 4
  %1300 = trunc i64 %1299 to i8
  %1301 = and i8 %1300, 1
  store i8 %1301, i8* %57, align 1, !tbaa !2450
  %1302 = icmp eq i64 %1286, 0
  %1303 = zext i1 %1302 to i8
  store i8 %1303, i8* %60, align 1, !tbaa !2447
  %1304 = lshr i64 %1286, 63
  %1305 = trunc i64 %1304 to i8
  store i8 %1305, i8* %63, align 1, !tbaa !2448
  %1306 = lshr i64 %1280, 63
  %1307 = xor i64 %1304, %1306
  %1308 = xor i64 %1304, %1285
  %1309 = add nuw nsw i64 %1307, %1308
  %1310 = icmp eq i64 %1309, 2
  %1311 = zext i1 %1310 to i8
  store i8 %1311, i8* %69, align 1, !tbaa !2449
  %1312 = load i64, i64* %RBP, align 8
  %1313 = add i64 %1312, -168
  %1314 = add i64 %1236, 66
  store i64 %1314, i64* %PC, align 8
  %1315 = inttoptr i64 %1313 to i32*
  %1316 = load i32, i32* %1315, align 4
  %1317 = sext i32 %1316 to i64
  store i64 %1317, i64* %RDX, align 8, !tbaa !2428
  %1318 = shl nsw i64 %1317, 3
  %1319 = add i64 %1318, %1286
  %1320 = add i64 %1236, 71
  store i64 %1320, i64* %PC, align 8
  %1321 = inttoptr i64 %1319 to double*
  store double %1276, double* %1321, align 8
  %1322 = load i64, i64* %RBP, align 8
  %1323 = add i64 %1322, -172
  %1324 = load i64, i64* %PC, align 8
  %1325 = add i64 %1324, 10
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1323 to i32*
  store i32 0, i32* %1326, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4012fb

block_401111:                                     ; preds = %block_401107, %block_401120
  %1327 = phi i64 [ %.pre16, %block_401107 ], [ %902, %block_401120 ]
  %1328 = load i64, i64* %RBP, align 8
  %1329 = add i64 %1328, -164
  %1330 = add i64 %1327, 6
  store i64 %1330, i64* %PC, align 8
  %1331 = inttoptr i64 %1329 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = zext i32 %1332 to i64
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = add i64 %1328, -48
  %1335 = add i64 %1327, 9
  store i64 %1335, i64* %PC, align 8
  %1336 = inttoptr i64 %1334 to i32*
  %1337 = load i32, i32* %1336, align 4
  %1338 = sub i32 %1332, %1337
  %1339 = icmp ult i32 %1332, %1337
  %1340 = zext i1 %1339 to i8
  store i8 %1340, i8* %44, align 1, !tbaa !2432
  %1341 = and i32 %1338, 255
  %1342 = tail call i32 @llvm.ctpop.i32(i32 %1341) #9
  %1343 = trunc i32 %1342 to i8
  %1344 = and i8 %1343, 1
  %1345 = xor i8 %1344, 1
  store i8 %1345, i8* %51, align 1, !tbaa !2446
  %1346 = xor i32 %1337, %1332
  %1347 = xor i32 %1346, %1338
  %1348 = lshr i32 %1347, 4
  %1349 = trunc i32 %1348 to i8
  %1350 = and i8 %1349, 1
  store i8 %1350, i8* %57, align 1, !tbaa !2450
  %1351 = icmp eq i32 %1338, 0
  %1352 = zext i1 %1351 to i8
  store i8 %1352, i8* %60, align 1, !tbaa !2447
  %1353 = lshr i32 %1338, 31
  %1354 = trunc i32 %1353 to i8
  store i8 %1354, i8* %63, align 1, !tbaa !2448
  %1355 = lshr i32 %1332, 31
  %1356 = lshr i32 %1337, 31
  %1357 = xor i32 %1356, %1355
  %1358 = xor i32 %1353, %1355
  %1359 = add nuw nsw i32 %1358, %1357
  %1360 = icmp eq i32 %1359, 2
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %69, align 1, !tbaa !2449
  %1362 = icmp ne i8 %1354, 0
  %1363 = xor i1 %1362, %1360
  %.demorgan21 = or i1 %1351, %1363
  %.v28 = select i1 %.demorgan21, i64 15, i64 131
  %1364 = add i64 %1327, %.v28
  store i64 %1364, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan21, label %block_401120, label %block_401194

block_40119e:                                     ; preds = %block_4011ad, %block_401194
  %1365 = phi i64 [ %984, %block_4011ad ], [ %.pre17, %block_401194 ]
  %1366 = load i64, i64* %RBP, align 8
  %1367 = add i64 %1366, -164
  %1368 = add i64 %1365, 6
  store i64 %1368, i64* %PC, align 8
  %1369 = inttoptr i64 %1367 to i32*
  %1370 = load i32, i32* %1369, align 4
  %1371 = zext i32 %1370 to i64
  store i64 %1371, i64* %RAX, align 8, !tbaa !2428
  %1372 = add i64 %1366, -52
  %1373 = add i64 %1365, 9
  store i64 %1373, i64* %PC, align 8
  %1374 = inttoptr i64 %1372 to i32*
  %1375 = load i32, i32* %1374, align 4
  %1376 = sub i32 %1370, %1375
  %1377 = icmp ult i32 %1370, %1375
  %1378 = zext i1 %1377 to i8
  store i8 %1378, i8* %44, align 1, !tbaa !2432
  %1379 = and i32 %1376, 255
  %1380 = tail call i32 @llvm.ctpop.i32(i32 %1379) #9
  %1381 = trunc i32 %1380 to i8
  %1382 = and i8 %1381, 1
  %1383 = xor i8 %1382, 1
  store i8 %1383, i8* %51, align 1, !tbaa !2446
  %1384 = xor i32 %1375, %1370
  %1385 = xor i32 %1384, %1376
  %1386 = lshr i32 %1385, 4
  %1387 = trunc i32 %1386 to i8
  %1388 = and i8 %1387, 1
  store i8 %1388, i8* %57, align 1, !tbaa !2450
  %1389 = icmp eq i32 %1376, 0
  %1390 = zext i1 %1389 to i8
  store i8 %1390, i8* %60, align 1, !tbaa !2447
  %1391 = lshr i32 %1376, 31
  %1392 = trunc i32 %1391 to i8
  store i8 %1392, i8* %63, align 1, !tbaa !2448
  %1393 = lshr i32 %1370, 31
  %1394 = lshr i32 %1375, 31
  %1395 = xor i32 %1394, %1393
  %1396 = xor i32 %1391, %1393
  %1397 = add nuw nsw i32 %1396, %1395
  %1398 = icmp eq i32 %1397, 2
  %1399 = zext i1 %1398 to i8
  store i8 %1399, i8* %69, align 1, !tbaa !2449
  %1400 = icmp ne i8 %1392, 0
  %1401 = xor i1 %1400, %1398
  %.demorgan22 = or i1 %1389, %1401
  %.v29 = select i1 %.demorgan22, i64 15, i64 131
  %1402 = add i64 %1365, %.v29
  store i64 %1402, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan22, label %block_4011ad, label %block_401221

block_40108a:                                     ; preds = %block_401099, %block_400fc0
  %1403 = phi i64 [ %1066, %block_401099 ], [ %.pre, %block_400fc0 ]
  %1404 = load i64, i64* %RBP, align 8
  %1405 = add i64 %1404, -164
  %1406 = add i64 %1403, 6
  store i64 %1406, i64* %PC, align 8
  %1407 = inttoptr i64 %1405 to i32*
  %1408 = load i32, i32* %1407, align 4
  %1409 = zext i32 %1408 to i64
  store i64 %1409, i64* %RAX, align 8, !tbaa !2428
  %1410 = add i64 %1404, -44
  %1411 = add i64 %1403, 9
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1410 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = sub i32 %1408, %1413
  %1415 = icmp ult i32 %1408, %1413
  %1416 = zext i1 %1415 to i8
  store i8 %1416, i8* %44, align 1, !tbaa !2432
  %1417 = and i32 %1414, 255
  %1418 = tail call i32 @llvm.ctpop.i32(i32 %1417) #9
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  %1421 = xor i8 %1420, 1
  store i8 %1421, i8* %51, align 1, !tbaa !2446
  %1422 = xor i32 %1413, %1408
  %1423 = xor i32 %1422, %1414
  %1424 = lshr i32 %1423, 4
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  store i8 %1426, i8* %57, align 1, !tbaa !2450
  %1427 = icmp eq i32 %1414, 0
  %1428 = zext i1 %1427 to i8
  store i8 %1428, i8* %60, align 1, !tbaa !2447
  %1429 = lshr i32 %1414, 31
  %1430 = trunc i32 %1429 to i8
  store i8 %1430, i8* %63, align 1, !tbaa !2448
  %1431 = lshr i32 %1408, 31
  %1432 = lshr i32 %1413, 31
  %1433 = xor i32 %1432, %1431
  %1434 = xor i32 %1429, %1431
  %1435 = add nuw nsw i32 %1434, %1433
  %1436 = icmp eq i32 %1435, 2
  %1437 = zext i1 %1436 to i8
  store i8 %1437, i8* %69, align 1, !tbaa !2449
  %1438 = icmp ne i8 %1430, 0
  %1439 = xor i1 %1438, %1436
  %.demorgan = or i1 %1427, %1439
  %.v27 = select i1 %.demorgan, i64 15, i64 125
  %1440 = add i64 %1403, %.v27
  store i64 %1440, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_401099, label %block_401107

block_401107:                                     ; preds = %block_40108a
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %1442 = add i64 %1440, 10
  store i64 %1442, i64* %PC, align 8
  store i32 0, i32* %1407, align 4
  %.pre16 = load i64, i64* %PC, align 8
  br label %block_401111
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400830_xmalloc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400830:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2450
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  store i64 32, i64* %RCX, align 8, !tbaa !2428
  store i64 32, i64* %RSI, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 22
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 8
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 0, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDX, align 8, !tbaa !2428
  %54 = load i64, i64* %RAX, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %50, -639
  %56 = add i64 %50, 12
  %57 = load i64, i64* %RSP, align 8, !tbaa !2428
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %56, i64* %59, align 8
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  store i64 %55, i64* %PC, align 8, !tbaa !2428
  %60 = tail call fastcc %struct.Memory* @ext_604108_posix_memalign(%struct.State* nonnull %0, %struct.Memory* %2)
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -20
  %63 = load i32, i32* %EAX, align 4
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i32*
  store i32 %63, i32* %66, align 4
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -16
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2450
  %79 = icmp eq i64 %72, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2447
  %81 = lshr i64 %72, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  %.v = select i1 %79, i64 21, i64 11
  %83 = add i64 %69, %.v
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  br i1 %79, label %block_400873, label %block_400869

block_400873:                                     ; preds = %block_400869, %block_400830
  %84 = phi i64 [ %120, %block_400869 ], [ %83, %block_400830 ]
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 119), i64* %RSI, align 8, !tbaa !2428
  %85 = load i64, i64* @stderr, align 32
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %86 = add i64 %84, -707
  %87 = add i64 %84, 25
  %88 = load i64, i64* %RSP, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %91 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %60)
  %92 = load i64, i64* %PC, align 8
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -24
  %95 = load i32, i32* %EAX, align 4
  %96 = add i64 %92, 8
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %97, align 4
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, -724
  %100 = add i64 %98, 5
  %101 = load i64, i64* %RSP, align 8, !tbaa !2428
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %100, i64* %103, align 8
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %104 = tail call fastcc %struct.Memory* @ext_4005c0_exit(%struct.State* nonnull %0, %struct.Memory* %91)
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %105, %struct.Memory* %104)
  ret %struct.Memory* %106

block_400869:                                     ; preds = %block_400830
  %107 = add i64 %67, -20
  %108 = add i64 %83, 4
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  store i8 0, i8* %13, align 1, !tbaa !2432
  %111 = and i32 %110, 255
  %112 = tail call i32 @llvm.ctpop.i32(i32 %111) #9
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  %115 = xor i8 %114, 1
  store i8 %115, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2450
  %116 = icmp eq i32 %110, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2447
  %118 = lshr i32 %110, 31
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  %.v2 = select i1 %116, i64 48, i64 10
  %120 = add i64 %83, %.v2
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  br i1 %116, label %block_400899, label %block_400873

block_400899:                                     ; preds = %block_400869
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %71, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = load i64, i64* %RSP, align 8
  %124 = add i64 %123, 32
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  %125 = icmp ugt i64 %123, -33
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %13, align 1, !tbaa !2432
  %127 = trunc i64 %124 to i32
  %128 = and i32 %127, 255
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #9
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %20, align 1, !tbaa !2446
  %133 = xor i64 %124, %123
  %134 = lshr i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  store i8 %136, i8* %25, align 1, !tbaa !2450
  %137 = icmp eq i64 %124, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %28, align 1, !tbaa !2447
  %139 = lshr i64 %124, 63
  %140 = trunc i64 %139 to i8
  store i8 %140, i8* %31, align 1, !tbaa !2448
  %141 = lshr i64 %123, 63
  %142 = xor i64 %139, %141
  %143 = add nuw nsw i64 %142, %139
  %144 = icmp eq i64 %143, 2
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %37, align 1, !tbaa !2449
  %146 = add i64 %120, 9
  store i64 %146, i64* %PC, align 8
  %147 = add i64 %123, 40
  %148 = inttoptr i64 %124 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RBP, align 8, !tbaa !2428
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %150 = add i64 %120, 10
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %147 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %153 = add i64 %123, 48
  store i64 %153, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %60
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400550__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400550:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #9
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2447
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2448
  store i8 0, i8* %10, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400562, label %block_400560

block_400560:                                     ; preds = %block_400550
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400562

block_400562:                                     ; preds = %block_400560, %block_400550
  %27 = phi i64 [ %22, %block_400550 ], [ %.pre1, %block_400560 ]
  %28 = phi i64 [ %4, %block_400550 ], [ %.pre, %block_400560 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400550 ], [ %26, %block_400560 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #9
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2450
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2447
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2448
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2449
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006d0_polybench_flush_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4006d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2450
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2449
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %38 = add i64 %6, -12
  %39 = add i64 %9, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i32*
  store i32 4194560, i32* %40, align 4
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -4
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %42 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %43, -326
  %49 = add i64 %43, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call fastcc %struct.Memory* @ext_6040f0_calloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %54 = load i64, i64* %PC, align 8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %56, align 1, !tbaa !2451
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %RAX, align 8
  %60 = add i64 %54, 7
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC, align 8
  %66 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %67 = load i64, i64* %66, align 1
  %68 = inttoptr i64 %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -20
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  store i32 0, i32* %73, align 4
  %74 = bitcast %union.VectorReg* %3 to double*
  %75 = bitcast i64* %55 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_400702

block_40070e:                                     ; preds = %block_400702
  %76 = add i64 %199, 8
  store i64 %76, i64* %PC, align 8
  %77 = load i32, i32* %166, align 4
  %78 = sext i32 %77 to i64
  store i64 %78, i64* %RCX, align 8, !tbaa !2428
  %79 = shl nsw i64 %78, 3
  %80 = add i64 %79, %203
  %81 = add i64 %199, 13
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %66, align 1, !tbaa !2452
  store double 0.000000e+00, double* %75, align 1, !tbaa !2452
  %84 = add i64 %163, -32
  %85 = add i64 %199, 18
  store i64 %85, i64* %PC, align 8
  %86 = bitcast i64 %83 to double
  %87 = inttoptr i64 %84 to double*
  %88 = load double, double* %87, align 8
  %89 = fadd double %86, %88
  store double %89, double* %74, align 1, !tbaa !2452
  store i64 0, i64* %55, align 1, !tbaa !2452
  %90 = add i64 %199, 23
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %84 to double*
  store double %89, double* %91, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -20
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %97, 1
  %99 = zext i32 %98 to i64
  store i64 %99, i64* %RAX, align 8, !tbaa !2428
  %100 = icmp eq i32 %97, -1
  %101 = icmp eq i32 %98, 0
  %102 = or i1 %100, %101
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %13, align 1, !tbaa !2432
  %104 = and i32 %98, 255
  %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #9
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  store i8 %108, i8* %20, align 1, !tbaa !2446
  %109 = xor i32 %98, %97
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  store i8 %112, i8* %25, align 1, !tbaa !2450
  %113 = zext i1 %101 to i8
  store i8 %113, i8* %28, align 1, !tbaa !2447
  %114 = lshr i32 %98, 31
  %115 = trunc i32 %114 to i8
  store i8 %115, i8* %31, align 1, !tbaa !2448
  %116 = lshr i32 %97, 31
  %117 = xor i32 %114, %116
  %118 = add nuw nsw i32 %117, %114
  %119 = icmp eq i32 %118, 2
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %37, align 1, !tbaa !2449
  %121 = add i64 %94, 9
  store i64 %121, i64* %PC, align 8
  store i32 %98, i32* %96, align 4
  %122 = load i64, i64* %PC, align 8
  %123 = add i64 %122, -44
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  br label %block_400702

block_400733:                                     ; preds = %block_400702
  store i64 %203, i64* %RDI, align 8, !tbaa !2428
  %124 = add i64 %199, -435
  %125 = add i64 %199, 12
  %126 = load i64, i64* %RSP, align 8, !tbaa !2428
  %127 = add i64 %126, -8
  %128 = inttoptr i64 %127 to i64*
  store i64 %125, i64* %128, align 8
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  %129 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %53)
  %130 = load i64, i64* %RSP, align 8
  %131 = load i64, i64* %PC, align 8
  %132 = add i64 %130, 32
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  %133 = icmp ugt i64 %130, -33
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %13, align 1, !tbaa !2432
  %135 = trunc i64 %132 to i32
  %136 = and i32 %135, 255
  %137 = tail call i32 @llvm.ctpop.i32(i32 %136) #9
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  store i8 %140, i8* %20, align 1, !tbaa !2446
  %141 = xor i64 %132, %130
  %142 = lshr i64 %141, 4
  %143 = trunc i64 %142 to i8
  %144 = and i8 %143, 1
  store i8 %144, i8* %25, align 1, !tbaa !2450
  %145 = icmp eq i64 %132, 0
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %28, align 1, !tbaa !2447
  %147 = lshr i64 %132, 63
  %148 = trunc i64 %147 to i8
  store i8 %148, i8* %31, align 1, !tbaa !2448
  %149 = lshr i64 %130, 63
  %150 = xor i64 %147, %149
  %151 = add nuw nsw i64 %150, %147
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %37, align 1, !tbaa !2449
  %154 = add i64 %131, 5
  store i64 %154, i64* %PC, align 8
  %155 = add i64 %130, 40
  %156 = inttoptr i64 %132 to i64*
  %157 = load i64, i64* %156, align 8
  store i64 %157, i64* %RBP, align 8, !tbaa !2428
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %131, 6
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %155 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  %161 = add i64 %130, 48
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %129

block_400702:                                     ; preds = %block_40070e, %block_4006d0
  %162 = phi i64 [ %123, %block_40070e ], [ %.pre, %block_4006d0 ]
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -20
  %165 = add i64 %162, 3
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i32*
  %167 = load i32, i32* %166, align 4
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = add i64 %163, -4
  %170 = add i64 %162, 6
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i32*
  %172 = load i32, i32* %171, align 4
  %173 = sub i32 %167, %172
  %174 = icmp ult i32 %167, %172
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %13, align 1, !tbaa !2432
  %176 = and i32 %173, 255
  %177 = tail call i32 @llvm.ctpop.i32(i32 %176) #9
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  store i8 %180, i8* %20, align 1, !tbaa !2446
  %181 = xor i32 %172, %167
  %182 = xor i32 %181, %173
  %183 = lshr i32 %182, 4
  %184 = trunc i32 %183 to i8
  %185 = and i8 %184, 1
  store i8 %185, i8* %25, align 1, !tbaa !2450
  %186 = icmp eq i32 %173, 0
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %28, align 1, !tbaa !2447
  %188 = lshr i32 %173, 31
  %189 = trunc i32 %188 to i8
  store i8 %189, i8* %31, align 1, !tbaa !2448
  %190 = lshr i32 %167, 31
  %191 = lshr i32 %172, 31
  %192 = xor i32 %191, %190
  %193 = xor i32 %188, %190
  %194 = add nuw nsw i32 %193, %192
  %195 = icmp eq i32 %194, 2
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %37, align 1, !tbaa !2449
  %197 = icmp ne i8 %189, 0
  %198 = xor i1 %197, %195
  %.v = select i1 %198, i64 12, i64 49
  %199 = add i64 %162, %.v
  %200 = add i64 %163, -16
  %201 = add i64 %199, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  br i1 %198, label %block_40070e, label %block_400733
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4008b0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4008b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = load i64, i64* %R15, align 8
  %12 = add i64 %10, 5
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = load i64, i64* %R14, align 8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 2
  store i64 %17, i64* %PC, align 8
  %18 = add i64 %7, -24
  %19 = inttoptr i64 %18 to i64*
  store i64 %15, i64* %19, align 8
  %20 = load i64, i64* %R13, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 2
  store i64 %22, i64* %PC, align 8
  %23 = add i64 %7, -32
  %24 = inttoptr i64 %23 to i64*
  store i64 %20, i64* %24, align 8
  %25 = load i64, i64* %R12, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 2
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %7, -40
  %29 = inttoptr i64 %28 to i64*
  store i64 %25, i64* %29, align 8
  %30 = load i64, i64* %RBX, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %7, -48
  %34 = inttoptr i64 %33 to i64*
  store i64 %30, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %7, -440
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %37 = icmp ult i64 %33, 392
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) #9
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 %33, %36
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2450
  %52 = icmp eq i64 %36, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = lshr i64 %36, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %33, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2449
  store i64 4225, i64* %RCX, align 8, !tbaa !2428
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -44
  %66 = add i64 %35, 26
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i32*
  store i32 0, i32* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -48
  %70 = load i32, i32* %EDI, align 4
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %73, align 4
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -56
  %76 = load i64, i64* %RSI, align 8
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79, align 8
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -60
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i32*
  store i32 64, i32* %84, align 4
  %85 = load i64, i64* %RBP, align 8
  %86 = add i64 %85, -64
  %87 = load i64, i64* %PC, align 8
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %86 to i32*
  store i32 64, i32* %89, align 4
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -68
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 7
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i32*
  store i32 64, i32* %94, align 4
  %95 = load i64, i64* %RCX, align 8
  %96 = load i64, i64* %PC, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %97 = load i32, i32* %EAX, align 4
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %RSI, align 8, !tbaa !2428
  %99 = add i64 %96, -259
  %100 = add i64 %96, 10
  %101 = load i64, i64* %RSP, align 8, !tbaa !2428
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %100, i64* %103, align 8
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %104 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %99, %struct.Memory* %2)
  %105 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -96
  %108 = load i64, i64* %RAX, align 8
  %109 = add i64 %105, 16
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %110, align 8
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, -285
  %113 = add i64 %111, 5
  %114 = load i64, i64* %RSP, align 8, !tbaa !2428
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116, align 8
  store i64 %115, i64* %RSP, align 8, !tbaa !2428
  store i64 %112, i64* %PC, align 8, !tbaa !2428
  %117 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %112, %struct.Memory* %104)
  %118 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %119 = load i64, i64* %RBP, align 8
  %120 = add i64 %119, -104
  %121 = load i64, i64* %RAX, align 8
  %122 = add i64 %118, 16
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %120 to i64*
  store i64 %121, i64* %123, align 8
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, -306
  %126 = add i64 %124, 5
  %127 = load i64, i64* %RSP, align 8, !tbaa !2428
  %128 = add i64 %127, -8
  %129 = inttoptr i64 %128 to i64*
  store i64 %126, i64* %129, align 8
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  %130 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %125, %struct.Memory* %117)
  %131 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -112
  %134 = load i64, i64* %RAX, align 8
  %135 = add i64 %131, 16
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  store i64 %134, i64* %136, align 8
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, -327
  %139 = add i64 %137, 5
  %140 = load i64, i64* %RSP, align 8, !tbaa !2428
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i64*
  store i64 %139, i64* %142, align 8
  store i64 %141, i64* %RSP, align 8, !tbaa !2428
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %143 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %138, %struct.Memory* %130)
  %144 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -120
  %147 = load i64, i64* %RAX, align 8
  %148 = add i64 %144, 16
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %146 to i64*
  store i64 %147, i64* %149, align 8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, -348
  %152 = add i64 %150, 5
  %153 = load i64, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %153, -8
  %155 = inttoptr i64 %154 to i64*
  store i64 %152, i64* %155, align 8
  store i64 %154, i64* %RSP, align 8, !tbaa !2428
  store i64 %151, i64* %PC, align 8, !tbaa !2428
  %156 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %151, %struct.Memory* %143)
  %157 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -128
  %160 = load i64, i64* %RAX, align 8
  %161 = add i64 %157, 16
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %162, align 8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -369
  %165 = add i64 %163, 5
  %166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %169 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %164, %struct.Memory* %156)
  %170 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -136
  %173 = load i64, i64* %RAX, align 8
  %174 = add i64 %170, 19
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %175, align 8
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, -393
  %178 = add i64 %176, 5
  %179 = load i64, i64* %RSP, align 8, !tbaa !2428
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181, align 8
  store i64 %180, i64* %RSP, align 8, !tbaa !2428
  store i64 %177, i64* %PC, align 8, !tbaa !2428
  %182 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %177, %struct.Memory* %169)
  %183 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -144
  %186 = load i64, i64* %RAX, align 8
  %187 = add i64 %183, 19
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %185 to i64*
  store i64 %186, i64* %188, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, -417
  %191 = add i64 %189, 5
  %192 = load i64, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194, align 8
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %195 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %190, %struct.Memory* %182)
  %196 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -152
  %199 = load i64, i64* %RAX, align 8
  %200 = add i64 %196, 19
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %198 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load i64, i64* %PC, align 8
  %203 = add i64 %202, -441
  %204 = add i64 %202, 5
  %205 = load i64, i64* %RSP, align 8, !tbaa !2428
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207, align 8
  store i64 %206, i64* %RSP, align 8, !tbaa !2428
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  %208 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %203, %struct.Memory* %195)
  %209 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -160
  %212 = load i64, i64* %RAX, align 8
  %213 = add i64 %209, 19
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %214, align 8
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, -465
  %217 = add i64 %215, 5
  %218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %RSP, align 8, !tbaa !2428
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %221 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %216, %struct.Memory* %208)
  %222 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -168
  %225 = load i64, i64* %RAX, align 8
  %226 = add i64 %222, 19
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i64*
  store i64 %225, i64* %227, align 8
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, -489
  %230 = add i64 %228, 5
  %231 = load i64, i64* %RSP, align 8, !tbaa !2428
  %232 = add i64 %231, -8
  %233 = inttoptr i64 %232 to i64*
  store i64 %230, i64* %233, align 8
  store i64 %232, i64* %RSP, align 8, !tbaa !2428
  store i64 %229, i64* %PC, align 8, !tbaa !2428
  %234 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %229, %struct.Memory* %221)
  %235 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -176
  %238 = load i64, i64* %RAX, align 8
  %239 = add i64 %235, 19
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i64*
  store i64 %238, i64* %240, align 8
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, -513
  %243 = add i64 %241, 5
  %244 = load i64, i64* %RSP, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %RSP, align 8, !tbaa !2428
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  %247 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %242, %struct.Memory* %234)
  %248 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -184
  %251 = load i64, i64* %RAX, align 8
  %252 = add i64 %248, 19
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %253, align 8
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, -537
  %256 = add i64 %254, 5
  %257 = load i64, i64* %RSP, align 8, !tbaa !2428
  %258 = add i64 %257, -8
  %259 = inttoptr i64 %258 to i64*
  store i64 %256, i64* %259, align 8
  store i64 %258, i64* %RSP, align 8, !tbaa !2428
  store i64 %255, i64* %PC, align 8, !tbaa !2428
  %260 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %255, %struct.Memory* %247)
  %261 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %262 = load i64, i64* %RBP, align 8
  %263 = add i64 %262, -192
  %264 = load i64, i64* %RAX, align 8
  %265 = add i64 %261, 19
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %263 to i64*
  store i64 %264, i64* %266, align 8
  %267 = load i64, i64* %PC, align 8
  %268 = add i64 %267, -561
  %269 = add i64 %267, 5
  %270 = load i64, i64* %RSP, align 8, !tbaa !2428
  %271 = add i64 %270, -8
  %272 = inttoptr i64 %271 to i64*
  store i64 %269, i64* %272, align 8
  store i64 %271, i64* %RSP, align 8, !tbaa !2428
  store i64 %268, i64* %PC, align 8, !tbaa !2428
  %273 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %268, %struct.Memory* %260)
  %274 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %275 = load i64, i64* %RBP, align 8
  %276 = add i64 %275, -200
  %277 = load i64, i64* %RAX, align 8
  %278 = add i64 %274, 19
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %276 to i64*
  store i64 %277, i64* %279, align 8
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, -585
  %282 = add i64 %280, 5
  %283 = load i64, i64* %RSP, align 8, !tbaa !2428
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285, align 8
  store i64 %284, i64* %RSP, align 8, !tbaa !2428
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  %286 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %281, %struct.Memory* %273)
  %287 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %288 = load i64, i64* %RBP, align 8
  %289 = add i64 %288, -208
  %290 = load i64, i64* %RAX, align 8
  %291 = add i64 %287, 19
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %289 to i64*
  store i64 %290, i64* %292, align 8
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, -609
  %295 = add i64 %293, 5
  %296 = load i64, i64* %RSP, align 8, !tbaa !2428
  %297 = add i64 %296, -8
  %298 = inttoptr i64 %297 to i64*
  store i64 %295, i64* %298, align 8
  store i64 %297, i64* %RSP, align 8, !tbaa !2428
  store i64 %294, i64* %PC, align 8, !tbaa !2428
  %299 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %294, %struct.Memory* %286)
  %300 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -216
  %303 = load i64, i64* %RAX, align 8
  %304 = add i64 %300, 19
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %302 to i64*
  store i64 %303, i64* %305, align 8
  %306 = load i64, i64* %PC, align 8
  %307 = add i64 %306, -633
  %308 = add i64 %306, 5
  %309 = load i64, i64* %RSP, align 8, !tbaa !2428
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311, align 8
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  store i64 %307, i64* %PC, align 8, !tbaa !2428
  %312 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %307, %struct.Memory* %299)
  %313 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2428
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -224
  %316 = load i64, i64* %RAX, align 8
  %317 = add i64 %313, 19
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %318, align 8
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, -657
  %321 = add i64 %319, 5
  %322 = load i64, i64* %RSP, align 8, !tbaa !2428
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %324, align 8
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  store i64 %320, i64* %PC, align 8, !tbaa !2428
  %325 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* nonnull %0, i64 %320, %struct.Memory* %312)
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -80
  %328 = load i64, i64* %PC, align 8
  store i64 %327, i64* %RCX, align 8, !tbaa !2428
  %329 = add i64 %326, -88
  store i64 %329, i64* %R8, align 8, !tbaa !2428
  %330 = add i64 %326, -232
  %331 = load i64, i64* %RAX, align 8
  %332 = add i64 %328, 15
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %330 to i64*
  store i64 %331, i64* %333, align 8
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -60
  %336 = load i64, i64* %PC, align 8
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RDI, align 8, !tbaa !2428
  %341 = add i64 %334, -68
  %342 = add i64 %336, 6
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i32*
  %344 = load i32, i32* %343, align 4
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RSI, align 8, !tbaa !2428
  %346 = add i64 %334, -64
  %347 = add i64 %336, 9
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RDX, align 8, !tbaa !2428
  %351 = add i64 %334, -96
  %352 = add i64 %336, 13
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %R9, align 8, !tbaa !2428
  %355 = add i64 %334, -104
  %356 = add i64 %336, 17
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = add i64 %334, -136
  %360 = add i64 %336, 24
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %R10, align 8, !tbaa !2428
  %363 = add i64 %334, -144
  %364 = add i64 %336, 31
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %R11, align 8, !tbaa !2428
  %367 = add i64 %334, -152
  %368 = add i64 %336, 38
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  %370 = load i64, i64* %369, align 8
  store i64 %370, i64* %RBX, align 8, !tbaa !2428
  %371 = add i64 %334, -192
  %372 = add i64 %336, 45
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %R14, align 8, !tbaa !2428
  %375 = add i64 %334, -200
  %376 = add i64 %336, 52
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %R15, align 8, !tbaa !2428
  %379 = add i64 %334, -208
  %380 = add i64 %336, 59
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %R12, align 8, !tbaa !2428
  %383 = add i64 %334, -216
  %384 = add i64 %336, 66
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %R13, align 8, !tbaa !2428
  %387 = add i64 %334, -240
  %388 = add i64 %336, 73
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  store i64 %358, i64* %389, align 8
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -224
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %RAX, align 8, !tbaa !2428
  %396 = add i64 %390, -248
  %397 = add i64 %392, 14
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  store i64 %395, i64* %398, align 8
  %399 = load i64, i64* %RBP, align 8
  %400 = add i64 %399, -232
  %401 = load i64, i64* %PC, align 8
  %402 = add i64 %401, 7
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %400 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  %405 = add i64 %399, -256
  %406 = add i64 %401, 14
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i64*
  store i64 %404, i64* %407, align 8
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -240
  %410 = load i64, i64* %PC, align 8
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %409 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = bitcast i64* %RSP to i64**
  %415 = load i64*, i64** %414, align 8
  %416 = add i64 %410, 11
  store i64 %416, i64* %PC, align 8
  store i64 %413, i64* %415, align 8
  %417 = load i64, i64* %RSP, align 8
  %418 = add i64 %417, 8
  %419 = load i64, i64* %R10, align 8
  %420 = load i64, i64* %PC, align 8
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %418 to i64*
  store i64 %419, i64* %422, align 8
  %423 = load i64, i64* %RSP, align 8
  %424 = add i64 %423, 16
  %425 = load i64, i64* %R11, align 8
  %426 = load i64, i64* %PC, align 8
  %427 = add i64 %426, 5
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %424 to i64*
  store i64 %425, i64* %428, align 8
  %429 = load i64, i64* %RSP, align 8
  %430 = add i64 %429, 24
  %431 = load i64, i64* %RBX, align 8
  %432 = load i64, i64* %PC, align 8
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %430 to i64*
  store i64 %431, i64* %434, align 8
  %435 = load i64, i64* %RSP, align 8
  %436 = add i64 %435, 32
  %437 = load i64, i64* %R14, align 8
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 5
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %436 to i64*
  store i64 %437, i64* %440, align 8
  %441 = load i64, i64* %RSP, align 8
  %442 = add i64 %441, 40
  %443 = load i64, i64* %R15, align 8
  %444 = load i64, i64* %PC, align 8
  %445 = add i64 %444, 5
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %442 to i64*
  store i64 %443, i64* %446, align 8
  %447 = load i64, i64* %RSP, align 8
  %448 = add i64 %447, 48
  %449 = load i64, i64* %R12, align 8
  %450 = load i64, i64* %PC, align 8
  %451 = add i64 %450, 5
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %448 to i64*
  store i64 %449, i64* %452, align 8
  %453 = load i64, i64* %RSP, align 8
  %454 = add i64 %453, 56
  %455 = load i64, i64* %R13, align 8
  %456 = load i64, i64* %PC, align 8
  %457 = add i64 %456, 5
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %454 to i64*
  store i64 %455, i64* %458, align 8
  %459 = load i64, i64* %RBP, align 8
  %460 = add i64 %459, -248
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, 7
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %460 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = load i64, i64* %RSP, align 8
  %466 = add i64 %465, 64
  %467 = add i64 %461, 12
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %468, align 8
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -256
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 7
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = load i64, i64* %RSP, align 8
  %476 = add i64 %475, 72
  %477 = add i64 %471, 12
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i64*
  store i64 %474, i64* %478, align 8
  %479 = load i64, i64* %PC, align 8
  %480 = add i64 %479, 1152
  %481 = add i64 %479, 5
  %482 = load i64, i64* %RSP, align 8, !tbaa !2428
  %483 = add i64 %482, -8
  %484 = inttoptr i64 %483 to i64*
  store i64 %481, i64* %484, align 8
  store i64 %483, i64* %RSP, align 8, !tbaa !2428
  store i64 %480, i64* %PC, align 8, !tbaa !2428
  %485 = tail call %struct.Memory* @sub_400fc0_init_array(%struct.State* nonnull %0, i64 %480, %struct.Memory* %325)
  %486 = load i64, i64* %RBP, align 8
  %487 = add i64 %486, -60
  %488 = load i64, i64* %PC, align 8
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490, align 4
  %492 = zext i32 %491 to i64
  store i64 %492, i64* %RDI, align 8, !tbaa !2428
  %493 = add i64 %486, -68
  %494 = add i64 %488, 6
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i32*
  %496 = load i32, i32* %495, align 4
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RSI, align 8, !tbaa !2428
  %498 = add i64 %486, -64
  %499 = add i64 %488, 9
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i32*
  %501 = load i32, i32* %500, align 4
  %502 = zext i32 %501 to i64
  store i64 %502, i64* %RDX, align 8, !tbaa !2428
  %503 = add i64 %486, -80
  %504 = add i64 %488, 14
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %503 to i64*
  %506 = load i64, i64* %505, align 8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %506, i64* %507, align 1, !tbaa !2452
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %509 = bitcast i64* %508 to double*
  store double 0.000000e+00, double* %509, align 1, !tbaa !2452
  %510 = add i64 %486, -88
  %511 = add i64 %488, 19
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %510 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %513, i64* %514, align 1, !tbaa !2452
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %516 = bitcast i64* %515 to double*
  store double 0.000000e+00, double* %516, align 1, !tbaa !2452
  %517 = add i64 %486, -96
  %518 = add i64 %488, 23
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %RCX, align 8, !tbaa !2428
  %521 = add i64 %486, -104
  %522 = add i64 %488, 27
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %R8, align 8, !tbaa !2428
  %525 = add i64 %486, -112
  %526 = add i64 %488, 31
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i64*
  %528 = load i64, i64* %527, align 8
  store i64 %528, i64* %R9, align 8, !tbaa !2428
  %529 = add i64 %486, -120
  %530 = add i64 %488, 35
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531, align 8
  store i64 %532, i64* %RAX, align 8, !tbaa !2428
  %533 = add i64 %486, -128
  %534 = add i64 %488, 39
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  store i64 %536, i64* %R10, align 8, !tbaa !2428
  %537 = add i64 %486, -136
  %538 = add i64 %488, 46
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %R11, align 8, !tbaa !2428
  %541 = add i64 %486, -144
  %542 = add i64 %488, 53
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %RBX, align 8, !tbaa !2428
  %545 = add i64 %486, -152
  %546 = add i64 %488, 60
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %R14, align 8, !tbaa !2428
  %549 = add i64 %486, -192
  %550 = add i64 %488, 67
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %R15, align 8, !tbaa !2428
  %553 = add i64 %486, -200
  %554 = add i64 %488, 74
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i64*
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %R12, align 8, !tbaa !2428
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -208
  %559 = add i64 %488, 81
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %R13, align 8, !tbaa !2428
  %562 = add i64 %557, -264
  %563 = add i64 %488, 88
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i64*
  store i64 %532, i64* %564, align 8
  %565 = load i64, i64* %RBP, align 8
  %566 = add i64 %565, -216
  %567 = load i64, i64* %PC, align 8
  %568 = add i64 %567, 7
  store i64 %568, i64* %PC, align 8
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %RAX, align 8, !tbaa !2428
  %571 = add i64 %565, -272
  %572 = add i64 %567, 14
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i64*
  store i64 %570, i64* %573, align 8
  %574 = load i64, i64* %RBP, align 8
  %575 = add i64 %574, -224
  %576 = load i64, i64* %PC, align 8
  %577 = add i64 %576, 7
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %575 to i64*
  %579 = load i64, i64* %578, align 8
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = add i64 %574, -280
  %581 = add i64 %576, 14
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i64*
  store i64 %579, i64* %582, align 8
  %583 = load i64, i64* %RBP, align 8
  %584 = add i64 %583, -232
  %585 = load i64, i64* %PC, align 8
  %586 = add i64 %585, 7
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = add i64 %583, -288
  %590 = add i64 %585, 14
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i64*
  store i64 %588, i64* %591, align 8
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -264
  %594 = load i64, i64* %PC, align 8
  %595 = add i64 %594, 7
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = load i64*, i64** %414, align 8
  %599 = add i64 %594, 11
  store i64 %599, i64* %PC, align 8
  store i64 %597, i64* %598, align 8
  %600 = load i64, i64* %RSP, align 8
  %601 = add i64 %600, 8
  %602 = load i64, i64* %R10, align 8
  %603 = load i64, i64* %PC, align 8
  %604 = add i64 %603, 5
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %601 to i64*
  store i64 %602, i64* %605, align 8
  %606 = load i64, i64* %RSP, align 8
  %607 = add i64 %606, 16
  %608 = load i64, i64* %R11, align 8
  %609 = load i64, i64* %PC, align 8
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611, align 8
  %612 = load i64, i64* %RSP, align 8
  %613 = add i64 %612, 24
  %614 = load i64, i64* %RBX, align 8
  %615 = load i64, i64* %PC, align 8
  %616 = add i64 %615, 5
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %613 to i64*
  store i64 %614, i64* %617, align 8
  %618 = load i64, i64* %RSP, align 8
  %619 = add i64 %618, 32
  %620 = load i64, i64* %R14, align 8
  %621 = load i64, i64* %PC, align 8
  %622 = add i64 %621, 5
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %619 to i64*
  store i64 %620, i64* %623, align 8
  %624 = load i64, i64* %RSP, align 8
  %625 = add i64 %624, 40
  %626 = load i64, i64* %R15, align 8
  %627 = load i64, i64* %PC, align 8
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %625 to i64*
  store i64 %626, i64* %629, align 8
  %630 = load i64, i64* %RSP, align 8
  %631 = add i64 %630, 48
  %632 = load i64, i64* %R12, align 8
  %633 = load i64, i64* %PC, align 8
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %631 to i64*
  store i64 %632, i64* %635, align 8
  %636 = load i64, i64* %RSP, align 8
  %637 = add i64 %636, 56
  %638 = load i64, i64* %R13, align 8
  %639 = load i64, i64* %PC, align 8
  %640 = add i64 %639, 5
  store i64 %640, i64* %PC, align 8
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641, align 8
  %642 = load i64, i64* %RBP, align 8
  %643 = add i64 %642, -272
  %644 = load i64, i64* %PC, align 8
  %645 = add i64 %644, 7
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RSP, align 8
  %649 = add i64 %648, 64
  %650 = add i64 %644, 12
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i64*
  store i64 %647, i64* %651, align 8
  %652 = load i64, i64* %RBP, align 8
  %653 = add i64 %652, -280
  %654 = load i64, i64* %PC, align 8
  %655 = add i64 %654, 7
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %RAX, align 8, !tbaa !2428
  %658 = load i64, i64* %RSP, align 8
  %659 = add i64 %658, 72
  %660 = add i64 %654, 12
  store i64 %660, i64* %PC, align 8
  %661 = inttoptr i64 %659 to i64*
  store i64 %657, i64* %661, align 8
  %662 = load i64, i64* %RBP, align 8
  %663 = add i64 %662, -288
  %664 = load i64, i64* %PC, align 8
  %665 = add i64 %664, 7
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %663 to i64*
  %667 = load i64, i64* %666, align 8
  store i64 %667, i64* %RAX, align 8, !tbaa !2428
  %668 = load i64, i64* %RSP, align 8
  %669 = add i64 %668, 80
  %670 = add i64 %664, 12
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i64*
  store i64 %667, i64* %671, align 8
  %672 = load i64, i64* %PC, align 8
  %673 = add i64 %672, 2199
  %674 = add i64 %672, 5
  %675 = load i64, i64* %RSP, align 8, !tbaa !2428
  %676 = add i64 %675, -8
  %677 = inttoptr i64 %676 to i64*
  store i64 %674, i64* %677, align 8
  store i64 %676, i64* %RSP, align 8, !tbaa !2428
  store i64 %673, i64* %PC, align 8, !tbaa !2428
  %678 = tail call %struct.Memory* @sub_4014b0_kernel_fdtd_apml(%struct.State* nonnull %0, i64 %673, %struct.Memory* %485)
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -80
  %681 = load i64, i64* %PC, align 8
  store i64 %680, i64* %RCX, align 8, !tbaa !2428
  %682 = add i64 %679, -88
  store i64 %682, i64* %R8, align 8, !tbaa !2428
  %683 = add i64 %679, -60
  %684 = add i64 %681, 11
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i32*
  %686 = load i32, i32* %685, align 4
  %687 = zext i32 %686 to i64
  store i64 %687, i64* %RDI, align 8, !tbaa !2428
  %688 = add i64 %679, -68
  %689 = add i64 %681, 14
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %688 to i32*
  %691 = load i32, i32* %690, align 4
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RSI, align 8, !tbaa !2428
  %693 = add i64 %679, -64
  %694 = add i64 %681, 17
  store i64 %694, i64* %PC, align 8
  %695 = inttoptr i64 %693 to i32*
  %696 = load i32, i32* %695, align 4
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RDX, align 8, !tbaa !2428
  %698 = add i64 %679, -96
  %699 = add i64 %681, 21
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %698 to i64*
  %701 = load i64, i64* %700, align 8
  store i64 %701, i64* %R9, align 8, !tbaa !2428
  %702 = add i64 %679, -104
  %703 = add i64 %681, 25
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = add i64 %679, -168
  %707 = add i64 %681, 32
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i64*
  %709 = load i64, i64* %708, align 8
  store i64 %709, i64* %R10, align 8, !tbaa !2428
  %710 = add i64 %679, -176
  %711 = add i64 %681, 39
  store i64 %711, i64* %PC, align 8
  %712 = inttoptr i64 %710 to i64*
  %713 = load i64, i64* %712, align 8
  store i64 %713, i64* %R11, align 8, !tbaa !2428
  %714 = add i64 %679, -184
  %715 = add i64 %681, 46
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %714 to i64*
  %717 = load i64, i64* %716, align 8
  store i64 %717, i64* %RBX, align 8, !tbaa !2428
  %718 = add i64 %679, -192
  %719 = add i64 %681, 53
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %718 to i64*
  %721 = load i64, i64* %720, align 8
  store i64 %721, i64* %R14, align 8, !tbaa !2428
  %722 = add i64 %679, -200
  %723 = add i64 %681, 60
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %722 to i64*
  %725 = load i64, i64* %724, align 8
  store i64 %725, i64* %R15, align 8, !tbaa !2428
  %726 = add i64 %679, -208
  %727 = add i64 %681, 67
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to i64*
  %729 = load i64, i64* %728, align 8
  store i64 %729, i64* %R12, align 8, !tbaa !2428
  %730 = add i64 %679, -216
  %731 = add i64 %681, 74
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %R13, align 8, !tbaa !2428
  %734 = add i64 %679, -296
  %735 = add i64 %681, 81
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i64*
  store i64 %705, i64* %736, align 8
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -224
  %739 = load i64, i64* %PC, align 8
  %740 = add i64 %739, 7
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741, align 8
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = add i64 %737, -304
  %744 = add i64 %739, 14
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to i64*
  store i64 %742, i64* %745, align 8
  %746 = load i64, i64* %RBP, align 8
  %747 = add i64 %746, -232
  %748 = load i64, i64* %PC, align 8
  %749 = add i64 %748, 7
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %RAX, align 8, !tbaa !2428
  %752 = add i64 %746, -312
  %753 = add i64 %748, 14
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i64*
  store i64 %751, i64* %754, align 8
  %755 = load i64, i64* %RBP, align 8
  %756 = add i64 %755, -296
  %757 = load i64, i64* %PC, align 8
  %758 = add i64 %757, 7
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %756 to i64*
  %760 = load i64, i64* %759, align 8
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = load i64*, i64** %414, align 8
  %762 = add i64 %757, 11
  store i64 %762, i64* %PC, align 8
  store i64 %760, i64* %761, align 8
  %763 = load i64, i64* %RSP, align 8
  %764 = add i64 %763, 8
  %765 = load i64, i64* %R10, align 8
  %766 = load i64, i64* %PC, align 8
  %767 = add i64 %766, 5
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %764 to i64*
  store i64 %765, i64* %768, align 8
  %769 = load i64, i64* %RSP, align 8
  %770 = add i64 %769, 16
  %771 = load i64, i64* %R11, align 8
  %772 = load i64, i64* %PC, align 8
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC, align 8
  %774 = inttoptr i64 %770 to i64*
  store i64 %771, i64* %774, align 8
  %775 = load i64, i64* %RSP, align 8
  %776 = add i64 %775, 24
  %777 = load i64, i64* %RBX, align 8
  %778 = load i64, i64* %PC, align 8
  %779 = add i64 %778, 5
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %776 to i64*
  store i64 %777, i64* %780, align 8
  %781 = load i64, i64* %RSP, align 8
  %782 = add i64 %781, 32
  %783 = load i64, i64* %R14, align 8
  %784 = load i64, i64* %PC, align 8
  %785 = add i64 %784, 5
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786, align 8
  %787 = load i64, i64* %RSP, align 8
  %788 = add i64 %787, 40
  %789 = load i64, i64* %R15, align 8
  %790 = load i64, i64* %PC, align 8
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %788 to i64*
  store i64 %789, i64* %792, align 8
  %793 = load i64, i64* %RSP, align 8
  %794 = add i64 %793, 48
  %795 = load i64, i64* %R12, align 8
  %796 = load i64, i64* %PC, align 8
  %797 = add i64 %796, 5
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %794 to i64*
  store i64 %795, i64* %798, align 8
  %799 = load i64, i64* %RSP, align 8
  %800 = add i64 %799, 56
  %801 = load i64, i64* %R13, align 8
  %802 = load i64, i64* %PC, align 8
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC, align 8
  %804 = inttoptr i64 %800 to i64*
  store i64 %801, i64* %804, align 8
  %805 = load i64, i64* %RBP, align 8
  %806 = add i64 %805, -304
  %807 = load i64, i64* %PC, align 8
  %808 = add i64 %807, 7
  store i64 %808, i64* %PC, align 8
  %809 = inttoptr i64 %806 to i64*
  %810 = load i64, i64* %809, align 8
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = load i64, i64* %RSP, align 8
  %812 = add i64 %811, 64
  %813 = add i64 %807, 12
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %812 to i64*
  store i64 %810, i64* %814, align 8
  %815 = load i64, i64* %RBP, align 8
  %816 = add i64 %815, -312
  %817 = load i64, i64* %PC, align 8
  %818 = add i64 %817, 7
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %816 to i64*
  %820 = load i64, i64* %819, align 8
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = load i64, i64* %RSP, align 8
  %822 = add i64 %821, 72
  %823 = add i64 %817, 12
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %822 to i64*
  store i64 %820, i64* %824, align 8
  %825 = load i64, i64* %PC, align 8
  %826 = add i64 %825, 751
  %827 = add i64 %825, 5
  %828 = load i64, i64* %RSP, align 8, !tbaa !2428
  %829 = add i64 %828, -8
  %830 = inttoptr i64 %829 to i64*
  store i64 %827, i64* %830, align 8
  store i64 %829, i64* %RSP, align 8, !tbaa !2428
  store i64 %826, i64* %PC, align 8, !tbaa !2428
  %831 = tail call %struct.Memory* @sub_400fc0_init_array(%struct.State* nonnull %0, i64 %826, %struct.Memory* %678)
  %832 = load i64, i64* %RBP, align 8
  %833 = add i64 %832, -60
  %834 = load i64, i64* %PC, align 8
  %835 = add i64 %834, 3
  store i64 %835, i64* %PC, align 8
  %836 = inttoptr i64 %833 to i32*
  %837 = load i32, i32* %836, align 4
  %838 = zext i32 %837 to i64
  store i64 %838, i64* %RDI, align 8, !tbaa !2428
  %839 = add i64 %832, -68
  %840 = add i64 %834, 6
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RSI, align 8, !tbaa !2428
  %844 = add i64 %832, -64
  %845 = add i64 %834, 9
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %844 to i32*
  %847 = load i32, i32* %846, align 4
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %RDX, align 8, !tbaa !2428
  %849 = add i64 %832, -80
  %850 = add i64 %834, 14
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %849 to i64*
  %852 = load i64, i64* %851, align 8
  store i64 %852, i64* %507, align 1, !tbaa !2452
  store double 0.000000e+00, double* %509, align 1, !tbaa !2452
  %853 = add i64 %832, -88
  %854 = add i64 %834, 19
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %514, align 1, !tbaa !2452
  store double 0.000000e+00, double* %516, align 1, !tbaa !2452
  %857 = add i64 %832, -96
  %858 = add i64 %834, 23
  store i64 %858, i64* %PC, align 8
  %859 = inttoptr i64 %857 to i64*
  %860 = load i64, i64* %859, align 8
  store i64 %860, i64* %RCX, align 8, !tbaa !2428
  %861 = add i64 %832, -104
  %862 = add i64 %834, 27
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i64*
  %864 = load i64, i64* %863, align 8
  store i64 %864, i64* %R8, align 8, !tbaa !2428
  %865 = add i64 %832, -112
  %866 = add i64 %834, 31
  store i64 %866, i64* %PC, align 8
  %867 = inttoptr i64 %865 to i64*
  %868 = load i64, i64* %867, align 8
  store i64 %868, i64* %R9, align 8, !tbaa !2428
  %869 = add i64 %832, -120
  %870 = add i64 %834, 35
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %869 to i64*
  %872 = load i64, i64* %871, align 8
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = add i64 %832, -160
  %874 = add i64 %834, 42
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i64*
  %876 = load i64, i64* %875, align 8
  store i64 %876, i64* %R10, align 8, !tbaa !2428
  %877 = add i64 %832, -168
  %878 = add i64 %834, 49
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %R11, align 8, !tbaa !2428
  %881 = add i64 %832, -176
  %882 = add i64 %834, 56
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %RBX, align 8, !tbaa !2428
  %885 = add i64 %832, -184
  %886 = add i64 %834, 63
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %R14, align 8, !tbaa !2428
  %889 = add i64 %832, -192
  %890 = add i64 %834, 70
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %889 to i64*
  %892 = load i64, i64* %891, align 8
  store i64 %892, i64* %R15, align 8, !tbaa !2428
  %893 = add i64 %832, -200
  %894 = add i64 %834, 77
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %R12, align 8, !tbaa !2428
  %897 = add i64 %832, -208
  %898 = add i64 %834, 84
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %R13, align 8, !tbaa !2428
  %901 = load i64, i64* %RBP, align 8
  %902 = add i64 %901, -320
  %903 = add i64 %834, 91
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %902 to i64*
  store i64 %872, i64* %904, align 8
  %905 = load i64, i64* %RBP, align 8
  %906 = add i64 %905, -216
  %907 = load i64, i64* %PC, align 8
  %908 = add i64 %907, 7
  store i64 %908, i64* %PC, align 8
  %909 = inttoptr i64 %906 to i64*
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %RAX, align 8, !tbaa !2428
  %911 = add i64 %905, -328
  %912 = add i64 %907, 14
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i64*
  store i64 %910, i64* %913, align 8
  %914 = load i64, i64* %RBP, align 8
  %915 = add i64 %914, -224
  %916 = load i64, i64* %PC, align 8
  %917 = add i64 %916, 7
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %915 to i64*
  %919 = load i64, i64* %918, align 8
  store i64 %919, i64* %RAX, align 8, !tbaa !2428
  %920 = add i64 %914, -336
  %921 = add i64 %916, 14
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i64*
  store i64 %919, i64* %922, align 8
  %923 = load i64, i64* %RBP, align 8
  %924 = add i64 %923, -232
  %925 = load i64, i64* %PC, align 8
  %926 = add i64 %925, 7
  store i64 %926, i64* %PC, align 8
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927, align 8
  store i64 %928, i64* %RAX, align 8, !tbaa !2428
  %929 = add i64 %923, -344
  %930 = add i64 %925, 14
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %929 to i64*
  store i64 %928, i64* %931, align 8
  %932 = load i64, i64* %RBP, align 8
  %933 = add i64 %932, -320
  %934 = load i64, i64* %PC, align 8
  %935 = add i64 %934, 7
  store i64 %935, i64* %PC, align 8
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936, align 8
  store i64 %937, i64* %RAX, align 8, !tbaa !2428
  %938 = load i64*, i64** %414, align 8
  %939 = add i64 %934, 11
  store i64 %939, i64* %PC, align 8
  store i64 %937, i64* %938, align 8
  %940 = load i64, i64* %RSP, align 8
  %941 = add i64 %940, 8
  %942 = load i64, i64* %R10, align 8
  %943 = load i64, i64* %PC, align 8
  %944 = add i64 %943, 5
  store i64 %944, i64* %PC, align 8
  %945 = inttoptr i64 %941 to i64*
  store i64 %942, i64* %945, align 8
  %946 = load i64, i64* %RSP, align 8
  %947 = add i64 %946, 16
  %948 = load i64, i64* %R11, align 8
  %949 = load i64, i64* %PC, align 8
  %950 = add i64 %949, 5
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %947 to i64*
  store i64 %948, i64* %951, align 8
  %952 = load i64, i64* %RSP, align 8
  %953 = add i64 %952, 24
  %954 = load i64, i64* %RBX, align 8
  %955 = load i64, i64* %PC, align 8
  %956 = add i64 %955, 5
  store i64 %956, i64* %PC, align 8
  %957 = inttoptr i64 %953 to i64*
  store i64 %954, i64* %957, align 8
  %958 = load i64, i64* %RSP, align 8
  %959 = add i64 %958, 32
  %960 = load i64, i64* %R14, align 8
  %961 = load i64, i64* %PC, align 8
  %962 = add i64 %961, 5
  store i64 %962, i64* %PC, align 8
  %963 = inttoptr i64 %959 to i64*
  store i64 %960, i64* %963, align 8
  %964 = load i64, i64* %RSP, align 8
  %965 = add i64 %964, 40
  %966 = load i64, i64* %R15, align 8
  %967 = load i64, i64* %PC, align 8
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %965 to i64*
  store i64 %966, i64* %969, align 8
  %970 = load i64, i64* %RSP, align 8
  %971 = add i64 %970, 48
  %972 = load i64, i64* %R12, align 8
  %973 = load i64, i64* %PC, align 8
  %974 = add i64 %973, 5
  store i64 %974, i64* %PC, align 8
  %975 = inttoptr i64 %971 to i64*
  store i64 %972, i64* %975, align 8
  %976 = load i64, i64* %RSP, align 8
  %977 = add i64 %976, 56
  %978 = load i64, i64* %R13, align 8
  %979 = load i64, i64* %PC, align 8
  %980 = add i64 %979, 5
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %977 to i64*
  store i64 %978, i64* %981, align 8
  %982 = load i64, i64* %RBP, align 8
  %983 = add i64 %982, -328
  %984 = load i64, i64* %PC, align 8
  %985 = add i64 %984, 7
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %983 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2428
  %988 = load i64, i64* %RSP, align 8
  %989 = add i64 %988, 64
  %990 = add i64 %984, 12
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %987, i64* %991, align 8
  %992 = load i64, i64* %RBP, align 8
  %993 = add i64 %992, -336
  %994 = load i64, i64* %PC, align 8
  %995 = add i64 %994, 7
  store i64 %995, i64* %PC, align 8
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996, align 8
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RSP, align 8
  %999 = add i64 %998, 72
  %1000 = add i64 %994, 12
  store i64 %1000, i64* %PC, align 8
  %1001 = inttoptr i64 %999 to i64*
  store i64 %997, i64* %1001, align 8
  %1002 = load i64, i64* %RBP, align 8
  %1003 = add i64 %1002, -344
  %1004 = load i64, i64* %PC, align 8
  %1005 = add i64 %1004, 7
  store i64 %1005, i64* %PC, align 8
  %1006 = inttoptr i64 %1003 to i64*
  %1007 = load i64, i64* %1006, align 8
  store i64 %1007, i64* %RAX, align 8, !tbaa !2428
  %1008 = load i64, i64* %RSP, align 8
  %1009 = add i64 %1008, 80
  %1010 = add i64 %1004, 12
  store i64 %1010, i64* %PC, align 8
  %1011 = inttoptr i64 %1009 to i64*
  store i64 %1007, i64* %1011, align 8
  %1012 = load i64, i64* %PC, align 8
  %1013 = add i64 %1012, 5299
  %1014 = add i64 %1012, 5
  %1015 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1016 = add i64 %1015, -8
  %1017 = inttoptr i64 %1016 to i64*
  store i64 %1014, i64* %1017, align 8
  store i64 %1016, i64* %RSP, align 8, !tbaa !2428
  store i64 %1013, i64* %PC, align 8, !tbaa !2428
  %1018 = tail call %struct.Memory* @sub_402260_kernel_fdtd_apml_StrictFP(%struct.State* nonnull %0, i64 %1013, %struct.Memory* %831)
  %1019 = load i64, i64* %RBP, align 8
  %1020 = add i64 %1019, -60
  %1021 = load i64, i64* %PC, align 8
  %1022 = add i64 %1021, 3
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023, align 4
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RDI, align 8, !tbaa !2428
  %1026 = add i64 %1019, -68
  %1027 = add i64 %1021, 6
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i32*
  %1029 = load i32, i32* %1028, align 4
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %RSI, align 8, !tbaa !2428
  %1031 = add i64 %1019, -64
  %1032 = add i64 %1021, 9
  store i64 %1032, i64* %PC, align 8
  %1033 = inttoptr i64 %1031 to i32*
  %1034 = load i32, i32* %1033, align 4
  %1035 = zext i32 %1034 to i64
  store i64 %1035, i64* %RDX, align 8, !tbaa !2428
  %1036 = add i64 %1019, -128
  %1037 = add i64 %1021, 13
  store i64 %1037, i64* %PC, align 8
  %1038 = inttoptr i64 %1036 to i64*
  %1039 = load i64, i64* %1038, align 8
  store i64 %1039, i64* %RCX, align 8, !tbaa !2428
  %1040 = add i64 %1019, -160
  %1041 = add i64 %1021, 20
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i64*
  %1043 = load i64, i64* %1042, align 8
  store i64 %1043, i64* %R8, align 8, !tbaa !2428
  %1044 = add i64 %1021, 8798
  %1045 = add i64 %1021, 25
  %1046 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1047 = add i64 %1046, -8
  %1048 = inttoptr i64 %1047 to i64*
  store i64 %1045, i64* %1048, align 8
  store i64 %1047, i64* %RSP, align 8, !tbaa !2428
  store i64 %1044, i64* %PC, align 8, !tbaa !2428
  %1049 = tail call %struct.Memory* @sub_403010_check_FP(%struct.State* nonnull %0, i64 %1044, %struct.Memory* %1018)
  %1050 = load i32, i32* %EAX, align 4
  %1051 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1052 = and i32 %1050, 255
  %1053 = tail call i32 @llvm.ctpop.i32(i32 %1052) #9
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  store i8 %1056, i8* %46, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2450
  %1057 = icmp eq i32 %1050, 0
  %1058 = zext i1 %1057 to i8
  store i8 %1058, i8* %54, align 1, !tbaa !2447
  %1059 = lshr i32 %1050, 31
  %1060 = trunc i32 %1059 to i8
  store i8 %1060, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v = select i1 %1057, i64 9, i64 21
  %1061 = add i64 %1051, %.v
  store i64 %1061, i64* %PC, align 8, !tbaa !2428
  %1062 = load i64, i64* %RBP, align 8
  br i1 %1057, label %block_400dd4, label %block_400de0

block_400e36:                                     ; preds = %block_400e11
  %1063 = add i64 %1375, -44
  %1064 = add i64 %1374, 7
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1063 to i32*
  store i32 1, i32* %1065, align 4
  %1066 = load i64, i64* %PC, align 8
  %1067 = add i64 %1066, 362
  store i64 %1067, i64* %PC, align 8, !tbaa !2428
  br label %block_400fa7

block_400dd4:                                     ; preds = %block_4008b0
  %1068 = add i64 %1062, -44
  %1069 = add i64 %1061, 7
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to i32*
  store i32 1, i32* %1070, align 4
  %1071 = load i64, i64* %PC, align 8
  %1072 = add i64 %1071, 460
  store i64 %1072, i64* %PC, align 8, !tbaa !2428
  br label %block_400fa7

block_400e73:                                     ; preds = %block_400e42
  %1073 = add i64 %1427, -60
  %1074 = add i64 %1426, 3
  store i64 %1074, i64* %PC, align 8
  %1075 = inttoptr i64 %1073 to i32*
  %1076 = load i32, i32* %1075, align 4
  %1077 = zext i32 %1076 to i64
  store i64 %1077, i64* %RDI, align 8, !tbaa !2428
  %1078 = add i64 %1427, -68
  %1079 = add i64 %1426, 6
  store i64 %1079, i64* %PC, align 8
  %1080 = inttoptr i64 %1078 to i32*
  %1081 = load i32, i32* %1080, align 4
  %1082 = zext i32 %1081 to i64
  store i64 %1082, i64* %RSI, align 8, !tbaa !2428
  %1083 = add i64 %1427, -64
  %1084 = add i64 %1426, 9
  store i64 %1084, i64* %PC, align 8
  %1085 = inttoptr i64 %1083 to i32*
  %1086 = load i32, i32* %1085, align 4
  %1087 = zext i32 %1086 to i64
  store i64 %1087, i64* %RDX, align 8, !tbaa !2428
  %1088 = add i64 %1427, -160
  %1089 = add i64 %1426, 16
  store i64 %1089, i64* %PC, align 8
  %1090 = inttoptr i64 %1088 to i64*
  %1091 = load i64, i64* %1090, align 8
  store i64 %1091, i64* %RCX, align 8, !tbaa !2428
  %1092 = add i64 %1427, -168
  %1093 = add i64 %1426, 23
  store i64 %1093, i64* %PC, align 8
  %1094 = inttoptr i64 %1092 to i64*
  %1095 = load i64, i64* %1094, align 8
  store i64 %1095, i64* %R8, align 8, !tbaa !2428
  %1096 = add i64 %1427, -176
  %1097 = add i64 %1426, 30
  store i64 %1097, i64* %PC, align 8
  %1098 = inttoptr i64 %1096 to i64*
  %1099 = load i64, i64* %1098, align 8
  store i64 %1099, i64* %R9, align 8, !tbaa !2428
  %1100 = add i64 %1427, -184
  %1101 = add i64 %1426, 37
  store i64 %1101, i64* %PC, align 8
  %1102 = inttoptr i64 %1100 to i64*
  %1103 = load i64, i64* %1102, align 8
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = load i64*, i64** %414, align 8
  %1105 = add i64 %1426, 41
  store i64 %1105, i64* %PC, align 8
  store i64 %1103, i64* %1104, align 8
  %1106 = load i64, i64* %PC, align 8
  %1107 = add i64 %1106, 8980
  %1108 = add i64 %1106, 5
  %1109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1110 = add i64 %1109, -8
  %1111 = inttoptr i64 %1110 to i64*
  store i64 %1108, i64* %1111, align 8
  store i64 %1110, i64* %RSP, align 8, !tbaa !2428
  store i64 %1107, i64* %PC, align 8, !tbaa !2428
  %1112 = tail call %struct.Memory* @sub_4031b0_print_array(%struct.State* nonnull %0, i64 %1107, %struct.Memory* %1414)
  %1113 = load i64, i64* %RBP, align 8
  %1114 = add i64 %1113, -96
  %1115 = load i64, i64* %PC, align 8
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1114 to i64*
  %1118 = load i64, i64* %1117, align 8
  store i64 %1118, i64* %RAX, align 8, !tbaa !2428
  store i64 %1118, i64* %RDI, align 8, !tbaa !2428
  %1119 = add i64 %1115, -2337
  %1120 = add i64 %1115, 12
  %1121 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1122 = add i64 %1121, -8
  %1123 = inttoptr i64 %1122 to i64*
  store i64 %1120, i64* %1123, align 8
  store i64 %1122, i64* %RSP, align 8, !tbaa !2428
  store i64 %1119, i64* %PC, align 8, !tbaa !2428
  %1124 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1112)
  %1125 = load i64, i64* %RBP, align 8
  %1126 = add i64 %1125, -104
  %1127 = load i64, i64* %PC, align 8
  %1128 = add i64 %1127, 4
  store i64 %1128, i64* %PC, align 8
  %1129 = inttoptr i64 %1126 to i64*
  %1130 = load i64, i64* %1129, align 8
  store i64 %1130, i64* %RAX, align 8, !tbaa !2428
  store i64 %1130, i64* %RDI, align 8, !tbaa !2428
  %1131 = add i64 %1127, -2349
  %1132 = add i64 %1127, 12
  %1133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1134 = add i64 %1133, -8
  %1135 = inttoptr i64 %1134 to i64*
  store i64 %1132, i64* %1135, align 8
  store i64 %1134, i64* %RSP, align 8, !tbaa !2428
  store i64 %1131, i64* %PC, align 8, !tbaa !2428
  %1136 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1124)
  %1137 = load i64, i64* %RBP, align 8
  %1138 = add i64 %1137, -112
  %1139 = load i64, i64* %PC, align 8
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1138 to i64*
  %1142 = load i64, i64* %1141, align 8
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  store i64 %1142, i64* %RDI, align 8, !tbaa !2428
  %1143 = add i64 %1139, -2361
  %1144 = add i64 %1139, 12
  %1145 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1146 = add i64 %1145, -8
  %1147 = inttoptr i64 %1146 to i64*
  store i64 %1144, i64* %1147, align 8
  store i64 %1146, i64* %RSP, align 8, !tbaa !2428
  store i64 %1143, i64* %PC, align 8, !tbaa !2428
  %1148 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1136)
  %1149 = load i64, i64* %RBP, align 8
  %1150 = add i64 %1149, -120
  %1151 = load i64, i64* %PC, align 8
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1150 to i64*
  %1154 = load i64, i64* %1153, align 8
  store i64 %1154, i64* %RAX, align 8, !tbaa !2428
  store i64 %1154, i64* %RDI, align 8, !tbaa !2428
  %1155 = add i64 %1151, -2373
  %1156 = add i64 %1151, 12
  %1157 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1158 = add i64 %1157, -8
  %1159 = inttoptr i64 %1158 to i64*
  store i64 %1156, i64* %1159, align 8
  store i64 %1158, i64* %RSP, align 8, !tbaa !2428
  store i64 %1155, i64* %PC, align 8, !tbaa !2428
  %1160 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1148)
  %1161 = load i64, i64* %RBP, align 8
  %1162 = add i64 %1161, -128
  %1163 = load i64, i64* %PC, align 8
  %1164 = add i64 %1163, 4
  store i64 %1164, i64* %PC, align 8
  %1165 = inttoptr i64 %1162 to i64*
  %1166 = load i64, i64* %1165, align 8
  store i64 %1166, i64* %RAX, align 8, !tbaa !2428
  store i64 %1166, i64* %RDI, align 8, !tbaa !2428
  %1167 = add i64 %1163, -2385
  %1168 = add i64 %1163, 12
  %1169 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1170 = add i64 %1169, -8
  %1171 = inttoptr i64 %1170 to i64*
  store i64 %1168, i64* %1171, align 8
  store i64 %1170, i64* %RSP, align 8, !tbaa !2428
  store i64 %1167, i64* %PC, align 8, !tbaa !2428
  %1172 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1160)
  %1173 = load i64, i64* %RBP, align 8
  %1174 = add i64 %1173, -136
  %1175 = load i64, i64* %PC, align 8
  %1176 = add i64 %1175, 7
  store i64 %1176, i64* %PC, align 8
  %1177 = inttoptr i64 %1174 to i64*
  %1178 = load i64, i64* %1177, align 8
  store i64 %1178, i64* %RAX, align 8, !tbaa !2428
  store i64 %1178, i64* %RDI, align 8, !tbaa !2428
  %1179 = add i64 %1175, -2397
  %1180 = add i64 %1175, 15
  %1181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1182 = add i64 %1181, -8
  %1183 = inttoptr i64 %1182 to i64*
  store i64 %1180, i64* %1183, align 8
  store i64 %1182, i64* %RSP, align 8, !tbaa !2428
  store i64 %1179, i64* %PC, align 8, !tbaa !2428
  %1184 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1172)
  %1185 = load i64, i64* %RBP, align 8
  %1186 = add i64 %1185, -144
  %1187 = load i64, i64* %PC, align 8
  %1188 = add i64 %1187, 7
  store i64 %1188, i64* %PC, align 8
  %1189 = inttoptr i64 %1186 to i64*
  %1190 = load i64, i64* %1189, align 8
  store i64 %1190, i64* %RAX, align 8, !tbaa !2428
  store i64 %1190, i64* %RDI, align 8, !tbaa !2428
  %1191 = add i64 %1187, -2412
  %1192 = add i64 %1187, 15
  %1193 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1194 = add i64 %1193, -8
  %1195 = inttoptr i64 %1194 to i64*
  store i64 %1192, i64* %1195, align 8
  store i64 %1194, i64* %RSP, align 8, !tbaa !2428
  store i64 %1191, i64* %PC, align 8, !tbaa !2428
  %1196 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1184)
  %1197 = load i64, i64* %RBP, align 8
  %1198 = add i64 %1197, -152
  %1199 = load i64, i64* %PC, align 8
  %1200 = add i64 %1199, 7
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1198 to i64*
  %1202 = load i64, i64* %1201, align 8
  store i64 %1202, i64* %RAX, align 8, !tbaa !2428
  store i64 %1202, i64* %RDI, align 8, !tbaa !2428
  %1203 = add i64 %1199, -2427
  %1204 = add i64 %1199, 15
  %1205 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1206 = add i64 %1205, -8
  %1207 = inttoptr i64 %1206 to i64*
  store i64 %1204, i64* %1207, align 8
  store i64 %1206, i64* %RSP, align 8, !tbaa !2428
  store i64 %1203, i64* %PC, align 8, !tbaa !2428
  %1208 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1196)
  %1209 = load i64, i64* %RBP, align 8
  %1210 = add i64 %1209, -160
  %1211 = load i64, i64* %PC, align 8
  %1212 = add i64 %1211, 7
  store i64 %1212, i64* %PC, align 8
  %1213 = inttoptr i64 %1210 to i64*
  %1214 = load i64, i64* %1213, align 8
  store i64 %1214, i64* %RAX, align 8, !tbaa !2428
  store i64 %1214, i64* %RDI, align 8, !tbaa !2428
  %1215 = add i64 %1211, -2442
  %1216 = add i64 %1211, 15
  %1217 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1218 = add i64 %1217, -8
  %1219 = inttoptr i64 %1218 to i64*
  store i64 %1216, i64* %1219, align 8
  store i64 %1218, i64* %RSP, align 8, !tbaa !2428
  store i64 %1215, i64* %PC, align 8, !tbaa !2428
  %1220 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1208)
  %1221 = load i64, i64* %RBP, align 8
  %1222 = add i64 %1221, -168
  %1223 = load i64, i64* %PC, align 8
  %1224 = add i64 %1223, 7
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1222 to i64*
  %1226 = load i64, i64* %1225, align 8
  store i64 %1226, i64* %RAX, align 8, !tbaa !2428
  store i64 %1226, i64* %RDI, align 8, !tbaa !2428
  %1227 = add i64 %1223, -2457
  %1228 = add i64 %1223, 15
  %1229 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1230 = add i64 %1229, -8
  %1231 = inttoptr i64 %1230 to i64*
  store i64 %1228, i64* %1231, align 8
  store i64 %1230, i64* %RSP, align 8, !tbaa !2428
  store i64 %1227, i64* %PC, align 8, !tbaa !2428
  %1232 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1220)
  %1233 = load i64, i64* %RBP, align 8
  %1234 = add i64 %1233, -176
  %1235 = load i64, i64* %PC, align 8
  %1236 = add i64 %1235, 7
  store i64 %1236, i64* %PC, align 8
  %1237 = inttoptr i64 %1234 to i64*
  %1238 = load i64, i64* %1237, align 8
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  store i64 %1238, i64* %RDI, align 8, !tbaa !2428
  %1239 = add i64 %1235, -2472
  %1240 = add i64 %1235, 15
  %1241 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1242 = add i64 %1241, -8
  %1243 = inttoptr i64 %1242 to i64*
  store i64 %1240, i64* %1243, align 8
  store i64 %1242, i64* %RSP, align 8, !tbaa !2428
  store i64 %1239, i64* %PC, align 8, !tbaa !2428
  %1244 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1232)
  %1245 = load i64, i64* %RBP, align 8
  %1246 = add i64 %1245, -184
  %1247 = load i64, i64* %PC, align 8
  %1248 = add i64 %1247, 7
  store i64 %1248, i64* %PC, align 8
  %1249 = inttoptr i64 %1246 to i64*
  %1250 = load i64, i64* %1249, align 8
  store i64 %1250, i64* %RAX, align 8, !tbaa !2428
  store i64 %1250, i64* %RDI, align 8, !tbaa !2428
  %1251 = add i64 %1247, -2487
  %1252 = add i64 %1247, 15
  %1253 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1254 = add i64 %1253, -8
  %1255 = inttoptr i64 %1254 to i64*
  store i64 %1252, i64* %1255, align 8
  store i64 %1254, i64* %RSP, align 8, !tbaa !2428
  store i64 %1251, i64* %PC, align 8, !tbaa !2428
  %1256 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1244)
  %1257 = load i64, i64* %RBP, align 8
  %1258 = add i64 %1257, -192
  %1259 = load i64, i64* %PC, align 8
  %1260 = add i64 %1259, 7
  store i64 %1260, i64* %PC, align 8
  %1261 = inttoptr i64 %1258 to i64*
  %1262 = load i64, i64* %1261, align 8
  store i64 %1262, i64* %RAX, align 8, !tbaa !2428
  store i64 %1262, i64* %RDI, align 8, !tbaa !2428
  %1263 = add i64 %1259, -2502
  %1264 = add i64 %1259, 15
  %1265 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1266 = add i64 %1265, -8
  %1267 = inttoptr i64 %1266 to i64*
  store i64 %1264, i64* %1267, align 8
  store i64 %1266, i64* %RSP, align 8, !tbaa !2428
  store i64 %1263, i64* %PC, align 8, !tbaa !2428
  %1268 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1256)
  %1269 = load i64, i64* %RBP, align 8
  %1270 = add i64 %1269, -200
  %1271 = load i64, i64* %PC, align 8
  %1272 = add i64 %1271, 7
  store i64 %1272, i64* %PC, align 8
  %1273 = inttoptr i64 %1270 to i64*
  %1274 = load i64, i64* %1273, align 8
  store i64 %1274, i64* %RAX, align 8, !tbaa !2428
  store i64 %1274, i64* %RDI, align 8, !tbaa !2428
  %1275 = add i64 %1271, -2517
  %1276 = add i64 %1271, 15
  %1277 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1278 = add i64 %1277, -8
  %1279 = inttoptr i64 %1278 to i64*
  store i64 %1276, i64* %1279, align 8
  store i64 %1278, i64* %RSP, align 8, !tbaa !2428
  store i64 %1275, i64* %PC, align 8, !tbaa !2428
  %1280 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1268)
  %1281 = load i64, i64* %RBP, align 8
  %1282 = add i64 %1281, -208
  %1283 = load i64, i64* %PC, align 8
  %1284 = add i64 %1283, 7
  store i64 %1284, i64* %PC, align 8
  %1285 = inttoptr i64 %1282 to i64*
  %1286 = load i64, i64* %1285, align 8
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  store i64 %1286, i64* %RDI, align 8, !tbaa !2428
  %1287 = add i64 %1283, -2532
  %1288 = add i64 %1283, 15
  %1289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1290 = add i64 %1289, -8
  %1291 = inttoptr i64 %1290 to i64*
  store i64 %1288, i64* %1291, align 8
  store i64 %1290, i64* %RSP, align 8, !tbaa !2428
  store i64 %1287, i64* %PC, align 8, !tbaa !2428
  %1292 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1280)
  %1293 = load i64, i64* %RBP, align 8
  %1294 = add i64 %1293, -216
  %1295 = load i64, i64* %PC, align 8
  %1296 = add i64 %1295, 7
  store i64 %1296, i64* %PC, align 8
  %1297 = inttoptr i64 %1294 to i64*
  %1298 = load i64, i64* %1297, align 8
  store i64 %1298, i64* %RAX, align 8, !tbaa !2428
  store i64 %1298, i64* %RDI, align 8, !tbaa !2428
  %1299 = add i64 %1295, -2547
  %1300 = add i64 %1295, 15
  %1301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1302 = add i64 %1301, -8
  %1303 = inttoptr i64 %1302 to i64*
  store i64 %1300, i64* %1303, align 8
  store i64 %1302, i64* %RSP, align 8, !tbaa !2428
  store i64 %1299, i64* %PC, align 8, !tbaa !2428
  %1304 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1292)
  %1305 = load i64, i64* %RBP, align 8
  %1306 = add i64 %1305, -224
  %1307 = load i64, i64* %PC, align 8
  %1308 = add i64 %1307, 7
  store i64 %1308, i64* %PC, align 8
  %1309 = inttoptr i64 %1306 to i64*
  %1310 = load i64, i64* %1309, align 8
  store i64 %1310, i64* %RAX, align 8, !tbaa !2428
  store i64 %1310, i64* %RDI, align 8, !tbaa !2428
  %1311 = add i64 %1307, -2562
  %1312 = add i64 %1307, 15
  %1313 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1314 = add i64 %1313, -8
  %1315 = inttoptr i64 %1314 to i64*
  store i64 %1312, i64* %1315, align 8
  store i64 %1314, i64* %RSP, align 8, !tbaa !2428
  store i64 %1311, i64* %PC, align 8, !tbaa !2428
  %1316 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1304)
  %1317 = load i64, i64* %RBP, align 8
  %1318 = add i64 %1317, -232
  %1319 = load i64, i64* %PC, align 8
  %1320 = add i64 %1319, 7
  store i64 %1320, i64* %PC, align 8
  %1321 = inttoptr i64 %1318 to i64*
  %1322 = load i64, i64* %1321, align 8
  store i64 %1322, i64* %RAX, align 8, !tbaa !2428
  store i64 %1322, i64* %RDI, align 8, !tbaa !2428
  %1323 = add i64 %1319, -2577
  %1324 = add i64 %1319, 15
  %1325 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1326 = add i64 %1325, -8
  %1327 = inttoptr i64 %1326 to i64*
  store i64 %1324, i64* %1327, align 8
  store i64 %1326, i64* %RSP, align 8, !tbaa !2428
  store i64 %1323, i64* %PC, align 8, !tbaa !2428
  %1328 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1316)
  %1329 = load i64, i64* %RBP, align 8
  %1330 = add i64 %1329, -44
  %1331 = load i64, i64* %PC, align 8
  %1332 = add i64 %1331, 7
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1330 to i32*
  store i32 0, i32* %1333, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400fa7

block_400e11:                                     ; preds = %block_400de0
  %1334 = add i64 %1527, -60
  %1335 = add i64 %1526, 3
  store i64 %1335, i64* %PC, align 8
  %1336 = inttoptr i64 %1334 to i32*
  %1337 = load i32, i32* %1336, align 4
  %1338 = zext i32 %1337 to i64
  store i64 %1338, i64* %RDI, align 8, !tbaa !2428
  %1339 = add i64 %1527, -68
  %1340 = add i64 %1526, 6
  store i64 %1340, i64* %PC, align 8
  %1341 = inttoptr i64 %1339 to i32*
  %1342 = load i32, i32* %1341, align 4
  %1343 = zext i32 %1342 to i64
  store i64 %1343, i64* %RSI, align 8, !tbaa !2428
  %1344 = add i64 %1527, -64
  %1345 = add i64 %1526, 9
  store i64 %1345, i64* %PC, align 8
  %1346 = inttoptr i64 %1344 to i32*
  %1347 = load i32, i32* %1346, align 4
  %1348 = zext i32 %1347 to i64
  store i64 %1348, i64* %RDX, align 8, !tbaa !2428
  %1349 = add i64 %1527, -144
  %1350 = add i64 %1526, 16
  store i64 %1350, i64* %PC, align 8
  %1351 = inttoptr i64 %1349 to i64*
  %1352 = load i64, i64* %1351, align 8
  store i64 %1352, i64* %RCX, align 8, !tbaa !2428
  %1353 = add i64 %1527, -176
  %1354 = add i64 %1526, 23
  store i64 %1354, i64* %PC, align 8
  %1355 = inttoptr i64 %1353 to i64*
  %1356 = load i64, i64* %1355, align 8
  store i64 %1356, i64* %R8, align 8, !tbaa !2428
  %1357 = add i64 %1526, 8703
  %1358 = add i64 %1526, 28
  %1359 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1360 = add i64 %1359, -8
  %1361 = inttoptr i64 %1360 to i64*
  store i64 %1358, i64* %1361, align 8
  store i64 %1360, i64* %RSP, align 8, !tbaa !2428
  store i64 %1357, i64* %PC, align 8, !tbaa !2428
  %1362 = tail call %struct.Memory* @sub_403010_check_FP(%struct.State* nonnull %0, i64 %1357, %struct.Memory* %1514)
  %1363 = load i32, i32* %EAX, align 4
  %1364 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1365 = and i32 %1363, 255
  %1366 = tail call i32 @llvm.ctpop.i32(i32 %1365) #9
  %1367 = trunc i32 %1366 to i8
  %1368 = and i8 %1367, 1
  %1369 = xor i8 %1368, 1
  store i8 %1369, i8* %46, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2450
  %1370 = icmp eq i32 %1363, 0
  %1371 = zext i1 %1370 to i8
  store i8 %1371, i8* %54, align 1, !tbaa !2447
  %1372 = lshr i32 %1363, 31
  %1373 = trunc i32 %1372 to i8
  store i8 %1373, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v5 = select i1 %1370, i64 9, i64 21
  %1374 = add i64 %1364, %.v5
  store i64 %1374, i64* %PC, align 8, !tbaa !2428
  %1375 = load i64, i64* %RBP, align 8
  br i1 %1370, label %block_400e36, label %block_400e42

block_400e05:                                     ; preds = %block_400de0
  %1376 = add i64 %1527, -44
  %1377 = add i64 %1526, 7
  store i64 %1377, i64* %PC, align 8
  %1378 = inttoptr i64 %1376 to i32*
  store i32 1, i32* %1378, align 4
  %1379 = load i64, i64* %PC, align 8
  %1380 = add i64 %1379, 411
  store i64 %1380, i64* %PC, align 8, !tbaa !2428
  br label %block_400fa7

block_400e67:                                     ; preds = %block_400e42
  %1381 = add i64 %1427, -44
  %1382 = add i64 %1426, 7
  store i64 %1382, i64* %PC, align 8
  %1383 = inttoptr i64 %1381 to i32*
  store i32 1, i32* %1383, align 4
  %1384 = load i64, i64* %PC, align 8
  %1385 = add i64 %1384, 313
  store i64 %1385, i64* %PC, align 8, !tbaa !2428
  br label %block_400fa7

block_400e42:                                     ; preds = %block_400e11
  %1386 = add i64 %1375, -60
  %1387 = add i64 %1374, 3
  store i64 %1387, i64* %PC, align 8
  %1388 = inttoptr i64 %1386 to i32*
  %1389 = load i32, i32* %1388, align 4
  %1390 = zext i32 %1389 to i64
  store i64 %1390, i64* %RDI, align 8, !tbaa !2428
  %1391 = add i64 %1375, -68
  %1392 = add i64 %1374, 6
  store i64 %1392, i64* %PC, align 8
  %1393 = inttoptr i64 %1391 to i32*
  %1394 = load i32, i32* %1393, align 4
  %1395 = zext i32 %1394 to i64
  store i64 %1395, i64* %RSI, align 8, !tbaa !2428
  %1396 = add i64 %1375, -64
  %1397 = add i64 %1374, 9
  store i64 %1397, i64* %PC, align 8
  %1398 = inttoptr i64 %1396 to i32*
  %1399 = load i32, i32* %1398, align 4
  %1400 = zext i32 %1399 to i64
  store i64 %1400, i64* %RDX, align 8, !tbaa !2428
  %1401 = add i64 %1375, -152
  %1402 = add i64 %1374, 16
  store i64 %1402, i64* %PC, align 8
  %1403 = inttoptr i64 %1401 to i64*
  %1404 = load i64, i64* %1403, align 8
  store i64 %1404, i64* %RCX, align 8, !tbaa !2428
  %1405 = add i64 %1375, -184
  %1406 = add i64 %1374, 23
  store i64 %1406, i64* %PC, align 8
  %1407 = inttoptr i64 %1405 to i64*
  %1408 = load i64, i64* %1407, align 8
  store i64 %1408, i64* %R8, align 8, !tbaa !2428
  %1409 = add i64 %1374, 8654
  %1410 = add i64 %1374, 28
  %1411 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1412 = add i64 %1411, -8
  %1413 = inttoptr i64 %1412 to i64*
  store i64 %1410, i64* %1413, align 8
  store i64 %1412, i64* %RSP, align 8, !tbaa !2428
  store i64 %1409, i64* %PC, align 8, !tbaa !2428
  %1414 = tail call %struct.Memory* @sub_403010_check_FP(%struct.State* nonnull %0, i64 %1409, %struct.Memory* %1362)
  %1415 = load i32, i32* %EAX, align 4
  %1416 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1417 = and i32 %1415, 255
  %1418 = tail call i32 @llvm.ctpop.i32(i32 %1417) #9
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  %1421 = xor i8 %1420, 1
  store i8 %1421, i8* %46, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2450
  %1422 = icmp eq i32 %1415, 0
  %1423 = zext i1 %1422 to i8
  store i8 %1423, i8* %54, align 1, !tbaa !2447
  %1424 = lshr i32 %1415, 31
  %1425 = trunc i32 %1424 to i8
  store i8 %1425, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v6 = select i1 %1422, i64 9, i64 21
  %1426 = add i64 %1416, %.v6
  store i64 %1426, i64* %PC, align 8, !tbaa !2428
  %1427 = load i64, i64* %RBP, align 8
  br i1 %1422, label %block_400e67, label %block_400e73

block_400fa7:                                     ; preds = %block_400e67, %block_400e05, %block_400e73, %block_400dd4, %block_400e36
  %1428 = phi i64 [ %.pre, %block_400e73 ], [ %1385, %block_400e67 ], [ %1067, %block_400e36 ], [ %1380, %block_400e05 ], [ %1072, %block_400dd4 ]
  %MEMORY.0 = phi %struct.Memory* [ %1328, %block_400e73 ], [ %1414, %block_400e67 ], [ %1362, %block_400e36 ], [ %1514, %block_400e05 ], [ %1049, %block_400dd4 ]
  %1429 = load i64, i64* %RBP, align 8
  %1430 = add i64 %1429, -44
  %1431 = add i64 %1428, 3
  store i64 %1431, i64* %PC, align 8
  %1432 = inttoptr i64 %1430 to i32*
  %1433 = load i32, i32* %1432, align 4
  %1434 = zext i32 %1433 to i64
  store i64 %1434, i64* %RAX, align 8, !tbaa !2428
  %1435 = load i64, i64* %RSP, align 8
  %1436 = add i64 %1435, 392
  store i64 %1436, i64* %RSP, align 8, !tbaa !2428
  %1437 = icmp ugt i64 %1435, -393
  %1438 = zext i1 %1437 to i8
  store i8 %1438, i8* %39, align 1, !tbaa !2432
  %1439 = trunc i64 %1436 to i32
  %1440 = and i32 %1439, 255
  %1441 = tail call i32 @llvm.ctpop.i32(i32 %1440) #9
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  store i8 %1444, i8* %46, align 1, !tbaa !2446
  %1445 = xor i64 %1436, %1435
  %1446 = lshr i64 %1445, 4
  %1447 = trunc i64 %1446 to i8
  %1448 = and i8 %1447, 1
  store i8 %1448, i8* %51, align 1, !tbaa !2450
  %1449 = icmp eq i64 %1436, 0
  %1450 = zext i1 %1449 to i8
  store i8 %1450, i8* %54, align 1, !tbaa !2447
  %1451 = lshr i64 %1436, 63
  %1452 = trunc i64 %1451 to i8
  store i8 %1452, i8* %57, align 1, !tbaa !2448
  %1453 = lshr i64 %1435, 63
  %1454 = xor i64 %1451, %1453
  %1455 = add nuw nsw i64 %1454, %1451
  %1456 = icmp eq i64 %1455, 2
  %1457 = zext i1 %1456 to i8
  store i8 %1457, i8* %63, align 1, !tbaa !2449
  %1458 = add i64 %1428, 11
  store i64 %1458, i64* %PC, align 8
  %1459 = add i64 %1435, 400
  %1460 = inttoptr i64 %1436 to i64*
  %1461 = load i64, i64* %1460, align 8
  store i64 %1461, i64* %RBX, align 8, !tbaa !2428
  store i64 %1459, i64* %RSP, align 8, !tbaa !2428
  %1462 = add i64 %1428, 13
  store i64 %1462, i64* %PC, align 8
  %1463 = add i64 %1435, 408
  %1464 = inttoptr i64 %1459 to i64*
  %1465 = load i64, i64* %1464, align 8
  store i64 %1465, i64* %R12, align 8, !tbaa !2428
  store i64 %1463, i64* %RSP, align 8, !tbaa !2428
  %1466 = add i64 %1428, 15
  store i64 %1466, i64* %PC, align 8
  %1467 = add i64 %1435, 416
  %1468 = inttoptr i64 %1463 to i64*
  %1469 = load i64, i64* %1468, align 8
  store i64 %1469, i64* %R13, align 8, !tbaa !2428
  store i64 %1467, i64* %RSP, align 8, !tbaa !2428
  %1470 = add i64 %1428, 17
  store i64 %1470, i64* %PC, align 8
  %1471 = add i64 %1435, 424
  %1472 = inttoptr i64 %1467 to i64*
  %1473 = load i64, i64* %1472, align 8
  store i64 %1473, i64* %R14, align 8, !tbaa !2428
  store i64 %1471, i64* %RSP, align 8, !tbaa !2428
  %1474 = add i64 %1428, 19
  store i64 %1474, i64* %PC, align 8
  %1475 = add i64 %1435, 432
  %1476 = inttoptr i64 %1471 to i64*
  %1477 = load i64, i64* %1476, align 8
  store i64 %1477, i64* %R15, align 8, !tbaa !2428
  store i64 %1475, i64* %RSP, align 8, !tbaa !2428
  %1478 = add i64 %1428, 20
  store i64 %1478, i64* %PC, align 8
  %1479 = add i64 %1435, 440
  %1480 = inttoptr i64 %1475 to i64*
  %1481 = load i64, i64* %1480, align 8
  store i64 %1481, i64* %RBP, align 8, !tbaa !2428
  store i64 %1479, i64* %RSP, align 8, !tbaa !2428
  %1482 = add i64 %1428, 21
  store i64 %1482, i64* %PC, align 8
  %1483 = inttoptr i64 %1479 to i64*
  %1484 = load i64, i64* %1483, align 8
  store i64 %1484, i64* %PC, align 8, !tbaa !2428
  %1485 = add i64 %1435, 448
  store i64 %1485, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400de0:                                     ; preds = %block_4008b0
  %1486 = add i64 %1062, -60
  %1487 = add i64 %1061, 3
  store i64 %1487, i64* %PC, align 8
  %1488 = inttoptr i64 %1486 to i32*
  %1489 = load i32, i32* %1488, align 4
  %1490 = zext i32 %1489 to i64
  store i64 %1490, i64* %RDI, align 8, !tbaa !2428
  %1491 = add i64 %1062, -68
  %1492 = add i64 %1061, 6
  store i64 %1492, i64* %PC, align 8
  %1493 = inttoptr i64 %1491 to i32*
  %1494 = load i32, i32* %1493, align 4
  %1495 = zext i32 %1494 to i64
  store i64 %1495, i64* %RSI, align 8, !tbaa !2428
  %1496 = add i64 %1062, -64
  %1497 = add i64 %1061, 9
  store i64 %1497, i64* %PC, align 8
  %1498 = inttoptr i64 %1496 to i32*
  %1499 = load i32, i32* %1498, align 4
  %1500 = zext i32 %1499 to i64
  store i64 %1500, i64* %RDX, align 8, !tbaa !2428
  %1501 = add i64 %1062, -136
  %1502 = add i64 %1061, 16
  store i64 %1502, i64* %PC, align 8
  %1503 = inttoptr i64 %1501 to i64*
  %1504 = load i64, i64* %1503, align 8
  store i64 %1504, i64* %RCX, align 8, !tbaa !2428
  %1505 = add i64 %1062, -168
  %1506 = add i64 %1061, 23
  store i64 %1506, i64* %PC, align 8
  %1507 = inttoptr i64 %1505 to i64*
  %1508 = load i64, i64* %1507, align 8
  store i64 %1508, i64* %R8, align 8, !tbaa !2428
  %1509 = add i64 %1061, 8752
  %1510 = add i64 %1061, 28
  %1511 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1512 = add i64 %1511, -8
  %1513 = inttoptr i64 %1512 to i64*
  store i64 %1510, i64* %1513, align 8
  store i64 %1512, i64* %RSP, align 8, !tbaa !2428
  store i64 %1509, i64* %PC, align 8, !tbaa !2428
  %1514 = tail call %struct.Memory* @sub_403010_check_FP(%struct.State* nonnull %0, i64 %1509, %struct.Memory* %1049)
  %1515 = load i32, i32* %EAX, align 4
  %1516 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1517 = and i32 %1515, 255
  %1518 = tail call i32 @llvm.ctpop.i32(i32 %1517) #9
  %1519 = trunc i32 %1518 to i8
  %1520 = and i8 %1519, 1
  %1521 = xor i8 %1520, 1
  store i8 %1521, i8* %46, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2450
  %1522 = icmp eq i32 %1515, 0
  %1523 = zext i1 %1522 to i8
  store i8 %1523, i8* %54, align 1, !tbaa !2447
  %1524 = lshr i32 %1515, 31
  %1525 = trunc i32 %1524 to i8
  store i8 %1525, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v4 = select i1 %1522, i64 9, i64 21
  %1526 = add i64 %1516, %.v4
  store i64 %1526, i64* %PC, align 8, !tbaa !2428
  %1527 = load i64, i64* %RBP, align 8
  br i1 %1522, label %block_400e05, label %block_400e11
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4031b0_print_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4031b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -104
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 96
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #9
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 %12, %15
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = lshr i64 %15, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !2448
  %37 = lshr i64 %12, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = add i64 %11, 8
  %44 = add i64 %14, 11
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = add i64 %11, -12
  %48 = load i32, i32* %EDI, align 4
  %49 = add i64 %14, 14
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = load i32, i32* %ESI, align 4
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i32*
  store i32 %53, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i32, i32* %EDX, align 4
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i32*
  store i32 %59, i32* %62, align 4
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -24
  %65 = load i64, i64* %RCX, align 8
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68, align 8
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -32
  %71 = load i64, i64* %R8, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -40
  %77 = load i64, i64* %R9, align 8
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  store i64 %77, i64* %80, align 8
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -48
  %83 = load i64, i64* %RAX, align 8
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86, align 8
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -52
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 7
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i32*
  store i32 0, i32* %91, align 4
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to double*
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_4031dc

block_4031fb:                                     ; preds = %block_4031ef
  %96 = add i64 %637, -60
  %97 = add i64 %673, 7
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i32*
  store i32 0, i32* %98, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_403202

block_4031dc:                                     ; preds = %block_403387, %block_4031b0
  %99 = phi i64 [ %.pre, %block_4031b0 ], [ %703, %block_403387 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4031b0 ], [ %MEMORY.1, %block_403387 ]
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -52
  %102 = add i64 %99, 3
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = add i64 %100, -4
  %107 = add i64 %99, 6
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = sub i32 %104, %109
  %111 = icmp ult i32 %104, %109
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %18, align 1, !tbaa !2432
  %113 = and i32 %110, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2446
  %118 = xor i32 %109, %104
  %119 = xor i32 %118, %110
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %30, align 1, !tbaa !2450
  %123 = icmp eq i32 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %33, align 1, !tbaa !2447
  %125 = lshr i32 %110, 31
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %36, align 1, !tbaa !2448
  %127 = lshr i32 %104, 31
  %128 = lshr i32 %109, 31
  %129 = xor i32 %128, %127
  %130 = xor i32 %125, %127
  %131 = add nuw nsw i32 %130, %129
  %132 = icmp eq i32 %131, 2
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %42, align 1, !tbaa !2449
  %134 = icmp ne i8 %126, 0
  %135 = xor i1 %134, %132
  %.demorgan = or i1 %123, %135
  %.v16 = select i1 %.demorgan, i64 12, i64 446
  %136 = add i64 %99, %.v16
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_4031e8, label %block_40339a

block_403374:                                     ; preds = %block_403202
  %137 = add i64 %763, -56
  %138 = add i64 %799, 8
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = add i32 %140, 1
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = icmp eq i32 %140, -1
  %144 = icmp eq i32 %141, 0
  %145 = or i1 %143, %144
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %18, align 1, !tbaa !2432
  %147 = and i32 %141, 255
  %148 = tail call i32 @llvm.ctpop.i32(i32 %147) #9
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  store i8 %151, i8* %25, align 1, !tbaa !2446
  %152 = xor i32 %141, %140
  %153 = lshr i32 %152, 4
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  store i8 %155, i8* %30, align 1, !tbaa !2450
  %156 = zext i1 %144 to i8
  store i8 %156, i8* %33, align 1, !tbaa !2447
  %157 = lshr i32 %141, 31
  %158 = trunc i32 %157 to i8
  store i8 %158, i8* %36, align 1, !tbaa !2448
  %159 = lshr i32 %140, 31
  %160 = xor i32 %157, %159
  %161 = add nuw nsw i32 %160, %157
  %162 = icmp eq i32 %161, 2
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %42, align 1, !tbaa !2449
  %164 = add i64 %799, 14
  store i64 %164, i64* %PC, align 8
  store i32 %141, i32* %139, align 4
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, -403
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  br label %block_4031ef

block_40320e:                                     ; preds = %block_403202
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %167 = load i64, i64* @stderr, align 32
  store i64 %167, i64* %RDI, align 8, !tbaa !2428
  %168 = add i64 %763, -24
  %169 = add i64 %799, 22
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %763, -52
  %173 = add i64 %799, 26
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = sext i32 %175 to i64
  %177 = mul nsw i64 %176, 33800
  store i64 %177, i64* %RCX, align 8, !tbaa !2428
  %178 = lshr i64 %177, 63
  %179 = add i64 %177, %171
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = icmp ult i64 %179, %171
  %181 = icmp ult i64 %179, %177
  %182 = or i1 %180, %181
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %18, align 1, !tbaa !2432
  %184 = trunc i64 %179 to i32
  %185 = and i32 %184, 255
  %186 = tail call i32 @llvm.ctpop.i32(i32 %185) #9
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  %189 = xor i8 %188, 1
  store i8 %189, i8* %25, align 1, !tbaa !2446
  %190 = xor i64 %177, %171
  %191 = xor i64 %190, %179
  %192 = lshr i64 %191, 4
  %193 = trunc i64 %192 to i8
  %194 = and i8 %193, 1
  store i8 %194, i8* %30, align 1, !tbaa !2450
  %195 = icmp eq i64 %179, 0
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %33, align 1, !tbaa !2447
  %197 = lshr i64 %179, 63
  %198 = trunc i64 %197 to i8
  store i8 %198, i8* %36, align 1, !tbaa !2448
  %199 = lshr i64 %171, 63
  %200 = xor i64 %197, %199
  %201 = xor i64 %197, %178
  %202 = add nuw nsw i64 %200, %201
  %203 = icmp eq i64 %202, 2
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %42, align 1, !tbaa !2449
  %205 = add i64 %763, -56
  %206 = add i64 %799, 40
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %208 to i64
  %210 = mul nsw i64 %209, 520
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = lshr i64 %210, 63
  %212 = add i64 %210, %179
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = icmp ult i64 %212, %179
  %214 = icmp ult i64 %212, %210
  %215 = or i1 %213, %214
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %18, align 1, !tbaa !2432
  %217 = trunc i64 %212 to i32
  %218 = and i32 %217, 255
  %219 = tail call i32 @llvm.ctpop.i32(i32 %218) #9
  %220 = trunc i32 %219 to i8
  %221 = and i8 %220, 1
  %222 = xor i8 %221, 1
  store i8 %222, i8* %25, align 1, !tbaa !2446
  %223 = xor i64 %210, %179
  %224 = xor i64 %223, %212
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  store i8 %227, i8* %30, align 1, !tbaa !2450
  %228 = icmp eq i64 %212, 0
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %33, align 1, !tbaa !2447
  %230 = lshr i64 %212, 63
  %231 = trunc i64 %230 to i8
  store i8 %231, i8* %36, align 1, !tbaa !2448
  %232 = xor i64 %230, %197
  %233 = xor i64 %230, %211
  %234 = add nuw nsw i64 %232, %233
  %235 = icmp eq i64 %234, 2
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %42, align 1, !tbaa !2449
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -60
  %239 = add i64 %799, 54
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i32*
  %241 = load i32, i32* %240, align 4
  %242 = sext i32 %241 to i64
  store i64 %242, i64* %RCX, align 8, !tbaa !2428
  %243 = shl nsw i64 %242, 3
  %244 = add i64 %243, %212
  %245 = add i64 %799, 59
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %92, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %248 = add i64 %799, -11358
  %249 = add i64 %799, 66
  %250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %251 = add i64 %250, -8
  %252 = inttoptr i64 %251 to i64*
  store i64 %249, i64* %252, align 8
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %253 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %254 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %255 = load i64, i64* @stderr, align 32
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -32
  %258 = add i64 %254, 22
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = add i64 %256, -52
  %262 = add i64 %254, 26
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %261 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = sext i32 %264 to i64
  %266 = mul nsw i64 %265, 33800
  store i64 %266, i64* %RDX, align 8, !tbaa !2428
  %267 = lshr i64 %266, 63
  %268 = add i64 %266, %260
  store i64 %268, i64* %RCX, align 8, !tbaa !2428
  %269 = icmp ult i64 %268, %260
  %270 = icmp ult i64 %268, %266
  %271 = or i1 %269, %270
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %18, align 1, !tbaa !2432
  %273 = trunc i64 %268 to i32
  %274 = and i32 %273, 255
  %275 = tail call i32 @llvm.ctpop.i32(i32 %274) #9
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  store i8 %278, i8* %25, align 1, !tbaa !2446
  %279 = xor i64 %266, %260
  %280 = xor i64 %279, %268
  %281 = lshr i64 %280, 4
  %282 = trunc i64 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %30, align 1, !tbaa !2450
  %284 = icmp eq i64 %268, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %33, align 1, !tbaa !2447
  %286 = lshr i64 %268, 63
  %287 = trunc i64 %286 to i8
  store i8 %287, i8* %36, align 1, !tbaa !2448
  %288 = lshr i64 %260, 63
  %289 = xor i64 %286, %288
  %290 = xor i64 %286, %267
  %291 = add nuw nsw i64 %289, %290
  %292 = icmp eq i64 %291, 2
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %42, align 1, !tbaa !2449
  %294 = add i64 %256, -56
  %295 = add i64 %254, 40
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i32*
  %297 = load i32, i32* %296, align 4
  %298 = sext i32 %297 to i64
  %299 = mul nsw i64 %298, 520
  store i64 %299, i64* %RDX, align 8, !tbaa !2428
  %300 = lshr i64 %299, 63
  %301 = add i64 %299, %268
  store i64 %301, i64* %RCX, align 8, !tbaa !2428
  %302 = icmp ult i64 %301, %268
  %303 = icmp ult i64 %301, %299
  %304 = or i1 %302, %303
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %18, align 1, !tbaa !2432
  %306 = trunc i64 %301 to i32
  %307 = and i32 %306, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #9
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %25, align 1, !tbaa !2446
  %312 = xor i64 %299, %268
  %313 = xor i64 %312, %301
  %314 = lshr i64 %313, 4
  %315 = trunc i64 %314 to i8
  %316 = and i8 %315, 1
  store i8 %316, i8* %30, align 1, !tbaa !2450
  %317 = icmp eq i64 %301, 0
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %33, align 1, !tbaa !2447
  %319 = lshr i64 %301, 63
  %320 = trunc i64 %319 to i8
  store i8 %320, i8* %36, align 1, !tbaa !2448
  %321 = xor i64 %319, %286
  %322 = xor i64 %319, %300
  %323 = add nuw nsw i64 %321, %322
  %324 = icmp eq i64 %323, 2
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %42, align 1, !tbaa !2449
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -60
  %328 = add i64 %254, 54
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = sext i32 %330 to i64
  store i64 %331, i64* %RDX, align 8, !tbaa !2428
  %332 = shl nsw i64 %331, 3
  %333 = add i64 %332, %301
  %334 = add i64 %254, 59
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %92, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %337 = add i64 %326, -64
  %338 = load i32, i32* %EAX, align 4
  %339 = add i64 %254, 62
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to i32*
  store i32 %338, i32* %340, align 4
  %341 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %342 = add i64 %341, -11486
  %343 = add i64 %341, 7
  %344 = load i64, i64* %RSP, align 8, !tbaa !2428
  %345 = add i64 %344, -8
  %346 = inttoptr i64 %345 to i64*
  store i64 %343, i64* %346, align 8
  store i64 %345, i64* %RSP, align 8, !tbaa !2428
  store i64 %342, i64* %PC, align 8, !tbaa !2428
  %347 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %253)
  %348 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %349 = load i64, i64* @stderr, align 32
  store i64 %349, i64* %RDI, align 8, !tbaa !2428
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -40
  %352 = add i64 %348, 22
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %RCX, align 8, !tbaa !2428
  %355 = add i64 %350, -52
  %356 = add i64 %348, 26
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = sext i32 %358 to i64
  %360 = mul nsw i64 %359, 33800
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %361 = lshr i64 %360, 63
  %362 = add i64 %360, %354
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = icmp ult i64 %362, %354
  %364 = icmp ult i64 %362, %360
  %365 = or i1 %363, %364
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %18, align 1, !tbaa !2432
  %367 = trunc i64 %362 to i32
  %368 = and i32 %367, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #9
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %25, align 1, !tbaa !2446
  %373 = xor i64 %360, %354
  %374 = xor i64 %373, %362
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %30, align 1, !tbaa !2450
  %378 = icmp eq i64 %362, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %33, align 1, !tbaa !2447
  %380 = lshr i64 %362, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %36, align 1, !tbaa !2448
  %382 = lshr i64 %354, 63
  %383 = xor i64 %380, %382
  %384 = xor i64 %380, %361
  %385 = add nuw nsw i64 %383, %384
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %42, align 1, !tbaa !2449
  %388 = add i64 %350, -56
  %389 = add i64 %348, 40
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %388 to i32*
  %391 = load i32, i32* %390, align 4
  %392 = sext i32 %391 to i64
  %393 = mul nsw i64 %392, 520
  store i64 %393, i64* %RDX, align 8, !tbaa !2428
  %394 = lshr i64 %393, 63
  %395 = add i64 %393, %362
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %396 = icmp ult i64 %395, %362
  %397 = icmp ult i64 %395, %393
  %398 = or i1 %396, %397
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %18, align 1, !tbaa !2432
  %400 = trunc i64 %395 to i32
  %401 = and i32 %400, 255
  %402 = tail call i32 @llvm.ctpop.i32(i32 %401) #9
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  store i8 %405, i8* %25, align 1, !tbaa !2446
  %406 = xor i64 %393, %362
  %407 = xor i64 %406, %395
  %408 = lshr i64 %407, 4
  %409 = trunc i64 %408 to i8
  %410 = and i8 %409, 1
  store i8 %410, i8* %30, align 1, !tbaa !2450
  %411 = icmp eq i64 %395, 0
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %33, align 1, !tbaa !2447
  %413 = lshr i64 %395, 63
  %414 = trunc i64 %413 to i8
  store i8 %414, i8* %36, align 1, !tbaa !2448
  %415 = xor i64 %413, %380
  %416 = xor i64 %413, %394
  %417 = add nuw nsw i64 %415, %416
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %42, align 1, !tbaa !2449
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -60
  %422 = add i64 %348, 54
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %421 to i32*
  %424 = load i32, i32* %423, align 4
  %425 = sext i32 %424 to i64
  store i64 %425, i64* %RDX, align 8, !tbaa !2428
  %426 = shl nsw i64 %425, 3
  %427 = add i64 %426, %395
  %428 = add i64 %348, 59
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %92, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %431 = add i64 %420, -68
  %432 = load i32, i32* %EAX, align 4
  %433 = add i64 %348, 62
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %431 to i32*
  store i32 %432, i32* %434, align 4
  %435 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %436 = add i64 %435, -11555
  %437 = add i64 %435, 7
  %438 = load i64, i64* %RSP, align 8, !tbaa !2428
  %439 = add i64 %438, -8
  %440 = inttoptr i64 %439 to i64*
  store i64 %437, i64* %440, align 8
  store i64 %439, i64* %RSP, align 8, !tbaa !2428
  store i64 %436, i64* %PC, align 8, !tbaa !2428
  %441 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %347)
  %442 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %443 = load i64, i64* @stderr, align 32
  store i64 %443, i64* %RDI, align 8, !tbaa !2428
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -48
  %446 = add i64 %442, 22
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %RCX, align 8, !tbaa !2428
  %449 = add i64 %444, -52
  %450 = add i64 %442, 26
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %449 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = sext i32 %452 to i64
  %454 = mul nsw i64 %453, 33800
  store i64 %454, i64* %RDX, align 8, !tbaa !2428
  %455 = lshr i64 %454, 63
  %456 = add i64 %454, %448
  store i64 %456, i64* %RCX, align 8, !tbaa !2428
  %457 = icmp ult i64 %456, %448
  %458 = icmp ult i64 %456, %454
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %18, align 1, !tbaa !2432
  %461 = trunc i64 %456 to i32
  %462 = and i32 %461, 255
  %463 = tail call i32 @llvm.ctpop.i32(i32 %462) #9
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  store i8 %466, i8* %25, align 1, !tbaa !2446
  %467 = xor i64 %454, %448
  %468 = xor i64 %467, %456
  %469 = lshr i64 %468, 4
  %470 = trunc i64 %469 to i8
  %471 = and i8 %470, 1
  store i8 %471, i8* %30, align 1, !tbaa !2450
  %472 = icmp eq i64 %456, 0
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %33, align 1, !tbaa !2447
  %474 = lshr i64 %456, 63
  %475 = trunc i64 %474 to i8
  store i8 %475, i8* %36, align 1, !tbaa !2448
  %476 = lshr i64 %448, 63
  %477 = xor i64 %474, %476
  %478 = xor i64 %474, %455
  %479 = add nuw nsw i64 %477, %478
  %480 = icmp eq i64 %479, 2
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %42, align 1, !tbaa !2449
  %482 = add i64 %444, -56
  %483 = add i64 %442, 40
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i32*
  %485 = load i32, i32* %484, align 4
  %486 = sext i32 %485 to i64
  %487 = mul nsw i64 %486, 520
  store i64 %487, i64* %RDX, align 8, !tbaa !2428
  %488 = lshr i64 %487, 63
  %489 = add i64 %487, %456
  store i64 %489, i64* %RCX, align 8, !tbaa !2428
  %490 = icmp ult i64 %489, %456
  %491 = icmp ult i64 %489, %487
  %492 = or i1 %490, %491
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %18, align 1, !tbaa !2432
  %494 = trunc i64 %489 to i32
  %495 = and i32 %494, 255
  %496 = tail call i32 @llvm.ctpop.i32(i32 %495) #9
  %497 = trunc i32 %496 to i8
  %498 = and i8 %497, 1
  %499 = xor i8 %498, 1
  store i8 %499, i8* %25, align 1, !tbaa !2446
  %500 = xor i64 %487, %456
  %501 = xor i64 %500, %489
  %502 = lshr i64 %501, 4
  %503 = trunc i64 %502 to i8
  %504 = and i8 %503, 1
  store i8 %504, i8* %30, align 1, !tbaa !2450
  %505 = icmp eq i64 %489, 0
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %33, align 1, !tbaa !2447
  %507 = lshr i64 %489, 63
  %508 = trunc i64 %507 to i8
  store i8 %508, i8* %36, align 1, !tbaa !2448
  %509 = xor i64 %507, %474
  %510 = xor i64 %507, %488
  %511 = add nuw nsw i64 %509, %510
  %512 = icmp eq i64 %511, 2
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %42, align 1, !tbaa !2449
  %514 = load i64, i64* %RBP, align 8
  %515 = add i64 %514, -60
  %516 = add i64 %442, 54
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %515 to i32*
  %518 = load i32, i32* %517, align 4
  %519 = sext i32 %518 to i64
  store i64 %519, i64* %RDX, align 8, !tbaa !2428
  %520 = shl nsw i64 %519, 3
  %521 = add i64 %520, %489
  %522 = add i64 %442, 59
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %92, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %525 = add i64 %514, -72
  %526 = load i32, i32* %EAX, align 4
  %527 = add i64 %442, 62
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %528, align 4
  %529 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %530 = add i64 %529, -11624
  %531 = add i64 %529, 7
  %532 = load i64, i64* %RSP, align 8, !tbaa !2428
  %533 = add i64 %532, -8
  %534 = inttoptr i64 %533 to i64*
  store i64 %531, i64* %534, align 8
  store i64 %533, i64* %RSP, align 8, !tbaa !2428
  store i64 %530, i64* %PC, align 8, !tbaa !2428
  %535 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %441)
  %536 = load i64, i64* %PC, align 8
  store i64 20, i64* %R8, align 8, !tbaa !2428
  %537 = load i64, i64* %RBP, align 8
  %538 = add i64 %537, -52
  %539 = add i64 %536, 10
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %538 to i32*
  %541 = load i32, i32* %540, align 4
  %542 = zext i32 %541 to i64
  store i64 %542, i64* %R9, align 8, !tbaa !2428
  %543 = add i64 %537, -8
  %544 = add i64 %536, 15
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %543 to i32*
  %546 = load i32, i32* %545, align 4
  %547 = sext i32 %541 to i64
  %548 = sext i32 %546 to i64
  %549 = mul nsw i64 %548, %547
  %550 = trunc i64 %549 to i32
  %551 = and i64 %549, 4294967295
  store i64 %551, i64* %R9, align 8, !tbaa !2428
  %552 = shl i64 %549, 32
  %553 = ashr exact i64 %552, 32
  %554 = icmp ne i64 %553, %549
  %555 = zext i1 %554 to i8
  store i8 %555, i8* %18, align 1, !tbaa !2432
  %556 = and i32 %550, 255
  %557 = tail call i32 @llvm.ctpop.i32(i32 %556) #9
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = xor i8 %559, 1
  store i8 %560, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %33, align 1, !tbaa !2447
  %561 = lshr i32 %550, 31
  %562 = trunc i32 %561 to i8
  store i8 %562, i8* %36, align 1, !tbaa !2448
  store i8 %555, i8* %42, align 1, !tbaa !2449
  %563 = trunc i64 %549 to i32
  %564 = add i64 %537, -56
  %565 = add i64 %536, 19
  store i64 %565, i64* %PC, align 8
  %566 = inttoptr i64 %564 to i32*
  %567 = load i32, i32* %566, align 4
  %568 = add i32 %567, %563
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %R9, align 8, !tbaa !2428
  %570 = icmp ult i32 %568, %563
  %571 = icmp ult i32 %568, %567
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %18, align 1, !tbaa !2432
  %574 = and i32 %568, 255
  %575 = tail call i32 @llvm.ctpop.i32(i32 %574) #9
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  store i8 %578, i8* %25, align 1, !tbaa !2446
  %579 = xor i32 %567, %563
  %580 = xor i32 %579, %568
  %581 = lshr i32 %580, 4
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  store i8 %583, i8* %30, align 1, !tbaa !2450
  %584 = icmp eq i32 %568, 0
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %33, align 1, !tbaa !2447
  %586 = lshr i32 %568, 31
  %587 = trunc i32 %586 to i8
  store i8 %587, i8* %36, align 1, !tbaa !2448
  %588 = lshr i32 %563, 31
  %589 = lshr i32 %567, 31
  %590 = xor i32 %586, %588
  %591 = xor i32 %586, %589
  %592 = add nuw nsw i32 %590, %591
  %593 = icmp eq i32 %592, 2
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %42, align 1, !tbaa !2449
  %595 = add i64 %537, -76
  %596 = load i32, i32* %EAX, align 4
  %597 = add i64 %536, 22
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %595 to i32*
  store i32 %596, i32* %598, align 4
  %599 = load i32, i32* %R9D, align 4
  %600 = zext i32 %599 to i64
  %601 = load i64, i64* %PC, align 8
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %602 = sext i32 %599 to i64
  %603 = lshr i64 %602, 32
  store i64 %603, i64* %95, align 8, !tbaa !2428
  %604 = load i32, i32* %R8D, align 4
  %605 = add i64 %601, 7
  store i64 %605, i64* %PC, align 8
  %606 = sext i32 %604 to i64
  %607 = shl nuw i64 %603, 32
  %608 = or i64 %607, %600
  %609 = sdiv i64 %608, %606
  %610 = shl i64 %609, 32
  %611 = ashr exact i64 %610, 32
  %612 = icmp eq i64 %609, %611
  br i1 %612, label %615, label %613

; <label>:613:                                    ; preds = %block_40320e
  %614 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %605, %struct.Memory* %535) #12
  %.pre10 = load i32, i32* %EDX, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:615:                                    ; preds = %block_40320e
  %616 = srem i64 %608, %606
  %617 = and i64 %609, 4294967295
  store i64 %617, i64* %RAX, align 8, !tbaa !2428
  %618 = and i64 %616, 4294967295
  store i64 %618, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %18, align 1, !tbaa !2432
  store i8 0, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %33, align 1, !tbaa !2447
  store i8 0, i8* %36, align 1, !tbaa !2448
  store i8 0, i8* %42, align 1, !tbaa !2449
  %619 = trunc i64 %616 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %615, %613
  %620 = phi i64 [ %.pre11, %613 ], [ %605, %615 ]
  %621 = phi i32 [ %.pre10, %613 ], [ %619, %615 ]
  %622 = phi %struct.Memory* [ %614, %613 ], [ %535, %615 ]
  store i8 0, i8* %18, align 1, !tbaa !2432
  %623 = and i32 %621, 255
  %624 = tail call i32 @llvm.ctpop.i32(i32 %623) #9
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  store i8 %627, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2450
  %628 = icmp eq i32 %621, 0
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %33, align 1, !tbaa !2447
  %630 = lshr i32 %621, 31
  %631 = trunc i32 %630 to i8
  store i8 %631, i8* %36, align 1, !tbaa !2448
  store i8 0, i8* %42, align 1, !tbaa !2449
  %.v17 = select i1 %628, i64 9, i64 37
  %632 = add i64 %620, %.v17
  store i64 %632, i64* %PC, align 8, !tbaa !2428
  br i1 %628, label %block_403345, label %block_403361

block_4031e8:                                     ; preds = %block_4031dc
  %633 = add i64 %100, -56
  %634 = add i64 %136, 7
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %633 to i32*
  store i32 0, i32* %635, align 4
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4031ef

block_4031ef:                                     ; preds = %block_4031e8, %block_403374
  %636 = phi i64 [ %.pre8, %block_4031e8 ], [ %166, %block_403374 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4031e8 ], [ %MEMORY.2, %block_403374 ]
  %637 = load i64, i64* %RBP, align 8
  %638 = add i64 %637, -56
  %639 = add i64 %636, 3
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %638 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = add i64 %637, -12
  %644 = add i64 %636, 6
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = sub i32 %641, %646
  %648 = icmp ult i32 %641, %646
  %649 = zext i1 %648 to i8
  store i8 %649, i8* %18, align 1, !tbaa !2432
  %650 = and i32 %647, 255
  %651 = tail call i32 @llvm.ctpop.i32(i32 %650) #9
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  %654 = xor i8 %653, 1
  store i8 %654, i8* %25, align 1, !tbaa !2446
  %655 = xor i32 %646, %641
  %656 = xor i32 %655, %647
  %657 = lshr i32 %656, 4
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  store i8 %659, i8* %30, align 1, !tbaa !2450
  %660 = icmp eq i32 %647, 0
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %33, align 1, !tbaa !2447
  %662 = lshr i32 %647, 31
  %663 = trunc i32 %662 to i8
  store i8 %663, i8* %36, align 1, !tbaa !2448
  %664 = lshr i32 %641, 31
  %665 = lshr i32 %646, 31
  %666 = xor i32 %665, %664
  %667 = xor i32 %662, %664
  %668 = add nuw nsw i32 %667, %666
  %669 = icmp eq i32 %668, 2
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %42, align 1, !tbaa !2449
  %671 = icmp ne i8 %663, 0
  %672 = xor i1 %671, %669
  %.demorgan13 = or i1 %660, %672
  %.v15 = select i1 %.demorgan13, i64 12, i64 408
  %673 = add i64 %636, %.v15
  store i64 %673, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan13, label %block_4031fb, label %block_403387

block_403387:                                     ; preds = %block_4031ef
  %674 = add i64 %637, -52
  %675 = add i64 %673, 8
  store i64 %675, i64* %PC, align 8
  %676 = inttoptr i64 %674 to i32*
  %677 = load i32, i32* %676, align 4
  %678 = add i32 %677, 1
  %679 = zext i32 %678 to i64
  store i64 %679, i64* %RAX, align 8, !tbaa !2428
  %680 = icmp eq i32 %677, -1
  %681 = icmp eq i32 %678, 0
  %682 = or i1 %680, %681
  %683 = zext i1 %682 to i8
  store i8 %683, i8* %18, align 1, !tbaa !2432
  %684 = and i32 %678, 255
  %685 = tail call i32 @llvm.ctpop.i32(i32 %684) #9
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  store i8 %688, i8* %25, align 1, !tbaa !2446
  %689 = xor i32 %678, %677
  %690 = lshr i32 %689, 4
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  store i8 %692, i8* %30, align 1, !tbaa !2450
  %693 = zext i1 %681 to i8
  store i8 %693, i8* %33, align 1, !tbaa !2447
  %694 = lshr i32 %678, 31
  %695 = trunc i32 %694 to i8
  store i8 %695, i8* %36, align 1, !tbaa !2448
  %696 = lshr i32 %677, 31
  %697 = xor i32 %694, %696
  %698 = add nuw nsw i32 %697, %694
  %699 = icmp eq i32 %698, 2
  %700 = zext i1 %699 to i8
  store i8 %700, i8* %42, align 1, !tbaa !2449
  %701 = add i64 %673, 14
  store i64 %701, i64* %PC, align 8
  store i32 %678, i32* %676, align 4
  %702 = load i64, i64* %PC, align 8
  %703 = add i64 %702, -441
  store i64 %703, i64* %PC, align 8, !tbaa !2428
  br label %block_4031dc

block_40339a:                                     ; preds = %block_4031dc
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %704 = load i64, i64* @stderr, align 32
  store i64 %704, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %705 = add i64 %136, -11754
  %706 = add i64 %136, 25
  %707 = load i64, i64* %RSP, align 8, !tbaa !2428
  %708 = add i64 %707, -8
  %709 = inttoptr i64 %708 to i64*
  store i64 %706, i64* %709, align 8
  store i64 %708, i64* %RSP, align 8, !tbaa !2428
  store i64 %705, i64* %PC, align 8, !tbaa !2428
  %710 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %711 = load i64, i64* %RBP, align 8
  %712 = add i64 %711, -84
  %713 = load i32, i32* %EAX, align 4
  %714 = load i64, i64* %PC, align 8
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %712 to i32*
  store i32 %713, i32* %716, align 4
  %717 = load i64, i64* %RSP, align 8
  %718 = load i64, i64* %PC, align 8
  %719 = add i64 %717, 96
  store i64 %719, i64* %RSP, align 8, !tbaa !2428
  %720 = icmp ugt i64 %717, -97
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %18, align 1, !tbaa !2432
  %722 = trunc i64 %719 to i32
  %723 = and i32 %722, 255
  %724 = tail call i32 @llvm.ctpop.i32(i32 %723) #9
  %725 = trunc i32 %724 to i8
  %726 = and i8 %725, 1
  %727 = xor i8 %726, 1
  store i8 %727, i8* %25, align 1, !tbaa !2446
  %728 = xor i64 %719, %717
  %729 = lshr i64 %728, 4
  %730 = trunc i64 %729 to i8
  %731 = and i8 %730, 1
  store i8 %731, i8* %30, align 1, !tbaa !2450
  %732 = icmp eq i64 %719, 0
  %733 = zext i1 %732 to i8
  store i8 %733, i8* %33, align 1, !tbaa !2447
  %734 = lshr i64 %719, 63
  %735 = trunc i64 %734 to i8
  store i8 %735, i8* %36, align 1, !tbaa !2448
  %736 = lshr i64 %717, 63
  %737 = xor i64 %734, %736
  %738 = add nuw nsw i64 %737, %734
  %739 = icmp eq i64 %738, 2
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %42, align 1, !tbaa !2449
  %741 = add i64 %718, 5
  store i64 %741, i64* %PC, align 8
  %742 = add i64 %717, 104
  %743 = inttoptr i64 %719 to i64*
  %744 = load i64, i64* %743, align 8
  store i64 %744, i64* %RBP, align 8, !tbaa !2428
  store i64 %742, i64* %RSP, align 8, !tbaa !2428
  %745 = add i64 %718, 6
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %742 to i64*
  %747 = load i64, i64* %746, align 8
  store i64 %747, i64* %PC, align 8, !tbaa !2428
  %748 = add i64 %717, 112
  store i64 %748, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %710

block_403345:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  store i64 add (i64 ptrtoint (%seg_403440__rodata_type* @seg_403440__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %749 = load i64, i64* @stderr, align 32
  store i64 %749, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %750 = add i64 %632, -11669
  %751 = add i64 %632, 25
  %752 = load i64, i64* %RSP, align 8, !tbaa !2428
  %753 = add i64 %752, -8
  %754 = inttoptr i64 %753 to i64*
  store i64 %751, i64* %754, align 8
  store i64 %753, i64* %RSP, align 8, !tbaa !2428
  store i64 %750, i64* %PC, align 8, !tbaa !2428
  %755 = tail call fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State* nonnull %0, %struct.Memory* %622)
  %756 = load i64, i64* %RBP, align 8
  %757 = add i64 %756, -80
  %758 = load i32, i32* %EAX, align 4
  %759 = load i64, i64* %PC, align 8
  %760 = add i64 %759, 3
  store i64 %760, i64* %PC, align 8
  %761 = inttoptr i64 %757 to i32*
  store i32 %758, i32* %761, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_403361

block_403202:                                     ; preds = %block_403361, %block_4031fb
  %762 = phi i64 [ %.pre9, %block_4031fb ], [ %831, %block_403361 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4031fb ], [ %MEMORY.3, %block_403361 ]
  %763 = load i64, i64* %RBP, align 8
  %764 = add i64 %763, -60
  %765 = add i64 %762, 3
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %764 to i32*
  %767 = load i32, i32* %766, align 4
  %768 = zext i32 %767 to i64
  store i64 %768, i64* %RAX, align 8, !tbaa !2428
  %769 = add i64 %763, -8
  %770 = add i64 %762, 6
  store i64 %770, i64* %PC, align 8
  %771 = inttoptr i64 %769 to i32*
  %772 = load i32, i32* %771, align 4
  %773 = sub i32 %767, %772
  %774 = icmp ult i32 %767, %772
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %18, align 1, !tbaa !2432
  %776 = and i32 %773, 255
  %777 = tail call i32 @llvm.ctpop.i32(i32 %776) #9
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  store i8 %780, i8* %25, align 1, !tbaa !2446
  %781 = xor i32 %772, %767
  %782 = xor i32 %781, %773
  %783 = lshr i32 %782, 4
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  store i8 %785, i8* %30, align 1, !tbaa !2450
  %786 = icmp eq i32 %773, 0
  %787 = zext i1 %786 to i8
  store i8 %787, i8* %33, align 1, !tbaa !2447
  %788 = lshr i32 %773, 31
  %789 = trunc i32 %788 to i8
  store i8 %789, i8* %36, align 1, !tbaa !2448
  %790 = lshr i32 %767, 31
  %791 = lshr i32 %772, 31
  %792 = xor i32 %791, %790
  %793 = xor i32 %788, %790
  %794 = add nuw nsw i32 %793, %792
  %795 = icmp eq i32 %794, 2
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %42, align 1, !tbaa !2449
  %797 = icmp ne i8 %789, 0
  %798 = xor i1 %797, %795
  %.demorgan14 = or i1 %786, %798
  %.v = select i1 %.demorgan14, i64 12, i64 370
  %799 = add i64 %762, %.v
  store i64 %799, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan14, label %block_40320e, label %block_403374

block_403361:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_403345
  %800 = phi i64 [ %632, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %.pre12, %block_403345 ]
  %MEMORY.3 = phi %struct.Memory* [ %622, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %755, %block_403345 ]
  %801 = load i64, i64* %RBP, align 8
  %802 = add i64 %801, -60
  %803 = add i64 %800, 8
  store i64 %803, i64* %PC, align 8
  %804 = inttoptr i64 %802 to i32*
  %805 = load i32, i32* %804, align 4
  %806 = add i32 %805, 1
  %807 = zext i32 %806 to i64
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = icmp eq i32 %805, -1
  %809 = icmp eq i32 %806, 0
  %810 = or i1 %808, %809
  %811 = zext i1 %810 to i8
  store i8 %811, i8* %18, align 1, !tbaa !2432
  %812 = and i32 %806, 255
  %813 = tail call i32 @llvm.ctpop.i32(i32 %812) #9
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  %816 = xor i8 %815, 1
  store i8 %816, i8* %25, align 1, !tbaa !2446
  %817 = xor i32 %806, %805
  %818 = lshr i32 %817, 4
  %819 = trunc i32 %818 to i8
  %820 = and i8 %819, 1
  store i8 %820, i8* %30, align 1, !tbaa !2450
  %821 = zext i1 %809 to i8
  store i8 %821, i8* %33, align 1, !tbaa !2447
  %822 = lshr i32 %806, 31
  %823 = trunc i32 %822 to i8
  store i8 %823, i8* %36, align 1, !tbaa !2448
  %824 = lshr i32 %805, 31
  %825 = xor i32 %822, %824
  %826 = add nuw nsw i32 %825, %822
  %827 = icmp eq i32 %826, 2
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %42, align 1, !tbaa !2449
  %829 = add i64 %800, 14
  store i64 %829, i64* %PC, align 8
  store i32 %806, i32* %804, align 4
  %830 = load i64, i64* %PC, align 8
  %831 = add i64 %830, -365
  store i64 %831, i64* %PC, align 8, !tbaa !2428
  br label %block_403202
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4006c0_frame_dummy() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4006c0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4006c0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400690___do_global_dtors_aux() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_400690___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400690___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_403430___libc_csu_fini() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403430;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_403430___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403430___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4033c0___libc_csu_init() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4033c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4033c0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4033c0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4008b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4008b0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040e8___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040e0_printf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4005b0_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4005c0_exit(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_604108_posix_memalign(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040d8_free(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040f0_calloc(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_alloc_data() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_alloc_data_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007f0_polybench_alloc_data(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_flush_cache() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_flush_cache_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4006d0_polybench_flush_cache(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_timer_stop() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400790;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @polybench_timer_stop_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400790_polybench_timer_stop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_timer_print() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_timer_print_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007b0_polybench_timer_print(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403434;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403434__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_prepare_instruments() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_prepare_instruments_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400750_polybench_prepare_instruments(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_timer_start() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_timer_start_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400760_polybench_timer_start(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400550__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #9 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_4033c0___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #9 {
  tail call void @callback_sub_403430___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { naked nobuiltin noinline nounwind }
attributes #9 = { nounwind }
attributes #10 = { norecurse nounwind }
attributes #11 = { noinline nounwind }
attributes #12 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2430, !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
