; ModuleID = '/tmp/tmprpu_5q1k-target.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_403450__rodata_type = type <{ [112 x i8], [7 x i8], [51 x i8], [8 x i8], [84 x i8] }>
%seg_603de0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604060__bss_type = type <{ [8 x i8], [8 x i8] }>
%polybench_papi_counters_threadid_type = type <{ [8 x i8] }>
%polybench_program_total_flops_type = type <{ [8 x i8] }>
%polybench_c_end_type = type <{ [8 x i8] }>
%polybench_t_end_type = type <{ [8 x i8] }>
%polybench_t_start_type = type <{ [8 x i8] }>
%polybench_c_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external local_unnamed_addr global i64, align 32
@seg_403450__rodata = internal constant %seg_403450__rodata_type <{ [112 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00E@\00\00\00\00\00J\A2@\00\00\00\00\00\00&@\00\00\00\00\00\00$@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\00\00\00\00\00\00\18@\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\F1h\E3\88\B5\F8\E4>\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [7 x i8] c"%0.6f\0A\00", [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", [8 x i8] c"%0.2lf \00", [84 x i8] c"A[%d][%d][%d] = %lf and B[%d][%d][%d] = %lf differ more than FP_ABSTOLERANCE = %lf\0A\00" }>
@seg_603de0__init_array = internal global %seg_603de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4006d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4006a0___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604060__bss = internal global %seg_604060__bss_type zeroinitializer
@polybench_papi_counters_threadid = local_unnamed_addr global %polybench_papi_counters_threadid_type zeroinitializer
@polybench_program_total_flops = local_unnamed_addr global %polybench_program_total_flops_type zeroinitializer
@polybench_c_end = local_unnamed_addr global %polybench_c_end_type zeroinitializer
@polybench_t_end = local_unnamed_addr global %polybench_t_end_type zeroinitializer
@polybench_t_start = local_unnamed_addr global %polybench_t_start_type zeroinitializer
@polybench_c_start = local_unnamed_addr global %polybench_c_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4006d0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4006a0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_403440___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4033d0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_flush_cache_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_start_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_prepare_instruments_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_alloc_data_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_stop_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_print_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_4006e0_polybench_flush_cache_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_403020_check_FP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400790_rtclock_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400840_xmalloc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400760_polybench_prepare_instruments_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4031c0_print_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400560__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4014c0_kernel_fdtd_apml_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400fd0_init_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400630_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402270_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_4006a0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4006a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2428
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #10
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2445
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2446
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2447
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2449
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2450
  br i1 %12, label %block_4006a9, label %block_4006c0

block_4006c0:                                     ; preds = %block_4006a0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2450
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2450
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2450
  ret %struct.Memory* %2

block_4006a9:                                     ; preds = %block_4006a0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2450
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2450
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2450
  store i64 %32, i64* %PC, align 8, !tbaa !2450
  %36 = tail call %struct.Memory* @sub_400630_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2450
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2450
  store i64 %40, i64* %27, align 8, !tbaa !2450
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2450
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2450
  ret %struct.Memory* %36
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400660_register_tm_clones(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400660:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6307928, i64* %RSI, align 8, !tbaa !2450
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2450
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2450
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %8, -6307928
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2450
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2450
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2450
  store i8 %21, i8* %11, align 1, !tbaa !2451
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #10
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2451
  store i8 0, i8* %13, align 1, !tbaa !2451
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2451
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2451
  store i8 0, i8* %16, align 1, !tbaa !2451
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %.v, %9
  store i64 %33, i64* %PC, align 8, !tbaa !2450
  br i1 %29, label %block_400698, label %block_400683

block_400698:                                     ; preds = %block_400683, %block_400660
  %34 = phi i64 [ %41, %block_400683 ], [ %33, %block_400660 ]
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %7, align 8
  store i64 %36, i64* %RBP, align 8, !tbaa !2450
  store i64 %5, i64* %RSP, align 8, !tbaa !2450
  %37 = add i64 %34, 2
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %5 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2450
  %40 = add i64 %5, 8
  store i64 %40, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %2

block_400683:                                     ; preds = %block_400660
  store i64 0, i64* %RAX, align 8, !tbaa !2450
  store i8 0, i8* %11, align 1, !tbaa !2428
  store i8 1, i8* %12, align 1, !tbaa !2445
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 0, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %13, align 1, !tbaa !2446
  %41 = add i64 %33, 21
  store i64 %41, i64* %PC, align 8, !tbaa !2450
  br label %block_400698
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400620__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400620:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2450
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2450
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2450
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400770_polybench_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400770:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2450
  store i64 %10, i64* %PC, align 8, !tbaa !2450
  %14 = tail call %struct.Memory* @sub_400760_polybench_prepare_instruments_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 23
  %17 = add i64 %15, 5
  %18 = load i64, i64* %5, align 8, !tbaa !2450
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %5, align 8, !tbaa !2450
  store i64 %16, i64* %PC, align 8, !tbaa !2450
  %21 = tail call %struct.Memory* @sub_400790_rtclock_renamed_(%struct.State* nonnull %0, i64 %16, %struct.Memory* %14)
  %22 = load i64, i64* %PC, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %24 = load i64, i64* %23, align 1
  store i64 %24, i64* bitcast (%polybench_t_start_type* @polybench_t_start to i64*), align 8
  %25 = add i64 %22, 10
  store i64 %25, i64* %PC, align 8
  %26 = load i64, i64* %5, align 8, !tbaa !2450
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2450
  store i64 %27, i64* %5, align 8, !tbaa !2450
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %PC, align 8, !tbaa !2450
  %33 = add i64 %26, 16
  store i64 %33, i64* %5, align 8, !tbaa !2450
  ret %struct.Memory* %21
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007a0_polybench_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4007a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %9, -17
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2450
  store i64 %10, i64* %PC, align 8, !tbaa !2450
  %14 = tail call %struct.Memory* @sub_400790_rtclock_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %17 = load i64, i64* %16, align 1
  store i64 %17, i64* bitcast (%polybench_t_end_type* @polybench_t_end to i64*), align 8
  %18 = add i64 %15, 10
  store i64 %18, i64* %PC, align 8
  %19 = load i64, i64* %5, align 8, !tbaa !2450
  %20 = add i64 %19, 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RBP, align 8, !tbaa !2450
  store i64 %20, i64* %5, align 8, !tbaa !2450
  %23 = add i64 %15, 11
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %20 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %PC, align 8, !tbaa !2450
  %26 = add i64 %19, 16
  store i64 %26, i64* %5, align 8, !tbaa !2450
  ret %struct.Memory* %14
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400790_rtclock(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400790:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2450
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2450
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2450
  %11 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %11, align 1, !tbaa !2452
  %12 = add i64 %10, 7
  store i64 %12, i64* %PC, align 8
  %13 = load i64, i64* %9, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2450
  store i64 %7, i64* %6, align 8, !tbaa !2450
  %14 = add i64 %10, 8
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %7 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %PC, align 8, !tbaa !2450
  %17 = add i64 %7, 8
  store i64 %17, i64* %6, align 8, !tbaa !2450
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4008c0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4008c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2450
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2450
  %11 = load i64, i64* %R15, align 8
  %12 = add i64 %10, 5
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = load i64, i64* %R14, align 8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 2
  store i64 %17, i64* %PC, align 8
  %18 = add i64 %7, -24
  %19 = inttoptr i64 %18 to i64*
  store i64 %15, i64* %19, align 8
  %20 = load i64, i64* %R13, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 2
  store i64 %22, i64* %PC, align 8
  %23 = add i64 %7, -32
  %24 = inttoptr i64 %23 to i64*
  store i64 %20, i64* %24, align 8
  %25 = load i64, i64* %R12, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 2
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %7, -40
  %29 = inttoptr i64 %28 to i64*
  store i64 %25, i64* %29, align 8
  %30 = load i64, i64* %RBX, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %7, -48
  %34 = inttoptr i64 %33 to i64*
  store i64 %30, i64* %34, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %7, -440
  store i64 %36, i64* %RSP, align 8, !tbaa !2450
  %37 = icmp ult i64 %33, 392
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2428
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = tail call i32 @llvm.ctpop.i32(i32 %41) #10
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2445
  %47 = xor i64 %33, %36
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2446
  %52 = icmp eq i64 %36, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = lshr i64 %36, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %33, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2449
  store i64 4225, i64* %RCX, align 8, !tbaa !2450
  store i64 8, i64* %RAX, align 8, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -44
  %66 = add i64 %35, 26
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i32*
  store i32 0, i32* %67, align 4
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -48
  %70 = load i32, i32* %EDI, align 4
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %69 to i32*
  store i32 %70, i32* %73, align 4
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -56
  %76 = load i64, i64* %RSI, align 8
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79, align 8
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -60
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i32*
  store i32 64, i32* %84, align 4
  %85 = load i64, i64* %RBP, align 8
  %86 = add i64 %85, -64
  %87 = load i64, i64* %PC, align 8
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %86 to i32*
  store i32 64, i32* %89, align 4
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -68
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 7
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i32*
  store i32 64, i32* %94, align 4
  %95 = load i64, i64* %RCX, align 8
  %96 = load i64, i64* %PC, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2450
  %97 = load i32, i32* %EAX, align 4
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %RSI, align 8, !tbaa !2450
  %99 = add i64 %96, -259
  %100 = add i64 %96, 10
  %101 = load i64, i64* %RSP, align 8, !tbaa !2450
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %100, i64* %103, align 8
  store i64 %102, i64* %RSP, align 8, !tbaa !2450
  store i64 %99, i64* %PC, align 8, !tbaa !2450
  %104 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %99, %struct.Memory* %2)
  %105 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -96
  %108 = load i64, i64* %RAX, align 8
  %109 = add i64 %105, 16
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %110, align 8
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, -285
  %113 = add i64 %111, 5
  %114 = load i64, i64* %RSP, align 8, !tbaa !2450
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116, align 8
  store i64 %115, i64* %RSP, align 8, !tbaa !2450
  store i64 %112, i64* %PC, align 8, !tbaa !2450
  %117 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %112, %struct.Memory* %104)
  %118 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %119 = load i64, i64* %RBP, align 8
  %120 = add i64 %119, -104
  %121 = load i64, i64* %RAX, align 8
  %122 = add i64 %118, 16
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %120 to i64*
  store i64 %121, i64* %123, align 8
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, -306
  %126 = add i64 %124, 5
  %127 = load i64, i64* %RSP, align 8, !tbaa !2450
  %128 = add i64 %127, -8
  %129 = inttoptr i64 %128 to i64*
  store i64 %126, i64* %129, align 8
  store i64 %128, i64* %RSP, align 8, !tbaa !2450
  store i64 %125, i64* %PC, align 8, !tbaa !2450
  %130 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %125, %struct.Memory* %117)
  %131 = load i64, i64* %PC, align 8
  store i64 4225, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -112
  %134 = load i64, i64* %RAX, align 8
  %135 = add i64 %131, 16
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  store i64 %134, i64* %136, align 8
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, -327
  %139 = add i64 %137, 5
  %140 = load i64, i64* %RSP, align 8, !tbaa !2450
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i64*
  store i64 %139, i64* %142, align 8
  store i64 %141, i64* %RSP, align 8, !tbaa !2450
  store i64 %138, i64* %PC, align 8, !tbaa !2450
  %143 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %138, %struct.Memory* %130)
  %144 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -120
  %147 = load i64, i64* %RAX, align 8
  %148 = add i64 %144, 16
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %146 to i64*
  store i64 %147, i64* %149, align 8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, -348
  %152 = add i64 %150, 5
  %153 = load i64, i64* %RSP, align 8, !tbaa !2450
  %154 = add i64 %153, -8
  %155 = inttoptr i64 %154 to i64*
  store i64 %152, i64* %155, align 8
  store i64 %154, i64* %RSP, align 8, !tbaa !2450
  store i64 %151, i64* %PC, align 8, !tbaa !2450
  %156 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %151, %struct.Memory* %143)
  %157 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -128
  %160 = load i64, i64* %RAX, align 8
  %161 = add i64 %157, 16
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i64*
  store i64 %160, i64* %162, align 8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -369
  %165 = add i64 %163, 5
  %166 = load i64, i64* %RSP, align 8, !tbaa !2450
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2450
  store i64 %164, i64* %PC, align 8, !tbaa !2450
  %169 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %164, %struct.Memory* %156)
  %170 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -136
  %173 = load i64, i64* %RAX, align 8
  %174 = add i64 %170, 19
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %175, align 8
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, -393
  %178 = add i64 %176, 5
  %179 = load i64, i64* %RSP, align 8, !tbaa !2450
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181, align 8
  store i64 %180, i64* %RSP, align 8, !tbaa !2450
  store i64 %177, i64* %PC, align 8, !tbaa !2450
  %182 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %177, %struct.Memory* %169)
  %183 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -144
  %186 = load i64, i64* %RAX, align 8
  %187 = add i64 %183, 19
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %185 to i64*
  store i64 %186, i64* %188, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, -417
  %191 = add i64 %189, 5
  %192 = load i64, i64* %RSP, align 8, !tbaa !2450
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194, align 8
  store i64 %193, i64* %RSP, align 8, !tbaa !2450
  store i64 %190, i64* %PC, align 8, !tbaa !2450
  %195 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %190, %struct.Memory* %182)
  %196 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -152
  %199 = load i64, i64* %RAX, align 8
  %200 = add i64 %196, 19
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %198 to i64*
  store i64 %199, i64* %201, align 8
  %202 = load i64, i64* %PC, align 8
  %203 = add i64 %202, -441
  %204 = add i64 %202, 5
  %205 = load i64, i64* %RSP, align 8, !tbaa !2450
  %206 = add i64 %205, -8
  %207 = inttoptr i64 %206 to i64*
  store i64 %204, i64* %207, align 8
  store i64 %206, i64* %RSP, align 8, !tbaa !2450
  store i64 %203, i64* %PC, align 8, !tbaa !2450
  %208 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %203, %struct.Memory* %195)
  %209 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -160
  %212 = load i64, i64* %RAX, align 8
  %213 = add i64 %209, 19
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %211 to i64*
  store i64 %212, i64* %214, align 8
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, -465
  %217 = add i64 %215, 5
  %218 = load i64, i64* %RSP, align 8, !tbaa !2450
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %RSP, align 8, !tbaa !2450
  store i64 %216, i64* %PC, align 8, !tbaa !2450
  %221 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %216, %struct.Memory* %208)
  %222 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -168
  %225 = load i64, i64* %RAX, align 8
  %226 = add i64 %222, 19
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i64*
  store i64 %225, i64* %227, align 8
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, -489
  %230 = add i64 %228, 5
  %231 = load i64, i64* %RSP, align 8, !tbaa !2450
  %232 = add i64 %231, -8
  %233 = inttoptr i64 %232 to i64*
  store i64 %230, i64* %233, align 8
  store i64 %232, i64* %RSP, align 8, !tbaa !2450
  store i64 %229, i64* %PC, align 8, !tbaa !2450
  %234 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %229, %struct.Memory* %221)
  %235 = load i64, i64* %PC, align 8
  store i64 274625, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -176
  %238 = load i64, i64* %RAX, align 8
  %239 = add i64 %235, 19
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to i64*
  store i64 %238, i64* %240, align 8
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, -513
  %243 = add i64 %241, 5
  %244 = load i64, i64* %RSP, align 8, !tbaa !2450
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %RSP, align 8, !tbaa !2450
  store i64 %242, i64* %PC, align 8, !tbaa !2450
  %247 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %242, %struct.Memory* %234)
  %248 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -184
  %251 = load i64, i64* %RAX, align 8
  %252 = add i64 %248, 19
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %253, align 8
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, -537
  %256 = add i64 %254, 5
  %257 = load i64, i64* %RSP, align 8, !tbaa !2450
  %258 = add i64 %257, -8
  %259 = inttoptr i64 %258 to i64*
  store i64 %256, i64* %259, align 8
  store i64 %258, i64* %RSP, align 8, !tbaa !2450
  store i64 %255, i64* %PC, align 8, !tbaa !2450
  %260 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %255, %struct.Memory* %247)
  %261 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %262 = load i64, i64* %RBP, align 8
  %263 = add i64 %262, -192
  %264 = load i64, i64* %RAX, align 8
  %265 = add i64 %261, 19
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %263 to i64*
  store i64 %264, i64* %266, align 8
  %267 = load i64, i64* %PC, align 8
  %268 = add i64 %267, -561
  %269 = add i64 %267, 5
  %270 = load i64, i64* %RSP, align 8, !tbaa !2450
  %271 = add i64 %270, -8
  %272 = inttoptr i64 %271 to i64*
  store i64 %269, i64* %272, align 8
  store i64 %271, i64* %RSP, align 8, !tbaa !2450
  store i64 %268, i64* %PC, align 8, !tbaa !2450
  %273 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %268, %struct.Memory* %260)
  %274 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %275 = load i64, i64* %RBP, align 8
  %276 = add i64 %275, -200
  %277 = load i64, i64* %RAX, align 8
  %278 = add i64 %274, 19
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %276 to i64*
  store i64 %277, i64* %279, align 8
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, -585
  %282 = add i64 %280, 5
  %283 = load i64, i64* %RSP, align 8, !tbaa !2450
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285, align 8
  store i64 %284, i64* %RSP, align 8, !tbaa !2450
  store i64 %281, i64* %PC, align 8, !tbaa !2450
  %286 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %281, %struct.Memory* %273)
  %287 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %288 = load i64, i64* %RBP, align 8
  %289 = add i64 %288, -208
  %290 = load i64, i64* %RAX, align 8
  %291 = add i64 %287, 19
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %289 to i64*
  store i64 %290, i64* %292, align 8
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, -609
  %295 = add i64 %293, 5
  %296 = load i64, i64* %RSP, align 8, !tbaa !2450
  %297 = add i64 %296, -8
  %298 = inttoptr i64 %297 to i64*
  store i64 %295, i64* %298, align 8
  store i64 %297, i64* %RSP, align 8, !tbaa !2450
  store i64 %294, i64* %PC, align 8, !tbaa !2450
  %299 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %294, %struct.Memory* %286)
  %300 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -216
  %303 = load i64, i64* %RAX, align 8
  %304 = add i64 %300, 19
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %302 to i64*
  store i64 %303, i64* %305, align 8
  %306 = load i64, i64* %PC, align 8
  %307 = add i64 %306, -633
  %308 = add i64 %306, 5
  %309 = load i64, i64* %RSP, align 8, !tbaa !2450
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311, align 8
  store i64 %310, i64* %RSP, align 8, !tbaa !2450
  store i64 %307, i64* %PC, align 8, !tbaa !2450
  %312 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %307, %struct.Memory* %299)
  %313 = load i64, i64* %PC, align 8
  store i64 65, i64* %RDI, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %314 = load i64, i64* %RBP, align 8
  %315 = add i64 %314, -224
  %316 = load i64, i64* %RAX, align 8
  %317 = add i64 %313, 19
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %315 to i64*
  store i64 %316, i64* %318, align 8
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, -657
  %321 = add i64 %319, 5
  %322 = load i64, i64* %RSP, align 8, !tbaa !2450
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %324, align 8
  store i64 %323, i64* %RSP, align 8, !tbaa !2450
  store i64 %320, i64* %PC, align 8, !tbaa !2450
  %325 = tail call %struct.Memory* @sub_400800_polybench_alloc_data_renamed_(%struct.State* nonnull %0, i64 %320, %struct.Memory* %312)
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -80
  %328 = load i64, i64* %PC, align 8
  store i64 %327, i64* %RCX, align 8, !tbaa !2450
  %329 = add i64 %326, -88
  store i64 %329, i64* %R8, align 8, !tbaa !2450
  %330 = add i64 %326, -232
  %331 = load i64, i64* %RAX, align 8
  %332 = add i64 %328, 15
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %330 to i64*
  store i64 %331, i64* %333, align 8
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -60
  %336 = load i64, i64* %PC, align 8
  %337 = add i64 %336, 3
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %335 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = zext i32 %339 to i64
  store i64 %340, i64* %RDI, align 8, !tbaa !2450
  %341 = add i64 %334, -68
  %342 = add i64 %336, 6
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i32*
  %344 = load i32, i32* %343, align 4
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RSI, align 8, !tbaa !2450
  %346 = add i64 %334, -64
  %347 = add i64 %336, 9
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = zext i32 %349 to i64
  store i64 %350, i64* %RDX, align 8, !tbaa !2450
  %351 = add i64 %334, -96
  %352 = add i64 %336, 13
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %R9, align 8, !tbaa !2450
  %355 = add i64 %334, -104
  %356 = add i64 %336, 17
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RAX, align 8, !tbaa !2450
  %359 = add i64 %334, -136
  %360 = add i64 %336, 24
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %R10, align 8, !tbaa !2450
  %363 = add i64 %334, -144
  %364 = add i64 %336, 31
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %R11, align 8, !tbaa !2450
  %367 = add i64 %334, -152
  %368 = add i64 %336, 38
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  %370 = load i64, i64* %369, align 8
  store i64 %370, i64* %RBX, align 8, !tbaa !2450
  %371 = add i64 %334, -192
  %372 = add i64 %336, 45
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %R14, align 8, !tbaa !2450
  %375 = add i64 %334, -200
  %376 = add i64 %336, 52
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %R15, align 8, !tbaa !2450
  %379 = add i64 %334, -208
  %380 = add i64 %336, 59
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %R12, align 8, !tbaa !2450
  %383 = add i64 %334, -216
  %384 = add i64 %336, 66
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %R13, align 8, !tbaa !2450
  %387 = add i64 %334, -240
  %388 = add i64 %336, 73
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  store i64 %358, i64* %389, align 8
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -224
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 7
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %RAX, align 8, !tbaa !2450
  %396 = add i64 %390, -248
  %397 = add i64 %392, 14
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  store i64 %395, i64* %398, align 8
  %399 = load i64, i64* %RBP, align 8
  %400 = add i64 %399, -232
  %401 = load i64, i64* %PC, align 8
  %402 = add i64 %401, 7
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %400 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %RAX, align 8, !tbaa !2450
  %405 = add i64 %399, -256
  %406 = add i64 %401, 14
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i64*
  store i64 %404, i64* %407, align 8
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -240
  %410 = load i64, i64* %PC, align 8
  %411 = add i64 %410, 7
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %409 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %RAX, align 8, !tbaa !2450
  %414 = bitcast i64* %RSP to i64**
  %415 = load i64*, i64** %414, align 8
  %416 = add i64 %410, 11
  store i64 %416, i64* %PC, align 8
  store i64 %413, i64* %415, align 8
  %417 = load i64, i64* %RSP, align 8
  %418 = add i64 %417, 8
  %419 = load i64, i64* %R10, align 8
  %420 = load i64, i64* %PC, align 8
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %418 to i64*
  store i64 %419, i64* %422, align 8
  %423 = load i64, i64* %RSP, align 8
  %424 = add i64 %423, 16
  %425 = load i64, i64* %R11, align 8
  %426 = load i64, i64* %PC, align 8
  %427 = add i64 %426, 5
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %424 to i64*
  store i64 %425, i64* %428, align 8
  %429 = load i64, i64* %RSP, align 8
  %430 = add i64 %429, 24
  %431 = load i64, i64* %RBX, align 8
  %432 = load i64, i64* %PC, align 8
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %430 to i64*
  store i64 %431, i64* %434, align 8
  %435 = load i64, i64* %RSP, align 8
  %436 = add i64 %435, 32
  %437 = load i64, i64* %R14, align 8
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 5
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %436 to i64*
  store i64 %437, i64* %440, align 8
  %441 = load i64, i64* %RSP, align 8
  %442 = add i64 %441, 40
  %443 = load i64, i64* %R15, align 8
  %444 = load i64, i64* %PC, align 8
  %445 = add i64 %444, 5
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %442 to i64*
  store i64 %443, i64* %446, align 8
  %447 = load i64, i64* %RSP, align 8
  %448 = add i64 %447, 48
  %449 = load i64, i64* %R12, align 8
  %450 = load i64, i64* %PC, align 8
  %451 = add i64 %450, 5
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %448 to i64*
  store i64 %449, i64* %452, align 8
  %453 = load i64, i64* %RSP, align 8
  %454 = add i64 %453, 56
  %455 = load i64, i64* %R13, align 8
  %456 = load i64, i64* %PC, align 8
  %457 = add i64 %456, 5
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %454 to i64*
  store i64 %455, i64* %458, align 8
  %459 = load i64, i64* %RBP, align 8
  %460 = add i64 %459, -248
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, 7
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %460 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %RAX, align 8, !tbaa !2450
  %465 = load i64, i64* %RSP, align 8
  %466 = add i64 %465, 64
  %467 = add i64 %461, 12
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i64*
  store i64 %464, i64* %468, align 8
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -256
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 7
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RAX, align 8, !tbaa !2450
  %475 = load i64, i64* %RSP, align 8
  %476 = add i64 %475, 72
  %477 = add i64 %471, 12
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i64*
  store i64 %474, i64* %478, align 8
  %479 = load i64, i64* %PC, align 8
  %480 = add i64 %479, 1152
  %481 = add i64 %479, 5
  %482 = load i64, i64* %RSP, align 8, !tbaa !2450
  %483 = add i64 %482, -8
  %484 = inttoptr i64 %483 to i64*
  store i64 %481, i64* %484, align 8
  store i64 %483, i64* %RSP, align 8, !tbaa !2450
  store i64 %480, i64* %PC, align 8, !tbaa !2450
  %485 = tail call %struct.Memory* @sub_400fd0_init_array_renamed_(%struct.State* nonnull %0, i64 %480, %struct.Memory* %325)
  %486 = load i64, i64* %RBP, align 8
  %487 = add i64 %486, -60
  %488 = load i64, i64* %PC, align 8
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490, align 4
  %492 = zext i32 %491 to i64
  store i64 %492, i64* %RDI, align 8, !tbaa !2450
  %493 = add i64 %486, -68
  %494 = add i64 %488, 6
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i32*
  %496 = load i32, i32* %495, align 4
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RSI, align 8, !tbaa !2450
  %498 = add i64 %486, -64
  %499 = add i64 %488, 9
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i32*
  %501 = load i32, i32* %500, align 4
  %502 = zext i32 %501 to i64
  store i64 %502, i64* %RDX, align 8, !tbaa !2450
  %503 = add i64 %486, -80
  %504 = add i64 %488, 14
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %503 to i64*
  %506 = load i64, i64* %505, align 8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %506, i64* %507, align 1, !tbaa !2453
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %509 = bitcast i64* %508 to double*
  store double 0.000000e+00, double* %509, align 1, !tbaa !2453
  %510 = add i64 %486, -88
  %511 = add i64 %488, 19
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %510 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %513, i64* %514, align 1, !tbaa !2453
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %516 = bitcast i64* %515 to double*
  store double 0.000000e+00, double* %516, align 1, !tbaa !2453
  %517 = add i64 %486, -96
  %518 = add i64 %488, 23
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to i64*
  %520 = load i64, i64* %519, align 8
  store i64 %520, i64* %RCX, align 8, !tbaa !2450
  %521 = add i64 %486, -104
  %522 = add i64 %488, 27
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %R8, align 8, !tbaa !2450
  %525 = add i64 %486, -112
  %526 = add i64 %488, 31
  store i64 %526, i64* %PC, align 8
  %527 = inttoptr i64 %525 to i64*
  %528 = load i64, i64* %527, align 8
  store i64 %528, i64* %R9, align 8, !tbaa !2450
  %529 = add i64 %486, -120
  %530 = add i64 %488, 35
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531, align 8
  store i64 %532, i64* %RAX, align 8, !tbaa !2450
  %533 = add i64 %486, -128
  %534 = add i64 %488, 39
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  store i64 %536, i64* %R10, align 8, !tbaa !2450
  %537 = add i64 %486, -136
  %538 = add i64 %488, 46
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %R11, align 8, !tbaa !2450
  %541 = add i64 %486, -144
  %542 = add i64 %488, 53
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %RBX, align 8, !tbaa !2450
  %545 = add i64 %486, -152
  %546 = add i64 %488, 60
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %R14, align 8, !tbaa !2450
  %549 = add i64 %486, -192
  %550 = add i64 %488, 67
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  store i64 %552, i64* %R15, align 8, !tbaa !2450
  %553 = add i64 %486, -200
  %554 = add i64 %488, 74
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i64*
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %R12, align 8, !tbaa !2450
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -208
  %559 = add i64 %488, 81
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  %561 = load i64, i64* %560, align 8
  store i64 %561, i64* %R13, align 8, !tbaa !2450
  %562 = add i64 %557, -264
  %563 = add i64 %488, 88
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i64*
  store i64 %532, i64* %564, align 8
  %565 = load i64, i64* %RBP, align 8
  %566 = add i64 %565, -216
  %567 = load i64, i64* %PC, align 8
  %568 = add i64 %567, 7
  store i64 %568, i64* %PC, align 8
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %RAX, align 8, !tbaa !2450
  %571 = add i64 %565, -272
  %572 = add i64 %567, 14
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i64*
  store i64 %570, i64* %573, align 8
  %574 = load i64, i64* %RBP, align 8
  %575 = add i64 %574, -224
  %576 = load i64, i64* %PC, align 8
  %577 = add i64 %576, 7
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %575 to i64*
  %579 = load i64, i64* %578, align 8
  store i64 %579, i64* %RAX, align 8, !tbaa !2450
  %580 = add i64 %574, -280
  %581 = add i64 %576, 14
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i64*
  store i64 %579, i64* %582, align 8
  %583 = load i64, i64* %RBP, align 8
  %584 = add i64 %583, -232
  %585 = load i64, i64* %PC, align 8
  %586 = add i64 %585, 7
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %RAX, align 8, !tbaa !2450
  %589 = add i64 %583, -288
  %590 = add i64 %585, 14
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i64*
  store i64 %588, i64* %591, align 8
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -264
  %594 = load i64, i64* %PC, align 8
  %595 = add i64 %594, 7
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RAX, align 8, !tbaa !2450
  %598 = load i64*, i64** %414, align 8
  %599 = add i64 %594, 11
  store i64 %599, i64* %PC, align 8
  store i64 %597, i64* %598, align 8
  %600 = load i64, i64* %RSP, align 8
  %601 = add i64 %600, 8
  %602 = load i64, i64* %R10, align 8
  %603 = load i64, i64* %PC, align 8
  %604 = add i64 %603, 5
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %601 to i64*
  store i64 %602, i64* %605, align 8
  %606 = load i64, i64* %RSP, align 8
  %607 = add i64 %606, 16
  %608 = load i64, i64* %R11, align 8
  %609 = load i64, i64* %PC, align 8
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %607 to i64*
  store i64 %608, i64* %611, align 8
  %612 = load i64, i64* %RSP, align 8
  %613 = add i64 %612, 24
  %614 = load i64, i64* %RBX, align 8
  %615 = load i64, i64* %PC, align 8
  %616 = add i64 %615, 5
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %613 to i64*
  store i64 %614, i64* %617, align 8
  %618 = load i64, i64* %RSP, align 8
  %619 = add i64 %618, 32
  %620 = load i64, i64* %R14, align 8
  %621 = load i64, i64* %PC, align 8
  %622 = add i64 %621, 5
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %619 to i64*
  store i64 %620, i64* %623, align 8
  %624 = load i64, i64* %RSP, align 8
  %625 = add i64 %624, 40
  %626 = load i64, i64* %R15, align 8
  %627 = load i64, i64* %PC, align 8
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %625 to i64*
  store i64 %626, i64* %629, align 8
  %630 = load i64, i64* %RSP, align 8
  %631 = add i64 %630, 48
  %632 = load i64, i64* %R12, align 8
  %633 = load i64, i64* %PC, align 8
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %631 to i64*
  store i64 %632, i64* %635, align 8
  %636 = load i64, i64* %RSP, align 8
  %637 = add i64 %636, 56
  %638 = load i64, i64* %R13, align 8
  %639 = load i64, i64* %PC, align 8
  %640 = add i64 %639, 5
  store i64 %640, i64* %PC, align 8
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641, align 8
  %642 = load i64, i64* %RBP, align 8
  %643 = add i64 %642, -272
  %644 = load i64, i64* %PC, align 8
  %645 = add i64 %644, 7
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %647, i64* %RAX, align 8, !tbaa !2450
  %648 = load i64, i64* %RSP, align 8
  %649 = add i64 %648, 64
  %650 = add i64 %644, 12
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i64*
  store i64 %647, i64* %651, align 8
  %652 = load i64, i64* %RBP, align 8
  %653 = add i64 %652, -280
  %654 = load i64, i64* %PC, align 8
  %655 = add i64 %654, 7
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %RAX, align 8, !tbaa !2450
  %658 = load i64, i64* %RSP, align 8
  %659 = add i64 %658, 72
  %660 = add i64 %654, 12
  store i64 %660, i64* %PC, align 8
  %661 = inttoptr i64 %659 to i64*
  store i64 %657, i64* %661, align 8
  %662 = load i64, i64* %RBP, align 8
  %663 = add i64 %662, -288
  %664 = load i64, i64* %PC, align 8
  %665 = add i64 %664, 7
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %663 to i64*
  %667 = load i64, i64* %666, align 8
  store i64 %667, i64* %RAX, align 8, !tbaa !2450
  %668 = load i64, i64* %RSP, align 8
  %669 = add i64 %668, 80
  %670 = add i64 %664, 12
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i64*
  store i64 %667, i64* %671, align 8
  %672 = load i64, i64* %PC, align 8
  %673 = add i64 %672, 2199
  %674 = add i64 %672, 5
  %675 = load i64, i64* %RSP, align 8, !tbaa !2450
  %676 = add i64 %675, -8
  %677 = inttoptr i64 %676 to i64*
  store i64 %674, i64* %677, align 8
  store i64 %676, i64* %RSP, align 8, !tbaa !2450
  store i64 %673, i64* %PC, align 8, !tbaa !2450
  %678 = tail call %struct.Memory* @sub_4014c0_kernel_fdtd_apml_renamed_(%struct.State* nonnull %0, i64 %673, %struct.Memory* %485)
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -80
  %681 = load i64, i64* %PC, align 8
  store i64 %680, i64* %RCX, align 8, !tbaa !2450
  %682 = add i64 %679, -88
  store i64 %682, i64* %R8, align 8, !tbaa !2450
  %683 = add i64 %679, -60
  %684 = add i64 %681, 11
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i32*
  %686 = load i32, i32* %685, align 4
  %687 = zext i32 %686 to i64
  store i64 %687, i64* %RDI, align 8, !tbaa !2450
  %688 = add i64 %679, -68
  %689 = add i64 %681, 14
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %688 to i32*
  %691 = load i32, i32* %690, align 4
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RSI, align 8, !tbaa !2450
  %693 = add i64 %679, -64
  %694 = add i64 %681, 17
  store i64 %694, i64* %PC, align 8
  %695 = inttoptr i64 %693 to i32*
  %696 = load i32, i32* %695, align 4
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RDX, align 8, !tbaa !2450
  %698 = add i64 %679, -96
  %699 = add i64 %681, 21
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %698 to i64*
  %701 = load i64, i64* %700, align 8
  store i64 %701, i64* %R9, align 8, !tbaa !2450
  %702 = add i64 %679, -104
  %703 = add i64 %681, 25
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %RAX, align 8, !tbaa !2450
  %706 = add i64 %679, -168
  %707 = add i64 %681, 32
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i64*
  %709 = load i64, i64* %708, align 8
  store i64 %709, i64* %R10, align 8, !tbaa !2450
  %710 = add i64 %679, -176
  %711 = add i64 %681, 39
  store i64 %711, i64* %PC, align 8
  %712 = inttoptr i64 %710 to i64*
  %713 = load i64, i64* %712, align 8
  store i64 %713, i64* %R11, align 8, !tbaa !2450
  %714 = add i64 %679, -184
  %715 = add i64 %681, 46
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %714 to i64*
  %717 = load i64, i64* %716, align 8
  store i64 %717, i64* %RBX, align 8, !tbaa !2450
  %718 = add i64 %679, -192
  %719 = add i64 %681, 53
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %718 to i64*
  %721 = load i64, i64* %720, align 8
  store i64 %721, i64* %R14, align 8, !tbaa !2450
  %722 = add i64 %679, -200
  %723 = add i64 %681, 60
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %722 to i64*
  %725 = load i64, i64* %724, align 8
  store i64 %725, i64* %R15, align 8, !tbaa !2450
  %726 = add i64 %679, -208
  %727 = add i64 %681, 67
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to i64*
  %729 = load i64, i64* %728, align 8
  store i64 %729, i64* %R12, align 8, !tbaa !2450
  %730 = add i64 %679, -216
  %731 = add i64 %681, 74
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %R13, align 8, !tbaa !2450
  %734 = add i64 %679, -296
  %735 = add i64 %681, 81
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i64*
  store i64 %705, i64* %736, align 8
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -224
  %739 = load i64, i64* %PC, align 8
  %740 = add i64 %739, 7
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741, align 8
  store i64 %742, i64* %RAX, align 8, !tbaa !2450
  %743 = add i64 %737, -304
  %744 = add i64 %739, 14
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to i64*
  store i64 %742, i64* %745, align 8
  %746 = load i64, i64* %RBP, align 8
  %747 = add i64 %746, -232
  %748 = load i64, i64* %PC, align 8
  %749 = add i64 %748, 7
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %RAX, align 8, !tbaa !2450
  %752 = add i64 %746, -312
  %753 = add i64 %748, 14
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i64*
  store i64 %751, i64* %754, align 8
  %755 = load i64, i64* %RBP, align 8
  %756 = add i64 %755, -296
  %757 = load i64, i64* %PC, align 8
  %758 = add i64 %757, 7
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %756 to i64*
  %760 = load i64, i64* %759, align 8
  store i64 %760, i64* %RAX, align 8, !tbaa !2450
  %761 = load i64*, i64** %414, align 8
  %762 = add i64 %757, 11
  store i64 %762, i64* %PC, align 8
  store i64 %760, i64* %761, align 8
  %763 = load i64, i64* %RSP, align 8
  %764 = add i64 %763, 8
  %765 = load i64, i64* %R10, align 8
  %766 = load i64, i64* %PC, align 8
  %767 = add i64 %766, 5
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %764 to i64*
  store i64 %765, i64* %768, align 8
  %769 = load i64, i64* %RSP, align 8
  %770 = add i64 %769, 16
  %771 = load i64, i64* %R11, align 8
  %772 = load i64, i64* %PC, align 8
  %773 = add i64 %772, 5
  store i64 %773, i64* %PC, align 8
  %774 = inttoptr i64 %770 to i64*
  store i64 %771, i64* %774, align 8
  %775 = load i64, i64* %RSP, align 8
  %776 = add i64 %775, 24
  %777 = load i64, i64* %RBX, align 8
  %778 = load i64, i64* %PC, align 8
  %779 = add i64 %778, 5
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %776 to i64*
  store i64 %777, i64* %780, align 8
  %781 = load i64, i64* %RSP, align 8
  %782 = add i64 %781, 32
  %783 = load i64, i64* %R14, align 8
  %784 = load i64, i64* %PC, align 8
  %785 = add i64 %784, 5
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %786, align 8
  %787 = load i64, i64* %RSP, align 8
  %788 = add i64 %787, 40
  %789 = load i64, i64* %R15, align 8
  %790 = load i64, i64* %PC, align 8
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %788 to i64*
  store i64 %789, i64* %792, align 8
  %793 = load i64, i64* %RSP, align 8
  %794 = add i64 %793, 48
  %795 = load i64, i64* %R12, align 8
  %796 = load i64, i64* %PC, align 8
  %797 = add i64 %796, 5
  store i64 %797, i64* %PC, align 8
  %798 = inttoptr i64 %794 to i64*
  store i64 %795, i64* %798, align 8
  %799 = load i64, i64* %RSP, align 8
  %800 = add i64 %799, 56
  %801 = load i64, i64* %R13, align 8
  %802 = load i64, i64* %PC, align 8
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC, align 8
  %804 = inttoptr i64 %800 to i64*
  store i64 %801, i64* %804, align 8
  %805 = load i64, i64* %RBP, align 8
  %806 = add i64 %805, -304
  %807 = load i64, i64* %PC, align 8
  %808 = add i64 %807, 7
  store i64 %808, i64* %PC, align 8
  %809 = inttoptr i64 %806 to i64*
  %810 = load i64, i64* %809, align 8
  store i64 %810, i64* %RAX, align 8, !tbaa !2450
  %811 = load i64, i64* %RSP, align 8
  %812 = add i64 %811, 64
  %813 = add i64 %807, 12
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %812 to i64*
  store i64 %810, i64* %814, align 8
  %815 = load i64, i64* %RBP, align 8
  %816 = add i64 %815, -312
  %817 = load i64, i64* %PC, align 8
  %818 = add i64 %817, 7
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %816 to i64*
  %820 = load i64, i64* %819, align 8
  store i64 %820, i64* %RAX, align 8, !tbaa !2450
  %821 = load i64, i64* %RSP, align 8
  %822 = add i64 %821, 72
  %823 = add i64 %817, 12
  store i64 %823, i64* %PC, align 8
  %824 = inttoptr i64 %822 to i64*
  store i64 %820, i64* %824, align 8
  %825 = load i64, i64* %PC, align 8
  %826 = add i64 %825, 751
  %827 = add i64 %825, 5
  %828 = load i64, i64* %RSP, align 8, !tbaa !2450
  %829 = add i64 %828, -8
  %830 = inttoptr i64 %829 to i64*
  store i64 %827, i64* %830, align 8
  store i64 %829, i64* %RSP, align 8, !tbaa !2450
  store i64 %826, i64* %PC, align 8, !tbaa !2450
  %831 = tail call %struct.Memory* @sub_400fd0_init_array_renamed_(%struct.State* nonnull %0, i64 %826, %struct.Memory* %678)
  %832 = load i64, i64* %RBP, align 8
  %833 = add i64 %832, -60
  %834 = load i64, i64* %PC, align 8
  %835 = add i64 %834, 3
  store i64 %835, i64* %PC, align 8
  %836 = inttoptr i64 %833 to i32*
  %837 = load i32, i32* %836, align 4
  %838 = zext i32 %837 to i64
  store i64 %838, i64* %RDI, align 8, !tbaa !2450
  %839 = add i64 %832, -68
  %840 = add i64 %834, 6
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to i32*
  %842 = load i32, i32* %841, align 4
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RSI, align 8, !tbaa !2450
  %844 = add i64 %832, -64
  %845 = add i64 %834, 9
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %844 to i32*
  %847 = load i32, i32* %846, align 4
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %RDX, align 8, !tbaa !2450
  %849 = add i64 %832, -80
  %850 = add i64 %834, 14
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %849 to i64*
  %852 = load i64, i64* %851, align 8
  store i64 %852, i64* %507, align 1, !tbaa !2453
  store double 0.000000e+00, double* %509, align 1, !tbaa !2453
  %853 = add i64 %832, -88
  %854 = add i64 %834, 19
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %514, align 1, !tbaa !2453
  store double 0.000000e+00, double* %516, align 1, !tbaa !2453
  %857 = add i64 %832, -96
  %858 = add i64 %834, 23
  store i64 %858, i64* %PC, align 8
  %859 = inttoptr i64 %857 to i64*
  %860 = load i64, i64* %859, align 8
  store i64 %860, i64* %RCX, align 8, !tbaa !2450
  %861 = add i64 %832, -104
  %862 = add i64 %834, 27
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i64*
  %864 = load i64, i64* %863, align 8
  store i64 %864, i64* %R8, align 8, !tbaa !2450
  %865 = add i64 %832, -112
  %866 = add i64 %834, 31
  store i64 %866, i64* %PC, align 8
  %867 = inttoptr i64 %865 to i64*
  %868 = load i64, i64* %867, align 8
  store i64 %868, i64* %R9, align 8, !tbaa !2450
  %869 = add i64 %832, -120
  %870 = add i64 %834, 35
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %869 to i64*
  %872 = load i64, i64* %871, align 8
  store i64 %872, i64* %RAX, align 8, !tbaa !2450
  %873 = add i64 %832, -160
  %874 = add i64 %834, 42
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i64*
  %876 = load i64, i64* %875, align 8
  store i64 %876, i64* %R10, align 8, !tbaa !2450
  %877 = add i64 %832, -168
  %878 = add i64 %834, 49
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %R11, align 8, !tbaa !2450
  %881 = add i64 %832, -176
  %882 = add i64 %834, 56
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %RBX, align 8, !tbaa !2450
  %885 = add i64 %832, -184
  %886 = add i64 %834, 63
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %R14, align 8, !tbaa !2450
  %889 = add i64 %832, -192
  %890 = add i64 %834, 70
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %889 to i64*
  %892 = load i64, i64* %891, align 8
  store i64 %892, i64* %R15, align 8, !tbaa !2450
  %893 = add i64 %832, -200
  %894 = add i64 %834, 77
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %R12, align 8, !tbaa !2450
  %897 = add i64 %832, -208
  %898 = add i64 %834, 84
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %R13, align 8, !tbaa !2450
  %901 = load i64, i64* %RBP, align 8
  %902 = add i64 %901, -320
  %903 = add i64 %834, 91
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %902 to i64*
  store i64 %872, i64* %904, align 8
  %905 = load i64, i64* %RBP, align 8
  %906 = add i64 %905, -216
  %907 = load i64, i64* %PC, align 8
  %908 = add i64 %907, 7
  store i64 %908, i64* %PC, align 8
  %909 = inttoptr i64 %906 to i64*
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %RAX, align 8, !tbaa !2450
  %911 = add i64 %905, -328
  %912 = add i64 %907, 14
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i64*
  store i64 %910, i64* %913, align 8
  %914 = load i64, i64* %RBP, align 8
  %915 = add i64 %914, -224
  %916 = load i64, i64* %PC, align 8
  %917 = add i64 %916, 7
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %915 to i64*
  %919 = load i64, i64* %918, align 8
  store i64 %919, i64* %RAX, align 8, !tbaa !2450
  %920 = add i64 %914, -336
  %921 = add i64 %916, 14
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i64*
  store i64 %919, i64* %922, align 8
  %923 = load i64, i64* %RBP, align 8
  %924 = add i64 %923, -232
  %925 = load i64, i64* %PC, align 8
  %926 = add i64 %925, 7
  store i64 %926, i64* %PC, align 8
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927, align 8
  store i64 %928, i64* %RAX, align 8, !tbaa !2450
  %929 = add i64 %923, -344
  %930 = add i64 %925, 14
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %929 to i64*
  store i64 %928, i64* %931, align 8
  %932 = load i64, i64* %RBP, align 8
  %933 = add i64 %932, -320
  %934 = load i64, i64* %PC, align 8
  %935 = add i64 %934, 7
  store i64 %935, i64* %PC, align 8
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936, align 8
  store i64 %937, i64* %RAX, align 8, !tbaa !2450
  %938 = load i64*, i64** %414, align 8
  %939 = add i64 %934, 11
  store i64 %939, i64* %PC, align 8
  store i64 %937, i64* %938, align 8
  %940 = load i64, i64* %RSP, align 8
  %941 = add i64 %940, 8
  %942 = load i64, i64* %R10, align 8
  %943 = load i64, i64* %PC, align 8
  %944 = add i64 %943, 5
  store i64 %944, i64* %PC, align 8
  %945 = inttoptr i64 %941 to i64*
  store i64 %942, i64* %945, align 8
  %946 = load i64, i64* %RSP, align 8
  %947 = add i64 %946, 16
  %948 = load i64, i64* %R11, align 8
  %949 = load i64, i64* %PC, align 8
  %950 = add i64 %949, 5
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %947 to i64*
  store i64 %948, i64* %951, align 8
  %952 = load i64, i64* %RSP, align 8
  %953 = add i64 %952, 24
  %954 = load i64, i64* %RBX, align 8
  %955 = load i64, i64* %PC, align 8
  %956 = add i64 %955, 5
  store i64 %956, i64* %PC, align 8
  %957 = inttoptr i64 %953 to i64*
  store i64 %954, i64* %957, align 8
  %958 = load i64, i64* %RSP, align 8
  %959 = add i64 %958, 32
  %960 = load i64, i64* %R14, align 8
  %961 = load i64, i64* %PC, align 8
  %962 = add i64 %961, 5
  store i64 %962, i64* %PC, align 8
  %963 = inttoptr i64 %959 to i64*
  store i64 %960, i64* %963, align 8
  %964 = load i64, i64* %RSP, align 8
  %965 = add i64 %964, 40
  %966 = load i64, i64* %R15, align 8
  %967 = load i64, i64* %PC, align 8
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %965 to i64*
  store i64 %966, i64* %969, align 8
  %970 = load i64, i64* %RSP, align 8
  %971 = add i64 %970, 48
  %972 = load i64, i64* %R12, align 8
  %973 = load i64, i64* %PC, align 8
  %974 = add i64 %973, 5
  store i64 %974, i64* %PC, align 8
  %975 = inttoptr i64 %971 to i64*
  store i64 %972, i64* %975, align 8
  %976 = load i64, i64* %RSP, align 8
  %977 = add i64 %976, 56
  %978 = load i64, i64* %R13, align 8
  %979 = load i64, i64* %PC, align 8
  %980 = add i64 %979, 5
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %977 to i64*
  store i64 %978, i64* %981, align 8
  %982 = load i64, i64* %RBP, align 8
  %983 = add i64 %982, -328
  %984 = load i64, i64* %PC, align 8
  %985 = add i64 %984, 7
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %983 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RAX, align 8, !tbaa !2450
  %988 = load i64, i64* %RSP, align 8
  %989 = add i64 %988, 64
  %990 = add i64 %984, 12
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  store i64 %987, i64* %991, align 8
  %992 = load i64, i64* %RBP, align 8
  %993 = add i64 %992, -336
  %994 = load i64, i64* %PC, align 8
  %995 = add i64 %994, 7
  store i64 %995, i64* %PC, align 8
  %996 = inttoptr i64 %993 to i64*
  %997 = load i64, i64* %996, align 8
  store i64 %997, i64* %RAX, align 8, !tbaa !2450
  %998 = load i64, i64* %RSP, align 8
  %999 = add i64 %998, 72
  %1000 = add i64 %994, 12
  store i64 %1000, i64* %PC, align 8
  %1001 = inttoptr i64 %999 to i64*
  store i64 %997, i64* %1001, align 8
  %1002 = load i64, i64* %RBP, align 8
  %1003 = add i64 %1002, -344
  %1004 = load i64, i64* %PC, align 8
  %1005 = add i64 %1004, 7
  store i64 %1005, i64* %PC, align 8
  %1006 = inttoptr i64 %1003 to i64*
  %1007 = load i64, i64* %1006, align 8
  store i64 %1007, i64* %RAX, align 8, !tbaa !2450
  %1008 = load i64, i64* %RSP, align 8
  %1009 = add i64 %1008, 80
  %1010 = add i64 %1004, 12
  store i64 %1010, i64* %PC, align 8
  %1011 = inttoptr i64 %1009 to i64*
  store i64 %1007, i64* %1011, align 8
  %1012 = load i64, i64* %PC, align 8
  %1013 = add i64 %1012, 5299
  %1014 = add i64 %1012, 5
  %1015 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1016 = add i64 %1015, -8
  %1017 = inttoptr i64 %1016 to i64*
  store i64 %1014, i64* %1017, align 8
  store i64 %1016, i64* %RSP, align 8, !tbaa !2450
  store i64 %1013, i64* %PC, align 8, !tbaa !2450
  %1018 = tail call %struct.Memory* @sub_402270_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* nonnull %0, i64 %1013, %struct.Memory* %831)
  %1019 = load i64, i64* %RBP, align 8
  %1020 = add i64 %1019, -60
  %1021 = load i64, i64* %PC, align 8
  %1022 = add i64 %1021, 3
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023, align 4
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RDI, align 8, !tbaa !2450
  %1026 = add i64 %1019, -68
  %1027 = add i64 %1021, 6
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i32*
  %1029 = load i32, i32* %1028, align 4
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %RSI, align 8, !tbaa !2450
  %1031 = add i64 %1019, -64
  %1032 = add i64 %1021, 9
  store i64 %1032, i64* %PC, align 8
  %1033 = inttoptr i64 %1031 to i32*
  %1034 = load i32, i32* %1033, align 4
  %1035 = zext i32 %1034 to i64
  store i64 %1035, i64* %RDX, align 8, !tbaa !2450
  %1036 = add i64 %1019, -128
  %1037 = add i64 %1021, 13
  store i64 %1037, i64* %PC, align 8
  %1038 = inttoptr i64 %1036 to i64*
  %1039 = load i64, i64* %1038, align 8
  store i64 %1039, i64* %RCX, align 8, !tbaa !2450
  %1040 = add i64 %1019, -160
  %1041 = add i64 %1021, 20
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i64*
  %1043 = load i64, i64* %1042, align 8
  store i64 %1043, i64* %R8, align 8, !tbaa !2450
  %1044 = add i64 %1021, 8798
  %1045 = add i64 %1021, 25
  %1046 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1047 = add i64 %1046, -8
  %1048 = inttoptr i64 %1047 to i64*
  store i64 %1045, i64* %1048, align 8
  store i64 %1047, i64* %RSP, align 8, !tbaa !2450
  store i64 %1044, i64* %PC, align 8, !tbaa !2450
  %1049 = tail call %struct.Memory* @sub_403020_check_FP_renamed_(%struct.State* nonnull %0, i64 %1044, %struct.Memory* %1018)
  %1050 = load i32, i32* %EAX, align 4
  %1051 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2428
  %1052 = and i32 %1050, 255
  %1053 = tail call i32 @llvm.ctpop.i32(i32 %1052) #10
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  store i8 %1056, i8* %46, align 1, !tbaa !2445
  store i8 0, i8* %51, align 1, !tbaa !2446
  %1057 = icmp eq i32 %1050, 0
  %1058 = zext i1 %1057 to i8
  store i8 %1058, i8* %54, align 1, !tbaa !2447
  %1059 = lshr i32 %1050, 31
  %1060 = trunc i32 %1059 to i8
  store i8 %1060, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v = select i1 %1057, i64 9, i64 21
  %1061 = add i64 %.v, %1051
  store i64 %1061, i64* %PC, align 8, !tbaa !2450
  %1062 = load i64, i64* %RBP, align 8
  br i1 %1057, label %block_400de4, label %block_400df0

block_400e52:                                     ; preds = %block_400e21
  %1063 = add i64 %1522, -60
  %1064 = add i64 %1521, 3
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1063 to i32*
  %1066 = load i32, i32* %1065, align 4
  %1067 = zext i32 %1066 to i64
  store i64 %1067, i64* %RDI, align 8, !tbaa !2450
  %1068 = add i64 %1522, -68
  %1069 = add i64 %1521, 6
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to i32*
  %1071 = load i32, i32* %1070, align 4
  %1072 = zext i32 %1071 to i64
  store i64 %1072, i64* %RSI, align 8, !tbaa !2450
  %1073 = add i64 %1522, -64
  %1074 = add i64 %1521, 9
  store i64 %1074, i64* %PC, align 8
  %1075 = inttoptr i64 %1073 to i32*
  %1076 = load i32, i32* %1075, align 4
  %1077 = zext i32 %1076 to i64
  store i64 %1077, i64* %RDX, align 8, !tbaa !2450
  %1078 = add i64 %1522, -152
  %1079 = add i64 %1521, 16
  store i64 %1079, i64* %PC, align 8
  %1080 = inttoptr i64 %1078 to i64*
  %1081 = load i64, i64* %1080, align 8
  store i64 %1081, i64* %RCX, align 8, !tbaa !2450
  %1082 = add i64 %1522, -184
  %1083 = add i64 %1521, 23
  store i64 %1083, i64* %PC, align 8
  %1084 = inttoptr i64 %1082 to i64*
  %1085 = load i64, i64* %1084, align 8
  store i64 %1085, i64* %R8, align 8, !tbaa !2450
  %1086 = add i64 %1521, 8654
  %1087 = add i64 %1521, 28
  %1088 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1089 = add i64 %1088, -8
  %1090 = inttoptr i64 %1089 to i64*
  store i64 %1087, i64* %1090, align 8
  store i64 %1089, i64* %RSP, align 8, !tbaa !2450
  store i64 %1086, i64* %PC, align 8, !tbaa !2450
  %1091 = tail call %struct.Memory* @sub_403020_check_FP_renamed_(%struct.State* nonnull %0, i64 %1086, %struct.Memory* %1509)
  %1092 = load i32, i32* %EAX, align 4
  %1093 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2428
  %1094 = and i32 %1092, 255
  %1095 = tail call i32 @llvm.ctpop.i32(i32 %1094) #10
  %1096 = trunc i32 %1095 to i8
  %1097 = and i8 %1096, 1
  %1098 = xor i8 %1097, 1
  store i8 %1098, i8* %46, align 1, !tbaa !2445
  store i8 0, i8* %51, align 1, !tbaa !2446
  %1099 = icmp eq i32 %1092, 0
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %54, align 1, !tbaa !2447
  %1101 = lshr i32 %1092, 31
  %1102 = trunc i32 %1101 to i8
  store i8 %1102, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v6 = select i1 %1099, i64 9, i64 21
  %1103 = add i64 %.v6, %1093
  store i64 %1103, i64* %PC, align 8, !tbaa !2450
  %1104 = load i64, i64* %RBP, align 8
  br i1 %1099, label %block_400e77, label %block_400e83

block_400fb7:                                     ; preds = %block_400e15, %block_400e83, %block_400de4, %block_400e46, %block_400e77
  %1105 = phi i64 [ %.pre, %block_400e83 ], [ %1209, %block_400e77 ], [ %1214, %block_400e46 ], [ %1527, %block_400e15 ], [ %1219, %block_400de4 ]
  %MEMORY.0 = phi %struct.Memory* [ %1475, %block_400e83 ], [ %1091, %block_400e77 ], [ %1509, %block_400e46 ], [ %1191, %block_400e15 ], [ %1049, %block_400de4 ]
  %1106 = load i64, i64* %RBP, align 8
  %1107 = add i64 %1106, -44
  %1108 = add i64 %1105, 3
  store i64 %1108, i64* %PC, align 8
  %1109 = inttoptr i64 %1107 to i32*
  %1110 = load i32, i32* %1109, align 4
  %1111 = zext i32 %1110 to i64
  store i64 %1111, i64* %RAX, align 8, !tbaa !2450
  %1112 = load i64, i64* %RSP, align 8
  %1113 = add i64 %1112, 392
  store i64 %1113, i64* %RSP, align 8, !tbaa !2450
  %1114 = icmp ugt i64 %1112, -393
  %1115 = zext i1 %1114 to i8
  store i8 %1115, i8* %39, align 1, !tbaa !2428
  %1116 = trunc i64 %1113 to i32
  %1117 = and i32 %1116, 255
  %1118 = tail call i32 @llvm.ctpop.i32(i32 %1117) #10
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  store i8 %1121, i8* %46, align 1, !tbaa !2445
  %1122 = xor i64 %1113, %1112
  %1123 = lshr i64 %1122, 4
  %1124 = trunc i64 %1123 to i8
  %1125 = and i8 %1124, 1
  store i8 %1125, i8* %51, align 1, !tbaa !2446
  %1126 = icmp eq i64 %1113, 0
  %1127 = zext i1 %1126 to i8
  store i8 %1127, i8* %54, align 1, !tbaa !2447
  %1128 = lshr i64 %1113, 63
  %1129 = trunc i64 %1128 to i8
  store i8 %1129, i8* %57, align 1, !tbaa !2448
  %1130 = lshr i64 %1112, 63
  %1131 = xor i64 %1128, %1130
  %1132 = add nuw nsw i64 %1131, %1128
  %1133 = icmp eq i64 %1132, 2
  %1134 = zext i1 %1133 to i8
  store i8 %1134, i8* %63, align 1, !tbaa !2449
  %1135 = add i64 %1105, 11
  store i64 %1135, i64* %PC, align 8
  %1136 = add i64 %1112, 400
  %1137 = inttoptr i64 %1113 to i64*
  %1138 = load i64, i64* %1137, align 8
  store i64 %1138, i64* %RBX, align 8, !tbaa !2450
  store i64 %1136, i64* %RSP, align 8, !tbaa !2450
  %1139 = add i64 %1105, 13
  store i64 %1139, i64* %PC, align 8
  %1140 = add i64 %1112, 408
  %1141 = inttoptr i64 %1136 to i64*
  %1142 = load i64, i64* %1141, align 8
  store i64 %1142, i64* %R12, align 8, !tbaa !2450
  store i64 %1140, i64* %RSP, align 8, !tbaa !2450
  %1143 = add i64 %1105, 15
  store i64 %1143, i64* %PC, align 8
  %1144 = add i64 %1112, 416
  %1145 = inttoptr i64 %1140 to i64*
  %1146 = load i64, i64* %1145, align 8
  store i64 %1146, i64* %R13, align 8, !tbaa !2450
  store i64 %1144, i64* %RSP, align 8, !tbaa !2450
  %1147 = add i64 %1105, 17
  store i64 %1147, i64* %PC, align 8
  %1148 = add i64 %1112, 424
  %1149 = inttoptr i64 %1144 to i64*
  %1150 = load i64, i64* %1149, align 8
  store i64 %1150, i64* %R14, align 8, !tbaa !2450
  store i64 %1148, i64* %RSP, align 8, !tbaa !2450
  %1151 = add i64 %1105, 19
  store i64 %1151, i64* %PC, align 8
  %1152 = add i64 %1112, 432
  %1153 = inttoptr i64 %1148 to i64*
  %1154 = load i64, i64* %1153, align 8
  store i64 %1154, i64* %R15, align 8, !tbaa !2450
  store i64 %1152, i64* %RSP, align 8, !tbaa !2450
  %1155 = add i64 %1105, 20
  store i64 %1155, i64* %PC, align 8
  %1156 = add i64 %1112, 440
  %1157 = inttoptr i64 %1152 to i64*
  %1158 = load i64, i64* %1157, align 8
  store i64 %1158, i64* %RBP, align 8, !tbaa !2450
  store i64 %1156, i64* %RSP, align 8, !tbaa !2450
  %1159 = add i64 %1105, 21
  store i64 %1159, i64* %PC, align 8
  %1160 = inttoptr i64 %1156 to i64*
  %1161 = load i64, i64* %1160, align 8
  store i64 %1161, i64* %PC, align 8, !tbaa !2450
  %1162 = add i64 %1112, 448
  store i64 %1162, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %MEMORY.0

block_400df0:                                     ; preds = %block_4008c0
  %1163 = add i64 %1062, -60
  %1164 = add i64 %1061, 3
  store i64 %1164, i64* %PC, align 8
  %1165 = inttoptr i64 %1163 to i32*
  %1166 = load i32, i32* %1165, align 4
  %1167 = zext i32 %1166 to i64
  store i64 %1167, i64* %RDI, align 8, !tbaa !2450
  %1168 = add i64 %1062, -68
  %1169 = add i64 %1061, 6
  store i64 %1169, i64* %PC, align 8
  %1170 = inttoptr i64 %1168 to i32*
  %1171 = load i32, i32* %1170, align 4
  %1172 = zext i32 %1171 to i64
  store i64 %1172, i64* %RSI, align 8, !tbaa !2450
  %1173 = add i64 %1062, -64
  %1174 = add i64 %1061, 9
  store i64 %1174, i64* %PC, align 8
  %1175 = inttoptr i64 %1173 to i32*
  %1176 = load i32, i32* %1175, align 4
  %1177 = zext i32 %1176 to i64
  store i64 %1177, i64* %RDX, align 8, !tbaa !2450
  %1178 = add i64 %1062, -136
  %1179 = add i64 %1061, 16
  store i64 %1179, i64* %PC, align 8
  %1180 = inttoptr i64 %1178 to i64*
  %1181 = load i64, i64* %1180, align 8
  store i64 %1181, i64* %RCX, align 8, !tbaa !2450
  %1182 = add i64 %1062, -168
  %1183 = add i64 %1061, 23
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1182 to i64*
  %1185 = load i64, i64* %1184, align 8
  store i64 %1185, i64* %R8, align 8, !tbaa !2450
  %1186 = add i64 %1061, 8752
  %1187 = add i64 %1061, 28
  %1188 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1189 = add i64 %1188, -8
  %1190 = inttoptr i64 %1189 to i64*
  store i64 %1187, i64* %1190, align 8
  store i64 %1189, i64* %RSP, align 8, !tbaa !2450
  store i64 %1186, i64* %PC, align 8, !tbaa !2450
  %1191 = tail call %struct.Memory* @sub_403020_check_FP_renamed_(%struct.State* nonnull %0, i64 %1186, %struct.Memory* %1049)
  %1192 = load i32, i32* %EAX, align 4
  %1193 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2428
  %1194 = and i32 %1192, 255
  %1195 = tail call i32 @llvm.ctpop.i32(i32 %1194) #10
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  store i8 %1198, i8* %46, align 1, !tbaa !2445
  store i8 0, i8* %51, align 1, !tbaa !2446
  %1199 = icmp eq i32 %1192, 0
  %1200 = zext i1 %1199 to i8
  store i8 %1200, i8* %54, align 1, !tbaa !2447
  %1201 = lshr i32 %1192, 31
  %1202 = trunc i32 %1201 to i8
  store i8 %1202, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v4 = select i1 %1199, i64 9, i64 21
  %1203 = add i64 %.v4, %1193
  store i64 %1203, i64* %PC, align 8, !tbaa !2450
  %1204 = load i64, i64* %RBP, align 8
  br i1 %1199, label %block_400e15, label %block_400e21

block_400e77:                                     ; preds = %block_400e52
  %1205 = add i64 %1104, -44
  %1206 = add i64 %1103, 7
  store i64 %1206, i64* %PC, align 8
  %1207 = inttoptr i64 %1205 to i32*
  store i32 1, i32* %1207, align 4
  %1208 = load i64, i64* %PC, align 8
  %1209 = add i64 %1208, 313
  store i64 %1209, i64* %PC, align 8, !tbaa !2450
  br label %block_400fb7

block_400e46:                                     ; preds = %block_400e21
  %1210 = add i64 %1522, -44
  %1211 = add i64 %1521, 7
  store i64 %1211, i64* %PC, align 8
  %1212 = inttoptr i64 %1210 to i32*
  store i32 1, i32* %1212, align 4
  %1213 = load i64, i64* %PC, align 8
  %1214 = add i64 %1213, 362
  store i64 %1214, i64* %PC, align 8, !tbaa !2450
  br label %block_400fb7

block_400de4:                                     ; preds = %block_4008c0
  %1215 = add i64 %1062, -44
  %1216 = add i64 %1061, 7
  store i64 %1216, i64* %PC, align 8
  %1217 = inttoptr i64 %1215 to i32*
  store i32 1, i32* %1217, align 4
  %1218 = load i64, i64* %PC, align 8
  %1219 = add i64 %1218, 460
  store i64 %1219, i64* %PC, align 8, !tbaa !2450
  br label %block_400fb7

block_400e83:                                     ; preds = %block_400e52
  %1220 = add i64 %1104, -60
  %1221 = add i64 %1103, 3
  store i64 %1221, i64* %PC, align 8
  %1222 = inttoptr i64 %1220 to i32*
  %1223 = load i32, i32* %1222, align 4
  %1224 = zext i32 %1223 to i64
  store i64 %1224, i64* %RDI, align 8, !tbaa !2450
  %1225 = add i64 %1104, -68
  %1226 = add i64 %1103, 6
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1225 to i32*
  %1228 = load i32, i32* %1227, align 4
  %1229 = zext i32 %1228 to i64
  store i64 %1229, i64* %RSI, align 8, !tbaa !2450
  %1230 = add i64 %1104, -64
  %1231 = add i64 %1103, 9
  store i64 %1231, i64* %PC, align 8
  %1232 = inttoptr i64 %1230 to i32*
  %1233 = load i32, i32* %1232, align 4
  %1234 = zext i32 %1233 to i64
  store i64 %1234, i64* %RDX, align 8, !tbaa !2450
  %1235 = add i64 %1104, -160
  %1236 = add i64 %1103, 16
  store i64 %1236, i64* %PC, align 8
  %1237 = inttoptr i64 %1235 to i64*
  %1238 = load i64, i64* %1237, align 8
  store i64 %1238, i64* %RCX, align 8, !tbaa !2450
  %1239 = add i64 %1104, -168
  %1240 = add i64 %1103, 23
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1239 to i64*
  %1242 = load i64, i64* %1241, align 8
  store i64 %1242, i64* %R8, align 8, !tbaa !2450
  %1243 = add i64 %1104, -176
  %1244 = add i64 %1103, 30
  store i64 %1244, i64* %PC, align 8
  %1245 = inttoptr i64 %1243 to i64*
  %1246 = load i64, i64* %1245, align 8
  store i64 %1246, i64* %R9, align 8, !tbaa !2450
  %1247 = add i64 %1104, -184
  %1248 = add i64 %1103, 37
  store i64 %1248, i64* %PC, align 8
  %1249 = inttoptr i64 %1247 to i64*
  %1250 = load i64, i64* %1249, align 8
  store i64 %1250, i64* %RAX, align 8, !tbaa !2450
  %1251 = load i64*, i64** %414, align 8
  %1252 = add i64 %1103, 41
  store i64 %1252, i64* %PC, align 8
  store i64 %1250, i64* %1251, align 8
  %1253 = load i64, i64* %PC, align 8
  %1254 = add i64 %1253, 8980
  %1255 = add i64 %1253, 5
  %1256 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1257 = add i64 %1256, -8
  %1258 = inttoptr i64 %1257 to i64*
  store i64 %1255, i64* %1258, align 8
  store i64 %1257, i64* %RSP, align 8, !tbaa !2450
  store i64 %1254, i64* %PC, align 8, !tbaa !2450
  %1259 = tail call %struct.Memory* @sub_4031c0_print_array_renamed_(%struct.State* nonnull %0, i64 %1254, %struct.Memory* %1091)
  %1260 = load i64, i64* %RBP, align 8
  %1261 = add i64 %1260, -96
  %1262 = load i64, i64* %PC, align 8
  %1263 = add i64 %1262, 4
  store i64 %1263, i64* %PC, align 8
  %1264 = inttoptr i64 %1261 to i64*
  %1265 = load i64, i64* %1264, align 8
  store i64 %1265, i64* %RAX, align 8, !tbaa !2450
  store i64 %1265, i64* %RDI, align 8, !tbaa !2450
  %1266 = add i64 %1262, -2337
  %1267 = add i64 %1262, 12
  %1268 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1269 = add i64 %1268, -8
  %1270 = inttoptr i64 %1269 to i64*
  store i64 %1267, i64* %1270, align 8
  store i64 %1269, i64* %RSP, align 8, !tbaa !2450
  store i64 %1266, i64* %PC, align 8, !tbaa !2450
  %1271 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1259)
  %1272 = load i64, i64* %RBP, align 8
  %1273 = add i64 %1272, -104
  %1274 = load i64, i64* %PC, align 8
  %1275 = add i64 %1274, 4
  store i64 %1275, i64* %PC, align 8
  %1276 = inttoptr i64 %1273 to i64*
  %1277 = load i64, i64* %1276, align 8
  store i64 %1277, i64* %RAX, align 8, !tbaa !2450
  store i64 %1277, i64* %RDI, align 8, !tbaa !2450
  %1278 = add i64 %1274, -2349
  %1279 = add i64 %1274, 12
  %1280 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1281 = add i64 %1280, -8
  %1282 = inttoptr i64 %1281 to i64*
  store i64 %1279, i64* %1282, align 8
  store i64 %1281, i64* %RSP, align 8, !tbaa !2450
  store i64 %1278, i64* %PC, align 8, !tbaa !2450
  %1283 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1271)
  %1284 = load i64, i64* %RBP, align 8
  %1285 = add i64 %1284, -112
  %1286 = load i64, i64* %PC, align 8
  %1287 = add i64 %1286, 4
  store i64 %1287, i64* %PC, align 8
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288, align 8
  store i64 %1289, i64* %RAX, align 8, !tbaa !2450
  store i64 %1289, i64* %RDI, align 8, !tbaa !2450
  %1290 = add i64 %1286, -2361
  %1291 = add i64 %1286, 12
  %1292 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1293 = add i64 %1292, -8
  %1294 = inttoptr i64 %1293 to i64*
  store i64 %1291, i64* %1294, align 8
  store i64 %1293, i64* %RSP, align 8, !tbaa !2450
  store i64 %1290, i64* %PC, align 8, !tbaa !2450
  %1295 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1283)
  %1296 = load i64, i64* %RBP, align 8
  %1297 = add i64 %1296, -120
  %1298 = load i64, i64* %PC, align 8
  %1299 = add i64 %1298, 4
  store i64 %1299, i64* %PC, align 8
  %1300 = inttoptr i64 %1297 to i64*
  %1301 = load i64, i64* %1300, align 8
  store i64 %1301, i64* %RAX, align 8, !tbaa !2450
  store i64 %1301, i64* %RDI, align 8, !tbaa !2450
  %1302 = add i64 %1298, -2373
  %1303 = add i64 %1298, 12
  %1304 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1305 = add i64 %1304, -8
  %1306 = inttoptr i64 %1305 to i64*
  store i64 %1303, i64* %1306, align 8
  store i64 %1305, i64* %RSP, align 8, !tbaa !2450
  store i64 %1302, i64* %PC, align 8, !tbaa !2450
  %1307 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1295)
  %1308 = load i64, i64* %RBP, align 8
  %1309 = add i64 %1308, -128
  %1310 = load i64, i64* %PC, align 8
  %1311 = add i64 %1310, 4
  store i64 %1311, i64* %PC, align 8
  %1312 = inttoptr i64 %1309 to i64*
  %1313 = load i64, i64* %1312, align 8
  store i64 %1313, i64* %RAX, align 8, !tbaa !2450
  store i64 %1313, i64* %RDI, align 8, !tbaa !2450
  %1314 = add i64 %1310, -2385
  %1315 = add i64 %1310, 12
  %1316 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1317 = add i64 %1316, -8
  %1318 = inttoptr i64 %1317 to i64*
  store i64 %1315, i64* %1318, align 8
  store i64 %1317, i64* %RSP, align 8, !tbaa !2450
  store i64 %1314, i64* %PC, align 8, !tbaa !2450
  %1319 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1307)
  %1320 = load i64, i64* %RBP, align 8
  %1321 = add i64 %1320, -136
  %1322 = load i64, i64* %PC, align 8
  %1323 = add i64 %1322, 7
  store i64 %1323, i64* %PC, align 8
  %1324 = inttoptr i64 %1321 to i64*
  %1325 = load i64, i64* %1324, align 8
  store i64 %1325, i64* %RAX, align 8, !tbaa !2450
  store i64 %1325, i64* %RDI, align 8, !tbaa !2450
  %1326 = add i64 %1322, -2397
  %1327 = add i64 %1322, 15
  %1328 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1329 = add i64 %1328, -8
  %1330 = inttoptr i64 %1329 to i64*
  store i64 %1327, i64* %1330, align 8
  store i64 %1329, i64* %RSP, align 8, !tbaa !2450
  store i64 %1326, i64* %PC, align 8, !tbaa !2450
  %1331 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1319)
  %1332 = load i64, i64* %RBP, align 8
  %1333 = add i64 %1332, -144
  %1334 = load i64, i64* %PC, align 8
  %1335 = add i64 %1334, 7
  store i64 %1335, i64* %PC, align 8
  %1336 = inttoptr i64 %1333 to i64*
  %1337 = load i64, i64* %1336, align 8
  store i64 %1337, i64* %RAX, align 8, !tbaa !2450
  store i64 %1337, i64* %RDI, align 8, !tbaa !2450
  %1338 = add i64 %1334, -2412
  %1339 = add i64 %1334, 15
  %1340 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1341 = add i64 %1340, -8
  %1342 = inttoptr i64 %1341 to i64*
  store i64 %1339, i64* %1342, align 8
  store i64 %1341, i64* %RSP, align 8, !tbaa !2450
  store i64 %1338, i64* %PC, align 8, !tbaa !2450
  %1343 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1331)
  %1344 = load i64, i64* %RBP, align 8
  %1345 = add i64 %1344, -152
  %1346 = load i64, i64* %PC, align 8
  %1347 = add i64 %1346, 7
  store i64 %1347, i64* %PC, align 8
  %1348 = inttoptr i64 %1345 to i64*
  %1349 = load i64, i64* %1348, align 8
  store i64 %1349, i64* %RAX, align 8, !tbaa !2450
  store i64 %1349, i64* %RDI, align 8, !tbaa !2450
  %1350 = add i64 %1346, -2427
  %1351 = add i64 %1346, 15
  %1352 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1353 = add i64 %1352, -8
  %1354 = inttoptr i64 %1353 to i64*
  store i64 %1351, i64* %1354, align 8
  store i64 %1353, i64* %RSP, align 8, !tbaa !2450
  store i64 %1350, i64* %PC, align 8, !tbaa !2450
  %1355 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1343)
  %1356 = load i64, i64* %RBP, align 8
  %1357 = add i64 %1356, -160
  %1358 = load i64, i64* %PC, align 8
  %1359 = add i64 %1358, 7
  store i64 %1359, i64* %PC, align 8
  %1360 = inttoptr i64 %1357 to i64*
  %1361 = load i64, i64* %1360, align 8
  store i64 %1361, i64* %RAX, align 8, !tbaa !2450
  store i64 %1361, i64* %RDI, align 8, !tbaa !2450
  %1362 = add i64 %1358, -2442
  %1363 = add i64 %1358, 15
  %1364 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1365 = add i64 %1364, -8
  %1366 = inttoptr i64 %1365 to i64*
  store i64 %1363, i64* %1366, align 8
  store i64 %1365, i64* %RSP, align 8, !tbaa !2450
  store i64 %1362, i64* %PC, align 8, !tbaa !2450
  %1367 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1355)
  %1368 = load i64, i64* %RBP, align 8
  %1369 = add i64 %1368, -168
  %1370 = load i64, i64* %PC, align 8
  %1371 = add i64 %1370, 7
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1369 to i64*
  %1373 = load i64, i64* %1372, align 8
  store i64 %1373, i64* %RAX, align 8, !tbaa !2450
  store i64 %1373, i64* %RDI, align 8, !tbaa !2450
  %1374 = add i64 %1370, -2457
  %1375 = add i64 %1370, 15
  %1376 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1377 = add i64 %1376, -8
  %1378 = inttoptr i64 %1377 to i64*
  store i64 %1375, i64* %1378, align 8
  store i64 %1377, i64* %RSP, align 8, !tbaa !2450
  store i64 %1374, i64* %PC, align 8, !tbaa !2450
  %1379 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1367)
  %1380 = load i64, i64* %RBP, align 8
  %1381 = add i64 %1380, -176
  %1382 = load i64, i64* %PC, align 8
  %1383 = add i64 %1382, 7
  store i64 %1383, i64* %PC, align 8
  %1384 = inttoptr i64 %1381 to i64*
  %1385 = load i64, i64* %1384, align 8
  store i64 %1385, i64* %RAX, align 8, !tbaa !2450
  store i64 %1385, i64* %RDI, align 8, !tbaa !2450
  %1386 = add i64 %1382, -2472
  %1387 = add i64 %1382, 15
  %1388 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1389 = add i64 %1388, -8
  %1390 = inttoptr i64 %1389 to i64*
  store i64 %1387, i64* %1390, align 8
  store i64 %1389, i64* %RSP, align 8, !tbaa !2450
  store i64 %1386, i64* %PC, align 8, !tbaa !2450
  %1391 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1379)
  %1392 = load i64, i64* %RBP, align 8
  %1393 = add i64 %1392, -184
  %1394 = load i64, i64* %PC, align 8
  %1395 = add i64 %1394, 7
  store i64 %1395, i64* %PC, align 8
  %1396 = inttoptr i64 %1393 to i64*
  %1397 = load i64, i64* %1396, align 8
  store i64 %1397, i64* %RAX, align 8, !tbaa !2450
  store i64 %1397, i64* %RDI, align 8, !tbaa !2450
  %1398 = add i64 %1394, -2487
  %1399 = add i64 %1394, 15
  %1400 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1401 = add i64 %1400, -8
  %1402 = inttoptr i64 %1401 to i64*
  store i64 %1399, i64* %1402, align 8
  store i64 %1401, i64* %RSP, align 8, !tbaa !2450
  store i64 %1398, i64* %PC, align 8, !tbaa !2450
  %1403 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1391)
  %1404 = load i64, i64* %RBP, align 8
  %1405 = add i64 %1404, -192
  %1406 = load i64, i64* %PC, align 8
  %1407 = add i64 %1406, 7
  store i64 %1407, i64* %PC, align 8
  %1408 = inttoptr i64 %1405 to i64*
  %1409 = load i64, i64* %1408, align 8
  store i64 %1409, i64* %RAX, align 8, !tbaa !2450
  store i64 %1409, i64* %RDI, align 8, !tbaa !2450
  %1410 = add i64 %1406, -2502
  %1411 = add i64 %1406, 15
  %1412 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1413 = add i64 %1412, -8
  %1414 = inttoptr i64 %1413 to i64*
  store i64 %1411, i64* %1414, align 8
  store i64 %1413, i64* %RSP, align 8, !tbaa !2450
  store i64 %1410, i64* %PC, align 8, !tbaa !2450
  %1415 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1403)
  %1416 = load i64, i64* %RBP, align 8
  %1417 = add i64 %1416, -200
  %1418 = load i64, i64* %PC, align 8
  %1419 = add i64 %1418, 7
  store i64 %1419, i64* %PC, align 8
  %1420 = inttoptr i64 %1417 to i64*
  %1421 = load i64, i64* %1420, align 8
  store i64 %1421, i64* %RAX, align 8, !tbaa !2450
  store i64 %1421, i64* %RDI, align 8, !tbaa !2450
  %1422 = add i64 %1418, -2517
  %1423 = add i64 %1418, 15
  %1424 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1425 = add i64 %1424, -8
  %1426 = inttoptr i64 %1425 to i64*
  store i64 %1423, i64* %1426, align 8
  store i64 %1425, i64* %RSP, align 8, !tbaa !2450
  store i64 %1422, i64* %PC, align 8, !tbaa !2450
  %1427 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1415)
  %1428 = load i64, i64* %RBP, align 8
  %1429 = add i64 %1428, -208
  %1430 = load i64, i64* %PC, align 8
  %1431 = add i64 %1430, 7
  store i64 %1431, i64* %PC, align 8
  %1432 = inttoptr i64 %1429 to i64*
  %1433 = load i64, i64* %1432, align 8
  store i64 %1433, i64* %RAX, align 8, !tbaa !2450
  store i64 %1433, i64* %RDI, align 8, !tbaa !2450
  %1434 = add i64 %1430, -2532
  %1435 = add i64 %1430, 15
  %1436 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1437 = add i64 %1436, -8
  %1438 = inttoptr i64 %1437 to i64*
  store i64 %1435, i64* %1438, align 8
  store i64 %1437, i64* %RSP, align 8, !tbaa !2450
  store i64 %1434, i64* %PC, align 8, !tbaa !2450
  %1439 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1427)
  %1440 = load i64, i64* %RBP, align 8
  %1441 = add i64 %1440, -216
  %1442 = load i64, i64* %PC, align 8
  %1443 = add i64 %1442, 7
  store i64 %1443, i64* %PC, align 8
  %1444 = inttoptr i64 %1441 to i64*
  %1445 = load i64, i64* %1444, align 8
  store i64 %1445, i64* %RAX, align 8, !tbaa !2450
  store i64 %1445, i64* %RDI, align 8, !tbaa !2450
  %1446 = add i64 %1442, -2547
  %1447 = add i64 %1442, 15
  %1448 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1449 = add i64 %1448, -8
  %1450 = inttoptr i64 %1449 to i64*
  store i64 %1447, i64* %1450, align 8
  store i64 %1449, i64* %RSP, align 8, !tbaa !2450
  store i64 %1446, i64* %PC, align 8, !tbaa !2450
  %1451 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1439)
  %1452 = load i64, i64* %RBP, align 8
  %1453 = add i64 %1452, -224
  %1454 = load i64, i64* %PC, align 8
  %1455 = add i64 %1454, 7
  store i64 %1455, i64* %PC, align 8
  %1456 = inttoptr i64 %1453 to i64*
  %1457 = load i64, i64* %1456, align 8
  store i64 %1457, i64* %RAX, align 8, !tbaa !2450
  store i64 %1457, i64* %RDI, align 8, !tbaa !2450
  %1458 = add i64 %1454, -2562
  %1459 = add i64 %1454, 15
  %1460 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1461 = add i64 %1460, -8
  %1462 = inttoptr i64 %1461 to i64*
  store i64 %1459, i64* %1462, align 8
  store i64 %1461, i64* %RSP, align 8, !tbaa !2450
  store i64 %1458, i64* %PC, align 8, !tbaa !2450
  %1463 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1451)
  %1464 = load i64, i64* %RBP, align 8
  %1465 = add i64 %1464, -232
  %1466 = load i64, i64* %PC, align 8
  %1467 = add i64 %1466, 7
  store i64 %1467, i64* %PC, align 8
  %1468 = inttoptr i64 %1465 to i64*
  %1469 = load i64, i64* %1468, align 8
  store i64 %1469, i64* %RAX, align 8, !tbaa !2450
  store i64 %1469, i64* %RDI, align 8, !tbaa !2450
  %1470 = add i64 %1466, -2577
  %1471 = add i64 %1466, 15
  %1472 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1473 = add i64 %1472, -8
  %1474 = inttoptr i64 %1473 to i64*
  store i64 %1471, i64* %1474, align 8
  store i64 %1473, i64* %RSP, align 8, !tbaa !2450
  store i64 %1470, i64* %PC, align 8, !tbaa !2450
  %1475 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %1463)
  %1476 = load i64, i64* %RBP, align 8
  %1477 = add i64 %1476, -44
  %1478 = load i64, i64* %PC, align 8
  %1479 = add i64 %1478, 7
  store i64 %1479, i64* %PC, align 8
  %1480 = inttoptr i64 %1477 to i32*
  store i32 0, i32* %1480, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400fb7

block_400e21:                                     ; preds = %block_400df0
  %1481 = add i64 %1204, -60
  %1482 = add i64 %1203, 3
  store i64 %1482, i64* %PC, align 8
  %1483 = inttoptr i64 %1481 to i32*
  %1484 = load i32, i32* %1483, align 4
  %1485 = zext i32 %1484 to i64
  store i64 %1485, i64* %RDI, align 8, !tbaa !2450
  %1486 = add i64 %1204, -68
  %1487 = add i64 %1203, 6
  store i64 %1487, i64* %PC, align 8
  %1488 = inttoptr i64 %1486 to i32*
  %1489 = load i32, i32* %1488, align 4
  %1490 = zext i32 %1489 to i64
  store i64 %1490, i64* %RSI, align 8, !tbaa !2450
  %1491 = add i64 %1204, -64
  %1492 = add i64 %1203, 9
  store i64 %1492, i64* %PC, align 8
  %1493 = inttoptr i64 %1491 to i32*
  %1494 = load i32, i32* %1493, align 4
  %1495 = zext i32 %1494 to i64
  store i64 %1495, i64* %RDX, align 8, !tbaa !2450
  %1496 = add i64 %1204, -144
  %1497 = add i64 %1203, 16
  store i64 %1497, i64* %PC, align 8
  %1498 = inttoptr i64 %1496 to i64*
  %1499 = load i64, i64* %1498, align 8
  store i64 %1499, i64* %RCX, align 8, !tbaa !2450
  %1500 = add i64 %1204, -176
  %1501 = add i64 %1203, 23
  store i64 %1501, i64* %PC, align 8
  %1502 = inttoptr i64 %1500 to i64*
  %1503 = load i64, i64* %1502, align 8
  store i64 %1503, i64* %R8, align 8, !tbaa !2450
  %1504 = add i64 %1203, 8703
  %1505 = add i64 %1203, 28
  %1506 = load i64, i64* %RSP, align 8, !tbaa !2450
  %1507 = add i64 %1506, -8
  %1508 = inttoptr i64 %1507 to i64*
  store i64 %1505, i64* %1508, align 8
  store i64 %1507, i64* %RSP, align 8, !tbaa !2450
  store i64 %1504, i64* %PC, align 8, !tbaa !2450
  %1509 = tail call %struct.Memory* @sub_403020_check_FP_renamed_(%struct.State* nonnull %0, i64 %1504, %struct.Memory* %1191)
  %1510 = load i32, i32* %EAX, align 4
  %1511 = load i64, i64* %PC, align 8
  store i8 0, i8* %39, align 1, !tbaa !2428
  %1512 = and i32 %1510, 255
  %1513 = tail call i32 @llvm.ctpop.i32(i32 %1512) #10
  %1514 = trunc i32 %1513 to i8
  %1515 = and i8 %1514, 1
  %1516 = xor i8 %1515, 1
  store i8 %1516, i8* %46, align 1, !tbaa !2445
  store i8 0, i8* %51, align 1, !tbaa !2446
  %1517 = icmp eq i32 %1510, 0
  %1518 = zext i1 %1517 to i8
  store i8 %1518, i8* %54, align 1, !tbaa !2447
  %1519 = lshr i32 %1510, 31
  %1520 = trunc i32 %1519 to i8
  store i8 %1520, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %63, align 1, !tbaa !2449
  %.v5 = select i1 %1517, i64 9, i64 21
  %1521 = add i64 %.v5, %1511
  store i64 %1521, i64* %PC, align 8, !tbaa !2450
  %1522 = load i64, i64* %RBP, align 8
  br i1 %1517, label %block_400e46, label %block_400e52

block_400e15:                                     ; preds = %block_400df0
  %1523 = add i64 %1204, -44
  %1524 = add i64 %1203, 7
  store i64 %1524, i64* %PC, align 8
  %1525 = inttoptr i64 %1523 to i32*
  store i32 1, i32* %1525, align 4
  %1526 = load i64, i64* %PC, align 8
  %1527 = add i64 %1526, 411
  store i64 %1527, i64* %PC, align 8, !tbaa !2450
  br label %block_400fb7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402270_kernel_fdtd_apml_StrictFP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402270:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2450
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2450
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -104
  store i64 %39, i64* %RSP, align 8, !tbaa !2450
  %40 = icmp ult i64 %36, 56
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2428
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2445
  %50 = xor i64 %36, 16
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2446
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, 96
  %70 = add i64 %38, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2450
  %73 = add i64 %68, 88
  %74 = add i64 %38, 12
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R10, align 8, !tbaa !2450
  %77 = add i64 %68, 80
  %78 = add i64 %38, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R11, align 8, !tbaa !2450
  %81 = add i64 %68, 72
  %82 = add i64 %38, 20
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBX, align 8, !tbaa !2450
  %85 = add i64 %68, 64
  %86 = add i64 %38, 24
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %R14, align 8, !tbaa !2450
  %89 = add i64 %68, 56
  %90 = add i64 %38, 28
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %R15, align 8, !tbaa !2450
  %93 = add i64 %68, 48
  %94 = add i64 %38, 32
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %R12, align 8, !tbaa !2450
  %97 = add i64 %68, 40
  %98 = add i64 %38, 36
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %R13, align 8, !tbaa !2450
  %101 = add i64 %68, -208
  %102 = add i64 %38, 43
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %72, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, 32
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2450
  %110 = add i64 %104, -216
  %111 = add i64 %106, 11
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, 24
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2450
  %119 = add i64 %113, -224
  %120 = add i64 %115, 11
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, 16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2450
  %128 = add i64 %122, -44
  %129 = load i32, i32* %EDI, align 4
  %130 = add i64 %124, 7
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %131, align 4
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = load i32, i32* %ESI, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -52
  %140 = load i32, i32* %EDX, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -64
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %149 = load i64, i64* %148, align 1
  %150 = inttoptr i64 %145 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC, align 8
  %155 = bitcast %union.VectorReg* %7 to double*
  %156 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %157 = load i64, i64* %156, align 1
  %158 = inttoptr i64 %152 to i64*
  store i64 %157, i64* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -80
  %161 = load i64, i64* %RCX, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  store i64 %161, i64* %164, align 8
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -88
  %167 = load i64, i64* %R8, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170, align 8
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -96
  %173 = load i64, i64* %R9, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %176, align 8
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -104
  %179 = load i64, i64* %RAX, align 8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %178 to i64*
  store i64 %179, i64* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -224
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2450
  %189 = add i64 %183, -112
  %190 = add i64 %185, 11
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -216
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RCX, align 8, !tbaa !2450
  %198 = add i64 %192, -120
  %199 = add i64 %194, 11
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -128
  %203 = load i64, i64* %R13, align 8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -136
  %209 = load i64, i64* %R12, align 8
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212, align 8
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -144
  %215 = load i64, i64* %R15, align 8
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 7
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218, align 8
  %219 = load i64, i64* %RBP, align 8
  %220 = add i64 %219, -152
  %221 = load i64, i64* %R14, align 8
  %222 = load i64, i64* %PC, align 8
  %223 = add i64 %222, 7
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224, align 8
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -160
  %227 = load i64, i64* %RBX, align 8
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %226 to i64*
  store i64 %227, i64* %230, align 8
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -168
  %233 = load i64, i64* %R11, align 8
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %232 to i64*
  store i64 %233, i64* %236, align 8
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -176
  %239 = load i64, i64* %R10, align 8
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 7
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242, align 8
  %243 = load i64, i64* %RBP, align 8
  %244 = add i64 %243, -208
  %245 = load i64, i64* %PC, align 8
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %R8, align 8, !tbaa !2450
  %249 = add i64 %243, -184
  %250 = add i64 %245, 14
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  store i64 %248, i64* %251, align 8
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -188
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, 10
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %253 to i32*
  store i32 0, i32* %256, align 4
  %257 = bitcast [32 x %union.VectorReg]* %6 to double*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %259 = bitcast i64* %258 to double*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %261 = bitcast i64* %260 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402341

block_40235a:                                     ; preds = %block_402d12, %block_402350
  %262 = phi i64 [ %3518, %block_402d12 ], [ %.pre10, %block_402350 ]
  %263 = load i64, i64* %RBP, align 8
  %264 = add i64 %263, -192
  %265 = add i64 %262, 6
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = zext i32 %267 to i64
  store i64 %268, i64* %RAX, align 8, !tbaa !2450
  %269 = add i64 %263, -52
  %270 = add i64 %262, 9
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = sub i32 %267, %272
  %274 = icmp ult i32 %267, %272
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %42, align 1, !tbaa !2428
  %276 = and i32 %273, 255
  %277 = tail call i32 @llvm.ctpop.i32(i32 %276) #10
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %49, align 1, !tbaa !2445
  %281 = xor i32 %272, %267
  %282 = xor i32 %281, %273
  %283 = lshr i32 %282, 4
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  store i8 %285, i8* %55, align 1, !tbaa !2446
  %286 = icmp eq i32 %273, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %58, align 1, !tbaa !2447
  %288 = lshr i32 %273, 31
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %61, align 1, !tbaa !2448
  %290 = lshr i32 %267, 31
  %291 = lshr i32 %272, 31
  %292 = xor i32 %291, %290
  %293 = xor i32 %288, %290
  %294 = add nuw nsw i32 %293, %292
  %295 = icmp eq i32 %294, 2
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %67, align 1, !tbaa !2449
  %297 = icmp ne i8 %289, 0
  %298 = xor i1 %297, %295
  %.v = select i1 %298, i64 15, i64 3224
  %299 = add i64 %.v, %262
  store i64 %299, i64* %PC, align 8, !tbaa !2450
  br i1 %298, label %block_402369, label %block_402ff2

block_4026d3:                                     ; preds = %block_402373
  %300 = add i64 %1327, 42
  store i64 %300, i64* %PC, align 8
  %301 = load i32, i32* %1299, align 4
  %302 = sext i32 %301 to i64
  store i64 %302, i64* %RCX, align 8, !tbaa !2450
  %303 = shl nsw i64 %302, 3
  %304 = add i64 %303, %1373
  %305 = add i64 %1327, 47
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %308 = add i64 %1327, 51
  store i64 %308, i64* %PC, align 8
  %309 = load i64, i64* %1330, align 8
  store i64 %309, i64* %RAX, align 8, !tbaa !2450
  %310 = add i64 %1327, 58
  store i64 %310, i64* %PC, align 8
  %311 = load i32, i32* %1334, align 4
  %312 = sext i32 %311 to i64
  %313 = mul nsw i64 %312, 33800
  store i64 %313, i64* %RCX, align 8, !tbaa !2450
  %314 = lshr i64 %313, 63
  %315 = add i64 %313, %309
  store i64 %315, i64* %RAX, align 8, !tbaa !2450
  %316 = icmp ult i64 %315, %309
  %317 = icmp ult i64 %315, %313
  %318 = or i1 %316, %317
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %42, align 1, !tbaa !2428
  %320 = trunc i64 %315 to i32
  %321 = and i32 %320, 255
  %322 = tail call i32 @llvm.ctpop.i32(i32 %321) #10
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  store i8 %325, i8* %49, align 1, !tbaa !2445
  %326 = xor i64 %313, %309
  %327 = xor i64 %326, %315
  %328 = lshr i64 %327, 4
  %329 = trunc i64 %328 to i8
  %330 = and i8 %329, 1
  store i8 %330, i8* %55, align 1, !tbaa !2446
  %331 = icmp eq i64 %315, 0
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %58, align 1, !tbaa !2447
  %333 = lshr i64 %315, 63
  %334 = trunc i64 %333 to i8
  store i8 %334, i8* %61, align 1, !tbaa !2448
  %335 = lshr i64 %309, 63
  %336 = xor i64 %333, %335
  %337 = xor i64 %333, %314
  %338 = add nuw nsw i64 %336, %337
  %339 = icmp eq i64 %338, 2
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %67, align 1, !tbaa !2449
  %341 = add i64 %1327, 74
  store i64 %341, i64* %PC, align 8
  %342 = load i32, i32* %1367, align 4
  %343 = add i32 %342, 1
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RDX, align 8, !tbaa !2450
  %345 = sext i32 %343 to i64
  %346 = mul nsw i64 %345, 520
  store i64 %346, i64* %RCX, align 8, !tbaa !2450
  %347 = lshr i64 %346, 63
  %348 = add i64 %346, %315
  store i64 %348, i64* %RAX, align 8, !tbaa !2450
  %349 = icmp ult i64 %348, %315
  %350 = icmp ult i64 %348, %346
  %351 = or i1 %349, %350
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %42, align 1, !tbaa !2428
  %353 = trunc i64 %348 to i32
  %354 = and i32 %353, 255
  %355 = tail call i32 @llvm.ctpop.i32(i32 %354) #10
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  store i8 %358, i8* %49, align 1, !tbaa !2445
  %359 = xor i64 %346, %315
  %360 = xor i64 %359, %348
  %361 = lshr i64 %360, 4
  %362 = trunc i64 %361 to i8
  %363 = and i8 %362, 1
  store i8 %363, i8* %55, align 1, !tbaa !2446
  %364 = icmp eq i64 %348, 0
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %58, align 1, !tbaa !2447
  %366 = lshr i64 %348, 63
  %367 = trunc i64 %366 to i8
  store i8 %367, i8* %61, align 1, !tbaa !2448
  %368 = xor i64 %366, %333
  %369 = xor i64 %366, %347
  %370 = add nuw nsw i64 %368, %369
  %371 = icmp eq i64 %370, 2
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %67, align 1, !tbaa !2449
  %373 = load i64, i64* %RBP, align 8
  %374 = add i64 %373, -48
  %375 = add i64 %1327, 94
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i32*
  %377 = load i32, i32* %376, align 4
  %378 = sext i32 %377 to i64
  store i64 %378, i64* %RCX, align 8, !tbaa !2450
  %379 = shl nsw i64 %378, 3
  %380 = add i64 %379, %348
  %381 = add i64 %1327, 99
  store i64 %381, i64* %PC, align 8
  %382 = load double, double* %257, align 1
  %383 = inttoptr i64 %380 to double*
  %384 = load double, double* %383, align 8
  %385 = fsub double %382, %384
  store double %385, double* %257, align 1, !tbaa !2453
  %386 = add i64 %373, -88
  %387 = add i64 %1327, 103
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %386 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %RAX, align 8, !tbaa !2450
  %390 = add i64 %373, -188
  %391 = add i64 %1327, 110
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = sext i32 %393 to i64
  %395 = mul nsw i64 %394, 520
  store i64 %395, i64* %RCX, align 8, !tbaa !2450
  %396 = lshr i64 %395, 63
  %397 = add i64 %395, %389
  store i64 %397, i64* %RAX, align 8, !tbaa !2450
  %398 = icmp ult i64 %397, %389
  %399 = icmp ult i64 %397, %395
  %400 = or i1 %398, %399
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %42, align 1, !tbaa !2428
  %402 = trunc i64 %397 to i32
  %403 = and i32 %402, 255
  %404 = tail call i32 @llvm.ctpop.i32(i32 %403) #10
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  store i8 %407, i8* %49, align 1, !tbaa !2445
  %408 = xor i64 %395, %389
  %409 = xor i64 %408, %397
  %410 = lshr i64 %409, 4
  %411 = trunc i64 %410 to i8
  %412 = and i8 %411, 1
  store i8 %412, i8* %55, align 1, !tbaa !2446
  %413 = icmp eq i64 %397, 0
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %58, align 1, !tbaa !2447
  %415 = lshr i64 %397, 63
  %416 = trunc i64 %415 to i8
  store i8 %416, i8* %61, align 1, !tbaa !2448
  %417 = lshr i64 %389, 63
  %418 = xor i64 %415, %417
  %419 = xor i64 %415, %396
  %420 = add nuw nsw i64 %418, %419
  %421 = icmp eq i64 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %67, align 1, !tbaa !2449
  %423 = add i64 %373, -192
  %424 = add i64 %1327, 127
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = sext i32 %426 to i64
  store i64 %427, i64* %RCX, align 8, !tbaa !2450
  %428 = shl nsw i64 %427, 3
  %429 = add i64 %428, %397
  %430 = add i64 %1327, 132
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to double*
  %432 = load double, double* %431, align 8
  %433 = fadd double %385, %432
  store double %433, double* %257, align 1, !tbaa !2453
  %434 = add i64 %373, -128
  %435 = add i64 %1327, 136
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i64*
  %437 = load i64, i64* %436, align 8
  store i64 %437, i64* %RAX, align 8, !tbaa !2450
  %438 = add i64 %1327, 143
  store i64 %438, i64* %PC, align 8
  %439 = load i32, i32* %392, align 4
  %440 = sext i32 %439 to i64
  %441 = mul nsw i64 %440, 33800
  store i64 %441, i64* %RCX, align 8, !tbaa !2450
  %442 = lshr i64 %441, 63
  %443 = add i64 %441, %437
  store i64 %443, i64* %RAX, align 8, !tbaa !2450
  %444 = icmp ult i64 %443, %437
  %445 = icmp ult i64 %443, %441
  %446 = or i1 %444, %445
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %42, align 1, !tbaa !2428
  %448 = trunc i64 %443 to i32
  %449 = and i32 %448, 255
  %450 = tail call i32 @llvm.ctpop.i32(i32 %449) #10
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  store i8 %453, i8* %49, align 1, !tbaa !2445
  %454 = xor i64 %441, %437
  %455 = xor i64 %454, %443
  %456 = lshr i64 %455, 4
  %457 = trunc i64 %456 to i8
  %458 = and i8 %457, 1
  store i8 %458, i8* %55, align 1, !tbaa !2446
  %459 = icmp eq i64 %443, 0
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %58, align 1, !tbaa !2447
  %461 = lshr i64 %443, 63
  %462 = trunc i64 %461 to i8
  store i8 %462, i8* %61, align 1, !tbaa !2448
  %463 = lshr i64 %437, 63
  %464 = xor i64 %461, %463
  %465 = xor i64 %461, %442
  %466 = add nuw nsw i64 %464, %465
  %467 = icmp eq i64 %466, 2
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %67, align 1, !tbaa !2449
  %469 = add i64 %1327, 160
  store i64 %469, i64* %PC, align 8
  %470 = load i32, i32* %425, align 4
  %471 = sext i32 %470 to i64
  %472 = mul nsw i64 %471, 520
  store i64 %472, i64* %RCX, align 8, !tbaa !2450
  %473 = lshr i64 %472, 63
  %474 = add i64 %472, %443
  store i64 %474, i64* %RAX, align 8, !tbaa !2450
  %475 = icmp ult i64 %474, %443
  %476 = icmp ult i64 %474, %472
  %477 = or i1 %475, %476
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %42, align 1, !tbaa !2428
  %479 = trunc i64 %474 to i32
  %480 = and i32 %479, 255
  %481 = tail call i32 @llvm.ctpop.i32(i32 %480) #10
  %482 = trunc i32 %481 to i8
  %483 = and i8 %482, 1
  %484 = xor i8 %483, 1
  store i8 %484, i8* %49, align 1, !tbaa !2445
  %485 = xor i64 %472, %443
  %486 = xor i64 %485, %474
  %487 = lshr i64 %486, 4
  %488 = trunc i64 %487 to i8
  %489 = and i8 %488, 1
  store i8 %489, i8* %55, align 1, !tbaa !2446
  %490 = icmp eq i64 %474, 0
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %58, align 1, !tbaa !2447
  %492 = lshr i64 %474, 63
  %493 = trunc i64 %492 to i8
  store i8 %493, i8* %61, align 1, !tbaa !2448
  %494 = xor i64 %492, %461
  %495 = xor i64 %492, %473
  %496 = add nuw nsw i64 %494, %495
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  store i8 %498, i8* %67, align 1, !tbaa !2449
  %499 = load i64, i64* %RBP, align 8
  %500 = add i64 %499, -48
  %501 = add i64 %1327, 174
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i32*
  %503 = load i32, i32* %502, align 4
  %504 = sext i32 %503 to i64
  store i64 %504, i64* %RCX, align 8, !tbaa !2450
  %505 = shl nsw i64 %504, 3
  %506 = add i64 %505, %474
  %507 = add i64 %1327, 179
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to double*
  %509 = load double, double* %508, align 8
  %510 = fsub double %433, %509
  store double %510, double* %257, align 1, !tbaa !2453
  %511 = add i64 %499, -96
  %512 = add i64 %1327, 183
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i64*
  %514 = load i64, i64* %513, align 8
  store i64 %514, i64* %RAX, align 8, !tbaa !2450
  %515 = add i64 %499, -188
  %516 = add i64 %1327, 190
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %515 to i32*
  %518 = load i32, i32* %517, align 4
  %519 = sext i32 %518 to i64
  %520 = mul nsw i64 %519, 520
  store i64 %520, i64* %RCX, align 8, !tbaa !2450
  %521 = lshr i64 %520, 63
  %522 = add i64 %520, %514
  store i64 %522, i64* %RAX, align 8, !tbaa !2450
  %523 = icmp ult i64 %522, %514
  %524 = icmp ult i64 %522, %520
  %525 = or i1 %523, %524
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %42, align 1, !tbaa !2428
  %527 = trunc i64 %522 to i32
  %528 = and i32 %527, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528) #10
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %49, align 1, !tbaa !2445
  %533 = xor i64 %520, %514
  %534 = xor i64 %533, %522
  %535 = lshr i64 %534, 4
  %536 = trunc i64 %535 to i8
  %537 = and i8 %536, 1
  store i8 %537, i8* %55, align 1, !tbaa !2446
  %538 = icmp eq i64 %522, 0
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %58, align 1, !tbaa !2447
  %540 = lshr i64 %522, 63
  %541 = trunc i64 %540 to i8
  store i8 %541, i8* %61, align 1, !tbaa !2448
  %542 = lshr i64 %514, 63
  %543 = xor i64 %540, %542
  %544 = xor i64 %540, %521
  %545 = add nuw nsw i64 %543, %544
  %546 = icmp eq i64 %545, 2
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %67, align 1, !tbaa !2449
  %548 = add i64 %499, -192
  %549 = add i64 %1327, 207
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %548 to i32*
  %551 = load i32, i32* %550, align 4
  %552 = sext i32 %551 to i64
  store i64 %552, i64* %RCX, align 8, !tbaa !2450
  %553 = shl nsw i64 %552, 3
  %554 = add i64 %553, %522
  %555 = add i64 %1327, 212
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to double*
  store double %510, double* %556, align 8
  %557 = load i64, i64* %RBP, align 8
  %558 = add i64 %557, -176
  %559 = load i64, i64* %PC, align 8
  %560 = add i64 %559, 7
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %558 to i64*
  %562 = load i64, i64* %561, align 8
  store i64 %562, i64* %RAX, align 8, !tbaa !2450
  %563 = add i64 %557, -192
  %564 = add i64 %559, 14
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %563 to i32*
  %566 = load i32, i32* %565, align 4
  %567 = sext i32 %566 to i64
  store i64 %567, i64* %RCX, align 8, !tbaa !2450
  %568 = shl nsw i64 %567, 3
  %569 = add i64 %568, %562
  %570 = add i64 %559, 19
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i64*
  %572 = load i64, i64* %571, align 8
  store i64 %572, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %573 = add i64 %557, -184
  %574 = add i64 %559, 26
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i64*
  %576 = load i64, i64* %575, align 8
  store i64 %576, i64* %RAX, align 8, !tbaa !2450
  %577 = add i64 %559, 33
  store i64 %577, i64* %PC, align 8
  %578 = load i32, i32* %565, align 4
  %579 = sext i32 %578 to i64
  store i64 %579, i64* %RCX, align 8, !tbaa !2450
  %580 = shl nsw i64 %579, 3
  %581 = add i64 %580, %576
  %582 = add i64 %559, 38
  store i64 %582, i64* %PC, align 8
  %583 = bitcast i64 %572 to double
  %584 = inttoptr i64 %581 to double*
  %585 = load double, double* %584, align 8
  %586 = fdiv double %583, %585
  store double %586, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %587 = add i64 %557, -112
  %588 = add i64 %559, 42
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i64*
  %590 = load i64, i64* %589, align 8
  store i64 %590, i64* %RAX, align 8, !tbaa !2450
  %591 = add i64 %557, -188
  %592 = add i64 %559, 49
  store i64 %592, i64* %PC, align 8
  %593 = inttoptr i64 %591 to i32*
  %594 = load i32, i32* %593, align 4
  %595 = sext i32 %594 to i64
  %596 = mul nsw i64 %595, 33800
  store i64 %596, i64* %RCX, align 8, !tbaa !2450
  %597 = lshr i64 %596, 63
  %598 = add i64 %596, %590
  store i64 %598, i64* %RAX, align 8, !tbaa !2450
  %599 = icmp ult i64 %598, %590
  %600 = icmp ult i64 %598, %596
  %601 = or i1 %599, %600
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %42, align 1, !tbaa !2428
  %603 = trunc i64 %598 to i32
  %604 = and i32 %603, 255
  %605 = tail call i32 @llvm.ctpop.i32(i32 %604) #10
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  %608 = xor i8 %607, 1
  store i8 %608, i8* %49, align 1, !tbaa !2445
  %609 = xor i64 %596, %590
  %610 = xor i64 %609, %598
  %611 = lshr i64 %610, 4
  %612 = trunc i64 %611 to i8
  %613 = and i8 %612, 1
  store i8 %613, i8* %55, align 1, !tbaa !2446
  %614 = icmp eq i64 %598, 0
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %58, align 1, !tbaa !2447
  %616 = lshr i64 %598, 63
  %617 = trunc i64 %616 to i8
  store i8 %617, i8* %61, align 1, !tbaa !2448
  %618 = lshr i64 %590, 63
  %619 = xor i64 %616, %618
  %620 = xor i64 %616, %597
  %621 = add nuw nsw i64 %619, %620
  %622 = icmp eq i64 %621, 2
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %67, align 1, !tbaa !2449
  %624 = add i64 %559, 66
  store i64 %624, i64* %PC, align 8
  %625 = load i32, i32* %565, align 4
  %626 = sext i32 %625 to i64
  %627 = mul nsw i64 %626, 520
  store i64 %627, i64* %RCX, align 8, !tbaa !2450
  %628 = lshr i64 %627, 63
  %629 = add i64 %627, %598
  store i64 %629, i64* %RAX, align 8, !tbaa !2450
  %630 = icmp ult i64 %629, %598
  %631 = icmp ult i64 %629, %627
  %632 = or i1 %630, %631
  %633 = zext i1 %632 to i8
  store i8 %633, i8* %42, align 1, !tbaa !2428
  %634 = trunc i64 %629 to i32
  %635 = and i32 %634, 255
  %636 = tail call i32 @llvm.ctpop.i32(i32 %635) #10
  %637 = trunc i32 %636 to i8
  %638 = and i8 %637, 1
  %639 = xor i8 %638, 1
  store i8 %639, i8* %49, align 1, !tbaa !2445
  %640 = xor i64 %627, %598
  %641 = xor i64 %640, %629
  %642 = lshr i64 %641, 4
  %643 = trunc i64 %642 to i8
  %644 = and i8 %643, 1
  store i8 %644, i8* %55, align 1, !tbaa !2446
  %645 = icmp eq i64 %629, 0
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %58, align 1, !tbaa !2447
  %647 = lshr i64 %629, 63
  %648 = trunc i64 %647 to i8
  store i8 %648, i8* %61, align 1, !tbaa !2448
  %649 = xor i64 %647, %616
  %650 = xor i64 %647, %628
  %651 = add nuw nsw i64 %649, %650
  %652 = icmp eq i64 %651, 2
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %67, align 1, !tbaa !2449
  %654 = add i64 %557, -48
  %655 = add i64 %559, 80
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i32*
  %657 = load i32, i32* %656, align 4
  %658 = sext i32 %657 to i64
  store i64 %658, i64* %RCX, align 8, !tbaa !2450
  %659 = shl nsw i64 %658, 3
  %660 = add i64 %659, %629
  %661 = add i64 %559, 85
  store i64 %661, i64* %PC, align 8
  %662 = load double, double* %257, align 1
  %663 = inttoptr i64 %660 to double*
  %664 = load double, double* %663, align 8
  %665 = fmul double %662, %664
  store double %665, double* %257, align 1, !tbaa !2453
  %666 = add i64 %557, -72
  %667 = add i64 %559, 90
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i64*
  %669 = load i64, i64* %668, align 8
  store i64 %669, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %670 = add i64 %559, 97
  store i64 %670, i64* %PC, align 8
  %671 = load i64, i64* %575, align 8
  store i64 %671, i64* %RAX, align 8, !tbaa !2450
  %672 = add i64 %559, 104
  store i64 %672, i64* %PC, align 8
  %673 = load i32, i32* %565, align 4
  %674 = sext i32 %673 to i64
  store i64 %674, i64* %RCX, align 8, !tbaa !2450
  %675 = shl nsw i64 %674, 3
  %676 = add i64 %675, %671
  %677 = add i64 %559, 109
  store i64 %677, i64* %PC, align 8
  %678 = bitcast i64 %669 to double
  %679 = inttoptr i64 %676 to double*
  %680 = load double, double* %679, align 8
  %681 = fdiv double %678, %680
  store double %681, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %682 = load i64, i64* %RBP, align 8
  %683 = add i64 %682, -96
  %684 = add i64 %559, 113
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  %686 = load i64, i64* %685, align 8
  store i64 %686, i64* %RAX, align 8, !tbaa !2450
  %687 = add i64 %682, -188
  %688 = add i64 %559, 120
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %687 to i32*
  %690 = load i32, i32* %689, align 4
  %691 = sext i32 %690 to i64
  %692 = mul nsw i64 %691, 520
  store i64 %692, i64* %RCX, align 8, !tbaa !2450
  %693 = lshr i64 %692, 63
  %694 = add i64 %692, %686
  store i64 %694, i64* %RAX, align 8, !tbaa !2450
  %695 = icmp ult i64 %694, %686
  %696 = icmp ult i64 %694, %692
  %697 = or i1 %695, %696
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %42, align 1, !tbaa !2428
  %699 = trunc i64 %694 to i32
  %700 = and i32 %699, 255
  %701 = tail call i32 @llvm.ctpop.i32(i32 %700) #10
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  store i8 %704, i8* %49, align 1, !tbaa !2445
  %705 = xor i64 %692, %686
  %706 = xor i64 %705, %694
  %707 = lshr i64 %706, 4
  %708 = trunc i64 %707 to i8
  %709 = and i8 %708, 1
  store i8 %709, i8* %55, align 1, !tbaa !2446
  %710 = icmp eq i64 %694, 0
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %58, align 1, !tbaa !2447
  %712 = lshr i64 %694, 63
  %713 = trunc i64 %712 to i8
  store i8 %713, i8* %61, align 1, !tbaa !2448
  %714 = lshr i64 %686, 63
  %715 = xor i64 %712, %714
  %716 = xor i64 %712, %693
  %717 = add nuw nsw i64 %715, %716
  %718 = icmp eq i64 %717, 2
  %719 = zext i1 %718 to i8
  store i8 %719, i8* %67, align 1, !tbaa !2449
  %720 = add i64 %682, -192
  %721 = add i64 %559, 137
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = sext i32 %723 to i64
  store i64 %724, i64* %RCX, align 8, !tbaa !2450
  %725 = shl nsw i64 %724, 3
  %726 = add i64 %725, %694
  %727 = add i64 %559, 142
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to double*
  %729 = load double, double* %728, align 8
  %730 = fmul double %681, %729
  store double %730, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %731 = fsub double %665, %730
  store double %731, double* %257, align 1, !tbaa !2453
  %732 = add i64 %682, -104
  %733 = add i64 %559, 150
  store i64 %733, i64* %PC, align 8
  %734 = inttoptr i64 %732 to i64*
  %735 = load i64, i64* %734, align 8
  store i64 %735, i64* %RAX, align 8, !tbaa !2450
  %736 = add i64 %559, 157
  store i64 %736, i64* %PC, align 8
  %737 = load i32, i32* %689, align 4
  %738 = sext i32 %737 to i64
  %739 = mul nsw i64 %738, 520
  store i64 %739, i64* %RCX, align 8, !tbaa !2450
  %740 = lshr i64 %739, 63
  %741 = add i64 %739, %735
  store i64 %741, i64* %RAX, align 8, !tbaa !2450
  %742 = icmp ult i64 %741, %735
  %743 = icmp ult i64 %741, %739
  %744 = or i1 %742, %743
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %42, align 1, !tbaa !2428
  %746 = trunc i64 %741 to i32
  %747 = and i32 %746, 255
  %748 = tail call i32 @llvm.ctpop.i32(i32 %747) #10
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  store i8 %751, i8* %49, align 1, !tbaa !2445
  %752 = xor i64 %739, %735
  %753 = xor i64 %752, %741
  %754 = lshr i64 %753, 4
  %755 = trunc i64 %754 to i8
  %756 = and i8 %755, 1
  store i8 %756, i8* %55, align 1, !tbaa !2446
  %757 = icmp eq i64 %741, 0
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %58, align 1, !tbaa !2447
  %759 = lshr i64 %741, 63
  %760 = trunc i64 %759 to i8
  store i8 %760, i8* %61, align 1, !tbaa !2448
  %761 = lshr i64 %735, 63
  %762 = xor i64 %759, %761
  %763 = xor i64 %759, %740
  %764 = add nuw nsw i64 %762, %763
  %765 = icmp eq i64 %764, 2
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %67, align 1, !tbaa !2449
  %767 = add i64 %559, 174
  store i64 %767, i64* %PC, align 8
  %768 = load i32, i32* %722, align 4
  %769 = sext i32 %768 to i64
  store i64 %769, i64* %RCX, align 8, !tbaa !2450
  %770 = shl nsw i64 %769, 3
  %771 = add i64 %770, %741
  %772 = add i64 %559, 179
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to double*
  store double %731, double* %773, align 8
  %774 = load i64, i64* %RBP, align 8
  %775 = add i64 %774, -160
  %776 = load i64, i64* %PC, align 8
  %777 = add i64 %776, 7
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %775 to i64*
  %779 = load i64, i64* %778, align 8
  store i64 %779, i64* %RAX, align 8, !tbaa !2450
  %780 = add i64 %774, -48
  %781 = add i64 %776, 11
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %780 to i32*
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %783 to i64
  store i64 %784, i64* %RCX, align 8, !tbaa !2450
  %785 = shl nsw i64 %784, 3
  %786 = add i64 %785, %779
  %787 = add i64 %776, 16
  store i64 %787, i64* %PC, align 8
  %788 = inttoptr i64 %786 to i64*
  %789 = load i64, i64* %788, align 8
  store i64 %789, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %790 = add i64 %774, -168
  %791 = add i64 %776, 23
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %790 to i64*
  %793 = load i64, i64* %792, align 8
  store i64 %793, i64* %RAX, align 8, !tbaa !2450
  %794 = add i64 %776, 27
  store i64 %794, i64* %PC, align 8
  %795 = load i32, i32* %782, align 4
  %796 = sext i32 %795 to i64
  store i64 %796, i64* %RCX, align 8, !tbaa !2450
  %797 = shl nsw i64 %796, 3
  %798 = add i64 %797, %793
  %799 = add i64 %776, 32
  store i64 %799, i64* %PC, align 8
  %800 = bitcast i64 %789 to double
  %801 = inttoptr i64 %798 to double*
  %802 = load double, double* %801, align 8
  %803 = fdiv double %800, %802
  store double %803, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %804 = add i64 %774, -136
  %805 = add i64 %776, 39
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %804 to i64*
  %807 = load i64, i64* %806, align 8
  store i64 %807, i64* %RAX, align 8, !tbaa !2450
  %808 = add i64 %774, -188
  %809 = add i64 %776, 46
  store i64 %809, i64* %PC, align 8
  %810 = inttoptr i64 %808 to i32*
  %811 = load i32, i32* %810, align 4
  %812 = sext i32 %811 to i64
  %813 = mul nsw i64 %812, 33800
  store i64 %813, i64* %RCX, align 8, !tbaa !2450
  %814 = lshr i64 %813, 63
  %815 = add i64 %813, %807
  store i64 %815, i64* %RAX, align 8, !tbaa !2450
  %816 = icmp ult i64 %815, %807
  %817 = icmp ult i64 %815, %813
  %818 = or i1 %816, %817
  %819 = zext i1 %818 to i8
  store i8 %819, i8* %42, align 1, !tbaa !2428
  %820 = trunc i64 %815 to i32
  %821 = and i32 %820, 255
  %822 = tail call i32 @llvm.ctpop.i32(i32 %821) #10
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = xor i8 %824, 1
  store i8 %825, i8* %49, align 1, !tbaa !2445
  %826 = xor i64 %813, %807
  %827 = xor i64 %826, %815
  %828 = lshr i64 %827, 4
  %829 = trunc i64 %828 to i8
  %830 = and i8 %829, 1
  store i8 %830, i8* %55, align 1, !tbaa !2446
  %831 = icmp eq i64 %815, 0
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %58, align 1, !tbaa !2447
  %833 = lshr i64 %815, 63
  %834 = trunc i64 %833 to i8
  store i8 %834, i8* %61, align 1, !tbaa !2448
  %835 = lshr i64 %807, 63
  %836 = xor i64 %833, %835
  %837 = xor i64 %833, %814
  %838 = add nuw nsw i64 %836, %837
  %839 = icmp eq i64 %838, 2
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %67, align 1, !tbaa !2449
  %841 = add i64 %774, -192
  %842 = add i64 %776, 63
  store i64 %842, i64* %PC, align 8
  %843 = inttoptr i64 %841 to i32*
  %844 = load i32, i32* %843, align 4
  %845 = sext i32 %844 to i64
  %846 = mul nsw i64 %845, 520
  store i64 %846, i64* %RCX, align 8, !tbaa !2450
  %847 = lshr i64 %846, 63
  %848 = add i64 %846, %815
  store i64 %848, i64* %RAX, align 8, !tbaa !2450
  %849 = icmp ult i64 %848, %815
  %850 = icmp ult i64 %848, %846
  %851 = or i1 %849, %850
  %852 = zext i1 %851 to i8
  store i8 %852, i8* %42, align 1, !tbaa !2428
  %853 = trunc i64 %848 to i32
  %854 = and i32 %853, 255
  %855 = tail call i32 @llvm.ctpop.i32(i32 %854) #10
  %856 = trunc i32 %855 to i8
  %857 = and i8 %856, 1
  %858 = xor i8 %857, 1
  store i8 %858, i8* %49, align 1, !tbaa !2445
  %859 = xor i64 %846, %815
  %860 = xor i64 %859, %848
  %861 = lshr i64 %860, 4
  %862 = trunc i64 %861 to i8
  %863 = and i8 %862, 1
  store i8 %863, i8* %55, align 1, !tbaa !2446
  %864 = icmp eq i64 %848, 0
  %865 = zext i1 %864 to i8
  store i8 %865, i8* %58, align 1, !tbaa !2447
  %866 = lshr i64 %848, 63
  %867 = trunc i64 %866 to i8
  store i8 %867, i8* %61, align 1, !tbaa !2448
  %868 = xor i64 %866, %833
  %869 = xor i64 %866, %847
  %870 = add nuw nsw i64 %868, %869
  %871 = icmp eq i64 %870, 2
  %872 = zext i1 %871 to i8
  store i8 %872, i8* %67, align 1, !tbaa !2449
  %873 = add i64 %776, 77
  store i64 %873, i64* %PC, align 8
  %874 = load i32, i32* %782, align 4
  %875 = sext i32 %874 to i64
  store i64 %875, i64* %RCX, align 8, !tbaa !2450
  %876 = shl nsw i64 %875, 3
  %877 = add i64 %876, %848
  %878 = add i64 %776, 82
  store i64 %878, i64* %PC, align 8
  %879 = load double, double* %257, align 1
  %880 = inttoptr i64 %877 to double*
  %881 = load double, double* %880, align 8
  %882 = fmul double %879, %881
  store double %882, double* %257, align 1, !tbaa !2453
  %883 = add i64 %774, -64
  %884 = add i64 %776, 87
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %883 to i64*
  %886 = load i64, i64* %885, align 8
  store i64 %886, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %887 = add i64 %774, -152
  %888 = add i64 %776, 94
  store i64 %888, i64* %PC, align 8
  %889 = inttoptr i64 %887 to i64*
  %890 = load i64, i64* %889, align 8
  store i64 %890, i64* %RAX, align 8, !tbaa !2450
  %891 = add i64 %776, 101
  store i64 %891, i64* %PC, align 8
  %892 = load i32, i32* %810, align 4
  %893 = sext i32 %892 to i64
  store i64 %893, i64* %RCX, align 8, !tbaa !2450
  %894 = shl nsw i64 %893, 3
  %895 = add i64 %894, %890
  %896 = add i64 %776, 106
  store i64 %896, i64* %PC, align 8
  %897 = bitcast i64 %886 to double
  %898 = inttoptr i64 %895 to double*
  %899 = load double, double* %898, align 8
  %900 = fmul double %897, %899
  store double %900, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %901 = load i64, i64* %RBP, align 8
  %902 = add i64 %901, -168
  %903 = add i64 %776, 113
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %902 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %RAX, align 8, !tbaa !2450
  %906 = add i64 %901, -48
  %907 = add i64 %776, 117
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %906 to i32*
  %909 = load i32, i32* %908, align 4
  %910 = sext i32 %909 to i64
  store i64 %910, i64* %RCX, align 8, !tbaa !2450
  %911 = shl nsw i64 %910, 3
  %912 = add i64 %911, %905
  %913 = add i64 %776, 122
  store i64 %913, i64* %PC, align 8
  %914 = inttoptr i64 %912 to double*
  %915 = load double, double* %914, align 8
  %916 = fdiv double %900, %915
  store double %916, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %917 = add i64 %901, -104
  %918 = add i64 %776, 126
  store i64 %918, i64* %PC, align 8
  %919 = inttoptr i64 %917 to i64*
  %920 = load i64, i64* %919, align 8
  store i64 %920, i64* %RAX, align 8, !tbaa !2450
  %921 = add i64 %901, -188
  %922 = add i64 %776, 133
  store i64 %922, i64* %PC, align 8
  %923 = inttoptr i64 %921 to i32*
  %924 = load i32, i32* %923, align 4
  %925 = sext i32 %924 to i64
  %926 = mul nsw i64 %925, 520
  store i64 %926, i64* %RCX, align 8, !tbaa !2450
  %927 = lshr i64 %926, 63
  %928 = add i64 %926, %920
  store i64 %928, i64* %RAX, align 8, !tbaa !2450
  %929 = icmp ult i64 %928, %920
  %930 = icmp ult i64 %928, %926
  %931 = or i1 %929, %930
  %932 = zext i1 %931 to i8
  store i8 %932, i8* %42, align 1, !tbaa !2428
  %933 = trunc i64 %928 to i32
  %934 = and i32 %933, 255
  %935 = tail call i32 @llvm.ctpop.i32(i32 %934) #10
  %936 = trunc i32 %935 to i8
  %937 = and i8 %936, 1
  %938 = xor i8 %937, 1
  store i8 %938, i8* %49, align 1, !tbaa !2445
  %939 = xor i64 %926, %920
  %940 = xor i64 %939, %928
  %941 = lshr i64 %940, 4
  %942 = trunc i64 %941 to i8
  %943 = and i8 %942, 1
  store i8 %943, i8* %55, align 1, !tbaa !2446
  %944 = icmp eq i64 %928, 0
  %945 = zext i1 %944 to i8
  store i8 %945, i8* %58, align 1, !tbaa !2447
  %946 = lshr i64 %928, 63
  %947 = trunc i64 %946 to i8
  store i8 %947, i8* %61, align 1, !tbaa !2448
  %948 = lshr i64 %920, 63
  %949 = xor i64 %946, %948
  %950 = xor i64 %946, %927
  %951 = add nuw nsw i64 %949, %950
  %952 = icmp eq i64 %951, 2
  %953 = zext i1 %952 to i8
  store i8 %953, i8* %67, align 1, !tbaa !2449
  %954 = add i64 %901, -192
  %955 = add i64 %776, 150
  store i64 %955, i64* %PC, align 8
  %956 = inttoptr i64 %954 to i32*
  %957 = load i32, i32* %956, align 4
  %958 = sext i32 %957 to i64
  store i64 %958, i64* %RCX, align 8, !tbaa !2450
  %959 = shl nsw i64 %958, 3
  %960 = add i64 %959, %928
  %961 = add i64 %776, 155
  store i64 %961, i64* %PC, align 8
  %962 = inttoptr i64 %960 to double*
  %963 = load double, double* %962, align 8
  %964 = fmul double %916, %963
  store double %964, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %965 = load double, double* %257, align 1
  %966 = fadd double %964, %965
  store double %966, double* %257, align 1, !tbaa !2453
  %967 = add i64 %901, -64
  %968 = add i64 %776, 164
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %967 to i64*
  %970 = load i64, i64* %969, align 8
  store i64 %970, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %971 = add i64 %901, -144
  %972 = add i64 %776, 171
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %971 to i64*
  %974 = load i64, i64* %973, align 8
  store i64 %974, i64* %RAX, align 8, !tbaa !2450
  %975 = add i64 %776, 178
  store i64 %975, i64* %PC, align 8
  %976 = load i32, i32* %923, align 4
  %977 = sext i32 %976 to i64
  store i64 %977, i64* %RCX, align 8, !tbaa !2450
  %978 = shl nsw i64 %977, 3
  %979 = add i64 %978, %974
  %980 = add i64 %776, 183
  store i64 %980, i64* %PC, align 8
  %981 = bitcast i64 %970 to double
  %982 = inttoptr i64 %979 to double*
  %983 = load double, double* %982, align 8
  %984 = fmul double %981, %983
  store double %984, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %985 = add i64 %776, 190
  store i64 %985, i64* %PC, align 8
  %986 = load i64, i64* %904, align 8
  store i64 %986, i64* %RAX, align 8, !tbaa !2450
  %987 = add i64 %776, 194
  store i64 %987, i64* %PC, align 8
  %988 = load i32, i32* %908, align 4
  %989 = sext i32 %988 to i64
  store i64 %989, i64* %RCX, align 8, !tbaa !2450
  %990 = shl nsw i64 %989, 3
  %991 = add i64 %990, %986
  %992 = add i64 %776, 199
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to double*
  %994 = load double, double* %993, align 8
  %995 = fdiv double %984, %994
  store double %995, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %996 = add i64 %901, -112
  %997 = add i64 %776, 203
  store i64 %997, i64* %PC, align 8
  %998 = inttoptr i64 %996 to i64*
  %999 = load i64, i64* %998, align 8
  store i64 %999, i64* %RAX, align 8, !tbaa !2450
  %1000 = add i64 %776, 210
  store i64 %1000, i64* %PC, align 8
  %1001 = load i32, i32* %923, align 4
  %1002 = sext i32 %1001 to i64
  %1003 = mul nsw i64 %1002, 33800
  store i64 %1003, i64* %RCX, align 8, !tbaa !2450
  %1004 = lshr i64 %1003, 63
  %1005 = add i64 %1003, %999
  store i64 %1005, i64* %RAX, align 8, !tbaa !2450
  %1006 = icmp ult i64 %1005, %999
  %1007 = icmp ult i64 %1005, %1003
  %1008 = or i1 %1006, %1007
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %42, align 1, !tbaa !2428
  %1010 = trunc i64 %1005 to i32
  %1011 = and i32 %1010, 255
  %1012 = tail call i32 @llvm.ctpop.i32(i32 %1011) #10
  %1013 = trunc i32 %1012 to i8
  %1014 = and i8 %1013, 1
  %1015 = xor i8 %1014, 1
  store i8 %1015, i8* %49, align 1, !tbaa !2445
  %1016 = xor i64 %1003, %999
  %1017 = xor i64 %1016, %1005
  %1018 = lshr i64 %1017, 4
  %1019 = trunc i64 %1018 to i8
  %1020 = and i8 %1019, 1
  store i8 %1020, i8* %55, align 1, !tbaa !2446
  %1021 = icmp eq i64 %1005, 0
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %58, align 1, !tbaa !2447
  %1023 = lshr i64 %1005, 63
  %1024 = trunc i64 %1023 to i8
  store i8 %1024, i8* %61, align 1, !tbaa !2448
  %1025 = lshr i64 %999, 63
  %1026 = xor i64 %1023, %1025
  %1027 = xor i64 %1023, %1004
  %1028 = add nuw nsw i64 %1026, %1027
  %1029 = icmp eq i64 %1028, 2
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %67, align 1, !tbaa !2449
  %1031 = load i64, i64* %RBP, align 8
  %1032 = add i64 %1031, -192
  %1033 = add i64 %776, 227
  store i64 %1033, i64* %PC, align 8
  %1034 = inttoptr i64 %1032 to i32*
  %1035 = load i32, i32* %1034, align 4
  %1036 = sext i32 %1035 to i64
  %1037 = mul nsw i64 %1036, 520
  store i64 %1037, i64* %RCX, align 8, !tbaa !2450
  %1038 = lshr i64 %1037, 63
  %1039 = add i64 %1037, %1005
  store i64 %1039, i64* %RAX, align 8, !tbaa !2450
  %1040 = icmp ult i64 %1039, %1005
  %1041 = icmp ult i64 %1039, %1037
  %1042 = or i1 %1040, %1041
  %1043 = zext i1 %1042 to i8
  store i8 %1043, i8* %42, align 1, !tbaa !2428
  %1044 = trunc i64 %1039 to i32
  %1045 = and i32 %1044, 255
  %1046 = tail call i32 @llvm.ctpop.i32(i32 %1045) #10
  %1047 = trunc i32 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = xor i8 %1048, 1
  store i8 %1049, i8* %49, align 1, !tbaa !2445
  %1050 = xor i64 %1037, %1005
  %1051 = xor i64 %1050, %1039
  %1052 = lshr i64 %1051, 4
  %1053 = trunc i64 %1052 to i8
  %1054 = and i8 %1053, 1
  store i8 %1054, i8* %55, align 1, !tbaa !2446
  %1055 = icmp eq i64 %1039, 0
  %1056 = zext i1 %1055 to i8
  store i8 %1056, i8* %58, align 1, !tbaa !2447
  %1057 = lshr i64 %1039, 63
  %1058 = trunc i64 %1057 to i8
  store i8 %1058, i8* %61, align 1, !tbaa !2448
  %1059 = xor i64 %1057, %1023
  %1060 = xor i64 %1057, %1038
  %1061 = add nuw nsw i64 %1059, %1060
  %1062 = icmp eq i64 %1061, 2
  %1063 = zext i1 %1062 to i8
  store i8 %1063, i8* %67, align 1, !tbaa !2449
  %1064 = add i64 %1031, -48
  %1065 = add i64 %776, 241
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i32*
  %1067 = load i32, i32* %1066, align 4
  %1068 = sext i32 %1067 to i64
  store i64 %1068, i64* %RCX, align 8, !tbaa !2450
  %1069 = shl nsw i64 %1068, 3
  %1070 = add i64 %1069, %1039
  %1071 = add i64 %776, 246
  store i64 %1071, i64* %PC, align 8
  %1072 = load double, double* %155, align 1
  %1073 = inttoptr i64 %1070 to double*
  %1074 = load double, double* %1073, align 8
  %1075 = fmul double %1072, %1074
  store double %1075, double* %155, align 1, !tbaa !2453
  %1076 = load double, double* %257, align 1
  %1077 = fsub double %1076, %1075
  store double %1077, double* %257, align 1, !tbaa !2453
  %1078 = add i64 %1031, -136
  %1079 = add i64 %776, 257
  store i64 %1079, i64* %PC, align 8
  %1080 = inttoptr i64 %1078 to i64*
  %1081 = load i64, i64* %1080, align 8
  store i64 %1081, i64* %RAX, align 8, !tbaa !2450
  %1082 = add i64 %1031, -188
  %1083 = add i64 %776, 264
  store i64 %1083, i64* %PC, align 8
  %1084 = inttoptr i64 %1082 to i32*
  %1085 = load i32, i32* %1084, align 4
  %1086 = sext i32 %1085 to i64
  %1087 = mul nsw i64 %1086, 33800
  store i64 %1087, i64* %RCX, align 8, !tbaa !2450
  %1088 = lshr i64 %1087, 63
  %1089 = add i64 %1087, %1081
  store i64 %1089, i64* %RAX, align 8, !tbaa !2450
  %1090 = icmp ult i64 %1089, %1081
  %1091 = icmp ult i64 %1089, %1087
  %1092 = or i1 %1090, %1091
  %1093 = zext i1 %1092 to i8
  store i8 %1093, i8* %42, align 1, !tbaa !2428
  %1094 = trunc i64 %1089 to i32
  %1095 = and i32 %1094, 255
  %1096 = tail call i32 @llvm.ctpop.i32(i32 %1095) #10
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  store i8 %1099, i8* %49, align 1, !tbaa !2445
  %1100 = xor i64 %1087, %1081
  %1101 = xor i64 %1100, %1089
  %1102 = lshr i64 %1101, 4
  %1103 = trunc i64 %1102 to i8
  %1104 = and i8 %1103, 1
  store i8 %1104, i8* %55, align 1, !tbaa !2446
  %1105 = icmp eq i64 %1089, 0
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %58, align 1, !tbaa !2447
  %1107 = lshr i64 %1089, 63
  %1108 = trunc i64 %1107 to i8
  store i8 %1108, i8* %61, align 1, !tbaa !2448
  %1109 = lshr i64 %1081, 63
  %1110 = xor i64 %1107, %1109
  %1111 = xor i64 %1107, %1088
  %1112 = add nuw nsw i64 %1110, %1111
  %1113 = icmp eq i64 %1112, 2
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %67, align 1, !tbaa !2449
  %1115 = load i64, i64* %RBP, align 8
  %1116 = add i64 %1115, -192
  %1117 = add i64 %776, 281
  store i64 %1117, i64* %PC, align 8
  %1118 = inttoptr i64 %1116 to i32*
  %1119 = load i32, i32* %1118, align 4
  %1120 = sext i32 %1119 to i64
  %1121 = mul nsw i64 %1120, 520
  store i64 %1121, i64* %RCX, align 8, !tbaa !2450
  %1122 = lshr i64 %1121, 63
  %1123 = add i64 %1121, %1089
  store i64 %1123, i64* %RAX, align 8, !tbaa !2450
  %1124 = icmp ult i64 %1123, %1089
  %1125 = icmp ult i64 %1123, %1121
  %1126 = or i1 %1124, %1125
  %1127 = zext i1 %1126 to i8
  store i8 %1127, i8* %42, align 1, !tbaa !2428
  %1128 = trunc i64 %1123 to i32
  %1129 = and i32 %1128, 255
  %1130 = tail call i32 @llvm.ctpop.i32(i32 %1129) #10
  %1131 = trunc i32 %1130 to i8
  %1132 = and i8 %1131, 1
  %1133 = xor i8 %1132, 1
  store i8 %1133, i8* %49, align 1, !tbaa !2445
  %1134 = xor i64 %1121, %1089
  %1135 = xor i64 %1134, %1123
  %1136 = lshr i64 %1135, 4
  %1137 = trunc i64 %1136 to i8
  %1138 = and i8 %1137, 1
  store i8 %1138, i8* %55, align 1, !tbaa !2446
  %1139 = icmp eq i64 %1123, 0
  %1140 = zext i1 %1139 to i8
  store i8 %1140, i8* %58, align 1, !tbaa !2447
  %1141 = lshr i64 %1123, 63
  %1142 = trunc i64 %1141 to i8
  store i8 %1142, i8* %61, align 1, !tbaa !2448
  %1143 = xor i64 %1141, %1107
  %1144 = xor i64 %1141, %1122
  %1145 = add nuw nsw i64 %1143, %1144
  %1146 = icmp eq i64 %1145, 2
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %67, align 1, !tbaa !2449
  %1148 = add i64 %1115, -48
  %1149 = add i64 %776, 295
  store i64 %1149, i64* %PC, align 8
  %1150 = inttoptr i64 %1148 to i32*
  %1151 = load i32, i32* %1150, align 4
  %1152 = sext i32 %1151 to i64
  store i64 %1152, i64* %RCX, align 8, !tbaa !2450
  %1153 = shl nsw i64 %1152, 3
  %1154 = add i64 %1153, %1123
  %1155 = add i64 %776, 300
  store i64 %1155, i64* %PC, align 8
  %1156 = load i64, i64* %148, align 1
  %1157 = inttoptr i64 %1154 to i64*
  store i64 %1156, i64* %1157, align 8
  %1158 = load i64, i64* %RBP, align 8
  %1159 = add i64 %1158, -104
  %1160 = load i64, i64* %PC, align 8
  %1161 = add i64 %1160, 4
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1159 to i64*
  %1163 = load i64, i64* %1162, align 8
  store i64 %1163, i64* %RAX, align 8, !tbaa !2450
  %1164 = add i64 %1158, -188
  %1165 = add i64 %1160, 11
  store i64 %1165, i64* %PC, align 8
  %1166 = inttoptr i64 %1164 to i32*
  %1167 = load i32, i32* %1166, align 4
  %1168 = sext i32 %1167 to i64
  %1169 = mul nsw i64 %1168, 520
  store i64 %1169, i64* %RCX, align 8, !tbaa !2450
  %1170 = lshr i64 %1169, 63
  %1171 = add i64 %1169, %1163
  store i64 %1171, i64* %RAX, align 8, !tbaa !2450
  %1172 = icmp ult i64 %1171, %1163
  %1173 = icmp ult i64 %1171, %1169
  %1174 = or i1 %1172, %1173
  %1175 = zext i1 %1174 to i8
  store i8 %1175, i8* %42, align 1, !tbaa !2428
  %1176 = trunc i64 %1171 to i32
  %1177 = and i32 %1176, 255
  %1178 = tail call i32 @llvm.ctpop.i32(i32 %1177) #10
  %1179 = trunc i32 %1178 to i8
  %1180 = and i8 %1179, 1
  %1181 = xor i8 %1180, 1
  store i8 %1181, i8* %49, align 1, !tbaa !2445
  %1182 = xor i64 %1169, %1163
  %1183 = xor i64 %1182, %1171
  %1184 = lshr i64 %1183, 4
  %1185 = trunc i64 %1184 to i8
  %1186 = and i8 %1185, 1
  store i8 %1186, i8* %55, align 1, !tbaa !2446
  %1187 = icmp eq i64 %1171, 0
  %1188 = zext i1 %1187 to i8
  store i8 %1188, i8* %58, align 1, !tbaa !2447
  %1189 = lshr i64 %1171, 63
  %1190 = trunc i64 %1189 to i8
  store i8 %1190, i8* %61, align 1, !tbaa !2448
  %1191 = lshr i64 %1163, 63
  %1192 = xor i64 %1189, %1191
  %1193 = xor i64 %1189, %1170
  %1194 = add nuw nsw i64 %1192, %1193
  %1195 = icmp eq i64 %1194, 2
  %1196 = zext i1 %1195 to i8
  store i8 %1196, i8* %67, align 1, !tbaa !2449
  %1197 = add i64 %1158, -192
  %1198 = add i64 %1160, 28
  store i64 %1198, i64* %PC, align 8
  %1199 = inttoptr i64 %1197 to i32*
  %1200 = load i32, i32* %1199, align 4
  %1201 = sext i32 %1200 to i64
  store i64 %1201, i64* %RCX, align 8, !tbaa !2450
  %1202 = shl nsw i64 %1201, 3
  %1203 = add i64 %1202, %1171
  %1204 = add i64 %1160, 33
  store i64 %1204, i64* %PC, align 8
  %1205 = inttoptr i64 %1203 to i64*
  %1206 = load i64, i64* %1205, align 8
  store i64 %1206, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1207 = add i64 %1158, -112
  %1208 = add i64 %1160, 37
  store i64 %1208, i64* %PC, align 8
  %1209 = inttoptr i64 %1207 to i64*
  %1210 = load i64, i64* %1209, align 8
  store i64 %1210, i64* %RAX, align 8, !tbaa !2450
  %1211 = add i64 %1160, 44
  store i64 %1211, i64* %PC, align 8
  %1212 = load i32, i32* %1166, align 4
  %1213 = sext i32 %1212 to i64
  %1214 = mul nsw i64 %1213, 33800
  store i64 %1214, i64* %RCX, align 8, !tbaa !2450
  %1215 = lshr i64 %1214, 63
  %1216 = add i64 %1214, %1210
  store i64 %1216, i64* %RAX, align 8, !tbaa !2450
  %1217 = icmp ult i64 %1216, %1210
  %1218 = icmp ult i64 %1216, %1214
  %1219 = or i1 %1217, %1218
  %1220 = zext i1 %1219 to i8
  store i8 %1220, i8* %42, align 1, !tbaa !2428
  %1221 = trunc i64 %1216 to i32
  %1222 = and i32 %1221, 255
  %1223 = tail call i32 @llvm.ctpop.i32(i32 %1222) #10
  %1224 = trunc i32 %1223 to i8
  %1225 = and i8 %1224, 1
  %1226 = xor i8 %1225, 1
  store i8 %1226, i8* %49, align 1, !tbaa !2445
  %1227 = xor i64 %1214, %1210
  %1228 = xor i64 %1227, %1216
  %1229 = lshr i64 %1228, 4
  %1230 = trunc i64 %1229 to i8
  %1231 = and i8 %1230, 1
  store i8 %1231, i8* %55, align 1, !tbaa !2446
  %1232 = icmp eq i64 %1216, 0
  %1233 = zext i1 %1232 to i8
  store i8 %1233, i8* %58, align 1, !tbaa !2447
  %1234 = lshr i64 %1216, 63
  %1235 = trunc i64 %1234 to i8
  store i8 %1235, i8* %61, align 1, !tbaa !2448
  %1236 = lshr i64 %1210, 63
  %1237 = xor i64 %1234, %1236
  %1238 = xor i64 %1234, %1215
  %1239 = add nuw nsw i64 %1237, %1238
  %1240 = icmp eq i64 %1239, 2
  %1241 = zext i1 %1240 to i8
  store i8 %1241, i8* %67, align 1, !tbaa !2449
  %1242 = load i64, i64* %RBP, align 8
  %1243 = add i64 %1242, -192
  %1244 = add i64 %1160, 61
  store i64 %1244, i64* %PC, align 8
  %1245 = inttoptr i64 %1243 to i32*
  %1246 = load i32, i32* %1245, align 4
  %1247 = sext i32 %1246 to i64
  %1248 = mul nsw i64 %1247, 520
  store i64 %1248, i64* %RCX, align 8, !tbaa !2450
  %1249 = lshr i64 %1248, 63
  %1250 = add i64 %1248, %1216
  store i64 %1250, i64* %RAX, align 8, !tbaa !2450
  %1251 = icmp ult i64 %1250, %1216
  %1252 = icmp ult i64 %1250, %1248
  %1253 = or i1 %1251, %1252
  %1254 = zext i1 %1253 to i8
  store i8 %1254, i8* %42, align 1, !tbaa !2428
  %1255 = trunc i64 %1250 to i32
  %1256 = and i32 %1255, 255
  %1257 = tail call i32 @llvm.ctpop.i32(i32 %1256) #10
  %1258 = trunc i32 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = xor i8 %1259, 1
  store i8 %1260, i8* %49, align 1, !tbaa !2445
  %1261 = xor i64 %1248, %1216
  %1262 = xor i64 %1261, %1250
  %1263 = lshr i64 %1262, 4
  %1264 = trunc i64 %1263 to i8
  %1265 = and i8 %1264, 1
  store i8 %1265, i8* %55, align 1, !tbaa !2446
  %1266 = icmp eq i64 %1250, 0
  %1267 = zext i1 %1266 to i8
  store i8 %1267, i8* %58, align 1, !tbaa !2447
  %1268 = lshr i64 %1250, 63
  %1269 = trunc i64 %1268 to i8
  store i8 %1269, i8* %61, align 1, !tbaa !2448
  %1270 = xor i64 %1268, %1234
  %1271 = xor i64 %1268, %1249
  %1272 = add nuw nsw i64 %1270, %1271
  %1273 = icmp eq i64 %1272, 2
  %1274 = zext i1 %1273 to i8
  store i8 %1274, i8* %67, align 1, !tbaa !2449
  %1275 = add i64 %1242, -48
  %1276 = add i64 %1160, 75
  store i64 %1276, i64* %PC, align 8
  %1277 = inttoptr i64 %1275 to i32*
  %1278 = load i32, i32* %1277, align 4
  %1279 = sext i32 %1278 to i64
  store i64 %1279, i64* %RCX, align 8, !tbaa !2450
  %1280 = shl nsw i64 %1279, 3
  %1281 = add i64 %1280, %1250
  %1282 = add i64 %1160, 80
  store i64 %1282, i64* %PC, align 8
  %1283 = load i64, i64* %148, align 1
  %1284 = inttoptr i64 %1281 to i64*
  store i64 %1283, i64* %1284, align 8
  %1285 = load i64, i64* %RBP, align 8
  %1286 = add i64 %1285, -196
  %1287 = load i64, i64* %PC, align 8
  %1288 = add i64 %1287, 10
  store i64 %1288, i64* %PC, align 8
  %1289 = inttoptr i64 %1286 to i32*
  store i32 0, i32* %1289, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_4029e0

block_402373:                                     ; preds = %block_402382, %block_402369
  %1290 = phi i64 [ %4592, %block_402382 ], [ %.pre11, %block_402369 ]
  %1291 = load i64, i64* %RBP, align 8
  %1292 = add i64 %1291, -196
  %1293 = add i64 %1290, 6
  store i64 %1293, i64* %PC, align 8
  %1294 = inttoptr i64 %1292 to i32*
  %1295 = load i32, i32* %1294, align 4
  %1296 = zext i32 %1295 to i64
  store i64 %1296, i64* %RAX, align 8, !tbaa !2450
  %1297 = add i64 %1291, -48
  %1298 = add i64 %1290, 9
  store i64 %1298, i64* %PC, align 8
  %1299 = inttoptr i64 %1297 to i32*
  %1300 = load i32, i32* %1299, align 4
  %1301 = sub i32 %1295, %1300
  %1302 = icmp ult i32 %1295, %1300
  %1303 = zext i1 %1302 to i8
  store i8 %1303, i8* %42, align 1, !tbaa !2428
  %1304 = and i32 %1301, 255
  %1305 = tail call i32 @llvm.ctpop.i32(i32 %1304) #10
  %1306 = trunc i32 %1305 to i8
  %1307 = and i8 %1306, 1
  %1308 = xor i8 %1307, 1
  store i8 %1308, i8* %49, align 1, !tbaa !2445
  %1309 = xor i32 %1300, %1295
  %1310 = xor i32 %1309, %1301
  %1311 = lshr i32 %1310, 4
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  store i8 %1313, i8* %55, align 1, !tbaa !2446
  %1314 = icmp eq i32 %1301, 0
  %1315 = zext i1 %1314 to i8
  store i8 %1315, i8* %58, align 1, !tbaa !2447
  %1316 = lshr i32 %1301, 31
  %1317 = trunc i32 %1316 to i8
  store i8 %1317, i8* %61, align 1, !tbaa !2448
  %1318 = lshr i32 %1295, 31
  %1319 = lshr i32 %1300, 31
  %1320 = xor i32 %1319, %1318
  %1321 = xor i32 %1316, %1318
  %1322 = add nuw nsw i32 %1321, %1320
  %1323 = icmp eq i32 %1322, 2
  %1324 = zext i1 %1323 to i8
  store i8 %1324, i8* %67, align 1, !tbaa !2449
  %1325 = icmp ne i8 %1317, 0
  %1326 = xor i1 %1325, %1323
  %.v13 = select i1 %1326, i64 15, i64 864
  %1327 = add i64 %.v13, %1290
  %1328 = add i64 %1291, -120
  %1329 = add i64 %1327, 4
  store i64 %1329, i64* %PC, align 8
  %1330 = inttoptr i64 %1328 to i64*
  %1331 = load i64, i64* %1330, align 8
  store i64 %1331, i64* %RAX, align 8, !tbaa !2450
  %1332 = add i64 %1291, -188
  %1333 = add i64 %1327, 11
  store i64 %1333, i64* %PC, align 8
  %1334 = inttoptr i64 %1332 to i32*
  %1335 = load i32, i32* %1334, align 4
  %1336 = sext i32 %1335 to i64
  %1337 = mul nsw i64 %1336, 33800
  store i64 %1337, i64* %RCX, align 8, !tbaa !2450
  %1338 = lshr i64 %1337, 63
  %1339 = add i64 %1337, %1331
  store i64 %1339, i64* %RAX, align 8, !tbaa !2450
  %1340 = icmp ult i64 %1339, %1331
  %1341 = icmp ult i64 %1339, %1337
  %1342 = or i1 %1340, %1341
  %1343 = zext i1 %1342 to i8
  store i8 %1343, i8* %42, align 1, !tbaa !2428
  %1344 = trunc i64 %1339 to i32
  %1345 = and i32 %1344, 255
  %1346 = tail call i32 @llvm.ctpop.i32(i32 %1345) #10
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  store i8 %1349, i8* %49, align 1, !tbaa !2445
  %1350 = xor i64 %1337, %1331
  %1351 = xor i64 %1350, %1339
  %1352 = lshr i64 %1351, 4
  %1353 = trunc i64 %1352 to i8
  %1354 = and i8 %1353, 1
  store i8 %1354, i8* %55, align 1, !tbaa !2446
  %1355 = icmp eq i64 %1339, 0
  %1356 = zext i1 %1355 to i8
  store i8 %1356, i8* %58, align 1, !tbaa !2447
  %1357 = lshr i64 %1339, 63
  %1358 = trunc i64 %1357 to i8
  store i8 %1358, i8* %61, align 1, !tbaa !2448
  %1359 = lshr i64 %1331, 63
  %1360 = xor i64 %1357, %1359
  %1361 = xor i64 %1357, %1338
  %1362 = add nuw nsw i64 %1360, %1361
  %1363 = icmp eq i64 %1362, 2
  %1364 = zext i1 %1363 to i8
  store i8 %1364, i8* %67, align 1, !tbaa !2449
  %1365 = add i64 %1291, -192
  %1366 = add i64 %1327, 28
  store i64 %1366, i64* %PC, align 8
  %1367 = inttoptr i64 %1365 to i32*
  %1368 = load i32, i32* %1367, align 4
  %1369 = sext i32 %1368 to i64
  %1370 = mul nsw i64 %1369, 520
  store i64 %1370, i64* %RCX, align 8, !tbaa !2450
  %1371 = lshr i64 %1370, 63
  %1372 = add i64 %1327, 38
  store i64 %1372, i64* %PC, align 8
  %1373 = add i64 %1370, %1339
  store i64 %1373, i64* %RAX, align 8, !tbaa !2450
  %1374 = icmp ult i64 %1373, %1339
  %1375 = icmp ult i64 %1373, %1370
  %1376 = or i1 %1374, %1375
  %1377 = zext i1 %1376 to i8
  store i8 %1377, i8* %42, align 1, !tbaa !2428
  %1378 = trunc i64 %1373 to i32
  %1379 = and i32 %1378, 255
  %1380 = tail call i32 @llvm.ctpop.i32(i32 %1379) #10
  %1381 = trunc i32 %1380 to i8
  %1382 = and i8 %1381, 1
  %1383 = xor i8 %1382, 1
  store i8 %1383, i8* %49, align 1, !tbaa !2445
  %1384 = xor i64 %1370, %1339
  %1385 = xor i64 %1384, %1373
  %1386 = lshr i64 %1385, 4
  %1387 = trunc i64 %1386 to i8
  %1388 = and i8 %1387, 1
  store i8 %1388, i8* %55, align 1, !tbaa !2446
  %1389 = icmp eq i64 %1373, 0
  %1390 = zext i1 %1389 to i8
  store i8 %1390, i8* %58, align 1, !tbaa !2447
  %1391 = lshr i64 %1373, 63
  %1392 = trunc i64 %1391 to i8
  store i8 %1392, i8* %61, align 1, !tbaa !2448
  %1393 = xor i64 %1391, %1357
  %1394 = xor i64 %1391, %1371
  %1395 = add nuw nsw i64 %1393, %1394
  %1396 = icmp eq i64 %1395, 2
  %1397 = zext i1 %1396 to i8
  store i8 %1397, i8* %67, align 1, !tbaa !2449
  br i1 %1326, label %block_402382, label %block_4026d3

block_402ff2:                                     ; preds = %block_40235a
  %1398 = add i64 %263, -188
  %1399 = add i64 %299, 11
  store i64 %1399, i64* %PC, align 8
  %1400 = inttoptr i64 %1398 to i32*
  %1401 = load i32, i32* %1400, align 4
  %1402 = add i32 %1401, 1
  %1403 = zext i32 %1402 to i64
  store i64 %1403, i64* %RAX, align 8, !tbaa !2450
  %1404 = icmp eq i32 %1401, -1
  %1405 = icmp eq i32 %1402, 0
  %1406 = or i1 %1404, %1405
  %1407 = zext i1 %1406 to i8
  store i8 %1407, i8* %42, align 1, !tbaa !2428
  %1408 = and i32 %1402, 255
  %1409 = tail call i32 @llvm.ctpop.i32(i32 %1408) #10
  %1410 = trunc i32 %1409 to i8
  %1411 = and i8 %1410, 1
  %1412 = xor i8 %1411, 1
  store i8 %1412, i8* %49, align 1, !tbaa !2445
  %1413 = xor i32 %1402, %1401
  %1414 = lshr i32 %1413, 4
  %1415 = trunc i32 %1414 to i8
  %1416 = and i8 %1415, 1
  store i8 %1416, i8* %55, align 1, !tbaa !2446
  %1417 = zext i1 %1405 to i8
  store i8 %1417, i8* %58, align 1, !tbaa !2447
  %1418 = lshr i32 %1402, 31
  %1419 = trunc i32 %1418 to i8
  store i8 %1419, i8* %61, align 1, !tbaa !2448
  %1420 = lshr i32 %1401, 31
  %1421 = xor i32 %1418, %1420
  %1422 = add nuw nsw i32 %1421, %1418
  %1423 = icmp eq i32 %1422, 2
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %67, align 1, !tbaa !2449
  %1425 = add i64 %299, 20
  store i64 %1425, i64* %PC, align 8
  store i32 %1402, i32* %1400, align 4
  %1426 = load i64, i64* %PC, align 8
  %1427 = add i64 %1426, -3269
  store i64 %1427, i64* %PC, align 8, !tbaa !2450
  br label %block_402341

block_402350:                                     ; preds = %block_402341
  %1428 = add i64 %4594, -192
  %1429 = add i64 %4630, 10
  store i64 %1429, i64* %PC, align 8
  %1430 = inttoptr i64 %1428 to i32*
  store i32 0, i32* %1430, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_40235a

block_4029ef:                                     ; preds = %block_4029e0
  %1431 = add i64 %4668, 42
  store i64 %1431, i64* %PC, align 8
  %1432 = load i32, i32* %4635, align 4
  %1433 = sext i32 %1432 to i64
  store i64 %1433, i64* %RCX, align 8, !tbaa !2450
  %1434 = shl nsw i64 %1433, 3
  %1435 = add i64 %1434, %4714
  %1436 = add i64 %4668, 47
  store i64 %1436, i64* %PC, align 8
  %1437 = inttoptr i64 %1435 to i64*
  %1438 = load i64, i64* %1437, align 8
  store i64 %1438, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1439 = add i64 %4632, -80
  %1440 = add i64 %4668, 51
  store i64 %1440, i64* %PC, align 8
  %1441 = inttoptr i64 %1439 to i64*
  %1442 = load i64, i64* %1441, align 8
  store i64 %1442, i64* %RAX, align 8, !tbaa !2450
  %1443 = add i64 %4668, 58
  store i64 %1443, i64* %PC, align 8
  %1444 = load i32, i32* %4675, align 4
  %1445 = sext i32 %1444 to i64
  %1446 = mul nsw i64 %1445, 520
  store i64 %1446, i64* %RCX, align 8, !tbaa !2450
  %1447 = lshr i64 %1446, 63
  %1448 = add i64 %1446, %1442
  store i64 %1448, i64* %RAX, align 8, !tbaa !2450
  %1449 = icmp ult i64 %1448, %1442
  %1450 = icmp ult i64 %1448, %1446
  %1451 = or i1 %1449, %1450
  %1452 = zext i1 %1451 to i8
  store i8 %1452, i8* %42, align 1, !tbaa !2428
  %1453 = trunc i64 %1448 to i32
  %1454 = and i32 %1453, 255
  %1455 = tail call i32 @llvm.ctpop.i32(i32 %1454) #10
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  store i8 %1458, i8* %49, align 1, !tbaa !2445
  %1459 = xor i64 %1446, %1442
  %1460 = xor i64 %1459, %1448
  %1461 = lshr i64 %1460, 4
  %1462 = trunc i64 %1461 to i8
  %1463 = and i8 %1462, 1
  store i8 %1463, i8* %55, align 1, !tbaa !2446
  %1464 = icmp eq i64 %1448, 0
  %1465 = zext i1 %1464 to i8
  store i8 %1465, i8* %58, align 1, !tbaa !2447
  %1466 = lshr i64 %1448, 63
  %1467 = trunc i64 %1466 to i8
  store i8 %1467, i8* %61, align 1, !tbaa !2448
  %1468 = lshr i64 %1442, 63
  %1469 = xor i64 %1466, %1468
  %1470 = xor i64 %1466, %1447
  %1471 = add nuw nsw i64 %1469, %1470
  %1472 = icmp eq i64 %1471, 2
  %1473 = zext i1 %1472 to i8
  store i8 %1473, i8* %67, align 1, !tbaa !2449
  %1474 = add i64 %4668, 75
  store i64 %1474, i64* %PC, align 8
  %1475 = load i32, i32* %4635, align 4
  %1476 = sext i32 %1475 to i64
  store i64 %1476, i64* %RCX, align 8, !tbaa !2450
  %1477 = shl nsw i64 %1476, 3
  %1478 = add i64 %1477, %1448
  %1479 = add i64 %4668, 80
  store i64 %1479, i64* %PC, align 8
  %1480 = bitcast i64 %1438 to double
  %1481 = inttoptr i64 %1478 to double*
  %1482 = load double, double* %1481, align 8
  %1483 = fsub double %1480, %1482
  store double %1483, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %1484 = load i64, i64* %RBP, align 8
  %1485 = add i64 %1484, -128
  %1486 = add i64 %4668, 84
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to i64*
  %1488 = load i64, i64* %1487, align 8
  store i64 %1488, i64* %RAX, align 8, !tbaa !2450
  %1489 = add i64 %1484, -188
  %1490 = add i64 %4668, 91
  store i64 %1490, i64* %PC, align 8
  %1491 = inttoptr i64 %1489 to i32*
  %1492 = load i32, i32* %1491, align 4
  %1493 = sext i32 %1492 to i64
  %1494 = mul nsw i64 %1493, 33800
  store i64 %1494, i64* %RCX, align 8, !tbaa !2450
  %1495 = lshr i64 %1494, 63
  %1496 = add i64 %1494, %1488
  store i64 %1496, i64* %RAX, align 8, !tbaa !2450
  %1497 = icmp ult i64 %1496, %1488
  %1498 = icmp ult i64 %1496, %1494
  %1499 = or i1 %1497, %1498
  %1500 = zext i1 %1499 to i8
  store i8 %1500, i8* %42, align 1, !tbaa !2428
  %1501 = trunc i64 %1496 to i32
  %1502 = and i32 %1501, 255
  %1503 = tail call i32 @llvm.ctpop.i32(i32 %1502) #10
  %1504 = trunc i32 %1503 to i8
  %1505 = and i8 %1504, 1
  %1506 = xor i8 %1505, 1
  store i8 %1506, i8* %49, align 1, !tbaa !2445
  %1507 = xor i64 %1494, %1488
  %1508 = xor i64 %1507, %1496
  %1509 = lshr i64 %1508, 4
  %1510 = trunc i64 %1509 to i8
  %1511 = and i8 %1510, 1
  store i8 %1511, i8* %55, align 1, !tbaa !2446
  %1512 = icmp eq i64 %1496, 0
  %1513 = zext i1 %1512 to i8
  store i8 %1513, i8* %58, align 1, !tbaa !2447
  %1514 = lshr i64 %1496, 63
  %1515 = trunc i64 %1514 to i8
  store i8 %1515, i8* %61, align 1, !tbaa !2448
  %1516 = lshr i64 %1488, 63
  %1517 = xor i64 %1514, %1516
  %1518 = xor i64 %1514, %1495
  %1519 = add nuw nsw i64 %1517, %1518
  %1520 = icmp eq i64 %1519, 2
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %67, align 1, !tbaa !2449
  %1522 = add i64 %1484, -52
  %1523 = add i64 %4668, 105
  store i64 %1523, i64* %PC, align 8
  %1524 = inttoptr i64 %1522 to i32*
  %1525 = load i32, i32* %1524, align 4
  %1526 = sext i32 %1525 to i64
  %1527 = mul nsw i64 %1526, 520
  store i64 %1527, i64* %RCX, align 8, !tbaa !2450
  %1528 = lshr i64 %1527, 63
  %1529 = add i64 %1527, %1496
  store i64 %1529, i64* %RAX, align 8, !tbaa !2450
  %1530 = icmp ult i64 %1529, %1496
  %1531 = icmp ult i64 %1529, %1527
  %1532 = or i1 %1530, %1531
  %1533 = zext i1 %1532 to i8
  store i8 %1533, i8* %42, align 1, !tbaa !2428
  %1534 = trunc i64 %1529 to i32
  %1535 = and i32 %1534, 255
  %1536 = tail call i32 @llvm.ctpop.i32(i32 %1535) #10
  %1537 = trunc i32 %1536 to i8
  %1538 = and i8 %1537, 1
  %1539 = xor i8 %1538, 1
  store i8 %1539, i8* %49, align 1, !tbaa !2445
  %1540 = xor i64 %1527, %1496
  %1541 = xor i64 %1540, %1529
  %1542 = lshr i64 %1541, 4
  %1543 = trunc i64 %1542 to i8
  %1544 = and i8 %1543, 1
  store i8 %1544, i8* %55, align 1, !tbaa !2446
  %1545 = icmp eq i64 %1529, 0
  %1546 = zext i1 %1545 to i8
  store i8 %1546, i8* %58, align 1, !tbaa !2447
  %1547 = lshr i64 %1529, 63
  %1548 = trunc i64 %1547 to i8
  store i8 %1548, i8* %61, align 1, !tbaa !2448
  %1549 = xor i64 %1547, %1514
  %1550 = xor i64 %1547, %1528
  %1551 = add nuw nsw i64 %1549, %1550
  %1552 = icmp eq i64 %1551, 2
  %1553 = zext i1 %1552 to i8
  store i8 %1553, i8* %67, align 1, !tbaa !2449
  %1554 = add i64 %1484, -196
  %1555 = add i64 %4668, 121
  store i64 %1555, i64* %PC, align 8
  %1556 = inttoptr i64 %1554 to i32*
  %1557 = load i32, i32* %1556, align 4
  %1558 = add i32 %1557, 1
  %1559 = zext i32 %1558 to i64
  store i64 %1559, i64* %RDX, align 8, !tbaa !2450
  %1560 = icmp eq i32 %1557, -1
  %1561 = icmp eq i32 %1558, 0
  %1562 = or i1 %1560, %1561
  %1563 = zext i1 %1562 to i8
  store i8 %1563, i8* %42, align 1, !tbaa !2428
  %1564 = and i32 %1558, 255
  %1565 = tail call i32 @llvm.ctpop.i32(i32 %1564) #10
  %1566 = trunc i32 %1565 to i8
  %1567 = and i8 %1566, 1
  %1568 = xor i8 %1567, 1
  store i8 %1568, i8* %49, align 1, !tbaa !2445
  %1569 = xor i32 %1558, %1557
  %1570 = lshr i32 %1569, 4
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  store i8 %1572, i8* %55, align 1, !tbaa !2446
  %1573 = zext i1 %1561 to i8
  store i8 %1573, i8* %58, align 1, !tbaa !2447
  %1574 = lshr i32 %1558, 31
  %1575 = trunc i32 %1574 to i8
  store i8 %1575, i8* %61, align 1, !tbaa !2448
  %1576 = lshr i32 %1557, 31
  %1577 = xor i32 %1574, %1576
  %1578 = add nuw nsw i32 %1577, %1574
  %1579 = icmp eq i32 %1578, 2
  %1580 = zext i1 %1579 to i8
  store i8 %1580, i8* %67, align 1, !tbaa !2449
  %1581 = sext i32 %1558 to i64
  store i64 %1581, i64* %RCX, align 8, !tbaa !2450
  %1582 = shl nsw i64 %1581, 3
  %1583 = add i64 %1582, %1529
  %1584 = add i64 %4668, 132
  store i64 %1584, i64* %PC, align 8
  %1585 = load double, double* %257, align 1
  %1586 = inttoptr i64 %1583 to double*
  %1587 = load double, double* %1586, align 8
  %1588 = fadd double %1585, %1587
  store double %1588, double* %257, align 1, !tbaa !2453
  %1589 = add i64 %4668, 136
  store i64 %1589, i64* %PC, align 8
  %1590 = load i64, i64* %1487, align 8
  store i64 %1590, i64* %RAX, align 8, !tbaa !2450
  %1591 = add i64 %4668, 143
  store i64 %1591, i64* %PC, align 8
  %1592 = load i32, i32* %1491, align 4
  %1593 = sext i32 %1592 to i64
  %1594 = mul nsw i64 %1593, 33800
  store i64 %1594, i64* %RCX, align 8, !tbaa !2450
  %1595 = lshr i64 %1594, 63
  %1596 = add i64 %1594, %1590
  store i64 %1596, i64* %RAX, align 8, !tbaa !2450
  %1597 = icmp ult i64 %1596, %1590
  %1598 = icmp ult i64 %1596, %1594
  %1599 = or i1 %1597, %1598
  %1600 = zext i1 %1599 to i8
  store i8 %1600, i8* %42, align 1, !tbaa !2428
  %1601 = trunc i64 %1596 to i32
  %1602 = and i32 %1601, 255
  %1603 = tail call i32 @llvm.ctpop.i32(i32 %1602) #10
  %1604 = trunc i32 %1603 to i8
  %1605 = and i8 %1604, 1
  %1606 = xor i8 %1605, 1
  store i8 %1606, i8* %49, align 1, !tbaa !2445
  %1607 = xor i64 %1594, %1590
  %1608 = xor i64 %1607, %1596
  %1609 = lshr i64 %1608, 4
  %1610 = trunc i64 %1609 to i8
  %1611 = and i8 %1610, 1
  store i8 %1611, i8* %55, align 1, !tbaa !2446
  %1612 = icmp eq i64 %1596, 0
  %1613 = zext i1 %1612 to i8
  store i8 %1613, i8* %58, align 1, !tbaa !2447
  %1614 = lshr i64 %1596, 63
  %1615 = trunc i64 %1614 to i8
  store i8 %1615, i8* %61, align 1, !tbaa !2448
  %1616 = lshr i64 %1590, 63
  %1617 = xor i64 %1614, %1616
  %1618 = xor i64 %1614, %1595
  %1619 = add nuw nsw i64 %1617, %1618
  %1620 = icmp eq i64 %1619, 2
  %1621 = zext i1 %1620 to i8
  store i8 %1621, i8* %67, align 1, !tbaa !2449
  %1622 = load i64, i64* %RBP, align 8
  %1623 = add i64 %1622, -52
  %1624 = add i64 %4668, 157
  store i64 %1624, i64* %PC, align 8
  %1625 = inttoptr i64 %1623 to i32*
  %1626 = load i32, i32* %1625, align 4
  %1627 = sext i32 %1626 to i64
  %1628 = mul nsw i64 %1627, 520
  store i64 %1628, i64* %RCX, align 8, !tbaa !2450
  %1629 = lshr i64 %1628, 63
  %1630 = add i64 %1628, %1596
  store i64 %1630, i64* %RAX, align 8, !tbaa !2450
  %1631 = icmp ult i64 %1630, %1596
  %1632 = icmp ult i64 %1630, %1628
  %1633 = or i1 %1631, %1632
  %1634 = zext i1 %1633 to i8
  store i8 %1634, i8* %42, align 1, !tbaa !2428
  %1635 = trunc i64 %1630 to i32
  %1636 = and i32 %1635, 255
  %1637 = tail call i32 @llvm.ctpop.i32(i32 %1636) #10
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  store i8 %1640, i8* %49, align 1, !tbaa !2445
  %1641 = xor i64 %1628, %1596
  %1642 = xor i64 %1641, %1630
  %1643 = lshr i64 %1642, 4
  %1644 = trunc i64 %1643 to i8
  %1645 = and i8 %1644, 1
  store i8 %1645, i8* %55, align 1, !tbaa !2446
  %1646 = icmp eq i64 %1630, 0
  %1647 = zext i1 %1646 to i8
  store i8 %1647, i8* %58, align 1, !tbaa !2447
  %1648 = lshr i64 %1630, 63
  %1649 = trunc i64 %1648 to i8
  store i8 %1649, i8* %61, align 1, !tbaa !2448
  %1650 = xor i64 %1648, %1614
  %1651 = xor i64 %1648, %1629
  %1652 = add nuw nsw i64 %1650, %1651
  %1653 = icmp eq i64 %1652, 2
  %1654 = zext i1 %1653 to i8
  store i8 %1654, i8* %67, align 1, !tbaa !2449
  %1655 = add i64 %1622, -196
  %1656 = add i64 %4668, 174
  store i64 %1656, i64* %PC, align 8
  %1657 = inttoptr i64 %1655 to i32*
  %1658 = load i32, i32* %1657, align 4
  %1659 = sext i32 %1658 to i64
  store i64 %1659, i64* %RCX, align 8, !tbaa !2450
  %1660 = shl nsw i64 %1659, 3
  %1661 = add i64 %1660, %1630
  %1662 = add i64 %4668, 179
  store i64 %1662, i64* %PC, align 8
  %1663 = inttoptr i64 %1661 to double*
  %1664 = load double, double* %1663, align 8
  %1665 = fsub double %1588, %1664
  store double %1665, double* %257, align 1, !tbaa !2453
  %1666 = add i64 %1622, -96
  %1667 = add i64 %4668, 183
  store i64 %1667, i64* %PC, align 8
  %1668 = inttoptr i64 %1666 to i64*
  %1669 = load i64, i64* %1668, align 8
  store i64 %1669, i64* %RAX, align 8, !tbaa !2450
  %1670 = add i64 %1622, -188
  %1671 = add i64 %4668, 190
  store i64 %1671, i64* %PC, align 8
  %1672 = inttoptr i64 %1670 to i32*
  %1673 = load i32, i32* %1672, align 4
  %1674 = sext i32 %1673 to i64
  %1675 = mul nsw i64 %1674, 520
  store i64 %1675, i64* %RCX, align 8, !tbaa !2450
  %1676 = lshr i64 %1675, 63
  %1677 = add i64 %1675, %1669
  store i64 %1677, i64* %RAX, align 8, !tbaa !2450
  %1678 = icmp ult i64 %1677, %1669
  %1679 = icmp ult i64 %1677, %1675
  %1680 = or i1 %1678, %1679
  %1681 = zext i1 %1680 to i8
  store i8 %1681, i8* %42, align 1, !tbaa !2428
  %1682 = trunc i64 %1677 to i32
  %1683 = and i32 %1682, 255
  %1684 = tail call i32 @llvm.ctpop.i32(i32 %1683) #10
  %1685 = trunc i32 %1684 to i8
  %1686 = and i8 %1685, 1
  %1687 = xor i8 %1686, 1
  store i8 %1687, i8* %49, align 1, !tbaa !2445
  %1688 = xor i64 %1675, %1669
  %1689 = xor i64 %1688, %1677
  %1690 = lshr i64 %1689, 4
  %1691 = trunc i64 %1690 to i8
  %1692 = and i8 %1691, 1
  store i8 %1692, i8* %55, align 1, !tbaa !2446
  %1693 = icmp eq i64 %1677, 0
  %1694 = zext i1 %1693 to i8
  store i8 %1694, i8* %58, align 1, !tbaa !2447
  %1695 = lshr i64 %1677, 63
  %1696 = trunc i64 %1695 to i8
  store i8 %1696, i8* %61, align 1, !tbaa !2448
  %1697 = lshr i64 %1669, 63
  %1698 = xor i64 %1695, %1697
  %1699 = xor i64 %1695, %1676
  %1700 = add nuw nsw i64 %1698, %1699
  %1701 = icmp eq i64 %1700, 2
  %1702 = zext i1 %1701 to i8
  store i8 %1702, i8* %67, align 1, !tbaa !2449
  %1703 = load i64, i64* %RBP, align 8
  %1704 = add i64 %1703, -192
  %1705 = add i64 %4668, 207
  store i64 %1705, i64* %PC, align 8
  %1706 = inttoptr i64 %1704 to i32*
  %1707 = load i32, i32* %1706, align 4
  %1708 = sext i32 %1707 to i64
  store i64 %1708, i64* %RCX, align 8, !tbaa !2450
  %1709 = shl nsw i64 %1708, 3
  %1710 = add i64 %1709, %1677
  %1711 = add i64 %4668, 212
  store i64 %1711, i64* %PC, align 8
  %1712 = inttoptr i64 %1710 to double*
  store double %1665, double* %1712, align 8
  %1713 = load i64, i64* %RBP, align 8
  %1714 = add i64 %1713, -176
  %1715 = load i64, i64* %PC, align 8
  %1716 = add i64 %1715, 7
  store i64 %1716, i64* %PC, align 8
  %1717 = inttoptr i64 %1714 to i64*
  %1718 = load i64, i64* %1717, align 8
  store i64 %1718, i64* %RAX, align 8, !tbaa !2450
  %1719 = add i64 %1713, -52
  %1720 = add i64 %1715, 11
  store i64 %1720, i64* %PC, align 8
  %1721 = inttoptr i64 %1719 to i32*
  %1722 = load i32, i32* %1721, align 4
  %1723 = sext i32 %1722 to i64
  store i64 %1723, i64* %RCX, align 8, !tbaa !2450
  %1724 = shl nsw i64 %1723, 3
  %1725 = add i64 %1724, %1718
  %1726 = add i64 %1715, 16
  store i64 %1726, i64* %PC, align 8
  %1727 = inttoptr i64 %1725 to i64*
  %1728 = load i64, i64* %1727, align 8
  store i64 %1728, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1729 = add i64 %1713, -184
  %1730 = add i64 %1715, 23
  store i64 %1730, i64* %PC, align 8
  %1731 = inttoptr i64 %1729 to i64*
  %1732 = load i64, i64* %1731, align 8
  store i64 %1732, i64* %RAX, align 8, !tbaa !2450
  %1733 = add i64 %1713, -192
  %1734 = add i64 %1715, 30
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to i32*
  %1736 = load i32, i32* %1735, align 4
  %1737 = sext i32 %1736 to i64
  store i64 %1737, i64* %RCX, align 8, !tbaa !2450
  %1738 = shl nsw i64 %1737, 3
  %1739 = add i64 %1738, %1732
  %1740 = add i64 %1715, 35
  store i64 %1740, i64* %PC, align 8
  %1741 = bitcast i64 %1728 to double
  %1742 = inttoptr i64 %1739 to double*
  %1743 = load double, double* %1742, align 8
  %1744 = fdiv double %1741, %1743
  store double %1744, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %1745 = add i64 %1713, -112
  %1746 = add i64 %1715, 39
  store i64 %1746, i64* %PC, align 8
  %1747 = inttoptr i64 %1745 to i64*
  %1748 = load i64, i64* %1747, align 8
  store i64 %1748, i64* %RAX, align 8, !tbaa !2450
  %1749 = add i64 %1713, -188
  %1750 = add i64 %1715, 46
  store i64 %1750, i64* %PC, align 8
  %1751 = inttoptr i64 %1749 to i32*
  %1752 = load i32, i32* %1751, align 4
  %1753 = sext i32 %1752 to i64
  %1754 = mul nsw i64 %1753, 33800
  store i64 %1754, i64* %RCX, align 8, !tbaa !2450
  %1755 = lshr i64 %1754, 63
  %1756 = add i64 %1754, %1748
  store i64 %1756, i64* %RAX, align 8, !tbaa !2450
  %1757 = icmp ult i64 %1756, %1748
  %1758 = icmp ult i64 %1756, %1754
  %1759 = or i1 %1757, %1758
  %1760 = zext i1 %1759 to i8
  store i8 %1760, i8* %42, align 1, !tbaa !2428
  %1761 = trunc i64 %1756 to i32
  %1762 = and i32 %1761, 255
  %1763 = tail call i32 @llvm.ctpop.i32(i32 %1762) #10
  %1764 = trunc i32 %1763 to i8
  %1765 = and i8 %1764, 1
  %1766 = xor i8 %1765, 1
  store i8 %1766, i8* %49, align 1, !tbaa !2445
  %1767 = xor i64 %1754, %1748
  %1768 = xor i64 %1767, %1756
  %1769 = lshr i64 %1768, 4
  %1770 = trunc i64 %1769 to i8
  %1771 = and i8 %1770, 1
  store i8 %1771, i8* %55, align 1, !tbaa !2446
  %1772 = icmp eq i64 %1756, 0
  %1773 = zext i1 %1772 to i8
  store i8 %1773, i8* %58, align 1, !tbaa !2447
  %1774 = lshr i64 %1756, 63
  %1775 = trunc i64 %1774 to i8
  store i8 %1775, i8* %61, align 1, !tbaa !2448
  %1776 = lshr i64 %1748, 63
  %1777 = xor i64 %1774, %1776
  %1778 = xor i64 %1774, %1755
  %1779 = add nuw nsw i64 %1777, %1778
  %1780 = icmp eq i64 %1779, 2
  %1781 = zext i1 %1780 to i8
  store i8 %1781, i8* %67, align 1, !tbaa !2449
  %1782 = add i64 %1715, 63
  store i64 %1782, i64* %PC, align 8
  %1783 = load i32, i32* %1735, align 4
  %1784 = sext i32 %1783 to i64
  %1785 = mul nsw i64 %1784, 520
  store i64 %1785, i64* %RCX, align 8, !tbaa !2450
  %1786 = lshr i64 %1785, 63
  %1787 = add i64 %1785, %1756
  store i64 %1787, i64* %RAX, align 8, !tbaa !2450
  %1788 = icmp ult i64 %1787, %1756
  %1789 = icmp ult i64 %1787, %1785
  %1790 = or i1 %1788, %1789
  %1791 = zext i1 %1790 to i8
  store i8 %1791, i8* %42, align 1, !tbaa !2428
  %1792 = trunc i64 %1787 to i32
  %1793 = and i32 %1792, 255
  %1794 = tail call i32 @llvm.ctpop.i32(i32 %1793) #10
  %1795 = trunc i32 %1794 to i8
  %1796 = and i8 %1795, 1
  %1797 = xor i8 %1796, 1
  store i8 %1797, i8* %49, align 1, !tbaa !2445
  %1798 = xor i64 %1785, %1756
  %1799 = xor i64 %1798, %1787
  %1800 = lshr i64 %1799, 4
  %1801 = trunc i64 %1800 to i8
  %1802 = and i8 %1801, 1
  store i8 %1802, i8* %55, align 1, !tbaa !2446
  %1803 = icmp eq i64 %1787, 0
  %1804 = zext i1 %1803 to i8
  store i8 %1804, i8* %58, align 1, !tbaa !2447
  %1805 = lshr i64 %1787, 63
  %1806 = trunc i64 %1805 to i8
  store i8 %1806, i8* %61, align 1, !tbaa !2448
  %1807 = xor i64 %1805, %1774
  %1808 = xor i64 %1805, %1786
  %1809 = add nuw nsw i64 %1807, %1808
  %1810 = icmp eq i64 %1809, 2
  %1811 = zext i1 %1810 to i8
  store i8 %1811, i8* %67, align 1, !tbaa !2449
  %1812 = add i64 %1713, -196
  %1813 = add i64 %1715, 80
  store i64 %1813, i64* %PC, align 8
  %1814 = inttoptr i64 %1812 to i32*
  %1815 = load i32, i32* %1814, align 4
  %1816 = sext i32 %1815 to i64
  store i64 %1816, i64* %RCX, align 8, !tbaa !2450
  %1817 = shl nsw i64 %1816, 3
  %1818 = add i64 %1817, %1787
  %1819 = add i64 %1715, 85
  store i64 %1819, i64* %PC, align 8
  %1820 = load double, double* %257, align 1
  %1821 = inttoptr i64 %1818 to double*
  %1822 = load double, double* %1821, align 8
  %1823 = fmul double %1820, %1822
  store double %1823, double* %257, align 1, !tbaa !2453
  %1824 = add i64 %1713, -72
  %1825 = add i64 %1715, 90
  store i64 %1825, i64* %PC, align 8
  %1826 = inttoptr i64 %1824 to i64*
  %1827 = load i64, i64* %1826, align 8
  store i64 %1827, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %1828 = add i64 %1715, 97
  store i64 %1828, i64* %PC, align 8
  %1829 = load i64, i64* %1731, align 8
  store i64 %1829, i64* %RAX, align 8, !tbaa !2450
  %1830 = add i64 %1715, 104
  store i64 %1830, i64* %PC, align 8
  %1831 = load i32, i32* %1735, align 4
  %1832 = sext i32 %1831 to i64
  store i64 %1832, i64* %RCX, align 8, !tbaa !2450
  %1833 = shl nsw i64 %1832, 3
  %1834 = add i64 %1833, %1829
  %1835 = add i64 %1715, 109
  store i64 %1835, i64* %PC, align 8
  %1836 = bitcast i64 %1827 to double
  %1837 = inttoptr i64 %1834 to double*
  %1838 = load double, double* %1837, align 8
  %1839 = fdiv double %1836, %1838
  store double %1839, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %1840 = load i64, i64* %RBP, align 8
  %1841 = add i64 %1840, -96
  %1842 = add i64 %1715, 113
  store i64 %1842, i64* %PC, align 8
  %1843 = inttoptr i64 %1841 to i64*
  %1844 = load i64, i64* %1843, align 8
  store i64 %1844, i64* %RAX, align 8, !tbaa !2450
  %1845 = add i64 %1840, -188
  %1846 = add i64 %1715, 120
  store i64 %1846, i64* %PC, align 8
  %1847 = inttoptr i64 %1845 to i32*
  %1848 = load i32, i32* %1847, align 4
  %1849 = sext i32 %1848 to i64
  %1850 = mul nsw i64 %1849, 520
  store i64 %1850, i64* %RCX, align 8, !tbaa !2450
  %1851 = lshr i64 %1850, 63
  %1852 = add i64 %1850, %1844
  store i64 %1852, i64* %RAX, align 8, !tbaa !2450
  %1853 = icmp ult i64 %1852, %1844
  %1854 = icmp ult i64 %1852, %1850
  %1855 = or i1 %1853, %1854
  %1856 = zext i1 %1855 to i8
  store i8 %1856, i8* %42, align 1, !tbaa !2428
  %1857 = trunc i64 %1852 to i32
  %1858 = and i32 %1857, 255
  %1859 = tail call i32 @llvm.ctpop.i32(i32 %1858) #10
  %1860 = trunc i32 %1859 to i8
  %1861 = and i8 %1860, 1
  %1862 = xor i8 %1861, 1
  store i8 %1862, i8* %49, align 1, !tbaa !2445
  %1863 = xor i64 %1850, %1844
  %1864 = xor i64 %1863, %1852
  %1865 = lshr i64 %1864, 4
  %1866 = trunc i64 %1865 to i8
  %1867 = and i8 %1866, 1
  store i8 %1867, i8* %55, align 1, !tbaa !2446
  %1868 = icmp eq i64 %1852, 0
  %1869 = zext i1 %1868 to i8
  store i8 %1869, i8* %58, align 1, !tbaa !2447
  %1870 = lshr i64 %1852, 63
  %1871 = trunc i64 %1870 to i8
  store i8 %1871, i8* %61, align 1, !tbaa !2448
  %1872 = lshr i64 %1844, 63
  %1873 = xor i64 %1870, %1872
  %1874 = xor i64 %1870, %1851
  %1875 = add nuw nsw i64 %1873, %1874
  %1876 = icmp eq i64 %1875, 2
  %1877 = zext i1 %1876 to i8
  store i8 %1877, i8* %67, align 1, !tbaa !2449
  %1878 = add i64 %1840, -192
  %1879 = add i64 %1715, 137
  store i64 %1879, i64* %PC, align 8
  %1880 = inttoptr i64 %1878 to i32*
  %1881 = load i32, i32* %1880, align 4
  %1882 = sext i32 %1881 to i64
  store i64 %1882, i64* %RCX, align 8, !tbaa !2450
  %1883 = shl nsw i64 %1882, 3
  %1884 = add i64 %1883, %1852
  %1885 = add i64 %1715, 142
  store i64 %1885, i64* %PC, align 8
  %1886 = inttoptr i64 %1884 to double*
  %1887 = load double, double* %1886, align 8
  %1888 = fmul double %1839, %1887
  store double %1888, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %1889 = fsub double %1823, %1888
  store double %1889, double* %257, align 1, !tbaa !2453
  %1890 = add i64 %1840, -104
  %1891 = add i64 %1715, 150
  store i64 %1891, i64* %PC, align 8
  %1892 = inttoptr i64 %1890 to i64*
  %1893 = load i64, i64* %1892, align 8
  store i64 %1893, i64* %RAX, align 8, !tbaa !2450
  %1894 = add i64 %1715, 157
  store i64 %1894, i64* %PC, align 8
  %1895 = load i32, i32* %1847, align 4
  %1896 = sext i32 %1895 to i64
  %1897 = mul nsw i64 %1896, 520
  store i64 %1897, i64* %RCX, align 8, !tbaa !2450
  %1898 = lshr i64 %1897, 63
  %1899 = add i64 %1897, %1893
  store i64 %1899, i64* %RAX, align 8, !tbaa !2450
  %1900 = icmp ult i64 %1899, %1893
  %1901 = icmp ult i64 %1899, %1897
  %1902 = or i1 %1900, %1901
  %1903 = zext i1 %1902 to i8
  store i8 %1903, i8* %42, align 1, !tbaa !2428
  %1904 = trunc i64 %1899 to i32
  %1905 = and i32 %1904, 255
  %1906 = tail call i32 @llvm.ctpop.i32(i32 %1905) #10
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  %1909 = xor i8 %1908, 1
  store i8 %1909, i8* %49, align 1, !tbaa !2445
  %1910 = xor i64 %1897, %1893
  %1911 = xor i64 %1910, %1899
  %1912 = lshr i64 %1911, 4
  %1913 = trunc i64 %1912 to i8
  %1914 = and i8 %1913, 1
  store i8 %1914, i8* %55, align 1, !tbaa !2446
  %1915 = icmp eq i64 %1899, 0
  %1916 = zext i1 %1915 to i8
  store i8 %1916, i8* %58, align 1, !tbaa !2447
  %1917 = lshr i64 %1899, 63
  %1918 = trunc i64 %1917 to i8
  store i8 %1918, i8* %61, align 1, !tbaa !2448
  %1919 = lshr i64 %1893, 63
  %1920 = xor i64 %1917, %1919
  %1921 = xor i64 %1917, %1898
  %1922 = add nuw nsw i64 %1920, %1921
  %1923 = icmp eq i64 %1922, 2
  %1924 = zext i1 %1923 to i8
  store i8 %1924, i8* %67, align 1, !tbaa !2449
  %1925 = add i64 %1715, 174
  store i64 %1925, i64* %PC, align 8
  %1926 = load i32, i32* %1880, align 4
  %1927 = sext i32 %1926 to i64
  store i64 %1927, i64* %RCX, align 8, !tbaa !2450
  %1928 = shl nsw i64 %1927, 3
  %1929 = add i64 %1928, %1899
  %1930 = add i64 %1715, 179
  store i64 %1930, i64* %PC, align 8
  %1931 = inttoptr i64 %1929 to double*
  store double %1889, double* %1931, align 8
  %1932 = load i64, i64* %RBP, align 8
  %1933 = add i64 %1932, -160
  %1934 = load i64, i64* %PC, align 8
  %1935 = add i64 %1934, 7
  store i64 %1935, i64* %PC, align 8
  %1936 = inttoptr i64 %1933 to i64*
  %1937 = load i64, i64* %1936, align 8
  store i64 %1937, i64* %RAX, align 8, !tbaa !2450
  %1938 = add i64 %1932, -196
  %1939 = add i64 %1934, 14
  store i64 %1939, i64* %PC, align 8
  %1940 = inttoptr i64 %1938 to i32*
  %1941 = load i32, i32* %1940, align 4
  %1942 = sext i32 %1941 to i64
  store i64 %1942, i64* %RCX, align 8, !tbaa !2450
  %1943 = shl nsw i64 %1942, 3
  %1944 = add i64 %1943, %1937
  %1945 = add i64 %1934, 19
  store i64 %1945, i64* %PC, align 8
  %1946 = inttoptr i64 %1944 to i64*
  %1947 = load i64, i64* %1946, align 8
  store i64 %1947, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1948 = add i64 %1932, -168
  %1949 = add i64 %1934, 26
  store i64 %1949, i64* %PC, align 8
  %1950 = inttoptr i64 %1948 to i64*
  %1951 = load i64, i64* %1950, align 8
  store i64 %1951, i64* %RAX, align 8, !tbaa !2450
  %1952 = add i64 %1934, 33
  store i64 %1952, i64* %PC, align 8
  %1953 = load i32, i32* %1940, align 4
  %1954 = sext i32 %1953 to i64
  store i64 %1954, i64* %RCX, align 8, !tbaa !2450
  %1955 = shl nsw i64 %1954, 3
  %1956 = add i64 %1955, %1951
  %1957 = add i64 %1934, 38
  store i64 %1957, i64* %PC, align 8
  %1958 = bitcast i64 %1947 to double
  %1959 = inttoptr i64 %1956 to double*
  %1960 = load double, double* %1959, align 8
  %1961 = fdiv double %1958, %1960
  store double %1961, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %1962 = add i64 %1932, -136
  %1963 = add i64 %1934, 45
  store i64 %1963, i64* %PC, align 8
  %1964 = inttoptr i64 %1962 to i64*
  %1965 = load i64, i64* %1964, align 8
  store i64 %1965, i64* %RAX, align 8, !tbaa !2450
  %1966 = add i64 %1932, -188
  %1967 = add i64 %1934, 52
  store i64 %1967, i64* %PC, align 8
  %1968 = inttoptr i64 %1966 to i32*
  %1969 = load i32, i32* %1968, align 4
  %1970 = sext i32 %1969 to i64
  %1971 = mul nsw i64 %1970, 33800
  store i64 %1971, i64* %RCX, align 8, !tbaa !2450
  %1972 = lshr i64 %1971, 63
  %1973 = add i64 %1971, %1965
  store i64 %1973, i64* %RAX, align 8, !tbaa !2450
  %1974 = icmp ult i64 %1973, %1965
  %1975 = icmp ult i64 %1973, %1971
  %1976 = or i1 %1974, %1975
  %1977 = zext i1 %1976 to i8
  store i8 %1977, i8* %42, align 1, !tbaa !2428
  %1978 = trunc i64 %1973 to i32
  %1979 = and i32 %1978, 255
  %1980 = tail call i32 @llvm.ctpop.i32(i32 %1979) #10
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  store i8 %1983, i8* %49, align 1, !tbaa !2445
  %1984 = xor i64 %1971, %1965
  %1985 = xor i64 %1984, %1973
  %1986 = lshr i64 %1985, 4
  %1987 = trunc i64 %1986 to i8
  %1988 = and i8 %1987, 1
  store i8 %1988, i8* %55, align 1, !tbaa !2446
  %1989 = icmp eq i64 %1973, 0
  %1990 = zext i1 %1989 to i8
  store i8 %1990, i8* %58, align 1, !tbaa !2447
  %1991 = lshr i64 %1973, 63
  %1992 = trunc i64 %1991 to i8
  store i8 %1992, i8* %61, align 1, !tbaa !2448
  %1993 = lshr i64 %1965, 63
  %1994 = xor i64 %1991, %1993
  %1995 = xor i64 %1991, %1972
  %1996 = add nuw nsw i64 %1994, %1995
  %1997 = icmp eq i64 %1996, 2
  %1998 = zext i1 %1997 to i8
  store i8 %1998, i8* %67, align 1, !tbaa !2449
  %1999 = add i64 %1932, -52
  %2000 = add i64 %1934, 66
  store i64 %2000, i64* %PC, align 8
  %2001 = inttoptr i64 %1999 to i32*
  %2002 = load i32, i32* %2001, align 4
  %2003 = sext i32 %2002 to i64
  %2004 = mul nsw i64 %2003, 520
  store i64 %2004, i64* %RCX, align 8, !tbaa !2450
  %2005 = lshr i64 %2004, 63
  %2006 = add i64 %2004, %1973
  store i64 %2006, i64* %RAX, align 8, !tbaa !2450
  %2007 = icmp ult i64 %2006, %1973
  %2008 = icmp ult i64 %2006, %2004
  %2009 = or i1 %2007, %2008
  %2010 = zext i1 %2009 to i8
  store i8 %2010, i8* %42, align 1, !tbaa !2428
  %2011 = trunc i64 %2006 to i32
  %2012 = and i32 %2011, 255
  %2013 = tail call i32 @llvm.ctpop.i32(i32 %2012) #10
  %2014 = trunc i32 %2013 to i8
  %2015 = and i8 %2014, 1
  %2016 = xor i8 %2015, 1
  store i8 %2016, i8* %49, align 1, !tbaa !2445
  %2017 = xor i64 %2004, %1973
  %2018 = xor i64 %2017, %2006
  %2019 = lshr i64 %2018, 4
  %2020 = trunc i64 %2019 to i8
  %2021 = and i8 %2020, 1
  store i8 %2021, i8* %55, align 1, !tbaa !2446
  %2022 = icmp eq i64 %2006, 0
  %2023 = zext i1 %2022 to i8
  store i8 %2023, i8* %58, align 1, !tbaa !2447
  %2024 = lshr i64 %2006, 63
  %2025 = trunc i64 %2024 to i8
  store i8 %2025, i8* %61, align 1, !tbaa !2448
  %2026 = xor i64 %2024, %1991
  %2027 = xor i64 %2024, %2005
  %2028 = add nuw nsw i64 %2026, %2027
  %2029 = icmp eq i64 %2028, 2
  %2030 = zext i1 %2029 to i8
  store i8 %2030, i8* %67, align 1, !tbaa !2449
  %2031 = add i64 %1934, 83
  store i64 %2031, i64* %PC, align 8
  %2032 = load i32, i32* %1940, align 4
  %2033 = sext i32 %2032 to i64
  store i64 %2033, i64* %RCX, align 8, !tbaa !2450
  %2034 = shl nsw i64 %2033, 3
  %2035 = add i64 %2034, %2006
  %2036 = add i64 %1934, 88
  store i64 %2036, i64* %PC, align 8
  %2037 = load double, double* %257, align 1
  %2038 = inttoptr i64 %2035 to double*
  %2039 = load double, double* %2038, align 8
  %2040 = fmul double %2037, %2039
  store double %2040, double* %257, align 1, !tbaa !2453
  %2041 = add i64 %1932, -64
  %2042 = add i64 %1934, 93
  store i64 %2042, i64* %PC, align 8
  %2043 = inttoptr i64 %2041 to i64*
  %2044 = load i64, i64* %2043, align 8
  store i64 %2044, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %2045 = add i64 %1932, -152
  %2046 = add i64 %1934, 100
  store i64 %2046, i64* %PC, align 8
  %2047 = inttoptr i64 %2045 to i64*
  %2048 = load i64, i64* %2047, align 8
  store i64 %2048, i64* %RAX, align 8, !tbaa !2450
  %2049 = add i64 %1934, 107
  store i64 %2049, i64* %PC, align 8
  %2050 = load i32, i32* %1968, align 4
  %2051 = sext i32 %2050 to i64
  store i64 %2051, i64* %RCX, align 8, !tbaa !2450
  %2052 = shl nsw i64 %2051, 3
  %2053 = add i64 %2052, %2048
  %2054 = add i64 %1934, 112
  store i64 %2054, i64* %PC, align 8
  %2055 = bitcast i64 %2044 to double
  %2056 = inttoptr i64 %2053 to double*
  %2057 = load double, double* %2056, align 8
  %2058 = fmul double %2055, %2057
  store double %2058, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2059 = load i64, i64* %RBP, align 8
  %2060 = add i64 %2059, -168
  %2061 = add i64 %1934, 119
  store i64 %2061, i64* %PC, align 8
  %2062 = inttoptr i64 %2060 to i64*
  %2063 = load i64, i64* %2062, align 8
  store i64 %2063, i64* %RAX, align 8, !tbaa !2450
  %2064 = add i64 %2059, -196
  %2065 = add i64 %1934, 126
  store i64 %2065, i64* %PC, align 8
  %2066 = inttoptr i64 %2064 to i32*
  %2067 = load i32, i32* %2066, align 4
  %2068 = sext i32 %2067 to i64
  store i64 %2068, i64* %RCX, align 8, !tbaa !2450
  %2069 = shl nsw i64 %2068, 3
  %2070 = add i64 %2069, %2063
  %2071 = add i64 %1934, 131
  store i64 %2071, i64* %PC, align 8
  %2072 = inttoptr i64 %2070 to double*
  %2073 = load double, double* %2072, align 8
  %2074 = fdiv double %2058, %2073
  store double %2074, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2075 = add i64 %2059, -104
  %2076 = add i64 %1934, 135
  store i64 %2076, i64* %PC, align 8
  %2077 = inttoptr i64 %2075 to i64*
  %2078 = load i64, i64* %2077, align 8
  store i64 %2078, i64* %RAX, align 8, !tbaa !2450
  %2079 = add i64 %2059, -188
  %2080 = add i64 %1934, 142
  store i64 %2080, i64* %PC, align 8
  %2081 = inttoptr i64 %2079 to i32*
  %2082 = load i32, i32* %2081, align 4
  %2083 = sext i32 %2082 to i64
  %2084 = mul nsw i64 %2083, 520
  store i64 %2084, i64* %RCX, align 8, !tbaa !2450
  %2085 = lshr i64 %2084, 63
  %2086 = add i64 %2084, %2078
  store i64 %2086, i64* %RAX, align 8, !tbaa !2450
  %2087 = icmp ult i64 %2086, %2078
  %2088 = icmp ult i64 %2086, %2084
  %2089 = or i1 %2087, %2088
  %2090 = zext i1 %2089 to i8
  store i8 %2090, i8* %42, align 1, !tbaa !2428
  %2091 = trunc i64 %2086 to i32
  %2092 = and i32 %2091, 255
  %2093 = tail call i32 @llvm.ctpop.i32(i32 %2092) #10
  %2094 = trunc i32 %2093 to i8
  %2095 = and i8 %2094, 1
  %2096 = xor i8 %2095, 1
  store i8 %2096, i8* %49, align 1, !tbaa !2445
  %2097 = xor i64 %2084, %2078
  %2098 = xor i64 %2097, %2086
  %2099 = lshr i64 %2098, 4
  %2100 = trunc i64 %2099 to i8
  %2101 = and i8 %2100, 1
  store i8 %2101, i8* %55, align 1, !tbaa !2446
  %2102 = icmp eq i64 %2086, 0
  %2103 = zext i1 %2102 to i8
  store i8 %2103, i8* %58, align 1, !tbaa !2447
  %2104 = lshr i64 %2086, 63
  %2105 = trunc i64 %2104 to i8
  store i8 %2105, i8* %61, align 1, !tbaa !2448
  %2106 = lshr i64 %2078, 63
  %2107 = xor i64 %2104, %2106
  %2108 = xor i64 %2104, %2085
  %2109 = add nuw nsw i64 %2107, %2108
  %2110 = icmp eq i64 %2109, 2
  %2111 = zext i1 %2110 to i8
  store i8 %2111, i8* %67, align 1, !tbaa !2449
  %2112 = add i64 %2059, -192
  %2113 = add i64 %1934, 159
  store i64 %2113, i64* %PC, align 8
  %2114 = inttoptr i64 %2112 to i32*
  %2115 = load i32, i32* %2114, align 4
  %2116 = sext i32 %2115 to i64
  store i64 %2116, i64* %RCX, align 8, !tbaa !2450
  %2117 = shl nsw i64 %2116, 3
  %2118 = add i64 %2117, %2086
  %2119 = add i64 %1934, 164
  store i64 %2119, i64* %PC, align 8
  %2120 = inttoptr i64 %2118 to double*
  %2121 = load double, double* %2120, align 8
  %2122 = fmul double %2074, %2121
  store double %2122, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2123 = load double, double* %257, align 1
  %2124 = fadd double %2122, %2123
  store double %2124, double* %257, align 1, !tbaa !2453
  %2125 = add i64 %2059, -64
  %2126 = add i64 %1934, 173
  store i64 %2126, i64* %PC, align 8
  %2127 = inttoptr i64 %2125 to i64*
  %2128 = load i64, i64* %2127, align 8
  store i64 %2128, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %2129 = add i64 %2059, -144
  %2130 = add i64 %1934, 180
  store i64 %2130, i64* %PC, align 8
  %2131 = inttoptr i64 %2129 to i64*
  %2132 = load i64, i64* %2131, align 8
  store i64 %2132, i64* %RAX, align 8, !tbaa !2450
  %2133 = add i64 %1934, 187
  store i64 %2133, i64* %PC, align 8
  %2134 = load i32, i32* %2081, align 4
  %2135 = sext i32 %2134 to i64
  store i64 %2135, i64* %RCX, align 8, !tbaa !2450
  %2136 = shl nsw i64 %2135, 3
  %2137 = add i64 %2136, %2132
  %2138 = add i64 %1934, 192
  store i64 %2138, i64* %PC, align 8
  %2139 = bitcast i64 %2128 to double
  %2140 = inttoptr i64 %2137 to double*
  %2141 = load double, double* %2140, align 8
  %2142 = fmul double %2139, %2141
  store double %2142, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2143 = add i64 %1934, 199
  store i64 %2143, i64* %PC, align 8
  %2144 = load i64, i64* %2062, align 8
  store i64 %2144, i64* %RAX, align 8, !tbaa !2450
  %2145 = add i64 %1934, 206
  store i64 %2145, i64* %PC, align 8
  %2146 = load i32, i32* %2066, align 4
  %2147 = sext i32 %2146 to i64
  store i64 %2147, i64* %RCX, align 8, !tbaa !2450
  %2148 = shl nsw i64 %2147, 3
  %2149 = add i64 %2148, %2144
  %2150 = add i64 %1934, 211
  store i64 %2150, i64* %PC, align 8
  %2151 = inttoptr i64 %2149 to double*
  %2152 = load double, double* %2151, align 8
  %2153 = fdiv double %2142, %2152
  store double %2153, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2154 = add i64 %2059, -112
  %2155 = add i64 %1934, 215
  store i64 %2155, i64* %PC, align 8
  %2156 = inttoptr i64 %2154 to i64*
  %2157 = load i64, i64* %2156, align 8
  store i64 %2157, i64* %RAX, align 8, !tbaa !2450
  %2158 = add i64 %1934, 222
  store i64 %2158, i64* %PC, align 8
  %2159 = load i32, i32* %2081, align 4
  %2160 = sext i32 %2159 to i64
  %2161 = mul nsw i64 %2160, 33800
  store i64 %2161, i64* %RCX, align 8, !tbaa !2450
  %2162 = lshr i64 %2161, 63
  %2163 = add i64 %2161, %2157
  store i64 %2163, i64* %RAX, align 8, !tbaa !2450
  %2164 = icmp ult i64 %2163, %2157
  %2165 = icmp ult i64 %2163, %2161
  %2166 = or i1 %2164, %2165
  %2167 = zext i1 %2166 to i8
  store i8 %2167, i8* %42, align 1, !tbaa !2428
  %2168 = trunc i64 %2163 to i32
  %2169 = and i32 %2168, 255
  %2170 = tail call i32 @llvm.ctpop.i32(i32 %2169) #10
  %2171 = trunc i32 %2170 to i8
  %2172 = and i8 %2171, 1
  %2173 = xor i8 %2172, 1
  store i8 %2173, i8* %49, align 1, !tbaa !2445
  %2174 = xor i64 %2161, %2157
  %2175 = xor i64 %2174, %2163
  %2176 = lshr i64 %2175, 4
  %2177 = trunc i64 %2176 to i8
  %2178 = and i8 %2177, 1
  store i8 %2178, i8* %55, align 1, !tbaa !2446
  %2179 = icmp eq i64 %2163, 0
  %2180 = zext i1 %2179 to i8
  store i8 %2180, i8* %58, align 1, !tbaa !2447
  %2181 = lshr i64 %2163, 63
  %2182 = trunc i64 %2181 to i8
  store i8 %2182, i8* %61, align 1, !tbaa !2448
  %2183 = lshr i64 %2157, 63
  %2184 = xor i64 %2181, %2183
  %2185 = xor i64 %2181, %2162
  %2186 = add nuw nsw i64 %2184, %2185
  %2187 = icmp eq i64 %2186, 2
  %2188 = zext i1 %2187 to i8
  store i8 %2188, i8* %67, align 1, !tbaa !2449
  %2189 = load i64, i64* %RBP, align 8
  %2190 = add i64 %2189, -52
  %2191 = add i64 %1934, 236
  store i64 %2191, i64* %PC, align 8
  %2192 = inttoptr i64 %2190 to i32*
  %2193 = load i32, i32* %2192, align 4
  %2194 = sext i32 %2193 to i64
  %2195 = mul nsw i64 %2194, 520
  store i64 %2195, i64* %RCX, align 8, !tbaa !2450
  %2196 = lshr i64 %2195, 63
  %2197 = add i64 %2195, %2163
  store i64 %2197, i64* %RAX, align 8, !tbaa !2450
  %2198 = icmp ult i64 %2197, %2163
  %2199 = icmp ult i64 %2197, %2195
  %2200 = or i1 %2198, %2199
  %2201 = zext i1 %2200 to i8
  store i8 %2201, i8* %42, align 1, !tbaa !2428
  %2202 = trunc i64 %2197 to i32
  %2203 = and i32 %2202, 255
  %2204 = tail call i32 @llvm.ctpop.i32(i32 %2203) #10
  %2205 = trunc i32 %2204 to i8
  %2206 = and i8 %2205, 1
  %2207 = xor i8 %2206, 1
  store i8 %2207, i8* %49, align 1, !tbaa !2445
  %2208 = xor i64 %2195, %2163
  %2209 = xor i64 %2208, %2197
  %2210 = lshr i64 %2209, 4
  %2211 = trunc i64 %2210 to i8
  %2212 = and i8 %2211, 1
  store i8 %2212, i8* %55, align 1, !tbaa !2446
  %2213 = icmp eq i64 %2197, 0
  %2214 = zext i1 %2213 to i8
  store i8 %2214, i8* %58, align 1, !tbaa !2447
  %2215 = lshr i64 %2197, 63
  %2216 = trunc i64 %2215 to i8
  store i8 %2216, i8* %61, align 1, !tbaa !2448
  %2217 = xor i64 %2215, %2181
  %2218 = xor i64 %2215, %2196
  %2219 = add nuw nsw i64 %2217, %2218
  %2220 = icmp eq i64 %2219, 2
  %2221 = zext i1 %2220 to i8
  store i8 %2221, i8* %67, align 1, !tbaa !2449
  %2222 = add i64 %2189, -196
  %2223 = add i64 %1934, 253
  store i64 %2223, i64* %PC, align 8
  %2224 = inttoptr i64 %2222 to i32*
  %2225 = load i32, i32* %2224, align 4
  %2226 = sext i32 %2225 to i64
  store i64 %2226, i64* %RCX, align 8, !tbaa !2450
  %2227 = shl nsw i64 %2226, 3
  %2228 = add i64 %2227, %2197
  %2229 = add i64 %1934, 258
  store i64 %2229, i64* %PC, align 8
  %2230 = load double, double* %155, align 1
  %2231 = inttoptr i64 %2228 to double*
  %2232 = load double, double* %2231, align 8
  %2233 = fmul double %2230, %2232
  store double %2233, double* %155, align 1, !tbaa !2453
  %2234 = load double, double* %257, align 1
  %2235 = fsub double %2234, %2233
  store double %2235, double* %257, align 1, !tbaa !2453
  %2236 = add i64 %2189, -136
  %2237 = add i64 %1934, 269
  store i64 %2237, i64* %PC, align 8
  %2238 = inttoptr i64 %2236 to i64*
  %2239 = load i64, i64* %2238, align 8
  store i64 %2239, i64* %RAX, align 8, !tbaa !2450
  %2240 = add i64 %2189, -188
  %2241 = add i64 %1934, 276
  store i64 %2241, i64* %PC, align 8
  %2242 = inttoptr i64 %2240 to i32*
  %2243 = load i32, i32* %2242, align 4
  %2244 = sext i32 %2243 to i64
  %2245 = mul nsw i64 %2244, 33800
  store i64 %2245, i64* %RCX, align 8, !tbaa !2450
  %2246 = lshr i64 %2245, 63
  %2247 = add i64 %2245, %2239
  store i64 %2247, i64* %RAX, align 8, !tbaa !2450
  %2248 = icmp ult i64 %2247, %2239
  %2249 = icmp ult i64 %2247, %2245
  %2250 = or i1 %2248, %2249
  %2251 = zext i1 %2250 to i8
  store i8 %2251, i8* %42, align 1, !tbaa !2428
  %2252 = trunc i64 %2247 to i32
  %2253 = and i32 %2252, 255
  %2254 = tail call i32 @llvm.ctpop.i32(i32 %2253) #10
  %2255 = trunc i32 %2254 to i8
  %2256 = and i8 %2255, 1
  %2257 = xor i8 %2256, 1
  store i8 %2257, i8* %49, align 1, !tbaa !2445
  %2258 = xor i64 %2245, %2239
  %2259 = xor i64 %2258, %2247
  %2260 = lshr i64 %2259, 4
  %2261 = trunc i64 %2260 to i8
  %2262 = and i8 %2261, 1
  store i8 %2262, i8* %55, align 1, !tbaa !2446
  %2263 = icmp eq i64 %2247, 0
  %2264 = zext i1 %2263 to i8
  store i8 %2264, i8* %58, align 1, !tbaa !2447
  %2265 = lshr i64 %2247, 63
  %2266 = trunc i64 %2265 to i8
  store i8 %2266, i8* %61, align 1, !tbaa !2448
  %2267 = lshr i64 %2239, 63
  %2268 = xor i64 %2265, %2267
  %2269 = xor i64 %2265, %2246
  %2270 = add nuw nsw i64 %2268, %2269
  %2271 = icmp eq i64 %2270, 2
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* %67, align 1, !tbaa !2449
  %2273 = load i64, i64* %RBP, align 8
  %2274 = add i64 %2273, -52
  %2275 = add i64 %1934, 290
  store i64 %2275, i64* %PC, align 8
  %2276 = inttoptr i64 %2274 to i32*
  %2277 = load i32, i32* %2276, align 4
  %2278 = sext i32 %2277 to i64
  %2279 = mul nsw i64 %2278, 520
  store i64 %2279, i64* %RCX, align 8, !tbaa !2450
  %2280 = lshr i64 %2279, 63
  %2281 = add i64 %2279, %2247
  store i64 %2281, i64* %RAX, align 8, !tbaa !2450
  %2282 = icmp ult i64 %2281, %2247
  %2283 = icmp ult i64 %2281, %2279
  %2284 = or i1 %2282, %2283
  %2285 = zext i1 %2284 to i8
  store i8 %2285, i8* %42, align 1, !tbaa !2428
  %2286 = trunc i64 %2281 to i32
  %2287 = and i32 %2286, 255
  %2288 = tail call i32 @llvm.ctpop.i32(i32 %2287) #10
  %2289 = trunc i32 %2288 to i8
  %2290 = and i8 %2289, 1
  %2291 = xor i8 %2290, 1
  store i8 %2291, i8* %49, align 1, !tbaa !2445
  %2292 = xor i64 %2279, %2247
  %2293 = xor i64 %2292, %2281
  %2294 = lshr i64 %2293, 4
  %2295 = trunc i64 %2294 to i8
  %2296 = and i8 %2295, 1
  store i8 %2296, i8* %55, align 1, !tbaa !2446
  %2297 = icmp eq i64 %2281, 0
  %2298 = zext i1 %2297 to i8
  store i8 %2298, i8* %58, align 1, !tbaa !2447
  %2299 = lshr i64 %2281, 63
  %2300 = trunc i64 %2299 to i8
  store i8 %2300, i8* %61, align 1, !tbaa !2448
  %2301 = xor i64 %2299, %2265
  %2302 = xor i64 %2299, %2280
  %2303 = add nuw nsw i64 %2301, %2302
  %2304 = icmp eq i64 %2303, 2
  %2305 = zext i1 %2304 to i8
  store i8 %2305, i8* %67, align 1, !tbaa !2449
  %2306 = add i64 %2273, -196
  %2307 = add i64 %1934, 307
  store i64 %2307, i64* %PC, align 8
  %2308 = inttoptr i64 %2306 to i32*
  %2309 = load i32, i32* %2308, align 4
  %2310 = sext i32 %2309 to i64
  store i64 %2310, i64* %RCX, align 8, !tbaa !2450
  %2311 = shl nsw i64 %2310, 3
  %2312 = add i64 %2311, %2281
  %2313 = add i64 %1934, 312
  store i64 %2313, i64* %PC, align 8
  %2314 = load i64, i64* %148, align 1
  %2315 = inttoptr i64 %2312 to i64*
  store i64 %2314, i64* %2315, align 8
  %2316 = load i64, i64* %RBP, align 8
  %2317 = add i64 %2316, -104
  %2318 = load i64, i64* %PC, align 8
  %2319 = add i64 %2318, 4
  store i64 %2319, i64* %PC, align 8
  %2320 = inttoptr i64 %2317 to i64*
  %2321 = load i64, i64* %2320, align 8
  store i64 %2321, i64* %RAX, align 8, !tbaa !2450
  %2322 = add i64 %2316, -188
  %2323 = add i64 %2318, 11
  store i64 %2323, i64* %PC, align 8
  %2324 = inttoptr i64 %2322 to i32*
  %2325 = load i32, i32* %2324, align 4
  %2326 = sext i32 %2325 to i64
  %2327 = mul nsw i64 %2326, 520
  store i64 %2327, i64* %RCX, align 8, !tbaa !2450
  %2328 = lshr i64 %2327, 63
  %2329 = add i64 %2327, %2321
  store i64 %2329, i64* %RAX, align 8, !tbaa !2450
  %2330 = icmp ult i64 %2329, %2321
  %2331 = icmp ult i64 %2329, %2327
  %2332 = or i1 %2330, %2331
  %2333 = zext i1 %2332 to i8
  store i8 %2333, i8* %42, align 1, !tbaa !2428
  %2334 = trunc i64 %2329 to i32
  %2335 = and i32 %2334, 255
  %2336 = tail call i32 @llvm.ctpop.i32(i32 %2335) #10
  %2337 = trunc i32 %2336 to i8
  %2338 = and i8 %2337, 1
  %2339 = xor i8 %2338, 1
  store i8 %2339, i8* %49, align 1, !tbaa !2445
  %2340 = xor i64 %2327, %2321
  %2341 = xor i64 %2340, %2329
  %2342 = lshr i64 %2341, 4
  %2343 = trunc i64 %2342 to i8
  %2344 = and i8 %2343, 1
  store i8 %2344, i8* %55, align 1, !tbaa !2446
  %2345 = icmp eq i64 %2329, 0
  %2346 = zext i1 %2345 to i8
  store i8 %2346, i8* %58, align 1, !tbaa !2447
  %2347 = lshr i64 %2329, 63
  %2348 = trunc i64 %2347 to i8
  store i8 %2348, i8* %61, align 1, !tbaa !2448
  %2349 = lshr i64 %2321, 63
  %2350 = xor i64 %2347, %2349
  %2351 = xor i64 %2347, %2328
  %2352 = add nuw nsw i64 %2350, %2351
  %2353 = icmp eq i64 %2352, 2
  %2354 = zext i1 %2353 to i8
  store i8 %2354, i8* %67, align 1, !tbaa !2449
  %2355 = add i64 %2316, -192
  %2356 = add i64 %2318, 28
  store i64 %2356, i64* %PC, align 8
  %2357 = inttoptr i64 %2355 to i32*
  %2358 = load i32, i32* %2357, align 4
  %2359 = sext i32 %2358 to i64
  store i64 %2359, i64* %RCX, align 8, !tbaa !2450
  %2360 = shl nsw i64 %2359, 3
  %2361 = add i64 %2360, %2329
  %2362 = add i64 %2318, 33
  store i64 %2362, i64* %PC, align 8
  %2363 = inttoptr i64 %2361 to i64*
  %2364 = load i64, i64* %2363, align 8
  store i64 %2364, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2365 = add i64 %2316, -112
  %2366 = add i64 %2318, 37
  store i64 %2366, i64* %PC, align 8
  %2367 = inttoptr i64 %2365 to i64*
  %2368 = load i64, i64* %2367, align 8
  store i64 %2368, i64* %RAX, align 8, !tbaa !2450
  %2369 = add i64 %2318, 44
  store i64 %2369, i64* %PC, align 8
  %2370 = load i32, i32* %2324, align 4
  %2371 = sext i32 %2370 to i64
  %2372 = mul nsw i64 %2371, 33800
  store i64 %2372, i64* %RCX, align 8, !tbaa !2450
  %2373 = lshr i64 %2372, 63
  %2374 = add i64 %2372, %2368
  store i64 %2374, i64* %RAX, align 8, !tbaa !2450
  %2375 = icmp ult i64 %2374, %2368
  %2376 = icmp ult i64 %2374, %2372
  %2377 = or i1 %2375, %2376
  %2378 = zext i1 %2377 to i8
  store i8 %2378, i8* %42, align 1, !tbaa !2428
  %2379 = trunc i64 %2374 to i32
  %2380 = and i32 %2379, 255
  %2381 = tail call i32 @llvm.ctpop.i32(i32 %2380) #10
  %2382 = trunc i32 %2381 to i8
  %2383 = and i8 %2382, 1
  %2384 = xor i8 %2383, 1
  store i8 %2384, i8* %49, align 1, !tbaa !2445
  %2385 = xor i64 %2372, %2368
  %2386 = xor i64 %2385, %2374
  %2387 = lshr i64 %2386, 4
  %2388 = trunc i64 %2387 to i8
  %2389 = and i8 %2388, 1
  store i8 %2389, i8* %55, align 1, !tbaa !2446
  %2390 = icmp eq i64 %2374, 0
  %2391 = zext i1 %2390 to i8
  store i8 %2391, i8* %58, align 1, !tbaa !2447
  %2392 = lshr i64 %2374, 63
  %2393 = trunc i64 %2392 to i8
  store i8 %2393, i8* %61, align 1, !tbaa !2448
  %2394 = lshr i64 %2368, 63
  %2395 = xor i64 %2392, %2394
  %2396 = xor i64 %2392, %2373
  %2397 = add nuw nsw i64 %2395, %2396
  %2398 = icmp eq i64 %2397, 2
  %2399 = zext i1 %2398 to i8
  store i8 %2399, i8* %67, align 1, !tbaa !2449
  %2400 = load i64, i64* %RBP, align 8
  %2401 = add i64 %2400, -52
  %2402 = add i64 %2318, 58
  store i64 %2402, i64* %PC, align 8
  %2403 = inttoptr i64 %2401 to i32*
  %2404 = load i32, i32* %2403, align 4
  %2405 = sext i32 %2404 to i64
  %2406 = mul nsw i64 %2405, 520
  store i64 %2406, i64* %RCX, align 8, !tbaa !2450
  %2407 = lshr i64 %2406, 63
  %2408 = add i64 %2406, %2374
  store i64 %2408, i64* %RAX, align 8, !tbaa !2450
  %2409 = icmp ult i64 %2408, %2374
  %2410 = icmp ult i64 %2408, %2406
  %2411 = or i1 %2409, %2410
  %2412 = zext i1 %2411 to i8
  store i8 %2412, i8* %42, align 1, !tbaa !2428
  %2413 = trunc i64 %2408 to i32
  %2414 = and i32 %2413, 255
  %2415 = tail call i32 @llvm.ctpop.i32(i32 %2414) #10
  %2416 = trunc i32 %2415 to i8
  %2417 = and i8 %2416, 1
  %2418 = xor i8 %2417, 1
  store i8 %2418, i8* %49, align 1, !tbaa !2445
  %2419 = xor i64 %2406, %2374
  %2420 = xor i64 %2419, %2408
  %2421 = lshr i64 %2420, 4
  %2422 = trunc i64 %2421 to i8
  %2423 = and i8 %2422, 1
  store i8 %2423, i8* %55, align 1, !tbaa !2446
  %2424 = icmp eq i64 %2408, 0
  %2425 = zext i1 %2424 to i8
  store i8 %2425, i8* %58, align 1, !tbaa !2447
  %2426 = lshr i64 %2408, 63
  %2427 = trunc i64 %2426 to i8
  store i8 %2427, i8* %61, align 1, !tbaa !2448
  %2428 = xor i64 %2426, %2392
  %2429 = xor i64 %2426, %2407
  %2430 = add nuw nsw i64 %2428, %2429
  %2431 = icmp eq i64 %2430, 2
  %2432 = zext i1 %2431 to i8
  store i8 %2432, i8* %67, align 1, !tbaa !2449
  %2433 = add i64 %2400, -196
  %2434 = add i64 %2318, 75
  store i64 %2434, i64* %PC, align 8
  %2435 = inttoptr i64 %2433 to i32*
  %2436 = load i32, i32* %2435, align 4
  %2437 = sext i32 %2436 to i64
  store i64 %2437, i64* %RCX, align 8, !tbaa !2450
  %2438 = shl nsw i64 %2437, 3
  %2439 = add i64 %2438, %2408
  %2440 = add i64 %2318, 80
  store i64 %2440, i64* %PC, align 8
  %2441 = load i64, i64* %148, align 1
  %2442 = inttoptr i64 %2439 to i64*
  store i64 %2441, i64* %2442, align 8
  %2443 = load i64, i64* %RBP, align 8
  %2444 = add i64 %2443, -196
  %2445 = load i64, i64* %PC, align 8
  %2446 = add i64 %2445, 6
  store i64 %2446, i64* %PC, align 8
  %2447 = inttoptr i64 %2444 to i32*
  %2448 = load i32, i32* %2447, align 4
  %2449 = add i32 %2448, 1
  %2450 = zext i32 %2449 to i64
  store i64 %2450, i64* %RAX, align 8, !tbaa !2450
  %2451 = icmp eq i32 %2448, -1
  %2452 = icmp eq i32 %2449, 0
  %2453 = or i1 %2451, %2452
  %2454 = zext i1 %2453 to i8
  store i8 %2454, i8* %42, align 1, !tbaa !2428
  %2455 = and i32 %2449, 255
  %2456 = tail call i32 @llvm.ctpop.i32(i32 %2455) #10
  %2457 = trunc i32 %2456 to i8
  %2458 = and i8 %2457, 1
  %2459 = xor i8 %2458, 1
  store i8 %2459, i8* %49, align 1, !tbaa !2445
  %2460 = xor i32 %2449, %2448
  %2461 = lshr i32 %2460, 4
  %2462 = trunc i32 %2461 to i8
  %2463 = and i8 %2462, 1
  store i8 %2463, i8* %55, align 1, !tbaa !2446
  %2464 = zext i1 %2452 to i8
  store i8 %2464, i8* %58, align 1, !tbaa !2447
  %2465 = lshr i32 %2449, 31
  %2466 = trunc i32 %2465 to i8
  store i8 %2466, i8* %61, align 1, !tbaa !2448
  %2467 = lshr i32 %2448, 31
  %2468 = xor i32 %2465, %2467
  %2469 = add nuw nsw i32 %2468, %2465
  %2470 = icmp eq i32 %2469, 2
  %2471 = zext i1 %2470 to i8
  store i8 %2471, i8* %67, align 1, !tbaa !2449
  %2472 = add i64 %2445, 15
  store i64 %2472, i64* %PC, align 8
  store i32 %2449, i32* %2447, align 4
  %2473 = load i64, i64* %PC, align 8
  %2474 = add i64 %2473, -813
  store i64 %2474, i64* %PC, align 8, !tbaa !2450
  br label %block_4029e0

block_40300b:                                     ; preds = %block_402341
  %2475 = load i64, i64* %RSP, align 8
  %2476 = add i64 %2475, 56
  store i64 %2476, i64* %RSP, align 8, !tbaa !2450
  %2477 = icmp ugt i64 %2475, -57
  %2478 = zext i1 %2477 to i8
  store i8 %2478, i8* %42, align 1, !tbaa !2428
  %2479 = trunc i64 %2476 to i32
  %2480 = and i32 %2479, 255
  %2481 = tail call i32 @llvm.ctpop.i32(i32 %2480) #10
  %2482 = trunc i32 %2481 to i8
  %2483 = and i8 %2482, 1
  %2484 = xor i8 %2483, 1
  store i8 %2484, i8* %49, align 1, !tbaa !2445
  %2485 = xor i64 %2475, 16
  %2486 = xor i64 %2485, %2476
  %2487 = lshr i64 %2486, 4
  %2488 = trunc i64 %2487 to i8
  %2489 = and i8 %2488, 1
  store i8 %2489, i8* %55, align 1, !tbaa !2446
  %2490 = icmp eq i64 %2476, 0
  %2491 = zext i1 %2490 to i8
  store i8 %2491, i8* %58, align 1, !tbaa !2447
  %2492 = lshr i64 %2476, 63
  %2493 = trunc i64 %2492 to i8
  store i8 %2493, i8* %61, align 1, !tbaa !2448
  %2494 = lshr i64 %2475, 63
  %2495 = xor i64 %2492, %2494
  %2496 = add nuw nsw i64 %2495, %2492
  %2497 = icmp eq i64 %2496, 2
  %2498 = zext i1 %2497 to i8
  store i8 %2498, i8* %67, align 1, !tbaa !2449
  %2499 = add i64 %4630, 5
  store i64 %2499, i64* %PC, align 8
  %2500 = add i64 %2475, 64
  %2501 = inttoptr i64 %2476 to i64*
  %2502 = load i64, i64* %2501, align 8
  store i64 %2502, i64* %RBX, align 8, !tbaa !2450
  store i64 %2500, i64* %RSP, align 8, !tbaa !2450
  %2503 = add i64 %4630, 7
  store i64 %2503, i64* %PC, align 8
  %2504 = add i64 %2475, 72
  %2505 = inttoptr i64 %2500 to i64*
  %2506 = load i64, i64* %2505, align 8
  store i64 %2506, i64* %R12, align 8, !tbaa !2450
  store i64 %2504, i64* %RSP, align 8, !tbaa !2450
  %2507 = add i64 %4630, 9
  store i64 %2507, i64* %PC, align 8
  %2508 = add i64 %2475, 80
  %2509 = inttoptr i64 %2504 to i64*
  %2510 = load i64, i64* %2509, align 8
  store i64 %2510, i64* %R13, align 8, !tbaa !2450
  store i64 %2508, i64* %RSP, align 8, !tbaa !2450
  %2511 = add i64 %4630, 11
  store i64 %2511, i64* %PC, align 8
  %2512 = add i64 %2475, 88
  %2513 = inttoptr i64 %2508 to i64*
  %2514 = load i64, i64* %2513, align 8
  store i64 %2514, i64* %R14, align 8, !tbaa !2450
  store i64 %2512, i64* %RSP, align 8, !tbaa !2450
  %2515 = add i64 %4630, 13
  store i64 %2515, i64* %PC, align 8
  %2516 = add i64 %2475, 96
  %2517 = inttoptr i64 %2512 to i64*
  %2518 = load i64, i64* %2517, align 8
  store i64 %2518, i64* %R15, align 8, !tbaa !2450
  store i64 %2516, i64* %RSP, align 8, !tbaa !2450
  %2519 = add i64 %4630, 14
  store i64 %2519, i64* %PC, align 8
  %2520 = add i64 %2475, 104
  %2521 = inttoptr i64 %2516 to i64*
  %2522 = load i64, i64* %2521, align 8
  store i64 %2522, i64* %RBP, align 8, !tbaa !2450
  store i64 %2520, i64* %RSP, align 8, !tbaa !2450
  %2523 = add i64 %4630, 15
  store i64 %2523, i64* %PC, align 8
  %2524 = inttoptr i64 %2520 to i64*
  %2525 = load i64, i64* %2524, align 8
  store i64 %2525, i64* %PC, align 8, !tbaa !2450
  %2526 = add i64 %2475, 112
  store i64 %2526, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %2

block_402369:                                     ; preds = %block_40235a
  %2527 = add i64 %263, -196
  %2528 = add i64 %299, 10
  store i64 %2528, i64* %PC, align 8
  %2529 = inttoptr i64 %2527 to i32*
  store i32 0, i32* %2529, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_402373

block_402d12:                                     ; preds = %block_4029e0
  %2530 = add i64 %4668, 39
  store i64 %2530, i64* %PC, align 8
  %2531 = load i32, i32* %4640, align 4
  %2532 = sext i32 %2531 to i64
  store i64 %2532, i64* %RCX, align 8, !tbaa !2450
  %2533 = shl nsw i64 %2532, 3
  %2534 = add i64 %2533, %4714
  %2535 = add i64 %4668, 44
  store i64 %2535, i64* %PC, align 8
  %2536 = inttoptr i64 %2534 to i64*
  %2537 = load i64, i64* %2536, align 8
  store i64 %2537, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2538 = add i64 %4632, -80
  %2539 = add i64 %4668, 48
  store i64 %2539, i64* %PC, align 8
  %2540 = inttoptr i64 %2538 to i64*
  %2541 = load i64, i64* %2540, align 8
  store i64 %2541, i64* %RAX, align 8, !tbaa !2450
  %2542 = add i64 %4668, 55
  store i64 %2542, i64* %PC, align 8
  %2543 = load i32, i32* %4675, align 4
  %2544 = sext i32 %2543 to i64
  %2545 = mul nsw i64 %2544, 520
  store i64 %2545, i64* %RCX, align 8, !tbaa !2450
  %2546 = lshr i64 %2545, 63
  %2547 = add i64 %2545, %2541
  store i64 %2547, i64* %RAX, align 8, !tbaa !2450
  %2548 = icmp ult i64 %2547, %2541
  %2549 = icmp ult i64 %2547, %2545
  %2550 = or i1 %2548, %2549
  %2551 = zext i1 %2550 to i8
  store i8 %2551, i8* %42, align 1, !tbaa !2428
  %2552 = trunc i64 %2547 to i32
  %2553 = and i32 %2552, 255
  %2554 = tail call i32 @llvm.ctpop.i32(i32 %2553) #10
  %2555 = trunc i32 %2554 to i8
  %2556 = and i8 %2555, 1
  %2557 = xor i8 %2556, 1
  store i8 %2557, i8* %49, align 1, !tbaa !2445
  %2558 = xor i64 %2545, %2541
  %2559 = xor i64 %2558, %2547
  %2560 = lshr i64 %2559, 4
  %2561 = trunc i64 %2560 to i8
  %2562 = and i8 %2561, 1
  store i8 %2562, i8* %55, align 1, !tbaa !2446
  %2563 = icmp eq i64 %2547, 0
  %2564 = zext i1 %2563 to i8
  store i8 %2564, i8* %58, align 1, !tbaa !2447
  %2565 = lshr i64 %2547, 63
  %2566 = trunc i64 %2565 to i8
  store i8 %2566, i8* %61, align 1, !tbaa !2448
  %2567 = lshr i64 %2541, 63
  %2568 = xor i64 %2565, %2567
  %2569 = xor i64 %2565, %2546
  %2570 = add nuw nsw i64 %2568, %2569
  %2571 = icmp eq i64 %2570, 2
  %2572 = zext i1 %2571 to i8
  store i8 %2572, i8* %67, align 1, !tbaa !2449
  %2573 = add i64 %4668, 69
  store i64 %2573, i64* %PC, align 8
  %2574 = load i32, i32* %4640, align 4
  %2575 = sext i32 %2574 to i64
  store i64 %2575, i64* %RCX, align 8, !tbaa !2450
  %2576 = shl nsw i64 %2575, 3
  %2577 = add i64 %2576, %2547
  %2578 = add i64 %4668, 74
  store i64 %2578, i64* %PC, align 8
  %2579 = bitcast i64 %2537 to double
  %2580 = inttoptr i64 %2577 to double*
  %2581 = load double, double* %2580, align 8
  %2582 = fsub double %2579, %2581
  store double %2582, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %2583 = load i64, i64* %RBP, align 8
  %2584 = add i64 %2583, -88
  %2585 = add i64 %4668, 78
  store i64 %2585, i64* %PC, align 8
  %2586 = inttoptr i64 %2584 to i64*
  %2587 = load i64, i64* %2586, align 8
  store i64 %2587, i64* %RAX, align 8, !tbaa !2450
  %2588 = add i64 %2583, -188
  %2589 = add i64 %4668, 85
  store i64 %2589, i64* %PC, align 8
  %2590 = inttoptr i64 %2588 to i32*
  %2591 = load i32, i32* %2590, align 4
  %2592 = sext i32 %2591 to i64
  %2593 = mul nsw i64 %2592, 520
  store i64 %2593, i64* %RCX, align 8, !tbaa !2450
  %2594 = lshr i64 %2593, 63
  %2595 = add i64 %2593, %2587
  store i64 %2595, i64* %RAX, align 8, !tbaa !2450
  %2596 = icmp ult i64 %2595, %2587
  %2597 = icmp ult i64 %2595, %2593
  %2598 = or i1 %2596, %2597
  %2599 = zext i1 %2598 to i8
  store i8 %2599, i8* %42, align 1, !tbaa !2428
  %2600 = trunc i64 %2595 to i32
  %2601 = and i32 %2600, 255
  %2602 = tail call i32 @llvm.ctpop.i32(i32 %2601) #10
  %2603 = trunc i32 %2602 to i8
  %2604 = and i8 %2603, 1
  %2605 = xor i8 %2604, 1
  store i8 %2605, i8* %49, align 1, !tbaa !2445
  %2606 = xor i64 %2593, %2587
  %2607 = xor i64 %2606, %2595
  %2608 = lshr i64 %2607, 4
  %2609 = trunc i64 %2608 to i8
  %2610 = and i8 %2609, 1
  store i8 %2610, i8* %55, align 1, !tbaa !2446
  %2611 = icmp eq i64 %2595, 0
  %2612 = zext i1 %2611 to i8
  store i8 %2612, i8* %58, align 1, !tbaa !2447
  %2613 = lshr i64 %2595, 63
  %2614 = trunc i64 %2613 to i8
  store i8 %2614, i8* %61, align 1, !tbaa !2448
  %2615 = lshr i64 %2587, 63
  %2616 = xor i64 %2613, %2615
  %2617 = xor i64 %2613, %2594
  %2618 = add nuw nsw i64 %2616, %2617
  %2619 = icmp eq i64 %2618, 2
  %2620 = zext i1 %2619 to i8
  store i8 %2620, i8* %67, align 1, !tbaa !2449
  %2621 = add i64 %2583, -52
  %2622 = add i64 %4668, 99
  store i64 %2622, i64* %PC, align 8
  %2623 = inttoptr i64 %2621 to i32*
  %2624 = load i32, i32* %2623, align 4
  %2625 = sext i32 %2624 to i64
  store i64 %2625, i64* %RCX, align 8, !tbaa !2450
  %2626 = shl nsw i64 %2625, 3
  %2627 = add i64 %2626, %2595
  %2628 = add i64 %4668, 104
  store i64 %2628, i64* %PC, align 8
  %2629 = inttoptr i64 %2627 to double*
  %2630 = load double, double* %2629, align 8
  %2631 = fadd double %2582, %2630
  store double %2631, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %2632 = add i64 %2583, -128
  %2633 = add i64 %4668, 108
  store i64 %2633, i64* %PC, align 8
  %2634 = inttoptr i64 %2632 to i64*
  %2635 = load i64, i64* %2634, align 8
  store i64 %2635, i64* %RAX, align 8, !tbaa !2450
  %2636 = add i64 %4668, 115
  store i64 %2636, i64* %PC, align 8
  %2637 = load i32, i32* %2590, align 4
  %2638 = sext i32 %2637 to i64
  %2639 = mul nsw i64 %2638, 33800
  store i64 %2639, i64* %RCX, align 8, !tbaa !2450
  %2640 = lshr i64 %2639, 63
  %2641 = add i64 %2639, %2635
  store i64 %2641, i64* %RAX, align 8, !tbaa !2450
  %2642 = icmp ult i64 %2641, %2635
  %2643 = icmp ult i64 %2641, %2639
  %2644 = or i1 %2642, %2643
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* %42, align 1, !tbaa !2428
  %2646 = trunc i64 %2641 to i32
  %2647 = and i32 %2646, 255
  %2648 = tail call i32 @llvm.ctpop.i32(i32 %2647) #10
  %2649 = trunc i32 %2648 to i8
  %2650 = and i8 %2649, 1
  %2651 = xor i8 %2650, 1
  store i8 %2651, i8* %49, align 1, !tbaa !2445
  %2652 = xor i64 %2639, %2635
  %2653 = xor i64 %2652, %2641
  %2654 = lshr i64 %2653, 4
  %2655 = trunc i64 %2654 to i8
  %2656 = and i8 %2655, 1
  store i8 %2656, i8* %55, align 1, !tbaa !2446
  %2657 = icmp eq i64 %2641, 0
  %2658 = zext i1 %2657 to i8
  store i8 %2658, i8* %58, align 1, !tbaa !2447
  %2659 = lshr i64 %2641, 63
  %2660 = trunc i64 %2659 to i8
  store i8 %2660, i8* %61, align 1, !tbaa !2448
  %2661 = lshr i64 %2635, 63
  %2662 = xor i64 %2659, %2661
  %2663 = xor i64 %2659, %2640
  %2664 = add nuw nsw i64 %2662, %2663
  %2665 = icmp eq i64 %2664, 2
  %2666 = zext i1 %2665 to i8
  store i8 %2666, i8* %67, align 1, !tbaa !2449
  %2667 = load i64, i64* %RBP, align 8
  %2668 = add i64 %2667, -52
  %2669 = add i64 %4668, 129
  store i64 %2669, i64* %PC, align 8
  %2670 = inttoptr i64 %2668 to i32*
  %2671 = load i32, i32* %2670, align 4
  %2672 = sext i32 %2671 to i64
  %2673 = mul nsw i64 %2672, 520
  store i64 %2673, i64* %RCX, align 8, !tbaa !2450
  %2674 = lshr i64 %2673, 63
  %2675 = add i64 %2673, %2641
  store i64 %2675, i64* %RAX, align 8, !tbaa !2450
  %2676 = icmp ult i64 %2675, %2641
  %2677 = icmp ult i64 %2675, %2673
  %2678 = or i1 %2676, %2677
  %2679 = zext i1 %2678 to i8
  store i8 %2679, i8* %42, align 1, !tbaa !2428
  %2680 = trunc i64 %2675 to i32
  %2681 = and i32 %2680, 255
  %2682 = tail call i32 @llvm.ctpop.i32(i32 %2681) #10
  %2683 = trunc i32 %2682 to i8
  %2684 = and i8 %2683, 1
  %2685 = xor i8 %2684, 1
  store i8 %2685, i8* %49, align 1, !tbaa !2445
  %2686 = xor i64 %2673, %2641
  %2687 = xor i64 %2686, %2675
  %2688 = lshr i64 %2687, 4
  %2689 = trunc i64 %2688 to i8
  %2690 = and i8 %2689, 1
  store i8 %2690, i8* %55, align 1, !tbaa !2446
  %2691 = icmp eq i64 %2675, 0
  %2692 = zext i1 %2691 to i8
  store i8 %2692, i8* %58, align 1, !tbaa !2447
  %2693 = lshr i64 %2675, 63
  %2694 = trunc i64 %2693 to i8
  store i8 %2694, i8* %61, align 1, !tbaa !2448
  %2695 = xor i64 %2693, %2659
  %2696 = xor i64 %2693, %2674
  %2697 = add nuw nsw i64 %2695, %2696
  %2698 = icmp eq i64 %2697, 2
  %2699 = zext i1 %2698 to i8
  store i8 %2699, i8* %67, align 1, !tbaa !2449
  %2700 = add i64 %2667, -48
  %2701 = add i64 %4668, 143
  store i64 %2701, i64* %PC, align 8
  %2702 = inttoptr i64 %2700 to i32*
  %2703 = load i32, i32* %2702, align 4
  %2704 = sext i32 %2703 to i64
  store i64 %2704, i64* %RCX, align 8, !tbaa !2450
  %2705 = shl nsw i64 %2704, 3
  %2706 = add i64 %2705, %2675
  %2707 = add i64 %4668, 148
  store i64 %2707, i64* %PC, align 8
  %2708 = load double, double* %257, align 1
  %2709 = inttoptr i64 %2706 to double*
  %2710 = load double, double* %2709, align 8
  %2711 = fsub double %2708, %2710
  store double %2711, double* %257, align 1, !tbaa !2453
  %2712 = add i64 %2667, -96
  %2713 = add i64 %4668, 152
  store i64 %2713, i64* %PC, align 8
  %2714 = inttoptr i64 %2712 to i64*
  %2715 = load i64, i64* %2714, align 8
  store i64 %2715, i64* %RAX, align 8, !tbaa !2450
  %2716 = add i64 %2667, -188
  %2717 = add i64 %4668, 159
  store i64 %2717, i64* %PC, align 8
  %2718 = inttoptr i64 %2716 to i32*
  %2719 = load i32, i32* %2718, align 4
  %2720 = sext i32 %2719 to i64
  %2721 = mul nsw i64 %2720, 520
  store i64 %2721, i64* %RCX, align 8, !tbaa !2450
  %2722 = lshr i64 %2721, 63
  %2723 = add i64 %2721, %2715
  store i64 %2723, i64* %RAX, align 8, !tbaa !2450
  %2724 = icmp ult i64 %2723, %2715
  %2725 = icmp ult i64 %2723, %2721
  %2726 = or i1 %2724, %2725
  %2727 = zext i1 %2726 to i8
  store i8 %2727, i8* %42, align 1, !tbaa !2428
  %2728 = trunc i64 %2723 to i32
  %2729 = and i32 %2728, 255
  %2730 = tail call i32 @llvm.ctpop.i32(i32 %2729) #10
  %2731 = trunc i32 %2730 to i8
  %2732 = and i8 %2731, 1
  %2733 = xor i8 %2732, 1
  store i8 %2733, i8* %49, align 1, !tbaa !2445
  %2734 = xor i64 %2721, %2715
  %2735 = xor i64 %2734, %2723
  %2736 = lshr i64 %2735, 4
  %2737 = trunc i64 %2736 to i8
  %2738 = and i8 %2737, 1
  store i8 %2738, i8* %55, align 1, !tbaa !2446
  %2739 = icmp eq i64 %2723, 0
  %2740 = zext i1 %2739 to i8
  store i8 %2740, i8* %58, align 1, !tbaa !2447
  %2741 = lshr i64 %2723, 63
  %2742 = trunc i64 %2741 to i8
  store i8 %2742, i8* %61, align 1, !tbaa !2448
  %2743 = lshr i64 %2715, 63
  %2744 = xor i64 %2741, %2743
  %2745 = xor i64 %2741, %2722
  %2746 = add nuw nsw i64 %2744, %2745
  %2747 = icmp eq i64 %2746, 2
  %2748 = zext i1 %2747 to i8
  store i8 %2748, i8* %67, align 1, !tbaa !2449
  %2749 = load i64, i64* %RBP, align 8
  %2750 = add i64 %2749, -192
  %2751 = add i64 %4668, 176
  store i64 %2751, i64* %PC, align 8
  %2752 = inttoptr i64 %2750 to i32*
  %2753 = load i32, i32* %2752, align 4
  %2754 = sext i32 %2753 to i64
  store i64 %2754, i64* %RCX, align 8, !tbaa !2450
  %2755 = shl nsw i64 %2754, 3
  %2756 = add i64 %2755, %2723
  %2757 = add i64 %4668, 181
  store i64 %2757, i64* %PC, align 8
  %2758 = inttoptr i64 %2756 to double*
  store double %2711, double* %2758, align 8
  %2759 = load i64, i64* %RBP, align 8
  %2760 = add i64 %2759, -176
  %2761 = load i64, i64* %PC, align 8
  %2762 = add i64 %2761, 7
  store i64 %2762, i64* %PC, align 8
  %2763 = inttoptr i64 %2760 to i64*
  %2764 = load i64, i64* %2763, align 8
  store i64 %2764, i64* %RAX, align 8, !tbaa !2450
  %2765 = add i64 %2759, -52
  %2766 = add i64 %2761, 11
  store i64 %2766, i64* %PC, align 8
  %2767 = inttoptr i64 %2765 to i32*
  %2768 = load i32, i32* %2767, align 4
  %2769 = sext i32 %2768 to i64
  store i64 %2769, i64* %RCX, align 8, !tbaa !2450
  %2770 = shl nsw i64 %2769, 3
  %2771 = add i64 %2770, %2764
  %2772 = add i64 %2761, 16
  store i64 %2772, i64* %PC, align 8
  %2773 = inttoptr i64 %2771 to i64*
  %2774 = load i64, i64* %2773, align 8
  store i64 %2774, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2775 = add i64 %2759, -184
  %2776 = add i64 %2761, 23
  store i64 %2776, i64* %PC, align 8
  %2777 = inttoptr i64 %2775 to i64*
  %2778 = load i64, i64* %2777, align 8
  store i64 %2778, i64* %RAX, align 8, !tbaa !2450
  %2779 = add i64 %2761, 27
  store i64 %2779, i64* %PC, align 8
  %2780 = load i32, i32* %2767, align 4
  %2781 = sext i32 %2780 to i64
  store i64 %2781, i64* %RCX, align 8, !tbaa !2450
  %2782 = shl nsw i64 %2781, 3
  %2783 = add i64 %2782, %2778
  %2784 = add i64 %2761, 32
  store i64 %2784, i64* %PC, align 8
  %2785 = bitcast i64 %2774 to double
  %2786 = inttoptr i64 %2783 to double*
  %2787 = load double, double* %2786, align 8
  %2788 = fdiv double %2785, %2787
  store double %2788, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %2789 = add i64 %2759, -112
  %2790 = add i64 %2761, 36
  store i64 %2790, i64* %PC, align 8
  %2791 = inttoptr i64 %2789 to i64*
  %2792 = load i64, i64* %2791, align 8
  store i64 %2792, i64* %RAX, align 8, !tbaa !2450
  %2793 = add i64 %2759, -188
  %2794 = add i64 %2761, 43
  store i64 %2794, i64* %PC, align 8
  %2795 = inttoptr i64 %2793 to i32*
  %2796 = load i32, i32* %2795, align 4
  %2797 = sext i32 %2796 to i64
  %2798 = mul nsw i64 %2797, 33800
  store i64 %2798, i64* %RCX, align 8, !tbaa !2450
  %2799 = lshr i64 %2798, 63
  %2800 = add i64 %2798, %2792
  store i64 %2800, i64* %RAX, align 8, !tbaa !2450
  %2801 = icmp ult i64 %2800, %2792
  %2802 = icmp ult i64 %2800, %2798
  %2803 = or i1 %2801, %2802
  %2804 = zext i1 %2803 to i8
  store i8 %2804, i8* %42, align 1, !tbaa !2428
  %2805 = trunc i64 %2800 to i32
  %2806 = and i32 %2805, 255
  %2807 = tail call i32 @llvm.ctpop.i32(i32 %2806) #10
  %2808 = trunc i32 %2807 to i8
  %2809 = and i8 %2808, 1
  %2810 = xor i8 %2809, 1
  store i8 %2810, i8* %49, align 1, !tbaa !2445
  %2811 = xor i64 %2798, %2792
  %2812 = xor i64 %2811, %2800
  %2813 = lshr i64 %2812, 4
  %2814 = trunc i64 %2813 to i8
  %2815 = and i8 %2814, 1
  store i8 %2815, i8* %55, align 1, !tbaa !2446
  %2816 = icmp eq i64 %2800, 0
  %2817 = zext i1 %2816 to i8
  store i8 %2817, i8* %58, align 1, !tbaa !2447
  %2818 = lshr i64 %2800, 63
  %2819 = trunc i64 %2818 to i8
  store i8 %2819, i8* %61, align 1, !tbaa !2448
  %2820 = lshr i64 %2792, 63
  %2821 = xor i64 %2818, %2820
  %2822 = xor i64 %2818, %2799
  %2823 = add nuw nsw i64 %2821, %2822
  %2824 = icmp eq i64 %2823, 2
  %2825 = zext i1 %2824 to i8
  store i8 %2825, i8* %67, align 1, !tbaa !2449
  %2826 = add i64 %2761, 57
  store i64 %2826, i64* %PC, align 8
  %2827 = load i32, i32* %2767, align 4
  %2828 = sext i32 %2827 to i64
  %2829 = mul nsw i64 %2828, 520
  store i64 %2829, i64* %RCX, align 8, !tbaa !2450
  %2830 = lshr i64 %2829, 63
  %2831 = add i64 %2829, %2800
  store i64 %2831, i64* %RAX, align 8, !tbaa !2450
  %2832 = icmp ult i64 %2831, %2800
  %2833 = icmp ult i64 %2831, %2829
  %2834 = or i1 %2832, %2833
  %2835 = zext i1 %2834 to i8
  store i8 %2835, i8* %42, align 1, !tbaa !2428
  %2836 = trunc i64 %2831 to i32
  %2837 = and i32 %2836, 255
  %2838 = tail call i32 @llvm.ctpop.i32(i32 %2837) #10
  %2839 = trunc i32 %2838 to i8
  %2840 = and i8 %2839, 1
  %2841 = xor i8 %2840, 1
  store i8 %2841, i8* %49, align 1, !tbaa !2445
  %2842 = xor i64 %2829, %2800
  %2843 = xor i64 %2842, %2831
  %2844 = lshr i64 %2843, 4
  %2845 = trunc i64 %2844 to i8
  %2846 = and i8 %2845, 1
  store i8 %2846, i8* %55, align 1, !tbaa !2446
  %2847 = icmp eq i64 %2831, 0
  %2848 = zext i1 %2847 to i8
  store i8 %2848, i8* %58, align 1, !tbaa !2447
  %2849 = lshr i64 %2831, 63
  %2850 = trunc i64 %2849 to i8
  store i8 %2850, i8* %61, align 1, !tbaa !2448
  %2851 = xor i64 %2849, %2818
  %2852 = xor i64 %2849, %2830
  %2853 = add nuw nsw i64 %2851, %2852
  %2854 = icmp eq i64 %2853, 2
  %2855 = zext i1 %2854 to i8
  store i8 %2855, i8* %67, align 1, !tbaa !2449
  %2856 = add i64 %2759, -48
  %2857 = add i64 %2761, 71
  store i64 %2857, i64* %PC, align 8
  %2858 = inttoptr i64 %2856 to i32*
  %2859 = load i32, i32* %2858, align 4
  %2860 = sext i32 %2859 to i64
  store i64 %2860, i64* %RCX, align 8, !tbaa !2450
  %2861 = shl nsw i64 %2860, 3
  %2862 = add i64 %2861, %2831
  %2863 = add i64 %2761, 76
  store i64 %2863, i64* %PC, align 8
  %2864 = load double, double* %257, align 1
  %2865 = inttoptr i64 %2862 to double*
  %2866 = load double, double* %2865, align 8
  %2867 = fmul double %2864, %2866
  store double %2867, double* %257, align 1, !tbaa !2453
  %2868 = add i64 %2759, -72
  %2869 = add i64 %2761, 81
  store i64 %2869, i64* %PC, align 8
  %2870 = inttoptr i64 %2868 to i64*
  %2871 = load i64, i64* %2870, align 8
  store i64 %2871, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %2872 = add i64 %2761, 88
  store i64 %2872, i64* %PC, align 8
  %2873 = load i64, i64* %2777, align 8
  store i64 %2873, i64* %RAX, align 8, !tbaa !2450
  %2874 = add i64 %2761, 92
  store i64 %2874, i64* %PC, align 8
  %2875 = load i32, i32* %2767, align 4
  %2876 = sext i32 %2875 to i64
  store i64 %2876, i64* %RCX, align 8, !tbaa !2450
  %2877 = shl nsw i64 %2876, 3
  %2878 = add i64 %2877, %2873
  %2879 = add i64 %2761, 97
  store i64 %2879, i64* %PC, align 8
  %2880 = bitcast i64 %2871 to double
  %2881 = inttoptr i64 %2878 to double*
  %2882 = load double, double* %2881, align 8
  %2883 = fdiv double %2880, %2882
  store double %2883, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2884 = load i64, i64* %RBP, align 8
  %2885 = add i64 %2884, -96
  %2886 = add i64 %2761, 101
  store i64 %2886, i64* %PC, align 8
  %2887 = inttoptr i64 %2885 to i64*
  %2888 = load i64, i64* %2887, align 8
  store i64 %2888, i64* %RAX, align 8, !tbaa !2450
  %2889 = add i64 %2884, -188
  %2890 = add i64 %2761, 108
  store i64 %2890, i64* %PC, align 8
  %2891 = inttoptr i64 %2889 to i32*
  %2892 = load i32, i32* %2891, align 4
  %2893 = sext i32 %2892 to i64
  %2894 = mul nsw i64 %2893, 520
  store i64 %2894, i64* %RCX, align 8, !tbaa !2450
  %2895 = lshr i64 %2894, 63
  %2896 = add i64 %2894, %2888
  store i64 %2896, i64* %RAX, align 8, !tbaa !2450
  %2897 = icmp ult i64 %2896, %2888
  %2898 = icmp ult i64 %2896, %2894
  %2899 = or i1 %2897, %2898
  %2900 = zext i1 %2899 to i8
  store i8 %2900, i8* %42, align 1, !tbaa !2428
  %2901 = trunc i64 %2896 to i32
  %2902 = and i32 %2901, 255
  %2903 = tail call i32 @llvm.ctpop.i32(i32 %2902) #10
  %2904 = trunc i32 %2903 to i8
  %2905 = and i8 %2904, 1
  %2906 = xor i8 %2905, 1
  store i8 %2906, i8* %49, align 1, !tbaa !2445
  %2907 = xor i64 %2894, %2888
  %2908 = xor i64 %2907, %2896
  %2909 = lshr i64 %2908, 4
  %2910 = trunc i64 %2909 to i8
  %2911 = and i8 %2910, 1
  store i8 %2911, i8* %55, align 1, !tbaa !2446
  %2912 = icmp eq i64 %2896, 0
  %2913 = zext i1 %2912 to i8
  store i8 %2913, i8* %58, align 1, !tbaa !2447
  %2914 = lshr i64 %2896, 63
  %2915 = trunc i64 %2914 to i8
  store i8 %2915, i8* %61, align 1, !tbaa !2448
  %2916 = lshr i64 %2888, 63
  %2917 = xor i64 %2914, %2916
  %2918 = xor i64 %2914, %2895
  %2919 = add nuw nsw i64 %2917, %2918
  %2920 = icmp eq i64 %2919, 2
  %2921 = zext i1 %2920 to i8
  store i8 %2921, i8* %67, align 1, !tbaa !2449
  %2922 = add i64 %2884, -192
  %2923 = add i64 %2761, 125
  store i64 %2923, i64* %PC, align 8
  %2924 = inttoptr i64 %2922 to i32*
  %2925 = load i32, i32* %2924, align 4
  %2926 = sext i32 %2925 to i64
  store i64 %2926, i64* %RCX, align 8, !tbaa !2450
  %2927 = shl nsw i64 %2926, 3
  %2928 = add i64 %2927, %2896
  %2929 = add i64 %2761, 130
  store i64 %2929, i64* %PC, align 8
  %2930 = inttoptr i64 %2928 to double*
  %2931 = load double, double* %2930, align 8
  %2932 = fmul double %2883, %2931
  store double %2932, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2933 = fsub double %2867, %2932
  store double %2933, double* %257, align 1, !tbaa !2453
  %2934 = add i64 %2884, -104
  %2935 = add i64 %2761, 138
  store i64 %2935, i64* %PC, align 8
  %2936 = inttoptr i64 %2934 to i64*
  %2937 = load i64, i64* %2936, align 8
  store i64 %2937, i64* %RAX, align 8, !tbaa !2450
  %2938 = add i64 %2761, 145
  store i64 %2938, i64* %PC, align 8
  %2939 = load i32, i32* %2891, align 4
  %2940 = sext i32 %2939 to i64
  %2941 = mul nsw i64 %2940, 520
  store i64 %2941, i64* %RCX, align 8, !tbaa !2450
  %2942 = lshr i64 %2941, 63
  %2943 = add i64 %2941, %2937
  store i64 %2943, i64* %RAX, align 8, !tbaa !2450
  %2944 = icmp ult i64 %2943, %2937
  %2945 = icmp ult i64 %2943, %2941
  %2946 = or i1 %2944, %2945
  %2947 = zext i1 %2946 to i8
  store i8 %2947, i8* %42, align 1, !tbaa !2428
  %2948 = trunc i64 %2943 to i32
  %2949 = and i32 %2948, 255
  %2950 = tail call i32 @llvm.ctpop.i32(i32 %2949) #10
  %2951 = trunc i32 %2950 to i8
  %2952 = and i8 %2951, 1
  %2953 = xor i8 %2952, 1
  store i8 %2953, i8* %49, align 1, !tbaa !2445
  %2954 = xor i64 %2941, %2937
  %2955 = xor i64 %2954, %2943
  %2956 = lshr i64 %2955, 4
  %2957 = trunc i64 %2956 to i8
  %2958 = and i8 %2957, 1
  store i8 %2958, i8* %55, align 1, !tbaa !2446
  %2959 = icmp eq i64 %2943, 0
  %2960 = zext i1 %2959 to i8
  store i8 %2960, i8* %58, align 1, !tbaa !2447
  %2961 = lshr i64 %2943, 63
  %2962 = trunc i64 %2961 to i8
  store i8 %2962, i8* %61, align 1, !tbaa !2448
  %2963 = lshr i64 %2937, 63
  %2964 = xor i64 %2961, %2963
  %2965 = xor i64 %2961, %2942
  %2966 = add nuw nsw i64 %2964, %2965
  %2967 = icmp eq i64 %2966, 2
  %2968 = zext i1 %2967 to i8
  store i8 %2968, i8* %67, align 1, !tbaa !2449
  %2969 = add i64 %2761, 162
  store i64 %2969, i64* %PC, align 8
  %2970 = load i32, i32* %2924, align 4
  %2971 = sext i32 %2970 to i64
  store i64 %2971, i64* %RCX, align 8, !tbaa !2450
  %2972 = shl nsw i64 %2971, 3
  %2973 = add i64 %2972, %2943
  %2974 = add i64 %2761, 167
  store i64 %2974, i64* %PC, align 8
  %2975 = inttoptr i64 %2973 to double*
  store double %2933, double* %2975, align 8
  %2976 = load i64, i64* %RBP, align 8
  %2977 = add i64 %2976, -160
  %2978 = load i64, i64* %PC, align 8
  %2979 = add i64 %2978, 7
  store i64 %2979, i64* %PC, align 8
  %2980 = inttoptr i64 %2977 to i64*
  %2981 = load i64, i64* %2980, align 8
  store i64 %2981, i64* %RAX, align 8, !tbaa !2450
  %2982 = add i64 %2976, -48
  %2983 = add i64 %2978, 11
  store i64 %2983, i64* %PC, align 8
  %2984 = inttoptr i64 %2982 to i32*
  %2985 = load i32, i32* %2984, align 4
  %2986 = sext i32 %2985 to i64
  store i64 %2986, i64* %RCX, align 8, !tbaa !2450
  %2987 = shl nsw i64 %2986, 3
  %2988 = add i64 %2987, %2981
  %2989 = add i64 %2978, 16
  store i64 %2989, i64* %PC, align 8
  %2990 = inttoptr i64 %2988 to i64*
  %2991 = load i64, i64* %2990, align 8
  store i64 %2991, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2992 = add i64 %2976, -168
  %2993 = add i64 %2978, 23
  store i64 %2993, i64* %PC, align 8
  %2994 = inttoptr i64 %2992 to i64*
  %2995 = load i64, i64* %2994, align 8
  store i64 %2995, i64* %RAX, align 8, !tbaa !2450
  %2996 = add i64 %2978, 27
  store i64 %2996, i64* %PC, align 8
  %2997 = load i32, i32* %2984, align 4
  %2998 = sext i32 %2997 to i64
  store i64 %2998, i64* %RCX, align 8, !tbaa !2450
  %2999 = shl nsw i64 %2998, 3
  %3000 = add i64 %2999, %2995
  %3001 = add i64 %2978, 32
  store i64 %3001, i64* %PC, align 8
  %3002 = bitcast i64 %2991 to double
  %3003 = inttoptr i64 %3000 to double*
  %3004 = load double, double* %3003, align 8
  %3005 = fdiv double %3002, %3004
  store double %3005, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %3006 = add i64 %2976, -136
  %3007 = add i64 %2978, 39
  store i64 %3007, i64* %PC, align 8
  %3008 = inttoptr i64 %3006 to i64*
  %3009 = load i64, i64* %3008, align 8
  store i64 %3009, i64* %RAX, align 8, !tbaa !2450
  %3010 = add i64 %2976, -188
  %3011 = add i64 %2978, 46
  store i64 %3011, i64* %PC, align 8
  %3012 = inttoptr i64 %3010 to i32*
  %3013 = load i32, i32* %3012, align 4
  %3014 = sext i32 %3013 to i64
  %3015 = mul nsw i64 %3014, 33800
  store i64 %3015, i64* %RCX, align 8, !tbaa !2450
  %3016 = lshr i64 %3015, 63
  %3017 = add i64 %3015, %3009
  store i64 %3017, i64* %RAX, align 8, !tbaa !2450
  %3018 = icmp ult i64 %3017, %3009
  %3019 = icmp ult i64 %3017, %3015
  %3020 = or i1 %3018, %3019
  %3021 = zext i1 %3020 to i8
  store i8 %3021, i8* %42, align 1, !tbaa !2428
  %3022 = trunc i64 %3017 to i32
  %3023 = and i32 %3022, 255
  %3024 = tail call i32 @llvm.ctpop.i32(i32 %3023) #10
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  %3027 = xor i8 %3026, 1
  store i8 %3027, i8* %49, align 1, !tbaa !2445
  %3028 = xor i64 %3015, %3009
  %3029 = xor i64 %3028, %3017
  %3030 = lshr i64 %3029, 4
  %3031 = trunc i64 %3030 to i8
  %3032 = and i8 %3031, 1
  store i8 %3032, i8* %55, align 1, !tbaa !2446
  %3033 = icmp eq i64 %3017, 0
  %3034 = zext i1 %3033 to i8
  store i8 %3034, i8* %58, align 1, !tbaa !2447
  %3035 = lshr i64 %3017, 63
  %3036 = trunc i64 %3035 to i8
  store i8 %3036, i8* %61, align 1, !tbaa !2448
  %3037 = lshr i64 %3009, 63
  %3038 = xor i64 %3035, %3037
  %3039 = xor i64 %3035, %3016
  %3040 = add nuw nsw i64 %3038, %3039
  %3041 = icmp eq i64 %3040, 2
  %3042 = zext i1 %3041 to i8
  store i8 %3042, i8* %67, align 1, !tbaa !2449
  %3043 = add i64 %2976, -52
  %3044 = add i64 %2978, 60
  store i64 %3044, i64* %PC, align 8
  %3045 = inttoptr i64 %3043 to i32*
  %3046 = load i32, i32* %3045, align 4
  %3047 = sext i32 %3046 to i64
  %3048 = mul nsw i64 %3047, 520
  store i64 %3048, i64* %RCX, align 8, !tbaa !2450
  %3049 = lshr i64 %3048, 63
  %3050 = add i64 %3048, %3017
  store i64 %3050, i64* %RAX, align 8, !tbaa !2450
  %3051 = icmp ult i64 %3050, %3017
  %3052 = icmp ult i64 %3050, %3048
  %3053 = or i1 %3051, %3052
  %3054 = zext i1 %3053 to i8
  store i8 %3054, i8* %42, align 1, !tbaa !2428
  %3055 = trunc i64 %3050 to i32
  %3056 = and i32 %3055, 255
  %3057 = tail call i32 @llvm.ctpop.i32(i32 %3056) #10
  %3058 = trunc i32 %3057 to i8
  %3059 = and i8 %3058, 1
  %3060 = xor i8 %3059, 1
  store i8 %3060, i8* %49, align 1, !tbaa !2445
  %3061 = xor i64 %3048, %3017
  %3062 = xor i64 %3061, %3050
  %3063 = lshr i64 %3062, 4
  %3064 = trunc i64 %3063 to i8
  %3065 = and i8 %3064, 1
  store i8 %3065, i8* %55, align 1, !tbaa !2446
  %3066 = icmp eq i64 %3050, 0
  %3067 = zext i1 %3066 to i8
  store i8 %3067, i8* %58, align 1, !tbaa !2447
  %3068 = lshr i64 %3050, 63
  %3069 = trunc i64 %3068 to i8
  store i8 %3069, i8* %61, align 1, !tbaa !2448
  %3070 = xor i64 %3068, %3035
  %3071 = xor i64 %3068, %3049
  %3072 = add nuw nsw i64 %3070, %3071
  %3073 = icmp eq i64 %3072, 2
  %3074 = zext i1 %3073 to i8
  store i8 %3074, i8* %67, align 1, !tbaa !2449
  %3075 = add i64 %2978, 74
  store i64 %3075, i64* %PC, align 8
  %3076 = load i32, i32* %2984, align 4
  %3077 = sext i32 %3076 to i64
  store i64 %3077, i64* %RCX, align 8, !tbaa !2450
  %3078 = shl nsw i64 %3077, 3
  %3079 = add i64 %3078, %3050
  %3080 = add i64 %2978, 79
  store i64 %3080, i64* %PC, align 8
  %3081 = load double, double* %257, align 1
  %3082 = inttoptr i64 %3079 to double*
  %3083 = load double, double* %3082, align 8
  %3084 = fmul double %3081, %3083
  store double %3084, double* %257, align 1, !tbaa !2453
  %3085 = add i64 %2976, -64
  %3086 = add i64 %2978, 84
  store i64 %3086, i64* %PC, align 8
  %3087 = inttoptr i64 %3085 to i64*
  %3088 = load i64, i64* %3087, align 8
  store i64 %3088, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %3089 = add i64 %2976, -152
  %3090 = add i64 %2978, 91
  store i64 %3090, i64* %PC, align 8
  %3091 = inttoptr i64 %3089 to i64*
  %3092 = load i64, i64* %3091, align 8
  store i64 %3092, i64* %RAX, align 8, !tbaa !2450
  %3093 = add i64 %2978, 98
  store i64 %3093, i64* %PC, align 8
  %3094 = load i32, i32* %3012, align 4
  %3095 = sext i32 %3094 to i64
  store i64 %3095, i64* %RCX, align 8, !tbaa !2450
  %3096 = shl nsw i64 %3095, 3
  %3097 = add i64 %3096, %3092
  %3098 = add i64 %2978, 103
  store i64 %3098, i64* %PC, align 8
  %3099 = bitcast i64 %3088 to double
  %3100 = inttoptr i64 %3097 to double*
  %3101 = load double, double* %3100, align 8
  %3102 = fmul double %3099, %3101
  store double %3102, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3103 = load i64, i64* %RBP, align 8
  %3104 = add i64 %3103, -168
  %3105 = add i64 %2978, 110
  store i64 %3105, i64* %PC, align 8
  %3106 = inttoptr i64 %3104 to i64*
  %3107 = load i64, i64* %3106, align 8
  store i64 %3107, i64* %RAX, align 8, !tbaa !2450
  %3108 = add i64 %3103, -48
  %3109 = add i64 %2978, 114
  store i64 %3109, i64* %PC, align 8
  %3110 = inttoptr i64 %3108 to i32*
  %3111 = load i32, i32* %3110, align 4
  %3112 = sext i32 %3111 to i64
  store i64 %3112, i64* %RCX, align 8, !tbaa !2450
  %3113 = shl nsw i64 %3112, 3
  %3114 = add i64 %3113, %3107
  %3115 = add i64 %2978, 119
  store i64 %3115, i64* %PC, align 8
  %3116 = inttoptr i64 %3114 to double*
  %3117 = load double, double* %3116, align 8
  %3118 = fdiv double %3102, %3117
  store double %3118, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3119 = add i64 %3103, -104
  %3120 = add i64 %2978, 123
  store i64 %3120, i64* %PC, align 8
  %3121 = inttoptr i64 %3119 to i64*
  %3122 = load i64, i64* %3121, align 8
  store i64 %3122, i64* %RAX, align 8, !tbaa !2450
  %3123 = add i64 %3103, -188
  %3124 = add i64 %2978, 130
  store i64 %3124, i64* %PC, align 8
  %3125 = inttoptr i64 %3123 to i32*
  %3126 = load i32, i32* %3125, align 4
  %3127 = sext i32 %3126 to i64
  %3128 = mul nsw i64 %3127, 520
  store i64 %3128, i64* %RCX, align 8, !tbaa !2450
  %3129 = lshr i64 %3128, 63
  %3130 = add i64 %3128, %3122
  store i64 %3130, i64* %RAX, align 8, !tbaa !2450
  %3131 = icmp ult i64 %3130, %3122
  %3132 = icmp ult i64 %3130, %3128
  %3133 = or i1 %3131, %3132
  %3134 = zext i1 %3133 to i8
  store i8 %3134, i8* %42, align 1, !tbaa !2428
  %3135 = trunc i64 %3130 to i32
  %3136 = and i32 %3135, 255
  %3137 = tail call i32 @llvm.ctpop.i32(i32 %3136) #10
  %3138 = trunc i32 %3137 to i8
  %3139 = and i8 %3138, 1
  %3140 = xor i8 %3139, 1
  store i8 %3140, i8* %49, align 1, !tbaa !2445
  %3141 = xor i64 %3128, %3122
  %3142 = xor i64 %3141, %3130
  %3143 = lshr i64 %3142, 4
  %3144 = trunc i64 %3143 to i8
  %3145 = and i8 %3144, 1
  store i8 %3145, i8* %55, align 1, !tbaa !2446
  %3146 = icmp eq i64 %3130, 0
  %3147 = zext i1 %3146 to i8
  store i8 %3147, i8* %58, align 1, !tbaa !2447
  %3148 = lshr i64 %3130, 63
  %3149 = trunc i64 %3148 to i8
  store i8 %3149, i8* %61, align 1, !tbaa !2448
  %3150 = lshr i64 %3122, 63
  %3151 = xor i64 %3148, %3150
  %3152 = xor i64 %3148, %3129
  %3153 = add nuw nsw i64 %3151, %3152
  %3154 = icmp eq i64 %3153, 2
  %3155 = zext i1 %3154 to i8
  store i8 %3155, i8* %67, align 1, !tbaa !2449
  %3156 = add i64 %3103, -192
  %3157 = add i64 %2978, 147
  store i64 %3157, i64* %PC, align 8
  %3158 = inttoptr i64 %3156 to i32*
  %3159 = load i32, i32* %3158, align 4
  %3160 = sext i32 %3159 to i64
  store i64 %3160, i64* %RCX, align 8, !tbaa !2450
  %3161 = shl nsw i64 %3160, 3
  %3162 = add i64 %3161, %3130
  %3163 = add i64 %2978, 152
  store i64 %3163, i64* %PC, align 8
  %3164 = inttoptr i64 %3162 to double*
  %3165 = load double, double* %3164, align 8
  %3166 = fmul double %3118, %3165
  store double %3166, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3167 = load double, double* %257, align 1
  %3168 = fadd double %3166, %3167
  store double %3168, double* %257, align 1, !tbaa !2453
  %3169 = add i64 %3103, -64
  %3170 = add i64 %2978, 161
  store i64 %3170, i64* %PC, align 8
  %3171 = inttoptr i64 %3169 to i64*
  %3172 = load i64, i64* %3171, align 8
  store i64 %3172, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %3173 = add i64 %3103, -144
  %3174 = add i64 %2978, 168
  store i64 %3174, i64* %PC, align 8
  %3175 = inttoptr i64 %3173 to i64*
  %3176 = load i64, i64* %3175, align 8
  store i64 %3176, i64* %RAX, align 8, !tbaa !2450
  %3177 = add i64 %2978, 175
  store i64 %3177, i64* %PC, align 8
  %3178 = load i32, i32* %3125, align 4
  %3179 = sext i32 %3178 to i64
  store i64 %3179, i64* %RCX, align 8, !tbaa !2450
  %3180 = shl nsw i64 %3179, 3
  %3181 = add i64 %3180, %3176
  %3182 = add i64 %2978, 180
  store i64 %3182, i64* %PC, align 8
  %3183 = bitcast i64 %3172 to double
  %3184 = inttoptr i64 %3181 to double*
  %3185 = load double, double* %3184, align 8
  %3186 = fmul double %3183, %3185
  store double %3186, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3187 = add i64 %2978, 187
  store i64 %3187, i64* %PC, align 8
  %3188 = load i64, i64* %3106, align 8
  store i64 %3188, i64* %RAX, align 8, !tbaa !2450
  %3189 = add i64 %2978, 191
  store i64 %3189, i64* %PC, align 8
  %3190 = load i32, i32* %3110, align 4
  %3191 = sext i32 %3190 to i64
  store i64 %3191, i64* %RCX, align 8, !tbaa !2450
  %3192 = shl nsw i64 %3191, 3
  %3193 = add i64 %3192, %3188
  %3194 = add i64 %2978, 196
  store i64 %3194, i64* %PC, align 8
  %3195 = inttoptr i64 %3193 to double*
  %3196 = load double, double* %3195, align 8
  %3197 = fdiv double %3186, %3196
  store double %3197, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3198 = add i64 %3103, -112
  %3199 = add i64 %2978, 200
  store i64 %3199, i64* %PC, align 8
  %3200 = inttoptr i64 %3198 to i64*
  %3201 = load i64, i64* %3200, align 8
  store i64 %3201, i64* %RAX, align 8, !tbaa !2450
  %3202 = add i64 %2978, 207
  store i64 %3202, i64* %PC, align 8
  %3203 = load i32, i32* %3125, align 4
  %3204 = sext i32 %3203 to i64
  %3205 = mul nsw i64 %3204, 33800
  store i64 %3205, i64* %RCX, align 8, !tbaa !2450
  %3206 = lshr i64 %3205, 63
  %3207 = add i64 %3205, %3201
  store i64 %3207, i64* %RAX, align 8, !tbaa !2450
  %3208 = icmp ult i64 %3207, %3201
  %3209 = icmp ult i64 %3207, %3205
  %3210 = or i1 %3208, %3209
  %3211 = zext i1 %3210 to i8
  store i8 %3211, i8* %42, align 1, !tbaa !2428
  %3212 = trunc i64 %3207 to i32
  %3213 = and i32 %3212, 255
  %3214 = tail call i32 @llvm.ctpop.i32(i32 %3213) #10
  %3215 = trunc i32 %3214 to i8
  %3216 = and i8 %3215, 1
  %3217 = xor i8 %3216, 1
  store i8 %3217, i8* %49, align 1, !tbaa !2445
  %3218 = xor i64 %3205, %3201
  %3219 = xor i64 %3218, %3207
  %3220 = lshr i64 %3219, 4
  %3221 = trunc i64 %3220 to i8
  %3222 = and i8 %3221, 1
  store i8 %3222, i8* %55, align 1, !tbaa !2446
  %3223 = icmp eq i64 %3207, 0
  %3224 = zext i1 %3223 to i8
  store i8 %3224, i8* %58, align 1, !tbaa !2447
  %3225 = lshr i64 %3207, 63
  %3226 = trunc i64 %3225 to i8
  store i8 %3226, i8* %61, align 1, !tbaa !2448
  %3227 = lshr i64 %3201, 63
  %3228 = xor i64 %3225, %3227
  %3229 = xor i64 %3225, %3206
  %3230 = add nuw nsw i64 %3228, %3229
  %3231 = icmp eq i64 %3230, 2
  %3232 = zext i1 %3231 to i8
  store i8 %3232, i8* %67, align 1, !tbaa !2449
  %3233 = load i64, i64* %RBP, align 8
  %3234 = add i64 %3233, -52
  %3235 = add i64 %2978, 221
  store i64 %3235, i64* %PC, align 8
  %3236 = inttoptr i64 %3234 to i32*
  %3237 = load i32, i32* %3236, align 4
  %3238 = sext i32 %3237 to i64
  %3239 = mul nsw i64 %3238, 520
  store i64 %3239, i64* %RCX, align 8, !tbaa !2450
  %3240 = lshr i64 %3239, 63
  %3241 = add i64 %3239, %3207
  store i64 %3241, i64* %RAX, align 8, !tbaa !2450
  %3242 = icmp ult i64 %3241, %3207
  %3243 = icmp ult i64 %3241, %3239
  %3244 = or i1 %3242, %3243
  %3245 = zext i1 %3244 to i8
  store i8 %3245, i8* %42, align 1, !tbaa !2428
  %3246 = trunc i64 %3241 to i32
  %3247 = and i32 %3246, 255
  %3248 = tail call i32 @llvm.ctpop.i32(i32 %3247) #10
  %3249 = trunc i32 %3248 to i8
  %3250 = and i8 %3249, 1
  %3251 = xor i8 %3250, 1
  store i8 %3251, i8* %49, align 1, !tbaa !2445
  %3252 = xor i64 %3239, %3207
  %3253 = xor i64 %3252, %3241
  %3254 = lshr i64 %3253, 4
  %3255 = trunc i64 %3254 to i8
  %3256 = and i8 %3255, 1
  store i8 %3256, i8* %55, align 1, !tbaa !2446
  %3257 = icmp eq i64 %3241, 0
  %3258 = zext i1 %3257 to i8
  store i8 %3258, i8* %58, align 1, !tbaa !2447
  %3259 = lshr i64 %3241, 63
  %3260 = trunc i64 %3259 to i8
  store i8 %3260, i8* %61, align 1, !tbaa !2448
  %3261 = xor i64 %3259, %3225
  %3262 = xor i64 %3259, %3240
  %3263 = add nuw nsw i64 %3261, %3262
  %3264 = icmp eq i64 %3263, 2
  %3265 = zext i1 %3264 to i8
  store i8 %3265, i8* %67, align 1, !tbaa !2449
  %3266 = add i64 %3233, -48
  %3267 = add i64 %2978, 235
  store i64 %3267, i64* %PC, align 8
  %3268 = inttoptr i64 %3266 to i32*
  %3269 = load i32, i32* %3268, align 4
  %3270 = sext i32 %3269 to i64
  store i64 %3270, i64* %RCX, align 8, !tbaa !2450
  %3271 = shl nsw i64 %3270, 3
  %3272 = add i64 %3271, %3241
  %3273 = add i64 %2978, 240
  store i64 %3273, i64* %PC, align 8
  %3274 = load double, double* %155, align 1
  %3275 = inttoptr i64 %3272 to double*
  %3276 = load double, double* %3275, align 8
  %3277 = fmul double %3274, %3276
  store double %3277, double* %155, align 1, !tbaa !2453
  %3278 = load double, double* %257, align 1
  %3279 = fsub double %3278, %3277
  store double %3279, double* %257, align 1, !tbaa !2453
  %3280 = add i64 %3233, -136
  %3281 = add i64 %2978, 251
  store i64 %3281, i64* %PC, align 8
  %3282 = inttoptr i64 %3280 to i64*
  %3283 = load i64, i64* %3282, align 8
  store i64 %3283, i64* %RAX, align 8, !tbaa !2450
  %3284 = add i64 %3233, -188
  %3285 = add i64 %2978, 258
  store i64 %3285, i64* %PC, align 8
  %3286 = inttoptr i64 %3284 to i32*
  %3287 = load i32, i32* %3286, align 4
  %3288 = sext i32 %3287 to i64
  %3289 = mul nsw i64 %3288, 33800
  store i64 %3289, i64* %RCX, align 8, !tbaa !2450
  %3290 = lshr i64 %3289, 63
  %3291 = add i64 %3289, %3283
  store i64 %3291, i64* %RAX, align 8, !tbaa !2450
  %3292 = icmp ult i64 %3291, %3283
  %3293 = icmp ult i64 %3291, %3289
  %3294 = or i1 %3292, %3293
  %3295 = zext i1 %3294 to i8
  store i8 %3295, i8* %42, align 1, !tbaa !2428
  %3296 = trunc i64 %3291 to i32
  %3297 = and i32 %3296, 255
  %3298 = tail call i32 @llvm.ctpop.i32(i32 %3297) #10
  %3299 = trunc i32 %3298 to i8
  %3300 = and i8 %3299, 1
  %3301 = xor i8 %3300, 1
  store i8 %3301, i8* %49, align 1, !tbaa !2445
  %3302 = xor i64 %3289, %3283
  %3303 = xor i64 %3302, %3291
  %3304 = lshr i64 %3303, 4
  %3305 = trunc i64 %3304 to i8
  %3306 = and i8 %3305, 1
  store i8 %3306, i8* %55, align 1, !tbaa !2446
  %3307 = icmp eq i64 %3291, 0
  %3308 = zext i1 %3307 to i8
  store i8 %3308, i8* %58, align 1, !tbaa !2447
  %3309 = lshr i64 %3291, 63
  %3310 = trunc i64 %3309 to i8
  store i8 %3310, i8* %61, align 1, !tbaa !2448
  %3311 = lshr i64 %3283, 63
  %3312 = xor i64 %3309, %3311
  %3313 = xor i64 %3309, %3290
  %3314 = add nuw nsw i64 %3312, %3313
  %3315 = icmp eq i64 %3314, 2
  %3316 = zext i1 %3315 to i8
  store i8 %3316, i8* %67, align 1, !tbaa !2449
  %3317 = load i64, i64* %RBP, align 8
  %3318 = add i64 %3317, -52
  %3319 = add i64 %2978, 272
  store i64 %3319, i64* %PC, align 8
  %3320 = inttoptr i64 %3318 to i32*
  %3321 = load i32, i32* %3320, align 4
  %3322 = sext i32 %3321 to i64
  %3323 = mul nsw i64 %3322, 520
  store i64 %3323, i64* %RCX, align 8, !tbaa !2450
  %3324 = lshr i64 %3323, 63
  %3325 = add i64 %3323, %3291
  store i64 %3325, i64* %RAX, align 8, !tbaa !2450
  %3326 = icmp ult i64 %3325, %3291
  %3327 = icmp ult i64 %3325, %3323
  %3328 = or i1 %3326, %3327
  %3329 = zext i1 %3328 to i8
  store i8 %3329, i8* %42, align 1, !tbaa !2428
  %3330 = trunc i64 %3325 to i32
  %3331 = and i32 %3330, 255
  %3332 = tail call i32 @llvm.ctpop.i32(i32 %3331) #10
  %3333 = trunc i32 %3332 to i8
  %3334 = and i8 %3333, 1
  %3335 = xor i8 %3334, 1
  store i8 %3335, i8* %49, align 1, !tbaa !2445
  %3336 = xor i64 %3323, %3291
  %3337 = xor i64 %3336, %3325
  %3338 = lshr i64 %3337, 4
  %3339 = trunc i64 %3338 to i8
  %3340 = and i8 %3339, 1
  store i8 %3340, i8* %55, align 1, !tbaa !2446
  %3341 = icmp eq i64 %3325, 0
  %3342 = zext i1 %3341 to i8
  store i8 %3342, i8* %58, align 1, !tbaa !2447
  %3343 = lshr i64 %3325, 63
  %3344 = trunc i64 %3343 to i8
  store i8 %3344, i8* %61, align 1, !tbaa !2448
  %3345 = xor i64 %3343, %3309
  %3346 = xor i64 %3343, %3324
  %3347 = add nuw nsw i64 %3345, %3346
  %3348 = icmp eq i64 %3347, 2
  %3349 = zext i1 %3348 to i8
  store i8 %3349, i8* %67, align 1, !tbaa !2449
  %3350 = add i64 %3317, -48
  %3351 = add i64 %2978, 286
  store i64 %3351, i64* %PC, align 8
  %3352 = inttoptr i64 %3350 to i32*
  %3353 = load i32, i32* %3352, align 4
  %3354 = sext i32 %3353 to i64
  store i64 %3354, i64* %RCX, align 8, !tbaa !2450
  %3355 = shl nsw i64 %3354, 3
  %3356 = add i64 %3355, %3325
  %3357 = add i64 %2978, 291
  store i64 %3357, i64* %PC, align 8
  %3358 = load i64, i64* %148, align 1
  %3359 = inttoptr i64 %3356 to i64*
  store i64 %3358, i64* %3359, align 8
  %3360 = load i64, i64* %RBP, align 8
  %3361 = add i64 %3360, -104
  %3362 = load i64, i64* %PC, align 8
  %3363 = add i64 %3362, 4
  store i64 %3363, i64* %PC, align 8
  %3364 = inttoptr i64 %3361 to i64*
  %3365 = load i64, i64* %3364, align 8
  store i64 %3365, i64* %RAX, align 8, !tbaa !2450
  %3366 = add i64 %3360, -188
  %3367 = add i64 %3362, 11
  store i64 %3367, i64* %PC, align 8
  %3368 = inttoptr i64 %3366 to i32*
  %3369 = load i32, i32* %3368, align 4
  %3370 = sext i32 %3369 to i64
  %3371 = mul nsw i64 %3370, 520
  store i64 %3371, i64* %RCX, align 8, !tbaa !2450
  %3372 = lshr i64 %3371, 63
  %3373 = add i64 %3371, %3365
  store i64 %3373, i64* %RAX, align 8, !tbaa !2450
  %3374 = icmp ult i64 %3373, %3365
  %3375 = icmp ult i64 %3373, %3371
  %3376 = or i1 %3374, %3375
  %3377 = zext i1 %3376 to i8
  store i8 %3377, i8* %42, align 1, !tbaa !2428
  %3378 = trunc i64 %3373 to i32
  %3379 = and i32 %3378, 255
  %3380 = tail call i32 @llvm.ctpop.i32(i32 %3379) #10
  %3381 = trunc i32 %3380 to i8
  %3382 = and i8 %3381, 1
  %3383 = xor i8 %3382, 1
  store i8 %3383, i8* %49, align 1, !tbaa !2445
  %3384 = xor i64 %3371, %3365
  %3385 = xor i64 %3384, %3373
  %3386 = lshr i64 %3385, 4
  %3387 = trunc i64 %3386 to i8
  %3388 = and i8 %3387, 1
  store i8 %3388, i8* %55, align 1, !tbaa !2446
  %3389 = icmp eq i64 %3373, 0
  %3390 = zext i1 %3389 to i8
  store i8 %3390, i8* %58, align 1, !tbaa !2447
  %3391 = lshr i64 %3373, 63
  %3392 = trunc i64 %3391 to i8
  store i8 %3392, i8* %61, align 1, !tbaa !2448
  %3393 = lshr i64 %3365, 63
  %3394 = xor i64 %3391, %3393
  %3395 = xor i64 %3391, %3372
  %3396 = add nuw nsw i64 %3394, %3395
  %3397 = icmp eq i64 %3396, 2
  %3398 = zext i1 %3397 to i8
  store i8 %3398, i8* %67, align 1, !tbaa !2449
  %3399 = add i64 %3360, -192
  %3400 = add i64 %3362, 28
  store i64 %3400, i64* %PC, align 8
  %3401 = inttoptr i64 %3399 to i32*
  %3402 = load i32, i32* %3401, align 4
  %3403 = sext i32 %3402 to i64
  store i64 %3403, i64* %RCX, align 8, !tbaa !2450
  %3404 = shl nsw i64 %3403, 3
  %3405 = add i64 %3404, %3373
  %3406 = add i64 %3362, 33
  store i64 %3406, i64* %PC, align 8
  %3407 = inttoptr i64 %3405 to i64*
  %3408 = load i64, i64* %3407, align 8
  store i64 %3408, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3409 = add i64 %3360, -112
  %3410 = add i64 %3362, 37
  store i64 %3410, i64* %PC, align 8
  %3411 = inttoptr i64 %3409 to i64*
  %3412 = load i64, i64* %3411, align 8
  store i64 %3412, i64* %RAX, align 8, !tbaa !2450
  %3413 = add i64 %3362, 44
  store i64 %3413, i64* %PC, align 8
  %3414 = load i32, i32* %3368, align 4
  %3415 = sext i32 %3414 to i64
  %3416 = mul nsw i64 %3415, 33800
  store i64 %3416, i64* %RCX, align 8, !tbaa !2450
  %3417 = lshr i64 %3416, 63
  %3418 = add i64 %3416, %3412
  store i64 %3418, i64* %RAX, align 8, !tbaa !2450
  %3419 = icmp ult i64 %3418, %3412
  %3420 = icmp ult i64 %3418, %3416
  %3421 = or i1 %3419, %3420
  %3422 = zext i1 %3421 to i8
  store i8 %3422, i8* %42, align 1, !tbaa !2428
  %3423 = trunc i64 %3418 to i32
  %3424 = and i32 %3423, 255
  %3425 = tail call i32 @llvm.ctpop.i32(i32 %3424) #10
  %3426 = trunc i32 %3425 to i8
  %3427 = and i8 %3426, 1
  %3428 = xor i8 %3427, 1
  store i8 %3428, i8* %49, align 1, !tbaa !2445
  %3429 = xor i64 %3416, %3412
  %3430 = xor i64 %3429, %3418
  %3431 = lshr i64 %3430, 4
  %3432 = trunc i64 %3431 to i8
  %3433 = and i8 %3432, 1
  store i8 %3433, i8* %55, align 1, !tbaa !2446
  %3434 = icmp eq i64 %3418, 0
  %3435 = zext i1 %3434 to i8
  store i8 %3435, i8* %58, align 1, !tbaa !2447
  %3436 = lshr i64 %3418, 63
  %3437 = trunc i64 %3436 to i8
  store i8 %3437, i8* %61, align 1, !tbaa !2448
  %3438 = lshr i64 %3412, 63
  %3439 = xor i64 %3436, %3438
  %3440 = xor i64 %3436, %3417
  %3441 = add nuw nsw i64 %3439, %3440
  %3442 = icmp eq i64 %3441, 2
  %3443 = zext i1 %3442 to i8
  store i8 %3443, i8* %67, align 1, !tbaa !2449
  %3444 = load i64, i64* %RBP, align 8
  %3445 = add i64 %3444, -52
  %3446 = add i64 %3362, 58
  store i64 %3446, i64* %PC, align 8
  %3447 = inttoptr i64 %3445 to i32*
  %3448 = load i32, i32* %3447, align 4
  %3449 = sext i32 %3448 to i64
  %3450 = mul nsw i64 %3449, 520
  store i64 %3450, i64* %RCX, align 8, !tbaa !2450
  %3451 = lshr i64 %3450, 63
  %3452 = add i64 %3450, %3418
  store i64 %3452, i64* %RAX, align 8, !tbaa !2450
  %3453 = icmp ult i64 %3452, %3418
  %3454 = icmp ult i64 %3452, %3450
  %3455 = or i1 %3453, %3454
  %3456 = zext i1 %3455 to i8
  store i8 %3456, i8* %42, align 1, !tbaa !2428
  %3457 = trunc i64 %3452 to i32
  %3458 = and i32 %3457, 255
  %3459 = tail call i32 @llvm.ctpop.i32(i32 %3458) #10
  %3460 = trunc i32 %3459 to i8
  %3461 = and i8 %3460, 1
  %3462 = xor i8 %3461, 1
  store i8 %3462, i8* %49, align 1, !tbaa !2445
  %3463 = xor i64 %3450, %3418
  %3464 = xor i64 %3463, %3452
  %3465 = lshr i64 %3464, 4
  %3466 = trunc i64 %3465 to i8
  %3467 = and i8 %3466, 1
  store i8 %3467, i8* %55, align 1, !tbaa !2446
  %3468 = icmp eq i64 %3452, 0
  %3469 = zext i1 %3468 to i8
  store i8 %3469, i8* %58, align 1, !tbaa !2447
  %3470 = lshr i64 %3452, 63
  %3471 = trunc i64 %3470 to i8
  store i8 %3471, i8* %61, align 1, !tbaa !2448
  %3472 = xor i64 %3470, %3436
  %3473 = xor i64 %3470, %3451
  %3474 = add nuw nsw i64 %3472, %3473
  %3475 = icmp eq i64 %3474, 2
  %3476 = zext i1 %3475 to i8
  store i8 %3476, i8* %67, align 1, !tbaa !2449
  %3477 = add i64 %3444, -48
  %3478 = add i64 %3362, 72
  store i64 %3478, i64* %PC, align 8
  %3479 = inttoptr i64 %3477 to i32*
  %3480 = load i32, i32* %3479, align 4
  %3481 = sext i32 %3480 to i64
  store i64 %3481, i64* %RCX, align 8, !tbaa !2450
  %3482 = shl nsw i64 %3481, 3
  %3483 = add i64 %3482, %3452
  %3484 = add i64 %3362, 77
  store i64 %3484, i64* %PC, align 8
  %3485 = load i64, i64* %148, align 1
  %3486 = inttoptr i64 %3483 to i64*
  store i64 %3485, i64* %3486, align 8
  %3487 = load i64, i64* %RBP, align 8
  %3488 = add i64 %3487, -192
  %3489 = load i64, i64* %PC, align 8
  %3490 = add i64 %3489, 6
  store i64 %3490, i64* %PC, align 8
  %3491 = inttoptr i64 %3488 to i32*
  %3492 = load i32, i32* %3491, align 4
  %3493 = add i32 %3492, 1
  %3494 = zext i32 %3493 to i64
  store i64 %3494, i64* %RAX, align 8, !tbaa !2450
  %3495 = icmp eq i32 %3492, -1
  %3496 = icmp eq i32 %3493, 0
  %3497 = or i1 %3495, %3496
  %3498 = zext i1 %3497 to i8
  store i8 %3498, i8* %42, align 1, !tbaa !2428
  %3499 = and i32 %3493, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499) #10
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %49, align 1, !tbaa !2445
  %3504 = xor i32 %3493, %3492
  %3505 = lshr i32 %3504, 4
  %3506 = trunc i32 %3505 to i8
  %3507 = and i8 %3506, 1
  store i8 %3507, i8* %55, align 1, !tbaa !2446
  %3508 = zext i1 %3496 to i8
  store i8 %3508, i8* %58, align 1, !tbaa !2447
  %3509 = lshr i32 %3493, 31
  %3510 = trunc i32 %3509 to i8
  store i8 %3510, i8* %61, align 1, !tbaa !2448
  %3511 = lshr i32 %3492, 31
  %3512 = xor i32 %3509, %3511
  %3513 = add nuw nsw i32 %3512, %3509
  %3514 = icmp eq i32 %3513, 2
  %3515 = zext i1 %3514 to i8
  store i8 %3515, i8* %67, align 1, !tbaa !2449
  %3516 = add i64 %3489, 15
  store i64 %3516, i64* %PC, align 8
  store i32 %3493, i32* %3491, align 4
  %3517 = load i64, i64* %PC, align 8
  %3518 = add i64 %3517, -3219
  store i64 %3518, i64* %PC, align 8, !tbaa !2450
  br label %block_40235a

block_402382:                                     ; preds = %block_402373
  %3519 = add i64 %1327, 45
  store i64 %3519, i64* %PC, align 8
  %3520 = load i32, i32* %1294, align 4
  %3521 = sext i32 %3520 to i64
  store i64 %3521, i64* %RCX, align 8, !tbaa !2450
  %3522 = shl nsw i64 %3521, 3
  %3523 = add i64 %3522, %1373
  %3524 = add i64 %1327, 50
  store i64 %3524, i64* %PC, align 8
  %3525 = inttoptr i64 %3523 to i64*
  %3526 = load i64, i64* %3525, align 8
  store i64 %3526, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3527 = add i64 %1327, 54
  store i64 %3527, i64* %PC, align 8
  %3528 = load i64, i64* %1330, align 8
  store i64 %3528, i64* %RAX, align 8, !tbaa !2450
  %3529 = add i64 %1327, 61
  store i64 %3529, i64* %PC, align 8
  %3530 = load i32, i32* %1334, align 4
  %3531 = sext i32 %3530 to i64
  %3532 = mul nsw i64 %3531, 33800
  store i64 %3532, i64* %RCX, align 8, !tbaa !2450
  %3533 = lshr i64 %3532, 63
  %3534 = add i64 %3532, %3528
  store i64 %3534, i64* %RAX, align 8, !tbaa !2450
  %3535 = icmp ult i64 %3534, %3528
  %3536 = icmp ult i64 %3534, %3532
  %3537 = or i1 %3535, %3536
  %3538 = zext i1 %3537 to i8
  store i8 %3538, i8* %42, align 1, !tbaa !2428
  %3539 = trunc i64 %3534 to i32
  %3540 = and i32 %3539, 255
  %3541 = tail call i32 @llvm.ctpop.i32(i32 %3540) #10
  %3542 = trunc i32 %3541 to i8
  %3543 = and i8 %3542, 1
  %3544 = xor i8 %3543, 1
  store i8 %3544, i8* %49, align 1, !tbaa !2445
  %3545 = xor i64 %3532, %3528
  %3546 = xor i64 %3545, %3534
  %3547 = lshr i64 %3546, 4
  %3548 = trunc i64 %3547 to i8
  %3549 = and i8 %3548, 1
  store i8 %3549, i8* %55, align 1, !tbaa !2446
  %3550 = icmp eq i64 %3534, 0
  %3551 = zext i1 %3550 to i8
  store i8 %3551, i8* %58, align 1, !tbaa !2447
  %3552 = lshr i64 %3534, 63
  %3553 = trunc i64 %3552 to i8
  store i8 %3553, i8* %61, align 1, !tbaa !2448
  %3554 = lshr i64 %3528, 63
  %3555 = xor i64 %3552, %3554
  %3556 = xor i64 %3552, %3533
  %3557 = add nuw nsw i64 %3555, %3556
  %3558 = icmp eq i64 %3557, 2
  %3559 = zext i1 %3558 to i8
  store i8 %3559, i8* %67, align 1, !tbaa !2449
  %3560 = add i64 %1327, 77
  store i64 %3560, i64* %PC, align 8
  %3561 = load i32, i32* %1367, align 4
  %3562 = add i32 %3561, 1
  %3563 = zext i32 %3562 to i64
  store i64 %3563, i64* %RDX, align 8, !tbaa !2450
  %3564 = sext i32 %3562 to i64
  %3565 = mul nsw i64 %3564, 520
  store i64 %3565, i64* %RCX, align 8, !tbaa !2450
  %3566 = lshr i64 %3565, 63
  %3567 = add i64 %3565, %3534
  store i64 %3567, i64* %RAX, align 8, !tbaa !2450
  %3568 = icmp ult i64 %3567, %3534
  %3569 = icmp ult i64 %3567, %3565
  %3570 = or i1 %3568, %3569
  %3571 = zext i1 %3570 to i8
  store i8 %3571, i8* %42, align 1, !tbaa !2428
  %3572 = trunc i64 %3567 to i32
  %3573 = and i32 %3572, 255
  %3574 = tail call i32 @llvm.ctpop.i32(i32 %3573) #10
  %3575 = trunc i32 %3574 to i8
  %3576 = and i8 %3575, 1
  %3577 = xor i8 %3576, 1
  store i8 %3577, i8* %49, align 1, !tbaa !2445
  %3578 = xor i64 %3565, %3534
  %3579 = xor i64 %3578, %3567
  %3580 = lshr i64 %3579, 4
  %3581 = trunc i64 %3580 to i8
  %3582 = and i8 %3581, 1
  store i8 %3582, i8* %55, align 1, !tbaa !2446
  %3583 = icmp eq i64 %3567, 0
  %3584 = zext i1 %3583 to i8
  store i8 %3584, i8* %58, align 1, !tbaa !2447
  %3585 = lshr i64 %3567, 63
  %3586 = trunc i64 %3585 to i8
  store i8 %3586, i8* %61, align 1, !tbaa !2448
  %3587 = xor i64 %3585, %3552
  %3588 = xor i64 %3585, %3566
  %3589 = add nuw nsw i64 %3587, %3588
  %3590 = icmp eq i64 %3589, 2
  %3591 = zext i1 %3590 to i8
  store i8 %3591, i8* %67, align 1, !tbaa !2449
  %3592 = load i64, i64* %RBP, align 8
  %3593 = add i64 %3592, -196
  %3594 = add i64 %1327, 100
  store i64 %3594, i64* %PC, align 8
  %3595 = inttoptr i64 %3593 to i32*
  %3596 = load i32, i32* %3595, align 4
  %3597 = sext i32 %3596 to i64
  store i64 %3597, i64* %RCX, align 8, !tbaa !2450
  %3598 = shl nsw i64 %3597, 3
  %3599 = add i64 %3598, %3567
  %3600 = add i64 %1327, 105
  store i64 %3600, i64* %PC, align 8
  %3601 = load double, double* %257, align 1
  %3602 = inttoptr i64 %3599 to double*
  %3603 = load double, double* %3602, align 8
  %3604 = fsub double %3601, %3603
  store double %3604, double* %257, align 1, !tbaa !2453
  %3605 = add i64 %3592, -128
  %3606 = add i64 %1327, 109
  store i64 %3606, i64* %PC, align 8
  %3607 = inttoptr i64 %3605 to i64*
  %3608 = load i64, i64* %3607, align 8
  store i64 %3608, i64* %RAX, align 8, !tbaa !2450
  %3609 = add i64 %3592, -188
  %3610 = add i64 %1327, 116
  store i64 %3610, i64* %PC, align 8
  %3611 = inttoptr i64 %3609 to i32*
  %3612 = load i32, i32* %3611, align 4
  %3613 = sext i32 %3612 to i64
  %3614 = mul nsw i64 %3613, 33800
  store i64 %3614, i64* %RCX, align 8, !tbaa !2450
  %3615 = lshr i64 %3614, 63
  %3616 = add i64 %3614, %3608
  store i64 %3616, i64* %RAX, align 8, !tbaa !2450
  %3617 = icmp ult i64 %3616, %3608
  %3618 = icmp ult i64 %3616, %3614
  %3619 = or i1 %3617, %3618
  %3620 = zext i1 %3619 to i8
  store i8 %3620, i8* %42, align 1, !tbaa !2428
  %3621 = trunc i64 %3616 to i32
  %3622 = and i32 %3621, 255
  %3623 = tail call i32 @llvm.ctpop.i32(i32 %3622) #10
  %3624 = trunc i32 %3623 to i8
  %3625 = and i8 %3624, 1
  %3626 = xor i8 %3625, 1
  store i8 %3626, i8* %49, align 1, !tbaa !2445
  %3627 = xor i64 %3614, %3608
  %3628 = xor i64 %3627, %3616
  %3629 = lshr i64 %3628, 4
  %3630 = trunc i64 %3629 to i8
  %3631 = and i8 %3630, 1
  store i8 %3631, i8* %55, align 1, !tbaa !2446
  %3632 = icmp eq i64 %3616, 0
  %3633 = zext i1 %3632 to i8
  store i8 %3633, i8* %58, align 1, !tbaa !2447
  %3634 = lshr i64 %3616, 63
  %3635 = trunc i64 %3634 to i8
  store i8 %3635, i8* %61, align 1, !tbaa !2448
  %3636 = lshr i64 %3608, 63
  %3637 = xor i64 %3634, %3636
  %3638 = xor i64 %3634, %3615
  %3639 = add nuw nsw i64 %3637, %3638
  %3640 = icmp eq i64 %3639, 2
  %3641 = zext i1 %3640 to i8
  store i8 %3641, i8* %67, align 1, !tbaa !2449
  %3642 = add i64 %3592, -192
  %3643 = add i64 %1327, 133
  store i64 %3643, i64* %PC, align 8
  %3644 = inttoptr i64 %3642 to i32*
  %3645 = load i32, i32* %3644, align 4
  %3646 = sext i32 %3645 to i64
  %3647 = mul nsw i64 %3646, 520
  store i64 %3647, i64* %RCX, align 8, !tbaa !2450
  %3648 = lshr i64 %3647, 63
  %3649 = add i64 %3647, %3616
  store i64 %3649, i64* %RAX, align 8, !tbaa !2450
  %3650 = icmp ult i64 %3649, %3616
  %3651 = icmp ult i64 %3649, %3647
  %3652 = or i1 %3650, %3651
  %3653 = zext i1 %3652 to i8
  store i8 %3653, i8* %42, align 1, !tbaa !2428
  %3654 = trunc i64 %3649 to i32
  %3655 = and i32 %3654, 255
  %3656 = tail call i32 @llvm.ctpop.i32(i32 %3655) #10
  %3657 = trunc i32 %3656 to i8
  %3658 = and i8 %3657, 1
  %3659 = xor i8 %3658, 1
  store i8 %3659, i8* %49, align 1, !tbaa !2445
  %3660 = xor i64 %3647, %3616
  %3661 = xor i64 %3660, %3649
  %3662 = lshr i64 %3661, 4
  %3663 = trunc i64 %3662 to i8
  %3664 = and i8 %3663, 1
  store i8 %3664, i8* %55, align 1, !tbaa !2446
  %3665 = icmp eq i64 %3649, 0
  %3666 = zext i1 %3665 to i8
  store i8 %3666, i8* %58, align 1, !tbaa !2447
  %3667 = lshr i64 %3649, 63
  %3668 = trunc i64 %3667 to i8
  store i8 %3668, i8* %61, align 1, !tbaa !2448
  %3669 = xor i64 %3667, %3634
  %3670 = xor i64 %3667, %3648
  %3671 = add nuw nsw i64 %3669, %3670
  %3672 = icmp eq i64 %3671, 2
  %3673 = zext i1 %3672 to i8
  store i8 %3673, i8* %67, align 1, !tbaa !2449
  %3674 = load i64, i64* %RBP, align 8
  %3675 = add i64 %3674, -196
  %3676 = add i64 %1327, 149
  store i64 %3676, i64* %PC, align 8
  %3677 = inttoptr i64 %3675 to i32*
  %3678 = load i32, i32* %3677, align 4
  %3679 = add i32 %3678, 1
  %3680 = zext i32 %3679 to i64
  store i64 %3680, i64* %RDX, align 8, !tbaa !2450
  %3681 = icmp eq i32 %3678, -1
  %3682 = icmp eq i32 %3679, 0
  %3683 = or i1 %3681, %3682
  %3684 = zext i1 %3683 to i8
  store i8 %3684, i8* %42, align 1, !tbaa !2428
  %3685 = and i32 %3679, 255
  %3686 = tail call i32 @llvm.ctpop.i32(i32 %3685) #10
  %3687 = trunc i32 %3686 to i8
  %3688 = and i8 %3687, 1
  %3689 = xor i8 %3688, 1
  store i8 %3689, i8* %49, align 1, !tbaa !2445
  %3690 = xor i32 %3679, %3678
  %3691 = lshr i32 %3690, 4
  %3692 = trunc i32 %3691 to i8
  %3693 = and i8 %3692, 1
  store i8 %3693, i8* %55, align 1, !tbaa !2446
  %3694 = zext i1 %3682 to i8
  store i8 %3694, i8* %58, align 1, !tbaa !2447
  %3695 = lshr i32 %3679, 31
  %3696 = trunc i32 %3695 to i8
  store i8 %3696, i8* %61, align 1, !tbaa !2448
  %3697 = lshr i32 %3678, 31
  %3698 = xor i32 %3695, %3697
  %3699 = add nuw nsw i32 %3698, %3695
  %3700 = icmp eq i32 %3699, 2
  %3701 = zext i1 %3700 to i8
  store i8 %3701, i8* %67, align 1, !tbaa !2449
  %3702 = sext i32 %3679 to i64
  store i64 %3702, i64* %RCX, align 8, !tbaa !2450
  %3703 = shl nsw i64 %3702, 3
  %3704 = add i64 %3703, %3649
  %3705 = add i64 %1327, 160
  store i64 %3705, i64* %PC, align 8
  %3706 = load double, double* %257, align 1
  %3707 = inttoptr i64 %3704 to double*
  %3708 = load double, double* %3707, align 8
  %3709 = fadd double %3706, %3708
  store double %3709, double* %257, align 1, !tbaa !2453
  %3710 = add i64 %3674, -128
  %3711 = add i64 %1327, 164
  store i64 %3711, i64* %PC, align 8
  %3712 = inttoptr i64 %3710 to i64*
  %3713 = load i64, i64* %3712, align 8
  store i64 %3713, i64* %RAX, align 8, !tbaa !2450
  %3714 = add i64 %3674, -188
  %3715 = add i64 %1327, 171
  store i64 %3715, i64* %PC, align 8
  %3716 = inttoptr i64 %3714 to i32*
  %3717 = load i32, i32* %3716, align 4
  %3718 = sext i32 %3717 to i64
  %3719 = mul nsw i64 %3718, 33800
  store i64 %3719, i64* %RCX, align 8, !tbaa !2450
  %3720 = lshr i64 %3719, 63
  %3721 = add i64 %3719, %3713
  store i64 %3721, i64* %RAX, align 8, !tbaa !2450
  %3722 = icmp ult i64 %3721, %3713
  %3723 = icmp ult i64 %3721, %3719
  %3724 = or i1 %3722, %3723
  %3725 = zext i1 %3724 to i8
  store i8 %3725, i8* %42, align 1, !tbaa !2428
  %3726 = trunc i64 %3721 to i32
  %3727 = and i32 %3726, 255
  %3728 = tail call i32 @llvm.ctpop.i32(i32 %3727) #10
  %3729 = trunc i32 %3728 to i8
  %3730 = and i8 %3729, 1
  %3731 = xor i8 %3730, 1
  store i8 %3731, i8* %49, align 1, !tbaa !2445
  %3732 = xor i64 %3719, %3713
  %3733 = xor i64 %3732, %3721
  %3734 = lshr i64 %3733, 4
  %3735 = trunc i64 %3734 to i8
  %3736 = and i8 %3735, 1
  store i8 %3736, i8* %55, align 1, !tbaa !2446
  %3737 = icmp eq i64 %3721, 0
  %3738 = zext i1 %3737 to i8
  store i8 %3738, i8* %58, align 1, !tbaa !2447
  %3739 = lshr i64 %3721, 63
  %3740 = trunc i64 %3739 to i8
  store i8 %3740, i8* %61, align 1, !tbaa !2448
  %3741 = lshr i64 %3713, 63
  %3742 = xor i64 %3739, %3741
  %3743 = xor i64 %3739, %3720
  %3744 = add nuw nsw i64 %3742, %3743
  %3745 = icmp eq i64 %3744, 2
  %3746 = zext i1 %3745 to i8
  store i8 %3746, i8* %67, align 1, !tbaa !2449
  %3747 = add i64 %3674, -192
  %3748 = add i64 %1327, 188
  store i64 %3748, i64* %PC, align 8
  %3749 = inttoptr i64 %3747 to i32*
  %3750 = load i32, i32* %3749, align 4
  %3751 = sext i32 %3750 to i64
  %3752 = mul nsw i64 %3751, 520
  store i64 %3752, i64* %RCX, align 8, !tbaa !2450
  %3753 = lshr i64 %3752, 63
  %3754 = add i64 %3752, %3721
  store i64 %3754, i64* %RAX, align 8, !tbaa !2450
  %3755 = icmp ult i64 %3754, %3721
  %3756 = icmp ult i64 %3754, %3752
  %3757 = or i1 %3755, %3756
  %3758 = zext i1 %3757 to i8
  store i8 %3758, i8* %42, align 1, !tbaa !2428
  %3759 = trunc i64 %3754 to i32
  %3760 = and i32 %3759, 255
  %3761 = tail call i32 @llvm.ctpop.i32(i32 %3760) #10
  %3762 = trunc i32 %3761 to i8
  %3763 = and i8 %3762, 1
  %3764 = xor i8 %3763, 1
  store i8 %3764, i8* %49, align 1, !tbaa !2445
  %3765 = xor i64 %3752, %3721
  %3766 = xor i64 %3765, %3754
  %3767 = lshr i64 %3766, 4
  %3768 = trunc i64 %3767 to i8
  %3769 = and i8 %3768, 1
  store i8 %3769, i8* %55, align 1, !tbaa !2446
  %3770 = icmp eq i64 %3754, 0
  %3771 = zext i1 %3770 to i8
  store i8 %3771, i8* %58, align 1, !tbaa !2447
  %3772 = lshr i64 %3754, 63
  %3773 = trunc i64 %3772 to i8
  store i8 %3773, i8* %61, align 1, !tbaa !2448
  %3774 = xor i64 %3772, %3739
  %3775 = xor i64 %3772, %3753
  %3776 = add nuw nsw i64 %3774, %3775
  %3777 = icmp eq i64 %3776, 2
  %3778 = zext i1 %3777 to i8
  store i8 %3778, i8* %67, align 1, !tbaa !2449
  %3779 = add i64 %1327, 205
  store i64 %3779, i64* %PC, align 8
  %3780 = load i32, i32* %3677, align 4
  %3781 = sext i32 %3780 to i64
  store i64 %3781, i64* %RCX, align 8, !tbaa !2450
  %3782 = shl nsw i64 %3781, 3
  %3783 = add i64 %3782, %3754
  %3784 = add i64 %1327, 210
  store i64 %3784, i64* %PC, align 8
  %3785 = inttoptr i64 %3783 to double*
  %3786 = load double, double* %3785, align 8
  %3787 = fsub double %3709, %3786
  store double %3787, double* %257, align 1, !tbaa !2453
  %3788 = add i64 %3674, -96
  %3789 = add i64 %1327, 214
  store i64 %3789, i64* %PC, align 8
  %3790 = inttoptr i64 %3788 to i64*
  %3791 = load i64, i64* %3790, align 8
  store i64 %3791, i64* %RAX, align 8, !tbaa !2450
  %3792 = add i64 %1327, 221
  store i64 %3792, i64* %PC, align 8
  %3793 = load i32, i32* %3716, align 4
  %3794 = sext i32 %3793 to i64
  %3795 = mul nsw i64 %3794, 520
  store i64 %3795, i64* %RCX, align 8, !tbaa !2450
  %3796 = lshr i64 %3795, 63
  %3797 = add i64 %3795, %3791
  store i64 %3797, i64* %RAX, align 8, !tbaa !2450
  %3798 = icmp ult i64 %3797, %3791
  %3799 = icmp ult i64 %3797, %3795
  %3800 = or i1 %3798, %3799
  %3801 = zext i1 %3800 to i8
  store i8 %3801, i8* %42, align 1, !tbaa !2428
  %3802 = trunc i64 %3797 to i32
  %3803 = and i32 %3802, 255
  %3804 = tail call i32 @llvm.ctpop.i32(i32 %3803) #10
  %3805 = trunc i32 %3804 to i8
  %3806 = and i8 %3805, 1
  %3807 = xor i8 %3806, 1
  store i8 %3807, i8* %49, align 1, !tbaa !2445
  %3808 = xor i64 %3795, %3791
  %3809 = xor i64 %3808, %3797
  %3810 = lshr i64 %3809, 4
  %3811 = trunc i64 %3810 to i8
  %3812 = and i8 %3811, 1
  store i8 %3812, i8* %55, align 1, !tbaa !2446
  %3813 = icmp eq i64 %3797, 0
  %3814 = zext i1 %3813 to i8
  store i8 %3814, i8* %58, align 1, !tbaa !2447
  %3815 = lshr i64 %3797, 63
  %3816 = trunc i64 %3815 to i8
  store i8 %3816, i8* %61, align 1, !tbaa !2448
  %3817 = lshr i64 %3791, 63
  %3818 = xor i64 %3815, %3817
  %3819 = xor i64 %3815, %3796
  %3820 = add nuw nsw i64 %3818, %3819
  %3821 = icmp eq i64 %3820, 2
  %3822 = zext i1 %3821 to i8
  store i8 %3822, i8* %67, align 1, !tbaa !2449
  %3823 = load i64, i64* %RBP, align 8
  %3824 = add i64 %3823, -192
  %3825 = add i64 %1327, 238
  store i64 %3825, i64* %PC, align 8
  %3826 = inttoptr i64 %3824 to i32*
  %3827 = load i32, i32* %3826, align 4
  %3828 = sext i32 %3827 to i64
  store i64 %3828, i64* %RCX, align 8, !tbaa !2450
  %3829 = shl nsw i64 %3828, 3
  %3830 = add i64 %3829, %3797
  %3831 = add i64 %1327, 243
  store i64 %3831, i64* %PC, align 8
  %3832 = inttoptr i64 %3830 to double*
  store double %3787, double* %3832, align 8
  %3833 = load i64, i64* %RBP, align 8
  %3834 = add i64 %3833, -176
  %3835 = load i64, i64* %PC, align 8
  %3836 = add i64 %3835, 7
  store i64 %3836, i64* %PC, align 8
  %3837 = inttoptr i64 %3834 to i64*
  %3838 = load i64, i64* %3837, align 8
  store i64 %3838, i64* %RAX, align 8, !tbaa !2450
  %3839 = add i64 %3833, -192
  %3840 = add i64 %3835, 14
  store i64 %3840, i64* %PC, align 8
  %3841 = inttoptr i64 %3839 to i32*
  %3842 = load i32, i32* %3841, align 4
  %3843 = sext i32 %3842 to i64
  store i64 %3843, i64* %RCX, align 8, !tbaa !2450
  %3844 = shl nsw i64 %3843, 3
  %3845 = add i64 %3844, %3838
  %3846 = add i64 %3835, 19
  store i64 %3846, i64* %PC, align 8
  %3847 = inttoptr i64 %3845 to i64*
  %3848 = load i64, i64* %3847, align 8
  store i64 %3848, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3849 = add i64 %3833, -184
  %3850 = add i64 %3835, 26
  store i64 %3850, i64* %PC, align 8
  %3851 = inttoptr i64 %3849 to i64*
  %3852 = load i64, i64* %3851, align 8
  store i64 %3852, i64* %RAX, align 8, !tbaa !2450
  %3853 = add i64 %3835, 33
  store i64 %3853, i64* %PC, align 8
  %3854 = load i32, i32* %3841, align 4
  %3855 = sext i32 %3854 to i64
  store i64 %3855, i64* %RCX, align 8, !tbaa !2450
  %3856 = shl nsw i64 %3855, 3
  %3857 = add i64 %3856, %3852
  %3858 = add i64 %3835, 38
  store i64 %3858, i64* %PC, align 8
  %3859 = bitcast i64 %3848 to double
  %3860 = inttoptr i64 %3857 to double*
  %3861 = load double, double* %3860, align 8
  %3862 = fdiv double %3859, %3861
  store double %3862, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %3863 = add i64 %3833, -112
  %3864 = add i64 %3835, 42
  store i64 %3864, i64* %PC, align 8
  %3865 = inttoptr i64 %3863 to i64*
  %3866 = load i64, i64* %3865, align 8
  store i64 %3866, i64* %RAX, align 8, !tbaa !2450
  %3867 = add i64 %3833, -188
  %3868 = add i64 %3835, 49
  store i64 %3868, i64* %PC, align 8
  %3869 = inttoptr i64 %3867 to i32*
  %3870 = load i32, i32* %3869, align 4
  %3871 = sext i32 %3870 to i64
  %3872 = mul nsw i64 %3871, 33800
  store i64 %3872, i64* %RCX, align 8, !tbaa !2450
  %3873 = lshr i64 %3872, 63
  %3874 = add i64 %3872, %3866
  store i64 %3874, i64* %RAX, align 8, !tbaa !2450
  %3875 = icmp ult i64 %3874, %3866
  %3876 = icmp ult i64 %3874, %3872
  %3877 = or i1 %3875, %3876
  %3878 = zext i1 %3877 to i8
  store i8 %3878, i8* %42, align 1, !tbaa !2428
  %3879 = trunc i64 %3874 to i32
  %3880 = and i32 %3879, 255
  %3881 = tail call i32 @llvm.ctpop.i32(i32 %3880) #10
  %3882 = trunc i32 %3881 to i8
  %3883 = and i8 %3882, 1
  %3884 = xor i8 %3883, 1
  store i8 %3884, i8* %49, align 1, !tbaa !2445
  %3885 = xor i64 %3872, %3866
  %3886 = xor i64 %3885, %3874
  %3887 = lshr i64 %3886, 4
  %3888 = trunc i64 %3887 to i8
  %3889 = and i8 %3888, 1
  store i8 %3889, i8* %55, align 1, !tbaa !2446
  %3890 = icmp eq i64 %3874, 0
  %3891 = zext i1 %3890 to i8
  store i8 %3891, i8* %58, align 1, !tbaa !2447
  %3892 = lshr i64 %3874, 63
  %3893 = trunc i64 %3892 to i8
  store i8 %3893, i8* %61, align 1, !tbaa !2448
  %3894 = lshr i64 %3866, 63
  %3895 = xor i64 %3892, %3894
  %3896 = xor i64 %3892, %3873
  %3897 = add nuw nsw i64 %3895, %3896
  %3898 = icmp eq i64 %3897, 2
  %3899 = zext i1 %3898 to i8
  store i8 %3899, i8* %67, align 1, !tbaa !2449
  %3900 = add i64 %3835, 66
  store i64 %3900, i64* %PC, align 8
  %3901 = load i32, i32* %3841, align 4
  %3902 = sext i32 %3901 to i64
  %3903 = mul nsw i64 %3902, 520
  store i64 %3903, i64* %RCX, align 8, !tbaa !2450
  %3904 = lshr i64 %3903, 63
  %3905 = add i64 %3903, %3874
  store i64 %3905, i64* %RAX, align 8, !tbaa !2450
  %3906 = icmp ult i64 %3905, %3874
  %3907 = icmp ult i64 %3905, %3903
  %3908 = or i1 %3906, %3907
  %3909 = zext i1 %3908 to i8
  store i8 %3909, i8* %42, align 1, !tbaa !2428
  %3910 = trunc i64 %3905 to i32
  %3911 = and i32 %3910, 255
  %3912 = tail call i32 @llvm.ctpop.i32(i32 %3911) #10
  %3913 = trunc i32 %3912 to i8
  %3914 = and i8 %3913, 1
  %3915 = xor i8 %3914, 1
  store i8 %3915, i8* %49, align 1, !tbaa !2445
  %3916 = xor i64 %3903, %3874
  %3917 = xor i64 %3916, %3905
  %3918 = lshr i64 %3917, 4
  %3919 = trunc i64 %3918 to i8
  %3920 = and i8 %3919, 1
  store i8 %3920, i8* %55, align 1, !tbaa !2446
  %3921 = icmp eq i64 %3905, 0
  %3922 = zext i1 %3921 to i8
  store i8 %3922, i8* %58, align 1, !tbaa !2447
  %3923 = lshr i64 %3905, 63
  %3924 = trunc i64 %3923 to i8
  store i8 %3924, i8* %61, align 1, !tbaa !2448
  %3925 = xor i64 %3923, %3892
  %3926 = xor i64 %3923, %3904
  %3927 = add nuw nsw i64 %3925, %3926
  %3928 = icmp eq i64 %3927, 2
  %3929 = zext i1 %3928 to i8
  store i8 %3929, i8* %67, align 1, !tbaa !2449
  %3930 = add i64 %3833, -196
  %3931 = add i64 %3835, 83
  store i64 %3931, i64* %PC, align 8
  %3932 = inttoptr i64 %3930 to i32*
  %3933 = load i32, i32* %3932, align 4
  %3934 = sext i32 %3933 to i64
  store i64 %3934, i64* %RCX, align 8, !tbaa !2450
  %3935 = shl nsw i64 %3934, 3
  %3936 = add i64 %3935, %3905
  %3937 = add i64 %3835, 88
  store i64 %3937, i64* %PC, align 8
  %3938 = load double, double* %257, align 1
  %3939 = inttoptr i64 %3936 to double*
  %3940 = load double, double* %3939, align 8
  %3941 = fmul double %3938, %3940
  store double %3941, double* %257, align 1, !tbaa !2453
  %3942 = add i64 %3833, -72
  %3943 = add i64 %3835, 93
  store i64 %3943, i64* %PC, align 8
  %3944 = inttoptr i64 %3942 to i64*
  %3945 = load i64, i64* %3944, align 8
  store i64 %3945, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %3946 = add i64 %3835, 100
  store i64 %3946, i64* %PC, align 8
  %3947 = load i64, i64* %3851, align 8
  store i64 %3947, i64* %RAX, align 8, !tbaa !2450
  %3948 = add i64 %3835, 107
  store i64 %3948, i64* %PC, align 8
  %3949 = load i32, i32* %3841, align 4
  %3950 = sext i32 %3949 to i64
  store i64 %3950, i64* %RCX, align 8, !tbaa !2450
  %3951 = shl nsw i64 %3950, 3
  %3952 = add i64 %3951, %3947
  %3953 = add i64 %3835, 112
  store i64 %3953, i64* %PC, align 8
  %3954 = bitcast i64 %3945 to double
  %3955 = inttoptr i64 %3952 to double*
  %3956 = load double, double* %3955, align 8
  %3957 = fdiv double %3954, %3956
  store double %3957, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3958 = load i64, i64* %RBP, align 8
  %3959 = add i64 %3958, -96
  %3960 = add i64 %3835, 116
  store i64 %3960, i64* %PC, align 8
  %3961 = inttoptr i64 %3959 to i64*
  %3962 = load i64, i64* %3961, align 8
  store i64 %3962, i64* %RAX, align 8, !tbaa !2450
  %3963 = add i64 %3958, -188
  %3964 = add i64 %3835, 123
  store i64 %3964, i64* %PC, align 8
  %3965 = inttoptr i64 %3963 to i32*
  %3966 = load i32, i32* %3965, align 4
  %3967 = sext i32 %3966 to i64
  %3968 = mul nsw i64 %3967, 520
  store i64 %3968, i64* %RCX, align 8, !tbaa !2450
  %3969 = lshr i64 %3968, 63
  %3970 = add i64 %3968, %3962
  store i64 %3970, i64* %RAX, align 8, !tbaa !2450
  %3971 = icmp ult i64 %3970, %3962
  %3972 = icmp ult i64 %3970, %3968
  %3973 = or i1 %3971, %3972
  %3974 = zext i1 %3973 to i8
  store i8 %3974, i8* %42, align 1, !tbaa !2428
  %3975 = trunc i64 %3970 to i32
  %3976 = and i32 %3975, 255
  %3977 = tail call i32 @llvm.ctpop.i32(i32 %3976) #10
  %3978 = trunc i32 %3977 to i8
  %3979 = and i8 %3978, 1
  %3980 = xor i8 %3979, 1
  store i8 %3980, i8* %49, align 1, !tbaa !2445
  %3981 = xor i64 %3968, %3962
  %3982 = xor i64 %3981, %3970
  %3983 = lshr i64 %3982, 4
  %3984 = trunc i64 %3983 to i8
  %3985 = and i8 %3984, 1
  store i8 %3985, i8* %55, align 1, !tbaa !2446
  %3986 = icmp eq i64 %3970, 0
  %3987 = zext i1 %3986 to i8
  store i8 %3987, i8* %58, align 1, !tbaa !2447
  %3988 = lshr i64 %3970, 63
  %3989 = trunc i64 %3988 to i8
  store i8 %3989, i8* %61, align 1, !tbaa !2448
  %3990 = lshr i64 %3962, 63
  %3991 = xor i64 %3988, %3990
  %3992 = xor i64 %3988, %3969
  %3993 = add nuw nsw i64 %3991, %3992
  %3994 = icmp eq i64 %3993, 2
  %3995 = zext i1 %3994 to i8
  store i8 %3995, i8* %67, align 1, !tbaa !2449
  %3996 = add i64 %3958, -192
  %3997 = add i64 %3835, 140
  store i64 %3997, i64* %PC, align 8
  %3998 = inttoptr i64 %3996 to i32*
  %3999 = load i32, i32* %3998, align 4
  %4000 = sext i32 %3999 to i64
  store i64 %4000, i64* %RCX, align 8, !tbaa !2450
  %4001 = shl nsw i64 %4000, 3
  %4002 = add i64 %4001, %3970
  %4003 = add i64 %3835, 145
  store i64 %4003, i64* %PC, align 8
  %4004 = inttoptr i64 %4002 to double*
  %4005 = load double, double* %4004, align 8
  %4006 = fmul double %3957, %4005
  store double %4006, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4007 = fsub double %3941, %4006
  store double %4007, double* %257, align 1, !tbaa !2453
  %4008 = add i64 %3958, -104
  %4009 = add i64 %3835, 153
  store i64 %4009, i64* %PC, align 8
  %4010 = inttoptr i64 %4008 to i64*
  %4011 = load i64, i64* %4010, align 8
  store i64 %4011, i64* %RAX, align 8, !tbaa !2450
  %4012 = add i64 %3835, 160
  store i64 %4012, i64* %PC, align 8
  %4013 = load i32, i32* %3965, align 4
  %4014 = sext i32 %4013 to i64
  %4015 = mul nsw i64 %4014, 520
  store i64 %4015, i64* %RCX, align 8, !tbaa !2450
  %4016 = lshr i64 %4015, 63
  %4017 = add i64 %4015, %4011
  store i64 %4017, i64* %RAX, align 8, !tbaa !2450
  %4018 = icmp ult i64 %4017, %4011
  %4019 = icmp ult i64 %4017, %4015
  %4020 = or i1 %4018, %4019
  %4021 = zext i1 %4020 to i8
  store i8 %4021, i8* %42, align 1, !tbaa !2428
  %4022 = trunc i64 %4017 to i32
  %4023 = and i32 %4022, 255
  %4024 = tail call i32 @llvm.ctpop.i32(i32 %4023) #10
  %4025 = trunc i32 %4024 to i8
  %4026 = and i8 %4025, 1
  %4027 = xor i8 %4026, 1
  store i8 %4027, i8* %49, align 1, !tbaa !2445
  %4028 = xor i64 %4015, %4011
  %4029 = xor i64 %4028, %4017
  %4030 = lshr i64 %4029, 4
  %4031 = trunc i64 %4030 to i8
  %4032 = and i8 %4031, 1
  store i8 %4032, i8* %55, align 1, !tbaa !2446
  %4033 = icmp eq i64 %4017, 0
  %4034 = zext i1 %4033 to i8
  store i8 %4034, i8* %58, align 1, !tbaa !2447
  %4035 = lshr i64 %4017, 63
  %4036 = trunc i64 %4035 to i8
  store i8 %4036, i8* %61, align 1, !tbaa !2448
  %4037 = lshr i64 %4011, 63
  %4038 = xor i64 %4035, %4037
  %4039 = xor i64 %4035, %4016
  %4040 = add nuw nsw i64 %4038, %4039
  %4041 = icmp eq i64 %4040, 2
  %4042 = zext i1 %4041 to i8
  store i8 %4042, i8* %67, align 1, !tbaa !2449
  %4043 = add i64 %3835, 177
  store i64 %4043, i64* %PC, align 8
  %4044 = load i32, i32* %3998, align 4
  %4045 = sext i32 %4044 to i64
  store i64 %4045, i64* %RCX, align 8, !tbaa !2450
  %4046 = shl nsw i64 %4045, 3
  %4047 = add i64 %4046, %4017
  %4048 = add i64 %3835, 182
  store i64 %4048, i64* %PC, align 8
  %4049 = inttoptr i64 %4047 to double*
  store double %4007, double* %4049, align 8
  %4050 = load i64, i64* %RBP, align 8
  %4051 = add i64 %4050, -160
  %4052 = load i64, i64* %PC, align 8
  %4053 = add i64 %4052, 7
  store i64 %4053, i64* %PC, align 8
  %4054 = inttoptr i64 %4051 to i64*
  %4055 = load i64, i64* %4054, align 8
  store i64 %4055, i64* %RAX, align 8, !tbaa !2450
  %4056 = add i64 %4050, -196
  %4057 = add i64 %4052, 14
  store i64 %4057, i64* %PC, align 8
  %4058 = inttoptr i64 %4056 to i32*
  %4059 = load i32, i32* %4058, align 4
  %4060 = sext i32 %4059 to i64
  store i64 %4060, i64* %RCX, align 8, !tbaa !2450
  %4061 = shl nsw i64 %4060, 3
  %4062 = add i64 %4061, %4055
  %4063 = add i64 %4052, 19
  store i64 %4063, i64* %PC, align 8
  %4064 = inttoptr i64 %4062 to i64*
  %4065 = load i64, i64* %4064, align 8
  store i64 %4065, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %4066 = add i64 %4050, -168
  %4067 = add i64 %4052, 26
  store i64 %4067, i64* %PC, align 8
  %4068 = inttoptr i64 %4066 to i64*
  %4069 = load i64, i64* %4068, align 8
  store i64 %4069, i64* %RAX, align 8, !tbaa !2450
  %4070 = add i64 %4052, 33
  store i64 %4070, i64* %PC, align 8
  %4071 = load i32, i32* %4058, align 4
  %4072 = sext i32 %4071 to i64
  store i64 %4072, i64* %RCX, align 8, !tbaa !2450
  %4073 = shl nsw i64 %4072, 3
  %4074 = add i64 %4073, %4069
  %4075 = add i64 %4052, 38
  store i64 %4075, i64* %PC, align 8
  %4076 = bitcast i64 %4065 to double
  %4077 = inttoptr i64 %4074 to double*
  %4078 = load double, double* %4077, align 8
  %4079 = fdiv double %4076, %4078
  store double %4079, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %4080 = add i64 %4050, -136
  %4081 = add i64 %4052, 45
  store i64 %4081, i64* %PC, align 8
  %4082 = inttoptr i64 %4080 to i64*
  %4083 = load i64, i64* %4082, align 8
  store i64 %4083, i64* %RAX, align 8, !tbaa !2450
  %4084 = add i64 %4050, -188
  %4085 = add i64 %4052, 52
  store i64 %4085, i64* %PC, align 8
  %4086 = inttoptr i64 %4084 to i32*
  %4087 = load i32, i32* %4086, align 4
  %4088 = sext i32 %4087 to i64
  %4089 = mul nsw i64 %4088, 33800
  store i64 %4089, i64* %RCX, align 8, !tbaa !2450
  %4090 = lshr i64 %4089, 63
  %4091 = add i64 %4089, %4083
  store i64 %4091, i64* %RAX, align 8, !tbaa !2450
  %4092 = icmp ult i64 %4091, %4083
  %4093 = icmp ult i64 %4091, %4089
  %4094 = or i1 %4092, %4093
  %4095 = zext i1 %4094 to i8
  store i8 %4095, i8* %42, align 1, !tbaa !2428
  %4096 = trunc i64 %4091 to i32
  %4097 = and i32 %4096, 255
  %4098 = tail call i32 @llvm.ctpop.i32(i32 %4097) #10
  %4099 = trunc i32 %4098 to i8
  %4100 = and i8 %4099, 1
  %4101 = xor i8 %4100, 1
  store i8 %4101, i8* %49, align 1, !tbaa !2445
  %4102 = xor i64 %4089, %4083
  %4103 = xor i64 %4102, %4091
  %4104 = lshr i64 %4103, 4
  %4105 = trunc i64 %4104 to i8
  %4106 = and i8 %4105, 1
  store i8 %4106, i8* %55, align 1, !tbaa !2446
  %4107 = icmp eq i64 %4091, 0
  %4108 = zext i1 %4107 to i8
  store i8 %4108, i8* %58, align 1, !tbaa !2447
  %4109 = lshr i64 %4091, 63
  %4110 = trunc i64 %4109 to i8
  store i8 %4110, i8* %61, align 1, !tbaa !2448
  %4111 = lshr i64 %4083, 63
  %4112 = xor i64 %4109, %4111
  %4113 = xor i64 %4109, %4090
  %4114 = add nuw nsw i64 %4112, %4113
  %4115 = icmp eq i64 %4114, 2
  %4116 = zext i1 %4115 to i8
  store i8 %4116, i8* %67, align 1, !tbaa !2449
  %4117 = add i64 %4050, -192
  %4118 = add i64 %4052, 69
  store i64 %4118, i64* %PC, align 8
  %4119 = inttoptr i64 %4117 to i32*
  %4120 = load i32, i32* %4119, align 4
  %4121 = sext i32 %4120 to i64
  %4122 = mul nsw i64 %4121, 520
  store i64 %4122, i64* %RCX, align 8, !tbaa !2450
  %4123 = lshr i64 %4122, 63
  %4124 = add i64 %4122, %4091
  store i64 %4124, i64* %RAX, align 8, !tbaa !2450
  %4125 = icmp ult i64 %4124, %4091
  %4126 = icmp ult i64 %4124, %4122
  %4127 = or i1 %4125, %4126
  %4128 = zext i1 %4127 to i8
  store i8 %4128, i8* %42, align 1, !tbaa !2428
  %4129 = trunc i64 %4124 to i32
  %4130 = and i32 %4129, 255
  %4131 = tail call i32 @llvm.ctpop.i32(i32 %4130) #10
  %4132 = trunc i32 %4131 to i8
  %4133 = and i8 %4132, 1
  %4134 = xor i8 %4133, 1
  store i8 %4134, i8* %49, align 1, !tbaa !2445
  %4135 = xor i64 %4122, %4091
  %4136 = xor i64 %4135, %4124
  %4137 = lshr i64 %4136, 4
  %4138 = trunc i64 %4137 to i8
  %4139 = and i8 %4138, 1
  store i8 %4139, i8* %55, align 1, !tbaa !2446
  %4140 = icmp eq i64 %4124, 0
  %4141 = zext i1 %4140 to i8
  store i8 %4141, i8* %58, align 1, !tbaa !2447
  %4142 = lshr i64 %4124, 63
  %4143 = trunc i64 %4142 to i8
  store i8 %4143, i8* %61, align 1, !tbaa !2448
  %4144 = xor i64 %4142, %4109
  %4145 = xor i64 %4142, %4123
  %4146 = add nuw nsw i64 %4144, %4145
  %4147 = icmp eq i64 %4146, 2
  %4148 = zext i1 %4147 to i8
  store i8 %4148, i8* %67, align 1, !tbaa !2449
  %4149 = add i64 %4052, 86
  store i64 %4149, i64* %PC, align 8
  %4150 = load i32, i32* %4058, align 4
  %4151 = sext i32 %4150 to i64
  store i64 %4151, i64* %RCX, align 8, !tbaa !2450
  %4152 = shl nsw i64 %4151, 3
  %4153 = add i64 %4152, %4124
  %4154 = add i64 %4052, 91
  store i64 %4154, i64* %PC, align 8
  %4155 = load double, double* %257, align 1
  %4156 = inttoptr i64 %4153 to double*
  %4157 = load double, double* %4156, align 8
  %4158 = fmul double %4155, %4157
  store double %4158, double* %257, align 1, !tbaa !2453
  %4159 = add i64 %4050, -64
  %4160 = add i64 %4052, 96
  store i64 %4160, i64* %PC, align 8
  %4161 = inttoptr i64 %4159 to i64*
  %4162 = load i64, i64* %4161, align 8
  store i64 %4162, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %4163 = add i64 %4050, -152
  %4164 = add i64 %4052, 103
  store i64 %4164, i64* %PC, align 8
  %4165 = inttoptr i64 %4163 to i64*
  %4166 = load i64, i64* %4165, align 8
  store i64 %4166, i64* %RAX, align 8, !tbaa !2450
  %4167 = add i64 %4052, 110
  store i64 %4167, i64* %PC, align 8
  %4168 = load i32, i32* %4086, align 4
  %4169 = sext i32 %4168 to i64
  store i64 %4169, i64* %RCX, align 8, !tbaa !2450
  %4170 = shl nsw i64 %4169, 3
  %4171 = add i64 %4170, %4166
  %4172 = add i64 %4052, 115
  store i64 %4172, i64* %PC, align 8
  %4173 = bitcast i64 %4162 to double
  %4174 = inttoptr i64 %4171 to double*
  %4175 = load double, double* %4174, align 8
  %4176 = fmul double %4173, %4175
  store double %4176, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4177 = load i64, i64* %RBP, align 8
  %4178 = add i64 %4177, -168
  %4179 = add i64 %4052, 122
  store i64 %4179, i64* %PC, align 8
  %4180 = inttoptr i64 %4178 to i64*
  %4181 = load i64, i64* %4180, align 8
  store i64 %4181, i64* %RAX, align 8, !tbaa !2450
  %4182 = add i64 %4177, -196
  %4183 = add i64 %4052, 129
  store i64 %4183, i64* %PC, align 8
  %4184 = inttoptr i64 %4182 to i32*
  %4185 = load i32, i32* %4184, align 4
  %4186 = sext i32 %4185 to i64
  store i64 %4186, i64* %RCX, align 8, !tbaa !2450
  %4187 = shl nsw i64 %4186, 3
  %4188 = add i64 %4187, %4181
  %4189 = add i64 %4052, 134
  store i64 %4189, i64* %PC, align 8
  %4190 = inttoptr i64 %4188 to double*
  %4191 = load double, double* %4190, align 8
  %4192 = fdiv double %4176, %4191
  store double %4192, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4193 = add i64 %4177, -104
  %4194 = add i64 %4052, 138
  store i64 %4194, i64* %PC, align 8
  %4195 = inttoptr i64 %4193 to i64*
  %4196 = load i64, i64* %4195, align 8
  store i64 %4196, i64* %RAX, align 8, !tbaa !2450
  %4197 = add i64 %4177, -188
  %4198 = add i64 %4052, 145
  store i64 %4198, i64* %PC, align 8
  %4199 = inttoptr i64 %4197 to i32*
  %4200 = load i32, i32* %4199, align 4
  %4201 = sext i32 %4200 to i64
  %4202 = mul nsw i64 %4201, 520
  store i64 %4202, i64* %RCX, align 8, !tbaa !2450
  %4203 = lshr i64 %4202, 63
  %4204 = add i64 %4202, %4196
  store i64 %4204, i64* %RAX, align 8, !tbaa !2450
  %4205 = icmp ult i64 %4204, %4196
  %4206 = icmp ult i64 %4204, %4202
  %4207 = or i1 %4205, %4206
  %4208 = zext i1 %4207 to i8
  store i8 %4208, i8* %42, align 1, !tbaa !2428
  %4209 = trunc i64 %4204 to i32
  %4210 = and i32 %4209, 255
  %4211 = tail call i32 @llvm.ctpop.i32(i32 %4210) #10
  %4212 = trunc i32 %4211 to i8
  %4213 = and i8 %4212, 1
  %4214 = xor i8 %4213, 1
  store i8 %4214, i8* %49, align 1, !tbaa !2445
  %4215 = xor i64 %4202, %4196
  %4216 = xor i64 %4215, %4204
  %4217 = lshr i64 %4216, 4
  %4218 = trunc i64 %4217 to i8
  %4219 = and i8 %4218, 1
  store i8 %4219, i8* %55, align 1, !tbaa !2446
  %4220 = icmp eq i64 %4204, 0
  %4221 = zext i1 %4220 to i8
  store i8 %4221, i8* %58, align 1, !tbaa !2447
  %4222 = lshr i64 %4204, 63
  %4223 = trunc i64 %4222 to i8
  store i8 %4223, i8* %61, align 1, !tbaa !2448
  %4224 = lshr i64 %4196, 63
  %4225 = xor i64 %4222, %4224
  %4226 = xor i64 %4222, %4203
  %4227 = add nuw nsw i64 %4225, %4226
  %4228 = icmp eq i64 %4227, 2
  %4229 = zext i1 %4228 to i8
  store i8 %4229, i8* %67, align 1, !tbaa !2449
  %4230 = add i64 %4177, -192
  %4231 = add i64 %4052, 162
  store i64 %4231, i64* %PC, align 8
  %4232 = inttoptr i64 %4230 to i32*
  %4233 = load i32, i32* %4232, align 4
  %4234 = sext i32 %4233 to i64
  store i64 %4234, i64* %RCX, align 8, !tbaa !2450
  %4235 = shl nsw i64 %4234, 3
  %4236 = add i64 %4235, %4204
  %4237 = add i64 %4052, 167
  store i64 %4237, i64* %PC, align 8
  %4238 = inttoptr i64 %4236 to double*
  %4239 = load double, double* %4238, align 8
  %4240 = fmul double %4192, %4239
  store double %4240, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4241 = load double, double* %257, align 1
  %4242 = fadd double %4240, %4241
  store double %4242, double* %257, align 1, !tbaa !2453
  %4243 = add i64 %4177, -64
  %4244 = add i64 %4052, 176
  store i64 %4244, i64* %PC, align 8
  %4245 = inttoptr i64 %4243 to i64*
  %4246 = load i64, i64* %4245, align 8
  store i64 %4246, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %4247 = add i64 %4177, -144
  %4248 = add i64 %4052, 183
  store i64 %4248, i64* %PC, align 8
  %4249 = inttoptr i64 %4247 to i64*
  %4250 = load i64, i64* %4249, align 8
  store i64 %4250, i64* %RAX, align 8, !tbaa !2450
  %4251 = add i64 %4052, 190
  store i64 %4251, i64* %PC, align 8
  %4252 = load i32, i32* %4199, align 4
  %4253 = sext i32 %4252 to i64
  store i64 %4253, i64* %RCX, align 8, !tbaa !2450
  %4254 = shl nsw i64 %4253, 3
  %4255 = add i64 %4254, %4250
  %4256 = add i64 %4052, 195
  store i64 %4256, i64* %PC, align 8
  %4257 = bitcast i64 %4246 to double
  %4258 = inttoptr i64 %4255 to double*
  %4259 = load double, double* %4258, align 8
  %4260 = fmul double %4257, %4259
  store double %4260, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4261 = add i64 %4052, 202
  store i64 %4261, i64* %PC, align 8
  %4262 = load i64, i64* %4180, align 8
  store i64 %4262, i64* %RAX, align 8, !tbaa !2450
  %4263 = add i64 %4052, 209
  store i64 %4263, i64* %PC, align 8
  %4264 = load i32, i32* %4184, align 4
  %4265 = sext i32 %4264 to i64
  store i64 %4265, i64* %RCX, align 8, !tbaa !2450
  %4266 = shl nsw i64 %4265, 3
  %4267 = add i64 %4266, %4262
  %4268 = add i64 %4052, 214
  store i64 %4268, i64* %PC, align 8
  %4269 = inttoptr i64 %4267 to double*
  %4270 = load double, double* %4269, align 8
  %4271 = fdiv double %4260, %4270
  store double %4271, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4272 = add i64 %4177, -112
  %4273 = add i64 %4052, 218
  store i64 %4273, i64* %PC, align 8
  %4274 = inttoptr i64 %4272 to i64*
  %4275 = load i64, i64* %4274, align 8
  store i64 %4275, i64* %RAX, align 8, !tbaa !2450
  %4276 = add i64 %4052, 225
  store i64 %4276, i64* %PC, align 8
  %4277 = load i32, i32* %4199, align 4
  %4278 = sext i32 %4277 to i64
  %4279 = mul nsw i64 %4278, 33800
  store i64 %4279, i64* %RCX, align 8, !tbaa !2450
  %4280 = lshr i64 %4279, 63
  %4281 = add i64 %4279, %4275
  store i64 %4281, i64* %RAX, align 8, !tbaa !2450
  %4282 = icmp ult i64 %4281, %4275
  %4283 = icmp ult i64 %4281, %4279
  %4284 = or i1 %4282, %4283
  %4285 = zext i1 %4284 to i8
  store i8 %4285, i8* %42, align 1, !tbaa !2428
  %4286 = trunc i64 %4281 to i32
  %4287 = and i32 %4286, 255
  %4288 = tail call i32 @llvm.ctpop.i32(i32 %4287) #10
  %4289 = trunc i32 %4288 to i8
  %4290 = and i8 %4289, 1
  %4291 = xor i8 %4290, 1
  store i8 %4291, i8* %49, align 1, !tbaa !2445
  %4292 = xor i64 %4279, %4275
  %4293 = xor i64 %4292, %4281
  %4294 = lshr i64 %4293, 4
  %4295 = trunc i64 %4294 to i8
  %4296 = and i8 %4295, 1
  store i8 %4296, i8* %55, align 1, !tbaa !2446
  %4297 = icmp eq i64 %4281, 0
  %4298 = zext i1 %4297 to i8
  store i8 %4298, i8* %58, align 1, !tbaa !2447
  %4299 = lshr i64 %4281, 63
  %4300 = trunc i64 %4299 to i8
  store i8 %4300, i8* %61, align 1, !tbaa !2448
  %4301 = lshr i64 %4275, 63
  %4302 = xor i64 %4299, %4301
  %4303 = xor i64 %4299, %4280
  %4304 = add nuw nsw i64 %4302, %4303
  %4305 = icmp eq i64 %4304, 2
  %4306 = zext i1 %4305 to i8
  store i8 %4306, i8* %67, align 1, !tbaa !2449
  %4307 = load i64, i64* %RBP, align 8
  %4308 = add i64 %4307, -192
  %4309 = add i64 %4052, 242
  store i64 %4309, i64* %PC, align 8
  %4310 = inttoptr i64 %4308 to i32*
  %4311 = load i32, i32* %4310, align 4
  %4312 = sext i32 %4311 to i64
  %4313 = mul nsw i64 %4312, 520
  store i64 %4313, i64* %RCX, align 8, !tbaa !2450
  %4314 = lshr i64 %4313, 63
  %4315 = add i64 %4313, %4281
  store i64 %4315, i64* %RAX, align 8, !tbaa !2450
  %4316 = icmp ult i64 %4315, %4281
  %4317 = icmp ult i64 %4315, %4313
  %4318 = or i1 %4316, %4317
  %4319 = zext i1 %4318 to i8
  store i8 %4319, i8* %42, align 1, !tbaa !2428
  %4320 = trunc i64 %4315 to i32
  %4321 = and i32 %4320, 255
  %4322 = tail call i32 @llvm.ctpop.i32(i32 %4321) #10
  %4323 = trunc i32 %4322 to i8
  %4324 = and i8 %4323, 1
  %4325 = xor i8 %4324, 1
  store i8 %4325, i8* %49, align 1, !tbaa !2445
  %4326 = xor i64 %4313, %4281
  %4327 = xor i64 %4326, %4315
  %4328 = lshr i64 %4327, 4
  %4329 = trunc i64 %4328 to i8
  %4330 = and i8 %4329, 1
  store i8 %4330, i8* %55, align 1, !tbaa !2446
  %4331 = icmp eq i64 %4315, 0
  %4332 = zext i1 %4331 to i8
  store i8 %4332, i8* %58, align 1, !tbaa !2447
  %4333 = lshr i64 %4315, 63
  %4334 = trunc i64 %4333 to i8
  store i8 %4334, i8* %61, align 1, !tbaa !2448
  %4335 = xor i64 %4333, %4299
  %4336 = xor i64 %4333, %4314
  %4337 = add nuw nsw i64 %4335, %4336
  %4338 = icmp eq i64 %4337, 2
  %4339 = zext i1 %4338 to i8
  store i8 %4339, i8* %67, align 1, !tbaa !2449
  %4340 = add i64 %4307, -196
  %4341 = add i64 %4052, 259
  store i64 %4341, i64* %PC, align 8
  %4342 = inttoptr i64 %4340 to i32*
  %4343 = load i32, i32* %4342, align 4
  %4344 = sext i32 %4343 to i64
  store i64 %4344, i64* %RCX, align 8, !tbaa !2450
  %4345 = shl nsw i64 %4344, 3
  %4346 = add i64 %4345, %4315
  %4347 = add i64 %4052, 264
  store i64 %4347, i64* %PC, align 8
  %4348 = load double, double* %155, align 1
  %4349 = inttoptr i64 %4346 to double*
  %4350 = load double, double* %4349, align 8
  %4351 = fmul double %4348, %4350
  store double %4351, double* %155, align 1, !tbaa !2453
  %4352 = load double, double* %257, align 1
  %4353 = fsub double %4352, %4351
  store double %4353, double* %257, align 1, !tbaa !2453
  %4354 = add i64 %4307, -136
  %4355 = add i64 %4052, 275
  store i64 %4355, i64* %PC, align 8
  %4356 = inttoptr i64 %4354 to i64*
  %4357 = load i64, i64* %4356, align 8
  store i64 %4357, i64* %RAX, align 8, !tbaa !2450
  %4358 = add i64 %4307, -188
  %4359 = add i64 %4052, 282
  store i64 %4359, i64* %PC, align 8
  %4360 = inttoptr i64 %4358 to i32*
  %4361 = load i32, i32* %4360, align 4
  %4362 = sext i32 %4361 to i64
  %4363 = mul nsw i64 %4362, 33800
  store i64 %4363, i64* %RCX, align 8, !tbaa !2450
  %4364 = lshr i64 %4363, 63
  %4365 = add i64 %4363, %4357
  store i64 %4365, i64* %RAX, align 8, !tbaa !2450
  %4366 = icmp ult i64 %4365, %4357
  %4367 = icmp ult i64 %4365, %4363
  %4368 = or i1 %4366, %4367
  %4369 = zext i1 %4368 to i8
  store i8 %4369, i8* %42, align 1, !tbaa !2428
  %4370 = trunc i64 %4365 to i32
  %4371 = and i32 %4370, 255
  %4372 = tail call i32 @llvm.ctpop.i32(i32 %4371) #10
  %4373 = trunc i32 %4372 to i8
  %4374 = and i8 %4373, 1
  %4375 = xor i8 %4374, 1
  store i8 %4375, i8* %49, align 1, !tbaa !2445
  %4376 = xor i64 %4363, %4357
  %4377 = xor i64 %4376, %4365
  %4378 = lshr i64 %4377, 4
  %4379 = trunc i64 %4378 to i8
  %4380 = and i8 %4379, 1
  store i8 %4380, i8* %55, align 1, !tbaa !2446
  %4381 = icmp eq i64 %4365, 0
  %4382 = zext i1 %4381 to i8
  store i8 %4382, i8* %58, align 1, !tbaa !2447
  %4383 = lshr i64 %4365, 63
  %4384 = trunc i64 %4383 to i8
  store i8 %4384, i8* %61, align 1, !tbaa !2448
  %4385 = lshr i64 %4357, 63
  %4386 = xor i64 %4383, %4385
  %4387 = xor i64 %4383, %4364
  %4388 = add nuw nsw i64 %4386, %4387
  %4389 = icmp eq i64 %4388, 2
  %4390 = zext i1 %4389 to i8
  store i8 %4390, i8* %67, align 1, !tbaa !2449
  %4391 = load i64, i64* %RBP, align 8
  %4392 = add i64 %4391, -192
  %4393 = add i64 %4052, 299
  store i64 %4393, i64* %PC, align 8
  %4394 = inttoptr i64 %4392 to i32*
  %4395 = load i32, i32* %4394, align 4
  %4396 = sext i32 %4395 to i64
  %4397 = mul nsw i64 %4396, 520
  store i64 %4397, i64* %RCX, align 8, !tbaa !2450
  %4398 = lshr i64 %4397, 63
  %4399 = add i64 %4397, %4365
  store i64 %4399, i64* %RAX, align 8, !tbaa !2450
  %4400 = icmp ult i64 %4399, %4365
  %4401 = icmp ult i64 %4399, %4397
  %4402 = or i1 %4400, %4401
  %4403 = zext i1 %4402 to i8
  store i8 %4403, i8* %42, align 1, !tbaa !2428
  %4404 = trunc i64 %4399 to i32
  %4405 = and i32 %4404, 255
  %4406 = tail call i32 @llvm.ctpop.i32(i32 %4405) #10
  %4407 = trunc i32 %4406 to i8
  %4408 = and i8 %4407, 1
  %4409 = xor i8 %4408, 1
  store i8 %4409, i8* %49, align 1, !tbaa !2445
  %4410 = xor i64 %4397, %4365
  %4411 = xor i64 %4410, %4399
  %4412 = lshr i64 %4411, 4
  %4413 = trunc i64 %4412 to i8
  %4414 = and i8 %4413, 1
  store i8 %4414, i8* %55, align 1, !tbaa !2446
  %4415 = icmp eq i64 %4399, 0
  %4416 = zext i1 %4415 to i8
  store i8 %4416, i8* %58, align 1, !tbaa !2447
  %4417 = lshr i64 %4399, 63
  %4418 = trunc i64 %4417 to i8
  store i8 %4418, i8* %61, align 1, !tbaa !2448
  %4419 = xor i64 %4417, %4383
  %4420 = xor i64 %4417, %4398
  %4421 = add nuw nsw i64 %4419, %4420
  %4422 = icmp eq i64 %4421, 2
  %4423 = zext i1 %4422 to i8
  store i8 %4423, i8* %67, align 1, !tbaa !2449
  %4424 = add i64 %4391, -196
  %4425 = add i64 %4052, 316
  store i64 %4425, i64* %PC, align 8
  %4426 = inttoptr i64 %4424 to i32*
  %4427 = load i32, i32* %4426, align 4
  %4428 = sext i32 %4427 to i64
  store i64 %4428, i64* %RCX, align 8, !tbaa !2450
  %4429 = shl nsw i64 %4428, 3
  %4430 = add i64 %4429, %4399
  %4431 = add i64 %4052, 321
  store i64 %4431, i64* %PC, align 8
  %4432 = load i64, i64* %148, align 1
  %4433 = inttoptr i64 %4430 to i64*
  store i64 %4432, i64* %4433, align 8
  %4434 = load i64, i64* %RBP, align 8
  %4435 = add i64 %4434, -104
  %4436 = load i64, i64* %PC, align 8
  %4437 = add i64 %4436, 4
  store i64 %4437, i64* %PC, align 8
  %4438 = inttoptr i64 %4435 to i64*
  %4439 = load i64, i64* %4438, align 8
  store i64 %4439, i64* %RAX, align 8, !tbaa !2450
  %4440 = add i64 %4434, -188
  %4441 = add i64 %4436, 11
  store i64 %4441, i64* %PC, align 8
  %4442 = inttoptr i64 %4440 to i32*
  %4443 = load i32, i32* %4442, align 4
  %4444 = sext i32 %4443 to i64
  %4445 = mul nsw i64 %4444, 520
  store i64 %4445, i64* %RCX, align 8, !tbaa !2450
  %4446 = lshr i64 %4445, 63
  %4447 = add i64 %4445, %4439
  store i64 %4447, i64* %RAX, align 8, !tbaa !2450
  %4448 = icmp ult i64 %4447, %4439
  %4449 = icmp ult i64 %4447, %4445
  %4450 = or i1 %4448, %4449
  %4451 = zext i1 %4450 to i8
  store i8 %4451, i8* %42, align 1, !tbaa !2428
  %4452 = trunc i64 %4447 to i32
  %4453 = and i32 %4452, 255
  %4454 = tail call i32 @llvm.ctpop.i32(i32 %4453) #10
  %4455 = trunc i32 %4454 to i8
  %4456 = and i8 %4455, 1
  %4457 = xor i8 %4456, 1
  store i8 %4457, i8* %49, align 1, !tbaa !2445
  %4458 = xor i64 %4445, %4439
  %4459 = xor i64 %4458, %4447
  %4460 = lshr i64 %4459, 4
  %4461 = trunc i64 %4460 to i8
  %4462 = and i8 %4461, 1
  store i8 %4462, i8* %55, align 1, !tbaa !2446
  %4463 = icmp eq i64 %4447, 0
  %4464 = zext i1 %4463 to i8
  store i8 %4464, i8* %58, align 1, !tbaa !2447
  %4465 = lshr i64 %4447, 63
  %4466 = trunc i64 %4465 to i8
  store i8 %4466, i8* %61, align 1, !tbaa !2448
  %4467 = lshr i64 %4439, 63
  %4468 = xor i64 %4465, %4467
  %4469 = xor i64 %4465, %4446
  %4470 = add nuw nsw i64 %4468, %4469
  %4471 = icmp eq i64 %4470, 2
  %4472 = zext i1 %4471 to i8
  store i8 %4472, i8* %67, align 1, !tbaa !2449
  %4473 = add i64 %4434, -192
  %4474 = add i64 %4436, 28
  store i64 %4474, i64* %PC, align 8
  %4475 = inttoptr i64 %4473 to i32*
  %4476 = load i32, i32* %4475, align 4
  %4477 = sext i32 %4476 to i64
  store i64 %4477, i64* %RCX, align 8, !tbaa !2450
  %4478 = shl nsw i64 %4477, 3
  %4479 = add i64 %4478, %4447
  %4480 = add i64 %4436, 33
  store i64 %4480, i64* %PC, align 8
  %4481 = inttoptr i64 %4479 to i64*
  %4482 = load i64, i64* %4481, align 8
  store i64 %4482, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %4483 = add i64 %4434, -112
  %4484 = add i64 %4436, 37
  store i64 %4484, i64* %PC, align 8
  %4485 = inttoptr i64 %4483 to i64*
  %4486 = load i64, i64* %4485, align 8
  store i64 %4486, i64* %RAX, align 8, !tbaa !2450
  %4487 = add i64 %4436, 44
  store i64 %4487, i64* %PC, align 8
  %4488 = load i32, i32* %4442, align 4
  %4489 = sext i32 %4488 to i64
  %4490 = mul nsw i64 %4489, 33800
  store i64 %4490, i64* %RCX, align 8, !tbaa !2450
  %4491 = lshr i64 %4490, 63
  %4492 = add i64 %4490, %4486
  store i64 %4492, i64* %RAX, align 8, !tbaa !2450
  %4493 = icmp ult i64 %4492, %4486
  %4494 = icmp ult i64 %4492, %4490
  %4495 = or i1 %4493, %4494
  %4496 = zext i1 %4495 to i8
  store i8 %4496, i8* %42, align 1, !tbaa !2428
  %4497 = trunc i64 %4492 to i32
  %4498 = and i32 %4497, 255
  %4499 = tail call i32 @llvm.ctpop.i32(i32 %4498) #10
  %4500 = trunc i32 %4499 to i8
  %4501 = and i8 %4500, 1
  %4502 = xor i8 %4501, 1
  store i8 %4502, i8* %49, align 1, !tbaa !2445
  %4503 = xor i64 %4490, %4486
  %4504 = xor i64 %4503, %4492
  %4505 = lshr i64 %4504, 4
  %4506 = trunc i64 %4505 to i8
  %4507 = and i8 %4506, 1
  store i8 %4507, i8* %55, align 1, !tbaa !2446
  %4508 = icmp eq i64 %4492, 0
  %4509 = zext i1 %4508 to i8
  store i8 %4509, i8* %58, align 1, !tbaa !2447
  %4510 = lshr i64 %4492, 63
  %4511 = trunc i64 %4510 to i8
  store i8 %4511, i8* %61, align 1, !tbaa !2448
  %4512 = lshr i64 %4486, 63
  %4513 = xor i64 %4510, %4512
  %4514 = xor i64 %4510, %4491
  %4515 = add nuw nsw i64 %4513, %4514
  %4516 = icmp eq i64 %4515, 2
  %4517 = zext i1 %4516 to i8
  store i8 %4517, i8* %67, align 1, !tbaa !2449
  %4518 = load i64, i64* %RBP, align 8
  %4519 = add i64 %4518, -192
  %4520 = add i64 %4436, 61
  store i64 %4520, i64* %PC, align 8
  %4521 = inttoptr i64 %4519 to i32*
  %4522 = load i32, i32* %4521, align 4
  %4523 = sext i32 %4522 to i64
  %4524 = mul nsw i64 %4523, 520
  store i64 %4524, i64* %RCX, align 8, !tbaa !2450
  %4525 = lshr i64 %4524, 63
  %4526 = add i64 %4524, %4492
  store i64 %4526, i64* %RAX, align 8, !tbaa !2450
  %4527 = icmp ult i64 %4526, %4492
  %4528 = icmp ult i64 %4526, %4524
  %4529 = or i1 %4527, %4528
  %4530 = zext i1 %4529 to i8
  store i8 %4530, i8* %42, align 1, !tbaa !2428
  %4531 = trunc i64 %4526 to i32
  %4532 = and i32 %4531, 255
  %4533 = tail call i32 @llvm.ctpop.i32(i32 %4532) #10
  %4534 = trunc i32 %4533 to i8
  %4535 = and i8 %4534, 1
  %4536 = xor i8 %4535, 1
  store i8 %4536, i8* %49, align 1, !tbaa !2445
  %4537 = xor i64 %4524, %4492
  %4538 = xor i64 %4537, %4526
  %4539 = lshr i64 %4538, 4
  %4540 = trunc i64 %4539 to i8
  %4541 = and i8 %4540, 1
  store i8 %4541, i8* %55, align 1, !tbaa !2446
  %4542 = icmp eq i64 %4526, 0
  %4543 = zext i1 %4542 to i8
  store i8 %4543, i8* %58, align 1, !tbaa !2447
  %4544 = lshr i64 %4526, 63
  %4545 = trunc i64 %4544 to i8
  store i8 %4545, i8* %61, align 1, !tbaa !2448
  %4546 = xor i64 %4544, %4510
  %4547 = xor i64 %4544, %4525
  %4548 = add nuw nsw i64 %4546, %4547
  %4549 = icmp eq i64 %4548, 2
  %4550 = zext i1 %4549 to i8
  store i8 %4550, i8* %67, align 1, !tbaa !2449
  %4551 = add i64 %4518, -196
  %4552 = add i64 %4436, 78
  store i64 %4552, i64* %PC, align 8
  %4553 = inttoptr i64 %4551 to i32*
  %4554 = load i32, i32* %4553, align 4
  %4555 = sext i32 %4554 to i64
  store i64 %4555, i64* %RCX, align 8, !tbaa !2450
  %4556 = shl nsw i64 %4555, 3
  %4557 = add i64 %4556, %4526
  %4558 = add i64 %4436, 83
  store i64 %4558, i64* %PC, align 8
  %4559 = load i64, i64* %148, align 1
  %4560 = inttoptr i64 %4557 to i64*
  store i64 %4559, i64* %4560, align 8
  %4561 = load i64, i64* %RBP, align 8
  %4562 = add i64 %4561, -196
  %4563 = load i64, i64* %PC, align 8
  %4564 = add i64 %4563, 6
  store i64 %4564, i64* %PC, align 8
  %4565 = inttoptr i64 %4562 to i32*
  %4566 = load i32, i32* %4565, align 4
  %4567 = add i32 %4566, 1
  %4568 = zext i32 %4567 to i64
  store i64 %4568, i64* %RAX, align 8, !tbaa !2450
  %4569 = icmp eq i32 %4566, -1
  %4570 = icmp eq i32 %4567, 0
  %4571 = or i1 %4569, %4570
  %4572 = zext i1 %4571 to i8
  store i8 %4572, i8* %42, align 1, !tbaa !2428
  %4573 = and i32 %4567, 255
  %4574 = tail call i32 @llvm.ctpop.i32(i32 %4573) #10
  %4575 = trunc i32 %4574 to i8
  %4576 = and i8 %4575, 1
  %4577 = xor i8 %4576, 1
  store i8 %4577, i8* %49, align 1, !tbaa !2445
  %4578 = xor i32 %4567, %4566
  %4579 = lshr i32 %4578, 4
  %4580 = trunc i32 %4579 to i8
  %4581 = and i8 %4580, 1
  store i8 %4581, i8* %55, align 1, !tbaa !2446
  %4582 = zext i1 %4570 to i8
  store i8 %4582, i8* %58, align 1, !tbaa !2447
  %4583 = lshr i32 %4567, 31
  %4584 = trunc i32 %4583 to i8
  store i8 %4584, i8* %61, align 1, !tbaa !2448
  %4585 = lshr i32 %4566, 31
  %4586 = xor i32 %4583, %4585
  %4587 = add nuw nsw i32 %4586, %4583
  %4588 = icmp eq i32 %4587, 2
  %4589 = zext i1 %4588 to i8
  store i8 %4589, i8* %67, align 1, !tbaa !2449
  %4590 = add i64 %4563, 15
  store i64 %4590, i64* %PC, align 8
  store i32 %4567, i32* %4565, align 4
  %4591 = load i64, i64* %PC, align 8
  %4592 = add i64 %4591, -859
  store i64 %4592, i64* %PC, align 8, !tbaa !2450
  br label %block_402373

block_402341:                                     ; preds = %block_402ff2, %block_402270
  %4593 = phi i64 [ %1427, %block_402ff2 ], [ %.pre, %block_402270 ]
  %4594 = load i64, i64* %RBP, align 8
  %4595 = add i64 %4594, -188
  %4596 = add i64 %4593, 6
  store i64 %4596, i64* %PC, align 8
  %4597 = inttoptr i64 %4595 to i32*
  %4598 = load i32, i32* %4597, align 4
  %4599 = zext i32 %4598 to i64
  store i64 %4599, i64* %RAX, align 8, !tbaa !2450
  %4600 = add i64 %4594, -44
  %4601 = add i64 %4593, 9
  store i64 %4601, i64* %PC, align 8
  %4602 = inttoptr i64 %4600 to i32*
  %4603 = load i32, i32* %4602, align 4
  %4604 = sub i32 %4598, %4603
  %4605 = icmp ult i32 %4598, %4603
  %4606 = zext i1 %4605 to i8
  store i8 %4606, i8* %42, align 1, !tbaa !2428
  %4607 = and i32 %4604, 255
  %4608 = tail call i32 @llvm.ctpop.i32(i32 %4607) #10
  %4609 = trunc i32 %4608 to i8
  %4610 = and i8 %4609, 1
  %4611 = xor i8 %4610, 1
  store i8 %4611, i8* %49, align 1, !tbaa !2445
  %4612 = xor i32 %4603, %4598
  %4613 = xor i32 %4612, %4604
  %4614 = lshr i32 %4613, 4
  %4615 = trunc i32 %4614 to i8
  %4616 = and i8 %4615, 1
  store i8 %4616, i8* %55, align 1, !tbaa !2446
  %4617 = icmp eq i32 %4604, 0
  %4618 = zext i1 %4617 to i8
  store i8 %4618, i8* %58, align 1, !tbaa !2447
  %4619 = lshr i32 %4604, 31
  %4620 = trunc i32 %4619 to i8
  store i8 %4620, i8* %61, align 1, !tbaa !2448
  %4621 = lshr i32 %4598, 31
  %4622 = lshr i32 %4603, 31
  %4623 = xor i32 %4622, %4621
  %4624 = xor i32 %4619, %4621
  %4625 = add nuw nsw i32 %4624, %4623
  %4626 = icmp eq i32 %4625, 2
  %4627 = zext i1 %4626 to i8
  store i8 %4627, i8* %67, align 1, !tbaa !2449
  %4628 = icmp ne i8 %4620, 0
  %4629 = xor i1 %4628, %4626
  %.v15 = select i1 %4629, i64 15, i64 3274
  %4630 = add i64 %.v15, %4593
  store i64 %4630, i64* %PC, align 8, !tbaa !2450
  br i1 %4629, label %block_402350, label %block_40300b

block_4029e0:                                     ; preds = %block_4029ef, %block_4026d3
  %4631 = phi i64 [ %2474, %block_4029ef ], [ %.pre12, %block_4026d3 ]
  %4632 = load i64, i64* %RBP, align 8
  %4633 = add i64 %4632, -196
  %4634 = add i64 %4631, 6
  store i64 %4634, i64* %PC, align 8
  %4635 = inttoptr i64 %4633 to i32*
  %4636 = load i32, i32* %4635, align 4
  %4637 = zext i32 %4636 to i64
  store i64 %4637, i64* %RAX, align 8, !tbaa !2450
  %4638 = add i64 %4632, -48
  %4639 = add i64 %4631, 9
  store i64 %4639, i64* %PC, align 8
  %4640 = inttoptr i64 %4638 to i32*
  %4641 = load i32, i32* %4640, align 4
  %4642 = sub i32 %4636, %4641
  %4643 = icmp ult i32 %4636, %4641
  %4644 = zext i1 %4643 to i8
  store i8 %4644, i8* %42, align 1, !tbaa !2428
  %4645 = and i32 %4642, 255
  %4646 = tail call i32 @llvm.ctpop.i32(i32 %4645) #10
  %4647 = trunc i32 %4646 to i8
  %4648 = and i8 %4647, 1
  %4649 = xor i8 %4648, 1
  store i8 %4649, i8* %49, align 1, !tbaa !2445
  %4650 = xor i32 %4641, %4636
  %4651 = xor i32 %4650, %4642
  %4652 = lshr i32 %4651, 4
  %4653 = trunc i32 %4652 to i8
  %4654 = and i8 %4653, 1
  store i8 %4654, i8* %55, align 1, !tbaa !2446
  %4655 = icmp eq i32 %4642, 0
  %4656 = zext i1 %4655 to i8
  store i8 %4656, i8* %58, align 1, !tbaa !2447
  %4657 = lshr i32 %4642, 31
  %4658 = trunc i32 %4657 to i8
  store i8 %4658, i8* %61, align 1, !tbaa !2448
  %4659 = lshr i32 %4636, 31
  %4660 = lshr i32 %4641, 31
  %4661 = xor i32 %4660, %4659
  %4662 = xor i32 %4657, %4659
  %4663 = add nuw nsw i32 %4662, %4661
  %4664 = icmp eq i32 %4663, 2
  %4665 = zext i1 %4664 to i8
  store i8 %4665, i8* %67, align 1, !tbaa !2449
  %4666 = icmp ne i8 %4658, 0
  %4667 = xor i1 %4666, %4664
  %.v14 = select i1 %4667, i64 15, i64 818
  %4668 = add i64 %.v14, %4631
  %4669 = add i64 %4632, -120
  %4670 = add i64 %4668, 4
  store i64 %4670, i64* %PC, align 8
  %4671 = inttoptr i64 %4669 to i64*
  %4672 = load i64, i64* %4671, align 8
  store i64 %4672, i64* %RAX, align 8, !tbaa !2450
  %4673 = add i64 %4632, -188
  %4674 = add i64 %4668, 11
  store i64 %4674, i64* %PC, align 8
  %4675 = inttoptr i64 %4673 to i32*
  %4676 = load i32, i32* %4675, align 4
  %4677 = sext i32 %4676 to i64
  %4678 = mul nsw i64 %4677, 33800
  store i64 %4678, i64* %RCX, align 8, !tbaa !2450
  %4679 = lshr i64 %4678, 63
  %4680 = add i64 %4678, %4672
  store i64 %4680, i64* %RAX, align 8, !tbaa !2450
  %4681 = icmp ult i64 %4680, %4672
  %4682 = icmp ult i64 %4680, %4678
  %4683 = or i1 %4681, %4682
  %4684 = zext i1 %4683 to i8
  store i8 %4684, i8* %42, align 1, !tbaa !2428
  %4685 = trunc i64 %4680 to i32
  %4686 = and i32 %4685, 255
  %4687 = tail call i32 @llvm.ctpop.i32(i32 %4686) #10
  %4688 = trunc i32 %4687 to i8
  %4689 = and i8 %4688, 1
  %4690 = xor i8 %4689, 1
  store i8 %4690, i8* %49, align 1, !tbaa !2445
  %4691 = xor i64 %4678, %4672
  %4692 = xor i64 %4691, %4680
  %4693 = lshr i64 %4692, 4
  %4694 = trunc i64 %4693 to i8
  %4695 = and i8 %4694, 1
  store i8 %4695, i8* %55, align 1, !tbaa !2446
  %4696 = icmp eq i64 %4680, 0
  %4697 = zext i1 %4696 to i8
  store i8 %4697, i8* %58, align 1, !tbaa !2447
  %4698 = lshr i64 %4680, 63
  %4699 = trunc i64 %4698 to i8
  store i8 %4699, i8* %61, align 1, !tbaa !2448
  %4700 = lshr i64 %4672, 63
  %4701 = xor i64 %4698, %4700
  %4702 = xor i64 %4698, %4679
  %4703 = add nuw nsw i64 %4701, %4702
  %4704 = icmp eq i64 %4703, 2
  %4705 = zext i1 %4704 to i8
  store i8 %4705, i8* %67, align 1, !tbaa !2449
  %4706 = add i64 %4632, -52
  %4707 = add i64 %4668, 25
  store i64 %4707, i64* %PC, align 8
  %4708 = inttoptr i64 %4706 to i32*
  %4709 = load i32, i32* %4708, align 4
  %4710 = sext i32 %4709 to i64
  %4711 = mul nsw i64 %4710, 520
  store i64 %4711, i64* %RCX, align 8, !tbaa !2450
  %4712 = lshr i64 %4711, 63
  %4713 = add i64 %4668, 35
  store i64 %4713, i64* %PC, align 8
  %4714 = add i64 %4711, %4680
  store i64 %4714, i64* %RAX, align 8, !tbaa !2450
  %4715 = icmp ult i64 %4714, %4680
  %4716 = icmp ult i64 %4714, %4711
  %4717 = or i1 %4715, %4716
  %4718 = zext i1 %4717 to i8
  store i8 %4718, i8* %42, align 1, !tbaa !2428
  %4719 = trunc i64 %4714 to i32
  %4720 = and i32 %4719, 255
  %4721 = tail call i32 @llvm.ctpop.i32(i32 %4720) #10
  %4722 = trunc i32 %4721 to i8
  %4723 = and i8 %4722, 1
  %4724 = xor i8 %4723, 1
  store i8 %4724, i8* %49, align 1, !tbaa !2445
  %4725 = xor i64 %4711, %4680
  %4726 = xor i64 %4725, %4714
  %4727 = lshr i64 %4726, 4
  %4728 = trunc i64 %4727 to i8
  %4729 = and i8 %4728, 1
  store i8 %4729, i8* %55, align 1, !tbaa !2446
  %4730 = icmp eq i64 %4714, 0
  %4731 = zext i1 %4730 to i8
  store i8 %4731, i8* %58, align 1, !tbaa !2447
  %4732 = lshr i64 %4714, 63
  %4733 = trunc i64 %4732 to i8
  store i8 %4733, i8* %61, align 1, !tbaa !2448
  %4734 = xor i64 %4732, %4698
  %4735 = xor i64 %4732, %4712
  %4736 = add nuw nsw i64 %4734, %4735
  %4737 = icmp eq i64 %4736, 2
  %4738 = zext i1 %4737 to i8
  store i8 %4738, i8* %67, align 1, !tbaa !2449
  br i1 %4667, label %block_4029ef, label %block_402d12
}

; Function Attrs: noinline
define %struct.Memory* @sub_400800_polybench_alloc_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400800:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2450
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2428
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2445
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -12
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2450
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = sext i32 %62 to i64
  store i64 %63, i64* %RDI, align 8, !tbaa !2450
  %64 = add i64 %57, -24
  %65 = add i64 %59, 9
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sext i32 %62 to i128
  %69 = and i128 %68, -18446744073709551616
  %70 = sext i64 %67 to i128
  %71 = and i128 %70, -18446744073709551616
  %72 = zext i64 %63 to i128
  %73 = or i128 %69, %72
  %74 = zext i64 %67 to i128
  %75 = or i128 %71, %74
  %76 = mul nsw i128 %75, %73
  %77 = trunc i128 %76 to i64
  store i64 %77, i64* %RDI, align 8, !tbaa !2450
  %78 = sext i64 %77 to i128
  %79 = icmp ne i128 %78, %76
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %13, align 1, !tbaa !2428
  %81 = trunc i128 %76 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #10
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %20, align 1, !tbaa !2445
  store i8 0, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %28, align 1, !tbaa !2447
  %87 = lshr i64 %77, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2448
  store i8 %80, i8* %37, align 1, !tbaa !2449
  %89 = add i64 %59, 13
  store i64 %89, i64* %PC, align 8
  store i64 %77, i64* %66, align 8
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -24
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2450
  %96 = add i64 %92, 28
  %97 = add i64 %92, 9
  %98 = load i64, i64* %RSP, align 8, !tbaa !2450
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  store i64 %99, i64* %RSP, align 8, !tbaa !2450
  store i64 %96, i64* %PC, align 8, !tbaa !2450
  %101 = tail call %struct.Memory* @sub_400840_xmalloc_renamed_(%struct.State* nonnull %0, i64 %96, %struct.Memory* %2)
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -32
  %104 = load i64, i64* %RAX, align 8
  %105 = load i64, i64* %PC, align 8
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  store i64 %104, i64* %107, align 8
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -32
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2450
  %114 = load i64, i64* %RSP, align 8
  %115 = add i64 %114, 32
  store i64 %115, i64* %RSP, align 8, !tbaa !2450
  %116 = icmp ugt i64 %114, -33
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %13, align 1, !tbaa !2428
  %118 = trunc i64 %115 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #10
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %20, align 1, !tbaa !2445
  %124 = xor i64 %115, %114
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %25, align 1, !tbaa !2446
  %128 = icmp eq i64 %115, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %28, align 1, !tbaa !2447
  %130 = lshr i64 %115, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2448
  %132 = lshr i64 %114, 63
  %133 = xor i64 %130, %132
  %134 = add nuw nsw i64 %133, %130
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %37, align 1, !tbaa !2449
  %137 = add i64 %110, 9
  store i64 %137, i64* %PC, align 8
  %138 = add i64 %114, 40
  %139 = inttoptr i64 %115 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RBP, align 8, !tbaa !2450
  store i64 %138, i64* %RSP, align 8, !tbaa !2450
  %141 = add i64 %110, 10
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %PC, align 8, !tbaa !2450
  %144 = add i64 %114, 48
  store i64 %144, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %101
}

; Function Attrs: noinline
define %struct.Memory* @sub_4033d0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4033d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2450
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2450
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64* %R12, align 8, !tbaa !2450
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2450
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2450
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2450
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2450
  store i8 %51, i8* %43, align 1, !tbaa !2451
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #10
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2451
  store i8 0, i8* %45, align 1, !tbaa !2451
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2451
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2451
  store i8 0, i8* %48, align 1, !tbaa !2451
  %63 = add i64 %38, -11915
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2450
  store i64 %63, i64* %PC, align 8, !tbaa !2450
  %67 = tail call %struct.Memory* @sub_400560__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2428
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #10
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2445
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2447
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2446
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %.v, %69
  store i64 %80, i64* %PC, align 8, !tbaa !2450
  br i1 %76, label %block_403426, label %block_403406

block_403426.loopexit:                            ; preds = %block_403410
  br label %block_403426

block_403426:                                     ; preds = %block_403426.loopexit, %block_4033d0
  %81 = phi i64 [ %80, %block_4033d0 ], [ %179, %block_403426.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_4033d0 ], [ %149, %block_403426.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2450
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2428
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #10
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2445
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2446
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2447
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2448
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2449
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2450
  store i64 %106, i64* %RSP, align 8, !tbaa !2450
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2450
  store i64 %110, i64* %RSP, align 8, !tbaa !2450
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2450
  store i64 %114, i64* %RSP, align 8, !tbaa !2450
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2450
  store i64 %118, i64* %RSP, align 8, !tbaa !2450
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2450
  store i64 %122, i64* %RSP, align 8, !tbaa !2450
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2450
  store i64 %126, i64* %RSP, align 8, !tbaa !2450
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2450
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %MEMORY.0

block_403406:                                     ; preds = %block_4033d0
  store i64 0, i64* %RBX, align 8, !tbaa !2450
  store i8 0, i8* %43, align 1, !tbaa !2428
  store i8 1, i8* %44, align 1, !tbaa !2445
  store i8 1, i8* %46, align 1, !tbaa !2447
  store i8 0, i8* %47, align 1, !tbaa !2448
  store i8 0, i8* %48, align 1, !tbaa !2449
  store i8 0, i8* %45, align 1, !tbaa !2446
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_403410

block_403410:                                     ; preds = %block_403410, %block_403406
  %134 = phi i64 [ 0, %block_403406 ], [ %152, %block_403410 ]
  %135 = phi i64 [ %133, %block_403406 ], [ %179, %block_403410 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_403406 ], [ %149, %block_403410 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2450
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2450
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2450
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %140, %141
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2450
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2450
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2450
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2450
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2428
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #10
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2445
  %164 = xor i64 %154, %152
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2446
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2447
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2448
  %173 = lshr i64 %154, 63
  %174 = xor i64 %173, %153
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2449
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %.v2, %151
  store i64 %179, i64* %PC, align 8, !tbaa !2450
  br i1 %169, label %block_403426.loopexit, label %block_403410
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007c0_polybench_timer_print(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4007c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2450
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2450
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2428
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2445
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2446
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2449
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2450
  %40 = load double, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*), align 8
  %41 = bitcast %union.VectorReg* %4 to double*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %43 = load double, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*), align 8
  %44 = fsub double %40, %43
  store double %44, double* %41, align 1, !tbaa !2453
  store i64 0, i64* %42, align 1, !tbaa !2453
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %45 = add i64 %10, -545
  %46 = add i64 %10, 42
  %47 = add i64 %7, -32
  %48 = inttoptr i64 %47 to i64*
  store i64 %46, i64* %48, align 8
  store i64 %47, i64* %RSP, align 8, !tbaa !2450
  store i64 %45, i64* %PC, align 8, !tbaa !2450
  %49 = tail call fastcc %struct.Memory* @ext_6040e0_printf(%struct.State* nonnull %0, %struct.Memory* %2)
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -4
  %52 = load i32, i32* %EAX, align 4
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i32*
  store i32 %52, i32* %55, align 4
  %56 = load i64, i64* %RSP, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %56, 16
  store i64 %58, i64* %RSP, align 8, !tbaa !2450
  %59 = icmp ugt i64 %56, -17
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %14, align 1, !tbaa !2428
  %61 = trunc i64 %58 to i32
  %62 = and i32 %61, 255
  %63 = tail call i32 @llvm.ctpop.i32(i32 %62) #10
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  store i8 %66, i8* %21, align 1, !tbaa !2445
  %67 = xor i64 %56, 16
  %68 = xor i64 %67, %58
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %27, align 1, !tbaa !2446
  %72 = icmp eq i64 %58, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2447
  %74 = lshr i64 %58, 63
  %75 = trunc i64 %74 to i8
  store i8 %75, i8* %33, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = xor i64 %74, %76
  %78 = add nuw nsw i64 %77, %74
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %39, align 1, !tbaa !2449
  %81 = add i64 %57, 5
  store i64 %81, i64* %PC, align 8
  %82 = add i64 %56, 24
  %83 = inttoptr i64 %58 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBP, align 8, !tbaa !2450
  store i64 %82, i64* %RSP, align 8, !tbaa !2450
  %85 = add i64 %57, 6
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %82 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %PC, align 8, !tbaa !2450
  %88 = add i64 %56, 32
  store i64 %88, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %49
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_403440___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_403440:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2450
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2450
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2450
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005f0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4005f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2450
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2428
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2445
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2447
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2448
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2449
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2446
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2450
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2450
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2450
  store i64 %12, i64* %RDX, align 8, !tbaa !2450
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2428
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #10
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2445
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2447
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2448
  store i8 0, i8* %7, align 1, !tbaa !2449
  store i8 0, i8* %8, align 1, !tbaa !2446
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_403440___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2450
  store i64 ptrtoint (void ()* @callback_sub_4033d0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2450
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2450
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2450
  %38 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2450
  %39 = tail call fastcc %struct.Memory* @ext_6040e8___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4014c0_kernel_fdtd_apml(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4014c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2450
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2450
  %14 = load i64, i64* %R15, align 8
  %15 = add i64 %13, 5
  store i64 %15, i64* %PC, align 8
  %16 = add i64 %10, -16
  %17 = inttoptr i64 %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load i64, i64* %R14, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %PC, align 8
  %21 = add i64 %10, -24
  %22 = inttoptr i64 %21 to i64*
  store i64 %18, i64* %22, align 8
  %23 = load i64, i64* %R13, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 2
  store i64 %25, i64* %PC, align 8
  %26 = add i64 %10, -32
  %27 = inttoptr i64 %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load i64, i64* %R12, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 2
  store i64 %30, i64* %PC, align 8
  %31 = add i64 %10, -40
  %32 = inttoptr i64 %31 to i64*
  store i64 %28, i64* %32, align 8
  %33 = load i64, i64* %RBX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = add i64 %10, -48
  %37 = inttoptr i64 %36 to i64*
  store i64 %33, i64* %37, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %10, -104
  store i64 %39, i64* %RSP, align 8, !tbaa !2450
  %40 = icmp ult i64 %36, 56
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2428
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #10
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2445
  %50 = xor i64 %36, 16
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2446
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, 96
  %70 = add i64 %38, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RAX, align 8, !tbaa !2450
  %73 = add i64 %68, 88
  %74 = add i64 %38, 12
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %R10, align 8, !tbaa !2450
  %77 = add i64 %68, 80
  %78 = add i64 %38, 16
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %R11, align 8, !tbaa !2450
  %81 = add i64 %68, 72
  %82 = add i64 %38, 20
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RBX, align 8, !tbaa !2450
  %85 = add i64 %68, 64
  %86 = add i64 %38, 24
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %R14, align 8, !tbaa !2450
  %89 = add i64 %68, 56
  %90 = add i64 %38, 28
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %R15, align 8, !tbaa !2450
  %93 = add i64 %68, 48
  %94 = add i64 %38, 32
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %R12, align 8, !tbaa !2450
  %97 = add i64 %68, 40
  %98 = add i64 %38, 36
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %R13, align 8, !tbaa !2450
  %101 = add i64 %68, -208
  %102 = add i64 %38, 43
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %72, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, 32
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2450
  %110 = add i64 %104, -216
  %111 = add i64 %106, 11
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, 24
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2450
  %119 = add i64 %113, -224
  %120 = add i64 %115, 11
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %118, i64* %121, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, 16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2450
  %128 = add i64 %122, -44
  %129 = load i32, i32* %EDI, align 4
  %130 = add i64 %124, 7
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %131, align 4
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = load i32, i32* %ESI, align 4
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %138 = load i64, i64* %RBP, align 8
  %139 = add i64 %138, -52
  %140 = load i32, i32* %EDX, align 4
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -64
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC, align 8
  %148 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %149 = load i64, i64* %148, align 1
  %150 = inttoptr i64 %145 to i64*
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -72
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC, align 8
  %155 = bitcast %union.VectorReg* %7 to double*
  %156 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %157 = load i64, i64* %156, align 1
  %158 = inttoptr i64 %152 to i64*
  store i64 %157, i64* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -80
  %161 = load i64, i64* %RCX, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %160 to i64*
  store i64 %161, i64* %164, align 8
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -88
  %167 = load i64, i64* %R8, align 8
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170, align 8
  %171 = load i64, i64* %RBP, align 8
  %172 = add i64 %171, -96
  %173 = load i64, i64* %R9, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %172 to i64*
  store i64 %173, i64* %176, align 8
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -104
  %179 = load i64, i64* %RAX, align 8
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %178 to i64*
  store i64 %179, i64* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -224
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2450
  %189 = add i64 %183, -112
  %190 = add i64 %185, 11
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  store i64 %188, i64* %191, align 8
  %192 = load i64, i64* %RBP, align 8
  %193 = add i64 %192, -216
  %194 = load i64, i64* %PC, align 8
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RCX, align 8, !tbaa !2450
  %198 = add i64 %192, -120
  %199 = add i64 %194, 11
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %197, i64* %200, align 8
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -128
  %203 = load i64, i64* %R13, align 8
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -136
  %209 = load i64, i64* %R12, align 8
  %210 = load i64, i64* %PC, align 8
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212, align 8
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -144
  %215 = load i64, i64* %R15, align 8
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 7
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %214 to i64*
  store i64 %215, i64* %218, align 8
  %219 = load i64, i64* %RBP, align 8
  %220 = add i64 %219, -152
  %221 = load i64, i64* %R14, align 8
  %222 = load i64, i64* %PC, align 8
  %223 = add i64 %222, 7
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %220 to i64*
  store i64 %221, i64* %224, align 8
  %225 = load i64, i64* %RBP, align 8
  %226 = add i64 %225, -160
  %227 = load i64, i64* %RBX, align 8
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %226 to i64*
  store i64 %227, i64* %230, align 8
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -168
  %233 = load i64, i64* %R11, align 8
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %232 to i64*
  store i64 %233, i64* %236, align 8
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -176
  %239 = load i64, i64* %R10, align 8
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 7
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242, align 8
  %243 = load i64, i64* %RBP, align 8
  %244 = add i64 %243, -208
  %245 = load i64, i64* %PC, align 8
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %R8, align 8, !tbaa !2450
  %249 = add i64 %243, -184
  %250 = add i64 %245, 14
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i64*
  store i64 %248, i64* %251, align 8
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -188
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, 10
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %253 to i32*
  store i32 0, i32* %256, align 4
  %257 = bitcast [32 x %union.VectorReg]* %6 to double*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %259 = bitcast i64* %258 to double*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %261 = bitcast i64* %260 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401591

block_401c3f:                                     ; preds = %block_401c30
  %262 = add i64 %4668, 42
  store i64 %262, i64* %PC, align 8
  %263 = load i32, i32* %4635, align 4
  %264 = sext i32 %263 to i64
  store i64 %264, i64* %RCX, align 8, !tbaa !2450
  %265 = shl nsw i64 %264, 3
  %266 = add i64 %265, %4714
  %267 = add i64 %4668, 47
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %270 = add i64 %4632, -80
  %271 = add i64 %4668, 51
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i64 %273, i64* %RAX, align 8, !tbaa !2450
  %274 = add i64 %4668, 58
  store i64 %274, i64* %PC, align 8
  %275 = load i32, i32* %4675, align 4
  %276 = sext i32 %275 to i64
  %277 = mul nsw i64 %276, 520
  store i64 %277, i64* %RCX, align 8, !tbaa !2450
  %278 = lshr i64 %277, 63
  %279 = add i64 %277, %273
  store i64 %279, i64* %RAX, align 8, !tbaa !2450
  %280 = icmp ult i64 %279, %273
  %281 = icmp ult i64 %279, %277
  %282 = or i1 %280, %281
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %42, align 1, !tbaa !2428
  %284 = trunc i64 %279 to i32
  %285 = and i32 %284, 255
  %286 = tail call i32 @llvm.ctpop.i32(i32 %285) #10
  %287 = trunc i32 %286 to i8
  %288 = and i8 %287, 1
  %289 = xor i8 %288, 1
  store i8 %289, i8* %49, align 1, !tbaa !2445
  %290 = xor i64 %277, %273
  %291 = xor i64 %290, %279
  %292 = lshr i64 %291, 4
  %293 = trunc i64 %292 to i8
  %294 = and i8 %293, 1
  store i8 %294, i8* %55, align 1, !tbaa !2446
  %295 = icmp eq i64 %279, 0
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %58, align 1, !tbaa !2447
  %297 = lshr i64 %279, 63
  %298 = trunc i64 %297 to i8
  store i8 %298, i8* %61, align 1, !tbaa !2448
  %299 = lshr i64 %273, 63
  %300 = xor i64 %297, %299
  %301 = xor i64 %297, %278
  %302 = add nuw nsw i64 %300, %301
  %303 = icmp eq i64 %302, 2
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %67, align 1, !tbaa !2449
  %305 = add i64 %4668, 75
  store i64 %305, i64* %PC, align 8
  %306 = load i32, i32* %4635, align 4
  %307 = sext i32 %306 to i64
  store i64 %307, i64* %RCX, align 8, !tbaa !2450
  %308 = shl nsw i64 %307, 3
  %309 = add i64 %308, %279
  %310 = add i64 %4668, 80
  store i64 %310, i64* %PC, align 8
  %311 = bitcast i64 %269 to double
  %312 = inttoptr i64 %309 to double*
  %313 = load double, double* %312, align 8
  %314 = fsub double %311, %313
  store double %314, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -128
  %317 = add i64 %4668, 84
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %RAX, align 8, !tbaa !2450
  %320 = add i64 %315, -188
  %321 = add i64 %4668, 91
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = sext i32 %323 to i64
  %325 = mul nsw i64 %324, 33800
  store i64 %325, i64* %RCX, align 8, !tbaa !2450
  %326 = lshr i64 %325, 63
  %327 = add i64 %325, %319
  store i64 %327, i64* %RAX, align 8, !tbaa !2450
  %328 = icmp ult i64 %327, %319
  %329 = icmp ult i64 %327, %325
  %330 = or i1 %328, %329
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %42, align 1, !tbaa !2428
  %332 = trunc i64 %327 to i32
  %333 = and i32 %332, 255
  %334 = tail call i32 @llvm.ctpop.i32(i32 %333) #10
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  store i8 %337, i8* %49, align 1, !tbaa !2445
  %338 = xor i64 %325, %319
  %339 = xor i64 %338, %327
  %340 = lshr i64 %339, 4
  %341 = trunc i64 %340 to i8
  %342 = and i8 %341, 1
  store i8 %342, i8* %55, align 1, !tbaa !2446
  %343 = icmp eq i64 %327, 0
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %58, align 1, !tbaa !2447
  %345 = lshr i64 %327, 63
  %346 = trunc i64 %345 to i8
  store i8 %346, i8* %61, align 1, !tbaa !2448
  %347 = lshr i64 %319, 63
  %348 = xor i64 %345, %347
  %349 = xor i64 %345, %326
  %350 = add nuw nsw i64 %348, %349
  %351 = icmp eq i64 %350, 2
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %67, align 1, !tbaa !2449
  %353 = add i64 %315, -52
  %354 = add i64 %4668, 105
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %353 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = sext i32 %356 to i64
  %358 = mul nsw i64 %357, 520
  store i64 %358, i64* %RCX, align 8, !tbaa !2450
  %359 = lshr i64 %358, 63
  %360 = add i64 %358, %327
  store i64 %360, i64* %RAX, align 8, !tbaa !2450
  %361 = icmp ult i64 %360, %327
  %362 = icmp ult i64 %360, %358
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %42, align 1, !tbaa !2428
  %365 = trunc i64 %360 to i32
  %366 = and i32 %365, 255
  %367 = tail call i32 @llvm.ctpop.i32(i32 %366) #10
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  store i8 %370, i8* %49, align 1, !tbaa !2445
  %371 = xor i64 %358, %327
  %372 = xor i64 %371, %360
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  store i8 %375, i8* %55, align 1, !tbaa !2446
  %376 = icmp eq i64 %360, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %58, align 1, !tbaa !2447
  %378 = lshr i64 %360, 63
  %379 = trunc i64 %378 to i8
  store i8 %379, i8* %61, align 1, !tbaa !2448
  %380 = xor i64 %378, %345
  %381 = xor i64 %378, %359
  %382 = add nuw nsw i64 %380, %381
  %383 = icmp eq i64 %382, 2
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %67, align 1, !tbaa !2449
  %385 = add i64 %315, -196
  %386 = add i64 %4668, 121
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = add i32 %388, 1
  %390 = zext i32 %389 to i64
  store i64 %390, i64* %RDX, align 8, !tbaa !2450
  %391 = icmp eq i32 %388, -1
  %392 = icmp eq i32 %389, 0
  %393 = or i1 %391, %392
  %394 = zext i1 %393 to i8
  store i8 %394, i8* %42, align 1, !tbaa !2428
  %395 = and i32 %389, 255
  %396 = tail call i32 @llvm.ctpop.i32(i32 %395) #10
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  store i8 %399, i8* %49, align 1, !tbaa !2445
  %400 = xor i32 %389, %388
  %401 = lshr i32 %400, 4
  %402 = trunc i32 %401 to i8
  %403 = and i8 %402, 1
  store i8 %403, i8* %55, align 1, !tbaa !2446
  %404 = zext i1 %392 to i8
  store i8 %404, i8* %58, align 1, !tbaa !2447
  %405 = lshr i32 %389, 31
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %61, align 1, !tbaa !2448
  %407 = lshr i32 %388, 31
  %408 = xor i32 %405, %407
  %409 = add nuw nsw i32 %408, %405
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %67, align 1, !tbaa !2449
  %412 = sext i32 %389 to i64
  store i64 %412, i64* %RCX, align 8, !tbaa !2450
  %413 = shl nsw i64 %412, 3
  %414 = add i64 %413, %360
  %415 = add i64 %4668, 132
  store i64 %415, i64* %PC, align 8
  %416 = load double, double* %257, align 1
  %417 = inttoptr i64 %414 to double*
  %418 = load double, double* %417, align 8
  %419 = fadd double %416, %418
  store double %419, double* %257, align 1, !tbaa !2453
  %420 = add i64 %4668, 136
  store i64 %420, i64* %PC, align 8
  %421 = load i64, i64* %318, align 8
  store i64 %421, i64* %RAX, align 8, !tbaa !2450
  %422 = add i64 %4668, 143
  store i64 %422, i64* %PC, align 8
  %423 = load i32, i32* %322, align 4
  %424 = sext i32 %423 to i64
  %425 = mul nsw i64 %424, 33800
  store i64 %425, i64* %RCX, align 8, !tbaa !2450
  %426 = lshr i64 %425, 63
  %427 = add i64 %425, %421
  store i64 %427, i64* %RAX, align 8, !tbaa !2450
  %428 = icmp ult i64 %427, %421
  %429 = icmp ult i64 %427, %425
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  store i8 %431, i8* %42, align 1, !tbaa !2428
  %432 = trunc i64 %427 to i32
  %433 = and i32 %432, 255
  %434 = tail call i32 @llvm.ctpop.i32(i32 %433) #10
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = xor i8 %436, 1
  store i8 %437, i8* %49, align 1, !tbaa !2445
  %438 = xor i64 %425, %421
  %439 = xor i64 %438, %427
  %440 = lshr i64 %439, 4
  %441 = trunc i64 %440 to i8
  %442 = and i8 %441, 1
  store i8 %442, i8* %55, align 1, !tbaa !2446
  %443 = icmp eq i64 %427, 0
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %58, align 1, !tbaa !2447
  %445 = lshr i64 %427, 63
  %446 = trunc i64 %445 to i8
  store i8 %446, i8* %61, align 1, !tbaa !2448
  %447 = lshr i64 %421, 63
  %448 = xor i64 %445, %447
  %449 = xor i64 %445, %426
  %450 = add nuw nsw i64 %448, %449
  %451 = icmp eq i64 %450, 2
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %67, align 1, !tbaa !2449
  %453 = load i64, i64* %RBP, align 8
  %454 = add i64 %453, -52
  %455 = add i64 %4668, 157
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i32*
  %457 = load i32, i32* %456, align 4
  %458 = sext i32 %457 to i64
  %459 = mul nsw i64 %458, 520
  store i64 %459, i64* %RCX, align 8, !tbaa !2450
  %460 = lshr i64 %459, 63
  %461 = add i64 %459, %427
  store i64 %461, i64* %RAX, align 8, !tbaa !2450
  %462 = icmp ult i64 %461, %427
  %463 = icmp ult i64 %461, %459
  %464 = or i1 %462, %463
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %42, align 1, !tbaa !2428
  %466 = trunc i64 %461 to i32
  %467 = and i32 %466, 255
  %468 = tail call i32 @llvm.ctpop.i32(i32 %467) #10
  %469 = trunc i32 %468 to i8
  %470 = and i8 %469, 1
  %471 = xor i8 %470, 1
  store i8 %471, i8* %49, align 1, !tbaa !2445
  %472 = xor i64 %459, %427
  %473 = xor i64 %472, %461
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %55, align 1, !tbaa !2446
  %477 = icmp eq i64 %461, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %58, align 1, !tbaa !2447
  %479 = lshr i64 %461, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %61, align 1, !tbaa !2448
  %481 = xor i64 %479, %445
  %482 = xor i64 %479, %460
  %483 = add nuw nsw i64 %481, %482
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %67, align 1, !tbaa !2449
  %486 = add i64 %453, -196
  %487 = add i64 %4668, 174
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = sext i32 %489 to i64
  store i64 %490, i64* %RCX, align 8, !tbaa !2450
  %491 = shl nsw i64 %490, 3
  %492 = add i64 %491, %461
  %493 = add i64 %4668, 179
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to double*
  %495 = load double, double* %494, align 8
  %496 = fsub double %419, %495
  store double %496, double* %257, align 1, !tbaa !2453
  %497 = add i64 %453, -96
  %498 = add i64 %4668, 183
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RAX, align 8, !tbaa !2450
  %501 = add i64 %453, -188
  %502 = add i64 %4668, 190
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = sext i32 %504 to i64
  %506 = mul nsw i64 %505, 520
  store i64 %506, i64* %RCX, align 8, !tbaa !2450
  %507 = lshr i64 %506, 63
  %508 = add i64 %506, %500
  store i64 %508, i64* %RAX, align 8, !tbaa !2450
  %509 = icmp ult i64 %508, %500
  %510 = icmp ult i64 %508, %506
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %42, align 1, !tbaa !2428
  %513 = trunc i64 %508 to i32
  %514 = and i32 %513, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #10
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %49, align 1, !tbaa !2445
  %519 = xor i64 %506, %500
  %520 = xor i64 %519, %508
  %521 = lshr i64 %520, 4
  %522 = trunc i64 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %55, align 1, !tbaa !2446
  %524 = icmp eq i64 %508, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %58, align 1, !tbaa !2447
  %526 = lshr i64 %508, 63
  %527 = trunc i64 %526 to i8
  store i8 %527, i8* %61, align 1, !tbaa !2448
  %528 = lshr i64 %500, 63
  %529 = xor i64 %526, %528
  %530 = xor i64 %526, %507
  %531 = add nuw nsw i64 %529, %530
  %532 = icmp eq i64 %531, 2
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %67, align 1, !tbaa !2449
  %534 = load i64, i64* %RBP, align 8
  %535 = add i64 %534, -192
  %536 = add i64 %4668, 207
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %535 to i32*
  %538 = load i32, i32* %537, align 4
  %539 = sext i32 %538 to i64
  store i64 %539, i64* %RCX, align 8, !tbaa !2450
  %540 = shl nsw i64 %539, 3
  %541 = add i64 %540, %508
  %542 = add i64 %4668, 212
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to double*
  store double %496, double* %543, align 8
  %544 = load i64, i64* %RBP, align 8
  %545 = add i64 %544, -176
  %546 = load i64, i64* %PC, align 8
  %547 = add i64 %546, 7
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548, align 8
  store i64 %549, i64* %RAX, align 8, !tbaa !2450
  %550 = add i64 %544, -52
  %551 = add i64 %546, 11
  store i64 %551, i64* %PC, align 8
  %552 = inttoptr i64 %550 to i32*
  %553 = load i32, i32* %552, align 4
  %554 = sext i32 %553 to i64
  store i64 %554, i64* %RCX, align 8, !tbaa !2450
  %555 = shl nsw i64 %554, 3
  %556 = add i64 %555, %549
  %557 = add i64 %546, 16
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %556 to i64*
  %559 = load i64, i64* %558, align 8
  store i64 %559, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %560 = add i64 %544, -184
  %561 = add i64 %546, 23
  store i64 %561, i64* %PC, align 8
  %562 = inttoptr i64 %560 to i64*
  %563 = load i64, i64* %562, align 8
  store i64 %563, i64* %RAX, align 8, !tbaa !2450
  %564 = add i64 %544, -192
  %565 = add i64 %546, 30
  store i64 %565, i64* %PC, align 8
  %566 = inttoptr i64 %564 to i32*
  %567 = load i32, i32* %566, align 4
  %568 = sext i32 %567 to i64
  store i64 %568, i64* %RCX, align 8, !tbaa !2450
  %569 = shl nsw i64 %568, 3
  %570 = add i64 %569, %563
  %571 = add i64 %546, 35
  store i64 %571, i64* %PC, align 8
  %572 = bitcast i64 %559 to double
  %573 = inttoptr i64 %570 to double*
  %574 = load double, double* %573, align 8
  %575 = fdiv double %572, %574
  store double %575, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %576 = add i64 %544, -112
  %577 = add i64 %546, 39
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %576 to i64*
  %579 = load i64, i64* %578, align 8
  store i64 %579, i64* %RAX, align 8, !tbaa !2450
  %580 = add i64 %544, -188
  %581 = add i64 %546, 46
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = sext i32 %583 to i64
  %585 = mul nsw i64 %584, 33800
  store i64 %585, i64* %RCX, align 8, !tbaa !2450
  %586 = lshr i64 %585, 63
  %587 = add i64 %585, %579
  store i64 %587, i64* %RAX, align 8, !tbaa !2450
  %588 = icmp ult i64 %587, %579
  %589 = icmp ult i64 %587, %585
  %590 = or i1 %588, %589
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %42, align 1, !tbaa !2428
  %592 = trunc i64 %587 to i32
  %593 = and i32 %592, 255
  %594 = tail call i32 @llvm.ctpop.i32(i32 %593) #10
  %595 = trunc i32 %594 to i8
  %596 = and i8 %595, 1
  %597 = xor i8 %596, 1
  store i8 %597, i8* %49, align 1, !tbaa !2445
  %598 = xor i64 %585, %579
  %599 = xor i64 %598, %587
  %600 = lshr i64 %599, 4
  %601 = trunc i64 %600 to i8
  %602 = and i8 %601, 1
  store i8 %602, i8* %55, align 1, !tbaa !2446
  %603 = icmp eq i64 %587, 0
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %58, align 1, !tbaa !2447
  %605 = lshr i64 %587, 63
  %606 = trunc i64 %605 to i8
  store i8 %606, i8* %61, align 1, !tbaa !2448
  %607 = lshr i64 %579, 63
  %608 = xor i64 %605, %607
  %609 = xor i64 %605, %586
  %610 = add nuw nsw i64 %608, %609
  %611 = icmp eq i64 %610, 2
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %67, align 1, !tbaa !2449
  %613 = add i64 %546, 63
  store i64 %613, i64* %PC, align 8
  %614 = load i32, i32* %566, align 4
  %615 = sext i32 %614 to i64
  %616 = mul nsw i64 %615, 520
  store i64 %616, i64* %RCX, align 8, !tbaa !2450
  %617 = lshr i64 %616, 63
  %618 = add i64 %616, %587
  store i64 %618, i64* %RAX, align 8, !tbaa !2450
  %619 = icmp ult i64 %618, %587
  %620 = icmp ult i64 %618, %616
  %621 = or i1 %619, %620
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %42, align 1, !tbaa !2428
  %623 = trunc i64 %618 to i32
  %624 = and i32 %623, 255
  %625 = tail call i32 @llvm.ctpop.i32(i32 %624) #10
  %626 = trunc i32 %625 to i8
  %627 = and i8 %626, 1
  %628 = xor i8 %627, 1
  store i8 %628, i8* %49, align 1, !tbaa !2445
  %629 = xor i64 %616, %587
  %630 = xor i64 %629, %618
  %631 = lshr i64 %630, 4
  %632 = trunc i64 %631 to i8
  %633 = and i8 %632, 1
  store i8 %633, i8* %55, align 1, !tbaa !2446
  %634 = icmp eq i64 %618, 0
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %58, align 1, !tbaa !2447
  %636 = lshr i64 %618, 63
  %637 = trunc i64 %636 to i8
  store i8 %637, i8* %61, align 1, !tbaa !2448
  %638 = xor i64 %636, %605
  %639 = xor i64 %636, %617
  %640 = add nuw nsw i64 %638, %639
  %641 = icmp eq i64 %640, 2
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %67, align 1, !tbaa !2449
  %643 = add i64 %544, -196
  %644 = add i64 %546, 80
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i32*
  %646 = load i32, i32* %645, align 4
  %647 = sext i32 %646 to i64
  store i64 %647, i64* %RCX, align 8, !tbaa !2450
  %648 = shl nsw i64 %647, 3
  %649 = add i64 %648, %618
  %650 = add i64 %546, 85
  store i64 %650, i64* %PC, align 8
  %651 = load double, double* %257, align 1
  %652 = inttoptr i64 %649 to double*
  %653 = load double, double* %652, align 8
  %654 = fmul double %651, %653
  store double %654, double* %257, align 1, !tbaa !2453
  %655 = add i64 %544, -72
  %656 = add i64 %546, 90
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i64*
  %658 = load i64, i64* %657, align 8
  store i64 %658, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %659 = add i64 %546, 97
  store i64 %659, i64* %PC, align 8
  %660 = load i64, i64* %562, align 8
  store i64 %660, i64* %RAX, align 8, !tbaa !2450
  %661 = add i64 %546, 104
  store i64 %661, i64* %PC, align 8
  %662 = load i32, i32* %566, align 4
  %663 = sext i32 %662 to i64
  store i64 %663, i64* %RCX, align 8, !tbaa !2450
  %664 = shl nsw i64 %663, 3
  %665 = add i64 %664, %660
  %666 = add i64 %546, 109
  store i64 %666, i64* %PC, align 8
  %667 = bitcast i64 %658 to double
  %668 = inttoptr i64 %665 to double*
  %669 = load double, double* %668, align 8
  %670 = fdiv double %667, %669
  store double %670, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %671 = load i64, i64* %RBP, align 8
  %672 = add i64 %671, -96
  %673 = add i64 %546, 113
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %672 to i64*
  %675 = load i64, i64* %674, align 8
  store i64 %675, i64* %RAX, align 8, !tbaa !2450
  %676 = add i64 %671, -188
  %677 = add i64 %546, 120
  store i64 %677, i64* %PC, align 8
  %678 = inttoptr i64 %676 to i32*
  %679 = load i32, i32* %678, align 4
  %680 = sext i32 %679 to i64
  %681 = mul nsw i64 %680, 520
  store i64 %681, i64* %RCX, align 8, !tbaa !2450
  %682 = lshr i64 %681, 63
  %683 = add i64 %681, %675
  store i64 %683, i64* %RAX, align 8, !tbaa !2450
  %684 = icmp ult i64 %683, %675
  %685 = icmp ult i64 %683, %681
  %686 = or i1 %684, %685
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %42, align 1, !tbaa !2428
  %688 = trunc i64 %683 to i32
  %689 = and i32 %688, 255
  %690 = tail call i32 @llvm.ctpop.i32(i32 %689) #10
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = xor i8 %692, 1
  store i8 %693, i8* %49, align 1, !tbaa !2445
  %694 = xor i64 %681, %675
  %695 = xor i64 %694, %683
  %696 = lshr i64 %695, 4
  %697 = trunc i64 %696 to i8
  %698 = and i8 %697, 1
  store i8 %698, i8* %55, align 1, !tbaa !2446
  %699 = icmp eq i64 %683, 0
  %700 = zext i1 %699 to i8
  store i8 %700, i8* %58, align 1, !tbaa !2447
  %701 = lshr i64 %683, 63
  %702 = trunc i64 %701 to i8
  store i8 %702, i8* %61, align 1, !tbaa !2448
  %703 = lshr i64 %675, 63
  %704 = xor i64 %701, %703
  %705 = xor i64 %701, %682
  %706 = add nuw nsw i64 %704, %705
  %707 = icmp eq i64 %706, 2
  %708 = zext i1 %707 to i8
  store i8 %708, i8* %67, align 1, !tbaa !2449
  %709 = add i64 %671, -192
  %710 = add i64 %546, 137
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %709 to i32*
  %712 = load i32, i32* %711, align 4
  %713 = sext i32 %712 to i64
  store i64 %713, i64* %RCX, align 8, !tbaa !2450
  %714 = shl nsw i64 %713, 3
  %715 = add i64 %714, %683
  %716 = add i64 %546, 142
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to double*
  %718 = load double, double* %717, align 8
  %719 = fmul double %670, %718
  store double %719, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %720 = fsub double %654, %719
  store double %720, double* %257, align 1, !tbaa !2453
  %721 = add i64 %671, -104
  %722 = add i64 %546, 150
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to i64*
  %724 = load i64, i64* %723, align 8
  store i64 %724, i64* %RAX, align 8, !tbaa !2450
  %725 = add i64 %546, 157
  store i64 %725, i64* %PC, align 8
  %726 = load i32, i32* %678, align 4
  %727 = sext i32 %726 to i64
  %728 = mul nsw i64 %727, 520
  store i64 %728, i64* %RCX, align 8, !tbaa !2450
  %729 = lshr i64 %728, 63
  %730 = add i64 %728, %724
  store i64 %730, i64* %RAX, align 8, !tbaa !2450
  %731 = icmp ult i64 %730, %724
  %732 = icmp ult i64 %730, %728
  %733 = or i1 %731, %732
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %42, align 1, !tbaa !2428
  %735 = trunc i64 %730 to i32
  %736 = and i32 %735, 255
  %737 = tail call i32 @llvm.ctpop.i32(i32 %736) #10
  %738 = trunc i32 %737 to i8
  %739 = and i8 %738, 1
  %740 = xor i8 %739, 1
  store i8 %740, i8* %49, align 1, !tbaa !2445
  %741 = xor i64 %728, %724
  %742 = xor i64 %741, %730
  %743 = lshr i64 %742, 4
  %744 = trunc i64 %743 to i8
  %745 = and i8 %744, 1
  store i8 %745, i8* %55, align 1, !tbaa !2446
  %746 = icmp eq i64 %730, 0
  %747 = zext i1 %746 to i8
  store i8 %747, i8* %58, align 1, !tbaa !2447
  %748 = lshr i64 %730, 63
  %749 = trunc i64 %748 to i8
  store i8 %749, i8* %61, align 1, !tbaa !2448
  %750 = lshr i64 %724, 63
  %751 = xor i64 %748, %750
  %752 = xor i64 %748, %729
  %753 = add nuw nsw i64 %751, %752
  %754 = icmp eq i64 %753, 2
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %67, align 1, !tbaa !2449
  %756 = add i64 %546, 174
  store i64 %756, i64* %PC, align 8
  %757 = load i32, i32* %711, align 4
  %758 = sext i32 %757 to i64
  store i64 %758, i64* %RCX, align 8, !tbaa !2450
  %759 = shl nsw i64 %758, 3
  %760 = add i64 %759, %730
  %761 = add i64 %546, 179
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %760 to double*
  store double %720, double* %762, align 8
  %763 = load i64, i64* %RBP, align 8
  %764 = add i64 %763, -160
  %765 = load i64, i64* %PC, align 8
  %766 = add i64 %765, 7
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %764 to i64*
  %768 = load i64, i64* %767, align 8
  store i64 %768, i64* %RAX, align 8, !tbaa !2450
  %769 = add i64 %763, -196
  %770 = add i64 %765, 14
  store i64 %770, i64* %PC, align 8
  %771 = inttoptr i64 %769 to i32*
  %772 = load i32, i32* %771, align 4
  %773 = sext i32 %772 to i64
  store i64 %773, i64* %RCX, align 8, !tbaa !2450
  %774 = shl nsw i64 %773, 3
  %775 = add i64 %774, %768
  %776 = add i64 %765, 19
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %775 to i64*
  %778 = load i64, i64* %777, align 8
  store i64 %778, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %779 = add i64 %763, -168
  %780 = add i64 %765, 26
  store i64 %780, i64* %PC, align 8
  %781 = inttoptr i64 %779 to i64*
  %782 = load i64, i64* %781, align 8
  store i64 %782, i64* %RAX, align 8, !tbaa !2450
  %783 = add i64 %765, 33
  store i64 %783, i64* %PC, align 8
  %784 = load i32, i32* %771, align 4
  %785 = sext i32 %784 to i64
  store i64 %785, i64* %RCX, align 8, !tbaa !2450
  %786 = shl nsw i64 %785, 3
  %787 = add i64 %786, %782
  %788 = add i64 %765, 38
  store i64 %788, i64* %PC, align 8
  %789 = bitcast i64 %778 to double
  %790 = inttoptr i64 %787 to double*
  %791 = load double, double* %790, align 8
  %792 = fdiv double %789, %791
  store double %792, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %793 = add i64 %763, -136
  %794 = add i64 %765, 45
  store i64 %794, i64* %PC, align 8
  %795 = inttoptr i64 %793 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %RAX, align 8, !tbaa !2450
  %797 = add i64 %763, -188
  %798 = add i64 %765, 52
  store i64 %798, i64* %PC, align 8
  %799 = inttoptr i64 %797 to i32*
  %800 = load i32, i32* %799, align 4
  %801 = sext i32 %800 to i64
  %802 = mul nsw i64 %801, 33800
  store i64 %802, i64* %RCX, align 8, !tbaa !2450
  %803 = lshr i64 %802, 63
  %804 = add i64 %802, %796
  store i64 %804, i64* %RAX, align 8, !tbaa !2450
  %805 = icmp ult i64 %804, %796
  %806 = icmp ult i64 %804, %802
  %807 = or i1 %805, %806
  %808 = zext i1 %807 to i8
  store i8 %808, i8* %42, align 1, !tbaa !2428
  %809 = trunc i64 %804 to i32
  %810 = and i32 %809, 255
  %811 = tail call i32 @llvm.ctpop.i32(i32 %810) #10
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  store i8 %814, i8* %49, align 1, !tbaa !2445
  %815 = xor i64 %802, %796
  %816 = xor i64 %815, %804
  %817 = lshr i64 %816, 4
  %818 = trunc i64 %817 to i8
  %819 = and i8 %818, 1
  store i8 %819, i8* %55, align 1, !tbaa !2446
  %820 = icmp eq i64 %804, 0
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %58, align 1, !tbaa !2447
  %822 = lshr i64 %804, 63
  %823 = trunc i64 %822 to i8
  store i8 %823, i8* %61, align 1, !tbaa !2448
  %824 = lshr i64 %796, 63
  %825 = xor i64 %822, %824
  %826 = xor i64 %822, %803
  %827 = add nuw nsw i64 %825, %826
  %828 = icmp eq i64 %827, 2
  %829 = zext i1 %828 to i8
  store i8 %829, i8* %67, align 1, !tbaa !2449
  %830 = add i64 %763, -52
  %831 = add i64 %765, 66
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to i32*
  %833 = load i32, i32* %832, align 4
  %834 = sext i32 %833 to i64
  %835 = mul nsw i64 %834, 520
  store i64 %835, i64* %RCX, align 8, !tbaa !2450
  %836 = lshr i64 %835, 63
  %837 = add i64 %835, %804
  store i64 %837, i64* %RAX, align 8, !tbaa !2450
  %838 = icmp ult i64 %837, %804
  %839 = icmp ult i64 %837, %835
  %840 = or i1 %838, %839
  %841 = zext i1 %840 to i8
  store i8 %841, i8* %42, align 1, !tbaa !2428
  %842 = trunc i64 %837 to i32
  %843 = and i32 %842, 255
  %844 = tail call i32 @llvm.ctpop.i32(i32 %843) #10
  %845 = trunc i32 %844 to i8
  %846 = and i8 %845, 1
  %847 = xor i8 %846, 1
  store i8 %847, i8* %49, align 1, !tbaa !2445
  %848 = xor i64 %835, %804
  %849 = xor i64 %848, %837
  %850 = lshr i64 %849, 4
  %851 = trunc i64 %850 to i8
  %852 = and i8 %851, 1
  store i8 %852, i8* %55, align 1, !tbaa !2446
  %853 = icmp eq i64 %837, 0
  %854 = zext i1 %853 to i8
  store i8 %854, i8* %58, align 1, !tbaa !2447
  %855 = lshr i64 %837, 63
  %856 = trunc i64 %855 to i8
  store i8 %856, i8* %61, align 1, !tbaa !2448
  %857 = xor i64 %855, %822
  %858 = xor i64 %855, %836
  %859 = add nuw nsw i64 %857, %858
  %860 = icmp eq i64 %859, 2
  %861 = zext i1 %860 to i8
  store i8 %861, i8* %67, align 1, !tbaa !2449
  %862 = add i64 %765, 83
  store i64 %862, i64* %PC, align 8
  %863 = load i32, i32* %771, align 4
  %864 = sext i32 %863 to i64
  store i64 %864, i64* %RCX, align 8, !tbaa !2450
  %865 = shl nsw i64 %864, 3
  %866 = add i64 %865, %837
  %867 = add i64 %765, 88
  store i64 %867, i64* %PC, align 8
  %868 = load double, double* %257, align 1
  %869 = inttoptr i64 %866 to double*
  %870 = load double, double* %869, align 8
  %871 = fmul double %868, %870
  store double %871, double* %257, align 1, !tbaa !2453
  %872 = add i64 %763, -64
  %873 = add i64 %765, 93
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i64*
  %875 = load i64, i64* %874, align 8
  store i64 %875, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %876 = add i64 %763, -152
  %877 = add i64 %765, 100
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %RAX, align 8, !tbaa !2450
  %880 = add i64 %765, 107
  store i64 %880, i64* %PC, align 8
  %881 = load i32, i32* %799, align 4
  %882 = sext i32 %881 to i64
  store i64 %882, i64* %RCX, align 8, !tbaa !2450
  %883 = shl nsw i64 %882, 3
  %884 = add i64 %883, %879
  %885 = add i64 %765, 112
  store i64 %885, i64* %PC, align 8
  %886 = bitcast i64 %875 to double
  %887 = inttoptr i64 %884 to double*
  %888 = load double, double* %887, align 8
  %889 = fmul double %886, %888
  store double %889, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %890 = load i64, i64* %RBP, align 8
  %891 = add i64 %890, -168
  %892 = add i64 %765, 119
  store i64 %892, i64* %PC, align 8
  %893 = inttoptr i64 %891 to i64*
  %894 = load i64, i64* %893, align 8
  store i64 %894, i64* %RAX, align 8, !tbaa !2450
  %895 = add i64 %890, -196
  %896 = add i64 %765, 126
  store i64 %896, i64* %PC, align 8
  %897 = inttoptr i64 %895 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = sext i32 %898 to i64
  store i64 %899, i64* %RCX, align 8, !tbaa !2450
  %900 = shl nsw i64 %899, 3
  %901 = add i64 %900, %894
  %902 = add i64 %765, 131
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to double*
  %904 = load double, double* %903, align 8
  %905 = fdiv double %889, %904
  store double %905, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %906 = add i64 %890, -104
  %907 = add i64 %765, 135
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %906 to i64*
  %909 = load i64, i64* %908, align 8
  store i64 %909, i64* %RAX, align 8, !tbaa !2450
  %910 = add i64 %890, -188
  %911 = add i64 %765, 142
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i32*
  %913 = load i32, i32* %912, align 4
  %914 = sext i32 %913 to i64
  %915 = mul nsw i64 %914, 520
  store i64 %915, i64* %RCX, align 8, !tbaa !2450
  %916 = lshr i64 %915, 63
  %917 = add i64 %915, %909
  store i64 %917, i64* %RAX, align 8, !tbaa !2450
  %918 = icmp ult i64 %917, %909
  %919 = icmp ult i64 %917, %915
  %920 = or i1 %918, %919
  %921 = zext i1 %920 to i8
  store i8 %921, i8* %42, align 1, !tbaa !2428
  %922 = trunc i64 %917 to i32
  %923 = and i32 %922, 255
  %924 = tail call i32 @llvm.ctpop.i32(i32 %923) #10
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  store i8 %927, i8* %49, align 1, !tbaa !2445
  %928 = xor i64 %915, %909
  %929 = xor i64 %928, %917
  %930 = lshr i64 %929, 4
  %931 = trunc i64 %930 to i8
  %932 = and i8 %931, 1
  store i8 %932, i8* %55, align 1, !tbaa !2446
  %933 = icmp eq i64 %917, 0
  %934 = zext i1 %933 to i8
  store i8 %934, i8* %58, align 1, !tbaa !2447
  %935 = lshr i64 %917, 63
  %936 = trunc i64 %935 to i8
  store i8 %936, i8* %61, align 1, !tbaa !2448
  %937 = lshr i64 %909, 63
  %938 = xor i64 %935, %937
  %939 = xor i64 %935, %916
  %940 = add nuw nsw i64 %938, %939
  %941 = icmp eq i64 %940, 2
  %942 = zext i1 %941 to i8
  store i8 %942, i8* %67, align 1, !tbaa !2449
  %943 = add i64 %890, -192
  %944 = add i64 %765, 159
  store i64 %944, i64* %PC, align 8
  %945 = inttoptr i64 %943 to i32*
  %946 = load i32, i32* %945, align 4
  %947 = sext i32 %946 to i64
  store i64 %947, i64* %RCX, align 8, !tbaa !2450
  %948 = shl nsw i64 %947, 3
  %949 = add i64 %948, %917
  %950 = add i64 %765, 164
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %949 to double*
  %952 = load double, double* %951, align 8
  %953 = fmul double %905, %952
  store double %953, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %954 = load double, double* %257, align 1
  %955 = fadd double %953, %954
  store double %955, double* %257, align 1, !tbaa !2453
  %956 = add i64 %890, -64
  %957 = add i64 %765, 173
  store i64 %957, i64* %PC, align 8
  %958 = inttoptr i64 %956 to i64*
  %959 = load i64, i64* %958, align 8
  store i64 %959, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %960 = add i64 %890, -144
  %961 = add i64 %765, 180
  store i64 %961, i64* %PC, align 8
  %962 = inttoptr i64 %960 to i64*
  %963 = load i64, i64* %962, align 8
  store i64 %963, i64* %RAX, align 8, !tbaa !2450
  %964 = add i64 %765, 187
  store i64 %964, i64* %PC, align 8
  %965 = load i32, i32* %912, align 4
  %966 = sext i32 %965 to i64
  store i64 %966, i64* %RCX, align 8, !tbaa !2450
  %967 = shl nsw i64 %966, 3
  %968 = add i64 %967, %963
  %969 = add i64 %765, 192
  store i64 %969, i64* %PC, align 8
  %970 = bitcast i64 %959 to double
  %971 = inttoptr i64 %968 to double*
  %972 = load double, double* %971, align 8
  %973 = fmul double %970, %972
  store double %973, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %974 = add i64 %765, 199
  store i64 %974, i64* %PC, align 8
  %975 = load i64, i64* %893, align 8
  store i64 %975, i64* %RAX, align 8, !tbaa !2450
  %976 = add i64 %765, 206
  store i64 %976, i64* %PC, align 8
  %977 = load i32, i32* %897, align 4
  %978 = sext i32 %977 to i64
  store i64 %978, i64* %RCX, align 8, !tbaa !2450
  %979 = shl nsw i64 %978, 3
  %980 = add i64 %979, %975
  %981 = add i64 %765, 211
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %980 to double*
  %983 = load double, double* %982, align 8
  %984 = fdiv double %973, %983
  store double %984, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %985 = add i64 %890, -112
  %986 = add i64 %765, 215
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to i64*
  %988 = load i64, i64* %987, align 8
  store i64 %988, i64* %RAX, align 8, !tbaa !2450
  %989 = add i64 %765, 222
  store i64 %989, i64* %PC, align 8
  %990 = load i32, i32* %912, align 4
  %991 = sext i32 %990 to i64
  %992 = mul nsw i64 %991, 33800
  store i64 %992, i64* %RCX, align 8, !tbaa !2450
  %993 = lshr i64 %992, 63
  %994 = add i64 %992, %988
  store i64 %994, i64* %RAX, align 8, !tbaa !2450
  %995 = icmp ult i64 %994, %988
  %996 = icmp ult i64 %994, %992
  %997 = or i1 %995, %996
  %998 = zext i1 %997 to i8
  store i8 %998, i8* %42, align 1, !tbaa !2428
  %999 = trunc i64 %994 to i32
  %1000 = and i32 %999, 255
  %1001 = tail call i32 @llvm.ctpop.i32(i32 %1000) #10
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  store i8 %1004, i8* %49, align 1, !tbaa !2445
  %1005 = xor i64 %992, %988
  %1006 = xor i64 %1005, %994
  %1007 = lshr i64 %1006, 4
  %1008 = trunc i64 %1007 to i8
  %1009 = and i8 %1008, 1
  store i8 %1009, i8* %55, align 1, !tbaa !2446
  %1010 = icmp eq i64 %994, 0
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %58, align 1, !tbaa !2447
  %1012 = lshr i64 %994, 63
  %1013 = trunc i64 %1012 to i8
  store i8 %1013, i8* %61, align 1, !tbaa !2448
  %1014 = lshr i64 %988, 63
  %1015 = xor i64 %1012, %1014
  %1016 = xor i64 %1012, %993
  %1017 = add nuw nsw i64 %1015, %1016
  %1018 = icmp eq i64 %1017, 2
  %1019 = zext i1 %1018 to i8
  store i8 %1019, i8* %67, align 1, !tbaa !2449
  %1020 = load i64, i64* %RBP, align 8
  %1021 = add i64 %1020, -52
  %1022 = add i64 %765, 236
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1021 to i32*
  %1024 = load i32, i32* %1023, align 4
  %1025 = sext i32 %1024 to i64
  %1026 = mul nsw i64 %1025, 520
  store i64 %1026, i64* %RCX, align 8, !tbaa !2450
  %1027 = lshr i64 %1026, 63
  %1028 = add i64 %1026, %994
  store i64 %1028, i64* %RAX, align 8, !tbaa !2450
  %1029 = icmp ult i64 %1028, %994
  %1030 = icmp ult i64 %1028, %1026
  %1031 = or i1 %1029, %1030
  %1032 = zext i1 %1031 to i8
  store i8 %1032, i8* %42, align 1, !tbaa !2428
  %1033 = trunc i64 %1028 to i32
  %1034 = and i32 %1033, 255
  %1035 = tail call i32 @llvm.ctpop.i32(i32 %1034) #10
  %1036 = trunc i32 %1035 to i8
  %1037 = and i8 %1036, 1
  %1038 = xor i8 %1037, 1
  store i8 %1038, i8* %49, align 1, !tbaa !2445
  %1039 = xor i64 %1026, %994
  %1040 = xor i64 %1039, %1028
  %1041 = lshr i64 %1040, 4
  %1042 = trunc i64 %1041 to i8
  %1043 = and i8 %1042, 1
  store i8 %1043, i8* %55, align 1, !tbaa !2446
  %1044 = icmp eq i64 %1028, 0
  %1045 = zext i1 %1044 to i8
  store i8 %1045, i8* %58, align 1, !tbaa !2447
  %1046 = lshr i64 %1028, 63
  %1047 = trunc i64 %1046 to i8
  store i8 %1047, i8* %61, align 1, !tbaa !2448
  %1048 = xor i64 %1046, %1012
  %1049 = xor i64 %1046, %1027
  %1050 = add nuw nsw i64 %1048, %1049
  %1051 = icmp eq i64 %1050, 2
  %1052 = zext i1 %1051 to i8
  store i8 %1052, i8* %67, align 1, !tbaa !2449
  %1053 = add i64 %1020, -196
  %1054 = add i64 %765, 253
  store i64 %1054, i64* %PC, align 8
  %1055 = inttoptr i64 %1053 to i32*
  %1056 = load i32, i32* %1055, align 4
  %1057 = sext i32 %1056 to i64
  store i64 %1057, i64* %RCX, align 8, !tbaa !2450
  %1058 = shl nsw i64 %1057, 3
  %1059 = add i64 %1058, %1028
  %1060 = add i64 %765, 258
  store i64 %1060, i64* %PC, align 8
  %1061 = load double, double* %155, align 1
  %1062 = inttoptr i64 %1059 to double*
  %1063 = load double, double* %1062, align 8
  %1064 = fmul double %1061, %1063
  store double %1064, double* %155, align 1, !tbaa !2453
  %1065 = load double, double* %257, align 1
  %1066 = fsub double %1065, %1064
  store double %1066, double* %257, align 1, !tbaa !2453
  %1067 = add i64 %1020, -136
  %1068 = add i64 %765, 269
  store i64 %1068, i64* %PC, align 8
  %1069 = inttoptr i64 %1067 to i64*
  %1070 = load i64, i64* %1069, align 8
  store i64 %1070, i64* %RAX, align 8, !tbaa !2450
  %1071 = add i64 %1020, -188
  %1072 = add i64 %765, 276
  store i64 %1072, i64* %PC, align 8
  %1073 = inttoptr i64 %1071 to i32*
  %1074 = load i32, i32* %1073, align 4
  %1075 = sext i32 %1074 to i64
  %1076 = mul nsw i64 %1075, 33800
  store i64 %1076, i64* %RCX, align 8, !tbaa !2450
  %1077 = lshr i64 %1076, 63
  %1078 = add i64 %1076, %1070
  store i64 %1078, i64* %RAX, align 8, !tbaa !2450
  %1079 = icmp ult i64 %1078, %1070
  %1080 = icmp ult i64 %1078, %1076
  %1081 = or i1 %1079, %1080
  %1082 = zext i1 %1081 to i8
  store i8 %1082, i8* %42, align 1, !tbaa !2428
  %1083 = trunc i64 %1078 to i32
  %1084 = and i32 %1083, 255
  %1085 = tail call i32 @llvm.ctpop.i32(i32 %1084) #10
  %1086 = trunc i32 %1085 to i8
  %1087 = and i8 %1086, 1
  %1088 = xor i8 %1087, 1
  store i8 %1088, i8* %49, align 1, !tbaa !2445
  %1089 = xor i64 %1076, %1070
  %1090 = xor i64 %1089, %1078
  %1091 = lshr i64 %1090, 4
  %1092 = trunc i64 %1091 to i8
  %1093 = and i8 %1092, 1
  store i8 %1093, i8* %55, align 1, !tbaa !2446
  %1094 = icmp eq i64 %1078, 0
  %1095 = zext i1 %1094 to i8
  store i8 %1095, i8* %58, align 1, !tbaa !2447
  %1096 = lshr i64 %1078, 63
  %1097 = trunc i64 %1096 to i8
  store i8 %1097, i8* %61, align 1, !tbaa !2448
  %1098 = lshr i64 %1070, 63
  %1099 = xor i64 %1096, %1098
  %1100 = xor i64 %1096, %1077
  %1101 = add nuw nsw i64 %1099, %1100
  %1102 = icmp eq i64 %1101, 2
  %1103 = zext i1 %1102 to i8
  store i8 %1103, i8* %67, align 1, !tbaa !2449
  %1104 = load i64, i64* %RBP, align 8
  %1105 = add i64 %1104, -52
  %1106 = add i64 %765, 290
  store i64 %1106, i64* %PC, align 8
  %1107 = inttoptr i64 %1105 to i32*
  %1108 = load i32, i32* %1107, align 4
  %1109 = sext i32 %1108 to i64
  %1110 = mul nsw i64 %1109, 520
  store i64 %1110, i64* %RCX, align 8, !tbaa !2450
  %1111 = lshr i64 %1110, 63
  %1112 = add i64 %1110, %1078
  store i64 %1112, i64* %RAX, align 8, !tbaa !2450
  %1113 = icmp ult i64 %1112, %1078
  %1114 = icmp ult i64 %1112, %1110
  %1115 = or i1 %1113, %1114
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %42, align 1, !tbaa !2428
  %1117 = trunc i64 %1112 to i32
  %1118 = and i32 %1117, 255
  %1119 = tail call i32 @llvm.ctpop.i32(i32 %1118) #10
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  store i8 %1122, i8* %49, align 1, !tbaa !2445
  %1123 = xor i64 %1110, %1078
  %1124 = xor i64 %1123, %1112
  %1125 = lshr i64 %1124, 4
  %1126 = trunc i64 %1125 to i8
  %1127 = and i8 %1126, 1
  store i8 %1127, i8* %55, align 1, !tbaa !2446
  %1128 = icmp eq i64 %1112, 0
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %58, align 1, !tbaa !2447
  %1130 = lshr i64 %1112, 63
  %1131 = trunc i64 %1130 to i8
  store i8 %1131, i8* %61, align 1, !tbaa !2448
  %1132 = xor i64 %1130, %1096
  %1133 = xor i64 %1130, %1111
  %1134 = add nuw nsw i64 %1132, %1133
  %1135 = icmp eq i64 %1134, 2
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %67, align 1, !tbaa !2449
  %1137 = add i64 %1104, -196
  %1138 = add i64 %765, 307
  store i64 %1138, i64* %PC, align 8
  %1139 = inttoptr i64 %1137 to i32*
  %1140 = load i32, i32* %1139, align 4
  %1141 = sext i32 %1140 to i64
  store i64 %1141, i64* %RCX, align 8, !tbaa !2450
  %1142 = shl nsw i64 %1141, 3
  %1143 = add i64 %1142, %1112
  %1144 = add i64 %765, 312
  store i64 %1144, i64* %PC, align 8
  %1145 = load i64, i64* %148, align 1
  %1146 = inttoptr i64 %1143 to i64*
  store i64 %1145, i64* %1146, align 8
  %1147 = load i64, i64* %RBP, align 8
  %1148 = add i64 %1147, -104
  %1149 = load i64, i64* %PC, align 8
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC, align 8
  %1151 = inttoptr i64 %1148 to i64*
  %1152 = load i64, i64* %1151, align 8
  store i64 %1152, i64* %RAX, align 8, !tbaa !2450
  %1153 = add i64 %1147, -188
  %1154 = add i64 %1149, 11
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1153 to i32*
  %1156 = load i32, i32* %1155, align 4
  %1157 = sext i32 %1156 to i64
  %1158 = mul nsw i64 %1157, 520
  store i64 %1158, i64* %RCX, align 8, !tbaa !2450
  %1159 = lshr i64 %1158, 63
  %1160 = add i64 %1158, %1152
  store i64 %1160, i64* %RAX, align 8, !tbaa !2450
  %1161 = icmp ult i64 %1160, %1152
  %1162 = icmp ult i64 %1160, %1158
  %1163 = or i1 %1161, %1162
  %1164 = zext i1 %1163 to i8
  store i8 %1164, i8* %42, align 1, !tbaa !2428
  %1165 = trunc i64 %1160 to i32
  %1166 = and i32 %1165, 255
  %1167 = tail call i32 @llvm.ctpop.i32(i32 %1166) #10
  %1168 = trunc i32 %1167 to i8
  %1169 = and i8 %1168, 1
  %1170 = xor i8 %1169, 1
  store i8 %1170, i8* %49, align 1, !tbaa !2445
  %1171 = xor i64 %1158, %1152
  %1172 = xor i64 %1171, %1160
  %1173 = lshr i64 %1172, 4
  %1174 = trunc i64 %1173 to i8
  %1175 = and i8 %1174, 1
  store i8 %1175, i8* %55, align 1, !tbaa !2446
  %1176 = icmp eq i64 %1160, 0
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %58, align 1, !tbaa !2447
  %1178 = lshr i64 %1160, 63
  %1179 = trunc i64 %1178 to i8
  store i8 %1179, i8* %61, align 1, !tbaa !2448
  %1180 = lshr i64 %1152, 63
  %1181 = xor i64 %1178, %1180
  %1182 = xor i64 %1178, %1159
  %1183 = add nuw nsw i64 %1181, %1182
  %1184 = icmp eq i64 %1183, 2
  %1185 = zext i1 %1184 to i8
  store i8 %1185, i8* %67, align 1, !tbaa !2449
  %1186 = add i64 %1147, -192
  %1187 = add i64 %1149, 28
  store i64 %1187, i64* %PC, align 8
  %1188 = inttoptr i64 %1186 to i32*
  %1189 = load i32, i32* %1188, align 4
  %1190 = sext i32 %1189 to i64
  store i64 %1190, i64* %RCX, align 8, !tbaa !2450
  %1191 = shl nsw i64 %1190, 3
  %1192 = add i64 %1191, %1160
  %1193 = add i64 %1149, 33
  store i64 %1193, i64* %PC, align 8
  %1194 = inttoptr i64 %1192 to i64*
  %1195 = load i64, i64* %1194, align 8
  store i64 %1195, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1196 = add i64 %1147, -112
  %1197 = add i64 %1149, 37
  store i64 %1197, i64* %PC, align 8
  %1198 = inttoptr i64 %1196 to i64*
  %1199 = load i64, i64* %1198, align 8
  store i64 %1199, i64* %RAX, align 8, !tbaa !2450
  %1200 = add i64 %1149, 44
  store i64 %1200, i64* %PC, align 8
  %1201 = load i32, i32* %1155, align 4
  %1202 = sext i32 %1201 to i64
  %1203 = mul nsw i64 %1202, 33800
  store i64 %1203, i64* %RCX, align 8, !tbaa !2450
  %1204 = lshr i64 %1203, 63
  %1205 = add i64 %1203, %1199
  store i64 %1205, i64* %RAX, align 8, !tbaa !2450
  %1206 = icmp ult i64 %1205, %1199
  %1207 = icmp ult i64 %1205, %1203
  %1208 = or i1 %1206, %1207
  %1209 = zext i1 %1208 to i8
  store i8 %1209, i8* %42, align 1, !tbaa !2428
  %1210 = trunc i64 %1205 to i32
  %1211 = and i32 %1210, 255
  %1212 = tail call i32 @llvm.ctpop.i32(i32 %1211) #10
  %1213 = trunc i32 %1212 to i8
  %1214 = and i8 %1213, 1
  %1215 = xor i8 %1214, 1
  store i8 %1215, i8* %49, align 1, !tbaa !2445
  %1216 = xor i64 %1203, %1199
  %1217 = xor i64 %1216, %1205
  %1218 = lshr i64 %1217, 4
  %1219 = trunc i64 %1218 to i8
  %1220 = and i8 %1219, 1
  store i8 %1220, i8* %55, align 1, !tbaa !2446
  %1221 = icmp eq i64 %1205, 0
  %1222 = zext i1 %1221 to i8
  store i8 %1222, i8* %58, align 1, !tbaa !2447
  %1223 = lshr i64 %1205, 63
  %1224 = trunc i64 %1223 to i8
  store i8 %1224, i8* %61, align 1, !tbaa !2448
  %1225 = lshr i64 %1199, 63
  %1226 = xor i64 %1223, %1225
  %1227 = xor i64 %1223, %1204
  %1228 = add nuw nsw i64 %1226, %1227
  %1229 = icmp eq i64 %1228, 2
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %67, align 1, !tbaa !2449
  %1231 = load i64, i64* %RBP, align 8
  %1232 = add i64 %1231, -52
  %1233 = add i64 %1149, 58
  store i64 %1233, i64* %PC, align 8
  %1234 = inttoptr i64 %1232 to i32*
  %1235 = load i32, i32* %1234, align 4
  %1236 = sext i32 %1235 to i64
  %1237 = mul nsw i64 %1236, 520
  store i64 %1237, i64* %RCX, align 8, !tbaa !2450
  %1238 = lshr i64 %1237, 63
  %1239 = add i64 %1237, %1205
  store i64 %1239, i64* %RAX, align 8, !tbaa !2450
  %1240 = icmp ult i64 %1239, %1205
  %1241 = icmp ult i64 %1239, %1237
  %1242 = or i1 %1240, %1241
  %1243 = zext i1 %1242 to i8
  store i8 %1243, i8* %42, align 1, !tbaa !2428
  %1244 = trunc i64 %1239 to i32
  %1245 = and i32 %1244, 255
  %1246 = tail call i32 @llvm.ctpop.i32(i32 %1245) #10
  %1247 = trunc i32 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = xor i8 %1248, 1
  store i8 %1249, i8* %49, align 1, !tbaa !2445
  %1250 = xor i64 %1237, %1205
  %1251 = xor i64 %1250, %1239
  %1252 = lshr i64 %1251, 4
  %1253 = trunc i64 %1252 to i8
  %1254 = and i8 %1253, 1
  store i8 %1254, i8* %55, align 1, !tbaa !2446
  %1255 = icmp eq i64 %1239, 0
  %1256 = zext i1 %1255 to i8
  store i8 %1256, i8* %58, align 1, !tbaa !2447
  %1257 = lshr i64 %1239, 63
  %1258 = trunc i64 %1257 to i8
  store i8 %1258, i8* %61, align 1, !tbaa !2448
  %1259 = xor i64 %1257, %1223
  %1260 = xor i64 %1257, %1238
  %1261 = add nuw nsw i64 %1259, %1260
  %1262 = icmp eq i64 %1261, 2
  %1263 = zext i1 %1262 to i8
  store i8 %1263, i8* %67, align 1, !tbaa !2449
  %1264 = add i64 %1231, -196
  %1265 = add i64 %1149, 75
  store i64 %1265, i64* %PC, align 8
  %1266 = inttoptr i64 %1264 to i32*
  %1267 = load i32, i32* %1266, align 4
  %1268 = sext i32 %1267 to i64
  store i64 %1268, i64* %RCX, align 8, !tbaa !2450
  %1269 = shl nsw i64 %1268, 3
  %1270 = add i64 %1269, %1239
  %1271 = add i64 %1149, 80
  store i64 %1271, i64* %PC, align 8
  %1272 = load i64, i64* %148, align 1
  %1273 = inttoptr i64 %1270 to i64*
  store i64 %1272, i64* %1273, align 8
  %1274 = load i64, i64* %RBP, align 8
  %1275 = add i64 %1274, -196
  %1276 = load i64, i64* %PC, align 8
  %1277 = add i64 %1276, 6
  store i64 %1277, i64* %PC, align 8
  %1278 = inttoptr i64 %1275 to i32*
  %1279 = load i32, i32* %1278, align 4
  %1280 = add i32 %1279, 1
  %1281 = zext i32 %1280 to i64
  store i64 %1281, i64* %RAX, align 8, !tbaa !2450
  %1282 = icmp eq i32 %1279, -1
  %1283 = icmp eq i32 %1280, 0
  %1284 = or i1 %1282, %1283
  %1285 = zext i1 %1284 to i8
  store i8 %1285, i8* %42, align 1, !tbaa !2428
  %1286 = and i32 %1280, 255
  %1287 = tail call i32 @llvm.ctpop.i32(i32 %1286) #10
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  %1290 = xor i8 %1289, 1
  store i8 %1290, i8* %49, align 1, !tbaa !2445
  %1291 = xor i32 %1280, %1279
  %1292 = lshr i32 %1291, 4
  %1293 = trunc i32 %1292 to i8
  %1294 = and i8 %1293, 1
  store i8 %1294, i8* %55, align 1, !tbaa !2446
  %1295 = zext i1 %1283 to i8
  store i8 %1295, i8* %58, align 1, !tbaa !2447
  %1296 = lshr i32 %1280, 31
  %1297 = trunc i32 %1296 to i8
  store i8 %1297, i8* %61, align 1, !tbaa !2448
  %1298 = lshr i32 %1279, 31
  %1299 = xor i32 %1296, %1298
  %1300 = add nuw nsw i32 %1299, %1296
  %1301 = icmp eq i32 %1300, 2
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %67, align 1, !tbaa !2449
  %1303 = add i64 %1276, 15
  store i64 %1303, i64* %PC, align 8
  store i32 %1280, i32* %1278, align 4
  %1304 = load i64, i64* %PC, align 8
  %1305 = add i64 %1304, -813
  store i64 %1305, i64* %PC, align 8, !tbaa !2450
  br label %block_401c30

block_40225b:                                     ; preds = %block_401591
  %1306 = load i64, i64* %RSP, align 8
  %1307 = add i64 %1306, 56
  store i64 %1307, i64* %RSP, align 8, !tbaa !2450
  %1308 = icmp ugt i64 %1306, -57
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %42, align 1, !tbaa !2428
  %1310 = trunc i64 %1307 to i32
  %1311 = and i32 %1310, 255
  %1312 = tail call i32 @llvm.ctpop.i32(i32 %1311) #10
  %1313 = trunc i32 %1312 to i8
  %1314 = and i8 %1313, 1
  %1315 = xor i8 %1314, 1
  store i8 %1315, i8* %49, align 1, !tbaa !2445
  %1316 = xor i64 %1306, 16
  %1317 = xor i64 %1316, %1307
  %1318 = lshr i64 %1317, 4
  %1319 = trunc i64 %1318 to i8
  %1320 = and i8 %1319, 1
  store i8 %1320, i8* %55, align 1, !tbaa !2446
  %1321 = icmp eq i64 %1307, 0
  %1322 = zext i1 %1321 to i8
  store i8 %1322, i8* %58, align 1, !tbaa !2447
  %1323 = lshr i64 %1307, 63
  %1324 = trunc i64 %1323 to i8
  store i8 %1324, i8* %61, align 1, !tbaa !2448
  %1325 = lshr i64 %1306, 63
  %1326 = xor i64 %1323, %1325
  %1327 = add nuw nsw i64 %1326, %1323
  %1328 = icmp eq i64 %1327, 2
  %1329 = zext i1 %1328 to i8
  store i8 %1329, i8* %67, align 1, !tbaa !2449
  %1330 = add i64 %2388, 5
  store i64 %1330, i64* %PC, align 8
  %1331 = add i64 %1306, 64
  %1332 = inttoptr i64 %1307 to i64*
  %1333 = load i64, i64* %1332, align 8
  store i64 %1333, i64* %RBX, align 8, !tbaa !2450
  store i64 %1331, i64* %RSP, align 8, !tbaa !2450
  %1334 = add i64 %2388, 7
  store i64 %1334, i64* %PC, align 8
  %1335 = add i64 %1306, 72
  %1336 = inttoptr i64 %1331 to i64*
  %1337 = load i64, i64* %1336, align 8
  store i64 %1337, i64* %R12, align 8, !tbaa !2450
  store i64 %1335, i64* %RSP, align 8, !tbaa !2450
  %1338 = add i64 %2388, 9
  store i64 %1338, i64* %PC, align 8
  %1339 = add i64 %1306, 80
  %1340 = inttoptr i64 %1335 to i64*
  %1341 = load i64, i64* %1340, align 8
  store i64 %1341, i64* %R13, align 8, !tbaa !2450
  store i64 %1339, i64* %RSP, align 8, !tbaa !2450
  %1342 = add i64 %2388, 11
  store i64 %1342, i64* %PC, align 8
  %1343 = add i64 %1306, 88
  %1344 = inttoptr i64 %1339 to i64*
  %1345 = load i64, i64* %1344, align 8
  store i64 %1345, i64* %R14, align 8, !tbaa !2450
  store i64 %1343, i64* %RSP, align 8, !tbaa !2450
  %1346 = add i64 %2388, 13
  store i64 %1346, i64* %PC, align 8
  %1347 = add i64 %1306, 96
  %1348 = inttoptr i64 %1343 to i64*
  %1349 = load i64, i64* %1348, align 8
  store i64 %1349, i64* %R15, align 8, !tbaa !2450
  store i64 %1347, i64* %RSP, align 8, !tbaa !2450
  %1350 = add i64 %2388, 14
  store i64 %1350, i64* %PC, align 8
  %1351 = add i64 %1306, 104
  %1352 = inttoptr i64 %1347 to i64*
  %1353 = load i64, i64* %1352, align 8
  store i64 %1353, i64* %RBP, align 8, !tbaa !2450
  store i64 %1351, i64* %RSP, align 8, !tbaa !2450
  %1354 = add i64 %2388, 15
  store i64 %1354, i64* %PC, align 8
  %1355 = inttoptr i64 %1351 to i64*
  %1356 = load i64, i64* %1355, align 8
  store i64 %1356, i64* %PC, align 8, !tbaa !2450
  %1357 = add i64 %1306, 112
  store i64 %1357, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %2

block_4015b9:                                     ; preds = %block_4015aa
  %1358 = add i64 %2420, -196
  %1359 = add i64 %2456, 10
  store i64 %1359, i64* %PC, align 8
  %1360 = inttoptr i64 %1358 to i32*
  store i32 0, i32* %1360, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_4015c3

block_401923:                                     ; preds = %block_4015c3
  %1361 = add i64 %2494, 42
  store i64 %1361, i64* %PC, align 8
  %1362 = load i32, i32* %2466, align 4
  %1363 = sext i32 %1362 to i64
  store i64 %1363, i64* %RCX, align 8, !tbaa !2450
  %1364 = shl nsw i64 %1363, 3
  %1365 = add i64 %1364, %2540
  %1366 = add i64 %2494, 47
  store i64 %1366, i64* %PC, align 8
  %1367 = inttoptr i64 %1365 to i64*
  %1368 = load i64, i64* %1367, align 8
  store i64 %1368, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1369 = add i64 %2494, 51
  store i64 %1369, i64* %PC, align 8
  %1370 = load i64, i64* %2497, align 8
  store i64 %1370, i64* %RAX, align 8, !tbaa !2450
  %1371 = add i64 %2494, 58
  store i64 %1371, i64* %PC, align 8
  %1372 = load i32, i32* %2501, align 4
  %1373 = sext i32 %1372 to i64
  %1374 = mul nsw i64 %1373, 33800
  store i64 %1374, i64* %RCX, align 8, !tbaa !2450
  %1375 = lshr i64 %1374, 63
  %1376 = add i64 %1374, %1370
  store i64 %1376, i64* %RAX, align 8, !tbaa !2450
  %1377 = icmp ult i64 %1376, %1370
  %1378 = icmp ult i64 %1376, %1374
  %1379 = or i1 %1377, %1378
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %42, align 1, !tbaa !2428
  %1381 = trunc i64 %1376 to i32
  %1382 = and i32 %1381, 255
  %1383 = tail call i32 @llvm.ctpop.i32(i32 %1382) #10
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  store i8 %1386, i8* %49, align 1, !tbaa !2445
  %1387 = xor i64 %1374, %1370
  %1388 = xor i64 %1387, %1376
  %1389 = lshr i64 %1388, 4
  %1390 = trunc i64 %1389 to i8
  %1391 = and i8 %1390, 1
  store i8 %1391, i8* %55, align 1, !tbaa !2446
  %1392 = icmp eq i64 %1376, 0
  %1393 = zext i1 %1392 to i8
  store i8 %1393, i8* %58, align 1, !tbaa !2447
  %1394 = lshr i64 %1376, 63
  %1395 = trunc i64 %1394 to i8
  store i8 %1395, i8* %61, align 1, !tbaa !2448
  %1396 = lshr i64 %1370, 63
  %1397 = xor i64 %1394, %1396
  %1398 = xor i64 %1394, %1375
  %1399 = add nuw nsw i64 %1397, %1398
  %1400 = icmp eq i64 %1399, 2
  %1401 = zext i1 %1400 to i8
  store i8 %1401, i8* %67, align 1, !tbaa !2449
  %1402 = add i64 %2494, 74
  store i64 %1402, i64* %PC, align 8
  %1403 = load i32, i32* %2534, align 4
  %1404 = add i32 %1403, 1
  %1405 = zext i32 %1404 to i64
  store i64 %1405, i64* %RDX, align 8, !tbaa !2450
  %1406 = sext i32 %1404 to i64
  %1407 = mul nsw i64 %1406, 520
  store i64 %1407, i64* %RCX, align 8, !tbaa !2450
  %1408 = lshr i64 %1407, 63
  %1409 = add i64 %1407, %1376
  store i64 %1409, i64* %RAX, align 8, !tbaa !2450
  %1410 = icmp ult i64 %1409, %1376
  %1411 = icmp ult i64 %1409, %1407
  %1412 = or i1 %1410, %1411
  %1413 = zext i1 %1412 to i8
  store i8 %1413, i8* %42, align 1, !tbaa !2428
  %1414 = trunc i64 %1409 to i32
  %1415 = and i32 %1414, 255
  %1416 = tail call i32 @llvm.ctpop.i32(i32 %1415) #10
  %1417 = trunc i32 %1416 to i8
  %1418 = and i8 %1417, 1
  %1419 = xor i8 %1418, 1
  store i8 %1419, i8* %49, align 1, !tbaa !2445
  %1420 = xor i64 %1407, %1376
  %1421 = xor i64 %1420, %1409
  %1422 = lshr i64 %1421, 4
  %1423 = trunc i64 %1422 to i8
  %1424 = and i8 %1423, 1
  store i8 %1424, i8* %55, align 1, !tbaa !2446
  %1425 = icmp eq i64 %1409, 0
  %1426 = zext i1 %1425 to i8
  store i8 %1426, i8* %58, align 1, !tbaa !2447
  %1427 = lshr i64 %1409, 63
  %1428 = trunc i64 %1427 to i8
  store i8 %1428, i8* %61, align 1, !tbaa !2448
  %1429 = xor i64 %1427, %1394
  %1430 = xor i64 %1427, %1408
  %1431 = add nuw nsw i64 %1429, %1430
  %1432 = icmp eq i64 %1431, 2
  %1433 = zext i1 %1432 to i8
  store i8 %1433, i8* %67, align 1, !tbaa !2449
  %1434 = load i64, i64* %RBP, align 8
  %1435 = add i64 %1434, -48
  %1436 = add i64 %2494, 94
  store i64 %1436, i64* %PC, align 8
  %1437 = inttoptr i64 %1435 to i32*
  %1438 = load i32, i32* %1437, align 4
  %1439 = sext i32 %1438 to i64
  store i64 %1439, i64* %RCX, align 8, !tbaa !2450
  %1440 = shl nsw i64 %1439, 3
  %1441 = add i64 %1440, %1409
  %1442 = add i64 %2494, 99
  store i64 %1442, i64* %PC, align 8
  %1443 = load double, double* %257, align 1
  %1444 = inttoptr i64 %1441 to double*
  %1445 = load double, double* %1444, align 8
  %1446 = fsub double %1443, %1445
  store double %1446, double* %257, align 1, !tbaa !2453
  %1447 = add i64 %1434, -88
  %1448 = add i64 %2494, 103
  store i64 %1448, i64* %PC, align 8
  %1449 = inttoptr i64 %1447 to i64*
  %1450 = load i64, i64* %1449, align 8
  store i64 %1450, i64* %RAX, align 8, !tbaa !2450
  %1451 = add i64 %1434, -188
  %1452 = add i64 %2494, 110
  store i64 %1452, i64* %PC, align 8
  %1453 = inttoptr i64 %1451 to i32*
  %1454 = load i32, i32* %1453, align 4
  %1455 = sext i32 %1454 to i64
  %1456 = mul nsw i64 %1455, 520
  store i64 %1456, i64* %RCX, align 8, !tbaa !2450
  %1457 = lshr i64 %1456, 63
  %1458 = add i64 %1456, %1450
  store i64 %1458, i64* %RAX, align 8, !tbaa !2450
  %1459 = icmp ult i64 %1458, %1450
  %1460 = icmp ult i64 %1458, %1456
  %1461 = or i1 %1459, %1460
  %1462 = zext i1 %1461 to i8
  store i8 %1462, i8* %42, align 1, !tbaa !2428
  %1463 = trunc i64 %1458 to i32
  %1464 = and i32 %1463, 255
  %1465 = tail call i32 @llvm.ctpop.i32(i32 %1464) #10
  %1466 = trunc i32 %1465 to i8
  %1467 = and i8 %1466, 1
  %1468 = xor i8 %1467, 1
  store i8 %1468, i8* %49, align 1, !tbaa !2445
  %1469 = xor i64 %1456, %1450
  %1470 = xor i64 %1469, %1458
  %1471 = lshr i64 %1470, 4
  %1472 = trunc i64 %1471 to i8
  %1473 = and i8 %1472, 1
  store i8 %1473, i8* %55, align 1, !tbaa !2446
  %1474 = icmp eq i64 %1458, 0
  %1475 = zext i1 %1474 to i8
  store i8 %1475, i8* %58, align 1, !tbaa !2447
  %1476 = lshr i64 %1458, 63
  %1477 = trunc i64 %1476 to i8
  store i8 %1477, i8* %61, align 1, !tbaa !2448
  %1478 = lshr i64 %1450, 63
  %1479 = xor i64 %1476, %1478
  %1480 = xor i64 %1476, %1457
  %1481 = add nuw nsw i64 %1479, %1480
  %1482 = icmp eq i64 %1481, 2
  %1483 = zext i1 %1482 to i8
  store i8 %1483, i8* %67, align 1, !tbaa !2449
  %1484 = add i64 %1434, -192
  %1485 = add i64 %2494, 127
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1484 to i32*
  %1487 = load i32, i32* %1486, align 4
  %1488 = sext i32 %1487 to i64
  store i64 %1488, i64* %RCX, align 8, !tbaa !2450
  %1489 = shl nsw i64 %1488, 3
  %1490 = add i64 %1489, %1458
  %1491 = add i64 %2494, 132
  store i64 %1491, i64* %PC, align 8
  %1492 = inttoptr i64 %1490 to double*
  %1493 = load double, double* %1492, align 8
  %1494 = fadd double %1446, %1493
  store double %1494, double* %257, align 1, !tbaa !2453
  %1495 = add i64 %1434, -128
  %1496 = add i64 %2494, 136
  store i64 %1496, i64* %PC, align 8
  %1497 = inttoptr i64 %1495 to i64*
  %1498 = load i64, i64* %1497, align 8
  store i64 %1498, i64* %RAX, align 8, !tbaa !2450
  %1499 = add i64 %2494, 143
  store i64 %1499, i64* %PC, align 8
  %1500 = load i32, i32* %1453, align 4
  %1501 = sext i32 %1500 to i64
  %1502 = mul nsw i64 %1501, 33800
  store i64 %1502, i64* %RCX, align 8, !tbaa !2450
  %1503 = lshr i64 %1502, 63
  %1504 = add i64 %1502, %1498
  store i64 %1504, i64* %RAX, align 8, !tbaa !2450
  %1505 = icmp ult i64 %1504, %1498
  %1506 = icmp ult i64 %1504, %1502
  %1507 = or i1 %1505, %1506
  %1508 = zext i1 %1507 to i8
  store i8 %1508, i8* %42, align 1, !tbaa !2428
  %1509 = trunc i64 %1504 to i32
  %1510 = and i32 %1509, 255
  %1511 = tail call i32 @llvm.ctpop.i32(i32 %1510) #10
  %1512 = trunc i32 %1511 to i8
  %1513 = and i8 %1512, 1
  %1514 = xor i8 %1513, 1
  store i8 %1514, i8* %49, align 1, !tbaa !2445
  %1515 = xor i64 %1502, %1498
  %1516 = xor i64 %1515, %1504
  %1517 = lshr i64 %1516, 4
  %1518 = trunc i64 %1517 to i8
  %1519 = and i8 %1518, 1
  store i8 %1519, i8* %55, align 1, !tbaa !2446
  %1520 = icmp eq i64 %1504, 0
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %58, align 1, !tbaa !2447
  %1522 = lshr i64 %1504, 63
  %1523 = trunc i64 %1522 to i8
  store i8 %1523, i8* %61, align 1, !tbaa !2448
  %1524 = lshr i64 %1498, 63
  %1525 = xor i64 %1522, %1524
  %1526 = xor i64 %1522, %1503
  %1527 = add nuw nsw i64 %1525, %1526
  %1528 = icmp eq i64 %1527, 2
  %1529 = zext i1 %1528 to i8
  store i8 %1529, i8* %67, align 1, !tbaa !2449
  %1530 = add i64 %2494, 160
  store i64 %1530, i64* %PC, align 8
  %1531 = load i32, i32* %1486, align 4
  %1532 = sext i32 %1531 to i64
  %1533 = mul nsw i64 %1532, 520
  store i64 %1533, i64* %RCX, align 8, !tbaa !2450
  %1534 = lshr i64 %1533, 63
  %1535 = add i64 %1533, %1504
  store i64 %1535, i64* %RAX, align 8, !tbaa !2450
  %1536 = icmp ult i64 %1535, %1504
  %1537 = icmp ult i64 %1535, %1533
  %1538 = or i1 %1536, %1537
  %1539 = zext i1 %1538 to i8
  store i8 %1539, i8* %42, align 1, !tbaa !2428
  %1540 = trunc i64 %1535 to i32
  %1541 = and i32 %1540, 255
  %1542 = tail call i32 @llvm.ctpop.i32(i32 %1541) #10
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  store i8 %1545, i8* %49, align 1, !tbaa !2445
  %1546 = xor i64 %1533, %1504
  %1547 = xor i64 %1546, %1535
  %1548 = lshr i64 %1547, 4
  %1549 = trunc i64 %1548 to i8
  %1550 = and i8 %1549, 1
  store i8 %1550, i8* %55, align 1, !tbaa !2446
  %1551 = icmp eq i64 %1535, 0
  %1552 = zext i1 %1551 to i8
  store i8 %1552, i8* %58, align 1, !tbaa !2447
  %1553 = lshr i64 %1535, 63
  %1554 = trunc i64 %1553 to i8
  store i8 %1554, i8* %61, align 1, !tbaa !2448
  %1555 = xor i64 %1553, %1522
  %1556 = xor i64 %1553, %1534
  %1557 = add nuw nsw i64 %1555, %1556
  %1558 = icmp eq i64 %1557, 2
  %1559 = zext i1 %1558 to i8
  store i8 %1559, i8* %67, align 1, !tbaa !2449
  %1560 = load i64, i64* %RBP, align 8
  %1561 = add i64 %1560, -48
  %1562 = add i64 %2494, 174
  store i64 %1562, i64* %PC, align 8
  %1563 = inttoptr i64 %1561 to i32*
  %1564 = load i32, i32* %1563, align 4
  %1565 = sext i32 %1564 to i64
  store i64 %1565, i64* %RCX, align 8, !tbaa !2450
  %1566 = shl nsw i64 %1565, 3
  %1567 = add i64 %1566, %1535
  %1568 = add i64 %2494, 179
  store i64 %1568, i64* %PC, align 8
  %1569 = inttoptr i64 %1567 to double*
  %1570 = load double, double* %1569, align 8
  %1571 = fsub double %1494, %1570
  store double %1571, double* %257, align 1, !tbaa !2453
  %1572 = add i64 %1560, -96
  %1573 = add i64 %2494, 183
  store i64 %1573, i64* %PC, align 8
  %1574 = inttoptr i64 %1572 to i64*
  %1575 = load i64, i64* %1574, align 8
  store i64 %1575, i64* %RAX, align 8, !tbaa !2450
  %1576 = add i64 %1560, -188
  %1577 = add i64 %2494, 190
  store i64 %1577, i64* %PC, align 8
  %1578 = inttoptr i64 %1576 to i32*
  %1579 = load i32, i32* %1578, align 4
  %1580 = sext i32 %1579 to i64
  %1581 = mul nsw i64 %1580, 520
  store i64 %1581, i64* %RCX, align 8, !tbaa !2450
  %1582 = lshr i64 %1581, 63
  %1583 = add i64 %1581, %1575
  store i64 %1583, i64* %RAX, align 8, !tbaa !2450
  %1584 = icmp ult i64 %1583, %1575
  %1585 = icmp ult i64 %1583, %1581
  %1586 = or i1 %1584, %1585
  %1587 = zext i1 %1586 to i8
  store i8 %1587, i8* %42, align 1, !tbaa !2428
  %1588 = trunc i64 %1583 to i32
  %1589 = and i32 %1588, 255
  %1590 = tail call i32 @llvm.ctpop.i32(i32 %1589) #10
  %1591 = trunc i32 %1590 to i8
  %1592 = and i8 %1591, 1
  %1593 = xor i8 %1592, 1
  store i8 %1593, i8* %49, align 1, !tbaa !2445
  %1594 = xor i64 %1581, %1575
  %1595 = xor i64 %1594, %1583
  %1596 = lshr i64 %1595, 4
  %1597 = trunc i64 %1596 to i8
  %1598 = and i8 %1597, 1
  store i8 %1598, i8* %55, align 1, !tbaa !2446
  %1599 = icmp eq i64 %1583, 0
  %1600 = zext i1 %1599 to i8
  store i8 %1600, i8* %58, align 1, !tbaa !2447
  %1601 = lshr i64 %1583, 63
  %1602 = trunc i64 %1601 to i8
  store i8 %1602, i8* %61, align 1, !tbaa !2448
  %1603 = lshr i64 %1575, 63
  %1604 = xor i64 %1601, %1603
  %1605 = xor i64 %1601, %1582
  %1606 = add nuw nsw i64 %1604, %1605
  %1607 = icmp eq i64 %1606, 2
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %67, align 1, !tbaa !2449
  %1609 = add i64 %1560, -192
  %1610 = add i64 %2494, 207
  store i64 %1610, i64* %PC, align 8
  %1611 = inttoptr i64 %1609 to i32*
  %1612 = load i32, i32* %1611, align 4
  %1613 = sext i32 %1612 to i64
  store i64 %1613, i64* %RCX, align 8, !tbaa !2450
  %1614 = shl nsw i64 %1613, 3
  %1615 = add i64 %1614, %1583
  %1616 = add i64 %2494, 212
  store i64 %1616, i64* %PC, align 8
  %1617 = inttoptr i64 %1615 to double*
  store double %1571, double* %1617, align 8
  %1618 = load i64, i64* %RBP, align 8
  %1619 = add i64 %1618, -176
  %1620 = load i64, i64* %PC, align 8
  %1621 = add i64 %1620, 7
  store i64 %1621, i64* %PC, align 8
  %1622 = inttoptr i64 %1619 to i64*
  %1623 = load i64, i64* %1622, align 8
  store i64 %1623, i64* %RAX, align 8, !tbaa !2450
  %1624 = add i64 %1618, -192
  %1625 = add i64 %1620, 14
  store i64 %1625, i64* %PC, align 8
  %1626 = inttoptr i64 %1624 to i32*
  %1627 = load i32, i32* %1626, align 4
  %1628 = sext i32 %1627 to i64
  store i64 %1628, i64* %RCX, align 8, !tbaa !2450
  %1629 = shl nsw i64 %1628, 3
  %1630 = add i64 %1629, %1623
  %1631 = add i64 %1620, 19
  store i64 %1631, i64* %PC, align 8
  %1632 = inttoptr i64 %1630 to i64*
  %1633 = load i64, i64* %1632, align 8
  store i64 %1633, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1634 = add i64 %1618, -184
  %1635 = add i64 %1620, 26
  store i64 %1635, i64* %PC, align 8
  %1636 = inttoptr i64 %1634 to i64*
  %1637 = load i64, i64* %1636, align 8
  store i64 %1637, i64* %RAX, align 8, !tbaa !2450
  %1638 = add i64 %1620, 33
  store i64 %1638, i64* %PC, align 8
  %1639 = load i32, i32* %1626, align 4
  %1640 = sext i32 %1639 to i64
  store i64 %1640, i64* %RCX, align 8, !tbaa !2450
  %1641 = shl nsw i64 %1640, 3
  %1642 = add i64 %1641, %1637
  %1643 = add i64 %1620, 38
  store i64 %1643, i64* %PC, align 8
  %1644 = bitcast i64 %1633 to double
  %1645 = inttoptr i64 %1642 to double*
  %1646 = load double, double* %1645, align 8
  %1647 = fdiv double %1644, %1646
  store double %1647, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %1648 = add i64 %1618, -112
  %1649 = add i64 %1620, 42
  store i64 %1649, i64* %PC, align 8
  %1650 = inttoptr i64 %1648 to i64*
  %1651 = load i64, i64* %1650, align 8
  store i64 %1651, i64* %RAX, align 8, !tbaa !2450
  %1652 = add i64 %1618, -188
  %1653 = add i64 %1620, 49
  store i64 %1653, i64* %PC, align 8
  %1654 = inttoptr i64 %1652 to i32*
  %1655 = load i32, i32* %1654, align 4
  %1656 = sext i32 %1655 to i64
  %1657 = mul nsw i64 %1656, 33800
  store i64 %1657, i64* %RCX, align 8, !tbaa !2450
  %1658 = lshr i64 %1657, 63
  %1659 = add i64 %1657, %1651
  store i64 %1659, i64* %RAX, align 8, !tbaa !2450
  %1660 = icmp ult i64 %1659, %1651
  %1661 = icmp ult i64 %1659, %1657
  %1662 = or i1 %1660, %1661
  %1663 = zext i1 %1662 to i8
  store i8 %1663, i8* %42, align 1, !tbaa !2428
  %1664 = trunc i64 %1659 to i32
  %1665 = and i32 %1664, 255
  %1666 = tail call i32 @llvm.ctpop.i32(i32 %1665) #10
  %1667 = trunc i32 %1666 to i8
  %1668 = and i8 %1667, 1
  %1669 = xor i8 %1668, 1
  store i8 %1669, i8* %49, align 1, !tbaa !2445
  %1670 = xor i64 %1657, %1651
  %1671 = xor i64 %1670, %1659
  %1672 = lshr i64 %1671, 4
  %1673 = trunc i64 %1672 to i8
  %1674 = and i8 %1673, 1
  store i8 %1674, i8* %55, align 1, !tbaa !2446
  %1675 = icmp eq i64 %1659, 0
  %1676 = zext i1 %1675 to i8
  store i8 %1676, i8* %58, align 1, !tbaa !2447
  %1677 = lshr i64 %1659, 63
  %1678 = trunc i64 %1677 to i8
  store i8 %1678, i8* %61, align 1, !tbaa !2448
  %1679 = lshr i64 %1651, 63
  %1680 = xor i64 %1677, %1679
  %1681 = xor i64 %1677, %1658
  %1682 = add nuw nsw i64 %1680, %1681
  %1683 = icmp eq i64 %1682, 2
  %1684 = zext i1 %1683 to i8
  store i8 %1684, i8* %67, align 1, !tbaa !2449
  %1685 = add i64 %1620, 66
  store i64 %1685, i64* %PC, align 8
  %1686 = load i32, i32* %1626, align 4
  %1687 = sext i32 %1686 to i64
  %1688 = mul nsw i64 %1687, 520
  store i64 %1688, i64* %RCX, align 8, !tbaa !2450
  %1689 = lshr i64 %1688, 63
  %1690 = add i64 %1688, %1659
  store i64 %1690, i64* %RAX, align 8, !tbaa !2450
  %1691 = icmp ult i64 %1690, %1659
  %1692 = icmp ult i64 %1690, %1688
  %1693 = or i1 %1691, %1692
  %1694 = zext i1 %1693 to i8
  store i8 %1694, i8* %42, align 1, !tbaa !2428
  %1695 = trunc i64 %1690 to i32
  %1696 = and i32 %1695, 255
  %1697 = tail call i32 @llvm.ctpop.i32(i32 %1696) #10
  %1698 = trunc i32 %1697 to i8
  %1699 = and i8 %1698, 1
  %1700 = xor i8 %1699, 1
  store i8 %1700, i8* %49, align 1, !tbaa !2445
  %1701 = xor i64 %1688, %1659
  %1702 = xor i64 %1701, %1690
  %1703 = lshr i64 %1702, 4
  %1704 = trunc i64 %1703 to i8
  %1705 = and i8 %1704, 1
  store i8 %1705, i8* %55, align 1, !tbaa !2446
  %1706 = icmp eq i64 %1690, 0
  %1707 = zext i1 %1706 to i8
  store i8 %1707, i8* %58, align 1, !tbaa !2447
  %1708 = lshr i64 %1690, 63
  %1709 = trunc i64 %1708 to i8
  store i8 %1709, i8* %61, align 1, !tbaa !2448
  %1710 = xor i64 %1708, %1677
  %1711 = xor i64 %1708, %1689
  %1712 = add nuw nsw i64 %1710, %1711
  %1713 = icmp eq i64 %1712, 2
  %1714 = zext i1 %1713 to i8
  store i8 %1714, i8* %67, align 1, !tbaa !2449
  %1715 = add i64 %1618, -48
  %1716 = add i64 %1620, 80
  store i64 %1716, i64* %PC, align 8
  %1717 = inttoptr i64 %1715 to i32*
  %1718 = load i32, i32* %1717, align 4
  %1719 = sext i32 %1718 to i64
  store i64 %1719, i64* %RCX, align 8, !tbaa !2450
  %1720 = shl nsw i64 %1719, 3
  %1721 = add i64 %1720, %1690
  %1722 = add i64 %1620, 85
  store i64 %1722, i64* %PC, align 8
  %1723 = load double, double* %257, align 1
  %1724 = inttoptr i64 %1721 to double*
  %1725 = load double, double* %1724, align 8
  %1726 = fmul double %1723, %1725
  store double %1726, double* %257, align 1, !tbaa !2453
  %1727 = add i64 %1618, -72
  %1728 = add i64 %1620, 90
  store i64 %1728, i64* %PC, align 8
  %1729 = inttoptr i64 %1727 to i64*
  %1730 = load i64, i64* %1729, align 8
  store i64 %1730, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %1731 = add i64 %1620, 97
  store i64 %1731, i64* %PC, align 8
  %1732 = load i64, i64* %1636, align 8
  store i64 %1732, i64* %RAX, align 8, !tbaa !2450
  %1733 = add i64 %1620, 104
  store i64 %1733, i64* %PC, align 8
  %1734 = load i32, i32* %1626, align 4
  %1735 = sext i32 %1734 to i64
  store i64 %1735, i64* %RCX, align 8, !tbaa !2450
  %1736 = shl nsw i64 %1735, 3
  %1737 = add i64 %1736, %1732
  %1738 = add i64 %1620, 109
  store i64 %1738, i64* %PC, align 8
  %1739 = bitcast i64 %1730 to double
  %1740 = inttoptr i64 %1737 to double*
  %1741 = load double, double* %1740, align 8
  %1742 = fdiv double %1739, %1741
  store double %1742, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %1743 = load i64, i64* %RBP, align 8
  %1744 = add i64 %1743, -96
  %1745 = add i64 %1620, 113
  store i64 %1745, i64* %PC, align 8
  %1746 = inttoptr i64 %1744 to i64*
  %1747 = load i64, i64* %1746, align 8
  store i64 %1747, i64* %RAX, align 8, !tbaa !2450
  %1748 = add i64 %1743, -188
  %1749 = add i64 %1620, 120
  store i64 %1749, i64* %PC, align 8
  %1750 = inttoptr i64 %1748 to i32*
  %1751 = load i32, i32* %1750, align 4
  %1752 = sext i32 %1751 to i64
  %1753 = mul nsw i64 %1752, 520
  store i64 %1753, i64* %RCX, align 8, !tbaa !2450
  %1754 = lshr i64 %1753, 63
  %1755 = add i64 %1753, %1747
  store i64 %1755, i64* %RAX, align 8, !tbaa !2450
  %1756 = icmp ult i64 %1755, %1747
  %1757 = icmp ult i64 %1755, %1753
  %1758 = or i1 %1756, %1757
  %1759 = zext i1 %1758 to i8
  store i8 %1759, i8* %42, align 1, !tbaa !2428
  %1760 = trunc i64 %1755 to i32
  %1761 = and i32 %1760, 255
  %1762 = tail call i32 @llvm.ctpop.i32(i32 %1761) #10
  %1763 = trunc i32 %1762 to i8
  %1764 = and i8 %1763, 1
  %1765 = xor i8 %1764, 1
  store i8 %1765, i8* %49, align 1, !tbaa !2445
  %1766 = xor i64 %1753, %1747
  %1767 = xor i64 %1766, %1755
  %1768 = lshr i64 %1767, 4
  %1769 = trunc i64 %1768 to i8
  %1770 = and i8 %1769, 1
  store i8 %1770, i8* %55, align 1, !tbaa !2446
  %1771 = icmp eq i64 %1755, 0
  %1772 = zext i1 %1771 to i8
  store i8 %1772, i8* %58, align 1, !tbaa !2447
  %1773 = lshr i64 %1755, 63
  %1774 = trunc i64 %1773 to i8
  store i8 %1774, i8* %61, align 1, !tbaa !2448
  %1775 = lshr i64 %1747, 63
  %1776 = xor i64 %1773, %1775
  %1777 = xor i64 %1773, %1754
  %1778 = add nuw nsw i64 %1776, %1777
  %1779 = icmp eq i64 %1778, 2
  %1780 = zext i1 %1779 to i8
  store i8 %1780, i8* %67, align 1, !tbaa !2449
  %1781 = add i64 %1743, -192
  %1782 = add i64 %1620, 137
  store i64 %1782, i64* %PC, align 8
  %1783 = inttoptr i64 %1781 to i32*
  %1784 = load i32, i32* %1783, align 4
  %1785 = sext i32 %1784 to i64
  store i64 %1785, i64* %RCX, align 8, !tbaa !2450
  %1786 = shl nsw i64 %1785, 3
  %1787 = add i64 %1786, %1755
  %1788 = add i64 %1620, 142
  store i64 %1788, i64* %PC, align 8
  %1789 = inttoptr i64 %1787 to double*
  %1790 = load double, double* %1789, align 8
  %1791 = fmul double %1742, %1790
  store double %1791, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %1792 = fsub double %1726, %1791
  store double %1792, double* %257, align 1, !tbaa !2453
  %1793 = add i64 %1743, -104
  %1794 = add i64 %1620, 150
  store i64 %1794, i64* %PC, align 8
  %1795 = inttoptr i64 %1793 to i64*
  %1796 = load i64, i64* %1795, align 8
  store i64 %1796, i64* %RAX, align 8, !tbaa !2450
  %1797 = add i64 %1620, 157
  store i64 %1797, i64* %PC, align 8
  %1798 = load i32, i32* %1750, align 4
  %1799 = sext i32 %1798 to i64
  %1800 = mul nsw i64 %1799, 520
  store i64 %1800, i64* %RCX, align 8, !tbaa !2450
  %1801 = lshr i64 %1800, 63
  %1802 = add i64 %1800, %1796
  store i64 %1802, i64* %RAX, align 8, !tbaa !2450
  %1803 = icmp ult i64 %1802, %1796
  %1804 = icmp ult i64 %1802, %1800
  %1805 = or i1 %1803, %1804
  %1806 = zext i1 %1805 to i8
  store i8 %1806, i8* %42, align 1, !tbaa !2428
  %1807 = trunc i64 %1802 to i32
  %1808 = and i32 %1807, 255
  %1809 = tail call i32 @llvm.ctpop.i32(i32 %1808) #10
  %1810 = trunc i32 %1809 to i8
  %1811 = and i8 %1810, 1
  %1812 = xor i8 %1811, 1
  store i8 %1812, i8* %49, align 1, !tbaa !2445
  %1813 = xor i64 %1800, %1796
  %1814 = xor i64 %1813, %1802
  %1815 = lshr i64 %1814, 4
  %1816 = trunc i64 %1815 to i8
  %1817 = and i8 %1816, 1
  store i8 %1817, i8* %55, align 1, !tbaa !2446
  %1818 = icmp eq i64 %1802, 0
  %1819 = zext i1 %1818 to i8
  store i8 %1819, i8* %58, align 1, !tbaa !2447
  %1820 = lshr i64 %1802, 63
  %1821 = trunc i64 %1820 to i8
  store i8 %1821, i8* %61, align 1, !tbaa !2448
  %1822 = lshr i64 %1796, 63
  %1823 = xor i64 %1820, %1822
  %1824 = xor i64 %1820, %1801
  %1825 = add nuw nsw i64 %1823, %1824
  %1826 = icmp eq i64 %1825, 2
  %1827 = zext i1 %1826 to i8
  store i8 %1827, i8* %67, align 1, !tbaa !2449
  %1828 = add i64 %1620, 174
  store i64 %1828, i64* %PC, align 8
  %1829 = load i32, i32* %1783, align 4
  %1830 = sext i32 %1829 to i64
  store i64 %1830, i64* %RCX, align 8, !tbaa !2450
  %1831 = shl nsw i64 %1830, 3
  %1832 = add i64 %1831, %1802
  %1833 = add i64 %1620, 179
  store i64 %1833, i64* %PC, align 8
  %1834 = inttoptr i64 %1832 to double*
  store double %1792, double* %1834, align 8
  %1835 = load i64, i64* %RBP, align 8
  %1836 = add i64 %1835, -160
  %1837 = load i64, i64* %PC, align 8
  %1838 = add i64 %1837, 7
  store i64 %1838, i64* %PC, align 8
  %1839 = inttoptr i64 %1836 to i64*
  %1840 = load i64, i64* %1839, align 8
  store i64 %1840, i64* %RAX, align 8, !tbaa !2450
  %1841 = add i64 %1835, -48
  %1842 = add i64 %1837, 11
  store i64 %1842, i64* %PC, align 8
  %1843 = inttoptr i64 %1841 to i32*
  %1844 = load i32, i32* %1843, align 4
  %1845 = sext i32 %1844 to i64
  store i64 %1845, i64* %RCX, align 8, !tbaa !2450
  %1846 = shl nsw i64 %1845, 3
  %1847 = add i64 %1846, %1840
  %1848 = add i64 %1837, 16
  store i64 %1848, i64* %PC, align 8
  %1849 = inttoptr i64 %1847 to i64*
  %1850 = load i64, i64* %1849, align 8
  store i64 %1850, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %1851 = add i64 %1835, -168
  %1852 = add i64 %1837, 23
  store i64 %1852, i64* %PC, align 8
  %1853 = inttoptr i64 %1851 to i64*
  %1854 = load i64, i64* %1853, align 8
  store i64 %1854, i64* %RAX, align 8, !tbaa !2450
  %1855 = add i64 %1837, 27
  store i64 %1855, i64* %PC, align 8
  %1856 = load i32, i32* %1843, align 4
  %1857 = sext i32 %1856 to i64
  store i64 %1857, i64* %RCX, align 8, !tbaa !2450
  %1858 = shl nsw i64 %1857, 3
  %1859 = add i64 %1858, %1854
  %1860 = add i64 %1837, 32
  store i64 %1860, i64* %PC, align 8
  %1861 = bitcast i64 %1850 to double
  %1862 = inttoptr i64 %1859 to double*
  %1863 = load double, double* %1862, align 8
  %1864 = fdiv double %1861, %1863
  store double %1864, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %1865 = add i64 %1835, -136
  %1866 = add i64 %1837, 39
  store i64 %1866, i64* %PC, align 8
  %1867 = inttoptr i64 %1865 to i64*
  %1868 = load i64, i64* %1867, align 8
  store i64 %1868, i64* %RAX, align 8, !tbaa !2450
  %1869 = add i64 %1835, -188
  %1870 = add i64 %1837, 46
  store i64 %1870, i64* %PC, align 8
  %1871 = inttoptr i64 %1869 to i32*
  %1872 = load i32, i32* %1871, align 4
  %1873 = sext i32 %1872 to i64
  %1874 = mul nsw i64 %1873, 33800
  store i64 %1874, i64* %RCX, align 8, !tbaa !2450
  %1875 = lshr i64 %1874, 63
  %1876 = add i64 %1874, %1868
  store i64 %1876, i64* %RAX, align 8, !tbaa !2450
  %1877 = icmp ult i64 %1876, %1868
  %1878 = icmp ult i64 %1876, %1874
  %1879 = or i1 %1877, %1878
  %1880 = zext i1 %1879 to i8
  store i8 %1880, i8* %42, align 1, !tbaa !2428
  %1881 = trunc i64 %1876 to i32
  %1882 = and i32 %1881, 255
  %1883 = tail call i32 @llvm.ctpop.i32(i32 %1882) #10
  %1884 = trunc i32 %1883 to i8
  %1885 = and i8 %1884, 1
  %1886 = xor i8 %1885, 1
  store i8 %1886, i8* %49, align 1, !tbaa !2445
  %1887 = xor i64 %1874, %1868
  %1888 = xor i64 %1887, %1876
  %1889 = lshr i64 %1888, 4
  %1890 = trunc i64 %1889 to i8
  %1891 = and i8 %1890, 1
  store i8 %1891, i8* %55, align 1, !tbaa !2446
  %1892 = icmp eq i64 %1876, 0
  %1893 = zext i1 %1892 to i8
  store i8 %1893, i8* %58, align 1, !tbaa !2447
  %1894 = lshr i64 %1876, 63
  %1895 = trunc i64 %1894 to i8
  store i8 %1895, i8* %61, align 1, !tbaa !2448
  %1896 = lshr i64 %1868, 63
  %1897 = xor i64 %1894, %1896
  %1898 = xor i64 %1894, %1875
  %1899 = add nuw nsw i64 %1897, %1898
  %1900 = icmp eq i64 %1899, 2
  %1901 = zext i1 %1900 to i8
  store i8 %1901, i8* %67, align 1, !tbaa !2449
  %1902 = add i64 %1835, -192
  %1903 = add i64 %1837, 63
  store i64 %1903, i64* %PC, align 8
  %1904 = inttoptr i64 %1902 to i32*
  %1905 = load i32, i32* %1904, align 4
  %1906 = sext i32 %1905 to i64
  %1907 = mul nsw i64 %1906, 520
  store i64 %1907, i64* %RCX, align 8, !tbaa !2450
  %1908 = lshr i64 %1907, 63
  %1909 = add i64 %1907, %1876
  store i64 %1909, i64* %RAX, align 8, !tbaa !2450
  %1910 = icmp ult i64 %1909, %1876
  %1911 = icmp ult i64 %1909, %1907
  %1912 = or i1 %1910, %1911
  %1913 = zext i1 %1912 to i8
  store i8 %1913, i8* %42, align 1, !tbaa !2428
  %1914 = trunc i64 %1909 to i32
  %1915 = and i32 %1914, 255
  %1916 = tail call i32 @llvm.ctpop.i32(i32 %1915) #10
  %1917 = trunc i32 %1916 to i8
  %1918 = and i8 %1917, 1
  %1919 = xor i8 %1918, 1
  store i8 %1919, i8* %49, align 1, !tbaa !2445
  %1920 = xor i64 %1907, %1876
  %1921 = xor i64 %1920, %1909
  %1922 = lshr i64 %1921, 4
  %1923 = trunc i64 %1922 to i8
  %1924 = and i8 %1923, 1
  store i8 %1924, i8* %55, align 1, !tbaa !2446
  %1925 = icmp eq i64 %1909, 0
  %1926 = zext i1 %1925 to i8
  store i8 %1926, i8* %58, align 1, !tbaa !2447
  %1927 = lshr i64 %1909, 63
  %1928 = trunc i64 %1927 to i8
  store i8 %1928, i8* %61, align 1, !tbaa !2448
  %1929 = xor i64 %1927, %1894
  %1930 = xor i64 %1927, %1908
  %1931 = add nuw nsw i64 %1929, %1930
  %1932 = icmp eq i64 %1931, 2
  %1933 = zext i1 %1932 to i8
  store i8 %1933, i8* %67, align 1, !tbaa !2449
  %1934 = add i64 %1837, 77
  store i64 %1934, i64* %PC, align 8
  %1935 = load i32, i32* %1843, align 4
  %1936 = sext i32 %1935 to i64
  store i64 %1936, i64* %RCX, align 8, !tbaa !2450
  %1937 = shl nsw i64 %1936, 3
  %1938 = add i64 %1937, %1909
  %1939 = add i64 %1837, 82
  store i64 %1939, i64* %PC, align 8
  %1940 = load double, double* %257, align 1
  %1941 = inttoptr i64 %1938 to double*
  %1942 = load double, double* %1941, align 8
  %1943 = fmul double %1940, %1942
  store double %1943, double* %257, align 1, !tbaa !2453
  %1944 = add i64 %1835, -64
  %1945 = add i64 %1837, 87
  store i64 %1945, i64* %PC, align 8
  %1946 = inttoptr i64 %1944 to i64*
  %1947 = load i64, i64* %1946, align 8
  store i64 %1947, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %1948 = add i64 %1835, -152
  %1949 = add i64 %1837, 94
  store i64 %1949, i64* %PC, align 8
  %1950 = inttoptr i64 %1948 to i64*
  %1951 = load i64, i64* %1950, align 8
  store i64 %1951, i64* %RAX, align 8, !tbaa !2450
  %1952 = add i64 %1837, 101
  store i64 %1952, i64* %PC, align 8
  %1953 = load i32, i32* %1871, align 4
  %1954 = sext i32 %1953 to i64
  store i64 %1954, i64* %RCX, align 8, !tbaa !2450
  %1955 = shl nsw i64 %1954, 3
  %1956 = add i64 %1955, %1951
  %1957 = add i64 %1837, 106
  store i64 %1957, i64* %PC, align 8
  %1958 = bitcast i64 %1947 to double
  %1959 = inttoptr i64 %1956 to double*
  %1960 = load double, double* %1959, align 8
  %1961 = fmul double %1958, %1960
  store double %1961, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %1962 = load i64, i64* %RBP, align 8
  %1963 = add i64 %1962, -168
  %1964 = add i64 %1837, 113
  store i64 %1964, i64* %PC, align 8
  %1965 = inttoptr i64 %1963 to i64*
  %1966 = load i64, i64* %1965, align 8
  store i64 %1966, i64* %RAX, align 8, !tbaa !2450
  %1967 = add i64 %1962, -48
  %1968 = add i64 %1837, 117
  store i64 %1968, i64* %PC, align 8
  %1969 = inttoptr i64 %1967 to i32*
  %1970 = load i32, i32* %1969, align 4
  %1971 = sext i32 %1970 to i64
  store i64 %1971, i64* %RCX, align 8, !tbaa !2450
  %1972 = shl nsw i64 %1971, 3
  %1973 = add i64 %1972, %1966
  %1974 = add i64 %1837, 122
  store i64 %1974, i64* %PC, align 8
  %1975 = inttoptr i64 %1973 to double*
  %1976 = load double, double* %1975, align 8
  %1977 = fdiv double %1961, %1976
  store double %1977, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %1978 = add i64 %1962, -104
  %1979 = add i64 %1837, 126
  store i64 %1979, i64* %PC, align 8
  %1980 = inttoptr i64 %1978 to i64*
  %1981 = load i64, i64* %1980, align 8
  store i64 %1981, i64* %RAX, align 8, !tbaa !2450
  %1982 = add i64 %1962, -188
  %1983 = add i64 %1837, 133
  store i64 %1983, i64* %PC, align 8
  %1984 = inttoptr i64 %1982 to i32*
  %1985 = load i32, i32* %1984, align 4
  %1986 = sext i32 %1985 to i64
  %1987 = mul nsw i64 %1986, 520
  store i64 %1987, i64* %RCX, align 8, !tbaa !2450
  %1988 = lshr i64 %1987, 63
  %1989 = add i64 %1987, %1981
  store i64 %1989, i64* %RAX, align 8, !tbaa !2450
  %1990 = icmp ult i64 %1989, %1981
  %1991 = icmp ult i64 %1989, %1987
  %1992 = or i1 %1990, %1991
  %1993 = zext i1 %1992 to i8
  store i8 %1993, i8* %42, align 1, !tbaa !2428
  %1994 = trunc i64 %1989 to i32
  %1995 = and i32 %1994, 255
  %1996 = tail call i32 @llvm.ctpop.i32(i32 %1995) #10
  %1997 = trunc i32 %1996 to i8
  %1998 = and i8 %1997, 1
  %1999 = xor i8 %1998, 1
  store i8 %1999, i8* %49, align 1, !tbaa !2445
  %2000 = xor i64 %1987, %1981
  %2001 = xor i64 %2000, %1989
  %2002 = lshr i64 %2001, 4
  %2003 = trunc i64 %2002 to i8
  %2004 = and i8 %2003, 1
  store i8 %2004, i8* %55, align 1, !tbaa !2446
  %2005 = icmp eq i64 %1989, 0
  %2006 = zext i1 %2005 to i8
  store i8 %2006, i8* %58, align 1, !tbaa !2447
  %2007 = lshr i64 %1989, 63
  %2008 = trunc i64 %2007 to i8
  store i8 %2008, i8* %61, align 1, !tbaa !2448
  %2009 = lshr i64 %1981, 63
  %2010 = xor i64 %2007, %2009
  %2011 = xor i64 %2007, %1988
  %2012 = add nuw nsw i64 %2010, %2011
  %2013 = icmp eq i64 %2012, 2
  %2014 = zext i1 %2013 to i8
  store i8 %2014, i8* %67, align 1, !tbaa !2449
  %2015 = add i64 %1962, -192
  %2016 = add i64 %1837, 150
  store i64 %2016, i64* %PC, align 8
  %2017 = inttoptr i64 %2015 to i32*
  %2018 = load i32, i32* %2017, align 4
  %2019 = sext i32 %2018 to i64
  store i64 %2019, i64* %RCX, align 8, !tbaa !2450
  %2020 = shl nsw i64 %2019, 3
  %2021 = add i64 %2020, %1989
  %2022 = add i64 %1837, 155
  store i64 %2022, i64* %PC, align 8
  %2023 = inttoptr i64 %2021 to double*
  %2024 = load double, double* %2023, align 8
  %2025 = fmul double %1977, %2024
  store double %2025, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2026 = load double, double* %257, align 1
  %2027 = fadd double %2025, %2026
  store double %2027, double* %257, align 1, !tbaa !2453
  %2028 = add i64 %1962, -64
  %2029 = add i64 %1837, 164
  store i64 %2029, i64* %PC, align 8
  %2030 = inttoptr i64 %2028 to i64*
  %2031 = load i64, i64* %2030, align 8
  store i64 %2031, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %2032 = add i64 %1962, -144
  %2033 = add i64 %1837, 171
  store i64 %2033, i64* %PC, align 8
  %2034 = inttoptr i64 %2032 to i64*
  %2035 = load i64, i64* %2034, align 8
  store i64 %2035, i64* %RAX, align 8, !tbaa !2450
  %2036 = add i64 %1837, 178
  store i64 %2036, i64* %PC, align 8
  %2037 = load i32, i32* %1984, align 4
  %2038 = sext i32 %2037 to i64
  store i64 %2038, i64* %RCX, align 8, !tbaa !2450
  %2039 = shl nsw i64 %2038, 3
  %2040 = add i64 %2039, %2035
  %2041 = add i64 %1837, 183
  store i64 %2041, i64* %PC, align 8
  %2042 = bitcast i64 %2031 to double
  %2043 = inttoptr i64 %2040 to double*
  %2044 = load double, double* %2043, align 8
  %2045 = fmul double %2042, %2044
  store double %2045, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2046 = add i64 %1837, 190
  store i64 %2046, i64* %PC, align 8
  %2047 = load i64, i64* %1965, align 8
  store i64 %2047, i64* %RAX, align 8, !tbaa !2450
  %2048 = add i64 %1837, 194
  store i64 %2048, i64* %PC, align 8
  %2049 = load i32, i32* %1969, align 4
  %2050 = sext i32 %2049 to i64
  store i64 %2050, i64* %RCX, align 8, !tbaa !2450
  %2051 = shl nsw i64 %2050, 3
  %2052 = add i64 %2051, %2047
  %2053 = add i64 %1837, 199
  store i64 %2053, i64* %PC, align 8
  %2054 = inttoptr i64 %2052 to double*
  %2055 = load double, double* %2054, align 8
  %2056 = fdiv double %2045, %2055
  store double %2056, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %2057 = add i64 %1962, -112
  %2058 = add i64 %1837, 203
  store i64 %2058, i64* %PC, align 8
  %2059 = inttoptr i64 %2057 to i64*
  %2060 = load i64, i64* %2059, align 8
  store i64 %2060, i64* %RAX, align 8, !tbaa !2450
  %2061 = add i64 %1837, 210
  store i64 %2061, i64* %PC, align 8
  %2062 = load i32, i32* %1984, align 4
  %2063 = sext i32 %2062 to i64
  %2064 = mul nsw i64 %2063, 33800
  store i64 %2064, i64* %RCX, align 8, !tbaa !2450
  %2065 = lshr i64 %2064, 63
  %2066 = add i64 %2064, %2060
  store i64 %2066, i64* %RAX, align 8, !tbaa !2450
  %2067 = icmp ult i64 %2066, %2060
  %2068 = icmp ult i64 %2066, %2064
  %2069 = or i1 %2067, %2068
  %2070 = zext i1 %2069 to i8
  store i8 %2070, i8* %42, align 1, !tbaa !2428
  %2071 = trunc i64 %2066 to i32
  %2072 = and i32 %2071, 255
  %2073 = tail call i32 @llvm.ctpop.i32(i32 %2072) #10
  %2074 = trunc i32 %2073 to i8
  %2075 = and i8 %2074, 1
  %2076 = xor i8 %2075, 1
  store i8 %2076, i8* %49, align 1, !tbaa !2445
  %2077 = xor i64 %2064, %2060
  %2078 = xor i64 %2077, %2066
  %2079 = lshr i64 %2078, 4
  %2080 = trunc i64 %2079 to i8
  %2081 = and i8 %2080, 1
  store i8 %2081, i8* %55, align 1, !tbaa !2446
  %2082 = icmp eq i64 %2066, 0
  %2083 = zext i1 %2082 to i8
  store i8 %2083, i8* %58, align 1, !tbaa !2447
  %2084 = lshr i64 %2066, 63
  %2085 = trunc i64 %2084 to i8
  store i8 %2085, i8* %61, align 1, !tbaa !2448
  %2086 = lshr i64 %2060, 63
  %2087 = xor i64 %2084, %2086
  %2088 = xor i64 %2084, %2065
  %2089 = add nuw nsw i64 %2087, %2088
  %2090 = icmp eq i64 %2089, 2
  %2091 = zext i1 %2090 to i8
  store i8 %2091, i8* %67, align 1, !tbaa !2449
  %2092 = load i64, i64* %RBP, align 8
  %2093 = add i64 %2092, -192
  %2094 = add i64 %1837, 227
  store i64 %2094, i64* %PC, align 8
  %2095 = inttoptr i64 %2093 to i32*
  %2096 = load i32, i32* %2095, align 4
  %2097 = sext i32 %2096 to i64
  %2098 = mul nsw i64 %2097, 520
  store i64 %2098, i64* %RCX, align 8, !tbaa !2450
  %2099 = lshr i64 %2098, 63
  %2100 = add i64 %2098, %2066
  store i64 %2100, i64* %RAX, align 8, !tbaa !2450
  %2101 = icmp ult i64 %2100, %2066
  %2102 = icmp ult i64 %2100, %2098
  %2103 = or i1 %2101, %2102
  %2104 = zext i1 %2103 to i8
  store i8 %2104, i8* %42, align 1, !tbaa !2428
  %2105 = trunc i64 %2100 to i32
  %2106 = and i32 %2105, 255
  %2107 = tail call i32 @llvm.ctpop.i32(i32 %2106) #10
  %2108 = trunc i32 %2107 to i8
  %2109 = and i8 %2108, 1
  %2110 = xor i8 %2109, 1
  store i8 %2110, i8* %49, align 1, !tbaa !2445
  %2111 = xor i64 %2098, %2066
  %2112 = xor i64 %2111, %2100
  %2113 = lshr i64 %2112, 4
  %2114 = trunc i64 %2113 to i8
  %2115 = and i8 %2114, 1
  store i8 %2115, i8* %55, align 1, !tbaa !2446
  %2116 = icmp eq i64 %2100, 0
  %2117 = zext i1 %2116 to i8
  store i8 %2117, i8* %58, align 1, !tbaa !2447
  %2118 = lshr i64 %2100, 63
  %2119 = trunc i64 %2118 to i8
  store i8 %2119, i8* %61, align 1, !tbaa !2448
  %2120 = xor i64 %2118, %2084
  %2121 = xor i64 %2118, %2099
  %2122 = add nuw nsw i64 %2120, %2121
  %2123 = icmp eq i64 %2122, 2
  %2124 = zext i1 %2123 to i8
  store i8 %2124, i8* %67, align 1, !tbaa !2449
  %2125 = add i64 %2092, -48
  %2126 = add i64 %1837, 241
  store i64 %2126, i64* %PC, align 8
  %2127 = inttoptr i64 %2125 to i32*
  %2128 = load i32, i32* %2127, align 4
  %2129 = sext i32 %2128 to i64
  store i64 %2129, i64* %RCX, align 8, !tbaa !2450
  %2130 = shl nsw i64 %2129, 3
  %2131 = add i64 %2130, %2100
  %2132 = add i64 %1837, 246
  store i64 %2132, i64* %PC, align 8
  %2133 = load double, double* %155, align 1
  %2134 = inttoptr i64 %2131 to double*
  %2135 = load double, double* %2134, align 8
  %2136 = fmul double %2133, %2135
  store double %2136, double* %155, align 1, !tbaa !2453
  %2137 = load double, double* %257, align 1
  %2138 = fsub double %2137, %2136
  store double %2138, double* %257, align 1, !tbaa !2453
  %2139 = add i64 %2092, -136
  %2140 = add i64 %1837, 257
  store i64 %2140, i64* %PC, align 8
  %2141 = inttoptr i64 %2139 to i64*
  %2142 = load i64, i64* %2141, align 8
  store i64 %2142, i64* %RAX, align 8, !tbaa !2450
  %2143 = add i64 %2092, -188
  %2144 = add i64 %1837, 264
  store i64 %2144, i64* %PC, align 8
  %2145 = inttoptr i64 %2143 to i32*
  %2146 = load i32, i32* %2145, align 4
  %2147 = sext i32 %2146 to i64
  %2148 = mul nsw i64 %2147, 33800
  store i64 %2148, i64* %RCX, align 8, !tbaa !2450
  %2149 = lshr i64 %2148, 63
  %2150 = add i64 %2148, %2142
  store i64 %2150, i64* %RAX, align 8, !tbaa !2450
  %2151 = icmp ult i64 %2150, %2142
  %2152 = icmp ult i64 %2150, %2148
  %2153 = or i1 %2151, %2152
  %2154 = zext i1 %2153 to i8
  store i8 %2154, i8* %42, align 1, !tbaa !2428
  %2155 = trunc i64 %2150 to i32
  %2156 = and i32 %2155, 255
  %2157 = tail call i32 @llvm.ctpop.i32(i32 %2156) #10
  %2158 = trunc i32 %2157 to i8
  %2159 = and i8 %2158, 1
  %2160 = xor i8 %2159, 1
  store i8 %2160, i8* %49, align 1, !tbaa !2445
  %2161 = xor i64 %2148, %2142
  %2162 = xor i64 %2161, %2150
  %2163 = lshr i64 %2162, 4
  %2164 = trunc i64 %2163 to i8
  %2165 = and i8 %2164, 1
  store i8 %2165, i8* %55, align 1, !tbaa !2446
  %2166 = icmp eq i64 %2150, 0
  %2167 = zext i1 %2166 to i8
  store i8 %2167, i8* %58, align 1, !tbaa !2447
  %2168 = lshr i64 %2150, 63
  %2169 = trunc i64 %2168 to i8
  store i8 %2169, i8* %61, align 1, !tbaa !2448
  %2170 = lshr i64 %2142, 63
  %2171 = xor i64 %2168, %2170
  %2172 = xor i64 %2168, %2149
  %2173 = add nuw nsw i64 %2171, %2172
  %2174 = icmp eq i64 %2173, 2
  %2175 = zext i1 %2174 to i8
  store i8 %2175, i8* %67, align 1, !tbaa !2449
  %2176 = load i64, i64* %RBP, align 8
  %2177 = add i64 %2176, -192
  %2178 = add i64 %1837, 281
  store i64 %2178, i64* %PC, align 8
  %2179 = inttoptr i64 %2177 to i32*
  %2180 = load i32, i32* %2179, align 4
  %2181 = sext i32 %2180 to i64
  %2182 = mul nsw i64 %2181, 520
  store i64 %2182, i64* %RCX, align 8, !tbaa !2450
  %2183 = lshr i64 %2182, 63
  %2184 = add i64 %2182, %2150
  store i64 %2184, i64* %RAX, align 8, !tbaa !2450
  %2185 = icmp ult i64 %2184, %2150
  %2186 = icmp ult i64 %2184, %2182
  %2187 = or i1 %2185, %2186
  %2188 = zext i1 %2187 to i8
  store i8 %2188, i8* %42, align 1, !tbaa !2428
  %2189 = trunc i64 %2184 to i32
  %2190 = and i32 %2189, 255
  %2191 = tail call i32 @llvm.ctpop.i32(i32 %2190) #10
  %2192 = trunc i32 %2191 to i8
  %2193 = and i8 %2192, 1
  %2194 = xor i8 %2193, 1
  store i8 %2194, i8* %49, align 1, !tbaa !2445
  %2195 = xor i64 %2182, %2150
  %2196 = xor i64 %2195, %2184
  %2197 = lshr i64 %2196, 4
  %2198 = trunc i64 %2197 to i8
  %2199 = and i8 %2198, 1
  store i8 %2199, i8* %55, align 1, !tbaa !2446
  %2200 = icmp eq i64 %2184, 0
  %2201 = zext i1 %2200 to i8
  store i8 %2201, i8* %58, align 1, !tbaa !2447
  %2202 = lshr i64 %2184, 63
  %2203 = trunc i64 %2202 to i8
  store i8 %2203, i8* %61, align 1, !tbaa !2448
  %2204 = xor i64 %2202, %2168
  %2205 = xor i64 %2202, %2183
  %2206 = add nuw nsw i64 %2204, %2205
  %2207 = icmp eq i64 %2206, 2
  %2208 = zext i1 %2207 to i8
  store i8 %2208, i8* %67, align 1, !tbaa !2449
  %2209 = add i64 %2176, -48
  %2210 = add i64 %1837, 295
  store i64 %2210, i64* %PC, align 8
  %2211 = inttoptr i64 %2209 to i32*
  %2212 = load i32, i32* %2211, align 4
  %2213 = sext i32 %2212 to i64
  store i64 %2213, i64* %RCX, align 8, !tbaa !2450
  %2214 = shl nsw i64 %2213, 3
  %2215 = add i64 %2214, %2184
  %2216 = add i64 %1837, 300
  store i64 %2216, i64* %PC, align 8
  %2217 = load i64, i64* %148, align 1
  %2218 = inttoptr i64 %2215 to i64*
  store i64 %2217, i64* %2218, align 8
  %2219 = load i64, i64* %RBP, align 8
  %2220 = add i64 %2219, -104
  %2221 = load i64, i64* %PC, align 8
  %2222 = add i64 %2221, 4
  store i64 %2222, i64* %PC, align 8
  %2223 = inttoptr i64 %2220 to i64*
  %2224 = load i64, i64* %2223, align 8
  store i64 %2224, i64* %RAX, align 8, !tbaa !2450
  %2225 = add i64 %2219, -188
  %2226 = add i64 %2221, 11
  store i64 %2226, i64* %PC, align 8
  %2227 = inttoptr i64 %2225 to i32*
  %2228 = load i32, i32* %2227, align 4
  %2229 = sext i32 %2228 to i64
  %2230 = mul nsw i64 %2229, 520
  store i64 %2230, i64* %RCX, align 8, !tbaa !2450
  %2231 = lshr i64 %2230, 63
  %2232 = add i64 %2230, %2224
  store i64 %2232, i64* %RAX, align 8, !tbaa !2450
  %2233 = icmp ult i64 %2232, %2224
  %2234 = icmp ult i64 %2232, %2230
  %2235 = or i1 %2233, %2234
  %2236 = zext i1 %2235 to i8
  store i8 %2236, i8* %42, align 1, !tbaa !2428
  %2237 = trunc i64 %2232 to i32
  %2238 = and i32 %2237, 255
  %2239 = tail call i32 @llvm.ctpop.i32(i32 %2238) #10
  %2240 = trunc i32 %2239 to i8
  %2241 = and i8 %2240, 1
  %2242 = xor i8 %2241, 1
  store i8 %2242, i8* %49, align 1, !tbaa !2445
  %2243 = xor i64 %2230, %2224
  %2244 = xor i64 %2243, %2232
  %2245 = lshr i64 %2244, 4
  %2246 = trunc i64 %2245 to i8
  %2247 = and i8 %2246, 1
  store i8 %2247, i8* %55, align 1, !tbaa !2446
  %2248 = icmp eq i64 %2232, 0
  %2249 = zext i1 %2248 to i8
  store i8 %2249, i8* %58, align 1, !tbaa !2447
  %2250 = lshr i64 %2232, 63
  %2251 = trunc i64 %2250 to i8
  store i8 %2251, i8* %61, align 1, !tbaa !2448
  %2252 = lshr i64 %2224, 63
  %2253 = xor i64 %2250, %2252
  %2254 = xor i64 %2250, %2231
  %2255 = add nuw nsw i64 %2253, %2254
  %2256 = icmp eq i64 %2255, 2
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %67, align 1, !tbaa !2449
  %2258 = add i64 %2219, -192
  %2259 = add i64 %2221, 28
  store i64 %2259, i64* %PC, align 8
  %2260 = inttoptr i64 %2258 to i32*
  %2261 = load i32, i32* %2260, align 4
  %2262 = sext i32 %2261 to i64
  store i64 %2262, i64* %RCX, align 8, !tbaa !2450
  %2263 = shl nsw i64 %2262, 3
  %2264 = add i64 %2263, %2232
  %2265 = add i64 %2221, 33
  store i64 %2265, i64* %PC, align 8
  %2266 = inttoptr i64 %2264 to i64*
  %2267 = load i64, i64* %2266, align 8
  store i64 %2267, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2268 = add i64 %2219, -112
  %2269 = add i64 %2221, 37
  store i64 %2269, i64* %PC, align 8
  %2270 = inttoptr i64 %2268 to i64*
  %2271 = load i64, i64* %2270, align 8
  store i64 %2271, i64* %RAX, align 8, !tbaa !2450
  %2272 = add i64 %2221, 44
  store i64 %2272, i64* %PC, align 8
  %2273 = load i32, i32* %2227, align 4
  %2274 = sext i32 %2273 to i64
  %2275 = mul nsw i64 %2274, 33800
  store i64 %2275, i64* %RCX, align 8, !tbaa !2450
  %2276 = lshr i64 %2275, 63
  %2277 = add i64 %2275, %2271
  store i64 %2277, i64* %RAX, align 8, !tbaa !2450
  %2278 = icmp ult i64 %2277, %2271
  %2279 = icmp ult i64 %2277, %2275
  %2280 = or i1 %2278, %2279
  %2281 = zext i1 %2280 to i8
  store i8 %2281, i8* %42, align 1, !tbaa !2428
  %2282 = trunc i64 %2277 to i32
  %2283 = and i32 %2282, 255
  %2284 = tail call i32 @llvm.ctpop.i32(i32 %2283) #10
  %2285 = trunc i32 %2284 to i8
  %2286 = and i8 %2285, 1
  %2287 = xor i8 %2286, 1
  store i8 %2287, i8* %49, align 1, !tbaa !2445
  %2288 = xor i64 %2275, %2271
  %2289 = xor i64 %2288, %2277
  %2290 = lshr i64 %2289, 4
  %2291 = trunc i64 %2290 to i8
  %2292 = and i8 %2291, 1
  store i8 %2292, i8* %55, align 1, !tbaa !2446
  %2293 = icmp eq i64 %2277, 0
  %2294 = zext i1 %2293 to i8
  store i8 %2294, i8* %58, align 1, !tbaa !2447
  %2295 = lshr i64 %2277, 63
  %2296 = trunc i64 %2295 to i8
  store i8 %2296, i8* %61, align 1, !tbaa !2448
  %2297 = lshr i64 %2271, 63
  %2298 = xor i64 %2295, %2297
  %2299 = xor i64 %2295, %2276
  %2300 = add nuw nsw i64 %2298, %2299
  %2301 = icmp eq i64 %2300, 2
  %2302 = zext i1 %2301 to i8
  store i8 %2302, i8* %67, align 1, !tbaa !2449
  %2303 = load i64, i64* %RBP, align 8
  %2304 = add i64 %2303, -192
  %2305 = add i64 %2221, 61
  store i64 %2305, i64* %PC, align 8
  %2306 = inttoptr i64 %2304 to i32*
  %2307 = load i32, i32* %2306, align 4
  %2308 = sext i32 %2307 to i64
  %2309 = mul nsw i64 %2308, 520
  store i64 %2309, i64* %RCX, align 8, !tbaa !2450
  %2310 = lshr i64 %2309, 63
  %2311 = add i64 %2309, %2277
  store i64 %2311, i64* %RAX, align 8, !tbaa !2450
  %2312 = icmp ult i64 %2311, %2277
  %2313 = icmp ult i64 %2311, %2309
  %2314 = or i1 %2312, %2313
  %2315 = zext i1 %2314 to i8
  store i8 %2315, i8* %42, align 1, !tbaa !2428
  %2316 = trunc i64 %2311 to i32
  %2317 = and i32 %2316, 255
  %2318 = tail call i32 @llvm.ctpop.i32(i32 %2317) #10
  %2319 = trunc i32 %2318 to i8
  %2320 = and i8 %2319, 1
  %2321 = xor i8 %2320, 1
  store i8 %2321, i8* %49, align 1, !tbaa !2445
  %2322 = xor i64 %2309, %2277
  %2323 = xor i64 %2322, %2311
  %2324 = lshr i64 %2323, 4
  %2325 = trunc i64 %2324 to i8
  %2326 = and i8 %2325, 1
  store i8 %2326, i8* %55, align 1, !tbaa !2446
  %2327 = icmp eq i64 %2311, 0
  %2328 = zext i1 %2327 to i8
  store i8 %2328, i8* %58, align 1, !tbaa !2447
  %2329 = lshr i64 %2311, 63
  %2330 = trunc i64 %2329 to i8
  store i8 %2330, i8* %61, align 1, !tbaa !2448
  %2331 = xor i64 %2329, %2295
  %2332 = xor i64 %2329, %2310
  %2333 = add nuw nsw i64 %2331, %2332
  %2334 = icmp eq i64 %2333, 2
  %2335 = zext i1 %2334 to i8
  store i8 %2335, i8* %67, align 1, !tbaa !2449
  %2336 = add i64 %2303, -48
  %2337 = add i64 %2221, 75
  store i64 %2337, i64* %PC, align 8
  %2338 = inttoptr i64 %2336 to i32*
  %2339 = load i32, i32* %2338, align 4
  %2340 = sext i32 %2339 to i64
  store i64 %2340, i64* %RCX, align 8, !tbaa !2450
  %2341 = shl nsw i64 %2340, 3
  %2342 = add i64 %2341, %2311
  %2343 = add i64 %2221, 80
  store i64 %2343, i64* %PC, align 8
  %2344 = load i64, i64* %148, align 1
  %2345 = inttoptr i64 %2342 to i64*
  store i64 %2344, i64* %2345, align 8
  %2346 = load i64, i64* %RBP, align 8
  %2347 = add i64 %2346, -196
  %2348 = load i64, i64* %PC, align 8
  %2349 = add i64 %2348, 10
  store i64 %2349, i64* %PC, align 8
  %2350 = inttoptr i64 %2347 to i32*
  store i32 0, i32* %2350, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_401c30

block_401591:                                     ; preds = %block_402242, %block_4014c0
  %2351 = phi i64 [ %2418, %block_402242 ], [ %.pre, %block_4014c0 ]
  %2352 = load i64, i64* %RBP, align 8
  %2353 = add i64 %2352, -188
  %2354 = add i64 %2351, 6
  store i64 %2354, i64* %PC, align 8
  %2355 = inttoptr i64 %2353 to i32*
  %2356 = load i32, i32* %2355, align 4
  %2357 = zext i32 %2356 to i64
  store i64 %2357, i64* %RAX, align 8, !tbaa !2450
  %2358 = add i64 %2352, -44
  %2359 = add i64 %2351, 9
  store i64 %2359, i64* %PC, align 8
  %2360 = inttoptr i64 %2358 to i32*
  %2361 = load i32, i32* %2360, align 4
  %2362 = sub i32 %2356, %2361
  %2363 = icmp ult i32 %2356, %2361
  %2364 = zext i1 %2363 to i8
  store i8 %2364, i8* %42, align 1, !tbaa !2428
  %2365 = and i32 %2362, 255
  %2366 = tail call i32 @llvm.ctpop.i32(i32 %2365) #10
  %2367 = trunc i32 %2366 to i8
  %2368 = and i8 %2367, 1
  %2369 = xor i8 %2368, 1
  store i8 %2369, i8* %49, align 1, !tbaa !2445
  %2370 = xor i32 %2361, %2356
  %2371 = xor i32 %2370, %2362
  %2372 = lshr i32 %2371, 4
  %2373 = trunc i32 %2372 to i8
  %2374 = and i8 %2373, 1
  store i8 %2374, i8* %55, align 1, !tbaa !2446
  %2375 = icmp eq i32 %2362, 0
  %2376 = zext i1 %2375 to i8
  store i8 %2376, i8* %58, align 1, !tbaa !2447
  %2377 = lshr i32 %2362, 31
  %2378 = trunc i32 %2377 to i8
  store i8 %2378, i8* %61, align 1, !tbaa !2448
  %2379 = lshr i32 %2356, 31
  %2380 = lshr i32 %2361, 31
  %2381 = xor i32 %2380, %2379
  %2382 = xor i32 %2377, %2379
  %2383 = add nuw nsw i32 %2382, %2381
  %2384 = icmp eq i32 %2383, 2
  %2385 = zext i1 %2384 to i8
  store i8 %2385, i8* %67, align 1, !tbaa !2449
  %2386 = icmp ne i8 %2378, 0
  %2387 = xor i1 %2386, %2384
  %.v15 = select i1 %2387, i64 15, i64 3274
  %2388 = add i64 %.v15, %2351
  store i64 %2388, i64* %PC, align 8, !tbaa !2450
  br i1 %2387, label %block_4015a0, label %block_40225b

block_402242:                                     ; preds = %block_4015aa
  %2389 = add i64 %2420, -188
  %2390 = add i64 %2456, 11
  store i64 %2390, i64* %PC, align 8
  %2391 = inttoptr i64 %2389 to i32*
  %2392 = load i32, i32* %2391, align 4
  %2393 = add i32 %2392, 1
  %2394 = zext i32 %2393 to i64
  store i64 %2394, i64* %RAX, align 8, !tbaa !2450
  %2395 = icmp eq i32 %2392, -1
  %2396 = icmp eq i32 %2393, 0
  %2397 = or i1 %2395, %2396
  %2398 = zext i1 %2397 to i8
  store i8 %2398, i8* %42, align 1, !tbaa !2428
  %2399 = and i32 %2393, 255
  %2400 = tail call i32 @llvm.ctpop.i32(i32 %2399) #10
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  store i8 %2403, i8* %49, align 1, !tbaa !2445
  %2404 = xor i32 %2393, %2392
  %2405 = lshr i32 %2404, 4
  %2406 = trunc i32 %2405 to i8
  %2407 = and i8 %2406, 1
  store i8 %2407, i8* %55, align 1, !tbaa !2446
  %2408 = zext i1 %2396 to i8
  store i8 %2408, i8* %58, align 1, !tbaa !2447
  %2409 = lshr i32 %2393, 31
  %2410 = trunc i32 %2409 to i8
  store i8 %2410, i8* %61, align 1, !tbaa !2448
  %2411 = lshr i32 %2392, 31
  %2412 = xor i32 %2409, %2411
  %2413 = add nuw nsw i32 %2412, %2409
  %2414 = icmp eq i32 %2413, 2
  %2415 = zext i1 %2414 to i8
  store i8 %2415, i8* %67, align 1, !tbaa !2449
  %2416 = add i64 %2456, 20
  store i64 %2416, i64* %PC, align 8
  store i32 %2393, i32* %2391, align 4
  %2417 = load i64, i64* %PC, align 8
  %2418 = add i64 %2417, -3269
  store i64 %2418, i64* %PC, align 8, !tbaa !2450
  br label %block_401591

block_4015aa:                                     ; preds = %block_4015a0, %block_401f62
  %2419 = phi i64 [ %.pre10, %block_4015a0 ], [ %4627, %block_401f62 ]
  %2420 = load i64, i64* %RBP, align 8
  %2421 = add i64 %2420, -192
  %2422 = add i64 %2419, 6
  store i64 %2422, i64* %PC, align 8
  %2423 = inttoptr i64 %2421 to i32*
  %2424 = load i32, i32* %2423, align 4
  %2425 = zext i32 %2424 to i64
  store i64 %2425, i64* %RAX, align 8, !tbaa !2450
  %2426 = add i64 %2420, -52
  %2427 = add i64 %2419, 9
  store i64 %2427, i64* %PC, align 8
  %2428 = inttoptr i64 %2426 to i32*
  %2429 = load i32, i32* %2428, align 4
  %2430 = sub i32 %2424, %2429
  %2431 = icmp ult i32 %2424, %2429
  %2432 = zext i1 %2431 to i8
  store i8 %2432, i8* %42, align 1, !tbaa !2428
  %2433 = and i32 %2430, 255
  %2434 = tail call i32 @llvm.ctpop.i32(i32 %2433) #10
  %2435 = trunc i32 %2434 to i8
  %2436 = and i8 %2435, 1
  %2437 = xor i8 %2436, 1
  store i8 %2437, i8* %49, align 1, !tbaa !2445
  %2438 = xor i32 %2429, %2424
  %2439 = xor i32 %2438, %2430
  %2440 = lshr i32 %2439, 4
  %2441 = trunc i32 %2440 to i8
  %2442 = and i8 %2441, 1
  store i8 %2442, i8* %55, align 1, !tbaa !2446
  %2443 = icmp eq i32 %2430, 0
  %2444 = zext i1 %2443 to i8
  store i8 %2444, i8* %58, align 1, !tbaa !2447
  %2445 = lshr i32 %2430, 31
  %2446 = trunc i32 %2445 to i8
  store i8 %2446, i8* %61, align 1, !tbaa !2448
  %2447 = lshr i32 %2424, 31
  %2448 = lshr i32 %2429, 31
  %2449 = xor i32 %2448, %2447
  %2450 = xor i32 %2445, %2447
  %2451 = add nuw nsw i32 %2450, %2449
  %2452 = icmp eq i32 %2451, 2
  %2453 = zext i1 %2452 to i8
  store i8 %2453, i8* %67, align 1, !tbaa !2449
  %2454 = icmp ne i8 %2446, 0
  %2455 = xor i1 %2454, %2452
  %.v = select i1 %2455, i64 15, i64 3224
  %2456 = add i64 %.v, %2419
  store i64 %2456, i64* %PC, align 8, !tbaa !2450
  br i1 %2455, label %block_4015b9, label %block_402242

block_4015c3:                                     ; preds = %block_4015d2, %block_4015b9
  %2457 = phi i64 [ %3638, %block_4015d2 ], [ %.pre11, %block_4015b9 ]
  %2458 = load i64, i64* %RBP, align 8
  %2459 = add i64 %2458, -196
  %2460 = add i64 %2457, 6
  store i64 %2460, i64* %PC, align 8
  %2461 = inttoptr i64 %2459 to i32*
  %2462 = load i32, i32* %2461, align 4
  %2463 = zext i32 %2462 to i64
  store i64 %2463, i64* %RAX, align 8, !tbaa !2450
  %2464 = add i64 %2458, -48
  %2465 = add i64 %2457, 9
  store i64 %2465, i64* %PC, align 8
  %2466 = inttoptr i64 %2464 to i32*
  %2467 = load i32, i32* %2466, align 4
  %2468 = sub i32 %2462, %2467
  %2469 = icmp ult i32 %2462, %2467
  %2470 = zext i1 %2469 to i8
  store i8 %2470, i8* %42, align 1, !tbaa !2428
  %2471 = and i32 %2468, 255
  %2472 = tail call i32 @llvm.ctpop.i32(i32 %2471) #10
  %2473 = trunc i32 %2472 to i8
  %2474 = and i8 %2473, 1
  %2475 = xor i8 %2474, 1
  store i8 %2475, i8* %49, align 1, !tbaa !2445
  %2476 = xor i32 %2467, %2462
  %2477 = xor i32 %2476, %2468
  %2478 = lshr i32 %2477, 4
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  store i8 %2480, i8* %55, align 1, !tbaa !2446
  %2481 = icmp eq i32 %2468, 0
  %2482 = zext i1 %2481 to i8
  store i8 %2482, i8* %58, align 1, !tbaa !2447
  %2483 = lshr i32 %2468, 31
  %2484 = trunc i32 %2483 to i8
  store i8 %2484, i8* %61, align 1, !tbaa !2448
  %2485 = lshr i32 %2462, 31
  %2486 = lshr i32 %2467, 31
  %2487 = xor i32 %2486, %2485
  %2488 = xor i32 %2483, %2485
  %2489 = add nuw nsw i32 %2488, %2487
  %2490 = icmp eq i32 %2489, 2
  %2491 = zext i1 %2490 to i8
  store i8 %2491, i8* %67, align 1, !tbaa !2449
  %2492 = icmp ne i8 %2484, 0
  %2493 = xor i1 %2492, %2490
  %.v13 = select i1 %2493, i64 15, i64 864
  %2494 = add i64 %.v13, %2457
  %2495 = add i64 %2458, -120
  %2496 = add i64 %2494, 4
  store i64 %2496, i64* %PC, align 8
  %2497 = inttoptr i64 %2495 to i64*
  %2498 = load i64, i64* %2497, align 8
  store i64 %2498, i64* %RAX, align 8, !tbaa !2450
  %2499 = add i64 %2458, -188
  %2500 = add i64 %2494, 11
  store i64 %2500, i64* %PC, align 8
  %2501 = inttoptr i64 %2499 to i32*
  %2502 = load i32, i32* %2501, align 4
  %2503 = sext i32 %2502 to i64
  %2504 = mul nsw i64 %2503, 33800
  store i64 %2504, i64* %RCX, align 8, !tbaa !2450
  %2505 = lshr i64 %2504, 63
  %2506 = add i64 %2504, %2498
  store i64 %2506, i64* %RAX, align 8, !tbaa !2450
  %2507 = icmp ult i64 %2506, %2498
  %2508 = icmp ult i64 %2506, %2504
  %2509 = or i1 %2507, %2508
  %2510 = zext i1 %2509 to i8
  store i8 %2510, i8* %42, align 1, !tbaa !2428
  %2511 = trunc i64 %2506 to i32
  %2512 = and i32 %2511, 255
  %2513 = tail call i32 @llvm.ctpop.i32(i32 %2512) #10
  %2514 = trunc i32 %2513 to i8
  %2515 = and i8 %2514, 1
  %2516 = xor i8 %2515, 1
  store i8 %2516, i8* %49, align 1, !tbaa !2445
  %2517 = xor i64 %2504, %2498
  %2518 = xor i64 %2517, %2506
  %2519 = lshr i64 %2518, 4
  %2520 = trunc i64 %2519 to i8
  %2521 = and i8 %2520, 1
  store i8 %2521, i8* %55, align 1, !tbaa !2446
  %2522 = icmp eq i64 %2506, 0
  %2523 = zext i1 %2522 to i8
  store i8 %2523, i8* %58, align 1, !tbaa !2447
  %2524 = lshr i64 %2506, 63
  %2525 = trunc i64 %2524 to i8
  store i8 %2525, i8* %61, align 1, !tbaa !2448
  %2526 = lshr i64 %2498, 63
  %2527 = xor i64 %2524, %2526
  %2528 = xor i64 %2524, %2505
  %2529 = add nuw nsw i64 %2527, %2528
  %2530 = icmp eq i64 %2529, 2
  %2531 = zext i1 %2530 to i8
  store i8 %2531, i8* %67, align 1, !tbaa !2449
  %2532 = add i64 %2458, -192
  %2533 = add i64 %2494, 28
  store i64 %2533, i64* %PC, align 8
  %2534 = inttoptr i64 %2532 to i32*
  %2535 = load i32, i32* %2534, align 4
  %2536 = sext i32 %2535 to i64
  %2537 = mul nsw i64 %2536, 520
  store i64 %2537, i64* %RCX, align 8, !tbaa !2450
  %2538 = lshr i64 %2537, 63
  %2539 = add i64 %2494, 38
  store i64 %2539, i64* %PC, align 8
  %2540 = add i64 %2537, %2506
  store i64 %2540, i64* %RAX, align 8, !tbaa !2450
  %2541 = icmp ult i64 %2540, %2506
  %2542 = icmp ult i64 %2540, %2537
  %2543 = or i1 %2541, %2542
  %2544 = zext i1 %2543 to i8
  store i8 %2544, i8* %42, align 1, !tbaa !2428
  %2545 = trunc i64 %2540 to i32
  %2546 = and i32 %2545, 255
  %2547 = tail call i32 @llvm.ctpop.i32(i32 %2546) #10
  %2548 = trunc i32 %2547 to i8
  %2549 = and i8 %2548, 1
  %2550 = xor i8 %2549, 1
  store i8 %2550, i8* %49, align 1, !tbaa !2445
  %2551 = xor i64 %2537, %2506
  %2552 = xor i64 %2551, %2540
  %2553 = lshr i64 %2552, 4
  %2554 = trunc i64 %2553 to i8
  %2555 = and i8 %2554, 1
  store i8 %2555, i8* %55, align 1, !tbaa !2446
  %2556 = icmp eq i64 %2540, 0
  %2557 = zext i1 %2556 to i8
  store i8 %2557, i8* %58, align 1, !tbaa !2447
  %2558 = lshr i64 %2540, 63
  %2559 = trunc i64 %2558 to i8
  store i8 %2559, i8* %61, align 1, !tbaa !2448
  %2560 = xor i64 %2558, %2524
  %2561 = xor i64 %2558, %2538
  %2562 = add nuw nsw i64 %2560, %2561
  %2563 = icmp eq i64 %2562, 2
  %2564 = zext i1 %2563 to i8
  store i8 %2564, i8* %67, align 1, !tbaa !2449
  br i1 %2493, label %block_4015d2, label %block_401923

block_4015d2:                                     ; preds = %block_4015c3
  %2565 = add i64 %2494, 45
  store i64 %2565, i64* %PC, align 8
  %2566 = load i32, i32* %2461, align 4
  %2567 = sext i32 %2566 to i64
  store i64 %2567, i64* %RCX, align 8, !tbaa !2450
  %2568 = shl nsw i64 %2567, 3
  %2569 = add i64 %2568, %2540
  %2570 = add i64 %2494, 50
  store i64 %2570, i64* %PC, align 8
  %2571 = inttoptr i64 %2569 to i64*
  %2572 = load i64, i64* %2571, align 8
  store i64 %2572, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2573 = add i64 %2494, 54
  store i64 %2573, i64* %PC, align 8
  %2574 = load i64, i64* %2497, align 8
  store i64 %2574, i64* %RAX, align 8, !tbaa !2450
  %2575 = add i64 %2494, 61
  store i64 %2575, i64* %PC, align 8
  %2576 = load i32, i32* %2501, align 4
  %2577 = sext i32 %2576 to i64
  %2578 = mul nsw i64 %2577, 33800
  store i64 %2578, i64* %RCX, align 8, !tbaa !2450
  %2579 = lshr i64 %2578, 63
  %2580 = add i64 %2578, %2574
  store i64 %2580, i64* %RAX, align 8, !tbaa !2450
  %2581 = icmp ult i64 %2580, %2574
  %2582 = icmp ult i64 %2580, %2578
  %2583 = or i1 %2581, %2582
  %2584 = zext i1 %2583 to i8
  store i8 %2584, i8* %42, align 1, !tbaa !2428
  %2585 = trunc i64 %2580 to i32
  %2586 = and i32 %2585, 255
  %2587 = tail call i32 @llvm.ctpop.i32(i32 %2586) #10
  %2588 = trunc i32 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = xor i8 %2589, 1
  store i8 %2590, i8* %49, align 1, !tbaa !2445
  %2591 = xor i64 %2578, %2574
  %2592 = xor i64 %2591, %2580
  %2593 = lshr i64 %2592, 4
  %2594 = trunc i64 %2593 to i8
  %2595 = and i8 %2594, 1
  store i8 %2595, i8* %55, align 1, !tbaa !2446
  %2596 = icmp eq i64 %2580, 0
  %2597 = zext i1 %2596 to i8
  store i8 %2597, i8* %58, align 1, !tbaa !2447
  %2598 = lshr i64 %2580, 63
  %2599 = trunc i64 %2598 to i8
  store i8 %2599, i8* %61, align 1, !tbaa !2448
  %2600 = lshr i64 %2574, 63
  %2601 = xor i64 %2598, %2600
  %2602 = xor i64 %2598, %2579
  %2603 = add nuw nsw i64 %2601, %2602
  %2604 = icmp eq i64 %2603, 2
  %2605 = zext i1 %2604 to i8
  store i8 %2605, i8* %67, align 1, !tbaa !2449
  %2606 = add i64 %2494, 77
  store i64 %2606, i64* %PC, align 8
  %2607 = load i32, i32* %2534, align 4
  %2608 = add i32 %2607, 1
  %2609 = zext i32 %2608 to i64
  store i64 %2609, i64* %RDX, align 8, !tbaa !2450
  %2610 = sext i32 %2608 to i64
  %2611 = mul nsw i64 %2610, 520
  store i64 %2611, i64* %RCX, align 8, !tbaa !2450
  %2612 = lshr i64 %2611, 63
  %2613 = add i64 %2611, %2580
  store i64 %2613, i64* %RAX, align 8, !tbaa !2450
  %2614 = icmp ult i64 %2613, %2580
  %2615 = icmp ult i64 %2613, %2611
  %2616 = or i1 %2614, %2615
  %2617 = zext i1 %2616 to i8
  store i8 %2617, i8* %42, align 1, !tbaa !2428
  %2618 = trunc i64 %2613 to i32
  %2619 = and i32 %2618, 255
  %2620 = tail call i32 @llvm.ctpop.i32(i32 %2619) #10
  %2621 = trunc i32 %2620 to i8
  %2622 = and i8 %2621, 1
  %2623 = xor i8 %2622, 1
  store i8 %2623, i8* %49, align 1, !tbaa !2445
  %2624 = xor i64 %2611, %2580
  %2625 = xor i64 %2624, %2613
  %2626 = lshr i64 %2625, 4
  %2627 = trunc i64 %2626 to i8
  %2628 = and i8 %2627, 1
  store i8 %2628, i8* %55, align 1, !tbaa !2446
  %2629 = icmp eq i64 %2613, 0
  %2630 = zext i1 %2629 to i8
  store i8 %2630, i8* %58, align 1, !tbaa !2447
  %2631 = lshr i64 %2613, 63
  %2632 = trunc i64 %2631 to i8
  store i8 %2632, i8* %61, align 1, !tbaa !2448
  %2633 = xor i64 %2631, %2598
  %2634 = xor i64 %2631, %2612
  %2635 = add nuw nsw i64 %2633, %2634
  %2636 = icmp eq i64 %2635, 2
  %2637 = zext i1 %2636 to i8
  store i8 %2637, i8* %67, align 1, !tbaa !2449
  %2638 = load i64, i64* %RBP, align 8
  %2639 = add i64 %2638, -196
  %2640 = add i64 %2494, 100
  store i64 %2640, i64* %PC, align 8
  %2641 = inttoptr i64 %2639 to i32*
  %2642 = load i32, i32* %2641, align 4
  %2643 = sext i32 %2642 to i64
  store i64 %2643, i64* %RCX, align 8, !tbaa !2450
  %2644 = shl nsw i64 %2643, 3
  %2645 = add i64 %2644, %2613
  %2646 = add i64 %2494, 105
  store i64 %2646, i64* %PC, align 8
  %2647 = load double, double* %257, align 1
  %2648 = inttoptr i64 %2645 to double*
  %2649 = load double, double* %2648, align 8
  %2650 = fsub double %2647, %2649
  store double %2650, double* %257, align 1, !tbaa !2453
  %2651 = add i64 %2638, -128
  %2652 = add i64 %2494, 109
  store i64 %2652, i64* %PC, align 8
  %2653 = inttoptr i64 %2651 to i64*
  %2654 = load i64, i64* %2653, align 8
  store i64 %2654, i64* %RAX, align 8, !tbaa !2450
  %2655 = add i64 %2638, -188
  %2656 = add i64 %2494, 116
  store i64 %2656, i64* %PC, align 8
  %2657 = inttoptr i64 %2655 to i32*
  %2658 = load i32, i32* %2657, align 4
  %2659 = sext i32 %2658 to i64
  %2660 = mul nsw i64 %2659, 33800
  store i64 %2660, i64* %RCX, align 8, !tbaa !2450
  %2661 = lshr i64 %2660, 63
  %2662 = add i64 %2660, %2654
  store i64 %2662, i64* %RAX, align 8, !tbaa !2450
  %2663 = icmp ult i64 %2662, %2654
  %2664 = icmp ult i64 %2662, %2660
  %2665 = or i1 %2663, %2664
  %2666 = zext i1 %2665 to i8
  store i8 %2666, i8* %42, align 1, !tbaa !2428
  %2667 = trunc i64 %2662 to i32
  %2668 = and i32 %2667, 255
  %2669 = tail call i32 @llvm.ctpop.i32(i32 %2668) #10
  %2670 = trunc i32 %2669 to i8
  %2671 = and i8 %2670, 1
  %2672 = xor i8 %2671, 1
  store i8 %2672, i8* %49, align 1, !tbaa !2445
  %2673 = xor i64 %2660, %2654
  %2674 = xor i64 %2673, %2662
  %2675 = lshr i64 %2674, 4
  %2676 = trunc i64 %2675 to i8
  %2677 = and i8 %2676, 1
  store i8 %2677, i8* %55, align 1, !tbaa !2446
  %2678 = icmp eq i64 %2662, 0
  %2679 = zext i1 %2678 to i8
  store i8 %2679, i8* %58, align 1, !tbaa !2447
  %2680 = lshr i64 %2662, 63
  %2681 = trunc i64 %2680 to i8
  store i8 %2681, i8* %61, align 1, !tbaa !2448
  %2682 = lshr i64 %2654, 63
  %2683 = xor i64 %2680, %2682
  %2684 = xor i64 %2680, %2661
  %2685 = add nuw nsw i64 %2683, %2684
  %2686 = icmp eq i64 %2685, 2
  %2687 = zext i1 %2686 to i8
  store i8 %2687, i8* %67, align 1, !tbaa !2449
  %2688 = add i64 %2638, -192
  %2689 = add i64 %2494, 133
  store i64 %2689, i64* %PC, align 8
  %2690 = inttoptr i64 %2688 to i32*
  %2691 = load i32, i32* %2690, align 4
  %2692 = sext i32 %2691 to i64
  %2693 = mul nsw i64 %2692, 520
  store i64 %2693, i64* %RCX, align 8, !tbaa !2450
  %2694 = lshr i64 %2693, 63
  %2695 = add i64 %2693, %2662
  store i64 %2695, i64* %RAX, align 8, !tbaa !2450
  %2696 = icmp ult i64 %2695, %2662
  %2697 = icmp ult i64 %2695, %2693
  %2698 = or i1 %2696, %2697
  %2699 = zext i1 %2698 to i8
  store i8 %2699, i8* %42, align 1, !tbaa !2428
  %2700 = trunc i64 %2695 to i32
  %2701 = and i32 %2700, 255
  %2702 = tail call i32 @llvm.ctpop.i32(i32 %2701) #10
  %2703 = trunc i32 %2702 to i8
  %2704 = and i8 %2703, 1
  %2705 = xor i8 %2704, 1
  store i8 %2705, i8* %49, align 1, !tbaa !2445
  %2706 = xor i64 %2693, %2662
  %2707 = xor i64 %2706, %2695
  %2708 = lshr i64 %2707, 4
  %2709 = trunc i64 %2708 to i8
  %2710 = and i8 %2709, 1
  store i8 %2710, i8* %55, align 1, !tbaa !2446
  %2711 = icmp eq i64 %2695, 0
  %2712 = zext i1 %2711 to i8
  store i8 %2712, i8* %58, align 1, !tbaa !2447
  %2713 = lshr i64 %2695, 63
  %2714 = trunc i64 %2713 to i8
  store i8 %2714, i8* %61, align 1, !tbaa !2448
  %2715 = xor i64 %2713, %2680
  %2716 = xor i64 %2713, %2694
  %2717 = add nuw nsw i64 %2715, %2716
  %2718 = icmp eq i64 %2717, 2
  %2719 = zext i1 %2718 to i8
  store i8 %2719, i8* %67, align 1, !tbaa !2449
  %2720 = load i64, i64* %RBP, align 8
  %2721 = add i64 %2720, -196
  %2722 = add i64 %2494, 149
  store i64 %2722, i64* %PC, align 8
  %2723 = inttoptr i64 %2721 to i32*
  %2724 = load i32, i32* %2723, align 4
  %2725 = add i32 %2724, 1
  %2726 = zext i32 %2725 to i64
  store i64 %2726, i64* %RDX, align 8, !tbaa !2450
  %2727 = icmp eq i32 %2724, -1
  %2728 = icmp eq i32 %2725, 0
  %2729 = or i1 %2727, %2728
  %2730 = zext i1 %2729 to i8
  store i8 %2730, i8* %42, align 1, !tbaa !2428
  %2731 = and i32 %2725, 255
  %2732 = tail call i32 @llvm.ctpop.i32(i32 %2731) #10
  %2733 = trunc i32 %2732 to i8
  %2734 = and i8 %2733, 1
  %2735 = xor i8 %2734, 1
  store i8 %2735, i8* %49, align 1, !tbaa !2445
  %2736 = xor i32 %2725, %2724
  %2737 = lshr i32 %2736, 4
  %2738 = trunc i32 %2737 to i8
  %2739 = and i8 %2738, 1
  store i8 %2739, i8* %55, align 1, !tbaa !2446
  %2740 = zext i1 %2728 to i8
  store i8 %2740, i8* %58, align 1, !tbaa !2447
  %2741 = lshr i32 %2725, 31
  %2742 = trunc i32 %2741 to i8
  store i8 %2742, i8* %61, align 1, !tbaa !2448
  %2743 = lshr i32 %2724, 31
  %2744 = xor i32 %2741, %2743
  %2745 = add nuw nsw i32 %2744, %2741
  %2746 = icmp eq i32 %2745, 2
  %2747 = zext i1 %2746 to i8
  store i8 %2747, i8* %67, align 1, !tbaa !2449
  %2748 = sext i32 %2725 to i64
  store i64 %2748, i64* %RCX, align 8, !tbaa !2450
  %2749 = shl nsw i64 %2748, 3
  %2750 = add i64 %2749, %2695
  %2751 = add i64 %2494, 160
  store i64 %2751, i64* %PC, align 8
  %2752 = load double, double* %257, align 1
  %2753 = inttoptr i64 %2750 to double*
  %2754 = load double, double* %2753, align 8
  %2755 = fadd double %2752, %2754
  store double %2755, double* %257, align 1, !tbaa !2453
  %2756 = add i64 %2720, -128
  %2757 = add i64 %2494, 164
  store i64 %2757, i64* %PC, align 8
  %2758 = inttoptr i64 %2756 to i64*
  %2759 = load i64, i64* %2758, align 8
  store i64 %2759, i64* %RAX, align 8, !tbaa !2450
  %2760 = add i64 %2720, -188
  %2761 = add i64 %2494, 171
  store i64 %2761, i64* %PC, align 8
  %2762 = inttoptr i64 %2760 to i32*
  %2763 = load i32, i32* %2762, align 4
  %2764 = sext i32 %2763 to i64
  %2765 = mul nsw i64 %2764, 33800
  store i64 %2765, i64* %RCX, align 8, !tbaa !2450
  %2766 = lshr i64 %2765, 63
  %2767 = add i64 %2765, %2759
  store i64 %2767, i64* %RAX, align 8, !tbaa !2450
  %2768 = icmp ult i64 %2767, %2759
  %2769 = icmp ult i64 %2767, %2765
  %2770 = or i1 %2768, %2769
  %2771 = zext i1 %2770 to i8
  store i8 %2771, i8* %42, align 1, !tbaa !2428
  %2772 = trunc i64 %2767 to i32
  %2773 = and i32 %2772, 255
  %2774 = tail call i32 @llvm.ctpop.i32(i32 %2773) #10
  %2775 = trunc i32 %2774 to i8
  %2776 = and i8 %2775, 1
  %2777 = xor i8 %2776, 1
  store i8 %2777, i8* %49, align 1, !tbaa !2445
  %2778 = xor i64 %2765, %2759
  %2779 = xor i64 %2778, %2767
  %2780 = lshr i64 %2779, 4
  %2781 = trunc i64 %2780 to i8
  %2782 = and i8 %2781, 1
  store i8 %2782, i8* %55, align 1, !tbaa !2446
  %2783 = icmp eq i64 %2767, 0
  %2784 = zext i1 %2783 to i8
  store i8 %2784, i8* %58, align 1, !tbaa !2447
  %2785 = lshr i64 %2767, 63
  %2786 = trunc i64 %2785 to i8
  store i8 %2786, i8* %61, align 1, !tbaa !2448
  %2787 = lshr i64 %2759, 63
  %2788 = xor i64 %2785, %2787
  %2789 = xor i64 %2785, %2766
  %2790 = add nuw nsw i64 %2788, %2789
  %2791 = icmp eq i64 %2790, 2
  %2792 = zext i1 %2791 to i8
  store i8 %2792, i8* %67, align 1, !tbaa !2449
  %2793 = add i64 %2720, -192
  %2794 = add i64 %2494, 188
  store i64 %2794, i64* %PC, align 8
  %2795 = inttoptr i64 %2793 to i32*
  %2796 = load i32, i32* %2795, align 4
  %2797 = sext i32 %2796 to i64
  %2798 = mul nsw i64 %2797, 520
  store i64 %2798, i64* %RCX, align 8, !tbaa !2450
  %2799 = lshr i64 %2798, 63
  %2800 = add i64 %2798, %2767
  store i64 %2800, i64* %RAX, align 8, !tbaa !2450
  %2801 = icmp ult i64 %2800, %2767
  %2802 = icmp ult i64 %2800, %2798
  %2803 = or i1 %2801, %2802
  %2804 = zext i1 %2803 to i8
  store i8 %2804, i8* %42, align 1, !tbaa !2428
  %2805 = trunc i64 %2800 to i32
  %2806 = and i32 %2805, 255
  %2807 = tail call i32 @llvm.ctpop.i32(i32 %2806) #10
  %2808 = trunc i32 %2807 to i8
  %2809 = and i8 %2808, 1
  %2810 = xor i8 %2809, 1
  store i8 %2810, i8* %49, align 1, !tbaa !2445
  %2811 = xor i64 %2798, %2767
  %2812 = xor i64 %2811, %2800
  %2813 = lshr i64 %2812, 4
  %2814 = trunc i64 %2813 to i8
  %2815 = and i8 %2814, 1
  store i8 %2815, i8* %55, align 1, !tbaa !2446
  %2816 = icmp eq i64 %2800, 0
  %2817 = zext i1 %2816 to i8
  store i8 %2817, i8* %58, align 1, !tbaa !2447
  %2818 = lshr i64 %2800, 63
  %2819 = trunc i64 %2818 to i8
  store i8 %2819, i8* %61, align 1, !tbaa !2448
  %2820 = xor i64 %2818, %2785
  %2821 = xor i64 %2818, %2799
  %2822 = add nuw nsw i64 %2820, %2821
  %2823 = icmp eq i64 %2822, 2
  %2824 = zext i1 %2823 to i8
  store i8 %2824, i8* %67, align 1, !tbaa !2449
  %2825 = add i64 %2494, 205
  store i64 %2825, i64* %PC, align 8
  %2826 = load i32, i32* %2723, align 4
  %2827 = sext i32 %2826 to i64
  store i64 %2827, i64* %RCX, align 8, !tbaa !2450
  %2828 = shl nsw i64 %2827, 3
  %2829 = add i64 %2828, %2800
  %2830 = add i64 %2494, 210
  store i64 %2830, i64* %PC, align 8
  %2831 = inttoptr i64 %2829 to double*
  %2832 = load double, double* %2831, align 8
  %2833 = fsub double %2755, %2832
  store double %2833, double* %257, align 1, !tbaa !2453
  %2834 = add i64 %2720, -96
  %2835 = add i64 %2494, 214
  store i64 %2835, i64* %PC, align 8
  %2836 = inttoptr i64 %2834 to i64*
  %2837 = load i64, i64* %2836, align 8
  store i64 %2837, i64* %RAX, align 8, !tbaa !2450
  %2838 = add i64 %2494, 221
  store i64 %2838, i64* %PC, align 8
  %2839 = load i32, i32* %2762, align 4
  %2840 = sext i32 %2839 to i64
  %2841 = mul nsw i64 %2840, 520
  store i64 %2841, i64* %RCX, align 8, !tbaa !2450
  %2842 = lshr i64 %2841, 63
  %2843 = add i64 %2841, %2837
  store i64 %2843, i64* %RAX, align 8, !tbaa !2450
  %2844 = icmp ult i64 %2843, %2837
  %2845 = icmp ult i64 %2843, %2841
  %2846 = or i1 %2844, %2845
  %2847 = zext i1 %2846 to i8
  store i8 %2847, i8* %42, align 1, !tbaa !2428
  %2848 = trunc i64 %2843 to i32
  %2849 = and i32 %2848, 255
  %2850 = tail call i32 @llvm.ctpop.i32(i32 %2849) #10
  %2851 = trunc i32 %2850 to i8
  %2852 = and i8 %2851, 1
  %2853 = xor i8 %2852, 1
  store i8 %2853, i8* %49, align 1, !tbaa !2445
  %2854 = xor i64 %2841, %2837
  %2855 = xor i64 %2854, %2843
  %2856 = lshr i64 %2855, 4
  %2857 = trunc i64 %2856 to i8
  %2858 = and i8 %2857, 1
  store i8 %2858, i8* %55, align 1, !tbaa !2446
  %2859 = icmp eq i64 %2843, 0
  %2860 = zext i1 %2859 to i8
  store i8 %2860, i8* %58, align 1, !tbaa !2447
  %2861 = lshr i64 %2843, 63
  %2862 = trunc i64 %2861 to i8
  store i8 %2862, i8* %61, align 1, !tbaa !2448
  %2863 = lshr i64 %2837, 63
  %2864 = xor i64 %2861, %2863
  %2865 = xor i64 %2861, %2842
  %2866 = add nuw nsw i64 %2864, %2865
  %2867 = icmp eq i64 %2866, 2
  %2868 = zext i1 %2867 to i8
  store i8 %2868, i8* %67, align 1, !tbaa !2449
  %2869 = load i64, i64* %RBP, align 8
  %2870 = add i64 %2869, -192
  %2871 = add i64 %2494, 238
  store i64 %2871, i64* %PC, align 8
  %2872 = inttoptr i64 %2870 to i32*
  %2873 = load i32, i32* %2872, align 4
  %2874 = sext i32 %2873 to i64
  store i64 %2874, i64* %RCX, align 8, !tbaa !2450
  %2875 = shl nsw i64 %2874, 3
  %2876 = add i64 %2875, %2843
  %2877 = add i64 %2494, 243
  store i64 %2877, i64* %PC, align 8
  %2878 = inttoptr i64 %2876 to double*
  store double %2833, double* %2878, align 8
  %2879 = load i64, i64* %RBP, align 8
  %2880 = add i64 %2879, -176
  %2881 = load i64, i64* %PC, align 8
  %2882 = add i64 %2881, 7
  store i64 %2882, i64* %PC, align 8
  %2883 = inttoptr i64 %2880 to i64*
  %2884 = load i64, i64* %2883, align 8
  store i64 %2884, i64* %RAX, align 8, !tbaa !2450
  %2885 = add i64 %2879, -192
  %2886 = add i64 %2881, 14
  store i64 %2886, i64* %PC, align 8
  %2887 = inttoptr i64 %2885 to i32*
  %2888 = load i32, i32* %2887, align 4
  %2889 = sext i32 %2888 to i64
  store i64 %2889, i64* %RCX, align 8, !tbaa !2450
  %2890 = shl nsw i64 %2889, 3
  %2891 = add i64 %2890, %2884
  %2892 = add i64 %2881, 19
  store i64 %2892, i64* %PC, align 8
  %2893 = inttoptr i64 %2891 to i64*
  %2894 = load i64, i64* %2893, align 8
  store i64 %2894, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %2895 = add i64 %2879, -184
  %2896 = add i64 %2881, 26
  store i64 %2896, i64* %PC, align 8
  %2897 = inttoptr i64 %2895 to i64*
  %2898 = load i64, i64* %2897, align 8
  store i64 %2898, i64* %RAX, align 8, !tbaa !2450
  %2899 = add i64 %2881, 33
  store i64 %2899, i64* %PC, align 8
  %2900 = load i32, i32* %2887, align 4
  %2901 = sext i32 %2900 to i64
  store i64 %2901, i64* %RCX, align 8, !tbaa !2450
  %2902 = shl nsw i64 %2901, 3
  %2903 = add i64 %2902, %2898
  %2904 = add i64 %2881, 38
  store i64 %2904, i64* %PC, align 8
  %2905 = bitcast i64 %2894 to double
  %2906 = inttoptr i64 %2903 to double*
  %2907 = load double, double* %2906, align 8
  %2908 = fdiv double %2905, %2907
  store double %2908, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %2909 = add i64 %2879, -112
  %2910 = add i64 %2881, 42
  store i64 %2910, i64* %PC, align 8
  %2911 = inttoptr i64 %2909 to i64*
  %2912 = load i64, i64* %2911, align 8
  store i64 %2912, i64* %RAX, align 8, !tbaa !2450
  %2913 = add i64 %2879, -188
  %2914 = add i64 %2881, 49
  store i64 %2914, i64* %PC, align 8
  %2915 = inttoptr i64 %2913 to i32*
  %2916 = load i32, i32* %2915, align 4
  %2917 = sext i32 %2916 to i64
  %2918 = mul nsw i64 %2917, 33800
  store i64 %2918, i64* %RCX, align 8, !tbaa !2450
  %2919 = lshr i64 %2918, 63
  %2920 = add i64 %2918, %2912
  store i64 %2920, i64* %RAX, align 8, !tbaa !2450
  %2921 = icmp ult i64 %2920, %2912
  %2922 = icmp ult i64 %2920, %2918
  %2923 = or i1 %2921, %2922
  %2924 = zext i1 %2923 to i8
  store i8 %2924, i8* %42, align 1, !tbaa !2428
  %2925 = trunc i64 %2920 to i32
  %2926 = and i32 %2925, 255
  %2927 = tail call i32 @llvm.ctpop.i32(i32 %2926) #10
  %2928 = trunc i32 %2927 to i8
  %2929 = and i8 %2928, 1
  %2930 = xor i8 %2929, 1
  store i8 %2930, i8* %49, align 1, !tbaa !2445
  %2931 = xor i64 %2918, %2912
  %2932 = xor i64 %2931, %2920
  %2933 = lshr i64 %2932, 4
  %2934 = trunc i64 %2933 to i8
  %2935 = and i8 %2934, 1
  store i8 %2935, i8* %55, align 1, !tbaa !2446
  %2936 = icmp eq i64 %2920, 0
  %2937 = zext i1 %2936 to i8
  store i8 %2937, i8* %58, align 1, !tbaa !2447
  %2938 = lshr i64 %2920, 63
  %2939 = trunc i64 %2938 to i8
  store i8 %2939, i8* %61, align 1, !tbaa !2448
  %2940 = lshr i64 %2912, 63
  %2941 = xor i64 %2938, %2940
  %2942 = xor i64 %2938, %2919
  %2943 = add nuw nsw i64 %2941, %2942
  %2944 = icmp eq i64 %2943, 2
  %2945 = zext i1 %2944 to i8
  store i8 %2945, i8* %67, align 1, !tbaa !2449
  %2946 = add i64 %2881, 66
  store i64 %2946, i64* %PC, align 8
  %2947 = load i32, i32* %2887, align 4
  %2948 = sext i32 %2947 to i64
  %2949 = mul nsw i64 %2948, 520
  store i64 %2949, i64* %RCX, align 8, !tbaa !2450
  %2950 = lshr i64 %2949, 63
  %2951 = add i64 %2949, %2920
  store i64 %2951, i64* %RAX, align 8, !tbaa !2450
  %2952 = icmp ult i64 %2951, %2920
  %2953 = icmp ult i64 %2951, %2949
  %2954 = or i1 %2952, %2953
  %2955 = zext i1 %2954 to i8
  store i8 %2955, i8* %42, align 1, !tbaa !2428
  %2956 = trunc i64 %2951 to i32
  %2957 = and i32 %2956, 255
  %2958 = tail call i32 @llvm.ctpop.i32(i32 %2957) #10
  %2959 = trunc i32 %2958 to i8
  %2960 = and i8 %2959, 1
  %2961 = xor i8 %2960, 1
  store i8 %2961, i8* %49, align 1, !tbaa !2445
  %2962 = xor i64 %2949, %2920
  %2963 = xor i64 %2962, %2951
  %2964 = lshr i64 %2963, 4
  %2965 = trunc i64 %2964 to i8
  %2966 = and i8 %2965, 1
  store i8 %2966, i8* %55, align 1, !tbaa !2446
  %2967 = icmp eq i64 %2951, 0
  %2968 = zext i1 %2967 to i8
  store i8 %2968, i8* %58, align 1, !tbaa !2447
  %2969 = lshr i64 %2951, 63
  %2970 = trunc i64 %2969 to i8
  store i8 %2970, i8* %61, align 1, !tbaa !2448
  %2971 = xor i64 %2969, %2938
  %2972 = xor i64 %2969, %2950
  %2973 = add nuw nsw i64 %2971, %2972
  %2974 = icmp eq i64 %2973, 2
  %2975 = zext i1 %2974 to i8
  store i8 %2975, i8* %67, align 1, !tbaa !2449
  %2976 = add i64 %2879, -196
  %2977 = add i64 %2881, 83
  store i64 %2977, i64* %PC, align 8
  %2978 = inttoptr i64 %2976 to i32*
  %2979 = load i32, i32* %2978, align 4
  %2980 = sext i32 %2979 to i64
  store i64 %2980, i64* %RCX, align 8, !tbaa !2450
  %2981 = shl nsw i64 %2980, 3
  %2982 = add i64 %2981, %2951
  %2983 = add i64 %2881, 88
  store i64 %2983, i64* %PC, align 8
  %2984 = load double, double* %257, align 1
  %2985 = inttoptr i64 %2982 to double*
  %2986 = load double, double* %2985, align 8
  %2987 = fmul double %2984, %2986
  store double %2987, double* %257, align 1, !tbaa !2453
  %2988 = add i64 %2879, -72
  %2989 = add i64 %2881, 93
  store i64 %2989, i64* %PC, align 8
  %2990 = inttoptr i64 %2988 to i64*
  %2991 = load i64, i64* %2990, align 8
  store i64 %2991, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %2992 = add i64 %2881, 100
  store i64 %2992, i64* %PC, align 8
  %2993 = load i64, i64* %2897, align 8
  store i64 %2993, i64* %RAX, align 8, !tbaa !2450
  %2994 = add i64 %2881, 107
  store i64 %2994, i64* %PC, align 8
  %2995 = load i32, i32* %2887, align 4
  %2996 = sext i32 %2995 to i64
  store i64 %2996, i64* %RCX, align 8, !tbaa !2450
  %2997 = shl nsw i64 %2996, 3
  %2998 = add i64 %2997, %2993
  %2999 = add i64 %2881, 112
  store i64 %2999, i64* %PC, align 8
  %3000 = bitcast i64 %2991 to double
  %3001 = inttoptr i64 %2998 to double*
  %3002 = load double, double* %3001, align 8
  %3003 = fdiv double %3000, %3002
  store double %3003, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3004 = load i64, i64* %RBP, align 8
  %3005 = add i64 %3004, -96
  %3006 = add i64 %2881, 116
  store i64 %3006, i64* %PC, align 8
  %3007 = inttoptr i64 %3005 to i64*
  %3008 = load i64, i64* %3007, align 8
  store i64 %3008, i64* %RAX, align 8, !tbaa !2450
  %3009 = add i64 %3004, -188
  %3010 = add i64 %2881, 123
  store i64 %3010, i64* %PC, align 8
  %3011 = inttoptr i64 %3009 to i32*
  %3012 = load i32, i32* %3011, align 4
  %3013 = sext i32 %3012 to i64
  %3014 = mul nsw i64 %3013, 520
  store i64 %3014, i64* %RCX, align 8, !tbaa !2450
  %3015 = lshr i64 %3014, 63
  %3016 = add i64 %3014, %3008
  store i64 %3016, i64* %RAX, align 8, !tbaa !2450
  %3017 = icmp ult i64 %3016, %3008
  %3018 = icmp ult i64 %3016, %3014
  %3019 = or i1 %3017, %3018
  %3020 = zext i1 %3019 to i8
  store i8 %3020, i8* %42, align 1, !tbaa !2428
  %3021 = trunc i64 %3016 to i32
  %3022 = and i32 %3021, 255
  %3023 = tail call i32 @llvm.ctpop.i32(i32 %3022) #10
  %3024 = trunc i32 %3023 to i8
  %3025 = and i8 %3024, 1
  %3026 = xor i8 %3025, 1
  store i8 %3026, i8* %49, align 1, !tbaa !2445
  %3027 = xor i64 %3014, %3008
  %3028 = xor i64 %3027, %3016
  %3029 = lshr i64 %3028, 4
  %3030 = trunc i64 %3029 to i8
  %3031 = and i8 %3030, 1
  store i8 %3031, i8* %55, align 1, !tbaa !2446
  %3032 = icmp eq i64 %3016, 0
  %3033 = zext i1 %3032 to i8
  store i8 %3033, i8* %58, align 1, !tbaa !2447
  %3034 = lshr i64 %3016, 63
  %3035 = trunc i64 %3034 to i8
  store i8 %3035, i8* %61, align 1, !tbaa !2448
  %3036 = lshr i64 %3008, 63
  %3037 = xor i64 %3034, %3036
  %3038 = xor i64 %3034, %3015
  %3039 = add nuw nsw i64 %3037, %3038
  %3040 = icmp eq i64 %3039, 2
  %3041 = zext i1 %3040 to i8
  store i8 %3041, i8* %67, align 1, !tbaa !2449
  %3042 = add i64 %3004, -192
  %3043 = add i64 %2881, 140
  store i64 %3043, i64* %PC, align 8
  %3044 = inttoptr i64 %3042 to i32*
  %3045 = load i32, i32* %3044, align 4
  %3046 = sext i32 %3045 to i64
  store i64 %3046, i64* %RCX, align 8, !tbaa !2450
  %3047 = shl nsw i64 %3046, 3
  %3048 = add i64 %3047, %3016
  %3049 = add i64 %2881, 145
  store i64 %3049, i64* %PC, align 8
  %3050 = inttoptr i64 %3048 to double*
  %3051 = load double, double* %3050, align 8
  %3052 = fmul double %3003, %3051
  store double %3052, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3053 = fsub double %2987, %3052
  store double %3053, double* %257, align 1, !tbaa !2453
  %3054 = add i64 %3004, -104
  %3055 = add i64 %2881, 153
  store i64 %3055, i64* %PC, align 8
  %3056 = inttoptr i64 %3054 to i64*
  %3057 = load i64, i64* %3056, align 8
  store i64 %3057, i64* %RAX, align 8, !tbaa !2450
  %3058 = add i64 %2881, 160
  store i64 %3058, i64* %PC, align 8
  %3059 = load i32, i32* %3011, align 4
  %3060 = sext i32 %3059 to i64
  %3061 = mul nsw i64 %3060, 520
  store i64 %3061, i64* %RCX, align 8, !tbaa !2450
  %3062 = lshr i64 %3061, 63
  %3063 = add i64 %3061, %3057
  store i64 %3063, i64* %RAX, align 8, !tbaa !2450
  %3064 = icmp ult i64 %3063, %3057
  %3065 = icmp ult i64 %3063, %3061
  %3066 = or i1 %3064, %3065
  %3067 = zext i1 %3066 to i8
  store i8 %3067, i8* %42, align 1, !tbaa !2428
  %3068 = trunc i64 %3063 to i32
  %3069 = and i32 %3068, 255
  %3070 = tail call i32 @llvm.ctpop.i32(i32 %3069) #10
  %3071 = trunc i32 %3070 to i8
  %3072 = and i8 %3071, 1
  %3073 = xor i8 %3072, 1
  store i8 %3073, i8* %49, align 1, !tbaa !2445
  %3074 = xor i64 %3061, %3057
  %3075 = xor i64 %3074, %3063
  %3076 = lshr i64 %3075, 4
  %3077 = trunc i64 %3076 to i8
  %3078 = and i8 %3077, 1
  store i8 %3078, i8* %55, align 1, !tbaa !2446
  %3079 = icmp eq i64 %3063, 0
  %3080 = zext i1 %3079 to i8
  store i8 %3080, i8* %58, align 1, !tbaa !2447
  %3081 = lshr i64 %3063, 63
  %3082 = trunc i64 %3081 to i8
  store i8 %3082, i8* %61, align 1, !tbaa !2448
  %3083 = lshr i64 %3057, 63
  %3084 = xor i64 %3081, %3083
  %3085 = xor i64 %3081, %3062
  %3086 = add nuw nsw i64 %3084, %3085
  %3087 = icmp eq i64 %3086, 2
  %3088 = zext i1 %3087 to i8
  store i8 %3088, i8* %67, align 1, !tbaa !2449
  %3089 = add i64 %2881, 177
  store i64 %3089, i64* %PC, align 8
  %3090 = load i32, i32* %3044, align 4
  %3091 = sext i32 %3090 to i64
  store i64 %3091, i64* %RCX, align 8, !tbaa !2450
  %3092 = shl nsw i64 %3091, 3
  %3093 = add i64 %3092, %3063
  %3094 = add i64 %2881, 182
  store i64 %3094, i64* %PC, align 8
  %3095 = inttoptr i64 %3093 to double*
  store double %3053, double* %3095, align 8
  %3096 = load i64, i64* %RBP, align 8
  %3097 = add i64 %3096, -160
  %3098 = load i64, i64* %PC, align 8
  %3099 = add i64 %3098, 7
  store i64 %3099, i64* %PC, align 8
  %3100 = inttoptr i64 %3097 to i64*
  %3101 = load i64, i64* %3100, align 8
  store i64 %3101, i64* %RAX, align 8, !tbaa !2450
  %3102 = add i64 %3096, -196
  %3103 = add i64 %3098, 14
  store i64 %3103, i64* %PC, align 8
  %3104 = inttoptr i64 %3102 to i32*
  %3105 = load i32, i32* %3104, align 4
  %3106 = sext i32 %3105 to i64
  store i64 %3106, i64* %RCX, align 8, !tbaa !2450
  %3107 = shl nsw i64 %3106, 3
  %3108 = add i64 %3107, %3101
  %3109 = add i64 %3098, 19
  store i64 %3109, i64* %PC, align 8
  %3110 = inttoptr i64 %3108 to i64*
  %3111 = load i64, i64* %3110, align 8
  store i64 %3111, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3112 = add i64 %3096, -168
  %3113 = add i64 %3098, 26
  store i64 %3113, i64* %PC, align 8
  %3114 = inttoptr i64 %3112 to i64*
  %3115 = load i64, i64* %3114, align 8
  store i64 %3115, i64* %RAX, align 8, !tbaa !2450
  %3116 = add i64 %3098, 33
  store i64 %3116, i64* %PC, align 8
  %3117 = load i32, i32* %3104, align 4
  %3118 = sext i32 %3117 to i64
  store i64 %3118, i64* %RCX, align 8, !tbaa !2450
  %3119 = shl nsw i64 %3118, 3
  %3120 = add i64 %3119, %3115
  %3121 = add i64 %3098, 38
  store i64 %3121, i64* %PC, align 8
  %3122 = bitcast i64 %3111 to double
  %3123 = inttoptr i64 %3120 to double*
  %3124 = load double, double* %3123, align 8
  %3125 = fdiv double %3122, %3124
  store double %3125, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %3126 = add i64 %3096, -136
  %3127 = add i64 %3098, 45
  store i64 %3127, i64* %PC, align 8
  %3128 = inttoptr i64 %3126 to i64*
  %3129 = load i64, i64* %3128, align 8
  store i64 %3129, i64* %RAX, align 8, !tbaa !2450
  %3130 = add i64 %3096, -188
  %3131 = add i64 %3098, 52
  store i64 %3131, i64* %PC, align 8
  %3132 = inttoptr i64 %3130 to i32*
  %3133 = load i32, i32* %3132, align 4
  %3134 = sext i32 %3133 to i64
  %3135 = mul nsw i64 %3134, 33800
  store i64 %3135, i64* %RCX, align 8, !tbaa !2450
  %3136 = lshr i64 %3135, 63
  %3137 = add i64 %3135, %3129
  store i64 %3137, i64* %RAX, align 8, !tbaa !2450
  %3138 = icmp ult i64 %3137, %3129
  %3139 = icmp ult i64 %3137, %3135
  %3140 = or i1 %3138, %3139
  %3141 = zext i1 %3140 to i8
  store i8 %3141, i8* %42, align 1, !tbaa !2428
  %3142 = trunc i64 %3137 to i32
  %3143 = and i32 %3142, 255
  %3144 = tail call i32 @llvm.ctpop.i32(i32 %3143) #10
  %3145 = trunc i32 %3144 to i8
  %3146 = and i8 %3145, 1
  %3147 = xor i8 %3146, 1
  store i8 %3147, i8* %49, align 1, !tbaa !2445
  %3148 = xor i64 %3135, %3129
  %3149 = xor i64 %3148, %3137
  %3150 = lshr i64 %3149, 4
  %3151 = trunc i64 %3150 to i8
  %3152 = and i8 %3151, 1
  store i8 %3152, i8* %55, align 1, !tbaa !2446
  %3153 = icmp eq i64 %3137, 0
  %3154 = zext i1 %3153 to i8
  store i8 %3154, i8* %58, align 1, !tbaa !2447
  %3155 = lshr i64 %3137, 63
  %3156 = trunc i64 %3155 to i8
  store i8 %3156, i8* %61, align 1, !tbaa !2448
  %3157 = lshr i64 %3129, 63
  %3158 = xor i64 %3155, %3157
  %3159 = xor i64 %3155, %3136
  %3160 = add nuw nsw i64 %3158, %3159
  %3161 = icmp eq i64 %3160, 2
  %3162 = zext i1 %3161 to i8
  store i8 %3162, i8* %67, align 1, !tbaa !2449
  %3163 = add i64 %3096, -192
  %3164 = add i64 %3098, 69
  store i64 %3164, i64* %PC, align 8
  %3165 = inttoptr i64 %3163 to i32*
  %3166 = load i32, i32* %3165, align 4
  %3167 = sext i32 %3166 to i64
  %3168 = mul nsw i64 %3167, 520
  store i64 %3168, i64* %RCX, align 8, !tbaa !2450
  %3169 = lshr i64 %3168, 63
  %3170 = add i64 %3168, %3137
  store i64 %3170, i64* %RAX, align 8, !tbaa !2450
  %3171 = icmp ult i64 %3170, %3137
  %3172 = icmp ult i64 %3170, %3168
  %3173 = or i1 %3171, %3172
  %3174 = zext i1 %3173 to i8
  store i8 %3174, i8* %42, align 1, !tbaa !2428
  %3175 = trunc i64 %3170 to i32
  %3176 = and i32 %3175, 255
  %3177 = tail call i32 @llvm.ctpop.i32(i32 %3176) #10
  %3178 = trunc i32 %3177 to i8
  %3179 = and i8 %3178, 1
  %3180 = xor i8 %3179, 1
  store i8 %3180, i8* %49, align 1, !tbaa !2445
  %3181 = xor i64 %3168, %3137
  %3182 = xor i64 %3181, %3170
  %3183 = lshr i64 %3182, 4
  %3184 = trunc i64 %3183 to i8
  %3185 = and i8 %3184, 1
  store i8 %3185, i8* %55, align 1, !tbaa !2446
  %3186 = icmp eq i64 %3170, 0
  %3187 = zext i1 %3186 to i8
  store i8 %3187, i8* %58, align 1, !tbaa !2447
  %3188 = lshr i64 %3170, 63
  %3189 = trunc i64 %3188 to i8
  store i8 %3189, i8* %61, align 1, !tbaa !2448
  %3190 = xor i64 %3188, %3155
  %3191 = xor i64 %3188, %3169
  %3192 = add nuw nsw i64 %3190, %3191
  %3193 = icmp eq i64 %3192, 2
  %3194 = zext i1 %3193 to i8
  store i8 %3194, i8* %67, align 1, !tbaa !2449
  %3195 = add i64 %3098, 86
  store i64 %3195, i64* %PC, align 8
  %3196 = load i32, i32* %3104, align 4
  %3197 = sext i32 %3196 to i64
  store i64 %3197, i64* %RCX, align 8, !tbaa !2450
  %3198 = shl nsw i64 %3197, 3
  %3199 = add i64 %3198, %3170
  %3200 = add i64 %3098, 91
  store i64 %3200, i64* %PC, align 8
  %3201 = load double, double* %257, align 1
  %3202 = inttoptr i64 %3199 to double*
  %3203 = load double, double* %3202, align 8
  %3204 = fmul double %3201, %3203
  store double %3204, double* %257, align 1, !tbaa !2453
  %3205 = add i64 %3096, -64
  %3206 = add i64 %3098, 96
  store i64 %3206, i64* %PC, align 8
  %3207 = inttoptr i64 %3205 to i64*
  %3208 = load i64, i64* %3207, align 8
  store i64 %3208, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %3209 = add i64 %3096, -152
  %3210 = add i64 %3098, 103
  store i64 %3210, i64* %PC, align 8
  %3211 = inttoptr i64 %3209 to i64*
  %3212 = load i64, i64* %3211, align 8
  store i64 %3212, i64* %RAX, align 8, !tbaa !2450
  %3213 = add i64 %3098, 110
  store i64 %3213, i64* %PC, align 8
  %3214 = load i32, i32* %3132, align 4
  %3215 = sext i32 %3214 to i64
  store i64 %3215, i64* %RCX, align 8, !tbaa !2450
  %3216 = shl nsw i64 %3215, 3
  %3217 = add i64 %3216, %3212
  %3218 = add i64 %3098, 115
  store i64 %3218, i64* %PC, align 8
  %3219 = bitcast i64 %3208 to double
  %3220 = inttoptr i64 %3217 to double*
  %3221 = load double, double* %3220, align 8
  %3222 = fmul double %3219, %3221
  store double %3222, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3223 = load i64, i64* %RBP, align 8
  %3224 = add i64 %3223, -168
  %3225 = add i64 %3098, 122
  store i64 %3225, i64* %PC, align 8
  %3226 = inttoptr i64 %3224 to i64*
  %3227 = load i64, i64* %3226, align 8
  store i64 %3227, i64* %RAX, align 8, !tbaa !2450
  %3228 = add i64 %3223, -196
  %3229 = add i64 %3098, 129
  store i64 %3229, i64* %PC, align 8
  %3230 = inttoptr i64 %3228 to i32*
  %3231 = load i32, i32* %3230, align 4
  %3232 = sext i32 %3231 to i64
  store i64 %3232, i64* %RCX, align 8, !tbaa !2450
  %3233 = shl nsw i64 %3232, 3
  %3234 = add i64 %3233, %3227
  %3235 = add i64 %3098, 134
  store i64 %3235, i64* %PC, align 8
  %3236 = inttoptr i64 %3234 to double*
  %3237 = load double, double* %3236, align 8
  %3238 = fdiv double %3222, %3237
  store double %3238, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3239 = add i64 %3223, -104
  %3240 = add i64 %3098, 138
  store i64 %3240, i64* %PC, align 8
  %3241 = inttoptr i64 %3239 to i64*
  %3242 = load i64, i64* %3241, align 8
  store i64 %3242, i64* %RAX, align 8, !tbaa !2450
  %3243 = add i64 %3223, -188
  %3244 = add i64 %3098, 145
  store i64 %3244, i64* %PC, align 8
  %3245 = inttoptr i64 %3243 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  %3248 = mul nsw i64 %3247, 520
  store i64 %3248, i64* %RCX, align 8, !tbaa !2450
  %3249 = lshr i64 %3248, 63
  %3250 = add i64 %3248, %3242
  store i64 %3250, i64* %RAX, align 8, !tbaa !2450
  %3251 = icmp ult i64 %3250, %3242
  %3252 = icmp ult i64 %3250, %3248
  %3253 = or i1 %3251, %3252
  %3254 = zext i1 %3253 to i8
  store i8 %3254, i8* %42, align 1, !tbaa !2428
  %3255 = trunc i64 %3250 to i32
  %3256 = and i32 %3255, 255
  %3257 = tail call i32 @llvm.ctpop.i32(i32 %3256) #10
  %3258 = trunc i32 %3257 to i8
  %3259 = and i8 %3258, 1
  %3260 = xor i8 %3259, 1
  store i8 %3260, i8* %49, align 1, !tbaa !2445
  %3261 = xor i64 %3248, %3242
  %3262 = xor i64 %3261, %3250
  %3263 = lshr i64 %3262, 4
  %3264 = trunc i64 %3263 to i8
  %3265 = and i8 %3264, 1
  store i8 %3265, i8* %55, align 1, !tbaa !2446
  %3266 = icmp eq i64 %3250, 0
  %3267 = zext i1 %3266 to i8
  store i8 %3267, i8* %58, align 1, !tbaa !2447
  %3268 = lshr i64 %3250, 63
  %3269 = trunc i64 %3268 to i8
  store i8 %3269, i8* %61, align 1, !tbaa !2448
  %3270 = lshr i64 %3242, 63
  %3271 = xor i64 %3268, %3270
  %3272 = xor i64 %3268, %3249
  %3273 = add nuw nsw i64 %3271, %3272
  %3274 = icmp eq i64 %3273, 2
  %3275 = zext i1 %3274 to i8
  store i8 %3275, i8* %67, align 1, !tbaa !2449
  %3276 = add i64 %3223, -192
  %3277 = add i64 %3098, 162
  store i64 %3277, i64* %PC, align 8
  %3278 = inttoptr i64 %3276 to i32*
  %3279 = load i32, i32* %3278, align 4
  %3280 = sext i32 %3279 to i64
  store i64 %3280, i64* %RCX, align 8, !tbaa !2450
  %3281 = shl nsw i64 %3280, 3
  %3282 = add i64 %3281, %3250
  %3283 = add i64 %3098, 167
  store i64 %3283, i64* %PC, align 8
  %3284 = inttoptr i64 %3282 to double*
  %3285 = load double, double* %3284, align 8
  %3286 = fmul double %3238, %3285
  store double %3286, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3287 = load double, double* %257, align 1
  %3288 = fadd double %3286, %3287
  store double %3288, double* %257, align 1, !tbaa !2453
  %3289 = add i64 %3223, -64
  %3290 = add i64 %3098, 176
  store i64 %3290, i64* %PC, align 8
  %3291 = inttoptr i64 %3289 to i64*
  %3292 = load i64, i64* %3291, align 8
  store i64 %3292, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %3293 = add i64 %3223, -144
  %3294 = add i64 %3098, 183
  store i64 %3294, i64* %PC, align 8
  %3295 = inttoptr i64 %3293 to i64*
  %3296 = load i64, i64* %3295, align 8
  store i64 %3296, i64* %RAX, align 8, !tbaa !2450
  %3297 = add i64 %3098, 190
  store i64 %3297, i64* %PC, align 8
  %3298 = load i32, i32* %3245, align 4
  %3299 = sext i32 %3298 to i64
  store i64 %3299, i64* %RCX, align 8, !tbaa !2450
  %3300 = shl nsw i64 %3299, 3
  %3301 = add i64 %3300, %3296
  %3302 = add i64 %3098, 195
  store i64 %3302, i64* %PC, align 8
  %3303 = bitcast i64 %3292 to double
  %3304 = inttoptr i64 %3301 to double*
  %3305 = load double, double* %3304, align 8
  %3306 = fmul double %3303, %3305
  store double %3306, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3307 = add i64 %3098, 202
  store i64 %3307, i64* %PC, align 8
  %3308 = load i64, i64* %3226, align 8
  store i64 %3308, i64* %RAX, align 8, !tbaa !2450
  %3309 = add i64 %3098, 209
  store i64 %3309, i64* %PC, align 8
  %3310 = load i32, i32* %3230, align 4
  %3311 = sext i32 %3310 to i64
  store i64 %3311, i64* %RCX, align 8, !tbaa !2450
  %3312 = shl nsw i64 %3311, 3
  %3313 = add i64 %3312, %3308
  %3314 = add i64 %3098, 214
  store i64 %3314, i64* %PC, align 8
  %3315 = inttoptr i64 %3313 to double*
  %3316 = load double, double* %3315, align 8
  %3317 = fdiv double %3306, %3316
  store double %3317, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3318 = add i64 %3223, -112
  %3319 = add i64 %3098, 218
  store i64 %3319, i64* %PC, align 8
  %3320 = inttoptr i64 %3318 to i64*
  %3321 = load i64, i64* %3320, align 8
  store i64 %3321, i64* %RAX, align 8, !tbaa !2450
  %3322 = add i64 %3098, 225
  store i64 %3322, i64* %PC, align 8
  %3323 = load i32, i32* %3245, align 4
  %3324 = sext i32 %3323 to i64
  %3325 = mul nsw i64 %3324, 33800
  store i64 %3325, i64* %RCX, align 8, !tbaa !2450
  %3326 = lshr i64 %3325, 63
  %3327 = add i64 %3325, %3321
  store i64 %3327, i64* %RAX, align 8, !tbaa !2450
  %3328 = icmp ult i64 %3327, %3321
  %3329 = icmp ult i64 %3327, %3325
  %3330 = or i1 %3328, %3329
  %3331 = zext i1 %3330 to i8
  store i8 %3331, i8* %42, align 1, !tbaa !2428
  %3332 = trunc i64 %3327 to i32
  %3333 = and i32 %3332, 255
  %3334 = tail call i32 @llvm.ctpop.i32(i32 %3333) #10
  %3335 = trunc i32 %3334 to i8
  %3336 = and i8 %3335, 1
  %3337 = xor i8 %3336, 1
  store i8 %3337, i8* %49, align 1, !tbaa !2445
  %3338 = xor i64 %3325, %3321
  %3339 = xor i64 %3338, %3327
  %3340 = lshr i64 %3339, 4
  %3341 = trunc i64 %3340 to i8
  %3342 = and i8 %3341, 1
  store i8 %3342, i8* %55, align 1, !tbaa !2446
  %3343 = icmp eq i64 %3327, 0
  %3344 = zext i1 %3343 to i8
  store i8 %3344, i8* %58, align 1, !tbaa !2447
  %3345 = lshr i64 %3327, 63
  %3346 = trunc i64 %3345 to i8
  store i8 %3346, i8* %61, align 1, !tbaa !2448
  %3347 = lshr i64 %3321, 63
  %3348 = xor i64 %3345, %3347
  %3349 = xor i64 %3345, %3326
  %3350 = add nuw nsw i64 %3348, %3349
  %3351 = icmp eq i64 %3350, 2
  %3352 = zext i1 %3351 to i8
  store i8 %3352, i8* %67, align 1, !tbaa !2449
  %3353 = load i64, i64* %RBP, align 8
  %3354 = add i64 %3353, -192
  %3355 = add i64 %3098, 242
  store i64 %3355, i64* %PC, align 8
  %3356 = inttoptr i64 %3354 to i32*
  %3357 = load i32, i32* %3356, align 4
  %3358 = sext i32 %3357 to i64
  %3359 = mul nsw i64 %3358, 520
  store i64 %3359, i64* %RCX, align 8, !tbaa !2450
  %3360 = lshr i64 %3359, 63
  %3361 = add i64 %3359, %3327
  store i64 %3361, i64* %RAX, align 8, !tbaa !2450
  %3362 = icmp ult i64 %3361, %3327
  %3363 = icmp ult i64 %3361, %3359
  %3364 = or i1 %3362, %3363
  %3365 = zext i1 %3364 to i8
  store i8 %3365, i8* %42, align 1, !tbaa !2428
  %3366 = trunc i64 %3361 to i32
  %3367 = and i32 %3366, 255
  %3368 = tail call i32 @llvm.ctpop.i32(i32 %3367) #10
  %3369 = trunc i32 %3368 to i8
  %3370 = and i8 %3369, 1
  %3371 = xor i8 %3370, 1
  store i8 %3371, i8* %49, align 1, !tbaa !2445
  %3372 = xor i64 %3359, %3327
  %3373 = xor i64 %3372, %3361
  %3374 = lshr i64 %3373, 4
  %3375 = trunc i64 %3374 to i8
  %3376 = and i8 %3375, 1
  store i8 %3376, i8* %55, align 1, !tbaa !2446
  %3377 = icmp eq i64 %3361, 0
  %3378 = zext i1 %3377 to i8
  store i8 %3378, i8* %58, align 1, !tbaa !2447
  %3379 = lshr i64 %3361, 63
  %3380 = trunc i64 %3379 to i8
  store i8 %3380, i8* %61, align 1, !tbaa !2448
  %3381 = xor i64 %3379, %3345
  %3382 = xor i64 %3379, %3360
  %3383 = add nuw nsw i64 %3381, %3382
  %3384 = icmp eq i64 %3383, 2
  %3385 = zext i1 %3384 to i8
  store i8 %3385, i8* %67, align 1, !tbaa !2449
  %3386 = add i64 %3353, -196
  %3387 = add i64 %3098, 259
  store i64 %3387, i64* %PC, align 8
  %3388 = inttoptr i64 %3386 to i32*
  %3389 = load i32, i32* %3388, align 4
  %3390 = sext i32 %3389 to i64
  store i64 %3390, i64* %RCX, align 8, !tbaa !2450
  %3391 = shl nsw i64 %3390, 3
  %3392 = add i64 %3391, %3361
  %3393 = add i64 %3098, 264
  store i64 %3393, i64* %PC, align 8
  %3394 = load double, double* %155, align 1
  %3395 = inttoptr i64 %3392 to double*
  %3396 = load double, double* %3395, align 8
  %3397 = fmul double %3394, %3396
  store double %3397, double* %155, align 1, !tbaa !2453
  %3398 = load double, double* %257, align 1
  %3399 = fsub double %3398, %3397
  store double %3399, double* %257, align 1, !tbaa !2453
  %3400 = add i64 %3353, -136
  %3401 = add i64 %3098, 275
  store i64 %3401, i64* %PC, align 8
  %3402 = inttoptr i64 %3400 to i64*
  %3403 = load i64, i64* %3402, align 8
  store i64 %3403, i64* %RAX, align 8, !tbaa !2450
  %3404 = add i64 %3353, -188
  %3405 = add i64 %3098, 282
  store i64 %3405, i64* %PC, align 8
  %3406 = inttoptr i64 %3404 to i32*
  %3407 = load i32, i32* %3406, align 4
  %3408 = sext i32 %3407 to i64
  %3409 = mul nsw i64 %3408, 33800
  store i64 %3409, i64* %RCX, align 8, !tbaa !2450
  %3410 = lshr i64 %3409, 63
  %3411 = add i64 %3409, %3403
  store i64 %3411, i64* %RAX, align 8, !tbaa !2450
  %3412 = icmp ult i64 %3411, %3403
  %3413 = icmp ult i64 %3411, %3409
  %3414 = or i1 %3412, %3413
  %3415 = zext i1 %3414 to i8
  store i8 %3415, i8* %42, align 1, !tbaa !2428
  %3416 = trunc i64 %3411 to i32
  %3417 = and i32 %3416, 255
  %3418 = tail call i32 @llvm.ctpop.i32(i32 %3417) #10
  %3419 = trunc i32 %3418 to i8
  %3420 = and i8 %3419, 1
  %3421 = xor i8 %3420, 1
  store i8 %3421, i8* %49, align 1, !tbaa !2445
  %3422 = xor i64 %3409, %3403
  %3423 = xor i64 %3422, %3411
  %3424 = lshr i64 %3423, 4
  %3425 = trunc i64 %3424 to i8
  %3426 = and i8 %3425, 1
  store i8 %3426, i8* %55, align 1, !tbaa !2446
  %3427 = icmp eq i64 %3411, 0
  %3428 = zext i1 %3427 to i8
  store i8 %3428, i8* %58, align 1, !tbaa !2447
  %3429 = lshr i64 %3411, 63
  %3430 = trunc i64 %3429 to i8
  store i8 %3430, i8* %61, align 1, !tbaa !2448
  %3431 = lshr i64 %3403, 63
  %3432 = xor i64 %3429, %3431
  %3433 = xor i64 %3429, %3410
  %3434 = add nuw nsw i64 %3432, %3433
  %3435 = icmp eq i64 %3434, 2
  %3436 = zext i1 %3435 to i8
  store i8 %3436, i8* %67, align 1, !tbaa !2449
  %3437 = load i64, i64* %RBP, align 8
  %3438 = add i64 %3437, -192
  %3439 = add i64 %3098, 299
  store i64 %3439, i64* %PC, align 8
  %3440 = inttoptr i64 %3438 to i32*
  %3441 = load i32, i32* %3440, align 4
  %3442 = sext i32 %3441 to i64
  %3443 = mul nsw i64 %3442, 520
  store i64 %3443, i64* %RCX, align 8, !tbaa !2450
  %3444 = lshr i64 %3443, 63
  %3445 = add i64 %3443, %3411
  store i64 %3445, i64* %RAX, align 8, !tbaa !2450
  %3446 = icmp ult i64 %3445, %3411
  %3447 = icmp ult i64 %3445, %3443
  %3448 = or i1 %3446, %3447
  %3449 = zext i1 %3448 to i8
  store i8 %3449, i8* %42, align 1, !tbaa !2428
  %3450 = trunc i64 %3445 to i32
  %3451 = and i32 %3450, 255
  %3452 = tail call i32 @llvm.ctpop.i32(i32 %3451) #10
  %3453 = trunc i32 %3452 to i8
  %3454 = and i8 %3453, 1
  %3455 = xor i8 %3454, 1
  store i8 %3455, i8* %49, align 1, !tbaa !2445
  %3456 = xor i64 %3443, %3411
  %3457 = xor i64 %3456, %3445
  %3458 = lshr i64 %3457, 4
  %3459 = trunc i64 %3458 to i8
  %3460 = and i8 %3459, 1
  store i8 %3460, i8* %55, align 1, !tbaa !2446
  %3461 = icmp eq i64 %3445, 0
  %3462 = zext i1 %3461 to i8
  store i8 %3462, i8* %58, align 1, !tbaa !2447
  %3463 = lshr i64 %3445, 63
  %3464 = trunc i64 %3463 to i8
  store i8 %3464, i8* %61, align 1, !tbaa !2448
  %3465 = xor i64 %3463, %3429
  %3466 = xor i64 %3463, %3444
  %3467 = add nuw nsw i64 %3465, %3466
  %3468 = icmp eq i64 %3467, 2
  %3469 = zext i1 %3468 to i8
  store i8 %3469, i8* %67, align 1, !tbaa !2449
  %3470 = add i64 %3437, -196
  %3471 = add i64 %3098, 316
  store i64 %3471, i64* %PC, align 8
  %3472 = inttoptr i64 %3470 to i32*
  %3473 = load i32, i32* %3472, align 4
  %3474 = sext i32 %3473 to i64
  store i64 %3474, i64* %RCX, align 8, !tbaa !2450
  %3475 = shl nsw i64 %3474, 3
  %3476 = add i64 %3475, %3445
  %3477 = add i64 %3098, 321
  store i64 %3477, i64* %PC, align 8
  %3478 = load i64, i64* %148, align 1
  %3479 = inttoptr i64 %3476 to i64*
  store i64 %3478, i64* %3479, align 8
  %3480 = load i64, i64* %RBP, align 8
  %3481 = add i64 %3480, -104
  %3482 = load i64, i64* %PC, align 8
  %3483 = add i64 %3482, 4
  store i64 %3483, i64* %PC, align 8
  %3484 = inttoptr i64 %3481 to i64*
  %3485 = load i64, i64* %3484, align 8
  store i64 %3485, i64* %RAX, align 8, !tbaa !2450
  %3486 = add i64 %3480, -188
  %3487 = add i64 %3482, 11
  store i64 %3487, i64* %PC, align 8
  %3488 = inttoptr i64 %3486 to i32*
  %3489 = load i32, i32* %3488, align 4
  %3490 = sext i32 %3489 to i64
  %3491 = mul nsw i64 %3490, 520
  store i64 %3491, i64* %RCX, align 8, !tbaa !2450
  %3492 = lshr i64 %3491, 63
  %3493 = add i64 %3491, %3485
  store i64 %3493, i64* %RAX, align 8, !tbaa !2450
  %3494 = icmp ult i64 %3493, %3485
  %3495 = icmp ult i64 %3493, %3491
  %3496 = or i1 %3494, %3495
  %3497 = zext i1 %3496 to i8
  store i8 %3497, i8* %42, align 1, !tbaa !2428
  %3498 = trunc i64 %3493 to i32
  %3499 = and i32 %3498, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499) #10
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %49, align 1, !tbaa !2445
  %3504 = xor i64 %3491, %3485
  %3505 = xor i64 %3504, %3493
  %3506 = lshr i64 %3505, 4
  %3507 = trunc i64 %3506 to i8
  %3508 = and i8 %3507, 1
  store i8 %3508, i8* %55, align 1, !tbaa !2446
  %3509 = icmp eq i64 %3493, 0
  %3510 = zext i1 %3509 to i8
  store i8 %3510, i8* %58, align 1, !tbaa !2447
  %3511 = lshr i64 %3493, 63
  %3512 = trunc i64 %3511 to i8
  store i8 %3512, i8* %61, align 1, !tbaa !2448
  %3513 = lshr i64 %3485, 63
  %3514 = xor i64 %3511, %3513
  %3515 = xor i64 %3511, %3492
  %3516 = add nuw nsw i64 %3514, %3515
  %3517 = icmp eq i64 %3516, 2
  %3518 = zext i1 %3517 to i8
  store i8 %3518, i8* %67, align 1, !tbaa !2449
  %3519 = add i64 %3480, -192
  %3520 = add i64 %3482, 28
  store i64 %3520, i64* %PC, align 8
  %3521 = inttoptr i64 %3519 to i32*
  %3522 = load i32, i32* %3521, align 4
  %3523 = sext i32 %3522 to i64
  store i64 %3523, i64* %RCX, align 8, !tbaa !2450
  %3524 = shl nsw i64 %3523, 3
  %3525 = add i64 %3524, %3493
  %3526 = add i64 %3482, 33
  store i64 %3526, i64* %PC, align 8
  %3527 = inttoptr i64 %3525 to i64*
  %3528 = load i64, i64* %3527, align 8
  store i64 %3528, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3529 = add i64 %3480, -112
  %3530 = add i64 %3482, 37
  store i64 %3530, i64* %PC, align 8
  %3531 = inttoptr i64 %3529 to i64*
  %3532 = load i64, i64* %3531, align 8
  store i64 %3532, i64* %RAX, align 8, !tbaa !2450
  %3533 = add i64 %3482, 44
  store i64 %3533, i64* %PC, align 8
  %3534 = load i32, i32* %3488, align 4
  %3535 = sext i32 %3534 to i64
  %3536 = mul nsw i64 %3535, 33800
  store i64 %3536, i64* %RCX, align 8, !tbaa !2450
  %3537 = lshr i64 %3536, 63
  %3538 = add i64 %3536, %3532
  store i64 %3538, i64* %RAX, align 8, !tbaa !2450
  %3539 = icmp ult i64 %3538, %3532
  %3540 = icmp ult i64 %3538, %3536
  %3541 = or i1 %3539, %3540
  %3542 = zext i1 %3541 to i8
  store i8 %3542, i8* %42, align 1, !tbaa !2428
  %3543 = trunc i64 %3538 to i32
  %3544 = and i32 %3543, 255
  %3545 = tail call i32 @llvm.ctpop.i32(i32 %3544) #10
  %3546 = trunc i32 %3545 to i8
  %3547 = and i8 %3546, 1
  %3548 = xor i8 %3547, 1
  store i8 %3548, i8* %49, align 1, !tbaa !2445
  %3549 = xor i64 %3536, %3532
  %3550 = xor i64 %3549, %3538
  %3551 = lshr i64 %3550, 4
  %3552 = trunc i64 %3551 to i8
  %3553 = and i8 %3552, 1
  store i8 %3553, i8* %55, align 1, !tbaa !2446
  %3554 = icmp eq i64 %3538, 0
  %3555 = zext i1 %3554 to i8
  store i8 %3555, i8* %58, align 1, !tbaa !2447
  %3556 = lshr i64 %3538, 63
  %3557 = trunc i64 %3556 to i8
  store i8 %3557, i8* %61, align 1, !tbaa !2448
  %3558 = lshr i64 %3532, 63
  %3559 = xor i64 %3556, %3558
  %3560 = xor i64 %3556, %3537
  %3561 = add nuw nsw i64 %3559, %3560
  %3562 = icmp eq i64 %3561, 2
  %3563 = zext i1 %3562 to i8
  store i8 %3563, i8* %67, align 1, !tbaa !2449
  %3564 = load i64, i64* %RBP, align 8
  %3565 = add i64 %3564, -192
  %3566 = add i64 %3482, 61
  store i64 %3566, i64* %PC, align 8
  %3567 = inttoptr i64 %3565 to i32*
  %3568 = load i32, i32* %3567, align 4
  %3569 = sext i32 %3568 to i64
  %3570 = mul nsw i64 %3569, 520
  store i64 %3570, i64* %RCX, align 8, !tbaa !2450
  %3571 = lshr i64 %3570, 63
  %3572 = add i64 %3570, %3538
  store i64 %3572, i64* %RAX, align 8, !tbaa !2450
  %3573 = icmp ult i64 %3572, %3538
  %3574 = icmp ult i64 %3572, %3570
  %3575 = or i1 %3573, %3574
  %3576 = zext i1 %3575 to i8
  store i8 %3576, i8* %42, align 1, !tbaa !2428
  %3577 = trunc i64 %3572 to i32
  %3578 = and i32 %3577, 255
  %3579 = tail call i32 @llvm.ctpop.i32(i32 %3578) #10
  %3580 = trunc i32 %3579 to i8
  %3581 = and i8 %3580, 1
  %3582 = xor i8 %3581, 1
  store i8 %3582, i8* %49, align 1, !tbaa !2445
  %3583 = xor i64 %3570, %3538
  %3584 = xor i64 %3583, %3572
  %3585 = lshr i64 %3584, 4
  %3586 = trunc i64 %3585 to i8
  %3587 = and i8 %3586, 1
  store i8 %3587, i8* %55, align 1, !tbaa !2446
  %3588 = icmp eq i64 %3572, 0
  %3589 = zext i1 %3588 to i8
  store i8 %3589, i8* %58, align 1, !tbaa !2447
  %3590 = lshr i64 %3572, 63
  %3591 = trunc i64 %3590 to i8
  store i8 %3591, i8* %61, align 1, !tbaa !2448
  %3592 = xor i64 %3590, %3556
  %3593 = xor i64 %3590, %3571
  %3594 = add nuw nsw i64 %3592, %3593
  %3595 = icmp eq i64 %3594, 2
  %3596 = zext i1 %3595 to i8
  store i8 %3596, i8* %67, align 1, !tbaa !2449
  %3597 = add i64 %3564, -196
  %3598 = add i64 %3482, 78
  store i64 %3598, i64* %PC, align 8
  %3599 = inttoptr i64 %3597 to i32*
  %3600 = load i32, i32* %3599, align 4
  %3601 = sext i32 %3600 to i64
  store i64 %3601, i64* %RCX, align 8, !tbaa !2450
  %3602 = shl nsw i64 %3601, 3
  %3603 = add i64 %3602, %3572
  %3604 = add i64 %3482, 83
  store i64 %3604, i64* %PC, align 8
  %3605 = load i64, i64* %148, align 1
  %3606 = inttoptr i64 %3603 to i64*
  store i64 %3605, i64* %3606, align 8
  %3607 = load i64, i64* %RBP, align 8
  %3608 = add i64 %3607, -196
  %3609 = load i64, i64* %PC, align 8
  %3610 = add i64 %3609, 6
  store i64 %3610, i64* %PC, align 8
  %3611 = inttoptr i64 %3608 to i32*
  %3612 = load i32, i32* %3611, align 4
  %3613 = add i32 %3612, 1
  %3614 = zext i32 %3613 to i64
  store i64 %3614, i64* %RAX, align 8, !tbaa !2450
  %3615 = icmp eq i32 %3612, -1
  %3616 = icmp eq i32 %3613, 0
  %3617 = or i1 %3615, %3616
  %3618 = zext i1 %3617 to i8
  store i8 %3618, i8* %42, align 1, !tbaa !2428
  %3619 = and i32 %3613, 255
  %3620 = tail call i32 @llvm.ctpop.i32(i32 %3619) #10
  %3621 = trunc i32 %3620 to i8
  %3622 = and i8 %3621, 1
  %3623 = xor i8 %3622, 1
  store i8 %3623, i8* %49, align 1, !tbaa !2445
  %3624 = xor i32 %3613, %3612
  %3625 = lshr i32 %3624, 4
  %3626 = trunc i32 %3625 to i8
  %3627 = and i8 %3626, 1
  store i8 %3627, i8* %55, align 1, !tbaa !2446
  %3628 = zext i1 %3616 to i8
  store i8 %3628, i8* %58, align 1, !tbaa !2447
  %3629 = lshr i32 %3613, 31
  %3630 = trunc i32 %3629 to i8
  store i8 %3630, i8* %61, align 1, !tbaa !2448
  %3631 = lshr i32 %3612, 31
  %3632 = xor i32 %3629, %3631
  %3633 = add nuw nsw i32 %3632, %3629
  %3634 = icmp eq i32 %3633, 2
  %3635 = zext i1 %3634 to i8
  store i8 %3635, i8* %67, align 1, !tbaa !2449
  %3636 = add i64 %3609, 15
  store i64 %3636, i64* %PC, align 8
  store i32 %3613, i32* %3611, align 4
  %3637 = load i64, i64* %PC, align 8
  %3638 = add i64 %3637, -859
  store i64 %3638, i64* %PC, align 8, !tbaa !2450
  br label %block_4015c3

block_401f62:                                     ; preds = %block_401c30
  %3639 = add i64 %4668, 39
  store i64 %3639, i64* %PC, align 8
  %3640 = load i32, i32* %4640, align 4
  %3641 = sext i32 %3640 to i64
  store i64 %3641, i64* %RCX, align 8, !tbaa !2450
  %3642 = shl nsw i64 %3641, 3
  %3643 = add i64 %3642, %4714
  %3644 = add i64 %4668, 44
  store i64 %3644, i64* %PC, align 8
  %3645 = inttoptr i64 %3643 to i64*
  %3646 = load i64, i64* %3645, align 8
  store i64 %3646, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3647 = add i64 %4632, -80
  %3648 = add i64 %4668, 48
  store i64 %3648, i64* %PC, align 8
  %3649 = inttoptr i64 %3647 to i64*
  %3650 = load i64, i64* %3649, align 8
  store i64 %3650, i64* %RAX, align 8, !tbaa !2450
  %3651 = add i64 %4668, 55
  store i64 %3651, i64* %PC, align 8
  %3652 = load i32, i32* %4675, align 4
  %3653 = sext i32 %3652 to i64
  %3654 = mul nsw i64 %3653, 520
  store i64 %3654, i64* %RCX, align 8, !tbaa !2450
  %3655 = lshr i64 %3654, 63
  %3656 = add i64 %3654, %3650
  store i64 %3656, i64* %RAX, align 8, !tbaa !2450
  %3657 = icmp ult i64 %3656, %3650
  %3658 = icmp ult i64 %3656, %3654
  %3659 = or i1 %3657, %3658
  %3660 = zext i1 %3659 to i8
  store i8 %3660, i8* %42, align 1, !tbaa !2428
  %3661 = trunc i64 %3656 to i32
  %3662 = and i32 %3661, 255
  %3663 = tail call i32 @llvm.ctpop.i32(i32 %3662) #10
  %3664 = trunc i32 %3663 to i8
  %3665 = and i8 %3664, 1
  %3666 = xor i8 %3665, 1
  store i8 %3666, i8* %49, align 1, !tbaa !2445
  %3667 = xor i64 %3654, %3650
  %3668 = xor i64 %3667, %3656
  %3669 = lshr i64 %3668, 4
  %3670 = trunc i64 %3669 to i8
  %3671 = and i8 %3670, 1
  store i8 %3671, i8* %55, align 1, !tbaa !2446
  %3672 = icmp eq i64 %3656, 0
  %3673 = zext i1 %3672 to i8
  store i8 %3673, i8* %58, align 1, !tbaa !2447
  %3674 = lshr i64 %3656, 63
  %3675 = trunc i64 %3674 to i8
  store i8 %3675, i8* %61, align 1, !tbaa !2448
  %3676 = lshr i64 %3650, 63
  %3677 = xor i64 %3674, %3676
  %3678 = xor i64 %3674, %3655
  %3679 = add nuw nsw i64 %3677, %3678
  %3680 = icmp eq i64 %3679, 2
  %3681 = zext i1 %3680 to i8
  store i8 %3681, i8* %67, align 1, !tbaa !2449
  %3682 = add i64 %4668, 69
  store i64 %3682, i64* %PC, align 8
  %3683 = load i32, i32* %4640, align 4
  %3684 = sext i32 %3683 to i64
  store i64 %3684, i64* %RCX, align 8, !tbaa !2450
  %3685 = shl nsw i64 %3684, 3
  %3686 = add i64 %3685, %3656
  %3687 = add i64 %4668, 74
  store i64 %3687, i64* %PC, align 8
  %3688 = bitcast i64 %3646 to double
  %3689 = inttoptr i64 %3686 to double*
  %3690 = load double, double* %3689, align 8
  %3691 = fsub double %3688, %3690
  store double %3691, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %3692 = load i64, i64* %RBP, align 8
  %3693 = add i64 %3692, -88
  %3694 = add i64 %4668, 78
  store i64 %3694, i64* %PC, align 8
  %3695 = inttoptr i64 %3693 to i64*
  %3696 = load i64, i64* %3695, align 8
  store i64 %3696, i64* %RAX, align 8, !tbaa !2450
  %3697 = add i64 %3692, -188
  %3698 = add i64 %4668, 85
  store i64 %3698, i64* %PC, align 8
  %3699 = inttoptr i64 %3697 to i32*
  %3700 = load i32, i32* %3699, align 4
  %3701 = sext i32 %3700 to i64
  %3702 = mul nsw i64 %3701, 520
  store i64 %3702, i64* %RCX, align 8, !tbaa !2450
  %3703 = lshr i64 %3702, 63
  %3704 = add i64 %3702, %3696
  store i64 %3704, i64* %RAX, align 8, !tbaa !2450
  %3705 = icmp ult i64 %3704, %3696
  %3706 = icmp ult i64 %3704, %3702
  %3707 = or i1 %3705, %3706
  %3708 = zext i1 %3707 to i8
  store i8 %3708, i8* %42, align 1, !tbaa !2428
  %3709 = trunc i64 %3704 to i32
  %3710 = and i32 %3709, 255
  %3711 = tail call i32 @llvm.ctpop.i32(i32 %3710) #10
  %3712 = trunc i32 %3711 to i8
  %3713 = and i8 %3712, 1
  %3714 = xor i8 %3713, 1
  store i8 %3714, i8* %49, align 1, !tbaa !2445
  %3715 = xor i64 %3702, %3696
  %3716 = xor i64 %3715, %3704
  %3717 = lshr i64 %3716, 4
  %3718 = trunc i64 %3717 to i8
  %3719 = and i8 %3718, 1
  store i8 %3719, i8* %55, align 1, !tbaa !2446
  %3720 = icmp eq i64 %3704, 0
  %3721 = zext i1 %3720 to i8
  store i8 %3721, i8* %58, align 1, !tbaa !2447
  %3722 = lshr i64 %3704, 63
  %3723 = trunc i64 %3722 to i8
  store i8 %3723, i8* %61, align 1, !tbaa !2448
  %3724 = lshr i64 %3696, 63
  %3725 = xor i64 %3722, %3724
  %3726 = xor i64 %3722, %3703
  %3727 = add nuw nsw i64 %3725, %3726
  %3728 = icmp eq i64 %3727, 2
  %3729 = zext i1 %3728 to i8
  store i8 %3729, i8* %67, align 1, !tbaa !2449
  %3730 = add i64 %3692, -52
  %3731 = add i64 %4668, 99
  store i64 %3731, i64* %PC, align 8
  %3732 = inttoptr i64 %3730 to i32*
  %3733 = load i32, i32* %3732, align 4
  %3734 = sext i32 %3733 to i64
  store i64 %3734, i64* %RCX, align 8, !tbaa !2450
  %3735 = shl nsw i64 %3734, 3
  %3736 = add i64 %3735, %3704
  %3737 = add i64 %4668, 104
  store i64 %3737, i64* %PC, align 8
  %3738 = inttoptr i64 %3736 to double*
  %3739 = load double, double* %3738, align 8
  %3740 = fadd double %3691, %3739
  store double %3740, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %3741 = add i64 %3692, -128
  %3742 = add i64 %4668, 108
  store i64 %3742, i64* %PC, align 8
  %3743 = inttoptr i64 %3741 to i64*
  %3744 = load i64, i64* %3743, align 8
  store i64 %3744, i64* %RAX, align 8, !tbaa !2450
  %3745 = add i64 %4668, 115
  store i64 %3745, i64* %PC, align 8
  %3746 = load i32, i32* %3699, align 4
  %3747 = sext i32 %3746 to i64
  %3748 = mul nsw i64 %3747, 33800
  store i64 %3748, i64* %RCX, align 8, !tbaa !2450
  %3749 = lshr i64 %3748, 63
  %3750 = add i64 %3748, %3744
  store i64 %3750, i64* %RAX, align 8, !tbaa !2450
  %3751 = icmp ult i64 %3750, %3744
  %3752 = icmp ult i64 %3750, %3748
  %3753 = or i1 %3751, %3752
  %3754 = zext i1 %3753 to i8
  store i8 %3754, i8* %42, align 1, !tbaa !2428
  %3755 = trunc i64 %3750 to i32
  %3756 = and i32 %3755, 255
  %3757 = tail call i32 @llvm.ctpop.i32(i32 %3756) #10
  %3758 = trunc i32 %3757 to i8
  %3759 = and i8 %3758, 1
  %3760 = xor i8 %3759, 1
  store i8 %3760, i8* %49, align 1, !tbaa !2445
  %3761 = xor i64 %3748, %3744
  %3762 = xor i64 %3761, %3750
  %3763 = lshr i64 %3762, 4
  %3764 = trunc i64 %3763 to i8
  %3765 = and i8 %3764, 1
  store i8 %3765, i8* %55, align 1, !tbaa !2446
  %3766 = icmp eq i64 %3750, 0
  %3767 = zext i1 %3766 to i8
  store i8 %3767, i8* %58, align 1, !tbaa !2447
  %3768 = lshr i64 %3750, 63
  %3769 = trunc i64 %3768 to i8
  store i8 %3769, i8* %61, align 1, !tbaa !2448
  %3770 = lshr i64 %3744, 63
  %3771 = xor i64 %3768, %3770
  %3772 = xor i64 %3768, %3749
  %3773 = add nuw nsw i64 %3771, %3772
  %3774 = icmp eq i64 %3773, 2
  %3775 = zext i1 %3774 to i8
  store i8 %3775, i8* %67, align 1, !tbaa !2449
  %3776 = load i64, i64* %RBP, align 8
  %3777 = add i64 %3776, -52
  %3778 = add i64 %4668, 129
  store i64 %3778, i64* %PC, align 8
  %3779 = inttoptr i64 %3777 to i32*
  %3780 = load i32, i32* %3779, align 4
  %3781 = sext i32 %3780 to i64
  %3782 = mul nsw i64 %3781, 520
  store i64 %3782, i64* %RCX, align 8, !tbaa !2450
  %3783 = lshr i64 %3782, 63
  %3784 = add i64 %3782, %3750
  store i64 %3784, i64* %RAX, align 8, !tbaa !2450
  %3785 = icmp ult i64 %3784, %3750
  %3786 = icmp ult i64 %3784, %3782
  %3787 = or i1 %3785, %3786
  %3788 = zext i1 %3787 to i8
  store i8 %3788, i8* %42, align 1, !tbaa !2428
  %3789 = trunc i64 %3784 to i32
  %3790 = and i32 %3789, 255
  %3791 = tail call i32 @llvm.ctpop.i32(i32 %3790) #10
  %3792 = trunc i32 %3791 to i8
  %3793 = and i8 %3792, 1
  %3794 = xor i8 %3793, 1
  store i8 %3794, i8* %49, align 1, !tbaa !2445
  %3795 = xor i64 %3782, %3750
  %3796 = xor i64 %3795, %3784
  %3797 = lshr i64 %3796, 4
  %3798 = trunc i64 %3797 to i8
  %3799 = and i8 %3798, 1
  store i8 %3799, i8* %55, align 1, !tbaa !2446
  %3800 = icmp eq i64 %3784, 0
  %3801 = zext i1 %3800 to i8
  store i8 %3801, i8* %58, align 1, !tbaa !2447
  %3802 = lshr i64 %3784, 63
  %3803 = trunc i64 %3802 to i8
  store i8 %3803, i8* %61, align 1, !tbaa !2448
  %3804 = xor i64 %3802, %3768
  %3805 = xor i64 %3802, %3783
  %3806 = add nuw nsw i64 %3804, %3805
  %3807 = icmp eq i64 %3806, 2
  %3808 = zext i1 %3807 to i8
  store i8 %3808, i8* %67, align 1, !tbaa !2449
  %3809 = add i64 %3776, -48
  %3810 = add i64 %4668, 143
  store i64 %3810, i64* %PC, align 8
  %3811 = inttoptr i64 %3809 to i32*
  %3812 = load i32, i32* %3811, align 4
  %3813 = sext i32 %3812 to i64
  store i64 %3813, i64* %RCX, align 8, !tbaa !2450
  %3814 = shl nsw i64 %3813, 3
  %3815 = add i64 %3814, %3784
  %3816 = add i64 %4668, 148
  store i64 %3816, i64* %PC, align 8
  %3817 = load double, double* %257, align 1
  %3818 = inttoptr i64 %3815 to double*
  %3819 = load double, double* %3818, align 8
  %3820 = fsub double %3817, %3819
  store double %3820, double* %257, align 1, !tbaa !2453
  %3821 = add i64 %3776, -96
  %3822 = add i64 %4668, 152
  store i64 %3822, i64* %PC, align 8
  %3823 = inttoptr i64 %3821 to i64*
  %3824 = load i64, i64* %3823, align 8
  store i64 %3824, i64* %RAX, align 8, !tbaa !2450
  %3825 = add i64 %3776, -188
  %3826 = add i64 %4668, 159
  store i64 %3826, i64* %PC, align 8
  %3827 = inttoptr i64 %3825 to i32*
  %3828 = load i32, i32* %3827, align 4
  %3829 = sext i32 %3828 to i64
  %3830 = mul nsw i64 %3829, 520
  store i64 %3830, i64* %RCX, align 8, !tbaa !2450
  %3831 = lshr i64 %3830, 63
  %3832 = add i64 %3830, %3824
  store i64 %3832, i64* %RAX, align 8, !tbaa !2450
  %3833 = icmp ult i64 %3832, %3824
  %3834 = icmp ult i64 %3832, %3830
  %3835 = or i1 %3833, %3834
  %3836 = zext i1 %3835 to i8
  store i8 %3836, i8* %42, align 1, !tbaa !2428
  %3837 = trunc i64 %3832 to i32
  %3838 = and i32 %3837, 255
  %3839 = tail call i32 @llvm.ctpop.i32(i32 %3838) #10
  %3840 = trunc i32 %3839 to i8
  %3841 = and i8 %3840, 1
  %3842 = xor i8 %3841, 1
  store i8 %3842, i8* %49, align 1, !tbaa !2445
  %3843 = xor i64 %3830, %3824
  %3844 = xor i64 %3843, %3832
  %3845 = lshr i64 %3844, 4
  %3846 = trunc i64 %3845 to i8
  %3847 = and i8 %3846, 1
  store i8 %3847, i8* %55, align 1, !tbaa !2446
  %3848 = icmp eq i64 %3832, 0
  %3849 = zext i1 %3848 to i8
  store i8 %3849, i8* %58, align 1, !tbaa !2447
  %3850 = lshr i64 %3832, 63
  %3851 = trunc i64 %3850 to i8
  store i8 %3851, i8* %61, align 1, !tbaa !2448
  %3852 = lshr i64 %3824, 63
  %3853 = xor i64 %3850, %3852
  %3854 = xor i64 %3850, %3831
  %3855 = add nuw nsw i64 %3853, %3854
  %3856 = icmp eq i64 %3855, 2
  %3857 = zext i1 %3856 to i8
  store i8 %3857, i8* %67, align 1, !tbaa !2449
  %3858 = load i64, i64* %RBP, align 8
  %3859 = add i64 %3858, -192
  %3860 = add i64 %4668, 176
  store i64 %3860, i64* %PC, align 8
  %3861 = inttoptr i64 %3859 to i32*
  %3862 = load i32, i32* %3861, align 4
  %3863 = sext i32 %3862 to i64
  store i64 %3863, i64* %RCX, align 8, !tbaa !2450
  %3864 = shl nsw i64 %3863, 3
  %3865 = add i64 %3864, %3832
  %3866 = add i64 %4668, 181
  store i64 %3866, i64* %PC, align 8
  %3867 = inttoptr i64 %3865 to double*
  store double %3820, double* %3867, align 8
  %3868 = load i64, i64* %RBP, align 8
  %3869 = add i64 %3868, -176
  %3870 = load i64, i64* %PC, align 8
  %3871 = add i64 %3870, 7
  store i64 %3871, i64* %PC, align 8
  %3872 = inttoptr i64 %3869 to i64*
  %3873 = load i64, i64* %3872, align 8
  store i64 %3873, i64* %RAX, align 8, !tbaa !2450
  %3874 = add i64 %3868, -52
  %3875 = add i64 %3870, 11
  store i64 %3875, i64* %PC, align 8
  %3876 = inttoptr i64 %3874 to i32*
  %3877 = load i32, i32* %3876, align 4
  %3878 = sext i32 %3877 to i64
  store i64 %3878, i64* %RCX, align 8, !tbaa !2450
  %3879 = shl nsw i64 %3878, 3
  %3880 = add i64 %3879, %3873
  %3881 = add i64 %3870, 16
  store i64 %3881, i64* %PC, align 8
  %3882 = inttoptr i64 %3880 to i64*
  %3883 = load i64, i64* %3882, align 8
  store i64 %3883, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %3884 = add i64 %3868, -184
  %3885 = add i64 %3870, 23
  store i64 %3885, i64* %PC, align 8
  %3886 = inttoptr i64 %3884 to i64*
  %3887 = load i64, i64* %3886, align 8
  store i64 %3887, i64* %RAX, align 8, !tbaa !2450
  %3888 = add i64 %3870, 27
  store i64 %3888, i64* %PC, align 8
  %3889 = load i32, i32* %3876, align 4
  %3890 = sext i32 %3889 to i64
  store i64 %3890, i64* %RCX, align 8, !tbaa !2450
  %3891 = shl nsw i64 %3890, 3
  %3892 = add i64 %3891, %3887
  %3893 = add i64 %3870, 32
  store i64 %3893, i64* %PC, align 8
  %3894 = bitcast i64 %3883 to double
  %3895 = inttoptr i64 %3892 to double*
  %3896 = load double, double* %3895, align 8
  %3897 = fdiv double %3894, %3896
  store double %3897, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %3898 = add i64 %3868, -112
  %3899 = add i64 %3870, 36
  store i64 %3899, i64* %PC, align 8
  %3900 = inttoptr i64 %3898 to i64*
  %3901 = load i64, i64* %3900, align 8
  store i64 %3901, i64* %RAX, align 8, !tbaa !2450
  %3902 = add i64 %3868, -188
  %3903 = add i64 %3870, 43
  store i64 %3903, i64* %PC, align 8
  %3904 = inttoptr i64 %3902 to i32*
  %3905 = load i32, i32* %3904, align 4
  %3906 = sext i32 %3905 to i64
  %3907 = mul nsw i64 %3906, 33800
  store i64 %3907, i64* %RCX, align 8, !tbaa !2450
  %3908 = lshr i64 %3907, 63
  %3909 = add i64 %3907, %3901
  store i64 %3909, i64* %RAX, align 8, !tbaa !2450
  %3910 = icmp ult i64 %3909, %3901
  %3911 = icmp ult i64 %3909, %3907
  %3912 = or i1 %3910, %3911
  %3913 = zext i1 %3912 to i8
  store i8 %3913, i8* %42, align 1, !tbaa !2428
  %3914 = trunc i64 %3909 to i32
  %3915 = and i32 %3914, 255
  %3916 = tail call i32 @llvm.ctpop.i32(i32 %3915) #10
  %3917 = trunc i32 %3916 to i8
  %3918 = and i8 %3917, 1
  %3919 = xor i8 %3918, 1
  store i8 %3919, i8* %49, align 1, !tbaa !2445
  %3920 = xor i64 %3907, %3901
  %3921 = xor i64 %3920, %3909
  %3922 = lshr i64 %3921, 4
  %3923 = trunc i64 %3922 to i8
  %3924 = and i8 %3923, 1
  store i8 %3924, i8* %55, align 1, !tbaa !2446
  %3925 = icmp eq i64 %3909, 0
  %3926 = zext i1 %3925 to i8
  store i8 %3926, i8* %58, align 1, !tbaa !2447
  %3927 = lshr i64 %3909, 63
  %3928 = trunc i64 %3927 to i8
  store i8 %3928, i8* %61, align 1, !tbaa !2448
  %3929 = lshr i64 %3901, 63
  %3930 = xor i64 %3927, %3929
  %3931 = xor i64 %3927, %3908
  %3932 = add nuw nsw i64 %3930, %3931
  %3933 = icmp eq i64 %3932, 2
  %3934 = zext i1 %3933 to i8
  store i8 %3934, i8* %67, align 1, !tbaa !2449
  %3935 = add i64 %3870, 57
  store i64 %3935, i64* %PC, align 8
  %3936 = load i32, i32* %3876, align 4
  %3937 = sext i32 %3936 to i64
  %3938 = mul nsw i64 %3937, 520
  store i64 %3938, i64* %RCX, align 8, !tbaa !2450
  %3939 = lshr i64 %3938, 63
  %3940 = add i64 %3938, %3909
  store i64 %3940, i64* %RAX, align 8, !tbaa !2450
  %3941 = icmp ult i64 %3940, %3909
  %3942 = icmp ult i64 %3940, %3938
  %3943 = or i1 %3941, %3942
  %3944 = zext i1 %3943 to i8
  store i8 %3944, i8* %42, align 1, !tbaa !2428
  %3945 = trunc i64 %3940 to i32
  %3946 = and i32 %3945, 255
  %3947 = tail call i32 @llvm.ctpop.i32(i32 %3946) #10
  %3948 = trunc i32 %3947 to i8
  %3949 = and i8 %3948, 1
  %3950 = xor i8 %3949, 1
  store i8 %3950, i8* %49, align 1, !tbaa !2445
  %3951 = xor i64 %3938, %3909
  %3952 = xor i64 %3951, %3940
  %3953 = lshr i64 %3952, 4
  %3954 = trunc i64 %3953 to i8
  %3955 = and i8 %3954, 1
  store i8 %3955, i8* %55, align 1, !tbaa !2446
  %3956 = icmp eq i64 %3940, 0
  %3957 = zext i1 %3956 to i8
  store i8 %3957, i8* %58, align 1, !tbaa !2447
  %3958 = lshr i64 %3940, 63
  %3959 = trunc i64 %3958 to i8
  store i8 %3959, i8* %61, align 1, !tbaa !2448
  %3960 = xor i64 %3958, %3927
  %3961 = xor i64 %3958, %3939
  %3962 = add nuw nsw i64 %3960, %3961
  %3963 = icmp eq i64 %3962, 2
  %3964 = zext i1 %3963 to i8
  store i8 %3964, i8* %67, align 1, !tbaa !2449
  %3965 = add i64 %3868, -48
  %3966 = add i64 %3870, 71
  store i64 %3966, i64* %PC, align 8
  %3967 = inttoptr i64 %3965 to i32*
  %3968 = load i32, i32* %3967, align 4
  %3969 = sext i32 %3968 to i64
  store i64 %3969, i64* %RCX, align 8, !tbaa !2450
  %3970 = shl nsw i64 %3969, 3
  %3971 = add i64 %3970, %3940
  %3972 = add i64 %3870, 76
  store i64 %3972, i64* %PC, align 8
  %3973 = load double, double* %257, align 1
  %3974 = inttoptr i64 %3971 to double*
  %3975 = load double, double* %3974, align 8
  %3976 = fmul double %3973, %3975
  store double %3976, double* %257, align 1, !tbaa !2453
  %3977 = add i64 %3868, -72
  %3978 = add i64 %3870, 81
  store i64 %3978, i64* %PC, align 8
  %3979 = inttoptr i64 %3977 to i64*
  %3980 = load i64, i64* %3979, align 8
  store i64 %3980, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %3981 = add i64 %3870, 88
  store i64 %3981, i64* %PC, align 8
  %3982 = load i64, i64* %3886, align 8
  store i64 %3982, i64* %RAX, align 8, !tbaa !2450
  %3983 = add i64 %3870, 92
  store i64 %3983, i64* %PC, align 8
  %3984 = load i32, i32* %3876, align 4
  %3985 = sext i32 %3984 to i64
  store i64 %3985, i64* %RCX, align 8, !tbaa !2450
  %3986 = shl nsw i64 %3985, 3
  %3987 = add i64 %3986, %3982
  %3988 = add i64 %3870, 97
  store i64 %3988, i64* %PC, align 8
  %3989 = bitcast i64 %3980 to double
  %3990 = inttoptr i64 %3987 to double*
  %3991 = load double, double* %3990, align 8
  %3992 = fdiv double %3989, %3991
  store double %3992, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %3993 = load i64, i64* %RBP, align 8
  %3994 = add i64 %3993, -96
  %3995 = add i64 %3870, 101
  store i64 %3995, i64* %PC, align 8
  %3996 = inttoptr i64 %3994 to i64*
  %3997 = load i64, i64* %3996, align 8
  store i64 %3997, i64* %RAX, align 8, !tbaa !2450
  %3998 = add i64 %3993, -188
  %3999 = add i64 %3870, 108
  store i64 %3999, i64* %PC, align 8
  %4000 = inttoptr i64 %3998 to i32*
  %4001 = load i32, i32* %4000, align 4
  %4002 = sext i32 %4001 to i64
  %4003 = mul nsw i64 %4002, 520
  store i64 %4003, i64* %RCX, align 8, !tbaa !2450
  %4004 = lshr i64 %4003, 63
  %4005 = add i64 %4003, %3997
  store i64 %4005, i64* %RAX, align 8, !tbaa !2450
  %4006 = icmp ult i64 %4005, %3997
  %4007 = icmp ult i64 %4005, %4003
  %4008 = or i1 %4006, %4007
  %4009 = zext i1 %4008 to i8
  store i8 %4009, i8* %42, align 1, !tbaa !2428
  %4010 = trunc i64 %4005 to i32
  %4011 = and i32 %4010, 255
  %4012 = tail call i32 @llvm.ctpop.i32(i32 %4011) #10
  %4013 = trunc i32 %4012 to i8
  %4014 = and i8 %4013, 1
  %4015 = xor i8 %4014, 1
  store i8 %4015, i8* %49, align 1, !tbaa !2445
  %4016 = xor i64 %4003, %3997
  %4017 = xor i64 %4016, %4005
  %4018 = lshr i64 %4017, 4
  %4019 = trunc i64 %4018 to i8
  %4020 = and i8 %4019, 1
  store i8 %4020, i8* %55, align 1, !tbaa !2446
  %4021 = icmp eq i64 %4005, 0
  %4022 = zext i1 %4021 to i8
  store i8 %4022, i8* %58, align 1, !tbaa !2447
  %4023 = lshr i64 %4005, 63
  %4024 = trunc i64 %4023 to i8
  store i8 %4024, i8* %61, align 1, !tbaa !2448
  %4025 = lshr i64 %3997, 63
  %4026 = xor i64 %4023, %4025
  %4027 = xor i64 %4023, %4004
  %4028 = add nuw nsw i64 %4026, %4027
  %4029 = icmp eq i64 %4028, 2
  %4030 = zext i1 %4029 to i8
  store i8 %4030, i8* %67, align 1, !tbaa !2449
  %4031 = add i64 %3993, -192
  %4032 = add i64 %3870, 125
  store i64 %4032, i64* %PC, align 8
  %4033 = inttoptr i64 %4031 to i32*
  %4034 = load i32, i32* %4033, align 4
  %4035 = sext i32 %4034 to i64
  store i64 %4035, i64* %RCX, align 8, !tbaa !2450
  %4036 = shl nsw i64 %4035, 3
  %4037 = add i64 %4036, %4005
  %4038 = add i64 %3870, 130
  store i64 %4038, i64* %PC, align 8
  %4039 = inttoptr i64 %4037 to double*
  %4040 = load double, double* %4039, align 8
  %4041 = fmul double %3992, %4040
  store double %4041, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4042 = fsub double %3976, %4041
  store double %4042, double* %257, align 1, !tbaa !2453
  %4043 = add i64 %3993, -104
  %4044 = add i64 %3870, 138
  store i64 %4044, i64* %PC, align 8
  %4045 = inttoptr i64 %4043 to i64*
  %4046 = load i64, i64* %4045, align 8
  store i64 %4046, i64* %RAX, align 8, !tbaa !2450
  %4047 = add i64 %3870, 145
  store i64 %4047, i64* %PC, align 8
  %4048 = load i32, i32* %4000, align 4
  %4049 = sext i32 %4048 to i64
  %4050 = mul nsw i64 %4049, 520
  store i64 %4050, i64* %RCX, align 8, !tbaa !2450
  %4051 = lshr i64 %4050, 63
  %4052 = add i64 %4050, %4046
  store i64 %4052, i64* %RAX, align 8, !tbaa !2450
  %4053 = icmp ult i64 %4052, %4046
  %4054 = icmp ult i64 %4052, %4050
  %4055 = or i1 %4053, %4054
  %4056 = zext i1 %4055 to i8
  store i8 %4056, i8* %42, align 1, !tbaa !2428
  %4057 = trunc i64 %4052 to i32
  %4058 = and i32 %4057, 255
  %4059 = tail call i32 @llvm.ctpop.i32(i32 %4058) #10
  %4060 = trunc i32 %4059 to i8
  %4061 = and i8 %4060, 1
  %4062 = xor i8 %4061, 1
  store i8 %4062, i8* %49, align 1, !tbaa !2445
  %4063 = xor i64 %4050, %4046
  %4064 = xor i64 %4063, %4052
  %4065 = lshr i64 %4064, 4
  %4066 = trunc i64 %4065 to i8
  %4067 = and i8 %4066, 1
  store i8 %4067, i8* %55, align 1, !tbaa !2446
  %4068 = icmp eq i64 %4052, 0
  %4069 = zext i1 %4068 to i8
  store i8 %4069, i8* %58, align 1, !tbaa !2447
  %4070 = lshr i64 %4052, 63
  %4071 = trunc i64 %4070 to i8
  store i8 %4071, i8* %61, align 1, !tbaa !2448
  %4072 = lshr i64 %4046, 63
  %4073 = xor i64 %4070, %4072
  %4074 = xor i64 %4070, %4051
  %4075 = add nuw nsw i64 %4073, %4074
  %4076 = icmp eq i64 %4075, 2
  %4077 = zext i1 %4076 to i8
  store i8 %4077, i8* %67, align 1, !tbaa !2449
  %4078 = add i64 %3870, 162
  store i64 %4078, i64* %PC, align 8
  %4079 = load i32, i32* %4033, align 4
  %4080 = sext i32 %4079 to i64
  store i64 %4080, i64* %RCX, align 8, !tbaa !2450
  %4081 = shl nsw i64 %4080, 3
  %4082 = add i64 %4081, %4052
  %4083 = add i64 %3870, 167
  store i64 %4083, i64* %PC, align 8
  %4084 = inttoptr i64 %4082 to double*
  store double %4042, double* %4084, align 8
  %4085 = load i64, i64* %RBP, align 8
  %4086 = add i64 %4085, -160
  %4087 = load i64, i64* %PC, align 8
  %4088 = add i64 %4087, 7
  store i64 %4088, i64* %PC, align 8
  %4089 = inttoptr i64 %4086 to i64*
  %4090 = load i64, i64* %4089, align 8
  store i64 %4090, i64* %RAX, align 8, !tbaa !2450
  %4091 = add i64 %4085, -48
  %4092 = add i64 %4087, 11
  store i64 %4092, i64* %PC, align 8
  %4093 = inttoptr i64 %4091 to i32*
  %4094 = load i32, i32* %4093, align 4
  %4095 = sext i32 %4094 to i64
  store i64 %4095, i64* %RCX, align 8, !tbaa !2450
  %4096 = shl nsw i64 %4095, 3
  %4097 = add i64 %4096, %4090
  %4098 = add i64 %4087, 16
  store i64 %4098, i64* %PC, align 8
  %4099 = inttoptr i64 %4097 to i64*
  %4100 = load i64, i64* %4099, align 8
  store i64 %4100, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %4101 = add i64 %4085, -168
  %4102 = add i64 %4087, 23
  store i64 %4102, i64* %PC, align 8
  %4103 = inttoptr i64 %4101 to i64*
  %4104 = load i64, i64* %4103, align 8
  store i64 %4104, i64* %RAX, align 8, !tbaa !2450
  %4105 = add i64 %4087, 27
  store i64 %4105, i64* %PC, align 8
  %4106 = load i32, i32* %4093, align 4
  %4107 = sext i32 %4106 to i64
  store i64 %4107, i64* %RCX, align 8, !tbaa !2450
  %4108 = shl nsw i64 %4107, 3
  %4109 = add i64 %4108, %4104
  %4110 = add i64 %4087, 32
  store i64 %4110, i64* %PC, align 8
  %4111 = bitcast i64 %4100 to double
  %4112 = inttoptr i64 %4109 to double*
  %4113 = load double, double* %4112, align 8
  %4114 = fdiv double %4111, %4113
  store double %4114, double* %257, align 1, !tbaa !2453
  store i64 0, i64* %258, align 1, !tbaa !2453
  %4115 = add i64 %4085, -136
  %4116 = add i64 %4087, 39
  store i64 %4116, i64* %PC, align 8
  %4117 = inttoptr i64 %4115 to i64*
  %4118 = load i64, i64* %4117, align 8
  store i64 %4118, i64* %RAX, align 8, !tbaa !2450
  %4119 = add i64 %4085, -188
  %4120 = add i64 %4087, 46
  store i64 %4120, i64* %PC, align 8
  %4121 = inttoptr i64 %4119 to i32*
  %4122 = load i32, i32* %4121, align 4
  %4123 = sext i32 %4122 to i64
  %4124 = mul nsw i64 %4123, 33800
  store i64 %4124, i64* %RCX, align 8, !tbaa !2450
  %4125 = lshr i64 %4124, 63
  %4126 = add i64 %4124, %4118
  store i64 %4126, i64* %RAX, align 8, !tbaa !2450
  %4127 = icmp ult i64 %4126, %4118
  %4128 = icmp ult i64 %4126, %4124
  %4129 = or i1 %4127, %4128
  %4130 = zext i1 %4129 to i8
  store i8 %4130, i8* %42, align 1, !tbaa !2428
  %4131 = trunc i64 %4126 to i32
  %4132 = and i32 %4131, 255
  %4133 = tail call i32 @llvm.ctpop.i32(i32 %4132) #10
  %4134 = trunc i32 %4133 to i8
  %4135 = and i8 %4134, 1
  %4136 = xor i8 %4135, 1
  store i8 %4136, i8* %49, align 1, !tbaa !2445
  %4137 = xor i64 %4124, %4118
  %4138 = xor i64 %4137, %4126
  %4139 = lshr i64 %4138, 4
  %4140 = trunc i64 %4139 to i8
  %4141 = and i8 %4140, 1
  store i8 %4141, i8* %55, align 1, !tbaa !2446
  %4142 = icmp eq i64 %4126, 0
  %4143 = zext i1 %4142 to i8
  store i8 %4143, i8* %58, align 1, !tbaa !2447
  %4144 = lshr i64 %4126, 63
  %4145 = trunc i64 %4144 to i8
  store i8 %4145, i8* %61, align 1, !tbaa !2448
  %4146 = lshr i64 %4118, 63
  %4147 = xor i64 %4144, %4146
  %4148 = xor i64 %4144, %4125
  %4149 = add nuw nsw i64 %4147, %4148
  %4150 = icmp eq i64 %4149, 2
  %4151 = zext i1 %4150 to i8
  store i8 %4151, i8* %67, align 1, !tbaa !2449
  %4152 = add i64 %4085, -52
  %4153 = add i64 %4087, 60
  store i64 %4153, i64* %PC, align 8
  %4154 = inttoptr i64 %4152 to i32*
  %4155 = load i32, i32* %4154, align 4
  %4156 = sext i32 %4155 to i64
  %4157 = mul nsw i64 %4156, 520
  store i64 %4157, i64* %RCX, align 8, !tbaa !2450
  %4158 = lshr i64 %4157, 63
  %4159 = add i64 %4157, %4126
  store i64 %4159, i64* %RAX, align 8, !tbaa !2450
  %4160 = icmp ult i64 %4159, %4126
  %4161 = icmp ult i64 %4159, %4157
  %4162 = or i1 %4160, %4161
  %4163 = zext i1 %4162 to i8
  store i8 %4163, i8* %42, align 1, !tbaa !2428
  %4164 = trunc i64 %4159 to i32
  %4165 = and i32 %4164, 255
  %4166 = tail call i32 @llvm.ctpop.i32(i32 %4165) #10
  %4167 = trunc i32 %4166 to i8
  %4168 = and i8 %4167, 1
  %4169 = xor i8 %4168, 1
  store i8 %4169, i8* %49, align 1, !tbaa !2445
  %4170 = xor i64 %4157, %4126
  %4171 = xor i64 %4170, %4159
  %4172 = lshr i64 %4171, 4
  %4173 = trunc i64 %4172 to i8
  %4174 = and i8 %4173, 1
  store i8 %4174, i8* %55, align 1, !tbaa !2446
  %4175 = icmp eq i64 %4159, 0
  %4176 = zext i1 %4175 to i8
  store i8 %4176, i8* %58, align 1, !tbaa !2447
  %4177 = lshr i64 %4159, 63
  %4178 = trunc i64 %4177 to i8
  store i8 %4178, i8* %61, align 1, !tbaa !2448
  %4179 = xor i64 %4177, %4144
  %4180 = xor i64 %4177, %4158
  %4181 = add nuw nsw i64 %4179, %4180
  %4182 = icmp eq i64 %4181, 2
  %4183 = zext i1 %4182 to i8
  store i8 %4183, i8* %67, align 1, !tbaa !2449
  %4184 = add i64 %4087, 74
  store i64 %4184, i64* %PC, align 8
  %4185 = load i32, i32* %4093, align 4
  %4186 = sext i32 %4185 to i64
  store i64 %4186, i64* %RCX, align 8, !tbaa !2450
  %4187 = shl nsw i64 %4186, 3
  %4188 = add i64 %4187, %4159
  %4189 = add i64 %4087, 79
  store i64 %4189, i64* %PC, align 8
  %4190 = load double, double* %257, align 1
  %4191 = inttoptr i64 %4188 to double*
  %4192 = load double, double* %4191, align 8
  %4193 = fmul double %4190, %4192
  store double %4193, double* %257, align 1, !tbaa !2453
  %4194 = add i64 %4085, -64
  %4195 = add i64 %4087, 84
  store i64 %4195, i64* %PC, align 8
  %4196 = inttoptr i64 %4194 to i64*
  %4197 = load i64, i64* %4196, align 8
  store i64 %4197, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %4198 = add i64 %4085, -152
  %4199 = add i64 %4087, 91
  store i64 %4199, i64* %PC, align 8
  %4200 = inttoptr i64 %4198 to i64*
  %4201 = load i64, i64* %4200, align 8
  store i64 %4201, i64* %RAX, align 8, !tbaa !2450
  %4202 = add i64 %4087, 98
  store i64 %4202, i64* %PC, align 8
  %4203 = load i32, i32* %4121, align 4
  %4204 = sext i32 %4203 to i64
  store i64 %4204, i64* %RCX, align 8, !tbaa !2450
  %4205 = shl nsw i64 %4204, 3
  %4206 = add i64 %4205, %4201
  %4207 = add i64 %4087, 103
  store i64 %4207, i64* %PC, align 8
  %4208 = bitcast i64 %4197 to double
  %4209 = inttoptr i64 %4206 to double*
  %4210 = load double, double* %4209, align 8
  %4211 = fmul double %4208, %4210
  store double %4211, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4212 = load i64, i64* %RBP, align 8
  %4213 = add i64 %4212, -168
  %4214 = add i64 %4087, 110
  store i64 %4214, i64* %PC, align 8
  %4215 = inttoptr i64 %4213 to i64*
  %4216 = load i64, i64* %4215, align 8
  store i64 %4216, i64* %RAX, align 8, !tbaa !2450
  %4217 = add i64 %4212, -48
  %4218 = add i64 %4087, 114
  store i64 %4218, i64* %PC, align 8
  %4219 = inttoptr i64 %4217 to i32*
  %4220 = load i32, i32* %4219, align 4
  %4221 = sext i32 %4220 to i64
  store i64 %4221, i64* %RCX, align 8, !tbaa !2450
  %4222 = shl nsw i64 %4221, 3
  %4223 = add i64 %4222, %4216
  %4224 = add i64 %4087, 119
  store i64 %4224, i64* %PC, align 8
  %4225 = inttoptr i64 %4223 to double*
  %4226 = load double, double* %4225, align 8
  %4227 = fdiv double %4211, %4226
  store double %4227, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4228 = add i64 %4212, -104
  %4229 = add i64 %4087, 123
  store i64 %4229, i64* %PC, align 8
  %4230 = inttoptr i64 %4228 to i64*
  %4231 = load i64, i64* %4230, align 8
  store i64 %4231, i64* %RAX, align 8, !tbaa !2450
  %4232 = add i64 %4212, -188
  %4233 = add i64 %4087, 130
  store i64 %4233, i64* %PC, align 8
  %4234 = inttoptr i64 %4232 to i32*
  %4235 = load i32, i32* %4234, align 4
  %4236 = sext i32 %4235 to i64
  %4237 = mul nsw i64 %4236, 520
  store i64 %4237, i64* %RCX, align 8, !tbaa !2450
  %4238 = lshr i64 %4237, 63
  %4239 = add i64 %4237, %4231
  store i64 %4239, i64* %RAX, align 8, !tbaa !2450
  %4240 = icmp ult i64 %4239, %4231
  %4241 = icmp ult i64 %4239, %4237
  %4242 = or i1 %4240, %4241
  %4243 = zext i1 %4242 to i8
  store i8 %4243, i8* %42, align 1, !tbaa !2428
  %4244 = trunc i64 %4239 to i32
  %4245 = and i32 %4244, 255
  %4246 = tail call i32 @llvm.ctpop.i32(i32 %4245) #10
  %4247 = trunc i32 %4246 to i8
  %4248 = and i8 %4247, 1
  %4249 = xor i8 %4248, 1
  store i8 %4249, i8* %49, align 1, !tbaa !2445
  %4250 = xor i64 %4237, %4231
  %4251 = xor i64 %4250, %4239
  %4252 = lshr i64 %4251, 4
  %4253 = trunc i64 %4252 to i8
  %4254 = and i8 %4253, 1
  store i8 %4254, i8* %55, align 1, !tbaa !2446
  %4255 = icmp eq i64 %4239, 0
  %4256 = zext i1 %4255 to i8
  store i8 %4256, i8* %58, align 1, !tbaa !2447
  %4257 = lshr i64 %4239, 63
  %4258 = trunc i64 %4257 to i8
  store i8 %4258, i8* %61, align 1, !tbaa !2448
  %4259 = lshr i64 %4231, 63
  %4260 = xor i64 %4257, %4259
  %4261 = xor i64 %4257, %4238
  %4262 = add nuw nsw i64 %4260, %4261
  %4263 = icmp eq i64 %4262, 2
  %4264 = zext i1 %4263 to i8
  store i8 %4264, i8* %67, align 1, !tbaa !2449
  %4265 = add i64 %4212, -192
  %4266 = add i64 %4087, 147
  store i64 %4266, i64* %PC, align 8
  %4267 = inttoptr i64 %4265 to i32*
  %4268 = load i32, i32* %4267, align 4
  %4269 = sext i32 %4268 to i64
  store i64 %4269, i64* %RCX, align 8, !tbaa !2450
  %4270 = shl nsw i64 %4269, 3
  %4271 = add i64 %4270, %4239
  %4272 = add i64 %4087, 152
  store i64 %4272, i64* %PC, align 8
  %4273 = inttoptr i64 %4271 to double*
  %4274 = load double, double* %4273, align 8
  %4275 = fmul double %4227, %4274
  store double %4275, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4276 = load double, double* %257, align 1
  %4277 = fadd double %4275, %4276
  store double %4277, double* %257, align 1, !tbaa !2453
  %4278 = add i64 %4212, -64
  %4279 = add i64 %4087, 161
  store i64 %4279, i64* %PC, align 8
  %4280 = inttoptr i64 %4278 to i64*
  %4281 = load i64, i64* %4280, align 8
  store i64 %4281, i64* %156, align 1, !tbaa !2453
  store double 0.000000e+00, double* %261, align 1, !tbaa !2453
  %4282 = add i64 %4212, -144
  %4283 = add i64 %4087, 168
  store i64 %4283, i64* %PC, align 8
  %4284 = inttoptr i64 %4282 to i64*
  %4285 = load i64, i64* %4284, align 8
  store i64 %4285, i64* %RAX, align 8, !tbaa !2450
  %4286 = add i64 %4087, 175
  store i64 %4286, i64* %PC, align 8
  %4287 = load i32, i32* %4234, align 4
  %4288 = sext i32 %4287 to i64
  store i64 %4288, i64* %RCX, align 8, !tbaa !2450
  %4289 = shl nsw i64 %4288, 3
  %4290 = add i64 %4289, %4285
  %4291 = add i64 %4087, 180
  store i64 %4291, i64* %PC, align 8
  %4292 = bitcast i64 %4281 to double
  %4293 = inttoptr i64 %4290 to double*
  %4294 = load double, double* %4293, align 8
  %4295 = fmul double %4292, %4294
  store double %4295, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4296 = add i64 %4087, 187
  store i64 %4296, i64* %PC, align 8
  %4297 = load i64, i64* %4215, align 8
  store i64 %4297, i64* %RAX, align 8, !tbaa !2450
  %4298 = add i64 %4087, 191
  store i64 %4298, i64* %PC, align 8
  %4299 = load i32, i32* %4219, align 4
  %4300 = sext i32 %4299 to i64
  store i64 %4300, i64* %RCX, align 8, !tbaa !2450
  %4301 = shl nsw i64 %4300, 3
  %4302 = add i64 %4301, %4297
  %4303 = add i64 %4087, 196
  store i64 %4303, i64* %PC, align 8
  %4304 = inttoptr i64 %4302 to double*
  %4305 = load double, double* %4304, align 8
  %4306 = fdiv double %4295, %4305
  store double %4306, double* %155, align 1, !tbaa !2453
  store i64 0, i64* %260, align 1, !tbaa !2453
  %4307 = add i64 %4212, -112
  %4308 = add i64 %4087, 200
  store i64 %4308, i64* %PC, align 8
  %4309 = inttoptr i64 %4307 to i64*
  %4310 = load i64, i64* %4309, align 8
  store i64 %4310, i64* %RAX, align 8, !tbaa !2450
  %4311 = add i64 %4087, 207
  store i64 %4311, i64* %PC, align 8
  %4312 = load i32, i32* %4234, align 4
  %4313 = sext i32 %4312 to i64
  %4314 = mul nsw i64 %4313, 33800
  store i64 %4314, i64* %RCX, align 8, !tbaa !2450
  %4315 = lshr i64 %4314, 63
  %4316 = add i64 %4314, %4310
  store i64 %4316, i64* %RAX, align 8, !tbaa !2450
  %4317 = icmp ult i64 %4316, %4310
  %4318 = icmp ult i64 %4316, %4314
  %4319 = or i1 %4317, %4318
  %4320 = zext i1 %4319 to i8
  store i8 %4320, i8* %42, align 1, !tbaa !2428
  %4321 = trunc i64 %4316 to i32
  %4322 = and i32 %4321, 255
  %4323 = tail call i32 @llvm.ctpop.i32(i32 %4322) #10
  %4324 = trunc i32 %4323 to i8
  %4325 = and i8 %4324, 1
  %4326 = xor i8 %4325, 1
  store i8 %4326, i8* %49, align 1, !tbaa !2445
  %4327 = xor i64 %4314, %4310
  %4328 = xor i64 %4327, %4316
  %4329 = lshr i64 %4328, 4
  %4330 = trunc i64 %4329 to i8
  %4331 = and i8 %4330, 1
  store i8 %4331, i8* %55, align 1, !tbaa !2446
  %4332 = icmp eq i64 %4316, 0
  %4333 = zext i1 %4332 to i8
  store i8 %4333, i8* %58, align 1, !tbaa !2447
  %4334 = lshr i64 %4316, 63
  %4335 = trunc i64 %4334 to i8
  store i8 %4335, i8* %61, align 1, !tbaa !2448
  %4336 = lshr i64 %4310, 63
  %4337 = xor i64 %4334, %4336
  %4338 = xor i64 %4334, %4315
  %4339 = add nuw nsw i64 %4337, %4338
  %4340 = icmp eq i64 %4339, 2
  %4341 = zext i1 %4340 to i8
  store i8 %4341, i8* %67, align 1, !tbaa !2449
  %4342 = load i64, i64* %RBP, align 8
  %4343 = add i64 %4342, -52
  %4344 = add i64 %4087, 221
  store i64 %4344, i64* %PC, align 8
  %4345 = inttoptr i64 %4343 to i32*
  %4346 = load i32, i32* %4345, align 4
  %4347 = sext i32 %4346 to i64
  %4348 = mul nsw i64 %4347, 520
  store i64 %4348, i64* %RCX, align 8, !tbaa !2450
  %4349 = lshr i64 %4348, 63
  %4350 = add i64 %4348, %4316
  store i64 %4350, i64* %RAX, align 8, !tbaa !2450
  %4351 = icmp ult i64 %4350, %4316
  %4352 = icmp ult i64 %4350, %4348
  %4353 = or i1 %4351, %4352
  %4354 = zext i1 %4353 to i8
  store i8 %4354, i8* %42, align 1, !tbaa !2428
  %4355 = trunc i64 %4350 to i32
  %4356 = and i32 %4355, 255
  %4357 = tail call i32 @llvm.ctpop.i32(i32 %4356) #10
  %4358 = trunc i32 %4357 to i8
  %4359 = and i8 %4358, 1
  %4360 = xor i8 %4359, 1
  store i8 %4360, i8* %49, align 1, !tbaa !2445
  %4361 = xor i64 %4348, %4316
  %4362 = xor i64 %4361, %4350
  %4363 = lshr i64 %4362, 4
  %4364 = trunc i64 %4363 to i8
  %4365 = and i8 %4364, 1
  store i8 %4365, i8* %55, align 1, !tbaa !2446
  %4366 = icmp eq i64 %4350, 0
  %4367 = zext i1 %4366 to i8
  store i8 %4367, i8* %58, align 1, !tbaa !2447
  %4368 = lshr i64 %4350, 63
  %4369 = trunc i64 %4368 to i8
  store i8 %4369, i8* %61, align 1, !tbaa !2448
  %4370 = xor i64 %4368, %4334
  %4371 = xor i64 %4368, %4349
  %4372 = add nuw nsw i64 %4370, %4371
  %4373 = icmp eq i64 %4372, 2
  %4374 = zext i1 %4373 to i8
  store i8 %4374, i8* %67, align 1, !tbaa !2449
  %4375 = add i64 %4342, -48
  %4376 = add i64 %4087, 235
  store i64 %4376, i64* %PC, align 8
  %4377 = inttoptr i64 %4375 to i32*
  %4378 = load i32, i32* %4377, align 4
  %4379 = sext i32 %4378 to i64
  store i64 %4379, i64* %RCX, align 8, !tbaa !2450
  %4380 = shl nsw i64 %4379, 3
  %4381 = add i64 %4380, %4350
  %4382 = add i64 %4087, 240
  store i64 %4382, i64* %PC, align 8
  %4383 = load double, double* %155, align 1
  %4384 = inttoptr i64 %4381 to double*
  %4385 = load double, double* %4384, align 8
  %4386 = fmul double %4383, %4385
  store double %4386, double* %155, align 1, !tbaa !2453
  %4387 = load double, double* %257, align 1
  %4388 = fsub double %4387, %4386
  store double %4388, double* %257, align 1, !tbaa !2453
  %4389 = add i64 %4342, -136
  %4390 = add i64 %4087, 251
  store i64 %4390, i64* %PC, align 8
  %4391 = inttoptr i64 %4389 to i64*
  %4392 = load i64, i64* %4391, align 8
  store i64 %4392, i64* %RAX, align 8, !tbaa !2450
  %4393 = add i64 %4342, -188
  %4394 = add i64 %4087, 258
  store i64 %4394, i64* %PC, align 8
  %4395 = inttoptr i64 %4393 to i32*
  %4396 = load i32, i32* %4395, align 4
  %4397 = sext i32 %4396 to i64
  %4398 = mul nsw i64 %4397, 33800
  store i64 %4398, i64* %RCX, align 8, !tbaa !2450
  %4399 = lshr i64 %4398, 63
  %4400 = add i64 %4398, %4392
  store i64 %4400, i64* %RAX, align 8, !tbaa !2450
  %4401 = icmp ult i64 %4400, %4392
  %4402 = icmp ult i64 %4400, %4398
  %4403 = or i1 %4401, %4402
  %4404 = zext i1 %4403 to i8
  store i8 %4404, i8* %42, align 1, !tbaa !2428
  %4405 = trunc i64 %4400 to i32
  %4406 = and i32 %4405, 255
  %4407 = tail call i32 @llvm.ctpop.i32(i32 %4406) #10
  %4408 = trunc i32 %4407 to i8
  %4409 = and i8 %4408, 1
  %4410 = xor i8 %4409, 1
  store i8 %4410, i8* %49, align 1, !tbaa !2445
  %4411 = xor i64 %4398, %4392
  %4412 = xor i64 %4411, %4400
  %4413 = lshr i64 %4412, 4
  %4414 = trunc i64 %4413 to i8
  %4415 = and i8 %4414, 1
  store i8 %4415, i8* %55, align 1, !tbaa !2446
  %4416 = icmp eq i64 %4400, 0
  %4417 = zext i1 %4416 to i8
  store i8 %4417, i8* %58, align 1, !tbaa !2447
  %4418 = lshr i64 %4400, 63
  %4419 = trunc i64 %4418 to i8
  store i8 %4419, i8* %61, align 1, !tbaa !2448
  %4420 = lshr i64 %4392, 63
  %4421 = xor i64 %4418, %4420
  %4422 = xor i64 %4418, %4399
  %4423 = add nuw nsw i64 %4421, %4422
  %4424 = icmp eq i64 %4423, 2
  %4425 = zext i1 %4424 to i8
  store i8 %4425, i8* %67, align 1, !tbaa !2449
  %4426 = load i64, i64* %RBP, align 8
  %4427 = add i64 %4426, -52
  %4428 = add i64 %4087, 272
  store i64 %4428, i64* %PC, align 8
  %4429 = inttoptr i64 %4427 to i32*
  %4430 = load i32, i32* %4429, align 4
  %4431 = sext i32 %4430 to i64
  %4432 = mul nsw i64 %4431, 520
  store i64 %4432, i64* %RCX, align 8, !tbaa !2450
  %4433 = lshr i64 %4432, 63
  %4434 = add i64 %4432, %4400
  store i64 %4434, i64* %RAX, align 8, !tbaa !2450
  %4435 = icmp ult i64 %4434, %4400
  %4436 = icmp ult i64 %4434, %4432
  %4437 = or i1 %4435, %4436
  %4438 = zext i1 %4437 to i8
  store i8 %4438, i8* %42, align 1, !tbaa !2428
  %4439 = trunc i64 %4434 to i32
  %4440 = and i32 %4439, 255
  %4441 = tail call i32 @llvm.ctpop.i32(i32 %4440) #10
  %4442 = trunc i32 %4441 to i8
  %4443 = and i8 %4442, 1
  %4444 = xor i8 %4443, 1
  store i8 %4444, i8* %49, align 1, !tbaa !2445
  %4445 = xor i64 %4432, %4400
  %4446 = xor i64 %4445, %4434
  %4447 = lshr i64 %4446, 4
  %4448 = trunc i64 %4447 to i8
  %4449 = and i8 %4448, 1
  store i8 %4449, i8* %55, align 1, !tbaa !2446
  %4450 = icmp eq i64 %4434, 0
  %4451 = zext i1 %4450 to i8
  store i8 %4451, i8* %58, align 1, !tbaa !2447
  %4452 = lshr i64 %4434, 63
  %4453 = trunc i64 %4452 to i8
  store i8 %4453, i8* %61, align 1, !tbaa !2448
  %4454 = xor i64 %4452, %4418
  %4455 = xor i64 %4452, %4433
  %4456 = add nuw nsw i64 %4454, %4455
  %4457 = icmp eq i64 %4456, 2
  %4458 = zext i1 %4457 to i8
  store i8 %4458, i8* %67, align 1, !tbaa !2449
  %4459 = add i64 %4426, -48
  %4460 = add i64 %4087, 286
  store i64 %4460, i64* %PC, align 8
  %4461 = inttoptr i64 %4459 to i32*
  %4462 = load i32, i32* %4461, align 4
  %4463 = sext i32 %4462 to i64
  store i64 %4463, i64* %RCX, align 8, !tbaa !2450
  %4464 = shl nsw i64 %4463, 3
  %4465 = add i64 %4464, %4434
  %4466 = add i64 %4087, 291
  store i64 %4466, i64* %PC, align 8
  %4467 = load i64, i64* %148, align 1
  %4468 = inttoptr i64 %4465 to i64*
  store i64 %4467, i64* %4468, align 8
  %4469 = load i64, i64* %RBP, align 8
  %4470 = add i64 %4469, -104
  %4471 = load i64, i64* %PC, align 8
  %4472 = add i64 %4471, 4
  store i64 %4472, i64* %PC, align 8
  %4473 = inttoptr i64 %4470 to i64*
  %4474 = load i64, i64* %4473, align 8
  store i64 %4474, i64* %RAX, align 8, !tbaa !2450
  %4475 = add i64 %4469, -188
  %4476 = add i64 %4471, 11
  store i64 %4476, i64* %PC, align 8
  %4477 = inttoptr i64 %4475 to i32*
  %4478 = load i32, i32* %4477, align 4
  %4479 = sext i32 %4478 to i64
  %4480 = mul nsw i64 %4479, 520
  store i64 %4480, i64* %RCX, align 8, !tbaa !2450
  %4481 = lshr i64 %4480, 63
  %4482 = add i64 %4480, %4474
  store i64 %4482, i64* %RAX, align 8, !tbaa !2450
  %4483 = icmp ult i64 %4482, %4474
  %4484 = icmp ult i64 %4482, %4480
  %4485 = or i1 %4483, %4484
  %4486 = zext i1 %4485 to i8
  store i8 %4486, i8* %42, align 1, !tbaa !2428
  %4487 = trunc i64 %4482 to i32
  %4488 = and i32 %4487, 255
  %4489 = tail call i32 @llvm.ctpop.i32(i32 %4488) #10
  %4490 = trunc i32 %4489 to i8
  %4491 = and i8 %4490, 1
  %4492 = xor i8 %4491, 1
  store i8 %4492, i8* %49, align 1, !tbaa !2445
  %4493 = xor i64 %4480, %4474
  %4494 = xor i64 %4493, %4482
  %4495 = lshr i64 %4494, 4
  %4496 = trunc i64 %4495 to i8
  %4497 = and i8 %4496, 1
  store i8 %4497, i8* %55, align 1, !tbaa !2446
  %4498 = icmp eq i64 %4482, 0
  %4499 = zext i1 %4498 to i8
  store i8 %4499, i8* %58, align 1, !tbaa !2447
  %4500 = lshr i64 %4482, 63
  %4501 = trunc i64 %4500 to i8
  store i8 %4501, i8* %61, align 1, !tbaa !2448
  %4502 = lshr i64 %4474, 63
  %4503 = xor i64 %4500, %4502
  %4504 = xor i64 %4500, %4481
  %4505 = add nuw nsw i64 %4503, %4504
  %4506 = icmp eq i64 %4505, 2
  %4507 = zext i1 %4506 to i8
  store i8 %4507, i8* %67, align 1, !tbaa !2449
  %4508 = add i64 %4469, -192
  %4509 = add i64 %4471, 28
  store i64 %4509, i64* %PC, align 8
  %4510 = inttoptr i64 %4508 to i32*
  %4511 = load i32, i32* %4510, align 4
  %4512 = sext i32 %4511 to i64
  store i64 %4512, i64* %RCX, align 8, !tbaa !2450
  %4513 = shl nsw i64 %4512, 3
  %4514 = add i64 %4513, %4482
  %4515 = add i64 %4471, 33
  store i64 %4515, i64* %PC, align 8
  %4516 = inttoptr i64 %4514 to i64*
  %4517 = load i64, i64* %4516, align 8
  store i64 %4517, i64* %148, align 1, !tbaa !2453
  store double 0.000000e+00, double* %259, align 1, !tbaa !2453
  %4518 = add i64 %4469, -112
  %4519 = add i64 %4471, 37
  store i64 %4519, i64* %PC, align 8
  %4520 = inttoptr i64 %4518 to i64*
  %4521 = load i64, i64* %4520, align 8
  store i64 %4521, i64* %RAX, align 8, !tbaa !2450
  %4522 = add i64 %4471, 44
  store i64 %4522, i64* %PC, align 8
  %4523 = load i32, i32* %4477, align 4
  %4524 = sext i32 %4523 to i64
  %4525 = mul nsw i64 %4524, 33800
  store i64 %4525, i64* %RCX, align 8, !tbaa !2450
  %4526 = lshr i64 %4525, 63
  %4527 = add i64 %4525, %4521
  store i64 %4527, i64* %RAX, align 8, !tbaa !2450
  %4528 = icmp ult i64 %4527, %4521
  %4529 = icmp ult i64 %4527, %4525
  %4530 = or i1 %4528, %4529
  %4531 = zext i1 %4530 to i8
  store i8 %4531, i8* %42, align 1, !tbaa !2428
  %4532 = trunc i64 %4527 to i32
  %4533 = and i32 %4532, 255
  %4534 = tail call i32 @llvm.ctpop.i32(i32 %4533) #10
  %4535 = trunc i32 %4534 to i8
  %4536 = and i8 %4535, 1
  %4537 = xor i8 %4536, 1
  store i8 %4537, i8* %49, align 1, !tbaa !2445
  %4538 = xor i64 %4525, %4521
  %4539 = xor i64 %4538, %4527
  %4540 = lshr i64 %4539, 4
  %4541 = trunc i64 %4540 to i8
  %4542 = and i8 %4541, 1
  store i8 %4542, i8* %55, align 1, !tbaa !2446
  %4543 = icmp eq i64 %4527, 0
  %4544 = zext i1 %4543 to i8
  store i8 %4544, i8* %58, align 1, !tbaa !2447
  %4545 = lshr i64 %4527, 63
  %4546 = trunc i64 %4545 to i8
  store i8 %4546, i8* %61, align 1, !tbaa !2448
  %4547 = lshr i64 %4521, 63
  %4548 = xor i64 %4545, %4547
  %4549 = xor i64 %4545, %4526
  %4550 = add nuw nsw i64 %4548, %4549
  %4551 = icmp eq i64 %4550, 2
  %4552 = zext i1 %4551 to i8
  store i8 %4552, i8* %67, align 1, !tbaa !2449
  %4553 = load i64, i64* %RBP, align 8
  %4554 = add i64 %4553, -52
  %4555 = add i64 %4471, 58
  store i64 %4555, i64* %PC, align 8
  %4556 = inttoptr i64 %4554 to i32*
  %4557 = load i32, i32* %4556, align 4
  %4558 = sext i32 %4557 to i64
  %4559 = mul nsw i64 %4558, 520
  store i64 %4559, i64* %RCX, align 8, !tbaa !2450
  %4560 = lshr i64 %4559, 63
  %4561 = add i64 %4559, %4527
  store i64 %4561, i64* %RAX, align 8, !tbaa !2450
  %4562 = icmp ult i64 %4561, %4527
  %4563 = icmp ult i64 %4561, %4559
  %4564 = or i1 %4562, %4563
  %4565 = zext i1 %4564 to i8
  store i8 %4565, i8* %42, align 1, !tbaa !2428
  %4566 = trunc i64 %4561 to i32
  %4567 = and i32 %4566, 255
  %4568 = tail call i32 @llvm.ctpop.i32(i32 %4567) #10
  %4569 = trunc i32 %4568 to i8
  %4570 = and i8 %4569, 1
  %4571 = xor i8 %4570, 1
  store i8 %4571, i8* %49, align 1, !tbaa !2445
  %4572 = xor i64 %4559, %4527
  %4573 = xor i64 %4572, %4561
  %4574 = lshr i64 %4573, 4
  %4575 = trunc i64 %4574 to i8
  %4576 = and i8 %4575, 1
  store i8 %4576, i8* %55, align 1, !tbaa !2446
  %4577 = icmp eq i64 %4561, 0
  %4578 = zext i1 %4577 to i8
  store i8 %4578, i8* %58, align 1, !tbaa !2447
  %4579 = lshr i64 %4561, 63
  %4580 = trunc i64 %4579 to i8
  store i8 %4580, i8* %61, align 1, !tbaa !2448
  %4581 = xor i64 %4579, %4545
  %4582 = xor i64 %4579, %4560
  %4583 = add nuw nsw i64 %4581, %4582
  %4584 = icmp eq i64 %4583, 2
  %4585 = zext i1 %4584 to i8
  store i8 %4585, i8* %67, align 1, !tbaa !2449
  %4586 = add i64 %4553, -48
  %4587 = add i64 %4471, 72
  store i64 %4587, i64* %PC, align 8
  %4588 = inttoptr i64 %4586 to i32*
  %4589 = load i32, i32* %4588, align 4
  %4590 = sext i32 %4589 to i64
  store i64 %4590, i64* %RCX, align 8, !tbaa !2450
  %4591 = shl nsw i64 %4590, 3
  %4592 = add i64 %4591, %4561
  %4593 = add i64 %4471, 77
  store i64 %4593, i64* %PC, align 8
  %4594 = load i64, i64* %148, align 1
  %4595 = inttoptr i64 %4592 to i64*
  store i64 %4594, i64* %4595, align 8
  %4596 = load i64, i64* %RBP, align 8
  %4597 = add i64 %4596, -192
  %4598 = load i64, i64* %PC, align 8
  %4599 = add i64 %4598, 6
  store i64 %4599, i64* %PC, align 8
  %4600 = inttoptr i64 %4597 to i32*
  %4601 = load i32, i32* %4600, align 4
  %4602 = add i32 %4601, 1
  %4603 = zext i32 %4602 to i64
  store i64 %4603, i64* %RAX, align 8, !tbaa !2450
  %4604 = icmp eq i32 %4601, -1
  %4605 = icmp eq i32 %4602, 0
  %4606 = or i1 %4604, %4605
  %4607 = zext i1 %4606 to i8
  store i8 %4607, i8* %42, align 1, !tbaa !2428
  %4608 = and i32 %4602, 255
  %4609 = tail call i32 @llvm.ctpop.i32(i32 %4608) #10
  %4610 = trunc i32 %4609 to i8
  %4611 = and i8 %4610, 1
  %4612 = xor i8 %4611, 1
  store i8 %4612, i8* %49, align 1, !tbaa !2445
  %4613 = xor i32 %4602, %4601
  %4614 = lshr i32 %4613, 4
  %4615 = trunc i32 %4614 to i8
  %4616 = and i8 %4615, 1
  store i8 %4616, i8* %55, align 1, !tbaa !2446
  %4617 = zext i1 %4605 to i8
  store i8 %4617, i8* %58, align 1, !tbaa !2447
  %4618 = lshr i32 %4602, 31
  %4619 = trunc i32 %4618 to i8
  store i8 %4619, i8* %61, align 1, !tbaa !2448
  %4620 = lshr i32 %4601, 31
  %4621 = xor i32 %4618, %4620
  %4622 = add nuw nsw i32 %4621, %4618
  %4623 = icmp eq i32 %4622, 2
  %4624 = zext i1 %4623 to i8
  store i8 %4624, i8* %67, align 1, !tbaa !2449
  %4625 = add i64 %4598, 15
  store i64 %4625, i64* %PC, align 8
  store i32 %4602, i32* %4600, align 4
  %4626 = load i64, i64* %PC, align 8
  %4627 = add i64 %4626, -3219
  store i64 %4627, i64* %PC, align 8, !tbaa !2450
  br label %block_4015aa

block_4015a0:                                     ; preds = %block_401591
  %4628 = add i64 %2352, -192
  %4629 = add i64 %2388, 10
  store i64 %4629, i64* %PC, align 8
  %4630 = inttoptr i64 %4628 to i32*
  store i32 0, i32* %4630, align 4
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_4015aa

block_401c30:                                     ; preds = %block_401923, %block_401c3f
  %4631 = phi i64 [ %.pre12, %block_401923 ], [ %1305, %block_401c3f ]
  %4632 = load i64, i64* %RBP, align 8
  %4633 = add i64 %4632, -196
  %4634 = add i64 %4631, 6
  store i64 %4634, i64* %PC, align 8
  %4635 = inttoptr i64 %4633 to i32*
  %4636 = load i32, i32* %4635, align 4
  %4637 = zext i32 %4636 to i64
  store i64 %4637, i64* %RAX, align 8, !tbaa !2450
  %4638 = add i64 %4632, -48
  %4639 = add i64 %4631, 9
  store i64 %4639, i64* %PC, align 8
  %4640 = inttoptr i64 %4638 to i32*
  %4641 = load i32, i32* %4640, align 4
  %4642 = sub i32 %4636, %4641
  %4643 = icmp ult i32 %4636, %4641
  %4644 = zext i1 %4643 to i8
  store i8 %4644, i8* %42, align 1, !tbaa !2428
  %4645 = and i32 %4642, 255
  %4646 = tail call i32 @llvm.ctpop.i32(i32 %4645) #10
  %4647 = trunc i32 %4646 to i8
  %4648 = and i8 %4647, 1
  %4649 = xor i8 %4648, 1
  store i8 %4649, i8* %49, align 1, !tbaa !2445
  %4650 = xor i32 %4641, %4636
  %4651 = xor i32 %4650, %4642
  %4652 = lshr i32 %4651, 4
  %4653 = trunc i32 %4652 to i8
  %4654 = and i8 %4653, 1
  store i8 %4654, i8* %55, align 1, !tbaa !2446
  %4655 = icmp eq i32 %4642, 0
  %4656 = zext i1 %4655 to i8
  store i8 %4656, i8* %58, align 1, !tbaa !2447
  %4657 = lshr i32 %4642, 31
  %4658 = trunc i32 %4657 to i8
  store i8 %4658, i8* %61, align 1, !tbaa !2448
  %4659 = lshr i32 %4636, 31
  %4660 = lshr i32 %4641, 31
  %4661 = xor i32 %4660, %4659
  %4662 = xor i32 %4657, %4659
  %4663 = add nuw nsw i32 %4662, %4661
  %4664 = icmp eq i32 %4663, 2
  %4665 = zext i1 %4664 to i8
  store i8 %4665, i8* %67, align 1, !tbaa !2449
  %4666 = icmp ne i8 %4658, 0
  %4667 = xor i1 %4666, %4664
  %.v14 = select i1 %4667, i64 15, i64 818
  %4668 = add i64 %.v14, %4631
  %4669 = add i64 %4632, -120
  %4670 = add i64 %4668, 4
  store i64 %4670, i64* %PC, align 8
  %4671 = inttoptr i64 %4669 to i64*
  %4672 = load i64, i64* %4671, align 8
  store i64 %4672, i64* %RAX, align 8, !tbaa !2450
  %4673 = add i64 %4632, -188
  %4674 = add i64 %4668, 11
  store i64 %4674, i64* %PC, align 8
  %4675 = inttoptr i64 %4673 to i32*
  %4676 = load i32, i32* %4675, align 4
  %4677 = sext i32 %4676 to i64
  %4678 = mul nsw i64 %4677, 33800
  store i64 %4678, i64* %RCX, align 8, !tbaa !2450
  %4679 = lshr i64 %4678, 63
  %4680 = add i64 %4678, %4672
  store i64 %4680, i64* %RAX, align 8, !tbaa !2450
  %4681 = icmp ult i64 %4680, %4672
  %4682 = icmp ult i64 %4680, %4678
  %4683 = or i1 %4681, %4682
  %4684 = zext i1 %4683 to i8
  store i8 %4684, i8* %42, align 1, !tbaa !2428
  %4685 = trunc i64 %4680 to i32
  %4686 = and i32 %4685, 255
  %4687 = tail call i32 @llvm.ctpop.i32(i32 %4686) #10
  %4688 = trunc i32 %4687 to i8
  %4689 = and i8 %4688, 1
  %4690 = xor i8 %4689, 1
  store i8 %4690, i8* %49, align 1, !tbaa !2445
  %4691 = xor i64 %4678, %4672
  %4692 = xor i64 %4691, %4680
  %4693 = lshr i64 %4692, 4
  %4694 = trunc i64 %4693 to i8
  %4695 = and i8 %4694, 1
  store i8 %4695, i8* %55, align 1, !tbaa !2446
  %4696 = icmp eq i64 %4680, 0
  %4697 = zext i1 %4696 to i8
  store i8 %4697, i8* %58, align 1, !tbaa !2447
  %4698 = lshr i64 %4680, 63
  %4699 = trunc i64 %4698 to i8
  store i8 %4699, i8* %61, align 1, !tbaa !2448
  %4700 = lshr i64 %4672, 63
  %4701 = xor i64 %4698, %4700
  %4702 = xor i64 %4698, %4679
  %4703 = add nuw nsw i64 %4701, %4702
  %4704 = icmp eq i64 %4703, 2
  %4705 = zext i1 %4704 to i8
  store i8 %4705, i8* %67, align 1, !tbaa !2449
  %4706 = add i64 %4632, -52
  %4707 = add i64 %4668, 25
  store i64 %4707, i64* %PC, align 8
  %4708 = inttoptr i64 %4706 to i32*
  %4709 = load i32, i32* %4708, align 4
  %4710 = sext i32 %4709 to i64
  %4711 = mul nsw i64 %4710, 520
  store i64 %4711, i64* %RCX, align 8, !tbaa !2450
  %4712 = lshr i64 %4711, 63
  %4713 = add i64 %4668, 35
  store i64 %4713, i64* %PC, align 8
  %4714 = add i64 %4711, %4680
  store i64 %4714, i64* %RAX, align 8, !tbaa !2450
  %4715 = icmp ult i64 %4714, %4680
  %4716 = icmp ult i64 %4714, %4711
  %4717 = or i1 %4715, %4716
  %4718 = zext i1 %4717 to i8
  store i8 %4718, i8* %42, align 1, !tbaa !2428
  %4719 = trunc i64 %4714 to i32
  %4720 = and i32 %4719, 255
  %4721 = tail call i32 @llvm.ctpop.i32(i32 %4720) #10
  %4722 = trunc i32 %4721 to i8
  %4723 = and i8 %4722, 1
  %4724 = xor i8 %4723, 1
  store i8 %4724, i8* %49, align 1, !tbaa !2445
  %4725 = xor i64 %4711, %4680
  %4726 = xor i64 %4725, %4714
  %4727 = lshr i64 %4726, 4
  %4728 = trunc i64 %4727 to i8
  %4729 = and i8 %4728, 1
  store i8 %4729, i8* %55, align 1, !tbaa !2446
  %4730 = icmp eq i64 %4714, 0
  %4731 = zext i1 %4730 to i8
  store i8 %4731, i8* %58, align 1, !tbaa !2447
  %4732 = lshr i64 %4714, 63
  %4733 = trunc i64 %4732 to i8
  store i8 %4733, i8* %61, align 1, !tbaa !2448
  %4734 = xor i64 %4732, %4698
  %4735 = xor i64 %4732, %4712
  %4736 = add nuw nsw i64 %4734, %4735
  %4737 = icmp eq i64 %4736, 2
  %4738 = zext i1 %4737 to i8
  store i8 %4738, i8* %67, align 1, !tbaa !2449
  br i1 %4667, label %block_401c3f, label %block_401f62
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006d0_frame_dummy(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4006d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2450
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2450
  store i64 %6, i64* %5, align 8, !tbaa !2450
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2450
  %13 = tail call %struct.Memory* @sub_400660_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4031c0_print_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4031c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %8 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %R9 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2450
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2450
  %15 = add i64 %11, -104
  store i64 %15, i64* %RSP, align 8, !tbaa !2450
  %16 = icmp ult i64 %12, 96
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2428
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #10
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2445
  %26 = xor i64 %12, %15
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !2446
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = lshr i64 %15, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !2448
  %37 = lshr i64 %12, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = add i64 %11, 8
  %44 = add i64 %14, 11
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %RAX, align 8, !tbaa !2450
  %47 = add i64 %11, -12
  %48 = load i32, i32* %EDI, align 4
  %49 = add i64 %14, 14
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = load i32, i32* %ESI, align 4
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i32*
  store i32 %53, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -12
  %59 = load i32, i32* %EDX, align 4
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i32*
  store i32 %59, i32* %62, align 4
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -24
  %65 = load i64, i64* %RCX, align 8
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68, align 8
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -32
  %71 = load i64, i64* %R8, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -40
  %77 = load i64, i64* %R9, align 8
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %76 to i64*
  store i64 %77, i64* %80, align 8
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -48
  %83 = load i64, i64* %RAX, align 8
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %86, align 8
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -52
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 7
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i32*
  store i32 0, i32* %91, align 4
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to double*
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_4031ec

block_40321e:                                     ; preds = %block_403212
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2450
  %96 = load i64, i64* @stderr, align 32
  store i64 %96, i64* %RDI, align 8, !tbaa !2450
  %97 = add i64 %674, -24
  %98 = add i64 %710, 22
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2450
  %101 = add i64 %674, -52
  %102 = add i64 %710, 26
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %105, 33800
  store i64 %106, i64* %RCX, align 8, !tbaa !2450
  %107 = lshr i64 %106, 63
  %108 = add i64 %106, %100
  store i64 %108, i64* %RAX, align 8, !tbaa !2450
  %109 = icmp ult i64 %108, %100
  %110 = icmp ult i64 %108, %106
  %111 = or i1 %109, %110
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %18, align 1, !tbaa !2428
  %113 = trunc i64 %108 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #10
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %25, align 1, !tbaa !2445
  %119 = xor i64 %106, %100
  %120 = xor i64 %119, %108
  %121 = lshr i64 %120, 4
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 1
  store i8 %123, i8* %30, align 1, !tbaa !2446
  %124 = icmp eq i64 %108, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %33, align 1, !tbaa !2447
  %126 = lshr i64 %108, 63
  %127 = trunc i64 %126 to i8
  store i8 %127, i8* %36, align 1, !tbaa !2448
  %128 = lshr i64 %100, 63
  %129 = xor i64 %126, %128
  %130 = xor i64 %126, %107
  %131 = add nuw nsw i64 %129, %130
  %132 = icmp eq i64 %131, 2
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %42, align 1, !tbaa !2449
  %134 = add i64 %674, -56
  %135 = add i64 %710, 40
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = sext i32 %137 to i64
  %139 = mul nsw i64 %138, 520
  store i64 %139, i64* %RCX, align 8, !tbaa !2450
  %140 = lshr i64 %139, 63
  %141 = add i64 %139, %108
  store i64 %141, i64* %RAX, align 8, !tbaa !2450
  %142 = icmp ult i64 %141, %108
  %143 = icmp ult i64 %141, %139
  %144 = or i1 %142, %143
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %18, align 1, !tbaa !2428
  %146 = trunc i64 %141 to i32
  %147 = and i32 %146, 255
  %148 = tail call i32 @llvm.ctpop.i32(i32 %147) #10
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  store i8 %151, i8* %25, align 1, !tbaa !2445
  %152 = xor i64 %139, %108
  %153 = xor i64 %152, %141
  %154 = lshr i64 %153, 4
  %155 = trunc i64 %154 to i8
  %156 = and i8 %155, 1
  store i8 %156, i8* %30, align 1, !tbaa !2446
  %157 = icmp eq i64 %141, 0
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %33, align 1, !tbaa !2447
  %159 = lshr i64 %141, 63
  %160 = trunc i64 %159 to i8
  store i8 %160, i8* %36, align 1, !tbaa !2448
  %161 = xor i64 %159, %126
  %162 = xor i64 %159, %140
  %163 = add nuw nsw i64 %161, %162
  %164 = icmp eq i64 %163, 2
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %42, align 1, !tbaa !2449
  %166 = add i64 %710, 54
  store i64 %166, i64* %PC, align 8
  %167 = load i32, i32* %677, align 4
  %168 = sext i32 %167 to i64
  store i64 %168, i64* %RCX, align 8, !tbaa !2450
  %169 = shl nsw i64 %168, 3
  %170 = add i64 %169, %141
  %171 = add i64 %710, 59
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %92, align 1, !tbaa !2453
  store double 0.000000e+00, double* %94, align 1, !tbaa !2453
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %174 = add i64 %710, -11358
  %175 = add i64 %710, 66
  %176 = load i64, i64* %RSP, align 8, !tbaa !2450
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i64*
  store i64 %175, i64* %178, align 8
  store i64 %177, i64* %RSP, align 8, !tbaa !2450
  store i64 %174, i64* %PC, align 8, !tbaa !2450
  %179 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %180 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2450
  %181 = load i64, i64* @stderr, align 32
  store i64 %181, i64* %RDI, align 8, !tbaa !2450
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -32
  %184 = add i64 %180, 22
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RCX, align 8, !tbaa !2450
  %187 = add i64 %182, -52
  %188 = add i64 %180, 26
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i32*
  %190 = load i32, i32* %189, align 4
  %191 = sext i32 %190 to i64
  %192 = mul nsw i64 %191, 33800
  store i64 %192, i64* %RDX, align 8, !tbaa !2450
  %193 = lshr i64 %192, 63
  %194 = add i64 %192, %186
  store i64 %194, i64* %RCX, align 8, !tbaa !2450
  %195 = icmp ult i64 %194, %186
  %196 = icmp ult i64 %194, %192
  %197 = or i1 %195, %196
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %18, align 1, !tbaa !2428
  %199 = trunc i64 %194 to i32
  %200 = and i32 %199, 255
  %201 = tail call i32 @llvm.ctpop.i32(i32 %200) #10
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  %204 = xor i8 %203, 1
  store i8 %204, i8* %25, align 1, !tbaa !2445
  %205 = xor i64 %192, %186
  %206 = xor i64 %205, %194
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  store i8 %209, i8* %30, align 1, !tbaa !2446
  %210 = icmp eq i64 %194, 0
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %33, align 1, !tbaa !2447
  %212 = lshr i64 %194, 63
  %213 = trunc i64 %212 to i8
  store i8 %213, i8* %36, align 1, !tbaa !2448
  %214 = lshr i64 %186, 63
  %215 = xor i64 %212, %214
  %216 = xor i64 %212, %193
  %217 = add nuw nsw i64 %215, %216
  %218 = icmp eq i64 %217, 2
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %42, align 1, !tbaa !2449
  %220 = add i64 %182, -56
  %221 = add i64 %180, 40
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %220 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = sext i32 %223 to i64
  %225 = mul nsw i64 %224, 520
  store i64 %225, i64* %RDX, align 8, !tbaa !2450
  %226 = lshr i64 %225, 63
  %227 = add i64 %225, %194
  store i64 %227, i64* %RCX, align 8, !tbaa !2450
  %228 = icmp ult i64 %227, %194
  %229 = icmp ult i64 %227, %225
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %18, align 1, !tbaa !2428
  %232 = trunc i64 %227 to i32
  %233 = and i32 %232, 255
  %234 = tail call i32 @llvm.ctpop.i32(i32 %233) #10
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  store i8 %237, i8* %25, align 1, !tbaa !2445
  %238 = xor i64 %225, %194
  %239 = xor i64 %238, %227
  %240 = lshr i64 %239, 4
  %241 = trunc i64 %240 to i8
  %242 = and i8 %241, 1
  store i8 %242, i8* %30, align 1, !tbaa !2446
  %243 = icmp eq i64 %227, 0
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %33, align 1, !tbaa !2447
  %245 = lshr i64 %227, 63
  %246 = trunc i64 %245 to i8
  store i8 %246, i8* %36, align 1, !tbaa !2448
  %247 = xor i64 %245, %212
  %248 = xor i64 %245, %226
  %249 = add nuw nsw i64 %247, %248
  %250 = icmp eq i64 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %42, align 1, !tbaa !2449
  %252 = add i64 %182, -60
  %253 = add i64 %180, 54
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %252 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %255 to i64
  store i64 %256, i64* %RDX, align 8, !tbaa !2450
  %257 = shl nsw i64 %256, 3
  %258 = add i64 %257, %227
  %259 = add i64 %180, 59
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %258 to i64*
  %261 = load i64, i64* %260, align 8
  store i64 %261, i64* %92, align 1, !tbaa !2453
  store double 0.000000e+00, double* %94, align 1, !tbaa !2453
  %262 = add i64 %182, -64
  %263 = load i32, i32* %EAX, align 4
  %264 = add i64 %180, 62
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %262 to i32*
  store i32 %263, i32* %265, align 4
  %266 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %267 = add i64 %266, -11486
  %268 = add i64 %266, 7
  %269 = load i64, i64* %RSP, align 8, !tbaa !2450
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2450
  store i64 %267, i64* %PC, align 8, !tbaa !2450
  %272 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %179)
  %273 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2450
  %274 = load i64, i64* @stderr, align 32
  store i64 %274, i64* %RDI, align 8, !tbaa !2450
  %275 = load i64, i64* %RBP, align 8
  %276 = add i64 %275, -40
  %277 = add i64 %273, 22
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i64*
  %279 = load i64, i64* %278, align 8
  store i64 %279, i64* %RCX, align 8, !tbaa !2450
  %280 = add i64 %275, -52
  %281 = add i64 %273, 26
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %280 to i32*
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %283 to i64
  %285 = mul nsw i64 %284, 33800
  store i64 %285, i64* %RDX, align 8, !tbaa !2450
  %286 = lshr i64 %285, 63
  %287 = add i64 %285, %279
  store i64 %287, i64* %RCX, align 8, !tbaa !2450
  %288 = icmp ult i64 %287, %279
  %289 = icmp ult i64 %287, %285
  %290 = or i1 %288, %289
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %18, align 1, !tbaa !2428
  %292 = trunc i64 %287 to i32
  %293 = and i32 %292, 255
  %294 = tail call i32 @llvm.ctpop.i32(i32 %293) #10
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  %297 = xor i8 %296, 1
  store i8 %297, i8* %25, align 1, !tbaa !2445
  %298 = xor i64 %285, %279
  %299 = xor i64 %298, %287
  %300 = lshr i64 %299, 4
  %301 = trunc i64 %300 to i8
  %302 = and i8 %301, 1
  store i8 %302, i8* %30, align 1, !tbaa !2446
  %303 = icmp eq i64 %287, 0
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %33, align 1, !tbaa !2447
  %305 = lshr i64 %287, 63
  %306 = trunc i64 %305 to i8
  store i8 %306, i8* %36, align 1, !tbaa !2448
  %307 = lshr i64 %279, 63
  %308 = xor i64 %305, %307
  %309 = xor i64 %305, %286
  %310 = add nuw nsw i64 %308, %309
  %311 = icmp eq i64 %310, 2
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %42, align 1, !tbaa !2449
  %313 = add i64 %275, -56
  %314 = add i64 %273, 40
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i32*
  %316 = load i32, i32* %315, align 4
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %317, 520
  store i64 %318, i64* %RDX, align 8, !tbaa !2450
  %319 = lshr i64 %318, 63
  %320 = add i64 %318, %287
  store i64 %320, i64* %RCX, align 8, !tbaa !2450
  %321 = icmp ult i64 %320, %287
  %322 = icmp ult i64 %320, %318
  %323 = or i1 %321, %322
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %18, align 1, !tbaa !2428
  %325 = trunc i64 %320 to i32
  %326 = and i32 %325, 255
  %327 = tail call i32 @llvm.ctpop.i32(i32 %326) #10
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  %330 = xor i8 %329, 1
  store i8 %330, i8* %25, align 1, !tbaa !2445
  %331 = xor i64 %318, %287
  %332 = xor i64 %331, %320
  %333 = lshr i64 %332, 4
  %334 = trunc i64 %333 to i8
  %335 = and i8 %334, 1
  store i8 %335, i8* %30, align 1, !tbaa !2446
  %336 = icmp eq i64 %320, 0
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %33, align 1, !tbaa !2447
  %338 = lshr i64 %320, 63
  %339 = trunc i64 %338 to i8
  store i8 %339, i8* %36, align 1, !tbaa !2448
  %340 = xor i64 %338, %305
  %341 = xor i64 %338, %319
  %342 = add nuw nsw i64 %340, %341
  %343 = icmp eq i64 %342, 2
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %42, align 1, !tbaa !2449
  %345 = add i64 %275, -60
  %346 = add i64 %273, 54
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i32*
  %348 = load i32, i32* %347, align 4
  %349 = sext i32 %348 to i64
  store i64 %349, i64* %RDX, align 8, !tbaa !2450
  %350 = shl nsw i64 %349, 3
  %351 = add i64 %350, %320
  %352 = add i64 %273, 59
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %92, align 1, !tbaa !2453
  store double 0.000000e+00, double* %94, align 1, !tbaa !2453
  %355 = add i64 %275, -68
  %356 = load i32, i32* %EAX, align 4
  %357 = add i64 %273, 62
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %355 to i32*
  store i32 %356, i32* %358, align 4
  %359 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %360 = add i64 %359, -11555
  %361 = add i64 %359, 7
  %362 = load i64, i64* %RSP, align 8, !tbaa !2450
  %363 = add i64 %362, -8
  %364 = inttoptr i64 %363 to i64*
  store i64 %361, i64* %364, align 8
  store i64 %363, i64* %RSP, align 8, !tbaa !2450
  store i64 %360, i64* %PC, align 8, !tbaa !2450
  %365 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %272)
  %366 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2450
  %367 = load i64, i64* @stderr, align 32
  store i64 %367, i64* %RDI, align 8, !tbaa !2450
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -48
  %370 = add i64 %366, 22
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RCX, align 8, !tbaa !2450
  %373 = add i64 %368, -52
  %374 = add i64 %366, 26
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = sext i32 %376 to i64
  %378 = mul nsw i64 %377, 33800
  store i64 %378, i64* %RDX, align 8, !tbaa !2450
  %379 = lshr i64 %378, 63
  %380 = add i64 %378, %372
  store i64 %380, i64* %RCX, align 8, !tbaa !2450
  %381 = icmp ult i64 %380, %372
  %382 = icmp ult i64 %380, %378
  %383 = or i1 %381, %382
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %18, align 1, !tbaa !2428
  %385 = trunc i64 %380 to i32
  %386 = and i32 %385, 255
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #10
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %25, align 1, !tbaa !2445
  %391 = xor i64 %378, %372
  %392 = xor i64 %391, %380
  %393 = lshr i64 %392, 4
  %394 = trunc i64 %393 to i8
  %395 = and i8 %394, 1
  store i8 %395, i8* %30, align 1, !tbaa !2446
  %396 = icmp eq i64 %380, 0
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %33, align 1, !tbaa !2447
  %398 = lshr i64 %380, 63
  %399 = trunc i64 %398 to i8
  store i8 %399, i8* %36, align 1, !tbaa !2448
  %400 = lshr i64 %372, 63
  %401 = xor i64 %398, %400
  %402 = xor i64 %398, %379
  %403 = add nuw nsw i64 %401, %402
  %404 = icmp eq i64 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %42, align 1, !tbaa !2449
  %406 = add i64 %368, -56
  %407 = add i64 %366, 40
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i32*
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %409 to i64
  %411 = mul nsw i64 %410, 520
  store i64 %411, i64* %RDX, align 8, !tbaa !2450
  %412 = lshr i64 %411, 63
  %413 = add i64 %411, %380
  store i64 %413, i64* %RCX, align 8, !tbaa !2450
  %414 = icmp ult i64 %413, %380
  %415 = icmp ult i64 %413, %411
  %416 = or i1 %414, %415
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %18, align 1, !tbaa !2428
  %418 = trunc i64 %413 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #10
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %25, align 1, !tbaa !2445
  %424 = xor i64 %411, %380
  %425 = xor i64 %424, %413
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %30, align 1, !tbaa !2446
  %429 = icmp eq i64 %413, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %33, align 1, !tbaa !2447
  %431 = lshr i64 %413, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %36, align 1, !tbaa !2448
  %433 = xor i64 %431, %398
  %434 = xor i64 %431, %412
  %435 = add nuw nsw i64 %433, %434
  %436 = icmp eq i64 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %42, align 1, !tbaa !2449
  %438 = add i64 %368, -60
  %439 = add i64 %366, 54
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to i32*
  %441 = load i32, i32* %440, align 4
  %442 = sext i32 %441 to i64
  store i64 %442, i64* %RDX, align 8, !tbaa !2450
  %443 = shl nsw i64 %442, 3
  %444 = add i64 %443, %413
  %445 = add i64 %366, 59
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %444 to i64*
  %447 = load i64, i64* %446, align 8
  store i64 %447, i64* %92, align 1, !tbaa !2453
  store double 0.000000e+00, double* %94, align 1, !tbaa !2453
  %448 = add i64 %368, -72
  %449 = load i32, i32* %EAX, align 4
  %450 = add i64 %366, 62
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i32*
  store i32 %449, i32* %451, align 4
  %452 = load i64, i64* %PC, align 8
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %453 = add i64 %452, -11624
  %454 = add i64 %452, 7
  %455 = load i64, i64* %RSP, align 8, !tbaa !2450
  %456 = add i64 %455, -8
  %457 = inttoptr i64 %456 to i64*
  store i64 %454, i64* %457, align 8
  store i64 %456, i64* %RSP, align 8, !tbaa !2450
  store i64 %453, i64* %PC, align 8, !tbaa !2450
  %458 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %365)
  %459 = load i64, i64* %PC, align 8
  store i64 20, i64* %R8, align 8, !tbaa !2450
  %460 = load i64, i64* %RBP, align 8
  %461 = add i64 %460, -52
  %462 = add i64 %459, 10
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %R9, align 8, !tbaa !2450
  %466 = add i64 %460, -8
  %467 = add i64 %459, 15
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = sext i32 %464 to i64
  %471 = sext i32 %469 to i64
  %472 = mul nsw i64 %471, %470
  %473 = trunc i64 %472 to i32
  %474 = and i64 %472, 4294967295
  store i64 %474, i64* %R9, align 8, !tbaa !2450
  %475 = shl i64 %472, 32
  %476 = ashr exact i64 %475, 32
  %477 = icmp ne i64 %476, %472
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %18, align 1, !tbaa !2428
  %479 = and i32 %473, 255
  %480 = tail call i32 @llvm.ctpop.i32(i32 %479) #10
  %481 = trunc i32 %480 to i8
  %482 = and i8 %481, 1
  %483 = xor i8 %482, 1
  store i8 %483, i8* %25, align 1, !tbaa !2445
  store i8 0, i8* %30, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2447
  %484 = lshr i32 %473, 31
  %485 = trunc i32 %484 to i8
  store i8 %485, i8* %36, align 1, !tbaa !2448
  store i8 %478, i8* %42, align 1, !tbaa !2449
  %486 = add i64 %460, -56
  %487 = add i64 %459, 19
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = add i32 %489, %473
  %491 = zext i32 %490 to i64
  store i64 %491, i64* %R9, align 8, !tbaa !2450
  %492 = icmp ult i32 %490, %473
  %493 = icmp ult i32 %490, %489
  %494 = or i1 %492, %493
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %18, align 1, !tbaa !2428
  %496 = and i32 %490, 255
  %497 = tail call i32 @llvm.ctpop.i32(i32 %496) #10
  %498 = trunc i32 %497 to i8
  %499 = and i8 %498, 1
  %500 = xor i8 %499, 1
  store i8 %500, i8* %25, align 1, !tbaa !2445
  %501 = xor i32 %489, %473
  %502 = xor i32 %501, %490
  %503 = lshr i32 %502, 4
  %504 = trunc i32 %503 to i8
  %505 = and i8 %504, 1
  store i8 %505, i8* %30, align 1, !tbaa !2446
  %506 = icmp eq i32 %490, 0
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %33, align 1, !tbaa !2447
  %508 = lshr i32 %490, 31
  %509 = trunc i32 %508 to i8
  store i8 %509, i8* %36, align 1, !tbaa !2448
  %510 = lshr i32 %489, 31
  %511 = xor i32 %508, %484
  %512 = xor i32 %508, %510
  %513 = add nuw nsw i32 %511, %512
  %514 = icmp eq i32 %513, 2
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %42, align 1, !tbaa !2449
  %516 = add i64 %460, -76
  %517 = load i32, i32* %EAX, align 4
  %518 = add i64 %459, 22
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %516 to i32*
  store i32 %517, i32* %519, align 4
  %520 = load i32, i32* %R9D, align 4
  %521 = zext i32 %520 to i64
  %522 = load i64, i64* %PC, align 8
  store i64 %521, i64* %RAX, align 8, !tbaa !2450
  %523 = sext i32 %520 to i64
  %524 = lshr i64 %523, 32
  store i64 %524, i64* %95, align 8, !tbaa !2450
  %525 = load i32, i32* %R8D, align 4
  %526 = add i64 %522, 7
  store i64 %526, i64* %PC, align 8
  %527 = sext i32 %525 to i64
  %528 = shl nuw i64 %524, 32
  %529 = or i64 %528, %521
  %530 = sdiv i64 %529, %527
  %531 = shl i64 %530, 32
  %532 = ashr exact i64 %531, 32
  %533 = icmp eq i64 %530, %532
  br i1 %533, label %536, label %534

; <label>:534:                                    ; preds = %block_40321e
  %535 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %526, %struct.Memory* %458) #13
  %.pre10 = load i32, i32* %EDX, align 4
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:536:                                    ; preds = %block_40321e
  %537 = srem i64 %529, %527
  %538 = and i64 %530, 4294967295
  store i64 %538, i64* %RAX, align 8, !tbaa !2450
  %539 = and i64 %537, 4294967295
  store i64 %539, i64* %RDX, align 8, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2428
  store i8 0, i8* %25, align 1, !tbaa !2445
  store i8 0, i8* %30, align 1, !tbaa !2446
  store i8 0, i8* %33, align 1, !tbaa !2447
  store i8 0, i8* %36, align 1, !tbaa !2448
  store i8 0, i8* %42, align 1, !tbaa !2449
  %540 = trunc i64 %537 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %536, %534
  %541 = phi i64 [ %.pre11, %534 ], [ %526, %536 ]
  %542 = phi i32 [ %.pre10, %534 ], [ %540, %536 ]
  %543 = phi %struct.Memory* [ %535, %534 ], [ %458, %536 ]
  store i8 0, i8* %18, align 1, !tbaa !2428
  %544 = and i32 %542, 255
  %545 = tail call i32 @llvm.ctpop.i32(i32 %544) #10
  %546 = trunc i32 %545 to i8
  %547 = and i8 %546, 1
  %548 = xor i8 %547, 1
  store i8 %548, i8* %25, align 1, !tbaa !2445
  store i8 0, i8* %30, align 1, !tbaa !2446
  %549 = icmp eq i32 %542, 0
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %33, align 1, !tbaa !2447
  %551 = lshr i32 %542, 31
  %552 = trunc i32 %551 to i8
  store i8 %552, i8* %36, align 1, !tbaa !2448
  store i8 0, i8* %42, align 1, !tbaa !2449
  %.v17 = select i1 %549, i64 9, i64 37
  %553 = add i64 %.v17, %541
  store i64 %553, i64* %PC, align 8, !tbaa !2450
  br i1 %549, label %block_403355, label %block_403371

block_4031f8:                                     ; preds = %block_4031ec
  %554 = add i64 %757, -56
  %555 = add i64 %793, 7
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to i32*
  store i32 0, i32* %556, align 4
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4031ff

block_4031ff:                                     ; preds = %block_403384, %block_4031f8
  %557 = phi i64 [ %.pre8, %block_4031f8 ], [ %823, %block_403384 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_4031f8 ], [ %MEMORY.2, %block_403384 ]
  %558 = load i64, i64* %RBP, align 8
  %559 = add i64 %558, -56
  %560 = add i64 %557, 3
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %559 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = zext i32 %562 to i64
  store i64 %563, i64* %RAX, align 8, !tbaa !2450
  %564 = add i64 %558, -12
  %565 = add i64 %557, 6
  store i64 %565, i64* %PC, align 8
  %566 = inttoptr i64 %564 to i32*
  %567 = load i32, i32* %566, align 4
  %568 = sub i32 %562, %567
  %569 = icmp ult i32 %562, %567
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %18, align 1, !tbaa !2428
  %571 = and i32 %568, 255
  %572 = tail call i32 @llvm.ctpop.i32(i32 %571) #10
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  store i8 %575, i8* %25, align 1, !tbaa !2445
  %576 = xor i32 %567, %562
  %577 = xor i32 %576, %568
  %578 = lshr i32 %577, 4
  %579 = trunc i32 %578 to i8
  %580 = and i8 %579, 1
  store i8 %580, i8* %30, align 1, !tbaa !2446
  %581 = icmp eq i32 %568, 0
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %33, align 1, !tbaa !2447
  %583 = lshr i32 %568, 31
  %584 = trunc i32 %583 to i8
  store i8 %584, i8* %36, align 1, !tbaa !2448
  %585 = lshr i32 %562, 31
  %586 = lshr i32 %567, 31
  %587 = xor i32 %586, %585
  %588 = xor i32 %583, %585
  %589 = add nuw nsw i32 %588, %587
  %590 = icmp eq i32 %589, 2
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %42, align 1, !tbaa !2449
  %592 = icmp ne i8 %584, 0
  %593 = xor i1 %592, %590
  %.demorgan13 = or i1 %581, %593
  %.v15 = select i1 %.demorgan13, i64 12, i64 408
  %594 = add i64 %.v15, %557
  store i64 %594, i64* %PC, align 8, !tbaa !2450
  br i1 %.demorgan13, label %block_40320b, label %block_403397

block_403397:                                     ; preds = %block_4031ff
  %595 = add i64 %558, -52
  %596 = add i64 %594, 8
  store i64 %596, i64* %PC, align 8
  %597 = inttoptr i64 %595 to i32*
  %598 = load i32, i32* %597, align 4
  %599 = add i32 %598, 1
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RAX, align 8, !tbaa !2450
  %601 = icmp eq i32 %598, -1
  %602 = icmp eq i32 %599, 0
  %603 = or i1 %601, %602
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %18, align 1, !tbaa !2428
  %605 = and i32 %599, 255
  %606 = tail call i32 @llvm.ctpop.i32(i32 %605) #10
  %607 = trunc i32 %606 to i8
  %608 = and i8 %607, 1
  %609 = xor i8 %608, 1
  store i8 %609, i8* %25, align 1, !tbaa !2445
  %610 = xor i32 %599, %598
  %611 = lshr i32 %610, 4
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  store i8 %613, i8* %30, align 1, !tbaa !2446
  %614 = zext i1 %602 to i8
  store i8 %614, i8* %33, align 1, !tbaa !2447
  %615 = lshr i32 %599, 31
  %616 = trunc i32 %615 to i8
  store i8 %616, i8* %36, align 1, !tbaa !2448
  %617 = lshr i32 %598, 31
  %618 = xor i32 %615, %617
  %619 = add nuw nsw i32 %618, %615
  %620 = icmp eq i32 %619, 2
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %42, align 1, !tbaa !2449
  %622 = add i64 %594, 14
  store i64 %622, i64* %PC, align 8
  store i32 %599, i32* %597, align 4
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %623, -441
  store i64 %624, i64* %PC, align 8, !tbaa !2450
  br label %block_4031ec

block_403371:                                     ; preds = %block_403355, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %625 = phi i64 [ %553, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %.pre12, %block_403355 ]
  %MEMORY.1 = phi %struct.Memory* [ %543, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %666, %block_403355 ]
  %626 = load i64, i64* %RBP, align 8
  %627 = add i64 %626, -60
  %628 = add i64 %625, 8
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %627 to i32*
  %630 = load i32, i32* %629, align 4
  %631 = add i32 %630, 1
  %632 = zext i32 %631 to i64
  store i64 %632, i64* %RAX, align 8, !tbaa !2450
  %633 = icmp eq i32 %630, -1
  %634 = icmp eq i32 %631, 0
  %635 = or i1 %633, %634
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %18, align 1, !tbaa !2428
  %637 = and i32 %631, 255
  %638 = tail call i32 @llvm.ctpop.i32(i32 %637) #10
  %639 = trunc i32 %638 to i8
  %640 = and i8 %639, 1
  %641 = xor i8 %640, 1
  store i8 %641, i8* %25, align 1, !tbaa !2445
  %642 = xor i32 %631, %630
  %643 = lshr i32 %642, 4
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %30, align 1, !tbaa !2446
  %646 = zext i1 %634 to i8
  store i8 %646, i8* %33, align 1, !tbaa !2447
  %647 = lshr i32 %631, 31
  %648 = trunc i32 %647 to i8
  store i8 %648, i8* %36, align 1, !tbaa !2448
  %649 = lshr i32 %630, 31
  %650 = xor i32 %647, %649
  %651 = add nuw nsw i32 %650, %647
  %652 = icmp eq i32 %651, 2
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %42, align 1, !tbaa !2449
  %654 = add i64 %625, 14
  store i64 %654, i64* %PC, align 8
  store i32 %631, i32* %629, align 4
  %655 = load i64, i64* %PC, align 8
  %656 = add i64 %655, -365
  store i64 %656, i64* %PC, align 8, !tbaa !2450
  br label %block_403212

block_40320b:                                     ; preds = %block_4031ff
  %657 = add i64 %558, -60
  %658 = add i64 %594, 7
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i32*
  store i32 0, i32* %659, align 4
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_403212

block_403355:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2450
  %660 = load i64, i64* @stderr, align 32
  store i64 %660, i64* %RDI, align 8, !tbaa !2450
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %661 = add i64 %553, -11669
  %662 = add i64 %553, 25
  %663 = load i64, i64* %RSP, align 8, !tbaa !2450
  %664 = add i64 %663, -8
  %665 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %665, align 8
  store i64 %664, i64* %RSP, align 8, !tbaa !2450
  store i64 %661, i64* %PC, align 8, !tbaa !2450
  %666 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %543)
  %667 = load i64, i64* %RBP, align 8
  %668 = add i64 %667, -80
  %669 = load i32, i32* %EAX, align 4
  %670 = load i64, i64* %PC, align 8
  %671 = add i64 %670, 3
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %668 to i32*
  store i32 %669, i32* %672, align 4
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_403371

block_403212:                                     ; preds = %block_40320b, %block_403371
  %673 = phi i64 [ %.pre9, %block_40320b ], [ %656, %block_403371 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_40320b ], [ %MEMORY.1, %block_403371 ]
  %674 = load i64, i64* %RBP, align 8
  %675 = add i64 %674, -60
  %676 = add i64 %673, 3
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = zext i32 %678 to i64
  store i64 %679, i64* %RAX, align 8, !tbaa !2450
  %680 = add i64 %674, -8
  %681 = add i64 %673, 6
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %680 to i32*
  %683 = load i32, i32* %682, align 4
  %684 = sub i32 %678, %683
  %685 = icmp ult i32 %678, %683
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %18, align 1, !tbaa !2428
  %687 = and i32 %684, 255
  %688 = tail call i32 @llvm.ctpop.i32(i32 %687) #10
  %689 = trunc i32 %688 to i8
  %690 = and i8 %689, 1
  %691 = xor i8 %690, 1
  store i8 %691, i8* %25, align 1, !tbaa !2445
  %692 = xor i32 %683, %678
  %693 = xor i32 %692, %684
  %694 = lshr i32 %693, 4
  %695 = trunc i32 %694 to i8
  %696 = and i8 %695, 1
  store i8 %696, i8* %30, align 1, !tbaa !2446
  %697 = icmp eq i32 %684, 0
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %33, align 1, !tbaa !2447
  %699 = lshr i32 %684, 31
  %700 = trunc i32 %699 to i8
  store i8 %700, i8* %36, align 1, !tbaa !2448
  %701 = lshr i32 %678, 31
  %702 = lshr i32 %683, 31
  %703 = xor i32 %702, %701
  %704 = xor i32 %699, %701
  %705 = add nuw nsw i32 %704, %703
  %706 = icmp eq i32 %705, 2
  %707 = zext i1 %706 to i8
  store i8 %707, i8* %42, align 1, !tbaa !2449
  %708 = icmp ne i8 %700, 0
  %709 = xor i1 %708, %706
  %.demorgan14 = or i1 %697, %709
  %.v = select i1 %.demorgan14, i64 12, i64 370
  %710 = add i64 %.v, %673
  store i64 %710, i64* %PC, align 8, !tbaa !2450
  br i1 %.demorgan14, label %block_40321e, label %block_403384

block_4033aa:                                     ; preds = %block_4031ec
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2450
  %711 = load i64, i64* @stderr, align 32
  store i64 %711, i64* %RDI, align 8, !tbaa !2450
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %712 = add i64 %793, -11754
  %713 = add i64 %793, 25
  %714 = load i64, i64* %RSP, align 8, !tbaa !2450
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716, align 8
  store i64 %715, i64* %RSP, align 8, !tbaa !2450
  store i64 %712, i64* %PC, align 8, !tbaa !2450
  %717 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %718 = load i64, i64* %RBP, align 8
  %719 = add i64 %718, -84
  %720 = load i32, i32* %EAX, align 4
  %721 = load i64, i64* %PC, align 8
  %722 = add i64 %721, 3
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %719 to i32*
  store i32 %720, i32* %723, align 4
  %724 = load i64, i64* %RSP, align 8
  %725 = load i64, i64* %PC, align 8
  %726 = add i64 %724, 96
  store i64 %726, i64* %RSP, align 8, !tbaa !2450
  %727 = icmp ugt i64 %724, -97
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %18, align 1, !tbaa !2428
  %729 = trunc i64 %726 to i32
  %730 = and i32 %729, 255
  %731 = tail call i32 @llvm.ctpop.i32(i32 %730) #10
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  store i8 %734, i8* %25, align 1, !tbaa !2445
  %735 = xor i64 %726, %724
  %736 = lshr i64 %735, 4
  %737 = trunc i64 %736 to i8
  %738 = and i8 %737, 1
  store i8 %738, i8* %30, align 1, !tbaa !2446
  %739 = icmp eq i64 %726, 0
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %33, align 1, !tbaa !2447
  %741 = lshr i64 %726, 63
  %742 = trunc i64 %741 to i8
  store i8 %742, i8* %36, align 1, !tbaa !2448
  %743 = lshr i64 %724, 63
  %744 = xor i64 %741, %743
  %745 = add nuw nsw i64 %744, %741
  %746 = icmp eq i64 %745, 2
  %747 = zext i1 %746 to i8
  store i8 %747, i8* %42, align 1, !tbaa !2449
  %748 = add i64 %725, 5
  store i64 %748, i64* %PC, align 8
  %749 = add i64 %724, 104
  %750 = inttoptr i64 %726 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %RBP, align 8, !tbaa !2450
  store i64 %749, i64* %RSP, align 8, !tbaa !2450
  %752 = add i64 %725, 6
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %749 to i64*
  %754 = load i64, i64* %753, align 8
  store i64 %754, i64* %PC, align 8, !tbaa !2450
  %755 = add i64 %724, 112
  store i64 %755, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %717

block_4031ec:                                     ; preds = %block_403397, %block_4031c0
  %756 = phi i64 [ %.pre, %block_4031c0 ], [ %624, %block_403397 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4031c0 ], [ %MEMORY.0, %block_403397 ]
  %757 = load i64, i64* %RBP, align 8
  %758 = add i64 %757, -52
  %759 = add i64 %756, 3
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i32*
  %761 = load i32, i32* %760, align 4
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RAX, align 8, !tbaa !2450
  %763 = add i64 %757, -4
  %764 = add i64 %756, 6
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i32*
  %766 = load i32, i32* %765, align 4
  %767 = sub i32 %761, %766
  %768 = icmp ult i32 %761, %766
  %769 = zext i1 %768 to i8
  store i8 %769, i8* %18, align 1, !tbaa !2428
  %770 = and i32 %767, 255
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #10
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  store i8 %774, i8* %25, align 1, !tbaa !2445
  %775 = xor i32 %766, %761
  %776 = xor i32 %775, %767
  %777 = lshr i32 %776, 4
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  store i8 %779, i8* %30, align 1, !tbaa !2446
  %780 = icmp eq i32 %767, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %33, align 1, !tbaa !2447
  %782 = lshr i32 %767, 31
  %783 = trunc i32 %782 to i8
  store i8 %783, i8* %36, align 1, !tbaa !2448
  %784 = lshr i32 %761, 31
  %785 = lshr i32 %766, 31
  %786 = xor i32 %785, %784
  %787 = xor i32 %782, %784
  %788 = add nuw nsw i32 %787, %786
  %789 = icmp eq i32 %788, 2
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %42, align 1, !tbaa !2449
  %791 = icmp ne i8 %783, 0
  %792 = xor i1 %791, %789
  %.demorgan = or i1 %780, %792
  %.v16 = select i1 %.demorgan, i64 12, i64 446
  %793 = add i64 %.v16, %756
  store i64 %793, i64* %PC, align 8, !tbaa !2450
  br i1 %.demorgan, label %block_4031f8, label %block_4033aa

block_403384:                                     ; preds = %block_403212
  %794 = add i64 %674, -56
  %795 = add i64 %710, 8
  store i64 %795, i64* %PC, align 8
  %796 = inttoptr i64 %794 to i32*
  %797 = load i32, i32* %796, align 4
  %798 = add i32 %797, 1
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RAX, align 8, !tbaa !2450
  %800 = icmp eq i32 %797, -1
  %801 = icmp eq i32 %798, 0
  %802 = or i1 %800, %801
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %18, align 1, !tbaa !2428
  %804 = and i32 %798, 255
  %805 = tail call i32 @llvm.ctpop.i32(i32 %804) #10
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  %808 = xor i8 %807, 1
  store i8 %808, i8* %25, align 1, !tbaa !2445
  %809 = xor i32 %798, %797
  %810 = lshr i32 %809, 4
  %811 = trunc i32 %810 to i8
  %812 = and i8 %811, 1
  store i8 %812, i8* %30, align 1, !tbaa !2446
  %813 = zext i1 %801 to i8
  store i8 %813, i8* %33, align 1, !tbaa !2447
  %814 = lshr i32 %798, 31
  %815 = trunc i32 %814 to i8
  store i8 %815, i8* %36, align 1, !tbaa !2448
  %816 = lshr i32 %797, 31
  %817 = xor i32 %814, %816
  %818 = add nuw nsw i32 %817, %814
  %819 = icmp eq i32 %818, 2
  %820 = zext i1 %819 to i8
  store i8 %820, i8* %42, align 1, !tbaa !2449
  %821 = add i64 %710, 14
  store i64 %821, i64* %PC, align 8
  store i32 %798, i32* %796, align 4
  %822 = load i64, i64* %PC, align 8
  %823 = add i64 %822, -403
  store i64 %823, i64* %PC, align 8, !tbaa !2450
  br label %block_4031ff
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403444__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403444:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2428
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #10
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2445
  store i8 %10, i8* %11, align 1, !tbaa !2446
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2447
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2448
  store i8 %19, i8* %20, align 1, !tbaa !2449
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2450
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400fd0_init_array(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %var_2_84 = add i64 %1, 21
  store i64 %var_2_84, i64* %PC, align 8
  %var_2_953 = load i64, i64* %RBP, align 8
  %var_2_954 = add i64 %var_2_953, -164
  %var_2_956 = inttoptr i64 %var_2_954 to i32*
  %var_2_957 = load i32, i32* %var_2_956, align 4
  %var_2_959 = add i64 %var_2_953, -44
  %var_2_961 = inttoptr i64 %var_2_959 to i32*
  %var_2_962 = load i32, i32* %var_2_961, align 4
  %var_2_963 = sub i32 %var_2_957, %var_2_962
  %var_2_976 = icmp eq i32 %var_2_963, 0
  %var_2_978 = lshr i32 %var_2_963, 31
  %var_2_980 = lshr i32 %var_2_957, 31
  %var_2_981 = lshr i32 %var_2_962, 31
  %var_2_982 = xor i32 %var_2_981, %var_2_980
  %var_2_983 = xor i32 %var_2_978, %var_2_980
  %var_2_984 = add nuw nsw i32 %var_2_983, %var_2_982
  %var_2_985 = icmp eq i32 %var_2_984, 2
  %var_2_987 = icmp ne i32 %var_2_978, 0
  %var_2_988 = xor i1 %var_2_987, %var_2_985
  %.demorgan = or i1 %var_2_976, %var_2_988
  br i1 %.demorgan, label %block_40109a.us.preheader, label %block_401117

block_40109a.us.preheader:                        ; preds = %block_400fd0
  br label %block_40109a.us

block_40109a.us:                                  ; preds = %block_40109a.us.preheader, %block_40109a.us
  br label %block_40109a.us

block_4014a4:                                     ; preds = %block_40123b
; Matched:\<badref\>:  ret %struct.Memory* %2
; ret %struct.Memory* %2
ret %struct.Memory* %2


block_401254:                                     ; preds = %block_401254.preheader, %block_401263
  %var_2_310 = phi i64 [ %var_2_1406, %block_401263 ], [ %var_2_310.pre, %block_401254.preheader ]
  %var_2_311 = add i64 %var_2_310, -168
  %var_2_313 = inttoptr i64 %var_2_311 to i32*
  %var_2_314 = load i32, i32* %var_2_313, align 4
  %var_2_316 = add i64 %var_2_310, -52
  %var_2_318 = inttoptr i64 %var_2_316 to i32*
  %var_2_319 = load i32, i32* %var_2_318, align 4
  %var_2_320 = sub i32 %var_2_314, %var_2_319
  %var_2_333 = icmp eq i32 %var_2_320, 0
  %var_2_335 = lshr i32 %var_2_320, 31
  %var_2_337 = lshr i32 %var_2_314, 31
  %var_2_338 = lshr i32 %var_2_319, 31
  %var_2_339 = xor i32 %var_2_338, %var_2_337
  %var_2_340 = xor i32 %var_2_335, %var_2_337
  %var_2_341 = add nuw nsw i32 %var_2_340, %var_2_339
  %var_2_342 = icmp eq i32 %var_2_341, 2
  %var_2_344 = icmp ne i32 %var_2_335, 0
  %var_2_345 = xor i1 %var_2_344, %var_2_342
  %.demorgan24 = or i1 %var_2_333, %var_2_345
  br i1 %.demorgan24, label %block_401263, label %block_40123b.loopexit

block_40123b.loopexit:                            ; preds = %block_401254
  br label %block_40123b

block_40123b:                                     ; preds = %block_40123b.preheader, %block_40123b.loopexit
  %var_2_310.pre = phi i64 [ %var_2_310, %block_40123b.loopexit ], [ %var_2_953, %block_40123b.preheader ]
  %var_2_382 = add i64 %var_2_310.pre, -164
  %var_2_384 = inttoptr i64 %var_2_382 to i32*
  %var_2_385 = load i32, i32* %var_2_384, align 4
  %var_2_387 = add i64 %var_2_310.pre, -44
  %var_2_389 = inttoptr i64 %var_2_387 to i32*
  %var_2_390 = load i32, i32* %var_2_389, align 4
  %var_2_391 = sub i32 %var_2_385, %var_2_390
  %var_2_404 = icmp eq i32 %var_2_391, 0
  %var_2_406 = lshr i32 %var_2_391, 31
  %var_2_408 = lshr i32 %var_2_385, 31
  %var_2_409 = lshr i32 %var_2_390, 31
  %var_2_410 = xor i32 %var_2_409, %var_2_408
  %var_2_411 = xor i32 %var_2_406, %var_2_408
  %var_2_412 = add nuw nsw i32 %var_2_411, %var_2_410
  %var_2_413 = icmp eq i32 %var_2_412, 2
  %var_2_415 = icmp ne i32 %var_2_406, 0
  %var_2_416 = xor i1 %var_2_415, %var_2_413
  %.demorgan23 = or i1 %var_2_404, %var_2_416
  br i1 %.demorgan23, label %block_401254.preheader, label %block_4014a4

block_401254.preheader:                           ; preds = %block_40123b
  br label %block_401254

block_4011ae.us:                                  ; preds = %block_4011ae.us.preheader, %block_4011ae.us
  br label %block_4011ae.us

block_401263:                                     ; preds = %block_401254
  %var_2_842 = add i64 %var_2_310, -172
  %var_2_845 = inttoptr i64 %var_2_842 to i32*
  store i32 0, i32* %var_2_845, align 4
  %var_2_1406 = load i64, i64* %RBP, align 8
  %var_2_1407 = add i64 %var_2_1406, -172
  %var_2_1409 = inttoptr i64 %var_2_1407 to i32*
  %var_2_1410 = load i32, i32* %var_2_1409, align 4
  %var_2_1412 = add i64 %var_2_1406, -48
  %var_2_1414 = inttoptr i64 %var_2_1412 to i32*
  %var_2_1415 = load i32, i32* %var_2_1414, align 4
  %var_2_1416 = sub i32 %var_2_1410, %var_2_1415
  %var_2_1429 = icmp eq i32 %var_2_1416, 0
  %var_2_1431 = lshr i32 %var_2_1416, 31
  %var_2_1433 = lshr i32 %var_2_1410, 31
  %var_2_1434 = lshr i32 %var_2_1415, 31
  %var_2_1435 = xor i32 %var_2_1434, %var_2_1433
  %var_2_1436 = xor i32 %var_2_1431, %var_2_1433
  %var_2_1437 = add nuw nsw i32 %var_2_1436, %var_2_1435
  %var_2_1438 = icmp eq i32 %var_2_1437, 2
  %var_2_1440 = icmp ne i32 %var_2_1431, 0
  %var_2_1441 = xor i1 %var_2_1440, %var_2_1438
  %.demorgan25 = or i1 %var_2_1429, %var_2_1441
  br i1 %.demorgan25, label %block_40130b.preheader, label %block_401254

block_40130b.preheader:                           ; preds = %block_401263
  br label %block_40130b

block_401117:                                     ; preds = %block_400fd0
  %var_2_883 = add i64 %var_2_953, -48
  %var_2_885 = inttoptr i64 %var_2_883 to i32*
  %var_2_886 = load i32, i32* %var_2_885, align 4
  %var_2_887 = sub i32 %var_2_957, %var_2_886
  %var_2_900 = icmp eq i32 %var_2_887, 0
  %var_2_902 = lshr i32 %var_2_887, 31
  %var_2_905 = lshr i32 %var_2_886, 31
  %var_2_906 = xor i32 %var_2_905, %var_2_980
  %var_2_907 = xor i32 %var_2_902, %var_2_980
  %var_2_908 = add nuw nsw i32 %var_2_907, %var_2_906
  %var_2_909 = icmp eq i32 %var_2_908, 2
  %var_2_911 = icmp ne i32 %var_2_902, 0
  %var_2_912 = xor i1 %var_2_911, %var_2_909
  %.demorgan21 = or i1 %var_2_900, %var_2_912
  br i1 %.demorgan21, label %block_401121.us.preheader, label %block_401117.split

block_401121.us.preheader:                        ; preds = %block_401117
  br label %block_401121.us

block_401121.us:                                  ; preds = %block_401121.us.preheader, %block_401121.us
  br label %block_401121.us

block_401117.split:                               ; preds = %block_401117
  %var_2_921 = add i64 %var_2_953, -52
  %var_2_923 = inttoptr i64 %var_2_921 to i32*
  %var_2_924 = load i32, i32* %var_2_923, align 4
  %var_2_925 = sub i32 %var_2_957, %var_2_924
  %var_2_938 = icmp eq i32 %var_2_925, 0
  %var_2_940 = lshr i32 %var_2_925, 31
  %var_2_943 = lshr i32 %var_2_924, 31
  %var_2_944 = xor i32 %var_2_943, %var_2_980
  %var_2_945 = xor i32 %var_2_940, %var_2_980
  %var_2_946 = add nuw nsw i32 %var_2_945, %var_2_944
  %var_2_947 = icmp eq i32 %var_2_946, 2
  %var_2_949 = icmp ne i32 %var_2_940, 0
  %var_2_950 = xor i1 %var_2_949, %var_2_947
  %.demorgan22 = or i1 %var_2_938, %var_2_950
  br i1 %.demorgan22, label %block_4011ae.us.preheader, label %block_40123b.preheader

block_40123b.preheader:                           ; preds = %block_401117.split
  br label %block_40123b

block_4011ae.us.preheader:                        ; preds = %block_401117.split
  br label %block_4011ae.us

block_40130b:                                     ; preds = %block_40130b.preheader, %block_40130b
  br label %block_40130b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403020_check_FP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403020:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %7 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2450
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2450
  %16 = add i64 %12, -120
  store i64 %16, i64* %RSP, align 8, !tbaa !2450
  %17 = icmp ult i64 %13, 112
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2428
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #10
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2445
  %27 = xor i64 %13, 16
  %28 = xor i64 %27, %16
  %29 = lshr i64 %28, 4
  %30 = trunc i64 %29 to i8
  %31 = and i8 %30, 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %31, i8* %32, align 1, !tbaa !2446
  %33 = icmp eq i64 %16, 0
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %34, i8* %35, align 1, !tbaa !2447
  %36 = lshr i64 %16, 63
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = lshr i64 %13, 63
  %40 = xor i64 %36, %39
  %41 = add nuw nsw i64 %40, %39
  %42 = icmp eq i64 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1, !tbaa !2449
  %45 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 88) to i64*), align 8
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %46, i64* %47, align 1, !tbaa !2453
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %49 = bitcast i64* %48 to double*
  store double 0.000000e+00, double* %49, align 1, !tbaa !2453
  %50 = add i64 %12, -16
  %51 = load i32, i32* %EDI, align 4
  %52 = add i64 %15, 18
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i32*
  store i32 %51, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -12
  %56 = load i32, i32* %ESI, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i32, i32* %EDX, align 4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 3
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %65, align 4
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -24
  %68 = load i64, i64* %RCX, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -32
  %74 = load i64, i64* %R8, align 8
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77, align 8
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -56
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = load i64, i64* %47, align 1
  %83 = inttoptr i64 %79 to i64*
  store i64 %82, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -36
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 7
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i32*
  store i32 0, i32* %88, align 4
  %89 = bitcast %union.VectorReg* %9 to i8*
  %90 = bitcast %union.VectorReg* %9 to i32*
  %91 = getelementptr inbounds i8, i8* %89, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to i32*
  %95 = getelementptr inbounds i8, i8* %89, i64 12
  %96 = bitcast i8* %95 to i32*
  %97 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %98 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %99 = getelementptr inbounds i8, i8* %45, i64 4
  %100 = bitcast i8* %99 to i32*
  %101 = bitcast i64* %48 to i32*
  %102 = getelementptr inbounds i8, i8* %45, i64 12
  %103 = bitcast i8* %102 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40304d

block_40317b:                                     ; preds = %block_40307d
  %104 = add i64 %238, -40
  %105 = add i64 %276, 8
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = add i32 %107, 1
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %RAX, align 8, !tbaa !2450
  %110 = icmp eq i32 %107, -1
  %111 = icmp eq i32 %108, 0
  %112 = or i1 %110, %111
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %19, align 1, !tbaa !2428
  %114 = and i32 %108, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #10
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2445
  %119 = xor i32 %108, %107
  %120 = lshr i32 %119, 4
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %32, align 1, !tbaa !2446
  %123 = zext i1 %111 to i8
  store i8 %123, i8* %35, align 1, !tbaa !2447
  %124 = lshr i32 %108, 31
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %38, align 1, !tbaa !2448
  %126 = lshr i32 %107, 31
  %127 = xor i32 %124, %126
  %128 = add nuw nsw i32 %127, %124
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %44, align 1, !tbaa !2449
  %131 = add i64 %276, 14
  store i64 %131, i64* %PC, align 8
  store i32 %108, i32* %106, align 4
  %132 = load i64, i64* %PC, align 8
  %133 = add i64 %132, -292
  store i64 %133, i64* %PC, align 8, !tbaa !2450
  br label %block_403065

block_40318e:                                     ; preds = %block_403065
  %134 = add i64 %627, -36
  %135 = add i64 %665, 8
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = add i32 %137, 1
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RAX, align 8, !tbaa !2450
  %140 = icmp eq i32 %137, -1
  %141 = icmp eq i32 %138, 0
  %142 = or i1 %140, %141
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %19, align 1, !tbaa !2428
  %144 = and i32 %138, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #10
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %26, align 1, !tbaa !2445
  %149 = xor i32 %138, %137
  %150 = lshr i32 %149, 4
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %32, align 1, !tbaa !2446
  %153 = zext i1 %141 to i8
  store i8 %153, i8* %35, align 1, !tbaa !2447
  %154 = lshr i32 %138, 31
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %38, align 1, !tbaa !2448
  %156 = lshr i32 %137, 31
  %157 = xor i32 %154, %156
  %158 = add nuw nsw i32 %157, %154
  %159 = icmp eq i32 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %44, align 1, !tbaa !2449
  %161 = add i64 %665, 14
  store i64 %161, i64* %PC, align 8
  store i32 %138, i32* %136, align 4
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, -335
  store i64 %163, i64* %PC, align 8, !tbaa !2450
  br label %block_40304d

block_403114:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 178), i64* %RSI, align 8, !tbaa !2450
  %164 = load i64, i64* @stderr, align 32
  store i64 %164, i64* %RDI, align 8, !tbaa !2450
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -36
  %167 = add i64 %506, 21
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RDX, align 8, !tbaa !2450
  %171 = add i64 %165, -40
  %172 = add i64 %506, 24
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i32*
  %174 = load i32, i32* %173, align 4
  %175 = zext i32 %174 to i64
  store i64 %175, i64* %RCX, align 8, !tbaa !2450
  %176 = add i64 %165, -44
  %177 = add i64 %506, 28
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %R8, align 8, !tbaa !2450
  %181 = add i64 %165, -64
  %182 = add i64 %506, 33
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %47, align 1, !tbaa !2453
  store double 0.000000e+00, double* %49, align 1, !tbaa !2453
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %186 = add i64 %506, 37
  store i64 %186, i64* %PC, align 8
  %187 = load i32, i32* %168, align 4
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %185, align 8, !tbaa !2450
  %189 = add i64 %506, 40
  store i64 %189, i64* %PC, align 8
  %190 = load i32, i32* %173, align 4
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RAX, align 8, !tbaa !2450
  %192 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %193 = add i64 %506, 44
  store i64 %193, i64* %PC, align 8
  %194 = load i32, i32* %178, align 4
  %195 = zext i32 %194 to i64
  store i64 %195, i64* %192, align 8, !tbaa !2450
  %196 = add i64 %165, -72
  %197 = add i64 %506, 49
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %97, align 1, !tbaa !2453
  %200 = bitcast i64* %93 to double*
  store double 0.000000e+00, double* %200, align 1, !tbaa !2453
  %201 = add i64 %165, -56
  %202 = add i64 %506, 54
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %204, i64* %205, align 1, !tbaa !2453
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %207 = bitcast i64* %206 to double*
  store double 0.000000e+00, double* %207, align 1, !tbaa !2453
  %208 = bitcast i64* %RSP to i32**
  %209 = load i32*, i32** %208, align 8
  %210 = add i64 %506, 57
  store i64 %210, i64* %PC, align 8
  store i32 %190, i32* %209, align 4
  %211 = load i64, i64* %RSP, align 8
  %212 = add i64 %211, 8
  %213 = load i32, i32* %R10D, align 4
  %214 = load i64, i64* %PC, align 8
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %212 to i32*
  store i32 %213, i32* %216, align 4
  %217 = load i64, i64* %PC, align 8
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %218 = add i64 %217, -11154
  %219 = add i64 %217, 7
  %220 = load i64, i64* %RSP, align 8, !tbaa !2450
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222, align 8
  store i64 %221, i64* %RSP, align 8, !tbaa !2450
  store i64 %218, i64* %PC, align 8, !tbaa !2450
  %223 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %501)
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -4
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, 7
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %225 to i32*
  store i32 0, i32* %228, align 4
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -84
  %231 = load i32, i32* %EAX, align 4
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %230 to i32*
  store i32 %231, i32* %234, align 4
  %235 = load i64, i64* %PC, align 8
  %236 = add i64 %235, 69
  store i64 %236, i64* %PC, align 8, !tbaa !2450
  br label %block_4031a8

block_40307d:                                     ; preds = %block_403076, %block_403168
  %237 = phi i64 [ %.pre31, %block_403076 ], [ %537, %block_403168 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_403076 ], [ %501, %block_403168 ]
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -44
  %240 = add i64 %237, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RAX, align 8, !tbaa !2450
  %244 = add i64 %238, -12
  %245 = add i64 %237, 6
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i32*
  %247 = load i32, i32* %246, align 4
  %248 = add i32 %247, 1
  %249 = zext i32 %248 to i64
  store i64 %249, i64* %RCX, align 8, !tbaa !2450
  %250 = lshr i32 %248, 31
  %251 = sub i32 %242, %248
  %252 = icmp ult i32 %242, %248
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %19, align 1, !tbaa !2428
  %254 = and i32 %251, 255
  %255 = tail call i32 @llvm.ctpop.i32(i32 %254) #10
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  store i8 %258, i8* %26, align 1, !tbaa !2445
  %259 = xor i32 %248, %242
  %260 = xor i32 %259, %251
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  store i8 %263, i8* %32, align 1, !tbaa !2446
  %264 = icmp eq i32 %251, 0
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %35, align 1, !tbaa !2447
  %266 = lshr i32 %251, 31
  %267 = trunc i32 %266 to i8
  store i8 %267, i8* %38, align 1, !tbaa !2448
  %268 = lshr i32 %242, 31
  %269 = xor i32 %250, %268
  %270 = xor i32 %266, %268
  %271 = add nuw nsw i32 %270, %269
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %44, align 1, !tbaa !2449
  %274 = icmp ne i8 %267, 0
  %275 = xor i1 %274, %272
  %.v34 = select i1 %275, i64 17, i64 254
  %276 = add i64 %.v34, %237
  store i64 %276, i64* %PC, align 8, !tbaa !2450
  br i1 %275, label %block_40308e, label %block_40317b

block_40308e:                                     ; preds = %block_40307d
  %277 = add i64 %238, -24
  %278 = add i64 %276, 4
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %RAX, align 8, !tbaa !2450
  %281 = add i64 %238, -36
  %282 = add i64 %276, 8
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = sext i32 %284 to i64
  %286 = mul nsw i64 %285, 33800
  store i64 %286, i64* %RCX, align 8, !tbaa !2450
  %287 = lshr i64 %286, 63
  %288 = add i64 %286, %280
  store i64 %288, i64* %RAX, align 8, !tbaa !2450
  %289 = icmp ult i64 %288, %280
  %290 = icmp ult i64 %288, %286
  %291 = or i1 %289, %290
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %19, align 1, !tbaa !2428
  %293 = trunc i64 %288 to i32
  %294 = and i32 %293, 255
  %295 = tail call i32 @llvm.ctpop.i32(i32 %294) #10
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  store i8 %298, i8* %26, align 1, !tbaa !2445
  %299 = xor i64 %286, %280
  %300 = xor i64 %299, %288
  %301 = lshr i64 %300, 4
  %302 = trunc i64 %301 to i8
  %303 = and i8 %302, 1
  store i8 %303, i8* %32, align 1, !tbaa !2446
  %304 = icmp eq i64 %288, 0
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %35, align 1, !tbaa !2447
  %306 = lshr i64 %288, 63
  %307 = trunc i64 %306 to i8
  store i8 %307, i8* %38, align 1, !tbaa !2448
  %308 = lshr i64 %280, 63
  %309 = xor i64 %306, %308
  %310 = xor i64 %306, %287
  %311 = add nuw nsw i64 %309, %310
  %312 = icmp eq i64 %311, 2
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %44, align 1, !tbaa !2449
  %314 = add i64 %238, -40
  %315 = add i64 %276, 22
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i32*
  %317 = load i32, i32* %316, align 4
  %318 = sext i32 %317 to i64
  %319 = mul nsw i64 %318, 520
  store i64 %319, i64* %RCX, align 8, !tbaa !2450
  %320 = lshr i64 %319, 63
  %321 = add i64 %319, %288
  store i64 %321, i64* %RAX, align 8, !tbaa !2450
  %322 = icmp ult i64 %321, %288
  %323 = icmp ult i64 %321, %319
  %324 = or i1 %322, %323
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %19, align 1, !tbaa !2428
  %326 = trunc i64 %321 to i32
  %327 = and i32 %326, 255
  %328 = tail call i32 @llvm.ctpop.i32(i32 %327) #10
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  store i8 %331, i8* %26, align 1, !tbaa !2445
  %332 = xor i64 %319, %288
  %333 = xor i64 %332, %321
  %334 = lshr i64 %333, 4
  %335 = trunc i64 %334 to i8
  %336 = and i8 %335, 1
  store i8 %336, i8* %32, align 1, !tbaa !2446
  %337 = icmp eq i64 %321, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %35, align 1, !tbaa !2447
  %339 = lshr i64 %321, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %38, align 1, !tbaa !2448
  %341 = xor i64 %339, %306
  %342 = xor i64 %339, %320
  %343 = add nuw nsw i64 %341, %342
  %344 = icmp eq i64 %343, 2
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %44, align 1, !tbaa !2449
  %346 = add i64 %276, 36
  store i64 %346, i64* %PC, align 8
  %347 = load i32, i32* %241, align 4
  %348 = sext i32 %347 to i64
  store i64 %348, i64* %RCX, align 8, !tbaa !2450
  %349 = shl nsw i64 %348, 3
  %350 = add i64 %349, %321
  %351 = add i64 %276, 41
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %47, align 1, !tbaa !2453
  store double 0.000000e+00, double* %49, align 1, !tbaa !2453
  %354 = add i64 %238, -64
  %355 = add i64 %276, 46
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %354 to i64*
  store i64 %353, i64* %356, align 8
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -32
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RAX, align 8, !tbaa !2450
  %363 = add i64 %357, -36
  %364 = add i64 %359, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i32*
  %366 = load i32, i32* %365, align 4
  %367 = sext i32 %366 to i64
  %368 = mul nsw i64 %367, 33800
  store i64 %368, i64* %RCX, align 8, !tbaa !2450
  %369 = lshr i64 %368, 63
  %370 = add i64 %368, %362
  store i64 %370, i64* %RAX, align 8, !tbaa !2450
  %371 = icmp ult i64 %370, %362
  %372 = icmp ult i64 %370, %368
  %373 = or i1 %371, %372
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %19, align 1, !tbaa !2428
  %375 = trunc i64 %370 to i32
  %376 = and i32 %375, 255
  %377 = tail call i32 @llvm.ctpop.i32(i32 %376) #10
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  store i8 %380, i8* %26, align 1, !tbaa !2445
  %381 = xor i64 %368, %362
  %382 = xor i64 %381, %370
  %383 = lshr i64 %382, 4
  %384 = trunc i64 %383 to i8
  %385 = and i8 %384, 1
  store i8 %385, i8* %32, align 1, !tbaa !2446
  %386 = icmp eq i64 %370, 0
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %35, align 1, !tbaa !2447
  %388 = lshr i64 %370, 63
  %389 = trunc i64 %388 to i8
  store i8 %389, i8* %38, align 1, !tbaa !2448
  %390 = lshr i64 %362, 63
  %391 = xor i64 %388, %390
  %392 = xor i64 %388, %369
  %393 = add nuw nsw i64 %391, %392
  %394 = icmp eq i64 %393, 2
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %44, align 1, !tbaa !2449
  %396 = add i64 %357, -40
  %397 = add i64 %359, 22
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = sext i32 %399 to i64
  %401 = mul nsw i64 %400, 520
  store i64 %401, i64* %RCX, align 8, !tbaa !2450
  %402 = lshr i64 %401, 63
  %403 = add i64 %401, %370
  store i64 %403, i64* %RAX, align 8, !tbaa !2450
  %404 = icmp ult i64 %403, %370
  %405 = icmp ult i64 %403, %401
  %406 = or i1 %404, %405
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %19, align 1, !tbaa !2428
  %408 = trunc i64 %403 to i32
  %409 = and i32 %408, 255
  %410 = tail call i32 @llvm.ctpop.i32(i32 %409) #10
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  store i8 %413, i8* %26, align 1, !tbaa !2445
  %414 = xor i64 %401, %370
  %415 = xor i64 %414, %403
  %416 = lshr i64 %415, 4
  %417 = trunc i64 %416 to i8
  %418 = and i8 %417, 1
  store i8 %418, i8* %32, align 1, !tbaa !2446
  %419 = icmp eq i64 %403, 0
  %420 = zext i1 %419 to i8
  store i8 %420, i8* %35, align 1, !tbaa !2447
  %421 = lshr i64 %403, 63
  %422 = trunc i64 %421 to i8
  store i8 %422, i8* %38, align 1, !tbaa !2448
  %423 = xor i64 %421, %388
  %424 = xor i64 %421, %402
  %425 = add nuw nsw i64 %423, %424
  %426 = icmp eq i64 %425, 2
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %44, align 1, !tbaa !2449
  %428 = add i64 %357, -44
  %429 = add i64 %359, 36
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %428 to i32*
  %431 = load i32, i32* %430, align 4
  %432 = sext i32 %431 to i64
  store i64 %432, i64* %RCX, align 8, !tbaa !2450
  %433 = shl nsw i64 %432, 3
  %434 = add i64 %433, %403
  %435 = add i64 %359, 41
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i64*
  %437 = load i64, i64* %436, align 8
  store i64 %437, i64* %47, align 1, !tbaa !2453
  store double 0.000000e+00, double* %49, align 1, !tbaa !2453
  %438 = add i64 %357, -72
  %439 = add i64 %359, 46
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to i64*
  store i64 %437, i64* %440, align 8
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -64
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %47, align 1, !tbaa !2453
  store double 0.000000e+00, double* %49, align 1, !tbaa !2453
  %447 = add i64 %441, -72
  %448 = add i64 %443, 10
  store i64 %448, i64* %PC, align 8
  %449 = bitcast i64 %446 to double
  %450 = inttoptr i64 %447 to double*
  %451 = load double, double* %450, align 8
  %452 = fsub double %449, %451
  %453 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 96) to i32*), align 16
  %454 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 100) to i32*), align 4
  %455 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 104) to i32*), align 8
  %456 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 108) to i32*), align 4
  store i32 %453, i32* %90, align 1, !tbaa !2455
  store i32 %454, i32* %92, align 1, !tbaa !2455
  store i32 %455, i32* %94, align 1, !tbaa !2455
  store i32 %456, i32* %96, align 1, !tbaa !2455
  %457 = bitcast double %452 to i64
  %458 = load i64, i64* %97, align 1
  %459 = and i64 %458, %457
  %460 = trunc i64 %459 to i32
  %461 = lshr i64 %459, 32
  %462 = trunc i64 %461 to i32
  store i32 %460, i32* %98, align 1, !tbaa !2452
  store i32 %462, i32* %100, align 1, !tbaa !2452
  store i32 0, i32* %101, align 1, !tbaa !2452
  store i32 0, i32* %103, align 1, !tbaa !2452
  %463 = add i64 %441, -80
  %464 = add i64 %443, 26
  store i64 %464, i64* %PC, align 8
  %465 = load i64, i64* %47, align 1
  %466 = inttoptr i64 %463 to i64*
  store i64 %465, i64* %466, align 8
  %467 = load i64, i64* %RBP, align 8
  %468 = add i64 %467, -80
  %469 = load i64, i64* %PC, align 8
  %470 = add i64 %469, 5
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %468 to i64*
  %472 = load i64, i64* %471, align 8
  store i64 %472, i64* %47, align 1, !tbaa !2453
  store double 0.000000e+00, double* %49, align 1, !tbaa !2453
  %473 = add i64 %467, -56
  %474 = add i64 %469, 10
  store i64 %474, i64* %PC, align 8
  %475 = bitcast i64 %472 to double
  %476 = inttoptr i64 %473 to double*
  %477 = load double, double* %476, align 8
  %478 = fcmp uno double %475, %477
  br i1 %478, label %479, label %489

; <label>:479:                                    ; preds = %block_40308e
  %480 = fadd double %475, %477
  %481 = bitcast double %480 to i64
  %482 = and i64 %481, 9221120237041090560
  %483 = icmp eq i64 %482, 9218868437227405312
  %484 = and i64 %481, 2251799813685247
  %485 = icmp ne i64 %484, 0
  %486 = and i1 %483, %485
  br i1 %486, label %487, label %495

; <label>:487:                                    ; preds = %479
  %488 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %474, %struct.Memory* %MEMORY.0) #13
  %.pre32 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:489:                                    ; preds = %block_40308e
  %490 = fcmp ogt double %475, %477
  br i1 %490, label %495, label %491

; <label>:491:                                    ; preds = %489
  %492 = fcmp olt double %475, %477
  br i1 %492, label %495, label %493

; <label>:493:                                    ; preds = %491
  %494 = fcmp oeq double %475, %477
  br i1 %494, label %495, label %499

; <label>:495:                                    ; preds = %493, %491, %489, %479
  %496 = phi i8 [ 0, %489 ], [ 0, %491 ], [ 1, %493 ], [ 1, %479 ]
  %497 = phi i8 [ 0, %489 ], [ 0, %491 ], [ 0, %493 ], [ 1, %479 ]
  %498 = phi i8 [ 0, %489 ], [ 1, %491 ], [ 0, %493 ], [ 1, %479 ]
  store i8 %496, i8* %35, align 1, !tbaa !2451
  store i8 %497, i8* %26, align 1, !tbaa !2451
  store i8 %498, i8* %19, align 1, !tbaa !2451
  br label %499

; <label>:499:                                    ; preds = %495, %493
  store i8 0, i8* %44, align 1, !tbaa !2451
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %32, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %499, %487
  %500 = phi i64 [ %.pre32, %487 ], [ %474, %499 ]
  %501 = phi %struct.Memory* [ %488, %487 ], [ %MEMORY.0, %499 ]
  %502 = load i8, i8* %19, align 1, !tbaa !2428
  %503 = load i8, i8* %35, align 1, !tbaa !2447
  %504 = or i8 %503, %502
  %505 = icmp ne i8 %504, 0
  %.v52 = select i1 %505, i64 90, i64 6
  %506 = add i64 %.v52, %500
  store i64 %506, i64* %PC, align 8, !tbaa !2450
  br i1 %505, label %block_403168, label %block_403114

block_403168:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %507 = load i64, i64* %RBP, align 8
  %508 = add i64 %507, -44
  %509 = add i64 %506, 8
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i32*
  %511 = load i32, i32* %510, align 4
  %512 = add i32 %511, 1
  %513 = zext i32 %512 to i64
  store i64 %513, i64* %RAX, align 8, !tbaa !2450
  %514 = icmp eq i32 %511, -1
  %515 = icmp eq i32 %512, 0
  %516 = or i1 %514, %515
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %19, align 1, !tbaa !2428
  %518 = and i32 %512, 255
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518) #10
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %26, align 1, !tbaa !2445
  %523 = xor i32 %512, %511
  %524 = lshr i32 %523, 4
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  store i8 %526, i8* %32, align 1, !tbaa !2446
  %527 = zext i1 %515 to i8
  store i8 %527, i8* %35, align 1, !tbaa !2447
  %528 = lshr i32 %512, 31
  %529 = trunc i32 %528 to i8
  store i8 %529, i8* %38, align 1, !tbaa !2448
  %530 = lshr i32 %511, 31
  %531 = xor i32 %528, %530
  %532 = add nuw nsw i32 %531, %528
  %533 = icmp eq i32 %532, 2
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %44, align 1, !tbaa !2449
  %535 = add i64 %506, 14
  store i64 %535, i64* %PC, align 8
  store i32 %512, i32* %510, align 4
  %536 = load i64, i64* %PC, align 8
  %537 = add i64 %536, -249
  store i64 %537, i64* %PC, align 8, !tbaa !2450
  br label %block_40307d

block_40305e:                                     ; preds = %block_40304d
  %538 = add i64 %542, -40
  %539 = add i64 %580, 7
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %538 to i32*
  store i32 0, i32* %540, align 4
  %.pre30 = load i64, i64* %PC, align 8
  br label %block_403065

block_40304d:                                     ; preds = %block_40318e, %block_403020
  %541 = phi i64 [ %.pre, %block_403020 ], [ %163, %block_40318e ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_403020 ], [ %MEMORY.3, %block_40318e ]
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -36
  %544 = add i64 %541, 3
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %543 to i32*
  %546 = load i32, i32* %545, align 4
  %547 = zext i32 %546 to i64
  store i64 %547, i64* %RAX, align 8, !tbaa !2450
  %548 = add i64 %542, -8
  %549 = add i64 %541, 6
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %548 to i32*
  %551 = load i32, i32* %550, align 4
  %552 = add i32 %551, 1
  %553 = zext i32 %552 to i64
  store i64 %553, i64* %RCX, align 8, !tbaa !2450
  %554 = lshr i32 %552, 31
  %555 = sub i32 %546, %552
  %556 = icmp ult i32 %546, %552
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %19, align 1, !tbaa !2428
  %558 = and i32 %555, 255
  %559 = tail call i32 @llvm.ctpop.i32(i32 %558) #10
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  store i8 %562, i8* %26, align 1, !tbaa !2445
  %563 = xor i32 %552, %546
  %564 = xor i32 %563, %555
  %565 = lshr i32 %564, 4
  %566 = trunc i32 %565 to i8
  %567 = and i8 %566, 1
  store i8 %567, i8* %32, align 1, !tbaa !2446
  %568 = icmp eq i32 %555, 0
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %35, align 1, !tbaa !2447
  %570 = lshr i32 %555, 31
  %571 = trunc i32 %570 to i8
  store i8 %571, i8* %38, align 1, !tbaa !2448
  %572 = lshr i32 %546, 31
  %573 = xor i32 %554, %572
  %574 = xor i32 %570, %572
  %575 = add nuw nsw i32 %574, %573
  %576 = icmp eq i32 %575, 2
  %577 = zext i1 %576 to i8
  store i8 %577, i8* %44, align 1, !tbaa !2449
  %578 = icmp ne i8 %571, 0
  %579 = xor i1 %578, %576
  %.v35 = select i1 %579, i64 17, i64 340
  %580 = add i64 %.v35, %541
  store i64 %580, i64* %PC, align 8, !tbaa !2450
  br i1 %579, label %block_40305e, label %block_4031a1

block_4031a1:                                     ; preds = %block_40304d
  %581 = add i64 %542, -4
  %582 = add i64 %580, 7
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i32*
  store i32 1, i32* %583, align 4
  %.pre33 = load i64, i64* %PC, align 8
  br label %block_4031a8

block_403076:                                     ; preds = %block_403065
  %584 = add i64 %627, -44
  %585 = add i64 %665, 7
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i32*
  store i32 0, i32* %586, align 4
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_40307d

block_4031a8:                                     ; preds = %block_4031a1, %block_403114
  %587 = phi i64 [ %.pre33, %block_4031a1 ], [ %236, %block_403114 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4031a1 ], [ %223, %block_403114 ]
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -4
  %590 = add i64 %587, 3
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i32*
  %592 = load i32, i32* %591, align 4
  %593 = zext i32 %592 to i64
  store i64 %593, i64* %RAX, align 8, !tbaa !2450
  %594 = load i64, i64* %RSP, align 8
  %595 = add i64 %594, 112
  store i64 %595, i64* %RSP, align 8, !tbaa !2450
  %596 = icmp ugt i64 %594, -113
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %19, align 1, !tbaa !2428
  %598 = trunc i64 %595 to i32
  %599 = and i32 %598, 255
  %600 = tail call i32 @llvm.ctpop.i32(i32 %599) #10
  %601 = trunc i32 %600 to i8
  %602 = and i8 %601, 1
  %603 = xor i8 %602, 1
  store i8 %603, i8* %26, align 1, !tbaa !2445
  %604 = xor i64 %594, 16
  %605 = xor i64 %604, %595
  %606 = lshr i64 %605, 4
  %607 = trunc i64 %606 to i8
  %608 = and i8 %607, 1
  store i8 %608, i8* %32, align 1, !tbaa !2446
  %609 = icmp eq i64 %595, 0
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %35, align 1, !tbaa !2447
  %611 = lshr i64 %595, 63
  %612 = trunc i64 %611 to i8
  store i8 %612, i8* %38, align 1, !tbaa !2448
  %613 = lshr i64 %594, 63
  %614 = xor i64 %611, %613
  %615 = add nuw nsw i64 %614, %611
  %616 = icmp eq i64 %615, 2
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %44, align 1, !tbaa !2449
  %618 = add i64 %587, 8
  store i64 %618, i64* %PC, align 8
  %619 = add i64 %594, 120
  %620 = inttoptr i64 %595 to i64*
  %621 = load i64, i64* %620, align 8
  store i64 %621, i64* %RBP, align 8, !tbaa !2450
  store i64 %619, i64* %RSP, align 8, !tbaa !2450
  %622 = add i64 %587, 9
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %619 to i64*
  %624 = load i64, i64* %623, align 8
  store i64 %624, i64* %PC, align 8, !tbaa !2450
  %625 = add i64 %594, 128
  store i64 %625, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %MEMORY.2

block_403065:                                     ; preds = %block_40305e, %block_40317b
  %626 = phi i64 [ %.pre30, %block_40305e ], [ %133, %block_40317b ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_40305e ], [ %MEMORY.0, %block_40317b ]
  %627 = load i64, i64* %RBP, align 8
  %628 = add i64 %627, -40
  %629 = add i64 %626, 3
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %628 to i32*
  %631 = load i32, i32* %630, align 4
  %632 = zext i32 %631 to i64
  store i64 %632, i64* %RAX, align 8, !tbaa !2450
  %633 = add i64 %627, -16
  %634 = add i64 %626, 6
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %633 to i32*
  %636 = load i32, i32* %635, align 4
  %637 = add i32 %636, 1
  %638 = zext i32 %637 to i64
  store i64 %638, i64* %RCX, align 8, !tbaa !2450
  %639 = lshr i32 %637, 31
  %640 = sub i32 %631, %637
  %641 = icmp ult i32 %631, %637
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %19, align 1, !tbaa !2428
  %643 = and i32 %640, 255
  %644 = tail call i32 @llvm.ctpop.i32(i32 %643) #10
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  store i8 %647, i8* %26, align 1, !tbaa !2445
  %648 = xor i32 %637, %631
  %649 = xor i32 %648, %640
  %650 = lshr i32 %649, 4
  %651 = trunc i32 %650 to i8
  %652 = and i8 %651, 1
  store i8 %652, i8* %32, align 1, !tbaa !2446
  %653 = icmp eq i32 %640, 0
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %35, align 1, !tbaa !2447
  %655 = lshr i32 %640, 31
  %656 = trunc i32 %655 to i8
  store i8 %656, i8* %38, align 1, !tbaa !2448
  %657 = lshr i32 %631, 31
  %658 = xor i32 %639, %657
  %659 = xor i32 %655, %657
  %660 = add nuw nsw i32 %659, %658
  %661 = icmp eq i32 %660, 2
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %44, align 1, !tbaa !2449
  %663 = icmp ne i8 %656, 0
  %664 = xor i1 %663, %661
  %.v = select i1 %664, i64 17, i64 297
  %665 = add i64 %.v, %626
  store i64 %665, i64* %PC, align 8, !tbaa !2450
  br i1 %664, label %block_403076, label %block_40318e
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400630_deregister_tm_clones(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400658:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2450
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2450
  %8 = load i64, i64* %PC, align 8
  store i64 6307928, i64* %RAX, align 8, !tbaa !2450
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10, align 1, !tbaa !2445
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2446
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %12, align 1, !tbaa !2447
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2448
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2449
  store i64 %6, i64* %RBP, align 8, !tbaa !2450
  %15 = add i64 %8, 40
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %7, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2450
  store i64 %5, i64* %RSP, align 8, !tbaa !2450
  %17 = add i64 %8, 41
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %5 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %PC, align 8, !tbaa !2450
  %20 = add i64 %5, 8
  store i64 %20, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400760_polybench_prepare_instruments(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %9, -129
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2450
  store i64 %10, i64* %PC, align 8, !tbaa !2450
  %14 = tail call %struct.Memory* @sub_4006e0_polybench_flush_cache_renamed_(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %5, align 8, !tbaa !2450
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2450
  store i64 %18, i64* %5, align 8, !tbaa !2450
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2450
  %24 = add i64 %17, 16
  store i64 %24, i64* %5, align 8, !tbaa !2450
  ret %struct.Memory* %14
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400840_xmalloc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400840:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2450
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2428
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2445
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2450
  store i64 32, i64* %RCX, align 8, !tbaa !2450
  store i64 32, i64* %RSI, align 8, !tbaa !2450
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 22
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 8
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 0, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDX, align 8, !tbaa !2450
  %54 = load i64, i64* %RAX, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2450
  %55 = add i64 %50, -639
  %56 = add i64 %50, 12
  %57 = load i64, i64* %RSP, align 8, !tbaa !2450
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %56, i64* %59, align 8
  store i64 %58, i64* %RSP, align 8, !tbaa !2450
  store i64 %55, i64* %PC, align 8, !tbaa !2450
  %60 = tail call fastcc %struct.Memory* @ext_604108_posix_memalign(%struct.State* nonnull %0, %struct.Memory* %2)
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -20
  %63 = load i32, i32* %EAX, align 4
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i32*
  store i32 %63, i32* %66, align 4
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -16
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i8 0, i8* %13, align 1, !tbaa !2428
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #10
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2445
  store i8 0, i8* %25, align 1, !tbaa !2446
  %79 = icmp eq i64 %72, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2447
  %81 = lshr i64 %72, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  %.v = select i1 %79, i64 21, i64 11
  %83 = add i64 %.v, %69
  store i64 %83, i64* %PC, align 8, !tbaa !2450
  br i1 %79, label %block_400883, label %block_400879

block_400883:                                     ; preds = %block_400879, %block_400840
  %84 = phi i64 [ %120, %block_400879 ], [ %83, %block_400840 ]
  store i64 add (i64 ptrtoint (%seg_403450__rodata_type* @seg_403450__rodata to i64), i64 119), i64* %RSI, align 8, !tbaa !2450
  %85 = load i64, i64* @stderr, align 32
  store i64 %85, i64* %RDI, align 8, !tbaa !2450
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %86 = add i64 %84, -707
  %87 = add i64 %84, 25
  %88 = load i64, i64* %RSP, align 8, !tbaa !2450
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %RSP, align 8, !tbaa !2450
  store i64 %86, i64* %PC, align 8, !tbaa !2450
  %91 = tail call fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State* nonnull %0, %struct.Memory* %60)
  %92 = load i64, i64* %PC, align 8
  store i64 1, i64* %RDI, align 8, !tbaa !2450
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -24
  %95 = load i32, i32* %EAX, align 4
  %96 = add i64 %92, 8
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %97, align 4
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, -724
  %100 = add i64 %98, 5
  %101 = load i64, i64* %RSP, align 8, !tbaa !2450
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %100, i64* %103, align 8
  store i64 %102, i64* %RSP, align 8, !tbaa !2450
  store i64 %99, i64* %PC, align 8, !tbaa !2450
  %104 = tail call fastcc %struct.Memory* @ext_6040c8_exit(%struct.State* nonnull %0, %struct.Memory* %91)
  %105 = load i64, i64* %PC, align 8
  %106 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %105, %struct.Memory* %104)
  ret %struct.Memory* %106

block_400879:                                     ; preds = %block_400840
  %107 = add i64 %67, -20
  %108 = add i64 %83, 4
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  %110 = load i32, i32* %109, align 4
  store i8 0, i8* %13, align 1, !tbaa !2428
  %111 = and i32 %110, 255
  %112 = tail call i32 @llvm.ctpop.i32(i32 %111) #10
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  %115 = xor i8 %114, 1
  store i8 %115, i8* %20, align 1, !tbaa !2445
  store i8 0, i8* %25, align 1, !tbaa !2446
  %116 = icmp eq i32 %110, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %28, align 1, !tbaa !2447
  %118 = lshr i32 %110, 31
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %31, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  %.v2 = select i1 %116, i64 48, i64 10
  %120 = add i64 %.v2, %83
  store i64 %120, i64* %PC, align 8, !tbaa !2450
  br i1 %116, label %block_4008a9, label %block_400883

block_4008a9:                                     ; preds = %block_400879
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %71, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2450
  %123 = load i64, i64* %RSP, align 8
  %124 = add i64 %123, 32
  store i64 %124, i64* %RSP, align 8, !tbaa !2450
  %125 = icmp ugt i64 %123, -33
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %13, align 1, !tbaa !2428
  %127 = trunc i64 %124 to i32
  %128 = and i32 %127, 255
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #10
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %20, align 1, !tbaa !2445
  %133 = xor i64 %124, %123
  %134 = lshr i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  store i8 %136, i8* %25, align 1, !tbaa !2446
  %137 = icmp eq i64 %124, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %28, align 1, !tbaa !2447
  %139 = lshr i64 %124, 63
  %140 = trunc i64 %139 to i8
  store i8 %140, i8* %31, align 1, !tbaa !2448
  %141 = lshr i64 %123, 63
  %142 = xor i64 %139, %141
  %143 = add nuw nsw i64 %142, %139
  %144 = icmp eq i64 %143, 2
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %37, align 1, !tbaa !2449
  %146 = add i64 %120, 9
  store i64 %146, i64* %PC, align 8
  %147 = add i64 %123, 40
  %148 = inttoptr i64 %124 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RBP, align 8, !tbaa !2450
  store i64 %147, i64* %RSP, align 8, !tbaa !2450
  %150 = add i64 %120, 10
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %147 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %PC, align 8, !tbaa !2450
  %153 = add i64 %123, 48
  store i64 %153, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %60
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400560__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400560:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2450
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2450
  store i8 0, i8* %5, align 1, !tbaa !2428
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #10
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2445
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2447
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2448
  store i8 0, i8* %10, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2446
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2450
  br i1 %18, label %block_400572, label %block_400570

block_400570:                                     ; preds = %block_400560
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2450
  store i64 %11, i64* %PC, align 8, !tbaa !2450
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400572

block_400572:                                     ; preds = %block_400570, %block_400560
  %27 = phi i64 [ %22, %block_400560 ], [ %.pre1, %block_400570 ]
  %28 = phi i64 [ %4, %block_400560 ], [ %.pre, %block_400570 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400560 ], [ %26, %block_400570 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2450
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2428
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #10
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2445
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2446
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2447
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2448
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2449
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2450
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4006e0_polybench_flush_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4006e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2450
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2450
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2450
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2428
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #10
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2445
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2449
  store i64 8, i64* %RAX, align 8, !tbaa !2450
  store i64 8, i64* %RSI, align 8, !tbaa !2450
  %38 = add i64 %6, -12
  %39 = add i64 %9, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i32*
  store i32 4194560, i32* %40, align 4
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -4
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %42 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  store i64 %47, i64* %RDI, align 8, !tbaa !2450
  %48 = add i64 %43, -326
  %49 = add i64 %43, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2450
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2450
  store i64 %48, i64* %PC, align 8, !tbaa !2450
  %53 = tail call fastcc %struct.Memory* @ext_6040f0_calloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %54 = load i64, i64* %PC, align 8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %56, align 1, !tbaa !2452
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %RAX, align 8
  %60 = add i64 %54, 7
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC, align 8
  %66 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %67 = load i64, i64* %66, align 1
  %68 = inttoptr i64 %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -20
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  store i32 0, i32* %73, align 4
  %74 = bitcast %union.VectorReg* %3 to double*
  %75 = bitcast i64* %55 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_400712

block_40071e:                                     ; preds = %block_400712
  %76 = add i64 %198, 8
  store i64 %76, i64* %PC, align 8
  %77 = load i32, i32* %165, align 4
  %78 = sext i32 %77 to i64
  store i64 %78, i64* %RCX, align 8, !tbaa !2450
  %79 = shl nsw i64 %78, 3
  %80 = add i64 %79, %202
  %81 = add i64 %198, 13
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %66, align 1, !tbaa !2453
  store double 0.000000e+00, double* %75, align 1, !tbaa !2453
  %84 = add i64 %162, -32
  %85 = add i64 %198, 18
  store i64 %85, i64* %PC, align 8
  %86 = bitcast i64 %83 to double
  %87 = inttoptr i64 %84 to double*
  %88 = load double, double* %87, align 8
  %89 = fadd double %86, %88
  store double %89, double* %74, align 1, !tbaa !2453
  store i64 0, i64* %55, align 1, !tbaa !2453
  %90 = add i64 %198, 23
  store i64 %90, i64* %PC, align 8
  store double %89, double* %87, align 8
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -20
  %93 = load i64, i64* %PC, align 8
  %94 = add i64 %93, 3
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %92 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %96, 1
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2450
  %99 = icmp eq i32 %96, -1
  %100 = icmp eq i32 %97, 0
  %101 = or i1 %99, %100
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %13, align 1, !tbaa !2428
  %103 = and i32 %97, 255
  %104 = tail call i32 @llvm.ctpop.i32(i32 %103) #10
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  store i8 %107, i8* %20, align 1, !tbaa !2445
  %108 = xor i32 %97, %96
  %109 = lshr i32 %108, 4
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  store i8 %111, i8* %25, align 1, !tbaa !2446
  %112 = zext i1 %100 to i8
  store i8 %112, i8* %28, align 1, !tbaa !2447
  %113 = lshr i32 %97, 31
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %31, align 1, !tbaa !2448
  %115 = lshr i32 %96, 31
  %116 = xor i32 %113, %115
  %117 = add nuw nsw i32 %116, %113
  %118 = icmp eq i32 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %37, align 1, !tbaa !2449
  %120 = add i64 %93, 9
  store i64 %120, i64* %PC, align 8
  store i32 %97, i32* %95, align 4
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, -44
  store i64 %122, i64* %PC, align 8, !tbaa !2450
  br label %block_400712

block_400743:                                     ; preds = %block_400712
  store i64 %202, i64* %RDI, align 8, !tbaa !2450
  %123 = add i64 %198, -435
  %124 = add i64 %198, 12
  %125 = load i64, i64* %RSP, align 8, !tbaa !2450
  %126 = add i64 %125, -8
  %127 = inttoptr i64 %126 to i64*
  store i64 %124, i64* %127, align 8
  store i64 %126, i64* %RSP, align 8, !tbaa !2450
  store i64 %123, i64* %PC, align 8, !tbaa !2450
  %128 = tail call fastcc %struct.Memory* @ext_6040d8_free(%struct.State* nonnull %0, %struct.Memory* %53)
  %129 = load i64, i64* %RSP, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %129, 32
  store i64 %131, i64* %RSP, align 8, !tbaa !2450
  %132 = icmp ugt i64 %129, -33
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %13, align 1, !tbaa !2428
  %134 = trunc i64 %131 to i32
  %135 = and i32 %134, 255
  %136 = tail call i32 @llvm.ctpop.i32(i32 %135) #10
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  store i8 %139, i8* %20, align 1, !tbaa !2445
  %140 = xor i64 %131, %129
  %141 = lshr i64 %140, 4
  %142 = trunc i64 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %25, align 1, !tbaa !2446
  %144 = icmp eq i64 %131, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %28, align 1, !tbaa !2447
  %146 = lshr i64 %131, 63
  %147 = trunc i64 %146 to i8
  store i8 %147, i8* %31, align 1, !tbaa !2448
  %148 = lshr i64 %129, 63
  %149 = xor i64 %146, %148
  %150 = add nuw nsw i64 %149, %146
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %37, align 1, !tbaa !2449
  %153 = add i64 %130, 5
  store i64 %153, i64* %PC, align 8
  %154 = add i64 %129, 40
  %155 = inttoptr i64 %131 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RBP, align 8, !tbaa !2450
  store i64 %154, i64* %RSP, align 8, !tbaa !2450
  %157 = add i64 %130, 6
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %154 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %PC, align 8, !tbaa !2450
  %160 = add i64 %129, 48
  store i64 %160, i64* %RSP, align 8, !tbaa !2450
  ret %struct.Memory* %128

block_400712:                                     ; preds = %block_40071e, %block_4006e0
  %161 = phi i64 [ %122, %block_40071e ], [ %.pre, %block_4006e0 ]
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -20
  %164 = add i64 %161, 3
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %RAX, align 8, !tbaa !2450
  %168 = add i64 %162, -4
  %169 = add i64 %161, 6
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = sub i32 %166, %171
  %173 = icmp ult i32 %166, %171
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %13, align 1, !tbaa !2428
  %175 = and i32 %172, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #10
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %20, align 1, !tbaa !2445
  %180 = xor i32 %171, %166
  %181 = xor i32 %180, %172
  %182 = lshr i32 %181, 4
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  store i8 %184, i8* %25, align 1, !tbaa !2446
  %185 = icmp eq i32 %172, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %28, align 1, !tbaa !2447
  %187 = lshr i32 %172, 31
  %188 = trunc i32 %187 to i8
  store i8 %188, i8* %31, align 1, !tbaa !2448
  %189 = lshr i32 %166, 31
  %190 = lshr i32 %171, 31
  %191 = xor i32 %190, %189
  %192 = xor i32 %187, %189
  %193 = add nuw nsw i32 %192, %191
  %194 = icmp eq i32 %193, 2
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %37, align 1, !tbaa !2449
  %196 = icmp ne i8 %188, 0
  %197 = xor i1 %196, %194
  %.v = select i1 %197, i64 12, i64 49
  %198 = add i64 %.v, %161
  %199 = add i64 %162, -16
  %200 = add i64 %198, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %RAX, align 8, !tbaa !2450
  br i1 %197, label %block_40071e, label %block_400743
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4006d0_frame_dummy() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4006d0_frame_dummy_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4006d0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4006a0___do_global_dtors_aux() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_4006a0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4006a0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040d8_free(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040e0_printf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_403440___libc_csu_fini() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403440;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_403440___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403440___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4033d0___libc_csu_init() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4033d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_4033d0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4033d0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4008c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4008c0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040e8___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4005c0_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040c8_exit(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_604108_posix_memalign(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6040f0_calloc(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_flush_cache() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4006e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_flush_cache_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4006e0_polybench_flush_cache(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_timer_start() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @polybench_timer_start_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400770_polybench_timer_start(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400560;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400560__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_prepare_instruments() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @polybench_prepare_instruments_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400760_polybench_prepare_instruments(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_alloc_data() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400800;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @polybench_alloc_data_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400800_polybench_alloc_data(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_timer_stop() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @polybench_timer_stop_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4007a0_polybench_timer_stop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403444;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_403444__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @polybench_timer_print() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @polybench_timer_print_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4007c0_polybench_timer_print(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #10 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  tail call void @callback_sub_4033d0___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #10 {
  tail call void @callback_sub_403440___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { naked nobuiltin noinline nounwind }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind }
attributes #12 = { norecurse nounwind }
attributes #13 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2430, i64 2065}
!2429 = !{!"_ZTS5State", !2430, i64 16, !2432, i64 2064, !2430, i64 2080, !2433, i64 2088, !2435, i64 2112, !2438, i64 2208, !2439, i64 2480, !2440, i64 2608, !2441, i64 2736, !2430, i64 2760, !2430, i64 2768, !2442, i64 3280}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2433 = !{!"_ZTS8Segments", !2434, i64 0, !2430, i64 2, !2434, i64 4, !2430, i64 6, !2434, i64 8, !2430, i64 10, !2434, i64 12, !2430, i64 14, !2434, i64 16, !2430, i64 18, !2434, i64 20, !2430, i64 22}
!2434 = !{!"short", !2430, i64 0}
!2435 = !{!"_ZTS12AddressSpace", !2436, i64 0, !2437, i64 8, !2436, i64 16, !2437, i64 24, !2436, i64 32, !2437, i64 40, !2436, i64 48, !2437, i64 56, !2436, i64 64, !2437, i64 72, !2436, i64 80, !2437, i64 88}
!2436 = !{!"long", !2430, i64 0}
!2437 = !{!"_ZTS3Reg", !2430, i64 0}
!2438 = !{!"_ZTS3GPR", !2436, i64 0, !2437, i64 8, !2436, i64 16, !2437, i64 24, !2436, i64 32, !2437, i64 40, !2436, i64 48, !2437, i64 56, !2436, i64 64, !2437, i64 72, !2436, i64 80, !2437, i64 88, !2436, i64 96, !2437, i64 104, !2436, i64 112, !2437, i64 120, !2436, i64 128, !2437, i64 136, !2436, i64 144, !2437, i64 152, !2436, i64 160, !2437, i64 168, !2436, i64 176, !2437, i64 184, !2436, i64 192, !2437, i64 200, !2436, i64 208, !2437, i64 216, !2436, i64 224, !2437, i64 232, !2436, i64 240, !2437, i64 248, !2436, i64 256, !2437, i64 264}
!2439 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2440 = !{!"_ZTS3MMX", !2430, i64 0}
!2441 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2442 = !{!"_ZTS13SegmentCaches", !2443, i64 0, !2443, i64 16, !2443, i64 32, !2443, i64 48, !2443, i64 64, !2443, i64 80}
!2443 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2444, i64 8, !2444, i64 12}
!2444 = !{!"int", !2430, i64 0}
!2445 = !{!2429, !2430, i64 2067}
!2446 = !{!2429, !2430, i64 2069}
!2447 = !{!2429, !2430, i64 2071}
!2448 = !{!2429, !2430, i64 2073}
!2449 = !{!2429, !2430, i64 2077}
!2450 = !{!2436, !2436, i64 0}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2444, !2444, i64 0}
!2453 = !{!2454, !2454, i64 0}
!2454 = !{!"double", !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
