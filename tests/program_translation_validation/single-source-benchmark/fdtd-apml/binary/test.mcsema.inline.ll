; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400520__init_type = type <{ [23 x i8] }>
%seg_400540__plt_type = type <{ [112 x i8] }>
%seg_4005b0__text_type = type <{ [10434 x i8] }>
%seg_402e74__fini_type = type <{ [9 x i8] }>
%seg_402e80__rodata_type = type <{ [112 x i8], [7 x i8], [51 x i8], [8 x i8], [84 x i8] }>
%seg_402f88__eh_frame_hdr_type = type <{ [164 x i8] }>
%seg_403030__eh_frame_type = type <{ [648 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64 }>
%seg_604048__data_type = type <{ [16 x i8] }>
%seg_604060__bss_type = type <{ [8 x i8], [8 x i8] }>
%polybench_papi_counters_threadid_type = type <{ [8 x i8] }>
%polybench_program_total_flops_type = type <{ [8 x i8] }>
%polybench_c_end_type = type <{ [8 x i8] }>
%polybench_t_end_type = type <{ [8 x i8] }>
%polybench_t_start_type = type <{ [8 x i8] }>
%polybench_c_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 32
@seg_400520__init = internal constant %seg_400520__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\CD: \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400540__plt = internal constant %seg_400540__plt_type <{ [112 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\C2: \00\00\00\00\00\00\00\00\00\00\00\FF%\BA: \00\00\00\00\00\00\00\00\00\00\00\FF%\B2: \00\00\00\00\00\00\00\00\00\00\00\FF%\AA: \00\00\00\00\00\00\00\00\00\00\00\FF%\A2: \00\00\00\00\00\00\00\00\00\00\00\FF%\9A: \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_4005b0__text = internal constant %seg_4005b0__text_type <{ [10434 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0p.@\00H\C7\C1\00.@\00H\C7\C7\80\08@\00\FF\15\16: \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8X@`\00H=X@`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BFX@`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BEX@`\00UH\81\EEX@`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BFX@`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\01: \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\EF9 \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC \B8\08\00\00\00\89\C6\C7E\FC\00\01@\00Hc}\FC\E8\B1\FE\FF\FF\0FW\C0H\89E\F0\F2\0F\11E\E0\C7E\EC\00\00\00\00\8BE\EC;E\FC\0F\8D%\00\00\00H\8BE\F0HcM\EC\F2\0F\10\04\C8\F2\0FXE\E0\F2\0F\11E\E0\8BE\EC\83\C0\01\89E\EC\E9\CF\FF\FF\FFH\8BE\F0H\89\C7\E8A\FE\FF\FFH\83\C4 ]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5\E8w\FF\FF\FF]\C3\0F\1FD\00\00UH\89\E5\E8\E7\FF\FF\FF\E8\12\00\00\00\F2\0F\11\04%\90@`\00]\C3\0F\1F\80\00\00\00\00UH\89\E5\0FW\C0]\C3\0F\1F\80\00\00\00\00UH\89\E5\E8\E7\FF\FF\FF\F2\0F\11\04%\88@`\00]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\BF\F0.@\00\00\00\00\00\F2\0F\10\04%\88@`\00\F2\0F\5C\04%\90@`\00\B0\01\E8\B5\FD\FF\FF\89E\FCH\83\C4\10]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8\89u\F4H\8B}\F8H\89}\E8Hc}\F4H\0F\AF}\E8H\89}\E8H\8B}\E8\E8\13\00\00\00H\89E\E0H\8BE\E0H\83\C4 ]\C3\0F\1FD\00\00UH\89\E5H\83\EC H\8DE\F0\B9 \00\00\00\89\CEH\89}\F8H\C7E\F0\00\00\00\00H\8BU\F8H\89\C7\E8u\FD\FF\FF\89E\ECH\83}\F0\00\0F\84\0A\00\00\00\83}\EC\00\0F\84&\00\00\00H\BE\F7.@\00\00\00\00\00H\8B<%`@`\00\B0\00\E8$\FD\FF\FF\BF\01\00\00\00\89E\E8\E8'\FD\FF\FFH\8BE\F0H\83\C4 ]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\81\EC\88\01\00\00\B8\81\10\00\00\89\C1\B8\08\00\00\00\C7E\D4\00\00\00\00\89}\D0H\89u\C8\C7E\C4@\00\00\00\C7E\C0@\00\00\00\C7E\BC@\00\00\00H\89\CF\89\C6\E8\F3\FE\FF\FF\BE\81\10\00\00\89\F7\BE\08\00\00\00H\89E\A0\E8\DE\FE\FF\FF\BE\81\10\00\00\89\F7\BE\08\00\00\00H\89E\98\E8\C9\FE\FF\FF\BE\81\10\00\00\89\F7\BE\08\00\00\00H\89E\90\E8\B4\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89E\88\E8\9F\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89E\80\E8\8A\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85x\FF\FF\FF\E8r\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85p\FF\FF\FF\E8Z\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85h\FF\FF\FF\E8B\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85`\FF\FF\FF\E8*\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85X\FF\FF\FF\E8\12\FE\FF\FF\BE\C10\04\00\89\F7\BE\08\00\00\00H\89\85P\FF\FF\FF\E8\FA\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85H\FF\FF\FF\E8\E2\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85@\FF\FF\FF\E8\CA\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\858\FF\FF\FF\E8\B2\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\850\FF\FF\FF\E8\9A\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85(\FF\FF\FF\E8\82\FD\FF\FF\BEA\00\00\00\89\F7\BE\08\00\00\00H\89\85 \FF\FF\FF\E8j\FD\FF\FFH\8DM\B0L\8DE\A8H\89\85\18\FF\FF\FF\8B}\C4\8Bu\BC\8BU\C0L\8BM\A0H\8BE\98L\8B\95x\FF\FF\FFL\8B\9Dp\FF\FF\FFH\8B\9Dh\FF\FF\FFL\8B\B5@\FF\FF\FFL\8B\BD8\FF\FF\FFL\8B\A50\FF\FF\FFL\8B\AD(\FF\FF\FFH\89\85\10\FF\FF\FFH\8B\85 \FF\FF\FFH\89\85\08\FF\FF\FFH\8B\85\18\FF\FF\FFH\89\85\00\FF\FF\FFH\8B\85\10\FF\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\08\FF\FF\FFH\89D$@H\8B\85\00\FF\FF\FFH\89D$H\E8{\04\00\00\8B}\C4\8Bu\BC\8BU\C0\F2\0F\10E\B0\F2\0F\10M\A8H\8BM\A0L\8BE\98L\8BM\90H\8BE\88L\8BU\80L\8B\9Dx\FF\FF\FFH\8B\9Dp\FF\FF\FFL\8B\B5h\FF\FF\FFL\8B\BD@\FF\FF\FFL\8B\A58\FF\FF\FFL\8B\AD0\FF\FF\FFH\89\85\F8\FE\FF\FFH\8B\85(\FF\FF\FFH\89\85\F0\FE\FF\FFH\8B\85 \FF\FF\FFH\89\85\E8\FE\FF\FFH\8B\85\18\FF\FF\FFH\89\85\E0\FE\FF\FFH\8B\85\F8\FE\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\F0\FE\FF\FFH\89D$@H\8B\85\E8\FE\FF\FFH\89D$HH\8B\85\E0\FE\FF\FFH\89D$P\E8\E2\07\00\00H\8DM\B0L\8DE\A8\8B}\C4\8Bu\BC\8BU\C0L\8BM\A0H\8BE\98L\8B\95X\FF\FF\FFL\8B\9DP\FF\FF\FFH\8B\9DH\FF\FF\FFL\8B\B5@\FF\FF\FFL\8B\BD8\FF\FF\FFL\8B\A50\FF\FF\FFL\8B\AD(\FF\FF\FFH\89\85\D8\FE\FF\FFH\8B\85 \FF\FF\FFH\89\85\D0\FE\FF\FFH\8B\85\18\FF\FF\FFH\89\85\C8\FE\FF\FFH\8B\85\D8\FE\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\D0\FE\FF\FFH\89D$@H\8B\85\C8\FE\FF\FFH\89D$H\E8\EA\02\00\00\8B}\C4\8Bu\BC\8BU\C0\F2\0F\10E\B0\F2\0F\10M\A8H\8BM\A0L\8BE\98L\8BM\90H\8BE\88L\8B\95`\FF\FF\FFL\8B\9DX\FF\FF\FFH\8B\9DP\FF\FF\FFL\8B\B5H\FF\FF\FFL\8B\BD@\FF\FF\FFL\8B\A58\FF\FF\FFL\8B\AD0\FF\FF\FFH\89\85\C0\FE\FF\FFH\8B\85(\FF\FF\FFH\89\85\B8\FE\FF\FFH\8B\85 \FF\FF\FFH\89\85\B0\FE\FF\FFH\8B\85\18\FF\FF\FFH\89\85\A8\FE\FF\FFH\8B\85\C0\FE\FF\FFH\89\04$L\89T$\08L\89\5C$\10H\89\5C$\18L\89t$ L\89|$(L\89d$0L\89l$8H\8B\85\B8\FE\FF\FFH\89D$@H\8B\85\B0\FE\FF\FFH\89D$HH\8B\85\A8\FE\FF\FFH\89D$P\E8\8E\11\00\00\8B}\C4\8Bu\BC\8BU\C0H\8BM\80L\8B\85`\FF\FF\FF\E8\B5\1C\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E9\C7\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8Dx\FF\FF\FFL\8B\85X\FF\FF\FF\E8\84\1C\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E9\96\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8Dp\FF\FF\FFL\8B\85P\FF\FF\FF\E8S\1C\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E9e\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8Dh\FF\FF\FFL\8B\85H\FF\FF\FF\E8\22\1C\00\00\83\F8\00\0F\85\0C\00\00\00\C7E\D4\01\00\00\00\E94\01\00\00\8B}\C4\8Bu\BC\8BU\C0H\8B\8D`\FF\FF\FFL\8B\85X\FF\FF\FFL\8B\8DP\FF\FF\FFH\8B\85H\FF\FF\FFH\89\04$\E8\7F\1D\00\00H\8BE\A0H\89\C7\E8\D3\F6\FF\FFH\8BE\98H\89\C7\E8\C7\F6\FF\FFH\8BE\90H\89\C7\E8\BB\F6\FF\FFH\8BE\88H\89\C7\E8\AF\F6\FF\FFH\8BE\80H\89\C7\E8\A3\F6\FF\FFH\8B\85x\FF\FF\FFH\89\C7\E8\94\F6\FF\FFH\8B\85p\FF\FF\FFH\89\C7\E8\85\F6\FF\FFH\8B\85h\FF\FF\FFH\89\C7\E8v\F6\FF\FFH\8B\85`\FF\FF\FFH\89\C7\E8g\F6\FF\FFH\8B\85X\FF\FF\FFH\89\C7\E8X\F6\FF\FFH\8B\85P\FF\FF\FFH\89\C7\E8I\F6\FF\FFH\8B\85H\FF\FF\FFH\89\C7\E8:\F6\FF\FFH\8B\85@\FF\FF\FFH\89\C7\E8+\F6\FF\FFH\8B\858\FF\FF\FFH\89\C7\E8\1C\F6\FF\FFH\8B\850\FF\FF\FFH\89\C7\E8\0D\F6\FF\FFH\8B\85(\FF\FF\FFH\89\C7\E8\FE\F5\FF\FFH\8B\85 \FF\FF\FFH\89\C7\E8\EF\F5\FF\FFH\8B\85\18\FF\FF\FFH\89\C7\E8\E0\F5\FF\FF\C7E\D4\00\00\00\00\8BE\D4H\81\C4\88\01\00\00[A\5CA]A^A_]\C3\0F\1F@\00UH\89\E5AWAVAUATSPH\8BEXL\8BUPL\8B]HH\8B]@L\8Bu8L\8B}0L\8Be(L\8Bm H\89E\98H\8BE\18H\89E\90H\8BE\10\F2\0F\10\05\B2\1E\00\00\F2\0F\10\0D\B2\1E\00\00\89}\D4\89u\D0\89U\CCH\89M\C0L\89E\B8L\89M\B0H\8BM\C0\F2\0F\11\09H\8BM\B8\F2\0F\11\01\C7E\AC\00\00\00\00L\89m\88L\89u\80L\89\BDx\FF\FF\FFL\89\A5p\FF\FF\FFH\89\9Dh\FF\FF\FFL\89\9D`\FF\FF\FFH\89\85X\FF\FF\FFL\89\95P\FF\FF\FF\8BE\AC;E\D4\0F\8Fd\00\00\00\F2\0F\10\05`\1E\00\00\F2\0F\10\0D`\1E\00\00\8BE\AC\F2\0F*\D0\F2\0FX\D1\8BE\D0\F2\0F*\C8\F2\0F^\D1H\8BM0HcU\AC\F2\0F\11\14\D1\8BE\AC\F2\0F*\C8\F2\0FX\C8\8BE\D0\F2\0F*\C0\F2\0F^\C8H\8BM8HcU\AC\F2\0F\11\0C\D1\8BE\AC\83\C0\01\89E\AC\E9\90\FF\FF\FF\C7E\AC\00\00\00\00\8BE\AC;E\D0\0F\8Fd\00\00\00\F2\0F\10\05\09\1E\00\00\F2\0F\10\0D\D9\1D\00\00\8BE\AC\F2\0F*\D0\F2\0FX\D1\8BE\D0\F2\0F*\C8\F2\0F^\D1H\8BM@HcU\AC\F2\0F\11\14\D1\8BE\AC\F2\0F*\C8\F2\0FX\C8\8BE\D0\F2\0F*\C0\F2\0F^\C8H\8BMHHcU\AC\F2\0F\11\0C\D1\8BE\AC\83\C0\01\89E\AC\E9\90\FF\FF\FF\C7E\AC\00\00\00\00\8BE\AC;E\CC\0F\8Fd\00\00\00\F2\0F\10\05\82\1D\00\00\F2\0F\10\0D\82\1D\00\00\8BE\AC\F2\0F*\D0\F2\0FX\D1\8BE\D0\F2\0F*\C8\F2\0F^\D1H\8BMPHcU\AC\F2\0F\11\14\D1\8BE\AC\F2\0F*\C8\F2\0FX\C8\8BE\D0\F2\0F*\C0\F2\0F^\C8H\8BMXHcU\AC\F2\0F\11\0C\D1\8BE\AC\83\C0\01\89E\AC\E9\90\FF\FF\FF\C7E\AC\00\00\00\00\8BE\AC;E\D4\0F\8F\08\02\00\00\C7E\A8\00\00\00\00\8BE\A8;E\CC\0F\8F\E2\01\00\00\F2\0F\10\05\D0\1C\00\00\F2\0F\10\0D\D0\1C\00\00\8BE\AC\F2\0F*\D0\8BE\A8\83\C0\01\F2\0F*\D8\F2\0FY\D3\F2\0FX\D1\8BE\CC\F2\0F*\C8\F2\0F^\D1H\8BM\10HcU\ACHi\D2\08\02\00\00H\01\D1HcU\A8\F2\0F\11\14\D1\8BE\AC\F2\0F*\C8\8BE\A8\83\C0\02\F2\0F*\D0\F2\0FY\CA\F2\0FX\C8\8BE\CC\F2\0F*\C0\F2\0F^\C8H\8BM\B0HcU\ACHi\D2\08\02\00\00H\01\D1HcU\A8\F2\0F\11\0C\D1\C7E\A4\00\00\00\00\8BE\A4;E\D0\0F\8F.\01\00\00\F2\0F\10\05?\1C\00\00\F2\0F\10\0D?\1C\00\00\F2\0F\10\15?\1C\00\00\8BE\AC\F2\0F*\D8\8BE\A8\83\C0\03\F2\0F*\E0\F2\0FY\DC\8BE\A4\F2\0F*\E0\F2\0FX\DC\F2\0FX\DA\8BE\D0\F2\0F*\D0\F2\0F^\DAH\8BM\18HcU\ACHi\D2\08\84\00\00H\01\D1HcU\A8Hi\D2\08\02\00\00H\01\D1HcU\A4\F2\0F\11\1C\D1\8BE\AC\F2\0F*\D0\8BE\A8\83\C0\04\F2\0F*\D8\F2\0FY\D3\8BE\A4\F2\0F*\D8\F2\0FX\D3\F2\0FX\D1\8BE\CC\F2\0F*\C8\F2\0F^\D1H\8BM HcU\ACHi\D2\08\84\00\00H\01\D1HcU\A8Hi\D2\08\02\00\00H\01\D1HcU\A4\F2\0F\11\14\D1\8BE\AC\F2\0F*\C8\8BE\A8\83\C0\05\F2\0F*\D0\F2\0FY\CA\8BE\A4\F2\0F*\D0\F2\0FX\CA\F2\0FX\C8\8BE\D4\F2\0F*\C0\F2\0F^\C8H\8BM(HcU\ACHi\D2\08\84\00\00H\01\D1HcU\A8Hi\D2\08\02\00\00H\01\D1HcU\A4\F2\0F\11\0C\D1\8BE\A4\83\C0\01\89E\A4\E9\C6\FE\FF\FF\E9\00\00\00\00\8BE\A8\83\C0\01\89E\A8\E9\12\FE\FF\FF\E9\00\00\00\00\8BE\AC\83\C0\01\89E\AC\E9\EC\FD\FF\FFH\83\C4\08[A\5CA]A^A_]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\83\EC H\8BE`L\8BUXL\8B]PH\8B]HL\8Bu@L\8B}8L\8Be0L\8Bm(H\89E\88H\8BE H\89E\80H\8BE\18H\89\85x\FF\FF\FFH\8BE\10\89}\D4\89u\D0\89U\CC\F2\0F\11E\C0\F2\0F\11M\B8H\89M\B0L\89E\A8L\89M\A0\C7E\9C\00\00\00\00L\89\ADp\FF\FF\FFH\89\85h\FF\FF\FFL\89\95`\FF\FF\FFL\89\9DX\FF\FF\FFH\89\9DP\FF\FF\FFL\89\B5H\FF\FF\FFL\89\BD@\FF\FF\FFL\89\A58\FF\FF\FF\8BE\9C;E\D4\0F\8Dr\0A\00\00\C7E\98\00\00\00\00\8BE\98;E\CC\0F\8DL\0A\00\00\C7E\94\00\00\00\00\8BE\94;E\D0\0F\8D\A0\02\00\00H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\10\04\C8H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8\8BU\98\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8\8BU\94\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\98\F2\0F\10\04\C8H\8BE`HcM\98\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\98\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\94\F2\0F\10\04\C8H\8BEPHcM\94\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8\8BE\94\83\C0\01\89E\94\E9T\FD\FF\FFH\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8\8BU\98\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\98\F2\0F\10\04\C8H\8BE`HcM\98\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\98\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\D0\F2\0F\10\04\C8H\8BEPHcM\D0\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\C7E\94\00\00\00\00\8BE\94;E\D0\0F\8D\8D\02\00\00H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\10\04\C8H\8BE\B0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8\8BU\94\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\CC\F2\0F\10\04\C8H\8BE`HcM\98\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\98\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\94\F2\0F\10\04\C8H\8BEPHcM\94\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8\8BE\94\83\C0\01\89E\94\E9g\FD\FF\FFH\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE\B0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8HcM\9CHi\C9\08\02\00\00H\01\C8HcM\CC\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\CC\F2\0F\10\04\C8H\8BE`HcM\CC\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\CC\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\D0\F2\0F\10\04\C8H\8BEPHcM\D0\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\8BE\98\83\C0\01\89E\98\E9\A8\F5\FF\FF\E9\00\00\00\00\8BE\9C\83\C0\01\89E\9C\E9\82\F5\FF\FFH\83\C4 [A\5CA]A^A_]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\83\EC H\8BE`L\8BUXL\8B]PH\8B]HL\8Bu@L\8B}8L\8Be0L\8Bm(H\89E\88H\8BE H\89E\80H\8BE\18H\89\85x\FF\FF\FFH\8BE\10\89}\D4\89u\D0\89U\CC\F2\0F\11E\C0\F2\0F\11M\B8H\89M\B0L\89E\A8L\89M\A0\C7E\9C\00\00\00\00L\89\ADp\FF\FF\FFH\89\85h\FF\FF\FFL\89\95`\FF\FF\FFL\89\9DX\FF\FF\FFH\89\9DP\FF\FF\FFL\89\B5H\FF\FF\FFL\89\BD@\FF\FF\FFL\89\A58\FF\FF\FF\8BE\9C;E\D4\0F\8Dr\0A\00\00\C7E\98\00\00\00\00\8BE\98;E\CC\0F\8DL\0A\00\00\C7E\94\00\00\00\00\8BE\94;E\D0\0F\8D\A0\02\00\00H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\10\04\C8H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8\8BU\98\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8\8BU\94\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\98\F2\0F\10\04\C8H\8BE`HcM\98\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\98\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\94\F2\0F\10\04\C8H\8BEPHcM\94\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8\8BE\94\83\C0\01\89E\94\E9T\FD\FF\FFH\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8\8BU\98\83\C2\01Hc\CAHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\98\F2\0F\10\04\C8H\8BE`HcM\98\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\98\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\D0\F2\0F\10\04\C8H\8BEPHcM\D0\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\C7E\94\00\00\00\00\8BE\94;E\D0\0F\8D\8D\02\00\00H\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\10\04\C8H\8BE\B0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8\8BU\94\83\C2\01Hc\CA\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\CC\F2\0F\10\04\C8H\8BE`HcM\98\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\98Hi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\98\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\94\F2\0F\10\04\C8H\8BEPHcM\94\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\94\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\94\F2\0F\11\04\C8\8BE\94\83\C0\01\89E\94\E9g\FD\FF\FFH\8BE HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\10\04\C8H\8BE\B0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A8HcM\9CHi\C9\08\02\00\00H\01\C8HcM\CC\F2\0FX\04\C8H\8BE(HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\5C\04\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEXHcM\CC\F2\0F\10\04\C8H\8BE`HcM\CC\F2\0F^\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\B8H\8BE`HcM\CC\F2\0F^\0C\C8H\8BE\A0HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\11\04\C8H\8BEHHcM\D0\F2\0F\10\04\C8H\8BEPHcM\D0\F2\0F^\04\C8H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\04\C8\F2\0F\10M\C0H\8BE@HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0FY\0C\C8\F2\0FX\C1\F2\0F\10M\C0H\8BE8HcM\9C\F2\0FY\0C\C8H\8BEPHcM\D0\F2\0F^\0C\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0FY\0C\C8\F2\0F\5C\C1H\8BE0HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8H\8BE\10HcM\9CHi\C9\08\02\00\00H\01\C8HcM\98\F2\0F\10\04\C8H\8BE\18HcM\9CHi\C9\08\84\00\00H\01\C8HcM\CCHi\C9\08\02\00\00H\01\C8HcM\D0\F2\0F\11\04\C8\8BE\98\83\C0\01\89E\98\E9\A8\F5\FF\FF\E9\00\00\00\00\8BE\9C\83\C0\01\89E\9C\E9\82\F5\FF\FFH\83\C4 [A\5CA]A^A_]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECp\F2\0F\10\05x\04\00\00\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0\F2\0F\11E\C8\C7E\DC\00\00\00\00\8BE\DC\8BM\F8\83\C1\019\C8\0F\8DC\01\00\00\C7E\D8\00\00\00\00\8BE\D8\8BM\F0\83\C1\019\C8\0F\8D\18\01\00\00\C7E\D4\00\00\00\00\8BE\D4\8BM\F4\83\C1\019\C8\0F\8D\ED\00\00\00H\8BE\E8HcM\DCHi\C9\08\84\00\00H\01\C8HcM\D8Hi\C9\08\02\00\00H\01\C8HcM\D4\F2\0F\10\04\C8\F2\0F\11E\C0H\8BE\E0HcM\DCHi\C9\08\84\00\00H\01\C8HcM\D8Hi\C9\08\02\00\00H\01\C8HcM\D4\F2\0F\10\04\C8\F2\0F\11E\B8\F2\0F\10E\C0\F2\0F\5CE\B8\0F(\0D\B5\03\00\00f\0F\DB\C1\F2\0F\11E\B0\F2\0F\10E\B0f\0F.E\C8\0F\86T\00\00\00H\BE2/@\00\00\00\00\00H\8B<%`@`\00\8BU\DC\8BM\D8D\8BE\D4\F2\0F\10E\C0D\8BM\DC\8BE\D8D\8BU\D4\F2\0F\10M\B8\F2\0F\10U\C8\89\04$D\89T$\08\B0\03\E8\F7\D9\FF\FF\C7E\FC\00\00\00\00\89E\AC\E9@\00\00\00\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\02\FF\FF\FF\E9\00\00\00\00\8BE\D8\83\C0\01\89E\D8\E9\D7\FE\FF\FF\E9\00\00\00\00\8BE\DC\83\C0\01\89E\DC\E9\AC\FE\FF\FF\C7E\FC\01\00\00\00\8BE\FCH\83\C4p]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`H\8BE\10\89}\FC\89u\F8\89U\F4H\89M\E8L\89E\E0L\89M\D8\C7E\D4\00\00\00\00H\89E\C0\8BE\D4;E\FC\0F\8F\B2\01\00\00\C7E\D0\00\00\00\00\8BE\D0;E\F4\0F\8F\8C\01\00\00\C7E\CC\00\00\00\00\8BE\CC;E\F8\0F\8Ff\01\00\00H\BE*/@\00\00\00\00\00H\8B<%`@`\00H\8BE\E8HcM\D4Hi\C9\08\84\00\00H\01\C8HcM\D0Hi\C9\08\02\00\00H\01\C8HcM\CC\F2\0F\10\04\C8\B0\01\E8\F0\D8\FF\FFH\BE*/@\00\00\00\00\00H\8B<%`@`\00H\8BM\E0HcU\D4Hi\D2\08\84\00\00H\01\D1HcU\D0Hi\D2\08\02\00\00H\01\D1HcU\CC\F2\0F\10\04\D1\89E\BC\B0\01\E8\AB\D8\FF\FFH\BE*/@\00\00\00\00\00H\8B<%`@`\00H\8BM\D8HcU\D4Hi\D2\08\84\00\00H\01\D1HcU\D0Hi\D2\08\02\00\00H\01\D1HcU\CC\F2\0F\10\04\D1\89E\B8\B0\01\E8f\D8\FF\FFH\BE*/@\00\00\00\00\00H\8B<%`@`\00H\8BM\10HcU\D4Hi\D2\08\84\00\00H\01\D1HcU\D0Hi\D2\08\02\00\00H\01\D1HcU\CC\F2\0F\10\04\D1\89E\B4\B0\01\E8!\D8\FF\FFA\B8\14\00\00\00D\8BM\D4D\0F\AFM\F8D\03M\D0\89E\B0D\89\C8\99A\F7\F8\83\FA\00\0F\85\1C\00\00\00H\BE\F5.@\00\00\00\00\00H\8B<%`@`\00\B0\00\E8\E2\D7\FF\FF\89E\AC\E9\00\00\00\00\8BE\CC\83\C0\01\89E\CC\E9\8E\FE\FF\FF\E9\00\00\00\00\8BE\D0\83\C0\01\89E\D0\E9h\FE\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9B\FE\FF\FFH\BE\F5.@\00\00\00\00\00H\8B<%`@`\00\B0\00\E8\8D\D7\FF\FF\89E\A8H\83\C4`]\C3\0F\1F@\00AWAVI\89\D7AUATL\8D%\DE\0F \00UH\8D-\DE\0F \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\EF\D6\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_402e74__fini = internal constant %seg_402e74__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_402e80__rodata = internal constant %seg_402e80__rodata_type <{ [112 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00E@\00\00\00\00\00J\A2@\00\00\00\00\00\00&@\00\00\00\00\00\00$@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\00\00\00\00\00\00\18@\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\F1h\E3\88\B5\F8\E4>\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [7 x i8] c"%0.6f\0A\00", [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", [8 x i8] c"%0.2lf \00", [84 x i8] c"A[%d][%d][%d] = %lf and B[%d][%d][%d] = %lf differ more than FP_ABSTOLERANCE = %lf\0A\00" }>
@seg_402f88__eh_frame_hdr = internal constant %seg_402f88__eh_frame_hdr_type <{ [164 x i8] c"\01\1B\03;\A4\00\00\00\13\00\00\00\B8\D5\FF\FF\00\01\00\00(\D6\FF\FF\C0\00\00\00X\D6\FF\FF\EC\00\00\00\18\D7\FF\FF(\01\00\00\98\D7\FF\FFD\01\00\00\A8\D7\FF\FF`\01\00\00\C8\D7\FF\FF|\01\00\00\D8\D7\FF\FF\98\01\00\00\F8\D7\FF\FF\B4\01\00\008\D8\FF\FF\D0\01\00\00x\D8\FF\FF\EC\01\00\00\F8\D8\FF\FF\08\02\00\00\08\E0\FF\FF,\02\00\00H\E4\FF\FFP\02\00\00\88\EF\FF\FFt\02\00\00\C8\FA\FF\FF\98\02\00\00h\FC\FF\FF\B4\02\00\00x\FE\FF\FF\D0\02\00\00\E8\FE\FF\FF\18\03\00\00" }>
@seg_403030__eh_frame = internal constant %seg_403030__eh_frame_type <{ [648 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00`\D5\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00d\D5\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\B0\D4\FF\FFp\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\E8\D5\FF\FFu\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00L\D6\FF\FF\0B\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00@\D6\FF\FF\19\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00D\D6\FF\FF\09\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\008\D6\FF\FF\14\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00<\D6\FF\FF4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00`\D6\FF\FF;\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\84\D6\FF\FFs\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00 \00\00\008\01\00\00\E8\D6\FF\FF\0C\07\00\00\00A\0E\10\86\02C\0D\06P\83\07\8C\06\8D\05\8E\04\8F\03 \00\00\00\5C\01\00\00\D4\DD\FF\FF4\04\00\00\00A\0E\10\86\02C\0D\06J\83\07\8C\06\8D\05\8E\04\8F\03 \00\00\00\80\01\00\00\F0\E1\FF\FF7\0B\00\00\00A\0E\10\86\02C\0D\06M\83\07\8C\06\8D\05\8E\04\8F\03 \00\00\00\A4\01\00\00\0C\ED\FF\FF7\0B\00\00\00A\0E\10\86\02C\0D\06M\83\07\8C\06\8D\05\8E\04\8F\03\18\00\00\00\C8\01\00\00(\F8\FF\FF\91\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\01\00\00\AC\F9\FF\FF\0C\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\00\02\00\00\A0\FB\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00H\02\00\00\C8\FB\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400690_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400660___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604000__got_plt = internal global %seg_604000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @calloc to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64)* @exit to i64), i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64) }>
@seg_604048__data = internal global %seg_604048__data_type zeroinitializer
@seg_604060__bss = internal global %seg_604060__bss_type zeroinitializer
@polybench_papi_counters_threadid = global %polybench_papi_counters_threadid_type zeroinitializer
@polybench_program_total_flops = global %polybench_program_total_flops_type zeroinitializer
@polybench_c_end = global %polybench_c_end_type zeroinitializer
@polybench_t_end = global %polybench_t_end_type zeroinitializer
@polybench_t_start = global %polybench_t_start_type zeroinitializer
@polybench_c_start = global %polybench_c_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400690_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400660___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e70___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e00___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_flush_cache_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_stop_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_alloc_data_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_print_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_timer_start_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @polybench_prepare_instruments_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_4006a0_polybench_flush_cache_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400800_xmalloc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400520__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400720_polybench_prepare_instruments_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4013d0_kernel_fdtd_apml_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005f0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402bf0_print_array_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @posix_memalign(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006a0_polybench_flush_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %28 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %27, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %28 to %"class.std::bitset"*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %30 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %29, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %30 to %union.vec128_t*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 32
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 32
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2432
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2446
  %55 = xor i64 32, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %75 = load i32, i32* %EAX
  %76 = zext i32 %75 to i64
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 2
  store i64 %78, i64* %PC
  %79 = and i64 %76, 4294967295
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 4
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  store i32 4194560, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  %90 = load i32, i32* %89
  %91 = sext i32 %90 to i64
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %92 = load i64, i64* %PC
  %93 = sub i64 %92, 330
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 5
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %99 = load i64, i64* %98, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %95, i64* %101
  store i64 %100, i64* %98, align 8, !tbaa !2428
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %93, i64* %102, align 8, !tbaa !2428
  %103 = load i64, i64* %PC
  %104 = call %struct.Memory* @ext_6040b8_calloc(%struct.State* %0, i64 %103, %struct.Memory* %2)
  %105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %106 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %107 = bitcast %union.vec128_t* %XMM0 to i8*
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = bitcast i8* %106 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = getelementptr inbounds i8, i8* %106, i64 8
  %113 = bitcast i8* %112 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = bitcast i8* %107 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = getelementptr inbounds i8, i8* %107, i64 8
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = xor i64 %116, %111
  %121 = xor i64 %119, %114
  %122 = trunc i64 %120 to i32
  %123 = lshr i64 %120, 32
  %124 = trunc i64 %123 to i32
  %125 = bitcast i8* %105 to i32*
  store i32 %122, i32* %125, align 1, !tbaa !2451
  %126 = getelementptr inbounds i8, i8* %105, i64 4
  %127 = bitcast i8* %126 to i32*
  store i32 %124, i32* %127, align 1, !tbaa !2451
  %128 = trunc i64 %121 to i32
  %129 = getelementptr inbounds i8, i8* %105, i64 8
  %130 = bitcast i8* %129 to i32*
  store i32 %128, i32* %130, align 1, !tbaa !2451
  %131 = lshr i64 %121, 32
  %132 = trunc i64 %131 to i32
  %133 = getelementptr inbounds i8, i8* %105, i64 12
  %134 = bitcast i8* %133 to i32*
  store i32 %132, i32* %134, align 1, !tbaa !2451
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 16
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %136 to i64*
  store i64 %137, i64* %140
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 32
  %143 = bitcast %union.vec128_t* %XMM0 to i8*
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  %146 = bitcast i8* %143 to double*
  %147 = load double, double* %146, align 1
  %148 = inttoptr i64 %142 to double*
  store double %147, double* %148
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 20
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 7
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i32*
  store i32 0, i32* %153
  br label %block_4006d2

block_4006de:                                     ; preds = %block_4006d2
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 20
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i32*
  %159 = load i32, i32* %158
  %160 = sext i32 %159 to i64
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %162 = load i64, i64* %RAX
  %163 = load i64, i64* %RCX
  %164 = mul i64 %163, 8
  %165 = add i64 %164, %162
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to double*
  %169 = load double, double* %168
  %170 = bitcast i8* %161 to double*
  store double %169, double* %170, align 1, !tbaa !2452
  %171 = getelementptr inbounds i8, i8* %161, i64 8
  %172 = bitcast i8* %171 to double*
  store double 0.000000e+00, double* %172, align 1, !tbaa !2452
  %173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 32
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 5
  store i64 %178, i64* %PC
  %179 = bitcast i8* %174 to double*
  %180 = load double, double* %179, align 1
  %181 = getelementptr inbounds i8, i8* %174, i64 8
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 1
  %184 = inttoptr i64 %176 to double*
  %185 = load double, double* %184
  %186 = fadd double %180, %185
  %187 = bitcast i8* %173 to double*
  store double %186, double* %187, align 1, !tbaa !2452
  %188 = getelementptr inbounds i8, i8* %173, i64 8
  %189 = bitcast i8* %188 to i64*
  store i64 %183, i64* %189, align 1, !tbaa !2452
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 32
  %192 = bitcast %union.vec128_t* %XMM0 to i8*
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  store i64 %194, i64* %PC
  %195 = bitcast i8* %192 to double*
  %196 = load double, double* %195, align 1
  %197 = inttoptr i64 %191 to double*
  store double %196, double* %197
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 20
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i32*
  %203 = load i32, i32* %202
  %204 = zext i32 %203 to i64
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 3
  store i64 %207, i64* %PC
  %208 = trunc i64 %205 to i32
  %209 = add i32 1, %208
  %210 = zext i32 %209 to i64
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = icmp ult i32 %209, %208
  %212 = icmp ult i32 %209, 1
  %213 = or i1 %211, %212
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %214, i8* %215, align 1, !tbaa !2432
  %216 = and i32 %209, 255
  %217 = call i32 @llvm.ctpop.i32(i32 %216) #16
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %220, i8* %221, align 1, !tbaa !2446
  %222 = xor i64 1, %205
  %223 = trunc i64 %222 to i32
  %224 = xor i32 %223, %209
  %225 = lshr i32 %224, 4
  %226 = trunc i32 %225 to i8
  %227 = and i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i32 %209, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i32 %209, 31
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = lshr i32 %208, 31
  %236 = xor i32 %232, %235
  %237 = add nuw nsw i32 %236, %232
  %238 = icmp eq i32 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 20
  %243 = load i32, i32* %EAX
  %244 = zext i32 %243 to i64
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 3
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %242 to i32*
  store i32 %243, i32* %247
  %248 = load i64, i64* %PC
  %249 = sub i64 %248, 44
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %249, i64* %252, align 8, !tbaa !2428
  br label %block_4006d2

block_400703:                                     ; preds = %block_4006d2
  %253 = load i64, i64* %RAX
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 3
  store i64 %255, i64* %PC
  store i64 %253, i64* %RDI, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = sub i64 %256, 442
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 5
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %263 = load i64, i64* %262, align 8, !tbaa !2428
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  store i64 %259, i64* %265
  store i64 %264, i64* %262, align 8, !tbaa !2428
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %257, i64* %266, align 8, !tbaa !2428
  %267 = load i64, i64* %PC
  %268 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %267, %struct.Memory* %MEMORY.0)
  %269 = load i64, i64* %RSP
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC
  %272 = add i64 32, %269
  store i64 %272, i64* %RSP, align 8, !tbaa !2428
  %273 = icmp ult i64 %272, %269
  %274 = icmp ult i64 %272, 32
  %275 = or i1 %273, %274
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %276, i8* %277, align 1, !tbaa !2432
  %278 = trunc i64 %272 to i32
  %279 = and i32 %278, 255
  %280 = call i32 @llvm.ctpop.i32(i32 %279) #16
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %283, i8* %284, align 1, !tbaa !2446
  %285 = xor i64 32, %269
  %286 = xor i64 %285, %272
  %287 = lshr i64 %286, 4
  %288 = trunc i64 %287 to i8
  %289 = and i8 %288, 1
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %289, i8* %290, align 1, !tbaa !2447
  %291 = icmp eq i64 %272, 0
  %292 = zext i1 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %292, i8* %293, align 1, !tbaa !2448
  %294 = lshr i64 %272, 63
  %295 = trunc i64 %294 to i8
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %295, i8* %296, align 1, !tbaa !2449
  %297 = lshr i64 %269, 63
  %298 = xor i64 %294, %297
  %299 = add nuw nsw i64 %298, %294
  %300 = icmp eq i64 %299, 2
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %301, i8* %302, align 1, !tbaa !2450
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 1
  store i64 %304, i64* %PC
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %306 = load i64, i64* %305, align 8, !tbaa !2428
  %307 = add i64 %306, 8
  %308 = inttoptr i64 %306 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RBP, align 8, !tbaa !2428
  store i64 %307, i64* %305, align 8, !tbaa !2428
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 1
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %314 = load i64, i64* %313, align 8, !tbaa !2428
  %315 = inttoptr i64 %314 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %312, align 8, !tbaa !2428
  %317 = add i64 %314, 8
  store i64 %317, i64* %313, align 8, !tbaa !2428
  ret %struct.Memory* %268

block_4006d2:                                     ; preds = %block_4006de, %block_4006a0
  %MEMORY.0 = phi %struct.Memory* [ %104, %block_4006a0 ], [ %MEMORY.0, %block_4006de ]
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 20
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 3
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i32*
  %323 = load i32, i32* %322
  %324 = zext i32 %323 to i64
  store i64 %324, i64* %RAX, align 8, !tbaa !2428
  %325 = load i32, i32* %EAX
  %326 = zext i32 %325 to i64
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 4
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331
  %333 = sub i32 %325, %332
  %334 = icmp ult i32 %325, %332
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %335, i8* %336, align 1, !tbaa !2432
  %337 = and i32 %333, 255
  %338 = call i32 @llvm.ctpop.i32(i32 %337) #16
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %341, i8* %342, align 1, !tbaa !2446
  %343 = xor i32 %332, %325
  %344 = xor i32 %343, %333
  %345 = lshr i32 %344, 4
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %347, i8* %348, align 1, !tbaa !2447
  %349 = icmp eq i32 %333, 0
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %350, i8* %351, align 1, !tbaa !2448
  %352 = lshr i32 %333, 31
  %353 = trunc i32 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %353, i8* %354, align 1, !tbaa !2449
  %355 = lshr i32 %325, 31
  %356 = lshr i32 %332, 31
  %357 = xor i32 %356, %355
  %358 = xor i32 %352, %355
  %359 = add nuw nsw i32 %358, %357
  %360 = icmp eq i32 %359, 2
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %361, i8* %362, align 1, !tbaa !2450
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 43
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 6
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 6
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %370 = load i8, i8* %369, align 1, !tbaa !2449
  %371 = icmp ne i8 %370, 0
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %373 = load i8, i8* %372, align 1, !tbaa !2450
  %374 = icmp ne i8 %373, 0
  %375 = xor i1 %371, %374
  %376 = xor i1 %375, true
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %379 = select i1 %375, i64 %366, i64 %364
  store i64 %379, i64* %378, align 8, !tbaa !2428
  %380 = load i8, i8* %BRANCH_TAKEN
  %381 = icmp eq i8 %380, 1
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 16
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  store i64 %387, i64* %RAX, align 8, !tbaa !2428
  br i1 %381, label %block_400703, label %block_4006de
}

; Function Attrs: noinline
define %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400660:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400680, label %block_400669

block_400680:                                     ; preds = %block_400660
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400669:                                     ; preds = %block_400660
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4005f0_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604060__bss_type* @seg_604060__bss to i64), i64 8) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400760_polybench_timer_stop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400760:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %13 to %union.vec128_t*
  %14 = load i64, i64* %RBP
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %14, i64* %20
  store i64 %19, i64* %17, align 8, !tbaa !2428
  %21 = load i64, i64* %RSP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 3
  store i64 %23, i64* %PC
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  %24 = load i64, i64* %PC
  %25 = sub i64 %24, 20
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 5
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %25, i64* %34, align 8, !tbaa !2428
  %35 = load i64, i64* %PC
  %36 = call %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* %0, i64 %35, %struct.Memory* %2)
  %37 = bitcast %union.vec128_t* %XMM0 to i8*
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 9
  store i64 %39, i64* %PC
  %40 = bitcast i8* %37 to double*
  %41 = load double, double* %40, align 1
  store double %41, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*)
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 1
  store i64 %50, i64* %PC
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !2428
  %54 = inttoptr i64 %53 to i64*
  %55 = load i64, i64* %54
  store i64 %55, i64* %51, align 8, !tbaa !2428
  %56 = add i64 %53, 8
  store i64 %56, i64* %52, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_400730_polybench_timer_start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400730:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %13 to %union.vec128_t*
  %14 = load i64, i64* %RBP
  %15 = load i64, i64* %PC
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %14, i64* %20
  store i64 %19, i64* %17, align 8, !tbaa !2428
  %21 = load i64, i64* %RSP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 3
  store i64 %23, i64* %PC
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  %24 = load i64, i64* %PC
  %25 = sub i64 %24, 20
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 5
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %25, i64* %34, align 8, !tbaa !2428
  %35 = load i64, i64* %PC
  %36 = call %struct.Memory* @sub_400720_polybench_prepare_instruments_renamed_(%struct.State* %0, i64 %35, %struct.Memory* %2)
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 23
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 5
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %38, i64* %47, align 8, !tbaa !2428
  %48 = load i64, i64* %PC
  %49 = call %struct.Memory* @sub_400750_rtclock_renamed_(%struct.State* %0, i64 %48, %struct.Memory* %36)
  %50 = bitcast %union.vec128_t* %XMM0 to i8*
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 9
  store i64 %52, i64* %PC
  %53 = bitcast i8* %50 to double*
  %54 = load double, double* %53, align 1
  store double %54, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*)
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %66 = load i64, i64* %65, align 8, !tbaa !2428
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %64, align 8, !tbaa !2428
  %69 = add i64 %66, 8
  store i64 %69, i64* %65, align 8, !tbaa !2428
  ret %struct.Memory* %49
}

; Function Attrs: noinline
define %struct.Memory* @sub_400620_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400620:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6307928, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6307928
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6307928
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6307928, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2454
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2454
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2454
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2454
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2454
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2454
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2454
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2454
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2454
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2454
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2454
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2454
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2454
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2454
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2454
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2454
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2454
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2454
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2448
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_400658, label %block_400643

block_40065a:                                     ; preds = %block_40064d
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, %190
  %193 = load i16, i16* %AX
  %194 = zext i16 %193 to i64
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* %0, i64 %197, %struct.Memory* %2)
  ret %struct.Memory* %198

block_400655:                                     ; preds = %block_40064d
  %199 = load i64, i64* %RAX
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  br label %block_400658

block_40064d:                                     ; preds = %block_400643
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  store i64 6307928, i64* %RDI, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 2
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  switch i64 %217, label %269 [
    i64 4195930, label %block_40065a
    i64 4195925, label %block_400655
  ]

block_400658:                                     ; preds = %block_400643, %block_400655, %block_400620
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400620 ], [ %2, %block_400643 ], [ %2, %block_400655 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RBP, align 8, !tbaa !2428
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %227, align 8, !tbaa !2428
  %232 = add i64 %229, 8
  store i64 %232, i64* %228, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400643:                                     ; preds = %block_400620
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, %235
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2432
  %241 = trunc i64 %239 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2446
  %248 = icmp eq i64 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = lshr i64 %239, 63
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %254, align 1, !tbaa !2450
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %255, align 1, !tbaa !2447
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 13
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 2
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %263 = load i8, i8* %262, align 1, !tbaa !2448
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = icmp ne i8 %263, 0
  %266 = select i1 %265, i64 %257, i64 %259
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_400658, label %block_40064d

; <label>:269:                                    ; preds = %block_40064d
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_400750_rtclock(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %13 to %"class.std::bitset"*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %15 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %14, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %15 to %union.vec128_t*
  %16 = load i64, i64* %RBP
  %17 = load i64, i64* %PC
  %18 = add i64 %17, 1
  store i64 %18, i64* %PC
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %20 = load i64, i64* %19, align 8, !tbaa !2428
  %21 = add i64 %20, -8
  %22 = inttoptr i64 %21 to i64*
  store i64 %16, i64* %22
  store i64 %21, i64* %19, align 8, !tbaa !2428
  %23 = load i64, i64* %RSP
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 3
  store i64 %25, i64* %PC
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  %26 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %27 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %28 = bitcast %union.vec128_t* %XMM0 to i8*
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = bitcast i8* %27 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = getelementptr inbounds i8, i8* %27, i64 8
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = bitcast i8* %28 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = getelementptr inbounds i8, i8* %28, i64 8
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = xor i64 %37, %32
  %42 = xor i64 %40, %35
  %43 = trunc i64 %41 to i32
  %44 = lshr i64 %41, 32
  %45 = trunc i64 %44 to i32
  %46 = bitcast i8* %26 to i32*
  store i32 %43, i32* %46, align 1, !tbaa !2451
  %47 = getelementptr inbounds i8, i8* %26, i64 4
  %48 = bitcast i8* %47 to i32*
  store i32 %45, i32* %48, align 1, !tbaa !2451
  %49 = trunc i64 %42 to i32
  %50 = getelementptr inbounds i8, i8* %26, i64 8
  %51 = bitcast i8* %50 to i32*
  store i32 %49, i32* %51, align 1, !tbaa !2451
  %52 = lshr i64 %42, 32
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds i8, i8* %26, i64 12
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 1, !tbaa !2451
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 1
  store i64 %57, i64* %PC
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %58, align 8, !tbaa !2428
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 1
  store i64 %64, i64* %PC
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %67 = load i64, i64* %66, align 8, !tbaa !2428
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68
  store i64 %69, i64* %65, align 8, !tbaa !2428
  %70 = add i64 %67, 8
  store i64 %70, i64* %66, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e00___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e00:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2454
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2454
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2454
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2454
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2454
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2454
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 10508
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400520__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_402e56, label %block_402e36

block_402e56:                                     ; preds = %block_402e40, %block_402e00
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402e00 ], [ %387, %block_402e40 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402e36:                                     ; preds = %block_402e00
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_402e40

block_402e40:                                     ; preds = %block_402e40, %block_402e36
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_402e36 ], [ %387, %block_402e40 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_402e40, label %block_402e56
}

; Function Attrs: noinline
define %struct.Memory* @sub_402a50_check_FP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402a50:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDI = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 17
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R8D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 19
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %R9D = bitcast %union.anon* %30 to i32*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 21
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %R10D = bitcast %union.anon* %33 to i32*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 1
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RAX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 5
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RCX = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 7
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDX = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 9
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSI = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 11
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RDI = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 13
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %RSP = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 15
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %RBP = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R8 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %RSP
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = sub i64 %78, 112
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %82 = icmp ult i64 %78, 112
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %83, i8* %84, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #16
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2446
  %92 = xor i64 112, %78
  %93 = xor i64 %92, %81
  %94 = lshr i64 %93, 4
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = icmp eq i64 %81, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2448
  %101 = lshr i64 %81, 63
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2449
  %104 = lshr i64 %78, 63
  %105 = xor i64 %101, %104
  %106 = add nuw nsw i64 %105, %104
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 8
  store i64 %112, i64* %PC
  %113 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 88) to double*)
  %114 = bitcast i8* %110 to double*
  store double %113, double* %114, align 1, !tbaa !2452
  %115 = getelementptr inbounds i8, i8* %110, i64 8
  %116 = bitcast i8* %115 to double*
  store double 0.000000e+00, double* %116, align 1, !tbaa !2452
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 8
  %119 = load i32, i32* %EDI
  %120 = zext i32 %119 to i64
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %118 to i32*
  store i32 %119, i32* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 12
  %126 = load i32, i32* %ESI
  %127 = zext i32 %126 to i64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %125 to i32*
  store i32 %126, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 16
  %133 = load i32, i32* %EDX
  %134 = zext i32 %133 to i64
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %132 to i32*
  store i32 %133, i32* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 24
  %140 = load i64, i64* %RCX
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 32
  %146 = load i64, i64* %R8
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 56
  %152 = bitcast %union.vec128_t* %XMM0 to i8*
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 5
  store i64 %154, i64* %PC
  %155 = bitcast i8* %152 to double*
  %156 = load double, double* %155, align 1
  %157 = inttoptr i64 %151 to double*
  store double %156, double* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 36
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 7
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  store i32 0, i32* %162
  br label %block_402a7d

block_402bbe:                                     ; preds = %block_402a95
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 5
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %167, align 8, !tbaa !2428
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 36
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 3
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %169 to i32*
  %173 = load i32, i32* %172
  %174 = zext i32 %173 to i64
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = load i64, i64* %RAX
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  %178 = trunc i64 %175 to i32
  %179 = add i32 1, %178
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = icmp ult i32 %179, %178
  %182 = icmp ult i32 %179, 1
  %183 = or i1 %181, %182
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %184, i8* %185, align 1, !tbaa !2432
  %186 = and i32 %179, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2446
  %192 = xor i64 1, %175
  %193 = trunc i64 %192 to i32
  %194 = xor i32 %193, %179
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %197, i8* %198, align 1, !tbaa !2447
  %199 = icmp eq i32 %179, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2448
  %202 = lshr i32 %179, 31
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = lshr i32 %178, 31
  %206 = xor i32 %202, %205
  %207 = add nuw nsw i32 %206, %202
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2450
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 36
  %213 = load i32, i32* %EAX
  %214 = zext i32 %213 to i64
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %212 to i32*
  store i32 %213, i32* %217
  %218 = load i64, i64* %PC
  %219 = sub i64 %218, 335
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %219, i64* %222, align 8, !tbaa !2428
  br label %block_402a7d

block_402b98:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %223 = add i64 %889, 5
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %226, align 8, !tbaa !2428
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 44
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 3
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to i32*
  %232 = load i32, i32* %231
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RAX, align 8, !tbaa !2428
  %234 = load i64, i64* %RAX
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 3
  store i64 %236, i64* %PC
  %237 = trunc i64 %234 to i32
  %238 = add i32 1, %237
  %239 = zext i32 %238 to i64
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = icmp ult i32 %238, %237
  %241 = icmp ult i32 %238, 1
  %242 = or i1 %240, %241
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %243, i8* %244, align 1, !tbaa !2432
  %245 = and i32 %238, 255
  %246 = call i32 @llvm.ctpop.i32(i32 %245) #16
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %249, i8* %250, align 1, !tbaa !2446
  %251 = xor i64 1, %234
  %252 = trunc i64 %251 to i32
  %253 = xor i32 %252, %238
  %254 = lshr i32 %253, 4
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %256, i8* %257, align 1, !tbaa !2447
  %258 = icmp eq i32 %238, 0
  %259 = zext i1 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %259, i8* %260, align 1, !tbaa !2448
  %261 = lshr i32 %238, 31
  %262 = trunc i32 %261 to i8
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %262, i8* %263, align 1, !tbaa !2449
  %264 = lshr i32 %237, 31
  %265 = xor i32 %261, %264
  %266 = add nuw nsw i32 %265, %261
  %267 = icmp eq i32 %266, 2
  %268 = zext i1 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %268, i8* %269, align 1, !tbaa !2450
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 44
  %272 = load i32, i32* %EAX
  %273 = zext i32 %272 to i64
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 3
  store i64 %275, i64* %PC
  %276 = inttoptr i64 %271 to i32*
  store i32 %272, i32* %276
  %277 = load i64, i64* %PC
  %278 = sub i64 %277, 249
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 5
  store i64 %280, i64* %PC
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %278, i64* %281, align 8, !tbaa !2428
  br label %block_402aad

block_402bd1:                                     ; preds = %block_402a7d
  %282 = sub i64 %392, 4
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 7
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i32*
  store i32 1, i32* %285
  br label %block_402bd8

block_402a7d:                                     ; preds = %block_402bbe, %block_402a50
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402a50 ], [ %MEMORY.3, %block_402bbe ]
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 36
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 3
  store i64 %289, i64* %PC
  %290 = inttoptr i64 %287 to i32*
  %291 = load i32, i32* %290
  %292 = zext i32 %291 to i64
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 8
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  %298 = load i32, i32* %297
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = load i64, i64* %RCX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 3
  store i64 %302, i64* %PC
  %303 = trunc i64 %300 to i32
  %304 = add i32 1, %303
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RCX, align 8, !tbaa !2428
  %306 = icmp ult i32 %304, %303
  %307 = icmp ult i32 %304, 1
  %308 = or i1 %306, %307
  %309 = zext i1 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %309, i8* %310, align 1, !tbaa !2432
  %311 = and i32 %304, 255
  %312 = call i32 @llvm.ctpop.i32(i32 %311) #16
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = xor i8 %314, 1
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %315, i8* %316, align 1, !tbaa !2446
  %317 = xor i64 1, %300
  %318 = trunc i64 %317 to i32
  %319 = xor i32 %318, %304
  %320 = lshr i32 %319, 4
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %322, i8* %323, align 1, !tbaa !2447
  %324 = icmp eq i32 %304, 0
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %325, i8* %326, align 1, !tbaa !2448
  %327 = lshr i32 %304, 31
  %328 = trunc i32 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %328, i8* %329, align 1, !tbaa !2449
  %330 = lshr i32 %303, 31
  %331 = xor i32 %327, %330
  %332 = add nuw nsw i32 %331, %327
  %333 = icmp eq i32 %332, 2
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %334, i8* %335, align 1, !tbaa !2450
  %336 = load i32, i32* %EAX
  %337 = zext i32 %336 to i64
  %338 = load i32, i32* %ECX
  %339 = zext i32 %338 to i64
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 2
  store i64 %341, i64* %PC
  %342 = sub i32 %336, %338
  %343 = icmp ult i32 %336, %338
  %344 = zext i1 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %344, i8* %345, align 1, !tbaa !2432
  %346 = and i32 %342, 255
  %347 = call i32 @llvm.ctpop.i32(i32 %346) #16
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = xor i8 %349, 1
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %350, i8* %351, align 1, !tbaa !2446
  %352 = xor i64 %339, %337
  %353 = trunc i64 %352 to i32
  %354 = xor i32 %353, %342
  %355 = lshr i32 %354, 4
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %357, i8* %358, align 1, !tbaa !2447
  %359 = icmp eq i32 %342, 0
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %360, i8* %361, align 1, !tbaa !2448
  %362 = lshr i32 %342, 31
  %363 = trunc i32 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %363, i8* %364, align 1, !tbaa !2449
  %365 = lshr i32 %336, 31
  %366 = lshr i32 %338, 31
  %367 = xor i32 %366, %365
  %368 = xor i32 %362, %365
  %369 = add nuw nsw i32 %368, %367
  %370 = icmp eq i32 %369, 2
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %371, i8* %372, align 1, !tbaa !2450
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 329
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 6
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 6
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %380 = load i8, i8* %379, align 1, !tbaa !2449
  %381 = icmp ne i8 %380, 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %383 = load i8, i8* %382, align 1, !tbaa !2450
  %384 = icmp ne i8 %383, 0
  %385 = xor i1 %381, %384
  %386 = xor i1 %385, true
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %389 = select i1 %385, i64 %376, i64 %374
  store i64 %389, i64* %388, align 8, !tbaa !2428
  %390 = load i8, i8* %BRANCH_TAKEN
  %391 = icmp eq i8 %390, 1
  %392 = load i64, i64* %RBP
  br i1 %391, label %block_402bd1, label %block_402a8e

block_402a8e:                                     ; preds = %block_402a7d
  %393 = sub i64 %392, 40
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 7
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to i32*
  store i32 0, i32* %396
  br label %block_402a95

block_402abe:                                     ; preds = %block_402aad
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 24
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = load i64, i64* %RBP
  %404 = sub i64 %403, 36
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 4
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to i32*
  %408 = load i32, i32* %407
  %409 = sext i32 %408 to i64
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = load i64, i64* %RCX
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 7
  store i64 %412, i64* %PC
  %413 = sext i64 %410 to i128
  %414 = and i128 %413, -18446744073709551616
  %415 = zext i64 %410 to i128
  %416 = or i128 %414, %415
  %417 = mul nsw i128 33800, %416
  %418 = trunc i128 %417 to i64
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = sext i64 %418 to i128
  %420 = icmp ne i128 %419, %417
  %421 = zext i1 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %421, i8* %422, align 1, !tbaa !2432
  %423 = trunc i128 %417 to i32
  %424 = and i32 %423, 255
  %425 = call i32 @llvm.ctpop.i32(i32 %424) #16
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  %428 = xor i8 %427, 1
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %428, i8* %429, align 1, !tbaa !2446
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %430, align 1, !tbaa !2447
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %431, align 1, !tbaa !2448
  %432 = lshr i64 %418, 63
  %433 = trunc i64 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %433, i8* %434, align 1, !tbaa !2449
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %421, i8* %435, align 1, !tbaa !2450
  %436 = load i64, i64* %RAX
  %437 = load i64, i64* %RCX
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 3
  store i64 %439, i64* %PC
  %440 = add i64 %437, %436
  store i64 %440, i64* %RAX, align 8, !tbaa !2428
  %441 = icmp ult i64 %440, %436
  %442 = icmp ult i64 %440, %437
  %443 = or i1 %441, %442
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %444, i8* %445, align 1, !tbaa !2432
  %446 = trunc i64 %440 to i32
  %447 = and i32 %446, 255
  %448 = call i32 @llvm.ctpop.i32(i32 %447) #16
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %451, i8* %452, align 1, !tbaa !2446
  %453 = xor i64 %437, %436
  %454 = xor i64 %453, %440
  %455 = lshr i64 %454, 4
  %456 = trunc i64 %455 to i8
  %457 = and i8 %456, 1
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %457, i8* %458, align 1, !tbaa !2447
  %459 = icmp eq i64 %440, 0
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %460, i8* %461, align 1, !tbaa !2448
  %462 = lshr i64 %440, 63
  %463 = trunc i64 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %463, i8* %464, align 1, !tbaa !2449
  %465 = lshr i64 %436, 63
  %466 = lshr i64 %437, 63
  %467 = xor i64 %462, %465
  %468 = xor i64 %462, %466
  %469 = add nuw nsw i64 %467, %468
  %470 = icmp eq i64 %469, 2
  %471 = zext i1 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %471, i8* %472, align 1, !tbaa !2450
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 40
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 4
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i32*
  %478 = load i32, i32* %477
  %479 = sext i32 %478 to i64
  store i64 %479, i64* %RCX, align 8, !tbaa !2428
  %480 = load i64, i64* %RCX
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 7
  store i64 %482, i64* %PC
  %483 = sext i64 %480 to i128
  %484 = and i128 %483, -18446744073709551616
  %485 = zext i64 %480 to i128
  %486 = or i128 %484, %485
  %487 = mul nsw i128 520, %486
  %488 = trunc i128 %487 to i64
  store i64 %488, i64* %RCX, align 8, !tbaa !2428
  %489 = sext i64 %488 to i128
  %490 = icmp ne i128 %489, %487
  %491 = zext i1 %490 to i8
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %491, i8* %492, align 1, !tbaa !2432
  %493 = trunc i128 %487 to i32
  %494 = and i32 %493, 255
  %495 = call i32 @llvm.ctpop.i32(i32 %494) #16
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %498, i8* %499, align 1, !tbaa !2446
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %500, align 1, !tbaa !2447
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %501, align 1, !tbaa !2448
  %502 = lshr i64 %488, 63
  %503 = trunc i64 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %503, i8* %504, align 1, !tbaa !2449
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %491, i8* %505, align 1, !tbaa !2450
  %506 = load i64, i64* %RAX
  %507 = load i64, i64* %RCX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 3
  store i64 %509, i64* %PC
  %510 = add i64 %507, %506
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = icmp ult i64 %510, %506
  %512 = icmp ult i64 %510, %507
  %513 = or i1 %511, %512
  %514 = zext i1 %513 to i8
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %514, i8* %515, align 1, !tbaa !2432
  %516 = trunc i64 %510 to i32
  %517 = and i32 %516, 255
  %518 = call i32 @llvm.ctpop.i32(i32 %517) #16
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %521, i8* %522, align 1, !tbaa !2446
  %523 = xor i64 %507, %506
  %524 = xor i64 %523, %510
  %525 = lshr i64 %524, 4
  %526 = trunc i64 %525 to i8
  %527 = and i8 %526, 1
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %527, i8* %528, align 1, !tbaa !2447
  %529 = icmp eq i64 %510, 0
  %530 = zext i1 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %530, i8* %531, align 1, !tbaa !2448
  %532 = lshr i64 %510, 63
  %533 = trunc i64 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %533, i8* %534, align 1, !tbaa !2449
  %535 = lshr i64 %506, 63
  %536 = lshr i64 %507, 63
  %537 = xor i64 %532, %535
  %538 = xor i64 %532, %536
  %539 = add nuw nsw i64 %537, %538
  %540 = icmp eq i64 %539, 2
  %541 = zext i1 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %541, i8* %542, align 1, !tbaa !2450
  %543 = load i64, i64* %RBP
  %544 = sub i64 %543, 44
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 4
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = sext i32 %548 to i64
  store i64 %549, i64* %RCX, align 8, !tbaa !2428
  %550 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %551 = load i64, i64* %RAX
  %552 = load i64, i64* %RCX
  %553 = mul i64 %552, 8
  %554 = add i64 %553, %551
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 5
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %554 to double*
  %558 = load double, double* %557
  %559 = bitcast i8* %550 to double*
  store double %558, double* %559, align 1, !tbaa !2452
  %560 = getelementptr inbounds i8, i8* %550, i64 8
  %561 = bitcast i8* %560 to double*
  store double 0.000000e+00, double* %561, align 1, !tbaa !2452
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 64
  %564 = bitcast %union.vec128_t* %XMM0 to i8*
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 5
  store i64 %566, i64* %PC
  %567 = bitcast i8* %564 to double*
  %568 = load double, double* %567, align 1
  %569 = inttoptr i64 %563 to double*
  store double %568, double* %569
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 32
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  %574 = inttoptr i64 %571 to i64*
  %575 = load i64, i64* %574
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = load i64, i64* %RBP
  %577 = sub i64 %576, 36
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 4
  store i64 %579, i64* %PC
  %580 = inttoptr i64 %577 to i32*
  %581 = load i32, i32* %580
  %582 = sext i32 %581 to i64
  store i64 %582, i64* %RCX, align 8, !tbaa !2428
  %583 = load i64, i64* %RCX
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 7
  store i64 %585, i64* %PC
  %586 = sext i64 %583 to i128
  %587 = and i128 %586, -18446744073709551616
  %588 = zext i64 %583 to i128
  %589 = or i128 %587, %588
  %590 = mul nsw i128 33800, %589
  %591 = trunc i128 %590 to i64
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %592 = sext i64 %591 to i128
  %593 = icmp ne i128 %592, %590
  %594 = zext i1 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %594, i8* %595, align 1, !tbaa !2432
  %596 = trunc i128 %590 to i32
  %597 = and i32 %596, 255
  %598 = call i32 @llvm.ctpop.i32(i32 %597) #16
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %601, i8* %602, align 1, !tbaa !2446
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %603, align 1, !tbaa !2447
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %604, align 1, !tbaa !2448
  %605 = lshr i64 %591, 63
  %606 = trunc i64 %605 to i8
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %606, i8* %607, align 1, !tbaa !2449
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %594, i8* %608, align 1, !tbaa !2450
  %609 = load i64, i64* %RAX
  %610 = load i64, i64* %RCX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 3
  store i64 %612, i64* %PC
  %613 = add i64 %610, %609
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = icmp ult i64 %613, %609
  %615 = icmp ult i64 %613, %610
  %616 = or i1 %614, %615
  %617 = zext i1 %616 to i8
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %617, i8* %618, align 1, !tbaa !2432
  %619 = trunc i64 %613 to i32
  %620 = and i32 %619, 255
  %621 = call i32 @llvm.ctpop.i32(i32 %620) #16
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %624, i8* %625, align 1, !tbaa !2446
  %626 = xor i64 %610, %609
  %627 = xor i64 %626, %613
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %630, i8* %631, align 1, !tbaa !2447
  %632 = icmp eq i64 %613, 0
  %633 = zext i1 %632 to i8
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %633, i8* %634, align 1, !tbaa !2448
  %635 = lshr i64 %613, 63
  %636 = trunc i64 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %636, i8* %637, align 1, !tbaa !2449
  %638 = lshr i64 %609, 63
  %639 = lshr i64 %610, 63
  %640 = xor i64 %635, %638
  %641 = xor i64 %635, %639
  %642 = add nuw nsw i64 %640, %641
  %643 = icmp eq i64 %642, 2
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %644, i8* %645, align 1, !tbaa !2450
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 40
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 4
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = sext i32 %651 to i64
  store i64 %652, i64* %RCX, align 8, !tbaa !2428
  %653 = load i64, i64* %RCX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 7
  store i64 %655, i64* %PC
  %656 = sext i64 %653 to i128
  %657 = and i128 %656, -18446744073709551616
  %658 = zext i64 %653 to i128
  %659 = or i128 %657, %658
  %660 = mul nsw i128 520, %659
  %661 = trunc i128 %660 to i64
  store i64 %661, i64* %RCX, align 8, !tbaa !2428
  %662 = sext i64 %661 to i128
  %663 = icmp ne i128 %662, %660
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %664, i8* %665, align 1, !tbaa !2432
  %666 = trunc i128 %660 to i32
  %667 = and i32 %666, 255
  %668 = call i32 @llvm.ctpop.i32(i32 %667) #16
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %671, i8* %672, align 1, !tbaa !2446
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %673, align 1, !tbaa !2447
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %674, align 1, !tbaa !2448
  %675 = lshr i64 %661, 63
  %676 = trunc i64 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %676, i8* %677, align 1, !tbaa !2449
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %664, i8* %678, align 1, !tbaa !2450
  %679 = load i64, i64* %RAX
  %680 = load i64, i64* %RCX
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 3
  store i64 %682, i64* %PC
  %683 = add i64 %680, %679
  store i64 %683, i64* %RAX, align 8, !tbaa !2428
  %684 = icmp ult i64 %683, %679
  %685 = icmp ult i64 %683, %680
  %686 = or i1 %684, %685
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %687, i8* %688, align 1, !tbaa !2432
  %689 = trunc i64 %683 to i32
  %690 = and i32 %689, 255
  %691 = call i32 @llvm.ctpop.i32(i32 %690) #16
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  %694 = xor i8 %693, 1
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %694, i8* %695, align 1, !tbaa !2446
  %696 = xor i64 %680, %679
  %697 = xor i64 %696, %683
  %698 = lshr i64 %697, 4
  %699 = trunc i64 %698 to i8
  %700 = and i8 %699, 1
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %700, i8* %701, align 1, !tbaa !2447
  %702 = icmp eq i64 %683, 0
  %703 = zext i1 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %703, i8* %704, align 1, !tbaa !2448
  %705 = lshr i64 %683, 63
  %706 = trunc i64 %705 to i8
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %706, i8* %707, align 1, !tbaa !2449
  %708 = lshr i64 %679, 63
  %709 = lshr i64 %680, 63
  %710 = xor i64 %705, %708
  %711 = xor i64 %705, %709
  %712 = add nuw nsw i64 %710, %711
  %713 = icmp eq i64 %712, 2
  %714 = zext i1 %713 to i8
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %714, i8* %715, align 1, !tbaa !2450
  %716 = load i64, i64* %RBP
  %717 = sub i64 %716, 44
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 4
  store i64 %719, i64* %PC
  %720 = inttoptr i64 %717 to i32*
  %721 = load i32, i32* %720
  %722 = sext i32 %721 to i64
  store i64 %722, i64* %RCX, align 8, !tbaa !2428
  %723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %724 = load i64, i64* %RAX
  %725 = load i64, i64* %RCX
  %726 = mul i64 %725, 8
  %727 = add i64 %726, %724
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 5
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to double*
  %731 = load double, double* %730
  %732 = bitcast i8* %723 to double*
  store double %731, double* %732, align 1, !tbaa !2452
  %733 = getelementptr inbounds i8, i8* %723, i64 8
  %734 = bitcast i8* %733 to double*
  store double 0.000000e+00, double* %734, align 1, !tbaa !2452
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 72
  %737 = bitcast %union.vec128_t* %XMM0 to i8*
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 5
  store i64 %739, i64* %PC
  %740 = bitcast i8* %737 to double*
  %741 = load double, double* %740, align 1
  %742 = inttoptr i64 %736 to double*
  store double %741, double* %742
  %743 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %744 = load i64, i64* %RBP
  %745 = sub i64 %744, 64
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 5
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to double*
  %749 = load double, double* %748
  %750 = bitcast i8* %743 to double*
  store double %749, double* %750, align 1, !tbaa !2452
  %751 = getelementptr inbounds i8, i8* %743, i64 8
  %752 = bitcast i8* %751 to double*
  store double 0.000000e+00, double* %752, align 1, !tbaa !2452
  %753 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %754 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 72
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 5
  store i64 %758, i64* %PC
  %759 = bitcast i8* %754 to double*
  %760 = load double, double* %759, align 1
  %761 = getelementptr inbounds i8, i8* %754, i64 8
  %762 = bitcast i8* %761 to i64*
  %763 = load i64, i64* %762, align 1
  %764 = inttoptr i64 %756 to double*
  %765 = load double, double* %764
  %766 = fsub double %760, %765
  %767 = bitcast i8* %753 to double*
  store double %766, double* %767, align 1, !tbaa !2452
  %768 = getelementptr inbounds i8, i8* %753, i64 8
  %769 = bitcast i8* %768 to i64*
  store i64 %763, i64* %769, align 1, !tbaa !2452
  %770 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 7
  store i64 %772, i64* %PC
  %773 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 96) to float*)
  %774 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 100) to float*)
  %775 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 104) to float*)
  %776 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 108) to float*)
  %777 = bitcast i8* %770 to float*
  store float %773, float* %777, align 1, !tbaa !2455
  %778 = getelementptr inbounds i8, i8* %770, i64 4
  %779 = bitcast i8* %778 to float*
  store float %774, float* %779, align 1, !tbaa !2455
  %780 = getelementptr inbounds i8, i8* %770, i64 8
  %781 = bitcast i8* %780 to float*
  store float %775, float* %781, align 1, !tbaa !2455
  %782 = getelementptr inbounds i8, i8* %770, i64 12
  %783 = bitcast i8* %782 to float*
  store float %776, float* %783, align 1, !tbaa !2455
  %784 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %785 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %786 = bitcast %union.vec128_t* %XMM1 to i8*
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 4
  store i64 %788, i64* %PC
  %789 = bitcast i8* %785 to i64*
  %790 = load i64, i64* %789, align 1
  %791 = getelementptr inbounds i8, i8* %785, i64 8
  %792 = bitcast i8* %791 to i64*
  %793 = load i64, i64* %792, align 1
  %794 = bitcast i8* %786 to i64*
  %795 = load i64, i64* %794, align 1
  %796 = getelementptr inbounds i8, i8* %786, i64 8
  %797 = bitcast i8* %796 to i64*
  %798 = load i64, i64* %797, align 1
  %799 = and i64 %795, %790
  %800 = and i64 %798, %793
  %801 = trunc i64 %799 to i32
  %802 = lshr i64 %799, 32
  %803 = trunc i64 %802 to i32
  %804 = bitcast i8* %784 to i32*
  store i32 %801, i32* %804, align 1, !tbaa !2451
  %805 = getelementptr inbounds i8, i8* %784, i64 4
  %806 = bitcast i8* %805 to i32*
  store i32 %803, i32* %806, align 1, !tbaa !2451
  %807 = trunc i64 %800 to i32
  %808 = getelementptr inbounds i8, i8* %784, i64 8
  %809 = bitcast i8* %808 to i32*
  store i32 %807, i32* %809, align 1, !tbaa !2451
  %810 = lshr i64 %800, 32
  %811 = trunc i64 %810 to i32
  %812 = getelementptr inbounds i8, i8* %784, i64 12
  %813 = bitcast i8* %812 to i32*
  store i32 %811, i32* %813, align 1, !tbaa !2451
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 80
  %816 = bitcast %union.vec128_t* %XMM0 to i8*
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  %819 = bitcast i8* %816 to double*
  %820 = load double, double* %819, align 1
  %821 = inttoptr i64 %815 to double*
  store double %820, double* %821
  %822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 80
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 5
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to double*
  %828 = load double, double* %827
  %829 = bitcast i8* %822 to double*
  store double %828, double* %829, align 1, !tbaa !2452
  %830 = getelementptr inbounds i8, i8* %822, i64 8
  %831 = bitcast i8* %830 to double*
  store double 0.000000e+00, double* %831, align 1, !tbaa !2452
  %832 = bitcast %union.vec128_t* %XMM0 to i8*
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 56
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  %837 = bitcast i8* %832 to double*
  %838 = load double, double* %837, align 1
  %839 = inttoptr i64 %834 to double*
  %840 = load double, double* %839
  %841 = fcmp uno double %838, %840
  br i1 %841, label %842, label %854

; <label>:842:                                    ; preds = %block_402abe
  %843 = fadd double %838, %840
  %844 = bitcast double %843 to i64
  %845 = and i64 %844, 9221120237041090560
  %846 = icmp eq i64 %845, 9218868437227405312
  %847 = and i64 %844, 2251799813685247
  %848 = icmp ne i64 %847, 0
  %849 = and i1 %846, %848
  br i1 %849, label %850, label %860

; <label>:850:                                    ; preds = %842
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %852 = load i64, i64* %851, align 8, !tbaa !2428
  %853 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %852, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:854:                                    ; preds = %block_402abe
  %855 = fcmp ogt double %838, %840
  br i1 %855, label %860, label %856

; <label>:856:                                    ; preds = %854
  %857 = fcmp olt double %838, %840
  br i1 %857, label %860, label %858

; <label>:858:                                    ; preds = %856
  %859 = fcmp oeq double %838, %840
  br i1 %859, label %860, label %867

; <label>:860:                                    ; preds = %858, %856, %854, %842
  %861 = phi i8 [ 0, %854 ], [ 0, %856 ], [ 1, %858 ], [ 1, %842 ]
  %862 = phi i8 [ 0, %854 ], [ 0, %856 ], [ 0, %858 ], [ 1, %842 ]
  %863 = phi i8 [ 0, %854 ], [ 1, %856 ], [ 0, %858 ], [ 1, %842 ]
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %861, i8* %864, align 1, !tbaa !2454
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %862, i8* %865, align 1, !tbaa !2454
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %863, i8* %866, align 1, !tbaa !2454
  br label %867

; <label>:867:                                    ; preds = %860, %858
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %868, align 1, !tbaa !2454
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %869, align 1, !tbaa !2454
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %870, align 1, !tbaa !2454
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %850, %867
  %871 = phi %struct.Memory* [ %853, %850 ], [ %MEMORY.1, %867 ]
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 90
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 6
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 6
  store i64 %877, i64* %PC
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %879 = load i8, i8* %878, align 1, !tbaa !2432
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %881 = load i8, i8* %880, align 1, !tbaa !2448
  %882 = or i8 %881, %879
  %883 = icmp ne i8 %882, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %886 = select i1 %883, i64 %873, i64 %875
  store i64 %886, i64* %885, align 8, !tbaa !2428
  %887 = load i8, i8* %BRANCH_TAKEN
  %888 = icmp eq i8 %887, 1
  %889 = load i64, i64* %PC
  br i1 %888, label %block_402b98, label %block_402b44

block_402aad:                                     ; preds = %block_402aa6, %block_402b98
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402aa6 ], [ %871, %block_402b98 ]
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 44
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 3
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = zext i32 %895 to i64
  store i64 %896, i64* %RAX, align 8, !tbaa !2428
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 12
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 3
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i32*
  %902 = load i32, i32* %901
  %903 = zext i32 %902 to i64
  store i64 %903, i64* %RCX, align 8, !tbaa !2428
  %904 = load i64, i64* %RCX
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 3
  store i64 %906, i64* %PC
  %907 = trunc i64 %904 to i32
  %908 = add i32 1, %907
  %909 = zext i32 %908 to i64
  store i64 %909, i64* %RCX, align 8, !tbaa !2428
  %910 = icmp ult i32 %908, %907
  %911 = icmp ult i32 %908, 1
  %912 = or i1 %910, %911
  %913 = zext i1 %912 to i8
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %913, i8* %914, align 1, !tbaa !2432
  %915 = and i32 %908, 255
  %916 = call i32 @llvm.ctpop.i32(i32 %915) #16
  %917 = trunc i32 %916 to i8
  %918 = and i8 %917, 1
  %919 = xor i8 %918, 1
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %919, i8* %920, align 1, !tbaa !2446
  %921 = xor i64 1, %904
  %922 = trunc i64 %921 to i32
  %923 = xor i32 %922, %908
  %924 = lshr i32 %923, 4
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %926, i8* %927, align 1, !tbaa !2447
  %928 = icmp eq i32 %908, 0
  %929 = zext i1 %928 to i8
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %929, i8* %930, align 1, !tbaa !2448
  %931 = lshr i32 %908, 31
  %932 = trunc i32 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %932, i8* %933, align 1, !tbaa !2449
  %934 = lshr i32 %907, 31
  %935 = xor i32 %931, %934
  %936 = add nuw nsw i32 %935, %931
  %937 = icmp eq i32 %936, 2
  %938 = zext i1 %937 to i8
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %938, i8* %939, align 1, !tbaa !2450
  %940 = load i32, i32* %EAX
  %941 = zext i32 %940 to i64
  %942 = load i32, i32* %ECX
  %943 = zext i32 %942 to i64
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 2
  store i64 %945, i64* %PC
  %946 = sub i32 %940, %942
  %947 = icmp ult i32 %940, %942
  %948 = zext i1 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %948, i8* %949, align 1, !tbaa !2432
  %950 = and i32 %946, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2446
  %956 = xor i64 %943, %941
  %957 = trunc i64 %956 to i32
  %958 = xor i32 %957, %946
  %959 = lshr i32 %958, 4
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %961, i8* %962, align 1, !tbaa !2447
  %963 = icmp eq i32 %946, 0
  %964 = zext i1 %963 to i8
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %964, i8* %965, align 1, !tbaa !2448
  %966 = lshr i32 %946, 31
  %967 = trunc i32 %966 to i8
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %967, i8* %968, align 1, !tbaa !2449
  %969 = lshr i32 %940, 31
  %970 = lshr i32 %942, 31
  %971 = xor i32 %970, %969
  %972 = xor i32 %966, %969
  %973 = add nuw nsw i32 %972, %971
  %974 = icmp eq i32 %973, 2
  %975 = zext i1 %974 to i8
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %975, i8* %976, align 1, !tbaa !2450
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 243
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 6
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 6
  store i64 %982, i64* %PC
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %984 = load i8, i8* %983, align 1, !tbaa !2449
  %985 = icmp ne i8 %984, 0
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %987 = load i8, i8* %986, align 1, !tbaa !2450
  %988 = icmp ne i8 %987, 0
  %989 = xor i1 %985, %988
  %990 = xor i1 %989, true
  %991 = zext i1 %990 to i8
  store i8 %991, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %993 = select i1 %989, i64 %980, i64 %978
  store i64 %993, i64* %992, align 8, !tbaa !2428
  %994 = load i8, i8* %BRANCH_TAKEN
  %995 = icmp eq i8 %994, 1
  br i1 %995, label %block_402bab, label %block_402abe

block_402bab:                                     ; preds = %block_402aad
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 5
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 5
  store i64 %999, i64* %PC
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %997, i64* %1000, align 8, !tbaa !2428
  %1001 = load i64, i64* %RBP
  %1002 = sub i64 %1001, 40
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 3
  store i64 %1004, i64* %PC
  %1005 = inttoptr i64 %1002 to i32*
  %1006 = load i32, i32* %1005
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RAX, align 8, !tbaa !2428
  %1008 = load i64, i64* %RAX
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 3
  store i64 %1010, i64* %PC
  %1011 = trunc i64 %1008 to i32
  %1012 = add i32 1, %1011
  %1013 = zext i32 %1012 to i64
  store i64 %1013, i64* %RAX, align 8, !tbaa !2428
  %1014 = icmp ult i32 %1012, %1011
  %1015 = icmp ult i32 %1012, 1
  %1016 = or i1 %1014, %1015
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1017, i8* %1018, align 1, !tbaa !2432
  %1019 = and i32 %1012, 255
  %1020 = call i32 @llvm.ctpop.i32(i32 %1019) #16
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1023, i8* %1024, align 1, !tbaa !2446
  %1025 = xor i64 1, %1008
  %1026 = trunc i64 %1025 to i32
  %1027 = xor i32 %1026, %1012
  %1028 = lshr i32 %1027, 4
  %1029 = trunc i32 %1028 to i8
  %1030 = and i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1030, i8* %1031, align 1, !tbaa !2447
  %1032 = icmp eq i32 %1012, 0
  %1033 = zext i1 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1033, i8* %1034, align 1, !tbaa !2448
  %1035 = lshr i32 %1012, 31
  %1036 = trunc i32 %1035 to i8
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1036, i8* %1037, align 1, !tbaa !2449
  %1038 = lshr i32 %1011, 31
  %1039 = xor i32 %1035, %1038
  %1040 = add nuw nsw i32 %1039, %1035
  %1041 = icmp eq i32 %1040, 2
  %1042 = zext i1 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1042, i8* %1043, align 1, !tbaa !2450
  %1044 = load i64, i64* %RBP
  %1045 = sub i64 %1044, 40
  %1046 = load i32, i32* %EAX
  %1047 = zext i32 %1046 to i64
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 3
  store i64 %1049, i64* %PC
  %1050 = inttoptr i64 %1045 to i32*
  store i32 %1046, i32* %1050
  %1051 = load i64, i64* %PC
  %1052 = sub i64 %1051, 292
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 5
  store i64 %1054, i64* %PC
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1052, i64* %1055, align 8, !tbaa !2428
  br label %block_402a95

block_402bd8:                                     ; preds = %block_402b44, %block_402bd1
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402bd1 ], [ %1329, %block_402b44 ]
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 4
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 3
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i32*
  %1061 = load i32, i32* %1060
  %1062 = zext i32 %1061 to i64
  store i64 %1062, i64* %RAX, align 8, !tbaa !2428
  %1063 = load i64, i64* %RSP
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 4
  store i64 %1065, i64* %PC
  %1066 = add i64 112, %1063
  store i64 %1066, i64* %RSP, align 8, !tbaa !2428
  %1067 = icmp ult i64 %1066, %1063
  %1068 = icmp ult i64 %1066, 112
  %1069 = or i1 %1067, %1068
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1070, i8* %1071, align 1, !tbaa !2432
  %1072 = trunc i64 %1066 to i32
  %1073 = and i32 %1072, 255
  %1074 = call i32 @llvm.ctpop.i32(i32 %1073) #16
  %1075 = trunc i32 %1074 to i8
  %1076 = and i8 %1075, 1
  %1077 = xor i8 %1076, 1
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1077, i8* %1078, align 1, !tbaa !2446
  %1079 = xor i64 112, %1063
  %1080 = xor i64 %1079, %1066
  %1081 = lshr i64 %1080, 4
  %1082 = trunc i64 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1083, i8* %1084, align 1, !tbaa !2447
  %1085 = icmp eq i64 %1066, 0
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1086, i8* %1087, align 1, !tbaa !2448
  %1088 = lshr i64 %1066, 63
  %1089 = trunc i64 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = lshr i64 %1063, 63
  %1092 = xor i64 %1088, %1091
  %1093 = add nuw nsw i64 %1092, %1088
  %1094 = icmp eq i64 %1093, 2
  %1095 = zext i1 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1095, i8* %1096, align 1, !tbaa !2450
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 1
  store i64 %1098, i64* %PC
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1100 = load i64, i64* %1099, align 8, !tbaa !2428
  %1101 = add i64 %1100, 8
  %1102 = inttoptr i64 %1100 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RBP, align 8, !tbaa !2428
  store i64 %1101, i64* %1099, align 8, !tbaa !2428
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 1
  store i64 %1105, i64* %PC
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1108 = load i64, i64* %1107, align 8, !tbaa !2428
  %1109 = inttoptr i64 %1108 to i64*
  %1110 = load i64, i64* %1109
  store i64 %1110, i64* %1106, align 8, !tbaa !2428
  %1111 = add i64 %1108, 8
  store i64 %1111, i64* %1107, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_402a95:                                     ; preds = %block_402bab, %block_402a8e
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_402a8e ], [ %MEMORY.1, %block_402bab ]
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 40
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 3
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i32*
  %1117 = load i32, i32* %1116
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RAX, align 8, !tbaa !2428
  %1119 = load i64, i64* %RBP
  %1120 = sub i64 %1119, 16
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 3
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1120 to i32*
  %1124 = load i32, i32* %1123
  %1125 = zext i32 %1124 to i64
  store i64 %1125, i64* %RCX, align 8, !tbaa !2428
  %1126 = load i64, i64* %RCX
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 3
  store i64 %1128, i64* %PC
  %1129 = trunc i64 %1126 to i32
  %1130 = add i32 1, %1129
  %1131 = zext i32 %1130 to i64
  store i64 %1131, i64* %RCX, align 8, !tbaa !2428
  %1132 = icmp ult i32 %1130, %1129
  %1133 = icmp ult i32 %1130, 1
  %1134 = or i1 %1132, %1133
  %1135 = zext i1 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1135, i8* %1136, align 1, !tbaa !2432
  %1137 = and i32 %1130, 255
  %1138 = call i32 @llvm.ctpop.i32(i32 %1137) #16
  %1139 = trunc i32 %1138 to i8
  %1140 = and i8 %1139, 1
  %1141 = xor i8 %1140, 1
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1141, i8* %1142, align 1, !tbaa !2446
  %1143 = xor i64 1, %1126
  %1144 = trunc i64 %1143 to i32
  %1145 = xor i32 %1144, %1130
  %1146 = lshr i32 %1145, 4
  %1147 = trunc i32 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1148, i8* %1149, align 1, !tbaa !2447
  %1150 = icmp eq i32 %1130, 0
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1151, i8* %1152, align 1, !tbaa !2448
  %1153 = lshr i32 %1130, 31
  %1154 = trunc i32 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1154, i8* %1155, align 1, !tbaa !2449
  %1156 = lshr i32 %1129, 31
  %1157 = xor i32 %1153, %1156
  %1158 = add nuw nsw i32 %1157, %1153
  %1159 = icmp eq i32 %1158, 2
  %1160 = zext i1 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1160, i8* %1161, align 1, !tbaa !2450
  %1162 = load i32, i32* %EAX
  %1163 = zext i32 %1162 to i64
  %1164 = load i32, i32* %ECX
  %1165 = zext i32 %1164 to i64
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 2
  store i64 %1167, i64* %PC
  %1168 = sub i32 %1162, %1164
  %1169 = icmp ult i32 %1162, %1164
  %1170 = zext i1 %1169 to i8
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1170, i8* %1171, align 1, !tbaa !2432
  %1172 = and i32 %1168, 255
  %1173 = call i32 @llvm.ctpop.i32(i32 %1172) #16
  %1174 = trunc i32 %1173 to i8
  %1175 = and i8 %1174, 1
  %1176 = xor i8 %1175, 1
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1176, i8* %1177, align 1, !tbaa !2446
  %1178 = xor i64 %1165, %1163
  %1179 = trunc i64 %1178 to i32
  %1180 = xor i32 %1179, %1168
  %1181 = lshr i32 %1180, 4
  %1182 = trunc i32 %1181 to i8
  %1183 = and i8 %1182, 1
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1183, i8* %1184, align 1, !tbaa !2447
  %1185 = icmp eq i32 %1168, 0
  %1186 = zext i1 %1185 to i8
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1186, i8* %1187, align 1, !tbaa !2448
  %1188 = lshr i32 %1168, 31
  %1189 = trunc i32 %1188 to i8
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1189, i8* %1190, align 1, !tbaa !2449
  %1191 = lshr i32 %1162, 31
  %1192 = lshr i32 %1164, 31
  %1193 = xor i32 %1192, %1191
  %1194 = xor i32 %1188, %1191
  %1195 = add nuw nsw i32 %1194, %1193
  %1196 = icmp eq i32 %1195, 2
  %1197 = zext i1 %1196 to i8
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1197, i8* %1198, align 1, !tbaa !2450
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 286
  %1201 = load i64, i64* %PC
  %1202 = add i64 %1201, 6
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 6
  store i64 %1204, i64* %PC
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1206 = load i8, i8* %1205, align 1, !tbaa !2449
  %1207 = icmp ne i8 %1206, 0
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1209 = load i8, i8* %1208, align 1, !tbaa !2450
  %1210 = icmp ne i8 %1209, 0
  %1211 = xor i1 %1207, %1210
  %1212 = xor i1 %1211, true
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1215 = select i1 %1211, i64 %1202, i64 %1200
  store i64 %1215, i64* %1214, align 8, !tbaa !2428
  %1216 = load i8, i8* %BRANCH_TAKEN
  %1217 = icmp eq i8 %1216, 1
  br i1 %1217, label %block_402bbe, label %block_402aa6

block_402aa6:                                     ; preds = %block_402a95
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 44
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 7
  store i64 %1221, i64* %PC
  %1222 = inttoptr i64 %1219 to i32*
  store i32 0, i32* %1222
  br label %block_402aad

block_402b44:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %1223 = add i64 %889, 10
  store i64 %1223, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 178), i64* %RSI, align 8, !tbaa !2428
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 8
  store i64 %1225, i64* %PC
  %1226 = load i64, i64* @stderr
  store i64 %1226, i64* %RDI, align 8, !tbaa !2428
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 36
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 3
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i32*
  %1232 = load i32, i32* %1231
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RDX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 40
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = zext i32 %1239 to i64
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = bitcast i32* %R8D to i64*
  %1242 = load i64, i64* %RBP
  %1243 = sub i64 %1242, 44
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 4
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i32*
  %1247 = load i32, i32* %1246
  %1248 = zext i32 %1247 to i64
  store i64 %1248, i64* %1241, align 8, !tbaa !2428
  %1249 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1250 = load i64, i64* %RBP
  %1251 = sub i64 %1250, 64
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 5
  store i64 %1253, i64* %PC
  %1254 = inttoptr i64 %1251 to double*
  %1255 = load double, double* %1254
  %1256 = bitcast i8* %1249 to double*
  store double %1255, double* %1256, align 1, !tbaa !2452
  %1257 = getelementptr inbounds i8, i8* %1249, i64 8
  %1258 = bitcast i8* %1257 to double*
  store double 0.000000e+00, double* %1258, align 1, !tbaa !2452
  %1259 = bitcast i32* %R9D to i64*
  %1260 = load i64, i64* %RBP
  %1261 = sub i64 %1260, 36
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 4
  store i64 %1263, i64* %PC
  %1264 = inttoptr i64 %1261 to i32*
  %1265 = load i32, i32* %1264
  %1266 = zext i32 %1265 to i64
  store i64 %1266, i64* %1259, align 8, !tbaa !2428
  %1267 = load i64, i64* %RBP
  %1268 = sub i64 %1267, 40
  %1269 = load i64, i64* %PC
  %1270 = add i64 %1269, 3
  store i64 %1270, i64* %PC
  %1271 = inttoptr i64 %1268 to i32*
  %1272 = load i32, i32* %1271
  %1273 = zext i32 %1272 to i64
  store i64 %1273, i64* %RAX, align 8, !tbaa !2428
  %1274 = bitcast i32* %R10D to i64*
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 44
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 4
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1276 to i32*
  %1280 = load i32, i32* %1279
  %1281 = zext i32 %1280 to i64
  store i64 %1281, i64* %1274, align 8, !tbaa !2428
  %1282 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1283 = load i64, i64* %RBP
  %1284 = sub i64 %1283, 72
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 5
  store i64 %1286, i64* %PC
  %1287 = inttoptr i64 %1284 to double*
  %1288 = load double, double* %1287
  %1289 = bitcast i8* %1282 to double*
  store double %1288, double* %1289, align 1, !tbaa !2452
  %1290 = getelementptr inbounds i8, i8* %1282, i64 8
  %1291 = bitcast i8* %1290 to double*
  store double 0.000000e+00, double* %1291, align 1, !tbaa !2452
  %1292 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1293 = load i64, i64* %RBP
  %1294 = sub i64 %1293, 56
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 5
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1294 to double*
  %1298 = load double, double* %1297
  %1299 = bitcast i8* %1292 to double*
  store double %1298, double* %1299, align 1, !tbaa !2452
  %1300 = getelementptr inbounds i8, i8* %1292, i64 8
  %1301 = bitcast i8* %1300 to double*
  store double 0.000000e+00, double* %1301, align 1, !tbaa !2452
  %1302 = load i64, i64* %RSP
  %1303 = load i32, i32* %EAX
  %1304 = zext i32 %1303 to i64
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1302 to i32*
  store i32 %1303, i32* %1307
  %1308 = load i64, i64* %RSP
  %1309 = add i64 %1308, 8
  %1310 = load i32, i32* %R10D
  %1311 = zext i32 %1310 to i64
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 5
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1309 to i32*
  store i32 %1310, i32* %1314
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 2
  store i64 %1316, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2454
  %1317 = load i64, i64* %PC
  %1318 = sub i64 %1317, 9732
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 5
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 5
  store i64 %1322, i64* %PC
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1324 = load i64, i64* %1323, align 8, !tbaa !2428
  %1325 = add i64 %1324, -8
  %1326 = inttoptr i64 %1325 to i64*
  store i64 %1320, i64* %1326
  store i64 %1325, i64* %1323, align 8, !tbaa !2428
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1318, i64* %1327, align 8, !tbaa !2428
  %1328 = load i64, i64* %PC
  %1329 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %1328, %struct.Memory* %871)
  %1330 = load i64, i64* %RBP
  %1331 = sub i64 %1330, 4
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 7
  store i64 %1333, i64* %PC
  %1334 = inttoptr i64 %1331 to i32*
  store i32 0, i32* %1334
  %1335 = load i64, i64* %RBP
  %1336 = sub i64 %1335, 84
  %1337 = load i32, i32* %EAX
  %1338 = zext i32 %1337 to i64
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1336 to i32*
  store i32 %1337, i32* %1341
  %1342 = load i64, i64* %PC
  %1343 = add i64 %1342, 69
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 5
  store i64 %1345, i64* %PC
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1343, i64* %1346, align 8, !tbaa !2428
  br label %block_402bd8
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e74__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e74:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005f0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6307928, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6307928
  %37 = icmp ult i64 %33, 6307928
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6307928, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400618, label %block_400601

block_400618:                                     ; preds = %block_400601, %block_400613, %block_4005f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4005f0 ], [ %2, %block_400601 ], [ %2, %block_400613 ]
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40061a:                                     ; preds = %block_40060b
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RAX
  %98 = add i64 %97, %96
  %99 = load i16, i16* %AX
  %100 = zext i16 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 6
  store i64 %102, i64* %PC
  %103 = load i64, i64* %PC
  %104 = tail call %struct.Memory* @sub_400620_register_tm_clones(%struct.State* %0, i64 %103, %struct.Memory* %2)
  ret %struct.Memory* %104

block_400613:                                     ; preds = %block_40060b
  %105 = load i64, i64* %RAX
  %106 = load i64, i64* %RAX
  %107 = add i64 %106, %105
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  br label %block_400618

block_40060b:                                     ; preds = %block_400601
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 1
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RBP, align 8, !tbaa !2428
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  store i64 6307928, i64* %RDI, align 8, !tbaa !2428
  %121 = load i64, i64* %RAX
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  switch i64 %125, label %162 [
    i64 4195866, label %block_40061a
    i64 4195859, label %block_400613
  ]

block_400601:                                     ; preds = %block_4005f0
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = and i64 %129, %128
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %133, align 1, !tbaa !2432
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #16
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2446
  %141 = icmp eq i64 %132, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %132, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %147, align 1, !tbaa !2450
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2447
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 15
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = load i8, i8* %155, align 1, !tbaa !2448
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = icmp ne i8 %156, 0
  %159 = select i1 %158, i64 %150, i64 %152
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_400618, label %block_40060b

; <label>:162:                                    ; preds = %block_40060b
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_400f90_init_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400f90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 21
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R10 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 23
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R11 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R12 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 27
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R13 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 29
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R14 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 31
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R15 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %65 to %"class.std::bitset"*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %67 to %"class.std::bitset"*
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %69 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %68, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %69 to %"class.std::bitset"*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %71 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %70, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %71 to %union.vec128_t*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %73 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %72, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %73 to %union.vec128_t*
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %75 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %74, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %75 to %union.vec128_t*
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %77 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %76, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %77 to %union.vec128_t*
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %79 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %78, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %79 to %union.vec128_t*
  %80 = load i64, i64* %RBP
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %80, i64* %86
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %87 = load i64, i64* %RSP
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  %90 = load i64, i64* %R15
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %94 = load i64, i64* %93, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %90, i64* %96
  store i64 %95, i64* %93, align 8, !tbaa !2428
  %97 = load i64, i64* %R14
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 2
  store i64 %99, i64* %PC
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %101 = load i64, i64* %100, align 8, !tbaa !2428
  %102 = add i64 %101, -8
  %103 = inttoptr i64 %102 to i64*
  store i64 %97, i64* %103
  store i64 %102, i64* %100, align 8, !tbaa !2428
  %104 = load i64, i64* %R13
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 2
  store i64 %106, i64* %PC
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %108 = load i64, i64* %107, align 8, !tbaa !2428
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %104, i64* %110
  store i64 %109, i64* %107, align 8, !tbaa !2428
  %111 = load i64, i64* %R12
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 2
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %111, i64* %117
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %118 = load i64, i64* %RBX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 1
  store i64 %120, i64* %PC
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %122 = load i64, i64* %121, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %118, i64* %124
  store i64 %123, i64* %121, align 8, !tbaa !2428
  %125 = load i64, i64* %RAX
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 1
  store i64 %127, i64* %PC
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %129 = load i64, i64* %128, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %125, i64* %131
  store i64 %130, i64* %128, align 8, !tbaa !2428
  %132 = load i64, i64* %RBP
  %133 = add i64 %132, 88
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = add i64 %138, 80
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %R10, align 8, !tbaa !2428
  %144 = load i64, i64* %RBP
  %145 = add i64 %144, 72
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %R11, align 8, !tbaa !2428
  %150 = load i64, i64* %RBP
  %151 = add i64 %150, 64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RBX, align 8, !tbaa !2428
  %156 = load i64, i64* %RBP
  %157 = add i64 %156, 56
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %R14, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP
  %163 = add i64 %162, 48
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %R15, align 8, !tbaa !2428
  %168 = load i64, i64* %RBP
  %169 = add i64 %168, 40
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 4
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %169 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %R12, align 8, !tbaa !2428
  %174 = load i64, i64* %RBP
  %175 = add i64 %174, 32
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 4
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i64*
  %179 = load i64, i64* %178
  store i64 %179, i64* %R13, align 8, !tbaa !2428
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 104
  %182 = load i64, i64* %RAX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %181 to i64*
  store i64 %182, i64* %185
  %186 = load i64, i64* %RBP
  %187 = add i64 %186, 24
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 112
  %194 = load i64, i64* %RAX
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197
  %198 = load i64, i64* %RBP
  %199 = add i64 %198, 16
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 8
  store i64 %206, i64* %PC
  %207 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 8) to double*)
  %208 = bitcast i8* %204 to double*
  store double %207, double* %208, align 1, !tbaa !2452
  %209 = getelementptr inbounds i8, i8* %204, i64 8
  %210 = bitcast i8* %209 to double*
  store double 0.000000e+00, double* %210, align 1, !tbaa !2452
  %211 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 8
  store i64 %213, i64* %PC
  %214 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 16) to double*)
  %215 = bitcast i8* %211 to double*
  store double %214, double* %215, align 1, !tbaa !2452
  %216 = getelementptr inbounds i8, i8* %211, i64 8
  %217 = bitcast i8* %216 to double*
  store double 0.000000e+00, double* %217, align 1, !tbaa !2452
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 44
  %220 = load i32, i32* %EDI
  %221 = zext i32 %220 to i64
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %219 to i32*
  store i32 %220, i32* %224
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 48
  %227 = load i32, i32* %ESI
  %228 = zext i32 %227 to i64
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 3
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %226 to i32*
  store i32 %227, i32* %231
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 52
  %234 = load i32, i32* %EDX
  %235 = zext i32 %234 to i64
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %238
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 64
  %241 = load i64, i64* %RCX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 72
  %247 = load i64, i64* %R8
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %246 to i64*
  store i64 %247, i64* %250
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 80
  %253 = load i64, i64* %R9
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %252 to i64*
  store i64 %253, i64* %256
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 64
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 4
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = load i64, i64* %RCX
  %264 = bitcast %union.vec128_t* %XMM1 to i8*
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = bitcast i8* %264 to double*
  %268 = load double, double* %267, align 1
  %269 = inttoptr i64 %263 to double*
  store double %268, double* %269
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 72
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %RCX, align 8, !tbaa !2428
  %276 = load i64, i64* %RCX
  %277 = bitcast %union.vec128_t* %XMM0 to i8*
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 4
  store i64 %279, i64* %PC
  %280 = bitcast i8* %277 to double*
  %281 = load double, double* %280, align 1
  %282 = inttoptr i64 %276 to double*
  store double %281, double* %282
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 84
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 7
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to i32*
  store i32 0, i32* %287
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 120
  %290 = load i64, i64* %R13
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %289 to i64*
  store i64 %290, i64* %293
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 128
  %296 = load i64, i64* %R14
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %295 to i64*
  store i64 %296, i64* %299
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 136
  %302 = load i64, i64* %R15
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 7
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %301 to i64*
  store i64 %302, i64* %305
  %306 = load i64, i64* %RBP
  %307 = sub i64 %306, 144
  %308 = load i64, i64* %R12
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 7
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %307 to i64*
  store i64 %308, i64* %311
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 152
  %314 = load i64, i64* %RBX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 7
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %313 to i64*
  store i64 %314, i64* %317
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 160
  %320 = load i64, i64* %R11
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 7
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %319 to i64*
  store i64 %320, i64* %323
  %324 = load i64, i64* %RBP
  %325 = sub i64 %324, 168
  %326 = load i64, i64* %RAX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 7
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %325 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 176
  %332 = load i64, i64* %R10
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 7
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %331 to i64*
  store i64 %332, i64* %335
  br label %block_40103c

block_4010bf:                                     ; preds = %block_4010b3
  %336 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 8
  store i64 %338, i64* %PC
  %339 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 80) to double*)
  %340 = bitcast i8* %336 to double*
  store double %339, double* %340, align 1, !tbaa !2452
  %341 = getelementptr inbounds i8, i8* %336, i64 8
  %342 = bitcast i8* %341 to double*
  store double 0.000000e+00, double* %342, align 1, !tbaa !2452
  %343 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 8
  store i64 %345, i64* %PC
  %346 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 40) to double*)
  %347 = bitcast i8* %343 to double*
  store double %346, double* %347, align 1, !tbaa !2452
  %348 = getelementptr inbounds i8, i8* %343, i64 8
  %349 = bitcast i8* %348 to double*
  store double 0.000000e+00, double* %349, align 1, !tbaa !2452
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 84
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 3
  store i64 %353, i64* %PC
  %354 = inttoptr i64 %351 to i32*
  %355 = load i32, i32* %354
  %356 = zext i32 %355 to i64
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %358 = load i32, i32* %EAX
  %359 = zext i32 %358 to i64
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC
  %362 = sitofp i32 %358 to double
  %363 = bitcast i8* %357 to double*
  store double %362, double* %363, align 1, !tbaa !2452
  %364 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %365 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %366 = bitcast %union.vec128_t* %XMM1 to i8*
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = bitcast i8* %365 to double*
  %370 = load double, double* %369, align 1
  %371 = getelementptr inbounds i8, i8* %365, i64 8
  %372 = bitcast i8* %371 to i64*
  %373 = load i64, i64* %372, align 1
  %374 = bitcast i8* %366 to double*
  %375 = load double, double* %374, align 1
  %376 = fadd double %370, %375
  %377 = bitcast i8* %364 to double*
  store double %376, double* %377, align 1, !tbaa !2452
  %378 = getelementptr inbounds i8, i8* %364, i64 8
  %379 = bitcast i8* %378 to i64*
  store i64 %373, i64* %379, align 1, !tbaa !2452
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 48
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i32*
  %385 = load i32, i32* %384
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %388 = load i32, i32* %EAX
  %389 = zext i32 %388 to i64
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC
  %392 = sitofp i32 %388 to double
  %393 = bitcast i8* %387 to double*
  store double %392, double* %393, align 1, !tbaa !2452
  %394 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %395 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %396 = bitcast %union.vec128_t* %XMM1 to i8*
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  %399 = bitcast i8* %395 to double*
  %400 = load double, double* %399, align 1
  %401 = getelementptr inbounds i8, i8* %395, i64 8
  %402 = bitcast i8* %401 to i64*
  %403 = load i64, i64* %402, align 1
  %404 = bitcast i8* %396 to double*
  %405 = load double, double* %404, align 1
  %406 = fdiv double %400, %405
  %407 = bitcast i8* %394 to double*
  store double %406, double* %407, align 1, !tbaa !2452
  %408 = getelementptr inbounds i8, i8* %394, i64 8
  %409 = bitcast i8* %408 to i64*
  store i64 %403, i64* %409, align 1, !tbaa !2452
  %410 = load i64, i64* %RBP
  %411 = add i64 %410, 64
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414
  store i64 %415, i64* %RCX, align 8, !tbaa !2428
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 84
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  %421 = load i32, i32* %420
  %422 = sext i32 %421 to i64
  store i64 %422, i64* %RDX, align 8, !tbaa !2428
  %423 = load i64, i64* %RCX
  %424 = load i64, i64* %RDX
  %425 = mul i64 %424, 8
  %426 = add i64 %425, %423
  %427 = bitcast %union.vec128_t* %XMM2 to i8*
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 5
  store i64 %429, i64* %PC
  %430 = bitcast i8* %427 to double*
  %431 = load double, double* %430, align 1
  %432 = inttoptr i64 %426 to double*
  store double %431, double* %432
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 84
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i32*
  %438 = load i32, i32* %437
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %441 = load i32, i32* %EAX
  %442 = zext i32 %441 to i64
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = sitofp i32 %441 to double
  %446 = bitcast i8* %440 to double*
  store double %445, double* %446, align 1, !tbaa !2452
  %447 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %448 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %449 = bitcast %union.vec128_t* %XMM0 to i8*
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 4
  store i64 %451, i64* %PC
  %452 = bitcast i8* %448 to double*
  %453 = load double, double* %452, align 1
  %454 = getelementptr inbounds i8, i8* %448, i64 8
  %455 = bitcast i8* %454 to i64*
  %456 = load i64, i64* %455, align 1
  %457 = bitcast i8* %449 to double*
  %458 = load double, double* %457, align 1
  %459 = fadd double %453, %458
  %460 = bitcast i8* %447 to double*
  store double %459, double* %460, align 1, !tbaa !2452
  %461 = getelementptr inbounds i8, i8* %447, i64 8
  %462 = bitcast i8* %461 to i64*
  store i64 %456, i64* %462, align 1, !tbaa !2452
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 48
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %471 = load i32, i32* %EAX
  %472 = zext i32 %471 to i64
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = sitofp i32 %471 to double
  %476 = bitcast i8* %470 to double*
  store double %475, double* %476, align 1, !tbaa !2452
  %477 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %478 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %479 = bitcast %union.vec128_t* %XMM0 to i8*
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = bitcast i8* %478 to double*
  %483 = load double, double* %482, align 1
  %484 = getelementptr inbounds i8, i8* %478, i64 8
  %485 = bitcast i8* %484 to i64*
  %486 = load i64, i64* %485, align 1
  %487 = bitcast i8* %479 to double*
  %488 = load double, double* %487, align 1
  %489 = fdiv double %483, %488
  %490 = bitcast i8* %477 to double*
  store double %489, double* %490, align 1, !tbaa !2452
  %491 = getelementptr inbounds i8, i8* %477, i64 8
  %492 = bitcast i8* %491 to i64*
  store i64 %486, i64* %492, align 1, !tbaa !2452
  %493 = load i64, i64* %RBP
  %494 = add i64 %493, 72
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 4
  store i64 %496, i64* %PC
  %497 = inttoptr i64 %494 to i64*
  %498 = load i64, i64* %497
  store i64 %498, i64* %RCX, align 8, !tbaa !2428
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 84
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 4
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = sext i32 %504 to i64
  store i64 %505, i64* %RDX, align 8, !tbaa !2428
  %506 = load i64, i64* %RCX
  %507 = load i64, i64* %RDX
  %508 = mul i64 %507, 8
  %509 = add i64 %508, %506
  %510 = bitcast %union.vec128_t* %XMM1 to i8*
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 5
  store i64 %512, i64* %PC
  %513 = bitcast i8* %510 to double*
  %514 = load double, double* %513, align 1
  %515 = inttoptr i64 %509 to double*
  store double %514, double* %515
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 84
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 3
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i32*
  %521 = load i32, i32* %520
  %522 = zext i32 %521 to i64
  store i64 %522, i64* %RAX, align 8, !tbaa !2428
  %523 = load i64, i64* %RAX
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 3
  store i64 %525, i64* %PC
  %526 = trunc i64 %523 to i32
  %527 = add i32 1, %526
  %528 = zext i32 %527 to i64
  store i64 %528, i64* %RAX, align 8, !tbaa !2428
  %529 = icmp ult i32 %527, %526
  %530 = icmp ult i32 %527, 1
  %531 = or i1 %529, %530
  %532 = zext i1 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %532, i8* %533, align 1, !tbaa !2432
  %534 = and i32 %527, 255
  %535 = call i32 @llvm.ctpop.i32(i32 %534) #16
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %538, i8* %539, align 1, !tbaa !2446
  %540 = xor i64 1, %523
  %541 = trunc i64 %540 to i32
  %542 = xor i32 %541, %527
  %543 = lshr i32 %542, 4
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %545, i8* %546, align 1, !tbaa !2447
  %547 = icmp eq i32 %527, 0
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %548, i8* %549, align 1, !tbaa !2448
  %550 = lshr i32 %527, 31
  %551 = trunc i32 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %551, i8* %552, align 1, !tbaa !2449
  %553 = lshr i32 %526, 31
  %554 = xor i32 %550, %553
  %555 = add nuw nsw i32 %554, %550
  %556 = icmp eq i32 %555, 2
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %557, i8* %558, align 1, !tbaa !2450
  %559 = load i64, i64* %RBP
  %560 = sub i64 %559, 84
  %561 = load i32, i32* %EAX
  %562 = zext i32 %561 to i64
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 3
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %560 to i32*
  store i32 %561, i32* %565
  %566 = load i64, i64* %PC
  %567 = sub i64 %566, 107
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 5
  store i64 %569, i64* %PC
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %567, i64* %570, align 8, !tbaa !2428
  br label %block_4010b3

block_4013b5:                                     ; preds = %block_4011a1
  %571 = load i64, i64* %RSP
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  %574 = add i64 8, %571
  store i64 %574, i64* %RSP, align 8, !tbaa !2428
  %575 = icmp ult i64 %574, %571
  %576 = icmp ult i64 %574, 8
  %577 = or i1 %575, %576
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %578, i8* %579, align 1, !tbaa !2432
  %580 = trunc i64 %574 to i32
  %581 = and i32 %580, 255
  %582 = call i32 @llvm.ctpop.i32(i32 %581) #16
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = xor i8 %584, 1
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %585, i8* %586, align 1, !tbaa !2446
  %587 = xor i64 8, %571
  %588 = xor i64 %587, %574
  %589 = lshr i64 %588, 4
  %590 = trunc i64 %589 to i8
  %591 = and i8 %590, 1
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %591, i8* %592, align 1, !tbaa !2447
  %593 = icmp eq i64 %574, 0
  %594 = zext i1 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %594, i8* %595, align 1, !tbaa !2448
  %596 = lshr i64 %574, 63
  %597 = trunc i64 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %597, i8* %598, align 1, !tbaa !2449
  %599 = lshr i64 %571, 63
  %600 = xor i64 %596, %599
  %601 = add nuw nsw i64 %600, %596
  %602 = icmp eq i64 %601, 2
  %603 = zext i1 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %603, i8* %604, align 1, !tbaa !2450
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 1
  store i64 %606, i64* %PC
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %608 = load i64, i64* %607, align 8, !tbaa !2428
  %609 = add i64 %608, 8
  %610 = inttoptr i64 %608 to i64*
  %611 = load i64, i64* %610
  store i64 %611, i64* %RBX, align 8, !tbaa !2428
  store i64 %609, i64* %607, align 8, !tbaa !2428
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 2
  store i64 %613, i64* %PC
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %615 = load i64, i64* %614, align 8, !tbaa !2428
  %616 = add i64 %615, 8
  %617 = inttoptr i64 %615 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %R12, align 8, !tbaa !2428
  store i64 %616, i64* %614, align 8, !tbaa !2428
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 2
  store i64 %620, i64* %PC
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %622 = load i64, i64* %621, align 8, !tbaa !2428
  %623 = add i64 %622, 8
  %624 = inttoptr i64 %622 to i64*
  %625 = load i64, i64* %624
  store i64 %625, i64* %R13, align 8, !tbaa !2428
  store i64 %623, i64* %621, align 8, !tbaa !2428
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 2
  store i64 %627, i64* %PC
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %629 = load i64, i64* %628, align 8, !tbaa !2428
  %630 = add i64 %629, 8
  %631 = inttoptr i64 %629 to i64*
  %632 = load i64, i64* %631
  store i64 %632, i64* %R14, align 8, !tbaa !2428
  store i64 %630, i64* %628, align 8, !tbaa !2428
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 2
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, 8
  %638 = inttoptr i64 %636 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %R15, align 8, !tbaa !2428
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 1
  store i64 %641, i64* %PC
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %643 = load i64, i64* %642, align 8, !tbaa !2428
  %644 = add i64 %643, 8
  %645 = inttoptr i64 %643 to i64*
  %646 = load i64, i64* %645
  store i64 %646, i64* %RBP, align 8, !tbaa !2428
  store i64 %644, i64* %642, align 8, !tbaa !2428
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 1
  store i64 %648, i64* %PC
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %651 = load i64, i64* %650, align 8, !tbaa !2428
  %652 = inttoptr i64 %651 to i64*
  %653 = load i64, i64* %652
  store i64 %653, i64* %649, align 8, !tbaa !2428
  %654 = add i64 %651, 8
  store i64 %654, i64* %650, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4010b3:                                     ; preds = %block_4010ac, %block_4010bf
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.5, %block_4010ac ], [ %MEMORY.0, %block_4010bf ]
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 84
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 3
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i32*
  %660 = load i32, i32* %659
  %661 = zext i32 %660 to i64
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = load i32, i32* %EAX
  %663 = zext i32 %662 to i64
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 48
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 3
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to i32*
  %669 = load i32, i32* %668
  %670 = sub i32 %662, %669
  %671 = icmp ult i32 %662, %669
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %672, i8* %673, align 1, !tbaa !2432
  %674 = and i32 %670, 255
  %675 = call i32 @llvm.ctpop.i32(i32 %674) #16
  %676 = trunc i32 %675 to i8
  %677 = and i8 %676, 1
  %678 = xor i8 %677, 1
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %678, i8* %679, align 1, !tbaa !2446
  %680 = xor i32 %669, %662
  %681 = xor i32 %680, %670
  %682 = lshr i32 %681, 4
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %684, i8* %685, align 1, !tbaa !2447
  %686 = icmp eq i32 %670, 0
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %687, i8* %688, align 1, !tbaa !2448
  %689 = lshr i32 %670, 31
  %690 = trunc i32 %689 to i8
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %690, i8* %691, align 1, !tbaa !2449
  %692 = lshr i32 %662, 31
  %693 = lshr i32 %669, 31
  %694 = xor i32 %693, %692
  %695 = xor i32 %689, %692
  %696 = add nuw nsw i32 %695, %694
  %697 = icmp eq i32 %696, 2
  %698 = zext i1 %697 to i8
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %698, i8* %699, align 1, !tbaa !2450
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 106
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 6
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 6
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %707 = load i8, i8* %706, align 1, !tbaa !2448
  %708 = icmp eq i8 %707, 0
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %710 = load i8, i8* %709, align 1, !tbaa !2449
  %711 = icmp ne i8 %710, 0
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %713 = load i8, i8* %712, align 1, !tbaa !2450
  %714 = icmp ne i8 %713, 0
  %715 = xor i1 %711, %714
  %716 = xor i1 %715, true
  %717 = and i1 %708, %716
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %720 = select i1 %717, i64 %701, i64 %703
  store i64 %720, i64* %719, align 8, !tbaa !2428
  %721 = load i8, i8* %BRANCH_TAKEN
  %722 = icmp eq i8 %721, 1
  br i1 %722, label %block_401123, label %block_4010bf

block_401261:                                     ; preds = %block_401255
  %723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 8
  store i64 %725, i64* %PC
  %726 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 40) to double*)
  %727 = bitcast i8* %723 to double*
  store double %726, double* %727, align 1, !tbaa !2452
  %728 = getelementptr inbounds i8, i8* %723, i64 8
  %729 = bitcast i8* %728 to double*
  store double 0.000000e+00, double* %729, align 1, !tbaa !2452
  %730 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 8
  store i64 %732, i64* %PC
  %733 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 48) to double*)
  %734 = bitcast i8* %730 to double*
  store double %733, double* %734, align 1, !tbaa !2452
  %735 = getelementptr inbounds i8, i8* %730, i64 8
  %736 = bitcast i8* %735 to double*
  store double 0.000000e+00, double* %736, align 1, !tbaa !2452
  %737 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 8
  store i64 %739, i64* %PC
  %740 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 56) to double*)
  %741 = bitcast i8* %737 to double*
  store double %740, double* %741, align 1, !tbaa !2452
  %742 = getelementptr inbounds i8, i8* %737, i64 8
  %743 = bitcast i8* %742 to double*
  store double 0.000000e+00, double* %743, align 1, !tbaa !2452
  %744 = load i64, i64* %RBP
  %745 = sub i64 %744, 84
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 3
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  %749 = load i32, i32* %748
  %750 = zext i32 %749 to i64
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %752 = load i32, i32* %EAX
  %753 = zext i32 %752 to i64
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 4
  store i64 %755, i64* %PC
  %756 = sitofp i32 %752 to double
  %757 = bitcast i8* %751 to double*
  store double %756, double* %757, align 1, !tbaa !2452
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 88
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 3
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  %763 = load i32, i32* %762
  %764 = zext i32 %763 to i64
  store i64 %764, i64* %RAX, align 8, !tbaa !2428
  %765 = load i64, i64* %RAX
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 3
  store i64 %767, i64* %PC
  %768 = trunc i64 %765 to i32
  %769 = add i32 3, %768
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = icmp ult i32 %769, %768
  %772 = icmp ult i32 %769, 3
  %773 = or i1 %771, %772
  %774 = zext i1 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %774, i8* %775, align 1, !tbaa !2432
  %776 = and i32 %769, 255
  %777 = call i32 @llvm.ctpop.i32(i32 %776) #16
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %780, i8* %781, align 1, !tbaa !2446
  %782 = xor i64 3, %765
  %783 = trunc i64 %782 to i32
  %784 = xor i32 %783, %769
  %785 = lshr i32 %784, 4
  %786 = trunc i32 %785 to i8
  %787 = and i8 %786, 1
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %787, i8* %788, align 1, !tbaa !2447
  %789 = icmp eq i32 %769, 0
  %790 = zext i1 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %790, i8* %791, align 1, !tbaa !2448
  %792 = lshr i32 %769, 31
  %793 = trunc i32 %792 to i8
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %793, i8* %794, align 1, !tbaa !2449
  %795 = lshr i32 %768, 31
  %796 = xor i32 %792, %795
  %797 = add nuw nsw i32 %796, %792
  %798 = icmp eq i32 %797, 2
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %799, i8* %800, align 1, !tbaa !2450
  %801 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %802 = load i32, i32* %EAX
  %803 = zext i32 %802 to i64
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 4
  store i64 %805, i64* %PC
  %806 = sitofp i32 %802 to double
  %807 = bitcast i8* %801 to double*
  store double %806, double* %807, align 1, !tbaa !2452
  %808 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %809 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %810 = bitcast %union.vec128_t* %XMM4 to i8*
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = bitcast i8* %809 to double*
  %814 = load double, double* %813, align 1
  %815 = getelementptr inbounds i8, i8* %809, i64 8
  %816 = bitcast i8* %815 to i64*
  %817 = load i64, i64* %816, align 1
  %818 = bitcast i8* %810 to double*
  %819 = load double, double* %818, align 1
  %820 = fmul double %814, %819
  %821 = bitcast i8* %808 to double*
  store double %820, double* %821, align 1, !tbaa !2452
  %822 = getelementptr inbounds i8, i8* %808, i64 8
  %823 = bitcast i8* %822 to i64*
  store i64 %817, i64* %823, align 1, !tbaa !2452
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 92
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 3
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i32*
  %829 = load i32, i32* %828
  %830 = zext i32 %829 to i64
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %832 = load i32, i32* %EAX
  %833 = zext i32 %832 to i64
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = sitofp i32 %832 to double
  %837 = bitcast i8* %831 to double*
  store double %836, double* %837, align 1, !tbaa !2452
  %838 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %839 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %840 = bitcast %union.vec128_t* %XMM4 to i8*
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 4
  store i64 %842, i64* %PC
  %843 = bitcast i8* %839 to double*
  %844 = load double, double* %843, align 1
  %845 = getelementptr inbounds i8, i8* %839, i64 8
  %846 = bitcast i8* %845 to i64*
  %847 = load i64, i64* %846, align 1
  %848 = bitcast i8* %840 to double*
  %849 = load double, double* %848, align 1
  %850 = fadd double %844, %849
  %851 = bitcast i8* %838 to double*
  store double %850, double* %851, align 1, !tbaa !2452
  %852 = getelementptr inbounds i8, i8* %838, i64 8
  %853 = bitcast i8* %852 to i64*
  store i64 %847, i64* %853, align 1, !tbaa !2452
  %854 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %855 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %856 = bitcast %union.vec128_t* %XMM2 to i8*
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 4
  store i64 %858, i64* %PC
  %859 = bitcast i8* %855 to double*
  %860 = load double, double* %859, align 1
  %861 = getelementptr inbounds i8, i8* %855, i64 8
  %862 = bitcast i8* %861 to i64*
  %863 = load i64, i64* %862, align 1
  %864 = bitcast i8* %856 to double*
  %865 = load double, double* %864, align 1
  %866 = fadd double %860, %865
  %867 = bitcast i8* %854 to double*
  store double %866, double* %867, align 1, !tbaa !2452
  %868 = getelementptr inbounds i8, i8* %854, i64 8
  %869 = bitcast i8* %868 to i64*
  store i64 %863, i64* %869, align 1, !tbaa !2452
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 48
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 3
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i32*
  %875 = load i32, i32* %874
  %876 = zext i32 %875 to i64
  store i64 %876, i64* %RAX, align 8, !tbaa !2428
  %877 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %878 = load i32, i32* %EAX
  %879 = zext i32 %878 to i64
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 4
  store i64 %881, i64* %PC
  %882 = sitofp i32 %878 to double
  %883 = bitcast i8* %877 to double*
  store double %882, double* %883, align 1, !tbaa !2452
  %884 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %885 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %886 = bitcast %union.vec128_t* %XMM2 to i8*
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 4
  store i64 %888, i64* %PC
  %889 = bitcast i8* %885 to double*
  %890 = load double, double* %889, align 1
  %891 = getelementptr inbounds i8, i8* %885, i64 8
  %892 = bitcast i8* %891 to i64*
  %893 = load i64, i64* %892, align 1
  %894 = bitcast i8* %886 to double*
  %895 = load double, double* %894, align 1
  %896 = fdiv double %890, %895
  %897 = bitcast i8* %884 to double*
  store double %896, double* %897, align 1, !tbaa !2452
  %898 = getelementptr inbounds i8, i8* %884, i64 8
  %899 = bitcast i8* %898 to i64*
  store i64 %893, i64* %899, align 1, !tbaa !2452
  %900 = load i64, i64* %RBP
  %901 = add i64 %900, 24
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 4
  store i64 %903, i64* %PC
  %904 = inttoptr i64 %901 to i64*
  %905 = load i64, i64* %904
  store i64 %905, i64* %RCX, align 8, !tbaa !2428
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 84
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 4
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  %911 = load i32, i32* %910
  %912 = sext i32 %911 to i64
  store i64 %912, i64* %RDX, align 8, !tbaa !2428
  %913 = load i64, i64* %RDX
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 7
  store i64 %915, i64* %PC
  %916 = sext i64 %913 to i128
  %917 = and i128 %916, -18446744073709551616
  %918 = zext i64 %913 to i128
  %919 = or i128 %917, %918
  %920 = mul nsw i128 33800, %919
  %921 = trunc i128 %920 to i64
  store i64 %921, i64* %RDX, align 8, !tbaa !2428
  %922 = sext i64 %921 to i128
  %923 = icmp ne i128 %922, %920
  %924 = zext i1 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %924, i8* %925, align 1, !tbaa !2432
  %926 = trunc i128 %920 to i32
  %927 = and i32 %926, 255
  %928 = call i32 @llvm.ctpop.i32(i32 %927) #16
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %931, i8* %932, align 1, !tbaa !2446
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %933, align 1, !tbaa !2447
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %934, align 1, !tbaa !2448
  %935 = lshr i64 %921, 63
  %936 = trunc i64 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %936, i8* %937, align 1, !tbaa !2449
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %924, i8* %938, align 1, !tbaa !2450
  %939 = load i64, i64* %RCX
  %940 = load i64, i64* %RDX
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 3
  store i64 %942, i64* %PC
  %943 = add i64 %940, %939
  store i64 %943, i64* %RCX, align 8, !tbaa !2428
  %944 = icmp ult i64 %943, %939
  %945 = icmp ult i64 %943, %940
  %946 = or i1 %944, %945
  %947 = zext i1 %946 to i8
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %947, i8* %948, align 1, !tbaa !2432
  %949 = trunc i64 %943 to i32
  %950 = and i32 %949, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2446
  %956 = xor i64 %940, %939
  %957 = xor i64 %956, %943
  %958 = lshr i64 %957, 4
  %959 = trunc i64 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2447
  %962 = icmp eq i64 %943, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2448
  %965 = lshr i64 %943, 63
  %966 = trunc i64 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2449
  %968 = lshr i64 %939, 63
  %969 = lshr i64 %940, 63
  %970 = xor i64 %965, %968
  %971 = xor i64 %965, %969
  %972 = add nuw nsw i64 %970, %971
  %973 = icmp eq i64 %972, 2
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %974, i8* %975, align 1, !tbaa !2450
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 88
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i32*
  %981 = load i32, i32* %980
  %982 = sext i32 %981 to i64
  store i64 %982, i64* %RDX, align 8, !tbaa !2428
  %983 = load i64, i64* %RDX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 7
  store i64 %985, i64* %PC
  %986 = sext i64 %983 to i128
  %987 = and i128 %986, -18446744073709551616
  %988 = zext i64 %983 to i128
  %989 = or i128 %987, %988
  %990 = mul nsw i128 520, %989
  %991 = trunc i128 %990 to i64
  store i64 %991, i64* %RDX, align 8, !tbaa !2428
  %992 = sext i64 %991 to i128
  %993 = icmp ne i128 %992, %990
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %994, i8* %995, align 1, !tbaa !2432
  %996 = trunc i128 %990 to i32
  %997 = and i32 %996, 255
  %998 = call i32 @llvm.ctpop.i32(i32 %997) #16
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  %1001 = xor i8 %1000, 1
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1001, i8* %1002, align 1, !tbaa !2446
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1003, align 1, !tbaa !2447
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1004, align 1, !tbaa !2448
  %1005 = lshr i64 %991, 63
  %1006 = trunc i64 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1006, i8* %1007, align 1, !tbaa !2449
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %994, i8* %1008, align 1, !tbaa !2450
  %1009 = load i64, i64* %RCX
  %1010 = load i64, i64* %RDX
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 3
  store i64 %1012, i64* %PC
  %1013 = add i64 %1010, %1009
  store i64 %1013, i64* %RCX, align 8, !tbaa !2428
  %1014 = icmp ult i64 %1013, %1009
  %1015 = icmp ult i64 %1013, %1010
  %1016 = or i1 %1014, %1015
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1017, i8* %1018, align 1, !tbaa !2432
  %1019 = trunc i64 %1013 to i32
  %1020 = and i32 %1019, 255
  %1021 = call i32 @llvm.ctpop.i32(i32 %1020) #16
  %1022 = trunc i32 %1021 to i8
  %1023 = and i8 %1022, 1
  %1024 = xor i8 %1023, 1
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1024, i8* %1025, align 1, !tbaa !2446
  %1026 = xor i64 %1010, %1009
  %1027 = xor i64 %1026, %1013
  %1028 = lshr i64 %1027, 4
  %1029 = trunc i64 %1028 to i8
  %1030 = and i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1030, i8* %1031, align 1, !tbaa !2447
  %1032 = icmp eq i64 %1013, 0
  %1033 = zext i1 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1033, i8* %1034, align 1, !tbaa !2448
  %1035 = lshr i64 %1013, 63
  %1036 = trunc i64 %1035 to i8
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1036, i8* %1037, align 1, !tbaa !2449
  %1038 = lshr i64 %1009, 63
  %1039 = lshr i64 %1010, 63
  %1040 = xor i64 %1035, %1038
  %1041 = xor i64 %1035, %1039
  %1042 = add nuw nsw i64 %1040, %1041
  %1043 = icmp eq i64 %1042, 2
  %1044 = zext i1 %1043 to i8
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1044, i8* %1045, align 1, !tbaa !2450
  %1046 = load i64, i64* %RBP
  %1047 = sub i64 %1046, 92
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 4
  store i64 %1049, i64* %PC
  %1050 = inttoptr i64 %1047 to i32*
  %1051 = load i32, i32* %1050
  %1052 = sext i32 %1051 to i64
  store i64 %1052, i64* %RDX, align 8, !tbaa !2428
  %1053 = load i64, i64* %RCX
  %1054 = load i64, i64* %RDX
  %1055 = mul i64 %1054, 8
  %1056 = add i64 %1055, %1053
  %1057 = bitcast %union.vec128_t* %XMM3 to i8*
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 5
  store i64 %1059, i64* %PC
  %1060 = bitcast i8* %1057 to double*
  %1061 = load double, double* %1060, align 1
  %1062 = inttoptr i64 %1056 to double*
  store double %1061, double* %1062
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 84
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 3
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  %1068 = load i32, i32* %1067
  %1069 = zext i32 %1068 to i64
  store i64 %1069, i64* %RAX, align 8, !tbaa !2428
  %1070 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1071 = load i32, i32* %EAX
  %1072 = zext i32 %1071 to i64
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 4
  store i64 %1074, i64* %PC
  %1075 = sitofp i32 %1071 to double
  %1076 = bitcast i8* %1070 to double*
  store double %1075, double* %1076, align 1, !tbaa !2452
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 88
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 3
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1078 to i32*
  %1082 = load i32, i32* %1081
  %1083 = zext i32 %1082 to i64
  store i64 %1083, i64* %RAX, align 8, !tbaa !2428
  %1084 = load i64, i64* %RAX
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 3
  store i64 %1086, i64* %PC
  %1087 = trunc i64 %1084 to i32
  %1088 = add i32 4, %1087
  %1089 = zext i32 %1088 to i64
  store i64 %1089, i64* %RAX, align 8, !tbaa !2428
  %1090 = icmp ult i32 %1088, %1087
  %1091 = icmp ult i32 %1088, 4
  %1092 = or i1 %1090, %1091
  %1093 = zext i1 %1092 to i8
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1093, i8* %1094, align 1, !tbaa !2432
  %1095 = and i32 %1088, 255
  %1096 = call i32 @llvm.ctpop.i32(i32 %1095) #16
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1099, i8* %1100, align 1, !tbaa !2446
  %1101 = xor i64 4, %1084
  %1102 = trunc i64 %1101 to i32
  %1103 = xor i32 %1102, %1088
  %1104 = lshr i32 %1103, 4
  %1105 = trunc i32 %1104 to i8
  %1106 = and i8 %1105, 1
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1106, i8* %1107, align 1, !tbaa !2447
  %1108 = icmp eq i32 %1088, 0
  %1109 = zext i1 %1108 to i8
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1109, i8* %1110, align 1, !tbaa !2448
  %1111 = lshr i32 %1088, 31
  %1112 = trunc i32 %1111 to i8
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1112, i8* %1113, align 1, !tbaa !2449
  %1114 = lshr i32 %1087, 31
  %1115 = xor i32 %1111, %1114
  %1116 = add nuw nsw i32 %1115, %1111
  %1117 = icmp eq i32 %1116, 2
  %1118 = zext i1 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1118, i8* %1119, align 1, !tbaa !2450
  %1120 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1121 = load i32, i32* %EAX
  %1122 = zext i32 %1121 to i64
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 4
  store i64 %1124, i64* %PC
  %1125 = sitofp i32 %1121 to double
  %1126 = bitcast i8* %1120 to double*
  store double %1125, double* %1126, align 1, !tbaa !2452
  %1127 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1128 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1129 = bitcast %union.vec128_t* %XMM3 to i8*
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 4
  store i64 %1131, i64* %PC
  %1132 = bitcast i8* %1128 to double*
  %1133 = load double, double* %1132, align 1
  %1134 = getelementptr inbounds i8, i8* %1128, i64 8
  %1135 = bitcast i8* %1134 to i64*
  %1136 = load i64, i64* %1135, align 1
  %1137 = bitcast i8* %1129 to double*
  %1138 = load double, double* %1137, align 1
  %1139 = fmul double %1133, %1138
  %1140 = bitcast i8* %1127 to double*
  store double %1139, double* %1140, align 1, !tbaa !2452
  %1141 = getelementptr inbounds i8, i8* %1127, i64 8
  %1142 = bitcast i8* %1141 to i64*
  store i64 %1136, i64* %1142, align 1, !tbaa !2452
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 92
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 3
  store i64 %1146, i64* %PC
  %1147 = inttoptr i64 %1144 to i32*
  %1148 = load i32, i32* %1147
  %1149 = zext i32 %1148 to i64
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1151 = load i32, i32* %EAX
  %1152 = zext i32 %1151 to i64
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC
  %1155 = sitofp i32 %1151 to double
  %1156 = bitcast i8* %1150 to double*
  store double %1155, double* %1156, align 1, !tbaa !2452
  %1157 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1158 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1159 = bitcast %union.vec128_t* %XMM3 to i8*
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 4
  store i64 %1161, i64* %PC
  %1162 = bitcast i8* %1158 to double*
  %1163 = load double, double* %1162, align 1
  %1164 = getelementptr inbounds i8, i8* %1158, i64 8
  %1165 = bitcast i8* %1164 to i64*
  %1166 = load i64, i64* %1165, align 1
  %1167 = bitcast i8* %1159 to double*
  %1168 = load double, double* %1167, align 1
  %1169 = fadd double %1163, %1168
  %1170 = bitcast i8* %1157 to double*
  store double %1169, double* %1170, align 1, !tbaa !2452
  %1171 = getelementptr inbounds i8, i8* %1157, i64 8
  %1172 = bitcast i8* %1171 to i64*
  store i64 %1166, i64* %1172, align 1, !tbaa !2452
  %1173 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1174 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1175 = bitcast %union.vec128_t* %XMM1 to i8*
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 4
  store i64 %1177, i64* %PC
  %1178 = bitcast i8* %1174 to double*
  %1179 = load double, double* %1178, align 1
  %1180 = getelementptr inbounds i8, i8* %1174, i64 8
  %1181 = bitcast i8* %1180 to i64*
  %1182 = load i64, i64* %1181, align 1
  %1183 = bitcast i8* %1175 to double*
  %1184 = load double, double* %1183, align 1
  %1185 = fadd double %1179, %1184
  %1186 = bitcast i8* %1173 to double*
  store double %1185, double* %1186, align 1, !tbaa !2452
  %1187 = getelementptr inbounds i8, i8* %1173, i64 8
  %1188 = bitcast i8* %1187 to i64*
  store i64 %1182, i64* %1188, align 1, !tbaa !2452
  %1189 = load i64, i64* %RBP
  %1190 = sub i64 %1189, 52
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 3
  store i64 %1192, i64* %PC
  %1193 = inttoptr i64 %1190 to i32*
  %1194 = load i32, i32* %1193
  %1195 = zext i32 %1194 to i64
  store i64 %1195, i64* %RAX, align 8, !tbaa !2428
  %1196 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1197 = load i32, i32* %EAX
  %1198 = zext i32 %1197 to i64
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 4
  store i64 %1200, i64* %PC
  %1201 = sitofp i32 %1197 to double
  %1202 = bitcast i8* %1196 to double*
  store double %1201, double* %1202, align 1, !tbaa !2452
  %1203 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1204 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1205 = bitcast %union.vec128_t* %XMM1 to i8*
  %1206 = load i64, i64* %PC
  %1207 = add i64 %1206, 4
  store i64 %1207, i64* %PC
  %1208 = bitcast i8* %1204 to double*
  %1209 = load double, double* %1208, align 1
  %1210 = getelementptr inbounds i8, i8* %1204, i64 8
  %1211 = bitcast i8* %1210 to i64*
  %1212 = load i64, i64* %1211, align 1
  %1213 = bitcast i8* %1205 to double*
  %1214 = load double, double* %1213, align 1
  %1215 = fdiv double %1209, %1214
  %1216 = bitcast i8* %1203 to double*
  store double %1215, double* %1216, align 1, !tbaa !2452
  %1217 = getelementptr inbounds i8, i8* %1203, i64 8
  %1218 = bitcast i8* %1217 to i64*
  store i64 %1212, i64* %1218, align 1, !tbaa !2452
  %1219 = load i64, i64* %RBP
  %1220 = add i64 %1219, 32
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 4
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to i64*
  %1224 = load i64, i64* %1223
  store i64 %1224, i64* %RCX, align 8, !tbaa !2428
  %1225 = load i64, i64* %RBP
  %1226 = sub i64 %1225, 84
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 4
  store i64 %1228, i64* %PC
  %1229 = inttoptr i64 %1226 to i32*
  %1230 = load i32, i32* %1229
  %1231 = sext i32 %1230 to i64
  store i64 %1231, i64* %RDX, align 8, !tbaa !2428
  %1232 = load i64, i64* %RDX
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 7
  store i64 %1234, i64* %PC
  %1235 = sext i64 %1232 to i128
  %1236 = and i128 %1235, -18446744073709551616
  %1237 = zext i64 %1232 to i128
  %1238 = or i128 %1236, %1237
  %1239 = mul nsw i128 33800, %1238
  %1240 = trunc i128 %1239 to i64
  store i64 %1240, i64* %RDX, align 8, !tbaa !2428
  %1241 = sext i64 %1240 to i128
  %1242 = icmp ne i128 %1241, %1239
  %1243 = zext i1 %1242 to i8
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1243, i8* %1244, align 1, !tbaa !2432
  %1245 = trunc i128 %1239 to i32
  %1246 = and i32 %1245, 255
  %1247 = call i32 @llvm.ctpop.i32(i32 %1246) #16
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  %1250 = xor i8 %1249, 1
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1250, i8* %1251, align 1, !tbaa !2446
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1252, align 1, !tbaa !2447
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1253, align 1, !tbaa !2448
  %1254 = lshr i64 %1240, 63
  %1255 = trunc i64 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1255, i8* %1256, align 1, !tbaa !2449
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1243, i8* %1257, align 1, !tbaa !2450
  %1258 = load i64, i64* %RCX
  %1259 = load i64, i64* %RDX
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 3
  store i64 %1261, i64* %PC
  %1262 = add i64 %1259, %1258
  store i64 %1262, i64* %RCX, align 8, !tbaa !2428
  %1263 = icmp ult i64 %1262, %1258
  %1264 = icmp ult i64 %1262, %1259
  %1265 = or i1 %1263, %1264
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1266, i8* %1267, align 1, !tbaa !2432
  %1268 = trunc i64 %1262 to i32
  %1269 = and i32 %1268, 255
  %1270 = call i32 @llvm.ctpop.i32(i32 %1269) #16
  %1271 = trunc i32 %1270 to i8
  %1272 = and i8 %1271, 1
  %1273 = xor i8 %1272, 1
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1273, i8* %1274, align 1, !tbaa !2446
  %1275 = xor i64 %1259, %1258
  %1276 = xor i64 %1275, %1262
  %1277 = lshr i64 %1276, 4
  %1278 = trunc i64 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1279, i8* %1280, align 1, !tbaa !2447
  %1281 = icmp eq i64 %1262, 0
  %1282 = zext i1 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1282, i8* %1283, align 1, !tbaa !2448
  %1284 = lshr i64 %1262, 63
  %1285 = trunc i64 %1284 to i8
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1285, i8* %1286, align 1, !tbaa !2449
  %1287 = lshr i64 %1258, 63
  %1288 = lshr i64 %1259, 63
  %1289 = xor i64 %1284, %1287
  %1290 = xor i64 %1284, %1288
  %1291 = add nuw nsw i64 %1289, %1290
  %1292 = icmp eq i64 %1291, 2
  %1293 = zext i1 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1293, i8* %1294, align 1, !tbaa !2450
  %1295 = load i64, i64* %RBP
  %1296 = sub i64 %1295, 88
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 4
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1296 to i32*
  %1300 = load i32, i32* %1299
  %1301 = sext i32 %1300 to i64
  store i64 %1301, i64* %RDX, align 8, !tbaa !2428
  %1302 = load i64, i64* %RDX
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 7
  store i64 %1304, i64* %PC
  %1305 = sext i64 %1302 to i128
  %1306 = and i128 %1305, -18446744073709551616
  %1307 = zext i64 %1302 to i128
  %1308 = or i128 %1306, %1307
  %1309 = mul nsw i128 520, %1308
  %1310 = trunc i128 %1309 to i64
  store i64 %1310, i64* %RDX, align 8, !tbaa !2428
  %1311 = sext i64 %1310 to i128
  %1312 = icmp ne i128 %1311, %1309
  %1313 = zext i1 %1312 to i8
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1313, i8* %1314, align 1, !tbaa !2432
  %1315 = trunc i128 %1309 to i32
  %1316 = and i32 %1315, 255
  %1317 = call i32 @llvm.ctpop.i32(i32 %1316) #16
  %1318 = trunc i32 %1317 to i8
  %1319 = and i8 %1318, 1
  %1320 = xor i8 %1319, 1
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1320, i8* %1321, align 1, !tbaa !2446
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1322, align 1, !tbaa !2447
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1323, align 1, !tbaa !2448
  %1324 = lshr i64 %1310, 63
  %1325 = trunc i64 %1324 to i8
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1325, i8* %1326, align 1, !tbaa !2449
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1313, i8* %1327, align 1, !tbaa !2450
  %1328 = load i64, i64* %RCX
  %1329 = load i64, i64* %RDX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 3
  store i64 %1331, i64* %PC
  %1332 = add i64 %1329, %1328
  store i64 %1332, i64* %RCX, align 8, !tbaa !2428
  %1333 = icmp ult i64 %1332, %1328
  %1334 = icmp ult i64 %1332, %1329
  %1335 = or i1 %1333, %1334
  %1336 = zext i1 %1335 to i8
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1336, i8* %1337, align 1, !tbaa !2432
  %1338 = trunc i64 %1332 to i32
  %1339 = and i32 %1338, 255
  %1340 = call i32 @llvm.ctpop.i32(i32 %1339) #16
  %1341 = trunc i32 %1340 to i8
  %1342 = and i8 %1341, 1
  %1343 = xor i8 %1342, 1
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1343, i8* %1344, align 1, !tbaa !2446
  %1345 = xor i64 %1329, %1328
  %1346 = xor i64 %1345, %1332
  %1347 = lshr i64 %1346, 4
  %1348 = trunc i64 %1347 to i8
  %1349 = and i8 %1348, 1
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1349, i8* %1350, align 1, !tbaa !2447
  %1351 = icmp eq i64 %1332, 0
  %1352 = zext i1 %1351 to i8
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1352, i8* %1353, align 1, !tbaa !2448
  %1354 = lshr i64 %1332, 63
  %1355 = trunc i64 %1354 to i8
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1355, i8* %1356, align 1, !tbaa !2449
  %1357 = lshr i64 %1328, 63
  %1358 = lshr i64 %1329, 63
  %1359 = xor i64 %1354, %1357
  %1360 = xor i64 %1354, %1358
  %1361 = add nuw nsw i64 %1359, %1360
  %1362 = icmp eq i64 %1361, 2
  %1363 = zext i1 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1363, i8* %1364, align 1, !tbaa !2450
  %1365 = load i64, i64* %RBP
  %1366 = sub i64 %1365, 92
  %1367 = load i64, i64* %PC
  %1368 = add i64 %1367, 4
  store i64 %1368, i64* %PC
  %1369 = inttoptr i64 %1366 to i32*
  %1370 = load i32, i32* %1369
  %1371 = sext i32 %1370 to i64
  store i64 %1371, i64* %RDX, align 8, !tbaa !2428
  %1372 = load i64, i64* %RCX
  %1373 = load i64, i64* %RDX
  %1374 = mul i64 %1373, 8
  %1375 = add i64 %1374, %1372
  %1376 = bitcast %union.vec128_t* %XMM2 to i8*
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 5
  store i64 %1378, i64* %PC
  %1379 = bitcast i8* %1376 to double*
  %1380 = load double, double* %1379, align 1
  %1381 = inttoptr i64 %1375 to double*
  store double %1380, double* %1381
  %1382 = load i64, i64* %RBP
  %1383 = sub i64 %1382, 84
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 3
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1383 to i32*
  %1387 = load i32, i32* %1386
  %1388 = zext i32 %1387 to i64
  store i64 %1388, i64* %RAX, align 8, !tbaa !2428
  %1389 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1390 = load i32, i32* %EAX
  %1391 = zext i32 %1390 to i64
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 4
  store i64 %1393, i64* %PC
  %1394 = sitofp i32 %1390 to double
  %1395 = bitcast i8* %1389 to double*
  store double %1394, double* %1395, align 1, !tbaa !2452
  %1396 = load i64, i64* %RBP
  %1397 = sub i64 %1396, 88
  %1398 = load i64, i64* %PC
  %1399 = add i64 %1398, 3
  store i64 %1399, i64* %PC
  %1400 = inttoptr i64 %1397 to i32*
  %1401 = load i32, i32* %1400
  %1402 = zext i32 %1401 to i64
  store i64 %1402, i64* %RAX, align 8, !tbaa !2428
  %1403 = load i64, i64* %RAX
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 3
  store i64 %1405, i64* %PC
  %1406 = trunc i64 %1403 to i32
  %1407 = add i32 5, %1406
  %1408 = zext i32 %1407 to i64
  store i64 %1408, i64* %RAX, align 8, !tbaa !2428
  %1409 = icmp ult i32 %1407, %1406
  %1410 = icmp ult i32 %1407, 5
  %1411 = or i1 %1409, %1410
  %1412 = zext i1 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1412, i8* %1413, align 1, !tbaa !2432
  %1414 = and i32 %1407, 255
  %1415 = call i32 @llvm.ctpop.i32(i32 %1414) #16
  %1416 = trunc i32 %1415 to i8
  %1417 = and i8 %1416, 1
  %1418 = xor i8 %1417, 1
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1418, i8* %1419, align 1, !tbaa !2446
  %1420 = xor i64 5, %1403
  %1421 = trunc i64 %1420 to i32
  %1422 = xor i32 %1421, %1407
  %1423 = lshr i32 %1422, 4
  %1424 = trunc i32 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1425, i8* %1426, align 1, !tbaa !2447
  %1427 = icmp eq i32 %1407, 0
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1428, i8* %1429, align 1, !tbaa !2448
  %1430 = lshr i32 %1407, 31
  %1431 = trunc i32 %1430 to i8
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1431, i8* %1432, align 1, !tbaa !2449
  %1433 = lshr i32 %1406, 31
  %1434 = xor i32 %1430, %1433
  %1435 = add nuw nsw i32 %1434, %1430
  %1436 = icmp eq i32 %1435, 2
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1437, i8* %1438, align 1, !tbaa !2450
  %1439 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1440 = load i32, i32* %EAX
  %1441 = zext i32 %1440 to i64
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = sitofp i32 %1440 to double
  %1445 = bitcast i8* %1439 to double*
  store double %1444, double* %1445, align 1, !tbaa !2452
  %1446 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1447 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1448 = bitcast %union.vec128_t* %XMM2 to i8*
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 4
  store i64 %1450, i64* %PC
  %1451 = bitcast i8* %1447 to double*
  %1452 = load double, double* %1451, align 1
  %1453 = getelementptr inbounds i8, i8* %1447, i64 8
  %1454 = bitcast i8* %1453 to i64*
  %1455 = load i64, i64* %1454, align 1
  %1456 = bitcast i8* %1448 to double*
  %1457 = load double, double* %1456, align 1
  %1458 = fmul double %1452, %1457
  %1459 = bitcast i8* %1446 to double*
  store double %1458, double* %1459, align 1, !tbaa !2452
  %1460 = getelementptr inbounds i8, i8* %1446, i64 8
  %1461 = bitcast i8* %1460 to i64*
  store i64 %1455, i64* %1461, align 1, !tbaa !2452
  %1462 = load i64, i64* %RBP
  %1463 = sub i64 %1462, 92
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 3
  store i64 %1465, i64* %PC
  %1466 = inttoptr i64 %1463 to i32*
  %1467 = load i32, i32* %1466
  %1468 = zext i32 %1467 to i64
  store i64 %1468, i64* %RAX, align 8, !tbaa !2428
  %1469 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1470 = load i32, i32* %EAX
  %1471 = zext i32 %1470 to i64
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 4
  store i64 %1473, i64* %PC
  %1474 = sitofp i32 %1470 to double
  %1475 = bitcast i8* %1469 to double*
  store double %1474, double* %1475, align 1, !tbaa !2452
  %1476 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1477 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1478 = bitcast %union.vec128_t* %XMM2 to i8*
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 4
  store i64 %1480, i64* %PC
  %1481 = bitcast i8* %1477 to double*
  %1482 = load double, double* %1481, align 1
  %1483 = getelementptr inbounds i8, i8* %1477, i64 8
  %1484 = bitcast i8* %1483 to i64*
  %1485 = load i64, i64* %1484, align 1
  %1486 = bitcast i8* %1478 to double*
  %1487 = load double, double* %1486, align 1
  %1488 = fadd double %1482, %1487
  %1489 = bitcast i8* %1476 to double*
  store double %1488, double* %1489, align 1, !tbaa !2452
  %1490 = getelementptr inbounds i8, i8* %1476, i64 8
  %1491 = bitcast i8* %1490 to i64*
  store i64 %1485, i64* %1491, align 1, !tbaa !2452
  %1492 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1493 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1494 = bitcast %union.vec128_t* %XMM0 to i8*
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 4
  store i64 %1496, i64* %PC
  %1497 = bitcast i8* %1493 to double*
  %1498 = load double, double* %1497, align 1
  %1499 = getelementptr inbounds i8, i8* %1493, i64 8
  %1500 = bitcast i8* %1499 to i64*
  %1501 = load i64, i64* %1500, align 1
  %1502 = bitcast i8* %1494 to double*
  %1503 = load double, double* %1502, align 1
  %1504 = fadd double %1498, %1503
  %1505 = bitcast i8* %1492 to double*
  store double %1504, double* %1505, align 1, !tbaa !2452
  %1506 = getelementptr inbounds i8, i8* %1492, i64 8
  %1507 = bitcast i8* %1506 to i64*
  store i64 %1501, i64* %1507, align 1, !tbaa !2452
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 44
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 3
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i32*
  %1513 = load i32, i32* %1512
  %1514 = zext i32 %1513 to i64
  store i64 %1514, i64* %RAX, align 8, !tbaa !2428
  %1515 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1516 = load i32, i32* %EAX
  %1517 = zext i32 %1516 to i64
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 4
  store i64 %1519, i64* %PC
  %1520 = sitofp i32 %1516 to double
  %1521 = bitcast i8* %1515 to double*
  store double %1520, double* %1521, align 1, !tbaa !2452
  %1522 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1523 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1524 = bitcast %union.vec128_t* %XMM0 to i8*
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 4
  store i64 %1526, i64* %PC
  %1527 = bitcast i8* %1523 to double*
  %1528 = load double, double* %1527, align 1
  %1529 = getelementptr inbounds i8, i8* %1523, i64 8
  %1530 = bitcast i8* %1529 to i64*
  %1531 = load i64, i64* %1530, align 1
  %1532 = bitcast i8* %1524 to double*
  %1533 = load double, double* %1532, align 1
  %1534 = fdiv double %1528, %1533
  %1535 = bitcast i8* %1522 to double*
  store double %1534, double* %1535, align 1, !tbaa !2452
  %1536 = getelementptr inbounds i8, i8* %1522, i64 8
  %1537 = bitcast i8* %1536 to i64*
  store i64 %1531, i64* %1537, align 1, !tbaa !2452
  %1538 = load i64, i64* %RBP
  %1539 = add i64 %1538, 40
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 4
  store i64 %1541, i64* %PC
  %1542 = inttoptr i64 %1539 to i64*
  %1543 = load i64, i64* %1542
  store i64 %1543, i64* %RCX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RBP
  %1545 = sub i64 %1544, 84
  %1546 = load i64, i64* %PC
  %1547 = add i64 %1546, 4
  store i64 %1547, i64* %PC
  %1548 = inttoptr i64 %1545 to i32*
  %1549 = load i32, i32* %1548
  %1550 = sext i32 %1549 to i64
  store i64 %1550, i64* %RDX, align 8, !tbaa !2428
  %1551 = load i64, i64* %RDX
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 7
  store i64 %1553, i64* %PC
  %1554 = sext i64 %1551 to i128
  %1555 = and i128 %1554, -18446744073709551616
  %1556 = zext i64 %1551 to i128
  %1557 = or i128 %1555, %1556
  %1558 = mul nsw i128 33800, %1557
  %1559 = trunc i128 %1558 to i64
  store i64 %1559, i64* %RDX, align 8, !tbaa !2428
  %1560 = sext i64 %1559 to i128
  %1561 = icmp ne i128 %1560, %1558
  %1562 = zext i1 %1561 to i8
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1562, i8* %1563, align 1, !tbaa !2432
  %1564 = trunc i128 %1558 to i32
  %1565 = and i32 %1564, 255
  %1566 = call i32 @llvm.ctpop.i32(i32 %1565) #16
  %1567 = trunc i32 %1566 to i8
  %1568 = and i8 %1567, 1
  %1569 = xor i8 %1568, 1
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1569, i8* %1570, align 1, !tbaa !2446
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1571, align 1, !tbaa !2447
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1572, align 1, !tbaa !2448
  %1573 = lshr i64 %1559, 63
  %1574 = trunc i64 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1574, i8* %1575, align 1, !tbaa !2449
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1562, i8* %1576, align 1, !tbaa !2450
  %1577 = load i64, i64* %RCX
  %1578 = load i64, i64* %RDX
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 3
  store i64 %1580, i64* %PC
  %1581 = add i64 %1578, %1577
  store i64 %1581, i64* %RCX, align 8, !tbaa !2428
  %1582 = icmp ult i64 %1581, %1577
  %1583 = icmp ult i64 %1581, %1578
  %1584 = or i1 %1582, %1583
  %1585 = zext i1 %1584 to i8
  %1586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1585, i8* %1586, align 1, !tbaa !2432
  %1587 = trunc i64 %1581 to i32
  %1588 = and i32 %1587, 255
  %1589 = call i32 @llvm.ctpop.i32(i32 %1588) #16
  %1590 = trunc i32 %1589 to i8
  %1591 = and i8 %1590, 1
  %1592 = xor i8 %1591, 1
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1592, i8* %1593, align 1, !tbaa !2446
  %1594 = xor i64 %1578, %1577
  %1595 = xor i64 %1594, %1581
  %1596 = lshr i64 %1595, 4
  %1597 = trunc i64 %1596 to i8
  %1598 = and i8 %1597, 1
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1598, i8* %1599, align 1, !tbaa !2447
  %1600 = icmp eq i64 %1581, 0
  %1601 = zext i1 %1600 to i8
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1601, i8* %1602, align 1, !tbaa !2448
  %1603 = lshr i64 %1581, 63
  %1604 = trunc i64 %1603 to i8
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1604, i8* %1605, align 1, !tbaa !2449
  %1606 = lshr i64 %1577, 63
  %1607 = lshr i64 %1578, 63
  %1608 = xor i64 %1603, %1606
  %1609 = xor i64 %1603, %1607
  %1610 = add nuw nsw i64 %1608, %1609
  %1611 = icmp eq i64 %1610, 2
  %1612 = zext i1 %1611 to i8
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1612, i8* %1613, align 1, !tbaa !2450
  %1614 = load i64, i64* %RBP
  %1615 = sub i64 %1614, 88
  %1616 = load i64, i64* %PC
  %1617 = add i64 %1616, 4
  store i64 %1617, i64* %PC
  %1618 = inttoptr i64 %1615 to i32*
  %1619 = load i32, i32* %1618
  %1620 = sext i32 %1619 to i64
  store i64 %1620, i64* %RDX, align 8, !tbaa !2428
  %1621 = load i64, i64* %RDX
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 7
  store i64 %1623, i64* %PC
  %1624 = sext i64 %1621 to i128
  %1625 = and i128 %1624, -18446744073709551616
  %1626 = zext i64 %1621 to i128
  %1627 = or i128 %1625, %1626
  %1628 = mul nsw i128 520, %1627
  %1629 = trunc i128 %1628 to i64
  store i64 %1629, i64* %RDX, align 8, !tbaa !2428
  %1630 = sext i64 %1629 to i128
  %1631 = icmp ne i128 %1630, %1628
  %1632 = zext i1 %1631 to i8
  %1633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1632, i8* %1633, align 1, !tbaa !2432
  %1634 = trunc i128 %1628 to i32
  %1635 = and i32 %1634, 255
  %1636 = call i32 @llvm.ctpop.i32(i32 %1635) #16
  %1637 = trunc i32 %1636 to i8
  %1638 = and i8 %1637, 1
  %1639 = xor i8 %1638, 1
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1639, i8* %1640, align 1, !tbaa !2446
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1641, align 1, !tbaa !2447
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1642, align 1, !tbaa !2448
  %1643 = lshr i64 %1629, 63
  %1644 = trunc i64 %1643 to i8
  %1645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1644, i8* %1645, align 1, !tbaa !2449
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1632, i8* %1646, align 1, !tbaa !2450
  %1647 = load i64, i64* %RCX
  %1648 = load i64, i64* %RDX
  %1649 = load i64, i64* %PC
  %1650 = add i64 %1649, 3
  store i64 %1650, i64* %PC
  %1651 = add i64 %1648, %1647
  store i64 %1651, i64* %RCX, align 8, !tbaa !2428
  %1652 = icmp ult i64 %1651, %1647
  %1653 = icmp ult i64 %1651, %1648
  %1654 = or i1 %1652, %1653
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1655, i8* %1656, align 1, !tbaa !2432
  %1657 = trunc i64 %1651 to i32
  %1658 = and i32 %1657, 255
  %1659 = call i32 @llvm.ctpop.i32(i32 %1658) #16
  %1660 = trunc i32 %1659 to i8
  %1661 = and i8 %1660, 1
  %1662 = xor i8 %1661, 1
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1662, i8* %1663, align 1, !tbaa !2446
  %1664 = xor i64 %1648, %1647
  %1665 = xor i64 %1664, %1651
  %1666 = lshr i64 %1665, 4
  %1667 = trunc i64 %1666 to i8
  %1668 = and i8 %1667, 1
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1668, i8* %1669, align 1, !tbaa !2447
  %1670 = icmp eq i64 %1651, 0
  %1671 = zext i1 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1671, i8* %1672, align 1, !tbaa !2448
  %1673 = lshr i64 %1651, 63
  %1674 = trunc i64 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1674, i8* %1675, align 1, !tbaa !2449
  %1676 = lshr i64 %1647, 63
  %1677 = lshr i64 %1648, 63
  %1678 = xor i64 %1673, %1676
  %1679 = xor i64 %1673, %1677
  %1680 = add nuw nsw i64 %1678, %1679
  %1681 = icmp eq i64 %1680, 2
  %1682 = zext i1 %1681 to i8
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1682, i8* %1683, align 1, !tbaa !2450
  %1684 = load i64, i64* %RBP
  %1685 = sub i64 %1684, 92
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 4
  store i64 %1687, i64* %PC
  %1688 = inttoptr i64 %1685 to i32*
  %1689 = load i32, i32* %1688
  %1690 = sext i32 %1689 to i64
  store i64 %1690, i64* %RDX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RCX
  %1692 = load i64, i64* %RDX
  %1693 = mul i64 %1692, 8
  %1694 = add i64 %1693, %1691
  %1695 = bitcast %union.vec128_t* %XMM1 to i8*
  %1696 = load i64, i64* %PC
  %1697 = add i64 %1696, 5
  store i64 %1697, i64* %PC
  %1698 = bitcast i8* %1695 to double*
  %1699 = load double, double* %1698, align 1
  %1700 = inttoptr i64 %1694 to double*
  store double %1699, double* %1700
  %1701 = load i64, i64* %RBP
  %1702 = sub i64 %1701, 92
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 3
  store i64 %1704, i64* %PC
  %1705 = inttoptr i64 %1702 to i32*
  %1706 = load i32, i32* %1705
  %1707 = zext i32 %1706 to i64
  store i64 %1707, i64* %RAX, align 8, !tbaa !2428
  %1708 = load i64, i64* %RAX
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 3
  store i64 %1710, i64* %PC
  %1711 = trunc i64 %1708 to i32
  %1712 = add i32 1, %1711
  %1713 = zext i32 %1712 to i64
  store i64 %1713, i64* %RAX, align 8, !tbaa !2428
  %1714 = icmp ult i32 %1712, %1711
  %1715 = icmp ult i32 %1712, 1
  %1716 = or i1 %1714, %1715
  %1717 = zext i1 %1716 to i8
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1717, i8* %1718, align 1, !tbaa !2432
  %1719 = and i32 %1712, 255
  %1720 = call i32 @llvm.ctpop.i32(i32 %1719) #16
  %1721 = trunc i32 %1720 to i8
  %1722 = and i8 %1721, 1
  %1723 = xor i8 %1722, 1
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1723, i8* %1724, align 1, !tbaa !2446
  %1725 = xor i64 1, %1708
  %1726 = trunc i64 %1725 to i32
  %1727 = xor i32 %1726, %1712
  %1728 = lshr i32 %1727, 4
  %1729 = trunc i32 %1728 to i8
  %1730 = and i8 %1729, 1
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1730, i8* %1731, align 1, !tbaa !2447
  %1732 = icmp eq i32 %1712, 0
  %1733 = zext i1 %1732 to i8
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1733, i8* %1734, align 1, !tbaa !2448
  %1735 = lshr i32 %1712, 31
  %1736 = trunc i32 %1735 to i8
  %1737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1736, i8* %1737, align 1, !tbaa !2449
  %1738 = lshr i32 %1711, 31
  %1739 = xor i32 %1735, %1738
  %1740 = add nuw nsw i32 %1739, %1735
  %1741 = icmp eq i32 %1740, 2
  %1742 = zext i1 %1741 to i8
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1742, i8* %1743, align 1, !tbaa !2450
  %1744 = load i64, i64* %RBP
  %1745 = sub i64 %1744, 92
  %1746 = load i32, i32* %EAX
  %1747 = zext i32 %1746 to i64
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 3
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1745 to i32*
  store i32 %1746, i32* %1750
  %1751 = load i64, i64* %PC
  %1752 = sub i64 %1751, 309
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 5
  store i64 %1754, i64* %PC
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1752, i64* %1755, align 8, !tbaa !2428
  br label %block_401255

block_4011c0:                                     ; preds = %block_4011b4
  %1756 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 8
  store i64 %1758, i64* %PC
  %1759 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 24) to double*)
  %1760 = bitcast i8* %1756 to double*
  store double %1759, double* %1760, align 1, !tbaa !2452
  %1761 = getelementptr inbounds i8, i8* %1756, i64 8
  %1762 = bitcast i8* %1761 to double*
  store double 0.000000e+00, double* %1762, align 1, !tbaa !2452
  %1763 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 8
  store i64 %1765, i64* %PC
  %1766 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 32) to double*)
  %1767 = bitcast i8* %1763 to double*
  store double %1766, double* %1767, align 1, !tbaa !2452
  %1768 = getelementptr inbounds i8, i8* %1763, i64 8
  %1769 = bitcast i8* %1768 to double*
  store double 0.000000e+00, double* %1769, align 1, !tbaa !2452
  %1770 = load i64, i64* %RBP
  %1771 = sub i64 %1770, 84
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 3
  store i64 %1773, i64* %PC
  %1774 = inttoptr i64 %1771 to i32*
  %1775 = load i32, i32* %1774
  %1776 = zext i32 %1775 to i64
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1778 = load i32, i32* %EAX
  %1779 = zext i32 %1778 to i64
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 4
  store i64 %1781, i64* %PC
  %1782 = sitofp i32 %1778 to double
  %1783 = bitcast i8* %1777 to double*
  store double %1782, double* %1783, align 1, !tbaa !2452
  %1784 = load i64, i64* %RBP
  %1785 = sub i64 %1784, 88
  %1786 = load i64, i64* %PC
  %1787 = add i64 %1786, 3
  store i64 %1787, i64* %PC
  %1788 = inttoptr i64 %1785 to i32*
  %1789 = load i32, i32* %1788
  %1790 = zext i32 %1789 to i64
  store i64 %1790, i64* %RAX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RAX
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 3
  store i64 %1793, i64* %PC
  %1794 = trunc i64 %1791 to i32
  %1795 = add i32 1, %1794
  %1796 = zext i32 %1795 to i64
  store i64 %1796, i64* %RAX, align 8, !tbaa !2428
  %1797 = icmp ult i32 %1795, %1794
  %1798 = icmp ult i32 %1795, 1
  %1799 = or i1 %1797, %1798
  %1800 = zext i1 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1800, i8* %1801, align 1, !tbaa !2432
  %1802 = and i32 %1795, 255
  %1803 = call i32 @llvm.ctpop.i32(i32 %1802) #16
  %1804 = trunc i32 %1803 to i8
  %1805 = and i8 %1804, 1
  %1806 = xor i8 %1805, 1
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1806, i8* %1807, align 1, !tbaa !2446
  %1808 = xor i64 1, %1791
  %1809 = trunc i64 %1808 to i32
  %1810 = xor i32 %1809, %1795
  %1811 = lshr i32 %1810, 4
  %1812 = trunc i32 %1811 to i8
  %1813 = and i8 %1812, 1
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1813, i8* %1814, align 1, !tbaa !2447
  %1815 = icmp eq i32 %1795, 0
  %1816 = zext i1 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1816, i8* %1817, align 1, !tbaa !2448
  %1818 = lshr i32 %1795, 31
  %1819 = trunc i32 %1818 to i8
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1819, i8* %1820, align 1, !tbaa !2449
  %1821 = lshr i32 %1794, 31
  %1822 = xor i32 %1818, %1821
  %1823 = add nuw nsw i32 %1822, %1818
  %1824 = icmp eq i32 %1823, 2
  %1825 = zext i1 %1824 to i8
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1825, i8* %1826, align 1, !tbaa !2450
  %1827 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1828 = load i32, i32* %EAX
  %1829 = zext i32 %1828 to i64
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 4
  store i64 %1831, i64* %PC
  %1832 = sitofp i32 %1828 to double
  %1833 = bitcast i8* %1827 to double*
  store double %1832, double* %1833, align 1, !tbaa !2452
  %1834 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1835 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1836 = bitcast %union.vec128_t* %XMM3 to i8*
  %1837 = load i64, i64* %PC
  %1838 = add i64 %1837, 4
  store i64 %1838, i64* %PC
  %1839 = bitcast i8* %1835 to double*
  %1840 = load double, double* %1839, align 1
  %1841 = getelementptr inbounds i8, i8* %1835, i64 8
  %1842 = bitcast i8* %1841 to i64*
  %1843 = load i64, i64* %1842, align 1
  %1844 = bitcast i8* %1836 to double*
  %1845 = load double, double* %1844, align 1
  %1846 = fmul double %1840, %1845
  %1847 = bitcast i8* %1834 to double*
  store double %1846, double* %1847, align 1, !tbaa !2452
  %1848 = getelementptr inbounds i8, i8* %1834, i64 8
  %1849 = bitcast i8* %1848 to i64*
  store i64 %1843, i64* %1849, align 1, !tbaa !2452
  %1850 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1851 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1852 = bitcast %union.vec128_t* %XMM1 to i8*
  %1853 = load i64, i64* %PC
  %1854 = add i64 %1853, 4
  store i64 %1854, i64* %PC
  %1855 = bitcast i8* %1851 to double*
  %1856 = load double, double* %1855, align 1
  %1857 = getelementptr inbounds i8, i8* %1851, i64 8
  %1858 = bitcast i8* %1857 to i64*
  %1859 = load i64, i64* %1858, align 1
  %1860 = bitcast i8* %1852 to double*
  %1861 = load double, double* %1860, align 1
  %1862 = fadd double %1856, %1861
  %1863 = bitcast i8* %1850 to double*
  store double %1862, double* %1863, align 1, !tbaa !2452
  %1864 = getelementptr inbounds i8, i8* %1850, i64 8
  %1865 = bitcast i8* %1864 to i64*
  store i64 %1859, i64* %1865, align 1, !tbaa !2452
  %1866 = load i64, i64* %RBP
  %1867 = sub i64 %1866, 52
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 3
  store i64 %1869, i64* %PC
  %1870 = inttoptr i64 %1867 to i32*
  %1871 = load i32, i32* %1870
  %1872 = zext i32 %1871 to i64
  store i64 %1872, i64* %RAX, align 8, !tbaa !2428
  %1873 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1874 = load i32, i32* %EAX
  %1875 = zext i32 %1874 to i64
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 4
  store i64 %1877, i64* %PC
  %1878 = sitofp i32 %1874 to double
  %1879 = bitcast i8* %1873 to double*
  store double %1878, double* %1879, align 1, !tbaa !2452
  %1880 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1881 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1882 = bitcast %union.vec128_t* %XMM1 to i8*
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 4
  store i64 %1884, i64* %PC
  %1885 = bitcast i8* %1881 to double*
  %1886 = load double, double* %1885, align 1
  %1887 = getelementptr inbounds i8, i8* %1881, i64 8
  %1888 = bitcast i8* %1887 to i64*
  %1889 = load i64, i64* %1888, align 1
  %1890 = bitcast i8* %1882 to double*
  %1891 = load double, double* %1890, align 1
  %1892 = fdiv double %1886, %1891
  %1893 = bitcast i8* %1880 to double*
  store double %1892, double* %1893, align 1, !tbaa !2452
  %1894 = getelementptr inbounds i8, i8* %1880, i64 8
  %1895 = bitcast i8* %1894 to i64*
  store i64 %1889, i64* %1895, align 1, !tbaa !2452
  %1896 = load i64, i64* %RBP
  %1897 = add i64 %1896, 16
  %1898 = load i64, i64* %PC
  %1899 = add i64 %1898, 4
  store i64 %1899, i64* %PC
  %1900 = inttoptr i64 %1897 to i64*
  %1901 = load i64, i64* %1900
  store i64 %1901, i64* %RCX, align 8, !tbaa !2428
  %1902 = load i64, i64* %RBP
  %1903 = sub i64 %1902, 84
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 4
  store i64 %1905, i64* %PC
  %1906 = inttoptr i64 %1903 to i32*
  %1907 = load i32, i32* %1906
  %1908 = sext i32 %1907 to i64
  store i64 %1908, i64* %RDX, align 8, !tbaa !2428
  %1909 = load i64, i64* %RDX
  %1910 = load i64, i64* %PC
  %1911 = add i64 %1910, 7
  store i64 %1911, i64* %PC
  %1912 = sext i64 %1909 to i128
  %1913 = and i128 %1912, -18446744073709551616
  %1914 = zext i64 %1909 to i128
  %1915 = or i128 %1913, %1914
  %1916 = mul nsw i128 520, %1915
  %1917 = trunc i128 %1916 to i64
  store i64 %1917, i64* %RDX, align 8, !tbaa !2428
  %1918 = sext i64 %1917 to i128
  %1919 = icmp ne i128 %1918, %1916
  %1920 = zext i1 %1919 to i8
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1920, i8* %1921, align 1, !tbaa !2432
  %1922 = trunc i128 %1916 to i32
  %1923 = and i32 %1922, 255
  %1924 = call i32 @llvm.ctpop.i32(i32 %1923) #16
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1927, i8* %1928, align 1, !tbaa !2446
  %1929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1929, align 1, !tbaa !2447
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1930, align 1, !tbaa !2448
  %1931 = lshr i64 %1917, 63
  %1932 = trunc i64 %1931 to i8
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1932, i8* %1933, align 1, !tbaa !2449
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1920, i8* %1934, align 1, !tbaa !2450
  %1935 = load i64, i64* %RCX
  %1936 = load i64, i64* %RDX
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 3
  store i64 %1938, i64* %PC
  %1939 = add i64 %1936, %1935
  store i64 %1939, i64* %RCX, align 8, !tbaa !2428
  %1940 = icmp ult i64 %1939, %1935
  %1941 = icmp ult i64 %1939, %1936
  %1942 = or i1 %1940, %1941
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1943, i8* %1944, align 1, !tbaa !2432
  %1945 = trunc i64 %1939 to i32
  %1946 = and i32 %1945, 255
  %1947 = call i32 @llvm.ctpop.i32(i32 %1946) #16
  %1948 = trunc i32 %1947 to i8
  %1949 = and i8 %1948, 1
  %1950 = xor i8 %1949, 1
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1950, i8* %1951, align 1, !tbaa !2446
  %1952 = xor i64 %1936, %1935
  %1953 = xor i64 %1952, %1939
  %1954 = lshr i64 %1953, 4
  %1955 = trunc i64 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1956, i8* %1957, align 1, !tbaa !2447
  %1958 = icmp eq i64 %1939, 0
  %1959 = zext i1 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1959, i8* %1960, align 1, !tbaa !2448
  %1961 = lshr i64 %1939, 63
  %1962 = trunc i64 %1961 to i8
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1962, i8* %1963, align 1, !tbaa !2449
  %1964 = lshr i64 %1935, 63
  %1965 = lshr i64 %1936, 63
  %1966 = xor i64 %1961, %1964
  %1967 = xor i64 %1961, %1965
  %1968 = add nuw nsw i64 %1966, %1967
  %1969 = icmp eq i64 %1968, 2
  %1970 = zext i1 %1969 to i8
  %1971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1970, i8* %1971, align 1, !tbaa !2450
  %1972 = load i64, i64* %RBP
  %1973 = sub i64 %1972, 88
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 4
  store i64 %1975, i64* %PC
  %1976 = inttoptr i64 %1973 to i32*
  %1977 = load i32, i32* %1976
  %1978 = sext i32 %1977 to i64
  store i64 %1978, i64* %RDX, align 8, !tbaa !2428
  %1979 = load i64, i64* %RCX
  %1980 = load i64, i64* %RDX
  %1981 = mul i64 %1980, 8
  %1982 = add i64 %1981, %1979
  %1983 = bitcast %union.vec128_t* %XMM2 to i8*
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  store i64 %1985, i64* %PC
  %1986 = bitcast i8* %1983 to double*
  %1987 = load double, double* %1986, align 1
  %1988 = inttoptr i64 %1982 to double*
  store double %1987, double* %1988
  %1989 = load i64, i64* %RBP
  %1990 = sub i64 %1989, 84
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 3
  store i64 %1992, i64* %PC
  %1993 = inttoptr i64 %1990 to i32*
  %1994 = load i32, i32* %1993
  %1995 = zext i32 %1994 to i64
  store i64 %1995, i64* %RAX, align 8, !tbaa !2428
  %1996 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1997 = load i32, i32* %EAX
  %1998 = zext i32 %1997 to i64
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 4
  store i64 %2000, i64* %PC
  %2001 = sitofp i32 %1997 to double
  %2002 = bitcast i8* %1996 to double*
  store double %2001, double* %2002, align 1, !tbaa !2452
  %2003 = load i64, i64* %RBP
  %2004 = sub i64 %2003, 88
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 3
  store i64 %2006, i64* %PC
  %2007 = inttoptr i64 %2004 to i32*
  %2008 = load i32, i32* %2007
  %2009 = zext i32 %2008 to i64
  store i64 %2009, i64* %RAX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RAX
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 3
  store i64 %2012, i64* %PC
  %2013 = trunc i64 %2010 to i32
  %2014 = add i32 2, %2013
  %2015 = zext i32 %2014 to i64
  store i64 %2015, i64* %RAX, align 8, !tbaa !2428
  %2016 = icmp ult i32 %2014, %2013
  %2017 = icmp ult i32 %2014, 2
  %2018 = or i1 %2016, %2017
  %2019 = zext i1 %2018 to i8
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2019, i8* %2020, align 1, !tbaa !2432
  %2021 = and i32 %2014, 255
  %2022 = call i32 @llvm.ctpop.i32(i32 %2021) #16
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2025, i8* %2026, align 1, !tbaa !2446
  %2027 = xor i64 2, %2010
  %2028 = trunc i64 %2027 to i32
  %2029 = xor i32 %2028, %2014
  %2030 = lshr i32 %2029, 4
  %2031 = trunc i32 %2030 to i8
  %2032 = and i8 %2031, 1
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2032, i8* %2033, align 1, !tbaa !2447
  %2034 = icmp eq i32 %2014, 0
  %2035 = zext i1 %2034 to i8
  %2036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2035, i8* %2036, align 1, !tbaa !2448
  %2037 = lshr i32 %2014, 31
  %2038 = trunc i32 %2037 to i8
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2038, i8* %2039, align 1, !tbaa !2449
  %2040 = lshr i32 %2013, 31
  %2041 = xor i32 %2037, %2040
  %2042 = add nuw nsw i32 %2041, %2037
  %2043 = icmp eq i32 %2042, 2
  %2044 = zext i1 %2043 to i8
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2044, i8* %2045, align 1, !tbaa !2450
  %2046 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2047 = load i32, i32* %EAX
  %2048 = zext i32 %2047 to i64
  %2049 = load i64, i64* %PC
  %2050 = add i64 %2049, 4
  store i64 %2050, i64* %PC
  %2051 = sitofp i32 %2047 to double
  %2052 = bitcast i8* %2046 to double*
  store double %2051, double* %2052, align 1, !tbaa !2452
  %2053 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2054 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2055 = bitcast %union.vec128_t* %XMM2 to i8*
  %2056 = load i64, i64* %PC
  %2057 = add i64 %2056, 4
  store i64 %2057, i64* %PC
  %2058 = bitcast i8* %2054 to double*
  %2059 = load double, double* %2058, align 1
  %2060 = getelementptr inbounds i8, i8* %2054, i64 8
  %2061 = bitcast i8* %2060 to i64*
  %2062 = load i64, i64* %2061, align 1
  %2063 = bitcast i8* %2055 to double*
  %2064 = load double, double* %2063, align 1
  %2065 = fmul double %2059, %2064
  %2066 = bitcast i8* %2053 to double*
  store double %2065, double* %2066, align 1, !tbaa !2452
  %2067 = getelementptr inbounds i8, i8* %2053, i64 8
  %2068 = bitcast i8* %2067 to i64*
  store i64 %2062, i64* %2068, align 1, !tbaa !2452
  %2069 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2070 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2071 = bitcast %union.vec128_t* %XMM0 to i8*
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 4
  store i64 %2073, i64* %PC
  %2074 = bitcast i8* %2070 to double*
  %2075 = load double, double* %2074, align 1
  %2076 = getelementptr inbounds i8, i8* %2070, i64 8
  %2077 = bitcast i8* %2076 to i64*
  %2078 = load i64, i64* %2077, align 1
  %2079 = bitcast i8* %2071 to double*
  %2080 = load double, double* %2079, align 1
  %2081 = fadd double %2075, %2080
  %2082 = bitcast i8* %2069 to double*
  store double %2081, double* %2082, align 1, !tbaa !2452
  %2083 = getelementptr inbounds i8, i8* %2069, i64 8
  %2084 = bitcast i8* %2083 to i64*
  store i64 %2078, i64* %2084, align 1, !tbaa !2452
  %2085 = load i64, i64* %RBP
  %2086 = sub i64 %2085, 52
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 3
  store i64 %2088, i64* %PC
  %2089 = inttoptr i64 %2086 to i32*
  %2090 = load i32, i32* %2089
  %2091 = zext i32 %2090 to i64
  store i64 %2091, i64* %RAX, align 8, !tbaa !2428
  %2092 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2093 = load i32, i32* %EAX
  %2094 = zext i32 %2093 to i64
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 4
  store i64 %2096, i64* %PC
  %2097 = sitofp i32 %2093 to double
  %2098 = bitcast i8* %2092 to double*
  store double %2097, double* %2098, align 1, !tbaa !2452
  %2099 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2100 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2101 = bitcast %union.vec128_t* %XMM0 to i8*
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 4
  store i64 %2103, i64* %PC
  %2104 = bitcast i8* %2100 to double*
  %2105 = load double, double* %2104, align 1
  %2106 = getelementptr inbounds i8, i8* %2100, i64 8
  %2107 = bitcast i8* %2106 to i64*
  %2108 = load i64, i64* %2107, align 1
  %2109 = bitcast i8* %2101 to double*
  %2110 = load double, double* %2109, align 1
  %2111 = fdiv double %2105, %2110
  %2112 = bitcast i8* %2099 to double*
  store double %2111, double* %2112, align 1, !tbaa !2452
  %2113 = getelementptr inbounds i8, i8* %2099, i64 8
  %2114 = bitcast i8* %2113 to i64*
  store i64 %2108, i64* %2114, align 1, !tbaa !2452
  %2115 = load i64, i64* %RBP
  %2116 = sub i64 %2115, 80
  %2117 = load i64, i64* %PC
  %2118 = add i64 %2117, 4
  store i64 %2118, i64* %PC
  %2119 = inttoptr i64 %2116 to i64*
  %2120 = load i64, i64* %2119
  store i64 %2120, i64* %RCX, align 8, !tbaa !2428
  %2121 = load i64, i64* %RBP
  %2122 = sub i64 %2121, 84
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 4
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2122 to i32*
  %2126 = load i32, i32* %2125
  %2127 = sext i32 %2126 to i64
  store i64 %2127, i64* %RDX, align 8, !tbaa !2428
  %2128 = load i64, i64* %RDX
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 7
  store i64 %2130, i64* %PC
  %2131 = sext i64 %2128 to i128
  %2132 = and i128 %2131, -18446744073709551616
  %2133 = zext i64 %2128 to i128
  %2134 = or i128 %2132, %2133
  %2135 = mul nsw i128 520, %2134
  %2136 = trunc i128 %2135 to i64
  store i64 %2136, i64* %RDX, align 8, !tbaa !2428
  %2137 = sext i64 %2136 to i128
  %2138 = icmp ne i128 %2137, %2135
  %2139 = zext i1 %2138 to i8
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2139, i8* %2140, align 1, !tbaa !2432
  %2141 = trunc i128 %2135 to i32
  %2142 = and i32 %2141, 255
  %2143 = call i32 @llvm.ctpop.i32(i32 %2142) #16
  %2144 = trunc i32 %2143 to i8
  %2145 = and i8 %2144, 1
  %2146 = xor i8 %2145, 1
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2146, i8* %2147, align 1, !tbaa !2446
  %2148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2148, align 1, !tbaa !2447
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2149, align 1, !tbaa !2448
  %2150 = lshr i64 %2136, 63
  %2151 = trunc i64 %2150 to i8
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2151, i8* %2152, align 1, !tbaa !2449
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2139, i8* %2153, align 1, !tbaa !2450
  %2154 = load i64, i64* %RCX
  %2155 = load i64, i64* %RDX
  %2156 = load i64, i64* %PC
  %2157 = add i64 %2156, 3
  store i64 %2157, i64* %PC
  %2158 = add i64 %2155, %2154
  store i64 %2158, i64* %RCX, align 8, !tbaa !2428
  %2159 = icmp ult i64 %2158, %2154
  %2160 = icmp ult i64 %2158, %2155
  %2161 = or i1 %2159, %2160
  %2162 = zext i1 %2161 to i8
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2162, i8* %2163, align 1, !tbaa !2432
  %2164 = trunc i64 %2158 to i32
  %2165 = and i32 %2164, 255
  %2166 = call i32 @llvm.ctpop.i32(i32 %2165) #16
  %2167 = trunc i32 %2166 to i8
  %2168 = and i8 %2167, 1
  %2169 = xor i8 %2168, 1
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2169, i8* %2170, align 1, !tbaa !2446
  %2171 = xor i64 %2155, %2154
  %2172 = xor i64 %2171, %2158
  %2173 = lshr i64 %2172, 4
  %2174 = trunc i64 %2173 to i8
  %2175 = and i8 %2174, 1
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2175, i8* %2176, align 1, !tbaa !2447
  %2177 = icmp eq i64 %2158, 0
  %2178 = zext i1 %2177 to i8
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2178, i8* %2179, align 1, !tbaa !2448
  %2180 = lshr i64 %2158, 63
  %2181 = trunc i64 %2180 to i8
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2181, i8* %2182, align 1, !tbaa !2449
  %2183 = lshr i64 %2154, 63
  %2184 = lshr i64 %2155, 63
  %2185 = xor i64 %2180, %2183
  %2186 = xor i64 %2180, %2184
  %2187 = add nuw nsw i64 %2185, %2186
  %2188 = icmp eq i64 %2187, 2
  %2189 = zext i1 %2188 to i8
  %2190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2189, i8* %2190, align 1, !tbaa !2450
  %2191 = load i64, i64* %RBP
  %2192 = sub i64 %2191, 88
  %2193 = load i64, i64* %PC
  %2194 = add i64 %2193, 4
  store i64 %2194, i64* %PC
  %2195 = inttoptr i64 %2192 to i32*
  %2196 = load i32, i32* %2195
  %2197 = sext i32 %2196 to i64
  store i64 %2197, i64* %RDX, align 8, !tbaa !2428
  %2198 = load i64, i64* %RCX
  %2199 = load i64, i64* %RDX
  %2200 = mul i64 %2199, 8
  %2201 = add i64 %2200, %2198
  %2202 = bitcast %union.vec128_t* %XMM1 to i8*
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 5
  store i64 %2204, i64* %PC
  %2205 = bitcast i8* %2202 to double*
  %2206 = load double, double* %2205, align 1
  %2207 = inttoptr i64 %2201 to double*
  store double %2206, double* %2207
  %2208 = load i64, i64* %RBP
  %2209 = sub i64 %2208, 92
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 7
  store i64 %2211, i64* %PC
  %2212 = inttoptr i64 %2209 to i32*
  store i32 0, i32* %2212
  br label %block_401255

block_401136:                                     ; preds = %block_40112a
  %2213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 8
  store i64 %2215, i64* %PC
  %2216 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 64) to double*)
  %2217 = bitcast i8* %2213 to double*
  store double %2216, double* %2217, align 1, !tbaa !2452
  %2218 = getelementptr inbounds i8, i8* %2213, i64 8
  %2219 = bitcast i8* %2218 to double*
  store double 0.000000e+00, double* %2219, align 1, !tbaa !2452
  %2220 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 8
  store i64 %2222, i64* %PC
  %2223 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 72) to double*)
  %2224 = bitcast i8* %2220 to double*
  store double %2223, double* %2224, align 1, !tbaa !2452
  %2225 = getelementptr inbounds i8, i8* %2220, i64 8
  %2226 = bitcast i8* %2225 to double*
  store double 0.000000e+00, double* %2226, align 1, !tbaa !2452
  %2227 = load i64, i64* %RBP
  %2228 = sub i64 %2227, 84
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 3
  store i64 %2230, i64* %PC
  %2231 = inttoptr i64 %2228 to i32*
  %2232 = load i32, i32* %2231
  %2233 = zext i32 %2232 to i64
  store i64 %2233, i64* %RAX, align 8, !tbaa !2428
  %2234 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2235 = load i32, i32* %EAX
  %2236 = zext i32 %2235 to i64
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 4
  store i64 %2238, i64* %PC
  %2239 = sitofp i32 %2235 to double
  %2240 = bitcast i8* %2234 to double*
  store double %2239, double* %2240, align 1, !tbaa !2452
  %2241 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2242 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2243 = bitcast %union.vec128_t* %XMM1 to i8*
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = bitcast i8* %2242 to double*
  %2247 = load double, double* %2246, align 1
  %2248 = getelementptr inbounds i8, i8* %2242, i64 8
  %2249 = bitcast i8* %2248 to i64*
  %2250 = load i64, i64* %2249, align 1
  %2251 = bitcast i8* %2243 to double*
  %2252 = load double, double* %2251, align 1
  %2253 = fadd double %2247, %2252
  %2254 = bitcast i8* %2241 to double*
  store double %2253, double* %2254, align 1, !tbaa !2452
  %2255 = getelementptr inbounds i8, i8* %2241, i64 8
  %2256 = bitcast i8* %2255 to i64*
  store i64 %2250, i64* %2256, align 1, !tbaa !2452
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 48
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 3
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i32*
  %2262 = load i32, i32* %2261
  %2263 = zext i32 %2262 to i64
  store i64 %2263, i64* %RAX, align 8, !tbaa !2428
  %2264 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2265 = load i32, i32* %EAX
  %2266 = zext i32 %2265 to i64
  %2267 = load i64, i64* %PC
  %2268 = add i64 %2267, 4
  store i64 %2268, i64* %PC
  %2269 = sitofp i32 %2265 to double
  %2270 = bitcast i8* %2264 to double*
  store double %2269, double* %2270, align 1, !tbaa !2452
  %2271 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2272 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2273 = bitcast %union.vec128_t* %XMM1 to i8*
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 4
  store i64 %2275, i64* %PC
  %2276 = bitcast i8* %2272 to double*
  %2277 = load double, double* %2276, align 1
  %2278 = getelementptr inbounds i8, i8* %2272, i64 8
  %2279 = bitcast i8* %2278 to i64*
  %2280 = load i64, i64* %2279, align 1
  %2281 = bitcast i8* %2273 to double*
  %2282 = load double, double* %2281, align 1
  %2283 = fdiv double %2277, %2282
  %2284 = bitcast i8* %2271 to double*
  store double %2283, double* %2284, align 1, !tbaa !2452
  %2285 = getelementptr inbounds i8, i8* %2271, i64 8
  %2286 = bitcast i8* %2285 to i64*
  store i64 %2280, i64* %2286, align 1, !tbaa !2452
  %2287 = load i64, i64* %RBP
  %2288 = add i64 %2287, 80
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 4
  store i64 %2290, i64* %PC
  %2291 = inttoptr i64 %2288 to i64*
  %2292 = load i64, i64* %2291
  store i64 %2292, i64* %RCX, align 8, !tbaa !2428
  %2293 = load i64, i64* %RBP
  %2294 = sub i64 %2293, 84
  %2295 = load i64, i64* %PC
  %2296 = add i64 %2295, 4
  store i64 %2296, i64* %PC
  %2297 = inttoptr i64 %2294 to i32*
  %2298 = load i32, i32* %2297
  %2299 = sext i32 %2298 to i64
  store i64 %2299, i64* %RDX, align 8, !tbaa !2428
  %2300 = load i64, i64* %RCX
  %2301 = load i64, i64* %RDX
  %2302 = mul i64 %2301, 8
  %2303 = add i64 %2302, %2300
  %2304 = bitcast %union.vec128_t* %XMM2 to i8*
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 5
  store i64 %2306, i64* %PC
  %2307 = bitcast i8* %2304 to double*
  %2308 = load double, double* %2307, align 1
  %2309 = inttoptr i64 %2303 to double*
  store double %2308, double* %2309
  %2310 = load i64, i64* %RBP
  %2311 = sub i64 %2310, 84
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 3
  store i64 %2313, i64* %PC
  %2314 = inttoptr i64 %2311 to i32*
  %2315 = load i32, i32* %2314
  %2316 = zext i32 %2315 to i64
  store i64 %2316, i64* %RAX, align 8, !tbaa !2428
  %2317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2318 = load i32, i32* %EAX
  %2319 = zext i32 %2318 to i64
  %2320 = load i64, i64* %PC
  %2321 = add i64 %2320, 4
  store i64 %2321, i64* %PC
  %2322 = sitofp i32 %2318 to double
  %2323 = bitcast i8* %2317 to double*
  store double %2322, double* %2323, align 1, !tbaa !2452
  %2324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2325 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2326 = bitcast %union.vec128_t* %XMM0 to i8*
  %2327 = load i64, i64* %PC
  %2328 = add i64 %2327, 4
  store i64 %2328, i64* %PC
  %2329 = bitcast i8* %2325 to double*
  %2330 = load double, double* %2329, align 1
  %2331 = getelementptr inbounds i8, i8* %2325, i64 8
  %2332 = bitcast i8* %2331 to i64*
  %2333 = load i64, i64* %2332, align 1
  %2334 = bitcast i8* %2326 to double*
  %2335 = load double, double* %2334, align 1
  %2336 = fadd double %2330, %2335
  %2337 = bitcast i8* %2324 to double*
  store double %2336, double* %2337, align 1, !tbaa !2452
  %2338 = getelementptr inbounds i8, i8* %2324, i64 8
  %2339 = bitcast i8* %2338 to i64*
  store i64 %2333, i64* %2339, align 1, !tbaa !2452
  %2340 = load i64, i64* %RBP
  %2341 = sub i64 %2340, 48
  %2342 = load i64, i64* %PC
  %2343 = add i64 %2342, 3
  store i64 %2343, i64* %PC
  %2344 = inttoptr i64 %2341 to i32*
  %2345 = load i32, i32* %2344
  %2346 = zext i32 %2345 to i64
  store i64 %2346, i64* %RAX, align 8, !tbaa !2428
  %2347 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2348 = load i32, i32* %EAX
  %2349 = zext i32 %2348 to i64
  %2350 = load i64, i64* %PC
  %2351 = add i64 %2350, 4
  store i64 %2351, i64* %PC
  %2352 = sitofp i32 %2348 to double
  %2353 = bitcast i8* %2347 to double*
  store double %2352, double* %2353, align 1, !tbaa !2452
  %2354 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2355 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2356 = bitcast %union.vec128_t* %XMM0 to i8*
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 4
  store i64 %2358, i64* %PC
  %2359 = bitcast i8* %2355 to double*
  %2360 = load double, double* %2359, align 1
  %2361 = getelementptr inbounds i8, i8* %2355, i64 8
  %2362 = bitcast i8* %2361 to i64*
  %2363 = load i64, i64* %2362, align 1
  %2364 = bitcast i8* %2356 to double*
  %2365 = load double, double* %2364, align 1
  %2366 = fdiv double %2360, %2365
  %2367 = bitcast i8* %2354 to double*
  store double %2366, double* %2367, align 1, !tbaa !2452
  %2368 = getelementptr inbounds i8, i8* %2354, i64 8
  %2369 = bitcast i8* %2368 to i64*
  store i64 %2363, i64* %2369, align 1, !tbaa !2452
  %2370 = load i64, i64* %RBP
  %2371 = add i64 %2370, 88
  %2372 = load i64, i64* %PC
  %2373 = add i64 %2372, 4
  store i64 %2373, i64* %PC
  %2374 = inttoptr i64 %2371 to i64*
  %2375 = load i64, i64* %2374
  store i64 %2375, i64* %RCX, align 8, !tbaa !2428
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 84
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 4
  store i64 %2379, i64* %PC
  %2380 = inttoptr i64 %2377 to i32*
  %2381 = load i32, i32* %2380
  %2382 = sext i32 %2381 to i64
  store i64 %2382, i64* %RDX, align 8, !tbaa !2428
  %2383 = load i64, i64* %RCX
  %2384 = load i64, i64* %RDX
  %2385 = mul i64 %2384, 8
  %2386 = add i64 %2385, %2383
  %2387 = bitcast %union.vec128_t* %XMM1 to i8*
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 5
  store i64 %2389, i64* %PC
  %2390 = bitcast i8* %2387 to double*
  %2391 = load double, double* %2390, align 1
  %2392 = inttoptr i64 %2386 to double*
  store double %2391, double* %2392
  %2393 = load i64, i64* %RBP
  %2394 = sub i64 %2393, 84
  %2395 = load i64, i64* %PC
  %2396 = add i64 %2395, 3
  store i64 %2396, i64* %PC
  %2397 = inttoptr i64 %2394 to i32*
  %2398 = load i32, i32* %2397
  %2399 = zext i32 %2398 to i64
  store i64 %2399, i64* %RAX, align 8, !tbaa !2428
  %2400 = load i64, i64* %RAX
  %2401 = load i64, i64* %PC
  %2402 = add i64 %2401, 3
  store i64 %2402, i64* %PC
  %2403 = trunc i64 %2400 to i32
  %2404 = add i32 1, %2403
  %2405 = zext i32 %2404 to i64
  store i64 %2405, i64* %RAX, align 8, !tbaa !2428
  %2406 = icmp ult i32 %2404, %2403
  %2407 = icmp ult i32 %2404, 1
  %2408 = or i1 %2406, %2407
  %2409 = zext i1 %2408 to i8
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2409, i8* %2410, align 1, !tbaa !2432
  %2411 = and i32 %2404, 255
  %2412 = call i32 @llvm.ctpop.i32(i32 %2411) #16
  %2413 = trunc i32 %2412 to i8
  %2414 = and i8 %2413, 1
  %2415 = xor i8 %2414, 1
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2415, i8* %2416, align 1, !tbaa !2446
  %2417 = xor i64 1, %2400
  %2418 = trunc i64 %2417 to i32
  %2419 = xor i32 %2418, %2404
  %2420 = lshr i32 %2419, 4
  %2421 = trunc i32 %2420 to i8
  %2422 = and i8 %2421, 1
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2422, i8* %2423, align 1, !tbaa !2447
  %2424 = icmp eq i32 %2404, 0
  %2425 = zext i1 %2424 to i8
  %2426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2425, i8* %2426, align 1, !tbaa !2448
  %2427 = lshr i32 %2404, 31
  %2428 = trunc i32 %2427 to i8
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2428, i8* %2429, align 1, !tbaa !2449
  %2430 = lshr i32 %2403, 31
  %2431 = xor i32 %2427, %2430
  %2432 = add nuw nsw i32 %2431, %2427
  %2433 = icmp eq i32 %2432, 2
  %2434 = zext i1 %2433 to i8
  %2435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2434, i8* %2435, align 1, !tbaa !2450
  %2436 = load i64, i64* %RBP
  %2437 = sub i64 %2436, 84
  %2438 = load i32, i32* %EAX
  %2439 = zext i32 %2438 to i64
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 3
  store i64 %2441, i64* %PC
  %2442 = inttoptr i64 %2437 to i32*
  store i32 %2438, i32* %2442
  %2443 = load i64, i64* %PC
  %2444 = sub i64 %2443, 107
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 5
  store i64 %2446, i64* %PC
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2444, i64* %2447, align 8, !tbaa !2428
  br label %block_40112a

block_4010ac:                                     ; preds = %block_40103c
  %2448 = load i64, i64* %RBP
  %2449 = sub i64 %2448, 84
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 7
  store i64 %2451, i64* %PC
  %2452 = inttoptr i64 %2449 to i32*
  store i32 0, i32* %2452
  br label %block_4010b3

block_401255:                                     ; preds = %block_4011c0, %block_401261
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_4011c0 ], [ %MEMORY.1, %block_401261 ]
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 92
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 3
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i32*
  %2458 = load i32, i32* %2457
  %2459 = zext i32 %2458 to i64
  store i64 %2459, i64* %RAX, align 8, !tbaa !2428
  %2460 = load i32, i32* %EAX
  %2461 = zext i32 %2460 to i64
  %2462 = load i64, i64* %RBP
  %2463 = sub i64 %2462, 48
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 3
  store i64 %2465, i64* %PC
  %2466 = inttoptr i64 %2463 to i32*
  %2467 = load i32, i32* %2466
  %2468 = sub i32 %2460, %2467
  %2469 = icmp ult i32 %2460, %2467
  %2470 = zext i1 %2469 to i8
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2470, i8* %2471, align 1, !tbaa !2432
  %2472 = and i32 %2468, 255
  %2473 = call i32 @llvm.ctpop.i32(i32 %2472) #16
  %2474 = trunc i32 %2473 to i8
  %2475 = and i8 %2474, 1
  %2476 = xor i8 %2475, 1
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2476, i8* %2477, align 1, !tbaa !2446
  %2478 = xor i32 %2467, %2460
  %2479 = xor i32 %2478, %2468
  %2480 = lshr i32 %2479, 4
  %2481 = trunc i32 %2480 to i8
  %2482 = and i8 %2481, 1
  %2483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2482, i8* %2483, align 1, !tbaa !2447
  %2484 = icmp eq i32 %2468, 0
  %2485 = zext i1 %2484 to i8
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2485, i8* %2486, align 1, !tbaa !2448
  %2487 = lshr i32 %2468, 31
  %2488 = trunc i32 %2487 to i8
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2488, i8* %2489, align 1, !tbaa !2449
  %2490 = lshr i32 %2460, 31
  %2491 = lshr i32 %2467, 31
  %2492 = xor i32 %2491, %2490
  %2493 = xor i32 %2487, %2490
  %2494 = add nuw nsw i32 %2493, %2492
  %2495 = icmp eq i32 %2494, 2
  %2496 = zext i1 %2495 to i8
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2496, i8* %2497, align 1, !tbaa !2450
  %2498 = load i64, i64* %PC
  %2499 = add i64 %2498, 308
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 6
  %2502 = load i64, i64* %PC
  %2503 = add i64 %2502, 6
  store i64 %2503, i64* %PC
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2505 = load i8, i8* %2504, align 1, !tbaa !2448
  %2506 = icmp eq i8 %2505, 0
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2508 = load i8, i8* %2507, align 1, !tbaa !2449
  %2509 = icmp ne i8 %2508, 0
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2511 = load i8, i8* %2510, align 1, !tbaa !2450
  %2512 = icmp ne i8 %2511, 0
  %2513 = xor i1 %2509, %2512
  %2514 = xor i1 %2513, true
  %2515 = and i1 %2506, %2514
  %2516 = zext i1 %2515 to i8
  store i8 %2516, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2518 = select i1 %2515, i64 %2499, i64 %2501
  store i64 %2518, i64* %2517, align 8, !tbaa !2428
  %2519 = load i8, i8* %BRANCH_TAKEN
  %2520 = icmp eq i8 %2519, 1
  br i1 %2520, label %block_40138f, label %block_401261

block_4011b4:                                     ; preds = %block_40138f, %block_4011ad
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_4011ad ], [ %MEMORY.1, %block_40138f ]
  %2521 = load i64, i64* %RBP
  %2522 = sub i64 %2521, 88
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 3
  store i64 %2524, i64* %PC
  %2525 = inttoptr i64 %2522 to i32*
  %2526 = load i32, i32* %2525
  %2527 = zext i32 %2526 to i64
  store i64 %2527, i64* %RAX, align 8, !tbaa !2428
  %2528 = load i32, i32* %EAX
  %2529 = zext i32 %2528 to i64
  %2530 = load i64, i64* %RBP
  %2531 = sub i64 %2530, 52
  %2532 = load i64, i64* %PC
  %2533 = add i64 %2532, 3
  store i64 %2533, i64* %PC
  %2534 = inttoptr i64 %2531 to i32*
  %2535 = load i32, i32* %2534
  %2536 = sub i32 %2528, %2535
  %2537 = icmp ult i32 %2528, %2535
  %2538 = zext i1 %2537 to i8
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2538, i8* %2539, align 1, !tbaa !2432
  %2540 = and i32 %2536, 255
  %2541 = call i32 @llvm.ctpop.i32(i32 %2540) #16
  %2542 = trunc i32 %2541 to i8
  %2543 = and i8 %2542, 1
  %2544 = xor i8 %2543, 1
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2544, i8* %2545, align 1, !tbaa !2446
  %2546 = xor i32 %2535, %2528
  %2547 = xor i32 %2546, %2536
  %2548 = lshr i32 %2547, 4
  %2549 = trunc i32 %2548 to i8
  %2550 = and i8 %2549, 1
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2550, i8* %2551, align 1, !tbaa !2447
  %2552 = icmp eq i32 %2536, 0
  %2553 = zext i1 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2553, i8* %2554, align 1, !tbaa !2448
  %2555 = lshr i32 %2536, 31
  %2556 = trunc i32 %2555 to i8
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2556, i8* %2557, align 1, !tbaa !2449
  %2558 = lshr i32 %2528, 31
  %2559 = lshr i32 %2535, 31
  %2560 = xor i32 %2559, %2558
  %2561 = xor i32 %2555, %2558
  %2562 = add nuw nsw i32 %2561, %2560
  %2563 = icmp eq i32 %2562, 2
  %2564 = zext i1 %2563 to i8
  %2565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2564, i8* %2565, align 1, !tbaa !2450
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 488
  %2568 = load i64, i64* %PC
  %2569 = add i64 %2568, 6
  %2570 = load i64, i64* %PC
  %2571 = add i64 %2570, 6
  store i64 %2571, i64* %PC
  %2572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2573 = load i8, i8* %2572, align 1, !tbaa !2448
  %2574 = icmp eq i8 %2573, 0
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2576 = load i8, i8* %2575, align 1, !tbaa !2449
  %2577 = icmp ne i8 %2576, 0
  %2578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2579 = load i8, i8* %2578, align 1, !tbaa !2450
  %2580 = icmp ne i8 %2579, 0
  %2581 = xor i1 %2577, %2580
  %2582 = xor i1 %2581, true
  %2583 = and i1 %2574, %2582
  %2584 = zext i1 %2583 to i8
  store i8 %2584, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2586 = select i1 %2583, i64 %2567, i64 %2569
  store i64 %2586, i64* %2585, align 8, !tbaa !2428
  %2587 = load i8, i8* %BRANCH_TAKEN
  %2588 = icmp eq i8 %2587, 1
  br i1 %2588, label %block_4013a2, label %block_4011c0

block_40112a:                                     ; preds = %block_401123, %block_401136
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_401123 ], [ %MEMORY.3, %block_401136 ]
  %2589 = load i64, i64* %RBP
  %2590 = sub i64 %2589, 84
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 3
  store i64 %2592, i64* %PC
  %2593 = inttoptr i64 %2590 to i32*
  %2594 = load i32, i32* %2593
  %2595 = zext i32 %2594 to i64
  store i64 %2595, i64* %RAX, align 8, !tbaa !2428
  %2596 = load i32, i32* %EAX
  %2597 = zext i32 %2596 to i64
  %2598 = load i64, i64* %RBP
  %2599 = sub i64 %2598, 52
  %2600 = load i64, i64* %PC
  %2601 = add i64 %2600, 3
  store i64 %2601, i64* %PC
  %2602 = inttoptr i64 %2599 to i32*
  %2603 = load i32, i32* %2602
  %2604 = sub i32 %2596, %2603
  %2605 = icmp ult i32 %2596, %2603
  %2606 = zext i1 %2605 to i8
  %2607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2606, i8* %2607, align 1, !tbaa !2432
  %2608 = and i32 %2604, 255
  %2609 = call i32 @llvm.ctpop.i32(i32 %2608) #16
  %2610 = trunc i32 %2609 to i8
  %2611 = and i8 %2610, 1
  %2612 = xor i8 %2611, 1
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2612, i8* %2613, align 1, !tbaa !2446
  %2614 = xor i32 %2603, %2596
  %2615 = xor i32 %2614, %2604
  %2616 = lshr i32 %2615, 4
  %2617 = trunc i32 %2616 to i8
  %2618 = and i8 %2617, 1
  %2619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2618, i8* %2619, align 1, !tbaa !2447
  %2620 = icmp eq i32 %2604, 0
  %2621 = zext i1 %2620 to i8
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2621, i8* %2622, align 1, !tbaa !2448
  %2623 = lshr i32 %2604, 31
  %2624 = trunc i32 %2623 to i8
  %2625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2624, i8* %2625, align 1, !tbaa !2449
  %2626 = lshr i32 %2596, 31
  %2627 = lshr i32 %2603, 31
  %2628 = xor i32 %2627, %2626
  %2629 = xor i32 %2623, %2626
  %2630 = add nuw nsw i32 %2629, %2628
  %2631 = icmp eq i32 %2630, 2
  %2632 = zext i1 %2631 to i8
  %2633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2632, i8* %2633, align 1, !tbaa !2450
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 106
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 6
  %2638 = load i64, i64* %PC
  %2639 = add i64 %2638, 6
  store i64 %2639, i64* %PC
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2641 = load i8, i8* %2640, align 1, !tbaa !2448
  %2642 = icmp eq i8 %2641, 0
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2644 = load i8, i8* %2643, align 1, !tbaa !2449
  %2645 = icmp ne i8 %2644, 0
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2647 = load i8, i8* %2646, align 1, !tbaa !2450
  %2648 = icmp ne i8 %2647, 0
  %2649 = xor i1 %2645, %2648
  %2650 = xor i1 %2649, true
  %2651 = and i1 %2642, %2650
  %2652 = zext i1 %2651 to i8
  store i8 %2652, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2654 = select i1 %2651, i64 %2635, i64 %2637
  store i64 %2654, i64* %2653, align 8, !tbaa !2428
  %2655 = load i8, i8* %BRANCH_TAKEN
  %2656 = icmp eq i8 %2655, 1
  br i1 %2656, label %block_40119a, label %block_401136

block_4011ad:                                     ; preds = %block_4011a1
  %2657 = load i64, i64* %RBP
  %2658 = sub i64 %2657, 88
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 7
  store i64 %2660, i64* %PC
  %2661 = inttoptr i64 %2658 to i32*
  store i32 0, i32* %2661
  br label %block_4011b4

block_401123:                                     ; preds = %block_4010b3
  %2662 = load i64, i64* %RBP
  %2663 = sub i64 %2662, 84
  %2664 = load i64, i64* %PC
  %2665 = add i64 %2664, 7
  store i64 %2665, i64* %PC
  %2666 = inttoptr i64 %2663 to i32*
  store i32 0, i32* %2666
  br label %block_40112a

block_4013a2:                                     ; preds = %block_4011b4
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 5
  %2669 = load i64, i64* %PC
  %2670 = add i64 %2669, 5
  store i64 %2670, i64* %PC
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2668, i64* %2671, align 8, !tbaa !2428
  %2672 = load i64, i64* %RBP
  %2673 = sub i64 %2672, 84
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 3
  store i64 %2675, i64* %PC
  %2676 = inttoptr i64 %2673 to i32*
  %2677 = load i32, i32* %2676
  %2678 = zext i32 %2677 to i64
  store i64 %2678, i64* %RAX, align 8, !tbaa !2428
  %2679 = load i64, i64* %RAX
  %2680 = load i64, i64* %PC
  %2681 = add i64 %2680, 3
  store i64 %2681, i64* %PC
  %2682 = trunc i64 %2679 to i32
  %2683 = add i32 1, %2682
  %2684 = zext i32 %2683 to i64
  store i64 %2684, i64* %RAX, align 8, !tbaa !2428
  %2685 = icmp ult i32 %2683, %2682
  %2686 = icmp ult i32 %2683, 1
  %2687 = or i1 %2685, %2686
  %2688 = zext i1 %2687 to i8
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2688, i8* %2689, align 1, !tbaa !2432
  %2690 = and i32 %2683, 255
  %2691 = call i32 @llvm.ctpop.i32(i32 %2690) #16
  %2692 = trunc i32 %2691 to i8
  %2693 = and i8 %2692, 1
  %2694 = xor i8 %2693, 1
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2694, i8* %2695, align 1, !tbaa !2446
  %2696 = xor i64 1, %2679
  %2697 = trunc i64 %2696 to i32
  %2698 = xor i32 %2697, %2683
  %2699 = lshr i32 %2698, 4
  %2700 = trunc i32 %2699 to i8
  %2701 = and i8 %2700, 1
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2701, i8* %2702, align 1, !tbaa !2447
  %2703 = icmp eq i32 %2683, 0
  %2704 = zext i1 %2703 to i8
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2704, i8* %2705, align 1, !tbaa !2448
  %2706 = lshr i32 %2683, 31
  %2707 = trunc i32 %2706 to i8
  %2708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2707, i8* %2708, align 1, !tbaa !2449
  %2709 = lshr i32 %2682, 31
  %2710 = xor i32 %2706, %2709
  %2711 = add nuw nsw i32 %2710, %2706
  %2712 = icmp eq i32 %2711, 2
  %2713 = zext i1 %2712 to i8
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2713, i8* %2714, align 1, !tbaa !2450
  %2715 = load i64, i64* %RBP
  %2716 = sub i64 %2715, 84
  %2717 = load i32, i32* %EAX
  %2718 = zext i32 %2717 to i64
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 3
  store i64 %2720, i64* %PC
  %2721 = inttoptr i64 %2716 to i32*
  store i32 %2717, i32* %2721
  %2722 = load i64, i64* %PC
  %2723 = sub i64 %2722, 527
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 5
  store i64 %2725, i64* %PC
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2723, i64* %2726, align 8, !tbaa !2428
  br label %block_4011a1

block_40119a:                                     ; preds = %block_40112a
  %2727 = load i64, i64* %RBP
  %2728 = sub i64 %2727, 84
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 7
  store i64 %2730, i64* %PC
  %2731 = inttoptr i64 %2728 to i32*
  store i32 0, i32* %2731
  br label %block_4011a1

block_401048:                                     ; preds = %block_40103c
  %2732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 8
  store i64 %2734, i64* %PC
  %2735 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 48) to double*)
  %2736 = bitcast i8* %2732 to double*
  store double %2735, double* %2736, align 1, !tbaa !2452
  %2737 = getelementptr inbounds i8, i8* %2732, i64 8
  %2738 = bitcast i8* %2737 to double*
  store double 0.000000e+00, double* %2738, align 1, !tbaa !2452
  %2739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2740 = load i64, i64* %PC
  %2741 = add i64 %2740, 8
  store i64 %2741, i64* %PC
  %2742 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 56) to double*)
  %2743 = bitcast i8* %2739 to double*
  store double %2742, double* %2743, align 1, !tbaa !2452
  %2744 = getelementptr inbounds i8, i8* %2739, i64 8
  %2745 = bitcast i8* %2744 to double*
  store double 0.000000e+00, double* %2745, align 1, !tbaa !2452
  %2746 = load i64, i64* %RBP
  %2747 = sub i64 %2746, 84
  %2748 = load i64, i64* %PC
  %2749 = add i64 %2748, 3
  store i64 %2749, i64* %PC
  %2750 = inttoptr i64 %2747 to i32*
  %2751 = load i32, i32* %2750
  %2752 = zext i32 %2751 to i64
  store i64 %2752, i64* %RAX, align 8, !tbaa !2428
  %2753 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2754 = load i32, i32* %EAX
  %2755 = zext i32 %2754 to i64
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 4
  store i64 %2757, i64* %PC
  %2758 = sitofp i32 %2754 to double
  %2759 = bitcast i8* %2753 to double*
  store double %2758, double* %2759, align 1, !tbaa !2452
  %2760 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2761 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2762 = bitcast %union.vec128_t* %XMM1 to i8*
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 4
  store i64 %2764, i64* %PC
  %2765 = bitcast i8* %2761 to double*
  %2766 = load double, double* %2765, align 1
  %2767 = getelementptr inbounds i8, i8* %2761, i64 8
  %2768 = bitcast i8* %2767 to i64*
  %2769 = load i64, i64* %2768, align 1
  %2770 = bitcast i8* %2762 to double*
  %2771 = load double, double* %2770, align 1
  %2772 = fadd double %2766, %2771
  %2773 = bitcast i8* %2760 to double*
  store double %2772, double* %2773, align 1, !tbaa !2452
  %2774 = getelementptr inbounds i8, i8* %2760, i64 8
  %2775 = bitcast i8* %2774 to i64*
  store i64 %2769, i64* %2775, align 1, !tbaa !2452
  %2776 = load i64, i64* %RBP
  %2777 = sub i64 %2776, 48
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 3
  store i64 %2779, i64* %PC
  %2780 = inttoptr i64 %2777 to i32*
  %2781 = load i32, i32* %2780
  %2782 = zext i32 %2781 to i64
  store i64 %2782, i64* %RAX, align 8, !tbaa !2428
  %2783 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2784 = load i32, i32* %EAX
  %2785 = zext i32 %2784 to i64
  %2786 = load i64, i64* %PC
  %2787 = add i64 %2786, 4
  store i64 %2787, i64* %PC
  %2788 = sitofp i32 %2784 to double
  %2789 = bitcast i8* %2783 to double*
  store double %2788, double* %2789, align 1, !tbaa !2452
  %2790 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2791 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2792 = bitcast %union.vec128_t* %XMM1 to i8*
  %2793 = load i64, i64* %PC
  %2794 = add i64 %2793, 4
  store i64 %2794, i64* %PC
  %2795 = bitcast i8* %2791 to double*
  %2796 = load double, double* %2795, align 1
  %2797 = getelementptr inbounds i8, i8* %2791, i64 8
  %2798 = bitcast i8* %2797 to i64*
  %2799 = load i64, i64* %2798, align 1
  %2800 = bitcast i8* %2792 to double*
  %2801 = load double, double* %2800, align 1
  %2802 = fdiv double %2796, %2801
  %2803 = bitcast i8* %2790 to double*
  store double %2802, double* %2803, align 1, !tbaa !2452
  %2804 = getelementptr inbounds i8, i8* %2790, i64 8
  %2805 = bitcast i8* %2804 to i64*
  store i64 %2799, i64* %2805, align 1, !tbaa !2452
  %2806 = load i64, i64* %RBP
  %2807 = add i64 %2806, 48
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 4
  store i64 %2809, i64* %PC
  %2810 = inttoptr i64 %2807 to i64*
  %2811 = load i64, i64* %2810
  store i64 %2811, i64* %RCX, align 8, !tbaa !2428
  %2812 = load i64, i64* %RBP
  %2813 = sub i64 %2812, 84
  %2814 = load i64, i64* %PC
  %2815 = add i64 %2814, 4
  store i64 %2815, i64* %PC
  %2816 = inttoptr i64 %2813 to i32*
  %2817 = load i32, i32* %2816
  %2818 = sext i32 %2817 to i64
  store i64 %2818, i64* %RDX, align 8, !tbaa !2428
  %2819 = load i64, i64* %RCX
  %2820 = load i64, i64* %RDX
  %2821 = mul i64 %2820, 8
  %2822 = add i64 %2821, %2819
  %2823 = bitcast %union.vec128_t* %XMM2 to i8*
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 5
  store i64 %2825, i64* %PC
  %2826 = bitcast i8* %2823 to double*
  %2827 = load double, double* %2826, align 1
  %2828 = inttoptr i64 %2822 to double*
  store double %2827, double* %2828
  %2829 = load i64, i64* %RBP
  %2830 = sub i64 %2829, 84
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 3
  store i64 %2832, i64* %PC
  %2833 = inttoptr i64 %2830 to i32*
  %2834 = load i32, i32* %2833
  %2835 = zext i32 %2834 to i64
  store i64 %2835, i64* %RAX, align 8, !tbaa !2428
  %2836 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2837 = load i32, i32* %EAX
  %2838 = zext i32 %2837 to i64
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 4
  store i64 %2840, i64* %PC
  %2841 = sitofp i32 %2837 to double
  %2842 = bitcast i8* %2836 to double*
  store double %2841, double* %2842, align 1, !tbaa !2452
  %2843 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2844 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2845 = bitcast %union.vec128_t* %XMM0 to i8*
  %2846 = load i64, i64* %PC
  %2847 = add i64 %2846, 4
  store i64 %2847, i64* %PC
  %2848 = bitcast i8* %2844 to double*
  %2849 = load double, double* %2848, align 1
  %2850 = getelementptr inbounds i8, i8* %2844, i64 8
  %2851 = bitcast i8* %2850 to i64*
  %2852 = load i64, i64* %2851, align 1
  %2853 = bitcast i8* %2845 to double*
  %2854 = load double, double* %2853, align 1
  %2855 = fadd double %2849, %2854
  %2856 = bitcast i8* %2843 to double*
  store double %2855, double* %2856, align 1, !tbaa !2452
  %2857 = getelementptr inbounds i8, i8* %2843, i64 8
  %2858 = bitcast i8* %2857 to i64*
  store i64 %2852, i64* %2858, align 1, !tbaa !2452
  %2859 = load i64, i64* %RBP
  %2860 = sub i64 %2859, 48
  %2861 = load i64, i64* %PC
  %2862 = add i64 %2861, 3
  store i64 %2862, i64* %PC
  %2863 = inttoptr i64 %2860 to i32*
  %2864 = load i32, i32* %2863
  %2865 = zext i32 %2864 to i64
  store i64 %2865, i64* %RAX, align 8, !tbaa !2428
  %2866 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2867 = load i32, i32* %EAX
  %2868 = zext i32 %2867 to i64
  %2869 = load i64, i64* %PC
  %2870 = add i64 %2869, 4
  store i64 %2870, i64* %PC
  %2871 = sitofp i32 %2867 to double
  %2872 = bitcast i8* %2866 to double*
  store double %2871, double* %2872, align 1, !tbaa !2452
  %2873 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2874 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2875 = bitcast %union.vec128_t* %XMM0 to i8*
  %2876 = load i64, i64* %PC
  %2877 = add i64 %2876, 4
  store i64 %2877, i64* %PC
  %2878 = bitcast i8* %2874 to double*
  %2879 = load double, double* %2878, align 1
  %2880 = getelementptr inbounds i8, i8* %2874, i64 8
  %2881 = bitcast i8* %2880 to i64*
  %2882 = load i64, i64* %2881, align 1
  %2883 = bitcast i8* %2875 to double*
  %2884 = load double, double* %2883, align 1
  %2885 = fdiv double %2879, %2884
  %2886 = bitcast i8* %2873 to double*
  store double %2885, double* %2886, align 1, !tbaa !2452
  %2887 = getelementptr inbounds i8, i8* %2873, i64 8
  %2888 = bitcast i8* %2887 to i64*
  store i64 %2882, i64* %2888, align 1, !tbaa !2452
  %2889 = load i64, i64* %RBP
  %2890 = add i64 %2889, 56
  %2891 = load i64, i64* %PC
  %2892 = add i64 %2891, 4
  store i64 %2892, i64* %PC
  %2893 = inttoptr i64 %2890 to i64*
  %2894 = load i64, i64* %2893
  store i64 %2894, i64* %RCX, align 8, !tbaa !2428
  %2895 = load i64, i64* %RBP
  %2896 = sub i64 %2895, 84
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 4
  store i64 %2898, i64* %PC
  %2899 = inttoptr i64 %2896 to i32*
  %2900 = load i32, i32* %2899
  %2901 = sext i32 %2900 to i64
  store i64 %2901, i64* %RDX, align 8, !tbaa !2428
  %2902 = load i64, i64* %RCX
  %2903 = load i64, i64* %RDX
  %2904 = mul i64 %2903, 8
  %2905 = add i64 %2904, %2902
  %2906 = bitcast %union.vec128_t* %XMM1 to i8*
  %2907 = load i64, i64* %PC
  %2908 = add i64 %2907, 5
  store i64 %2908, i64* %PC
  %2909 = bitcast i8* %2906 to double*
  %2910 = load double, double* %2909, align 1
  %2911 = inttoptr i64 %2905 to double*
  store double %2910, double* %2911
  %2912 = load i64, i64* %RBP
  %2913 = sub i64 %2912, 84
  %2914 = load i64, i64* %PC
  %2915 = add i64 %2914, 3
  store i64 %2915, i64* %PC
  %2916 = inttoptr i64 %2913 to i32*
  %2917 = load i32, i32* %2916
  %2918 = zext i32 %2917 to i64
  store i64 %2918, i64* %RAX, align 8, !tbaa !2428
  %2919 = load i64, i64* %RAX
  %2920 = load i64, i64* %PC
  %2921 = add i64 %2920, 3
  store i64 %2921, i64* %PC
  %2922 = trunc i64 %2919 to i32
  %2923 = add i32 1, %2922
  %2924 = zext i32 %2923 to i64
  store i64 %2924, i64* %RAX, align 8, !tbaa !2428
  %2925 = icmp ult i32 %2923, %2922
  %2926 = icmp ult i32 %2923, 1
  %2927 = or i1 %2925, %2926
  %2928 = zext i1 %2927 to i8
  %2929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2928, i8* %2929, align 1, !tbaa !2432
  %2930 = and i32 %2923, 255
  %2931 = call i32 @llvm.ctpop.i32(i32 %2930) #16
  %2932 = trunc i32 %2931 to i8
  %2933 = and i8 %2932, 1
  %2934 = xor i8 %2933, 1
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2934, i8* %2935, align 1, !tbaa !2446
  %2936 = xor i64 1, %2919
  %2937 = trunc i64 %2936 to i32
  %2938 = xor i32 %2937, %2923
  %2939 = lshr i32 %2938, 4
  %2940 = trunc i32 %2939 to i8
  %2941 = and i8 %2940, 1
  %2942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2941, i8* %2942, align 1, !tbaa !2447
  %2943 = icmp eq i32 %2923, 0
  %2944 = zext i1 %2943 to i8
  %2945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2944, i8* %2945, align 1, !tbaa !2448
  %2946 = lshr i32 %2923, 31
  %2947 = trunc i32 %2946 to i8
  %2948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2947, i8* %2948, align 1, !tbaa !2449
  %2949 = lshr i32 %2922, 31
  %2950 = xor i32 %2946, %2949
  %2951 = add nuw nsw i32 %2950, %2946
  %2952 = icmp eq i32 %2951, 2
  %2953 = zext i1 %2952 to i8
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2953, i8* %2954, align 1, !tbaa !2450
  %2955 = load i64, i64* %RBP
  %2956 = sub i64 %2955, 84
  %2957 = load i32, i32* %EAX
  %2958 = zext i32 %2957 to i64
  %2959 = load i64, i64* %PC
  %2960 = add i64 %2959, 3
  store i64 %2960, i64* %PC
  %2961 = inttoptr i64 %2956 to i32*
  store i32 %2957, i32* %2961
  %2962 = load i64, i64* %PC
  %2963 = sub i64 %2962, 107
  %2964 = load i64, i64* %PC
  %2965 = add i64 %2964, 5
  store i64 %2965, i64* %PC
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2963, i64* %2966, align 8, !tbaa !2428
  br label %block_40103c

block_4011a1:                                     ; preds = %block_40119a, %block_4013a2
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_40119a ], [ %MEMORY.2, %block_4013a2 ]
  %2967 = load i64, i64* %RBP
  %2968 = sub i64 %2967, 84
  %2969 = load i64, i64* %PC
  %2970 = add i64 %2969, 3
  store i64 %2970, i64* %PC
  %2971 = inttoptr i64 %2968 to i32*
  %2972 = load i32, i32* %2971
  %2973 = zext i32 %2972 to i64
  store i64 %2973, i64* %RAX, align 8, !tbaa !2428
  %2974 = load i32, i32* %EAX
  %2975 = zext i32 %2974 to i64
  %2976 = load i64, i64* %RBP
  %2977 = sub i64 %2976, 44
  %2978 = load i64, i64* %PC
  %2979 = add i64 %2978, 3
  store i64 %2979, i64* %PC
  %2980 = inttoptr i64 %2977 to i32*
  %2981 = load i32, i32* %2980
  %2982 = sub i32 %2974, %2981
  %2983 = icmp ult i32 %2974, %2981
  %2984 = zext i1 %2983 to i8
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2984, i8* %2985, align 1, !tbaa !2432
  %2986 = and i32 %2982, 255
  %2987 = call i32 @llvm.ctpop.i32(i32 %2986) #16
  %2988 = trunc i32 %2987 to i8
  %2989 = and i8 %2988, 1
  %2990 = xor i8 %2989, 1
  %2991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2990, i8* %2991, align 1, !tbaa !2446
  %2992 = xor i32 %2981, %2974
  %2993 = xor i32 %2992, %2982
  %2994 = lshr i32 %2993, 4
  %2995 = trunc i32 %2994 to i8
  %2996 = and i8 %2995, 1
  %2997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2996, i8* %2997, align 1, !tbaa !2447
  %2998 = icmp eq i32 %2982, 0
  %2999 = zext i1 %2998 to i8
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2999, i8* %3000, align 1, !tbaa !2448
  %3001 = lshr i32 %2982, 31
  %3002 = trunc i32 %3001 to i8
  %3003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3002, i8* %3003, align 1, !tbaa !2449
  %3004 = lshr i32 %2974, 31
  %3005 = lshr i32 %2981, 31
  %3006 = xor i32 %3005, %3004
  %3007 = xor i32 %3001, %3004
  %3008 = add nuw nsw i32 %3007, %3006
  %3009 = icmp eq i32 %3008, 2
  %3010 = zext i1 %3009 to i8
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3010, i8* %3011, align 1, !tbaa !2450
  %3012 = load i64, i64* %PC
  %3013 = add i64 %3012, 526
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 6
  %3016 = load i64, i64* %PC
  %3017 = add i64 %3016, 6
  store i64 %3017, i64* %PC
  %3018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3019 = load i8, i8* %3018, align 1, !tbaa !2448
  %3020 = icmp eq i8 %3019, 0
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3022 = load i8, i8* %3021, align 1, !tbaa !2449
  %3023 = icmp ne i8 %3022, 0
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3025 = load i8, i8* %3024, align 1, !tbaa !2450
  %3026 = icmp ne i8 %3025, 0
  %3027 = xor i1 %3023, %3026
  %3028 = xor i1 %3027, true
  %3029 = and i1 %3020, %3028
  %3030 = zext i1 %3029 to i8
  store i8 %3030, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3032 = select i1 %3029, i64 %3013, i64 %3015
  store i64 %3032, i64* %3031, align 8, !tbaa !2428
  %3033 = load i8, i8* %BRANCH_TAKEN
  %3034 = icmp eq i8 %3033, 1
  br i1 %3034, label %block_4013b5, label %block_4011ad

block_40103c:                                     ; preds = %block_401048, %block_400f90
  %MEMORY.5 = phi %struct.Memory* [ %2, %block_400f90 ], [ %MEMORY.5, %block_401048 ]
  %3035 = load i64, i64* %RBP
  %3036 = sub i64 %3035, 84
  %3037 = load i64, i64* %PC
  %3038 = add i64 %3037, 3
  store i64 %3038, i64* %PC
  %3039 = inttoptr i64 %3036 to i32*
  %3040 = load i32, i32* %3039
  %3041 = zext i32 %3040 to i64
  store i64 %3041, i64* %RAX, align 8, !tbaa !2428
  %3042 = load i32, i32* %EAX
  %3043 = zext i32 %3042 to i64
  %3044 = load i64, i64* %RBP
  %3045 = sub i64 %3044, 44
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 3
  store i64 %3047, i64* %PC
  %3048 = inttoptr i64 %3045 to i32*
  %3049 = load i32, i32* %3048
  %3050 = sub i32 %3042, %3049
  %3051 = icmp ult i32 %3042, %3049
  %3052 = zext i1 %3051 to i8
  %3053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3052, i8* %3053, align 1, !tbaa !2432
  %3054 = and i32 %3050, 255
  %3055 = call i32 @llvm.ctpop.i32(i32 %3054) #16
  %3056 = trunc i32 %3055 to i8
  %3057 = and i8 %3056, 1
  %3058 = xor i8 %3057, 1
  %3059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3058, i8* %3059, align 1, !tbaa !2446
  %3060 = xor i32 %3049, %3042
  %3061 = xor i32 %3060, %3050
  %3062 = lshr i32 %3061, 4
  %3063 = trunc i32 %3062 to i8
  %3064 = and i8 %3063, 1
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3064, i8* %3065, align 1, !tbaa !2447
  %3066 = icmp eq i32 %3050, 0
  %3067 = zext i1 %3066 to i8
  %3068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3067, i8* %3068, align 1, !tbaa !2448
  %3069 = lshr i32 %3050, 31
  %3070 = trunc i32 %3069 to i8
  %3071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3070, i8* %3071, align 1, !tbaa !2449
  %3072 = lshr i32 %3042, 31
  %3073 = lshr i32 %3049, 31
  %3074 = xor i32 %3073, %3072
  %3075 = xor i32 %3069, %3072
  %3076 = add nuw nsw i32 %3075, %3074
  %3077 = icmp eq i32 %3076, 2
  %3078 = zext i1 %3077 to i8
  %3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3078, i8* %3079, align 1, !tbaa !2450
  %3080 = load i64, i64* %PC
  %3081 = add i64 %3080, 106
  %3082 = load i64, i64* %PC
  %3083 = add i64 %3082, 6
  %3084 = load i64, i64* %PC
  %3085 = add i64 %3084, 6
  store i64 %3085, i64* %PC
  %3086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3087 = load i8, i8* %3086, align 1, !tbaa !2448
  %3088 = icmp eq i8 %3087, 0
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3090 = load i8, i8* %3089, align 1, !tbaa !2449
  %3091 = icmp ne i8 %3090, 0
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3093 = load i8, i8* %3092, align 1, !tbaa !2450
  %3094 = icmp ne i8 %3093, 0
  %3095 = xor i1 %3091, %3094
  %3096 = xor i1 %3095, true
  %3097 = and i1 %3088, %3096
  %3098 = zext i1 %3097 to i8
  store i8 %3098, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %3099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3100 = select i1 %3097, i64 %3081, i64 %3083
  store i64 %3100, i64* %3099, align 8, !tbaa !2428
  %3101 = load i8, i8* %BRANCH_TAKEN
  %3102 = icmp eq i8 %3101, 1
  br i1 %3102, label %block_4010ac, label %block_401048

block_40138f:                                     ; preds = %block_401255
  %3103 = load i64, i64* %PC
  %3104 = add i64 %3103, 5
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 5
  store i64 %3106, i64* %PC
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3104, i64* %3107, align 8, !tbaa !2428
  %3108 = load i64, i64* %RBP
  %3109 = sub i64 %3108, 88
  %3110 = load i64, i64* %PC
  %3111 = add i64 %3110, 3
  store i64 %3111, i64* %PC
  %3112 = inttoptr i64 %3109 to i32*
  %3113 = load i32, i32* %3112
  %3114 = zext i32 %3113 to i64
  store i64 %3114, i64* %RAX, align 8, !tbaa !2428
  %3115 = load i64, i64* %RAX
  %3116 = load i64, i64* %PC
  %3117 = add i64 %3116, 3
  store i64 %3117, i64* %PC
  %3118 = trunc i64 %3115 to i32
  %3119 = add i32 1, %3118
  %3120 = zext i32 %3119 to i64
  store i64 %3120, i64* %RAX, align 8, !tbaa !2428
  %3121 = icmp ult i32 %3119, %3118
  %3122 = icmp ult i32 %3119, 1
  %3123 = or i1 %3121, %3122
  %3124 = zext i1 %3123 to i8
  %3125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3124, i8* %3125, align 1, !tbaa !2432
  %3126 = and i32 %3119, 255
  %3127 = call i32 @llvm.ctpop.i32(i32 %3126) #16
  %3128 = trunc i32 %3127 to i8
  %3129 = and i8 %3128, 1
  %3130 = xor i8 %3129, 1
  %3131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3130, i8* %3131, align 1, !tbaa !2446
  %3132 = xor i64 1, %3115
  %3133 = trunc i64 %3132 to i32
  %3134 = xor i32 %3133, %3119
  %3135 = lshr i32 %3134, 4
  %3136 = trunc i32 %3135 to i8
  %3137 = and i8 %3136, 1
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3137, i8* %3138, align 1, !tbaa !2447
  %3139 = icmp eq i32 %3119, 0
  %3140 = zext i1 %3139 to i8
  %3141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3140, i8* %3141, align 1, !tbaa !2448
  %3142 = lshr i32 %3119, 31
  %3143 = trunc i32 %3142 to i8
  %3144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3143, i8* %3144, align 1, !tbaa !2449
  %3145 = lshr i32 %3118, 31
  %3146 = xor i32 %3142, %3145
  %3147 = add nuw nsw i32 %3146, %3142
  %3148 = icmp eq i32 %3147, 2
  %3149 = zext i1 %3148 to i8
  %3150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3149, i8* %3150, align 1, !tbaa !2450
  %3151 = load i64, i64* %RBP
  %3152 = sub i64 %3151, 88
  %3153 = load i32, i32* %EAX
  %3154 = zext i32 %3153 to i64
  %3155 = load i64, i64* %PC
  %3156 = add i64 %3155, 3
  store i64 %3156, i64* %PC
  %3157 = inttoptr i64 %3152 to i32*
  store i32 %3153, i32* %3157
  %3158 = load i64, i64* %PC
  %3159 = sub i64 %3158, 489
  %3160 = load i64, i64* %PC
  %3161 = add i64 %3160, 5
  store i64 %3161, i64* %PC
  %3162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3159, i64* %3162, align 8, !tbaa !2428
  br label %block_4011b4
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007c0_polybench_alloc_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC
  %34 = sub i64 %31, 32
  store i64 %34, i64* %RSP, align 8, !tbaa !2428
  %35 = icmp ult i64 %31, 32
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %36, i8* %37, align 1, !tbaa !2432
  %38 = trunc i64 %34 to i32
  %39 = and i32 %38, 255
  %40 = call i32 @llvm.ctpop.i32(i32 %39) #16
  %41 = trunc i32 %40 to i8
  %42 = and i8 %41, 1
  %43 = xor i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %43, i8* %44, align 1, !tbaa !2446
  %45 = xor i64 32, %31
  %46 = xor i64 %45, %34
  %47 = lshr i64 %46, 4
  %48 = trunc i64 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i64 %34, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i64 %34, 63
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = lshr i64 %31, 63
  %58 = xor i64 %54, %57
  %59 = add nuw nsw i64 %58, %57
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %RDI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 12
  %71 = load i32, i32* %ESI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 8
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %RDI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 12
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i32*
  %93 = load i32, i32* %92
  %94 = sext i32 %93 to i64
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %95 = load i64, i64* %RDI
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 24
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 5
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i64*
  %101 = load i64, i64* %100
  %102 = sext i64 %95 to i128
  %103 = and i128 %102, -18446744073709551616
  %104 = sext i64 %101 to i128
  %105 = and i128 %104, -18446744073709551616
  %106 = zext i64 %95 to i128
  %107 = or i128 %103, %106
  %108 = zext i64 %101 to i128
  %109 = or i128 %105, %108
  %110 = mul nsw i128 %109, %107
  %111 = trunc i128 %110 to i64
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = sext i64 %111 to i128
  %113 = icmp ne i128 %112, %110
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %114, i8* %115, align 1, !tbaa !2432
  %116 = trunc i128 %110 to i32
  %117 = and i32 %116, 255
  %118 = call i32 @llvm.ctpop.i32(i32 %117) #16
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %121, i8* %122, align 1, !tbaa !2446
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %123, align 1, !tbaa !2447
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %124, align 1, !tbaa !2448
  %125 = lshr i64 %111, 63
  %126 = trunc i64 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %126, i8* %127, align 1, !tbaa !2449
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %128, align 1, !tbaa !2450
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 24
  %131 = load i64, i64* %RDI
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %130 to i64*
  store i64 %131, i64* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 24
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 24
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %148 = load i64, i64* %147, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %144, i64* %150
  store i64 %149, i64* %147, align 8, !tbaa !2428
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %142, i64* %151, align 8, !tbaa !2428
  %152 = load i64, i64* %PC
  %153 = call %struct.Memory* @sub_400800_xmalloc_renamed_(%struct.State* %0, i64 %152, %struct.Memory* %2)
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 32
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %155 to i64*
  store i64 %156, i64* %159
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 32
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 32, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 32
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2432
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = xor i64 32, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2447
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2448
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2449
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2450
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %153
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401f10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 21
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R10 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 23
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R11 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R12 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 27
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R13 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 29
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R14 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 31
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R15 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %R15
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 2
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %82 = load i64, i64* %81, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %78, i64* %84
  store i64 %83, i64* %81, align 8, !tbaa !2428
  %85 = load i64, i64* %R14
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 2
  store i64 %87, i64* %PC
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %85, i64* %91
  store i64 %90, i64* %88, align 8, !tbaa !2428
  %92 = load i64, i64* %R13
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 2
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %R12
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 2
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %RBX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 1
  store i64 %108, i64* %PC
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %110 = load i64, i64* %109, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %106, i64* %112
  store i64 %111, i64* %109, align 8, !tbaa !2428
  %113 = load i64, i64* %RSP
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = sub i64 %113, 32
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  %117 = icmp ult i64 %113, 32
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %118, i8* %119, align 1, !tbaa !2432
  %120 = trunc i64 %116 to i32
  %121 = and i32 %120, 255
  %122 = call i32 @llvm.ctpop.i32(i32 %121) #16
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %125, i8* %126, align 1, !tbaa !2446
  %127 = xor i64 32, %113
  %128 = xor i64 %127, %116
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %131, i8* %132, align 1, !tbaa !2447
  %133 = icmp eq i64 %116, 0
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = lshr i64 %116, 63
  %137 = trunc i64 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %137, i8* %138, align 1, !tbaa !2449
  %139 = lshr i64 %113, 63
  %140 = xor i64 %136, %139
  %141 = add nuw nsw i64 %140, %139
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %143, i8* %144, align 1, !tbaa !2450
  %145 = load i64, i64* %RBP
  %146 = add i64 %145, 96
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP
  %152 = add i64 %151, 88
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %R10, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = add i64 %157, 80
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %R11, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = add i64 %163, 72
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %RBX, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP
  %170 = add i64 %169, 64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %R14, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = add i64 %175, 56
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %R15, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = add i64 %181, 48
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %R12, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = add i64 %187, 40
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %R13, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 120
  %195 = load i64, i64* %RAX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198
  %199 = load i64, i64* %RBP
  %200 = add i64 %199, 32
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 128
  %207 = load i64, i64* %RAX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210
  %211 = load i64, i64* %RBP
  %212 = add i64 %211, 24
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 136
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %RBP
  %224 = add i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 44
  %231 = load i32, i32* %EDI
  %232 = zext i32 %231 to i64
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %230 to i32*
  store i32 %231, i32* %235
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 48
  %238 = load i32, i32* %ESI
  %239 = zext i32 %238 to i64
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %237 to i32*
  store i32 %238, i32* %242
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 52
  %245 = load i32, i32* %EDX
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %244 to i32*
  store i32 %245, i32* %249
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 64
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = bitcast i8* %252 to double*
  %256 = load double, double* %255, align 1
  %257 = inttoptr i64 %251 to double*
  store double %256, double* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 72
  %260 = bitcast %union.vec128_t* %XMM1 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = bitcast i8* %260 to double*
  %264 = load double, double* %263, align 1
  %265 = inttoptr i64 %259 to double*
  store double %264, double* %265
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 80
  %268 = load i64, i64* %RCX
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %271
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 88
  %274 = load i64, i64* %R8
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 96
  %280 = load i64, i64* %R9
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 100
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 7
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  store i32 0, i32* %288
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 144
  %291 = load i64, i64* %R13
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 7
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %290 to i64*
  store i64 %291, i64* %294
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 152
  %297 = load i64, i64* %RAX
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 7
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %296 to i64*
  store i64 %297, i64* %300
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 160
  %303 = load i64, i64* %R10
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 7
  store i64 %305, i64* %PC
  %306 = inttoptr i64 %302 to i64*
  store i64 %303, i64* %306
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 168
  %309 = load i64, i64* %R11
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 7
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %308 to i64*
  store i64 %309, i64* %312
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 176
  %315 = load i64, i64* %RBX
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 7
  store i64 %317, i64* %PC
  %318 = inttoptr i64 %314 to i64*
  store i64 %315, i64* %318
  %319 = load i64, i64* %RBP
  %320 = sub i64 %319, 184
  %321 = load i64, i64* %R14
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %320 to i64*
  store i64 %321, i64* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 192
  %327 = load i64, i64* %R15
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 7
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %326 to i64*
  store i64 %327, i64* %330
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 200
  %333 = load i64, i64* %R12
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 7
  store i64 %335, i64* %PC
  %336 = inttoptr i64 %332 to i64*
  store i64 %333, i64* %336
  br label %block_401fba

block_401fd9:                                     ; preds = %block_401fcd
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 108
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 7
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %338 to i32*
  store i32 0, i32* %341
  br label %block_401fe0

block_401fba:                                     ; preds = %block_402a25, %block_401f10
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401f10 ], [ %MEMORY.1, %block_402a25 ]
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 100
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i32*
  %347 = load i32, i32* %346
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = load i32, i32* %EAX
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 44
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i32*
  %356 = load i32, i32* %355
  %357 = sub i32 %349, %356
  %358 = icmp ult i32 %349, %356
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %359, i8* %360, align 1, !tbaa !2432
  %361 = and i32 %357, 255
  %362 = call i32 @llvm.ctpop.i32(i32 %361) #16
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %365, i8* %366, align 1, !tbaa !2446
  %367 = xor i32 %356, %349
  %368 = xor i32 %367, %357
  %369 = lshr i32 %368, 4
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %371, i8* %372, align 1, !tbaa !2447
  %373 = icmp eq i32 %357, 0
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %374, i8* %375, align 1, !tbaa !2448
  %376 = lshr i32 %357, 31
  %377 = trunc i32 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %377, i8* %378, align 1, !tbaa !2449
  %379 = lshr i32 %349, 31
  %380 = lshr i32 %356, 31
  %381 = xor i32 %380, %379
  %382 = xor i32 %376, %379
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %385, i8* %386, align 1, !tbaa !2450
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 2680
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 6
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 6
  store i64 %392, i64* %PC
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %394 = load i8, i8* %393, align 1, !tbaa !2449
  %395 = icmp ne i8 %394, 0
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %397 = load i8, i8* %396, align 1, !tbaa !2450
  %398 = icmp ne i8 %397, 0
  %399 = xor i1 %395, %398
  %400 = xor i1 %399, true
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %403 = select i1 %399, i64 %390, i64 %388
  store i64 %403, i64* %402, align 8, !tbaa !2428
  %404 = load i8, i8* %BRANCH_TAKEN
  %405 = icmp eq i8 %404, 1
  br i1 %405, label %block_402a38, label %block_401fc6

block_402a38:                                     ; preds = %block_401fba
  %406 = load i64, i64* %RSP
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = add i64 32, %406
  store i64 %409, i64* %RSP, align 8, !tbaa !2428
  %410 = icmp ult i64 %409, %406
  %411 = icmp ult i64 %409, 32
  %412 = or i1 %410, %411
  %413 = zext i1 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %413, i8* %414, align 1, !tbaa !2432
  %415 = trunc i64 %409 to i32
  %416 = and i32 %415, 255
  %417 = call i32 @llvm.ctpop.i32(i32 %416) #16
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = xor i8 %419, 1
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %420, i8* %421, align 1, !tbaa !2446
  %422 = xor i64 32, %406
  %423 = xor i64 %422, %409
  %424 = lshr i64 %423, 4
  %425 = trunc i64 %424 to i8
  %426 = and i8 %425, 1
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %426, i8* %427, align 1, !tbaa !2447
  %428 = icmp eq i64 %409, 0
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %429, i8* %430, align 1, !tbaa !2448
  %431 = lshr i64 %409, 63
  %432 = trunc i64 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %432, i8* %433, align 1, !tbaa !2449
  %434 = lshr i64 %406, 63
  %435 = xor i64 %431, %434
  %436 = add nuw nsw i64 %435, %431
  %437 = icmp eq i64 %436, 2
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %438, i8* %439, align 1, !tbaa !2450
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 1
  store i64 %441, i64* %PC
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %443 = load i64, i64* %442, align 8, !tbaa !2428
  %444 = add i64 %443, 8
  %445 = inttoptr i64 %443 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RBX, align 8, !tbaa !2428
  store i64 %444, i64* %442, align 8, !tbaa !2428
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 2
  store i64 %448, i64* %PC
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %450 = load i64, i64* %449, align 8, !tbaa !2428
  %451 = add i64 %450, 8
  %452 = inttoptr i64 %450 to i64*
  %453 = load i64, i64* %452
  store i64 %453, i64* %R12, align 8, !tbaa !2428
  store i64 %451, i64* %449, align 8, !tbaa !2428
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 2
  store i64 %455, i64* %PC
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %457 = load i64, i64* %456, align 8, !tbaa !2428
  %458 = add i64 %457, 8
  %459 = inttoptr i64 %457 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %R13, align 8, !tbaa !2428
  store i64 %458, i64* %456, align 8, !tbaa !2428
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %464 = load i64, i64* %463, align 8, !tbaa !2428
  %465 = add i64 %464, 8
  %466 = inttoptr i64 %464 to i64*
  %467 = load i64, i64* %466
  store i64 %467, i64* %R14, align 8, !tbaa !2428
  store i64 %465, i64* %463, align 8, !tbaa !2428
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 2
  store i64 %469, i64* %PC
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %471 = load i64, i64* %470, align 8, !tbaa !2428
  %472 = add i64 %471, 8
  %473 = inttoptr i64 %471 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %R15, align 8, !tbaa !2428
  store i64 %472, i64* %470, align 8, !tbaa !2428
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 1
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %478 = load i64, i64* %477, align 8, !tbaa !2428
  %479 = add i64 %478, 8
  %480 = inttoptr i64 %478 to i64*
  %481 = load i64, i64* %480
  store i64 %481, i64* %RBP, align 8, !tbaa !2428
  store i64 %479, i64* %477, align 8, !tbaa !2428
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 1
  store i64 %483, i64* %PC
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %486 = load i64, i64* %485, align 8, !tbaa !2428
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  store i64 %488, i64* %484, align 8, !tbaa !2428
  %489 = add i64 %486, 8
  store i64 %489, i64* %485, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401fcd:                                     ; preds = %block_401fc6, %block_4027ab
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_401fc6 ], [ %MEMORY.2, %block_4027ab ]
  %490 = load i64, i64* %RBP
  %491 = sub i64 %490, 104
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %491 to i32*
  %495 = load i32, i32* %494
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = load i32, i32* %EAX
  %498 = zext i32 %497 to i64
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 52
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = sub i32 %497, %504
  %506 = icmp ult i32 %497, %504
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %507, i8* %508, align 1, !tbaa !2432
  %509 = and i32 %505, 255
  %510 = call i32 @llvm.ctpop.i32(i32 %509) #16
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %513, i8* %514, align 1, !tbaa !2446
  %515 = xor i32 %504, %497
  %516 = xor i32 %515, %505
  %517 = lshr i32 %516, 4
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %519, i8* %520, align 1, !tbaa !2447
  %521 = icmp eq i32 %505, 0
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %522, i8* %523, align 1, !tbaa !2448
  %524 = lshr i32 %505, 31
  %525 = trunc i32 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %525, i8* %526, align 1, !tbaa !2449
  %527 = lshr i32 %497, 31
  %528 = lshr i32 %504, 31
  %529 = xor i32 %528, %527
  %530 = xor i32 %524, %527
  %531 = add nuw nsw i32 %530, %529
  %532 = icmp eq i32 %531, 2
  %533 = zext i1 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %533, i8* %534, align 1, !tbaa !2450
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 2642
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 6
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 6
  store i64 %540, i64* %PC
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %542 = load i8, i8* %541, align 1, !tbaa !2449
  %543 = icmp ne i8 %542, 0
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %545 = load i8, i8* %544, align 1, !tbaa !2450
  %546 = icmp ne i8 %545, 0
  %547 = xor i1 %543, %546
  %548 = xor i1 %547, true
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %551 = select i1 %547, i64 %538, i64 %536
  store i64 %551, i64* %550, align 8, !tbaa !2428
  %552 = load i8, i8* %BRANCH_TAKEN
  %553 = icmp eq i8 %552, 1
  br i1 %553, label %block_402a25, label %block_401fd9

block_402512:                                     ; preds = %block_40251e, %block_40228c
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_40228c ], [ %MEMORY.2, %block_40251e ]
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 108
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 3
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  %559 = load i32, i32* %558
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i32, i32* %EAX
  %562 = zext i32 %561 to i64
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 48
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sub i32 %561, %568
  %570 = icmp ult i32 %561, %568
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = and i32 %569, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = xor i32 %568, %561
  %580 = xor i32 %579, %569
  %581 = lshr i32 %580, 4
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %583, i8* %584, align 1, !tbaa !2447
  %585 = icmp eq i32 %569, 0
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %586, i8* %587, align 1, !tbaa !2448
  %588 = lshr i32 %569, 31
  %589 = trunc i32 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %589, i8* %590, align 1, !tbaa !2449
  %591 = lshr i32 %561, 31
  %592 = lshr i32 %568, 31
  %593 = xor i32 %592, %591
  %594 = xor i32 %588, %591
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %597, i8* %598, align 1, !tbaa !2450
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 659
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 6
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 6
  store i64 %604, i64* %PC
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %606 = load i8, i8* %605, align 1, !tbaa !2449
  %607 = icmp ne i8 %606, 0
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %609 = load i8, i8* %608, align 1, !tbaa !2450
  %610 = icmp ne i8 %609, 0
  %611 = xor i1 %607, %610
  %612 = xor i1 %611, true
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %615 = select i1 %611, i64 %602, i64 %600
  store i64 %615, i64* %614, align 8, !tbaa !2428
  %616 = load i8, i8* %BRANCH_TAKEN
  %617 = icmp eq i8 %616, 1
  %618 = load i64, i64* %RBP
  %619 = add i64 %618, 32
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 100
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 4
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i32*
  %629 = load i32, i32* %628
  %630 = sext i32 %629 to i64
  store i64 %630, i64* %RCX, align 8, !tbaa !2428
  %631 = load i64, i64* %RCX
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 7
  store i64 %633, i64* %PC
  %634 = sext i64 %631 to i128
  %635 = and i128 %634, -18446744073709551616
  %636 = zext i64 %631 to i128
  %637 = or i128 %635, %636
  %638 = mul nsw i128 33800, %637
  %639 = trunc i128 %638 to i64
  store i64 %639, i64* %RCX, align 8, !tbaa !2428
  %640 = sext i64 %639 to i128
  %641 = icmp ne i128 %640, %638
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %642, i8* %643, align 1, !tbaa !2432
  %644 = trunc i128 %638 to i32
  %645 = and i32 %644, 255
  %646 = call i32 @llvm.ctpop.i32(i32 %645) #16
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  %649 = xor i8 %648, 1
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %649, i8* %650, align 1, !tbaa !2446
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %651, align 1, !tbaa !2447
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %652, align 1, !tbaa !2448
  %653 = lshr i64 %639, 63
  %654 = trunc i64 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %654, i8* %655, align 1, !tbaa !2449
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %642, i8* %656, align 1, !tbaa !2450
  %657 = load i64, i64* %RAX
  %658 = load i64, i64* %RCX
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 3
  store i64 %660, i64* %PC
  %661 = add i64 %658, %657
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = icmp ult i64 %661, %657
  %663 = icmp ult i64 %661, %658
  %664 = or i1 %662, %663
  %665 = zext i1 %664 to i8
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %665, i8* %666, align 1, !tbaa !2432
  %667 = trunc i64 %661 to i32
  %668 = and i32 %667, 255
  %669 = call i32 @llvm.ctpop.i32(i32 %668) #16
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %672, i8* %673, align 1, !tbaa !2446
  %674 = xor i64 %658, %657
  %675 = xor i64 %674, %661
  %676 = lshr i64 %675, 4
  %677 = trunc i64 %676 to i8
  %678 = and i8 %677, 1
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %678, i8* %679, align 1, !tbaa !2447
  %680 = icmp eq i64 %661, 0
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %681, i8* %682, align 1, !tbaa !2448
  %683 = lshr i64 %661, 63
  %684 = trunc i64 %683 to i8
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %684, i8* %685, align 1, !tbaa !2449
  %686 = lshr i64 %657, 63
  %687 = lshr i64 %658, 63
  %688 = xor i64 %683, %686
  %689 = xor i64 %683, %687
  %690 = add nuw nsw i64 %688, %689
  %691 = icmp eq i64 %690, 2
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %692, i8* %693, align 1, !tbaa !2450
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 52
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 4
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = sext i32 %699 to i64
  store i64 %700, i64* %RCX, align 8, !tbaa !2428
  %701 = load i64, i64* %RCX
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 7
  store i64 %703, i64* %PC
  %704 = sext i64 %701 to i128
  %705 = and i128 %704, -18446744073709551616
  %706 = zext i64 %701 to i128
  %707 = or i128 %705, %706
  %708 = mul nsw i128 520, %707
  %709 = trunc i128 %708 to i64
  store i64 %709, i64* %RCX, align 8, !tbaa !2428
  %710 = sext i64 %709 to i128
  %711 = icmp ne i128 %710, %708
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = trunc i128 %708 to i32
  %715 = and i32 %714, 255
  %716 = call i32 @llvm.ctpop.i32(i32 %715) #16
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %719, i8* %720, align 1, !tbaa !2446
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %721, align 1, !tbaa !2447
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %722, align 1, !tbaa !2448
  %723 = lshr i64 %709, 63
  %724 = trunc i64 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %724, i8* %725, align 1, !tbaa !2449
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %712, i8* %726, align 1, !tbaa !2450
  %727 = load i64, i64* %RAX
  %728 = load i64, i64* %RCX
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 3
  store i64 %730, i64* %PC
  %731 = add i64 %728, %727
  store i64 %731, i64* %RAX, align 8, !tbaa !2428
  %732 = icmp ult i64 %731, %727
  %733 = icmp ult i64 %731, %728
  %734 = or i1 %732, %733
  %735 = zext i1 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %735, i8* %736, align 1, !tbaa !2432
  %737 = trunc i64 %731 to i32
  %738 = and i32 %737, 255
  %739 = call i32 @llvm.ctpop.i32(i32 %738) #16
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %742, i8* %743, align 1, !tbaa !2446
  %744 = xor i64 %728, %727
  %745 = xor i64 %744, %731
  %746 = lshr i64 %745, 4
  %747 = trunc i64 %746 to i8
  %748 = and i8 %747, 1
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %748, i8* %749, align 1, !tbaa !2447
  %750 = icmp eq i64 %731, 0
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %751, i8* %752, align 1, !tbaa !2448
  %753 = lshr i64 %731, 63
  %754 = trunc i64 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %754, i8* %755, align 1, !tbaa !2449
  %756 = lshr i64 %727, 63
  %757 = lshr i64 %728, 63
  %758 = xor i64 %753, %756
  %759 = xor i64 %753, %757
  %760 = add nuw nsw i64 %758, %759
  %761 = icmp eq i64 %760, 2
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %762, i8* %763, align 1, !tbaa !2450
  %764 = load i64, i64* %RBP
  br i1 %617, label %block_4027ab, label %block_40251e

block_40228c:                                     ; preds = %block_401fe0
  %765 = sub i64 %9950, 48
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 4
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768
  %770 = sext i32 %769 to i64
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %RCX
  %774 = mul i64 %773, 8
  %775 = add i64 %774, %772
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 5
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to double*
  %779 = load double, double* %778
  %780 = bitcast i8* %771 to double*
  store double %779, double* %780, align 1, !tbaa !2452
  %781 = getelementptr inbounds i8, i8* %771, i64 8
  %782 = bitcast i8* %781 to double*
  store double 0.000000e+00, double* %782, align 1, !tbaa !2452
  %783 = load i64, i64* %RBP
  %784 = add i64 %783, 32
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 4
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i64*
  %788 = load i64, i64* %787
  store i64 %788, i64* %RAX, align 8, !tbaa !2428
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 100
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %790 to i32*
  %794 = load i32, i32* %793
  %795 = sext i32 %794 to i64
  store i64 %795, i64* %RCX, align 8, !tbaa !2428
  %796 = load i64, i64* %RCX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 7
  store i64 %798, i64* %PC
  %799 = sext i64 %796 to i128
  %800 = and i128 %799, -18446744073709551616
  %801 = zext i64 %796 to i128
  %802 = or i128 %800, %801
  %803 = mul nsw i128 33800, %802
  %804 = trunc i128 %803 to i64
  store i64 %804, i64* %RCX, align 8, !tbaa !2428
  %805 = sext i64 %804 to i128
  %806 = icmp ne i128 %805, %803
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %807, i8* %808, align 1, !tbaa !2432
  %809 = trunc i128 %803 to i32
  %810 = and i32 %809, 255
  %811 = call i32 @llvm.ctpop.i32(i32 %810) #16
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %814, i8* %815, align 1, !tbaa !2446
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %816, align 1, !tbaa !2447
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %817, align 1, !tbaa !2448
  %818 = lshr i64 %804, 63
  %819 = trunc i64 %818 to i8
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %819, i8* %820, align 1, !tbaa !2449
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %807, i8* %821, align 1, !tbaa !2450
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %RCX
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 3
  store i64 %825, i64* %PC
  %826 = add i64 %823, %822
  store i64 %826, i64* %RAX, align 8, !tbaa !2428
  %827 = icmp ult i64 %826, %822
  %828 = icmp ult i64 %826, %823
  %829 = or i1 %827, %828
  %830 = zext i1 %829 to i8
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %830, i8* %831, align 1, !tbaa !2432
  %832 = trunc i64 %826 to i32
  %833 = and i32 %832, 255
  %834 = call i32 @llvm.ctpop.i32(i32 %833) #16
  %835 = trunc i32 %834 to i8
  %836 = and i8 %835, 1
  %837 = xor i8 %836, 1
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %837, i8* %838, align 1, !tbaa !2446
  %839 = xor i64 %823, %822
  %840 = xor i64 %839, %826
  %841 = lshr i64 %840, 4
  %842 = trunc i64 %841 to i8
  %843 = and i8 %842, 1
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %843, i8* %844, align 1, !tbaa !2447
  %845 = icmp eq i64 %826, 0
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %846, i8* %847, align 1, !tbaa !2448
  %848 = lshr i64 %826, 63
  %849 = trunc i64 %848 to i8
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %849, i8* %850, align 1, !tbaa !2449
  %851 = lshr i64 %822, 63
  %852 = lshr i64 %823, 63
  %853 = xor i64 %848, %851
  %854 = xor i64 %848, %852
  %855 = add nuw nsw i64 %853, %854
  %856 = icmp eq i64 %855, 2
  %857 = zext i1 %856 to i8
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %857, i8* %858, align 1, !tbaa !2450
  %859 = load i64, i64* %RBP
  %860 = sub i64 %859, 104
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC
  %863 = inttoptr i64 %860 to i32*
  %864 = load i32, i32* %863
  %865 = zext i32 %864 to i64
  store i64 %865, i64* %RDX, align 8, !tbaa !2428
  %866 = load i64, i64* %RDX
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 3
  store i64 %868, i64* %PC
  %869 = trunc i64 %866 to i32
  %870 = add i32 1, %869
  %871 = zext i32 %870 to i64
  store i64 %871, i64* %RDX, align 8, !tbaa !2428
  %872 = icmp ult i32 %870, %869
  %873 = icmp ult i32 %870, 1
  %874 = or i1 %872, %873
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %875, i8* %876, align 1, !tbaa !2432
  %877 = and i32 %870, 255
  %878 = call i32 @llvm.ctpop.i32(i32 %877) #16
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  %881 = xor i8 %880, 1
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %881, i8* %882, align 1, !tbaa !2446
  %883 = xor i64 1, %866
  %884 = trunc i64 %883 to i32
  %885 = xor i32 %884, %870
  %886 = lshr i32 %885, 4
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %888, i8* %889, align 1, !tbaa !2447
  %890 = icmp eq i32 %870, 0
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %891, i8* %892, align 1, !tbaa !2448
  %893 = lshr i32 %870, 31
  %894 = trunc i32 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %894, i8* %895, align 1, !tbaa !2449
  %896 = lshr i32 %869, 31
  %897 = xor i32 %893, %896
  %898 = add nuw nsw i32 %897, %893
  %899 = icmp eq i32 %898, 2
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %900, i8* %901, align 1, !tbaa !2450
  %902 = load i32, i32* %EDX
  %903 = zext i32 %902 to i64
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 3
  store i64 %905, i64* %PC
  %906 = shl i64 %903, 32
  %907 = ashr exact i64 %906, 32
  store i64 %907, i64* %RCX, align 8, !tbaa !2428
  %908 = load i64, i64* %RCX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 7
  store i64 %910, i64* %PC
  %911 = sext i64 %908 to i128
  %912 = and i128 %911, -18446744073709551616
  %913 = zext i64 %908 to i128
  %914 = or i128 %912, %913
  %915 = mul nsw i128 520, %914
  %916 = trunc i128 %915 to i64
  store i64 %916, i64* %RCX, align 8, !tbaa !2428
  %917 = sext i64 %916 to i128
  %918 = icmp ne i128 %917, %915
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %919, i8* %920, align 1, !tbaa !2432
  %921 = trunc i128 %915 to i32
  %922 = and i32 %921, 255
  %923 = call i32 @llvm.ctpop.i32(i32 %922) #16
  %924 = trunc i32 %923 to i8
  %925 = and i8 %924, 1
  %926 = xor i8 %925, 1
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %926, i8* %927, align 1, !tbaa !2446
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %928, align 1, !tbaa !2447
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %929, align 1, !tbaa !2448
  %930 = lshr i64 %916, 63
  %931 = trunc i64 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %931, i8* %932, align 1, !tbaa !2449
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %919, i8* %933, align 1, !tbaa !2450
  %934 = load i64, i64* %RAX
  %935 = load i64, i64* %RCX
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 3
  store i64 %937, i64* %PC
  %938 = add i64 %935, %934
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = icmp ult i64 %938, %934
  %940 = icmp ult i64 %938, %935
  %941 = or i1 %939, %940
  %942 = zext i1 %941 to i8
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %942, i8* %943, align 1, !tbaa !2432
  %944 = trunc i64 %938 to i32
  %945 = and i32 %944, 255
  %946 = call i32 @llvm.ctpop.i32(i32 %945) #16
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  %949 = xor i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %949, i8* %950, align 1, !tbaa !2446
  %951 = xor i64 %935, %934
  %952 = xor i64 %951, %938
  %953 = lshr i64 %952, 4
  %954 = trunc i64 %953 to i8
  %955 = and i8 %954, 1
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %955, i8* %956, align 1, !tbaa !2447
  %957 = icmp eq i64 %938, 0
  %958 = zext i1 %957 to i8
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %958, i8* %959, align 1, !tbaa !2448
  %960 = lshr i64 %938, 63
  %961 = trunc i64 %960 to i8
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %961, i8* %962, align 1, !tbaa !2449
  %963 = lshr i64 %934, 63
  %964 = lshr i64 %935, 63
  %965 = xor i64 %960, %963
  %966 = xor i64 %960, %964
  %967 = add nuw nsw i64 %965, %966
  %968 = icmp eq i64 %967, 2
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %969, i8* %970, align 1, !tbaa !2450
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 48
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 4
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i32*
  %976 = load i32, i32* %975
  %977 = sext i32 %976 to i64
  store i64 %977, i64* %RCX, align 8, !tbaa !2428
  %978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %979 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %980 = load i64, i64* %RAX
  %981 = load i64, i64* %RCX
  %982 = mul i64 %981, 8
  %983 = add i64 %982, %980
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 5
  store i64 %985, i64* %PC
  %986 = bitcast i8* %979 to double*
  %987 = load double, double* %986, align 1
  %988 = getelementptr inbounds i8, i8* %979, i64 8
  %989 = bitcast i8* %988 to i64*
  %990 = load i64, i64* %989, align 1
  %991 = inttoptr i64 %983 to double*
  %992 = load double, double* %991
  %993 = fsub double %987, %992
  %994 = bitcast i8* %978 to double*
  store double %993, double* %994, align 1, !tbaa !2452
  %995 = getelementptr inbounds i8, i8* %978, i64 8
  %996 = bitcast i8* %995 to i64*
  store i64 %990, i64* %996, align 1, !tbaa !2452
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 88
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 4
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RBP
  %1004 = sub i64 %1003, 100
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 4
  store i64 %1006, i64* %PC
  %1007 = inttoptr i64 %1004 to i32*
  %1008 = load i32, i32* %1007
  %1009 = sext i32 %1008 to i64
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = load i64, i64* %RCX
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = sext i64 %1010 to i128
  %1014 = and i128 %1013, -18446744073709551616
  %1015 = zext i64 %1010 to i128
  %1016 = or i128 %1014, %1015
  %1017 = mul nsw i128 520, %1016
  %1018 = trunc i128 %1017 to i64
  store i64 %1018, i64* %RCX, align 8, !tbaa !2428
  %1019 = sext i64 %1018 to i128
  %1020 = icmp ne i128 %1019, %1017
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i128 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1030, align 1, !tbaa !2447
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1031, align 1, !tbaa !2448
  %1032 = lshr i64 %1018, 63
  %1033 = trunc i64 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1033, i8* %1034, align 1, !tbaa !2449
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1021, i8* %1035, align 1, !tbaa !2450
  %1036 = load i64, i64* %RAX
  %1037 = load i64, i64* %RCX
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  %1040 = add i64 %1037, %1036
  store i64 %1040, i64* %RAX, align 8, !tbaa !2428
  %1041 = icmp ult i64 %1040, %1036
  %1042 = icmp ult i64 %1040, %1037
  %1043 = or i1 %1041, %1042
  %1044 = zext i1 %1043 to i8
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1044, i8* %1045, align 1, !tbaa !2432
  %1046 = trunc i64 %1040 to i32
  %1047 = and i32 %1046, 255
  %1048 = call i32 @llvm.ctpop.i32(i32 %1047) #16
  %1049 = trunc i32 %1048 to i8
  %1050 = and i8 %1049, 1
  %1051 = xor i8 %1050, 1
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1051, i8* %1052, align 1, !tbaa !2446
  %1053 = xor i64 %1037, %1036
  %1054 = xor i64 %1053, %1040
  %1055 = lshr i64 %1054, 4
  %1056 = trunc i64 %1055 to i8
  %1057 = and i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1057, i8* %1058, align 1, !tbaa !2447
  %1059 = icmp eq i64 %1040, 0
  %1060 = zext i1 %1059 to i8
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1060, i8* %1061, align 1, !tbaa !2448
  %1062 = lshr i64 %1040, 63
  %1063 = trunc i64 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1063, i8* %1064, align 1, !tbaa !2449
  %1065 = lshr i64 %1036, 63
  %1066 = lshr i64 %1037, 63
  %1067 = xor i64 %1062, %1065
  %1068 = xor i64 %1062, %1066
  %1069 = add nuw nsw i64 %1067, %1068
  %1070 = icmp eq i64 %1069, 2
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1071, i8* %1072, align 1, !tbaa !2450
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 104
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  %1078 = load i32, i32* %1077
  %1079 = sext i32 %1078 to i64
  store i64 %1079, i64* %RCX, align 8, !tbaa !2428
  %1080 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1081 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1082 = load i64, i64* %RAX
  %1083 = load i64, i64* %RCX
  %1084 = mul i64 %1083, 8
  %1085 = add i64 %1084, %1082
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 5
  store i64 %1087, i64* %PC
  %1088 = bitcast i8* %1081 to double*
  %1089 = load double, double* %1088, align 1
  %1090 = getelementptr inbounds i8, i8* %1081, i64 8
  %1091 = bitcast i8* %1090 to i64*
  %1092 = load i64, i64* %1091, align 1
  %1093 = inttoptr i64 %1085 to double*
  %1094 = load double, double* %1093
  %1095 = fadd double %1089, %1094
  %1096 = bitcast i8* %1080 to double*
  store double %1095, double* %1096, align 1, !tbaa !2452
  %1097 = getelementptr inbounds i8, i8* %1080, i64 8
  %1098 = bitcast i8* %1097 to i64*
  store i64 %1092, i64* %1098, align 1, !tbaa !2452
  %1099 = load i64, i64* %RBP
  %1100 = add i64 %1099, 40
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1100 to i64*
  %1104 = load i64, i64* %1103
  store i64 %1104, i64* %RAX, align 8, !tbaa !2428
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 100
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i32*
  %1110 = load i32, i32* %1109
  %1111 = sext i32 %1110 to i64
  store i64 %1111, i64* %RCX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RCX
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 7
  store i64 %1114, i64* %PC
  %1115 = sext i64 %1112 to i128
  %1116 = and i128 %1115, -18446744073709551616
  %1117 = zext i64 %1112 to i128
  %1118 = or i128 %1116, %1117
  %1119 = mul nsw i128 33800, %1118
  %1120 = trunc i128 %1119 to i64
  store i64 %1120, i64* %RCX, align 8, !tbaa !2428
  %1121 = sext i64 %1120 to i128
  %1122 = icmp ne i128 %1121, %1119
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1123, i8* %1124, align 1, !tbaa !2432
  %1125 = trunc i128 %1119 to i32
  %1126 = and i32 %1125, 255
  %1127 = call i32 @llvm.ctpop.i32(i32 %1126) #16
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1130, i8* %1131, align 1, !tbaa !2446
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1132, align 1, !tbaa !2447
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1133, align 1, !tbaa !2448
  %1134 = lshr i64 %1120, 63
  %1135 = trunc i64 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1135, i8* %1136, align 1, !tbaa !2449
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1123, i8* %1137, align 1, !tbaa !2450
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %RCX
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 3
  store i64 %1141, i64* %PC
  %1142 = add i64 %1139, %1138
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = icmp ult i64 %1142, %1138
  %1144 = icmp ult i64 %1142, %1139
  %1145 = or i1 %1143, %1144
  %1146 = zext i1 %1145 to i8
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1146, i8* %1147, align 1, !tbaa !2432
  %1148 = trunc i64 %1142 to i32
  %1149 = and i32 %1148, 255
  %1150 = call i32 @llvm.ctpop.i32(i32 %1149) #16
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1153, i8* %1154, align 1, !tbaa !2446
  %1155 = xor i64 %1139, %1138
  %1156 = xor i64 %1155, %1142
  %1157 = lshr i64 %1156, 4
  %1158 = trunc i64 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1159, i8* %1160, align 1, !tbaa !2447
  %1161 = icmp eq i64 %1142, 0
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1162, i8* %1163, align 1, !tbaa !2448
  %1164 = lshr i64 %1142, 63
  %1165 = trunc i64 %1164 to i8
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1165, i8* %1166, align 1, !tbaa !2449
  %1167 = lshr i64 %1138, 63
  %1168 = lshr i64 %1139, 63
  %1169 = xor i64 %1164, %1167
  %1170 = xor i64 %1164, %1168
  %1171 = add nuw nsw i64 %1169, %1170
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2450
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 104
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 4
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 7
  store i64 %1184, i64* %PC
  %1185 = sext i64 %1182 to i128
  %1186 = and i128 %1185, -18446744073709551616
  %1187 = zext i64 %1182 to i128
  %1188 = or i128 %1186, %1187
  %1189 = mul nsw i128 520, %1188
  %1190 = trunc i128 %1189 to i64
  store i64 %1190, i64* %RCX, align 8, !tbaa !2428
  %1191 = sext i64 %1190 to i128
  %1192 = icmp ne i128 %1191, %1189
  %1193 = zext i1 %1192 to i8
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1193, i8* %1194, align 1, !tbaa !2432
  %1195 = trunc i128 %1189 to i32
  %1196 = and i32 %1195, 255
  %1197 = call i32 @llvm.ctpop.i32(i32 %1196) #16
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1200, i8* %1201, align 1, !tbaa !2446
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1202, align 1, !tbaa !2447
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1203, align 1, !tbaa !2448
  %1204 = lshr i64 %1190, 63
  %1205 = trunc i64 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1205, i8* %1206, align 1, !tbaa !2449
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1193, i8* %1207, align 1, !tbaa !2450
  %1208 = load i64, i64* %RAX
  %1209 = load i64, i64* %RCX
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = add i64 %1209, %1208
  store i64 %1212, i64* %RAX, align 8, !tbaa !2428
  %1213 = icmp ult i64 %1212, %1208
  %1214 = icmp ult i64 %1212, %1209
  %1215 = or i1 %1213, %1214
  %1216 = zext i1 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1216, i8* %1217, align 1, !tbaa !2432
  %1218 = trunc i64 %1212 to i32
  %1219 = and i32 %1218, 255
  %1220 = call i32 @llvm.ctpop.i32(i32 %1219) #16
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1223, i8* %1224, align 1, !tbaa !2446
  %1225 = xor i64 %1209, %1208
  %1226 = xor i64 %1225, %1212
  %1227 = lshr i64 %1226, 4
  %1228 = trunc i64 %1227 to i8
  %1229 = and i8 %1228, 1
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1229, i8* %1230, align 1, !tbaa !2447
  %1231 = icmp eq i64 %1212, 0
  %1232 = zext i1 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1232, i8* %1233, align 1, !tbaa !2448
  %1234 = lshr i64 %1212, 63
  %1235 = trunc i64 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1235, i8* %1236, align 1, !tbaa !2449
  %1237 = lshr i64 %1208, 63
  %1238 = lshr i64 %1209, 63
  %1239 = xor i64 %1234, %1237
  %1240 = xor i64 %1234, %1238
  %1241 = add nuw nsw i64 %1239, %1240
  %1242 = icmp eq i64 %1241, 2
  %1243 = zext i1 %1242 to i8
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1243, i8* %1244, align 1, !tbaa !2450
  %1245 = load i64, i64* %RBP
  %1246 = sub i64 %1245, 48
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 4
  store i64 %1248, i64* %PC
  %1249 = inttoptr i64 %1246 to i32*
  %1250 = load i32, i32* %1249
  %1251 = sext i32 %1250 to i64
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1253 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1254 = load i64, i64* %RAX
  %1255 = load i64, i64* %RCX
  %1256 = mul i64 %1255, 8
  %1257 = add i64 %1256, %1254
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 5
  store i64 %1259, i64* %PC
  %1260 = bitcast i8* %1253 to double*
  %1261 = load double, double* %1260, align 1
  %1262 = getelementptr inbounds i8, i8* %1253, i64 8
  %1263 = bitcast i8* %1262 to i64*
  %1264 = load i64, i64* %1263, align 1
  %1265 = inttoptr i64 %1257 to double*
  %1266 = load double, double* %1265
  %1267 = fsub double %1261, %1266
  %1268 = bitcast i8* %1252 to double*
  store double %1267, double* %1268, align 1, !tbaa !2452
  %1269 = getelementptr inbounds i8, i8* %1252, i64 8
  %1270 = bitcast i8* %1269 to i64*
  store i64 %1264, i64* %1270, align 1, !tbaa !2452
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 96
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 4
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i64*
  %1276 = load i64, i64* %1275
  store i64 %1276, i64* %RAX, align 8, !tbaa !2428
  %1277 = load i64, i64* %RBP
  %1278 = sub i64 %1277, 100
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 4
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1278 to i32*
  %1282 = load i32, i32* %1281
  %1283 = sext i32 %1282 to i64
  store i64 %1283, i64* %RCX, align 8, !tbaa !2428
  %1284 = load i64, i64* %RCX
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 7
  store i64 %1286, i64* %PC
  %1287 = sext i64 %1284 to i128
  %1288 = and i128 %1287, -18446744073709551616
  %1289 = zext i64 %1284 to i128
  %1290 = or i128 %1288, %1289
  %1291 = mul nsw i128 520, %1290
  %1292 = trunc i128 %1291 to i64
  store i64 %1292, i64* %RCX, align 8, !tbaa !2428
  %1293 = sext i64 %1292 to i128
  %1294 = icmp ne i128 %1293, %1291
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = trunc i128 %1291 to i32
  %1298 = and i32 %1297, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2446
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1304, align 1, !tbaa !2447
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1305, align 1, !tbaa !2448
  %1306 = lshr i64 %1292, 63
  %1307 = trunc i64 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1307, i8* %1308, align 1, !tbaa !2449
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1295, i8* %1309, align 1, !tbaa !2450
  %1310 = load i64, i64* %RAX
  %1311 = load i64, i64* %RCX
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 3
  store i64 %1313, i64* %PC
  %1314 = add i64 %1311, %1310
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = icmp ult i64 %1314, %1310
  %1316 = icmp ult i64 %1314, %1311
  %1317 = or i1 %1315, %1316
  %1318 = zext i1 %1317 to i8
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1318, i8* %1319, align 1, !tbaa !2432
  %1320 = trunc i64 %1314 to i32
  %1321 = and i32 %1320, 255
  %1322 = call i32 @llvm.ctpop.i32(i32 %1321) #16
  %1323 = trunc i32 %1322 to i8
  %1324 = and i8 %1323, 1
  %1325 = xor i8 %1324, 1
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1325, i8* %1326, align 1, !tbaa !2446
  %1327 = xor i64 %1311, %1310
  %1328 = xor i64 %1327, %1314
  %1329 = lshr i64 %1328, 4
  %1330 = trunc i64 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1331, i8* %1332, align 1, !tbaa !2447
  %1333 = icmp eq i64 %1314, 0
  %1334 = zext i1 %1333 to i8
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1334, i8* %1335, align 1, !tbaa !2448
  %1336 = lshr i64 %1314, 63
  %1337 = trunc i64 %1336 to i8
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1337, i8* %1338, align 1, !tbaa !2449
  %1339 = lshr i64 %1310, 63
  %1340 = lshr i64 %1311, 63
  %1341 = xor i64 %1336, %1339
  %1342 = xor i64 %1336, %1340
  %1343 = add nuw nsw i64 %1341, %1342
  %1344 = icmp eq i64 %1343, 2
  %1345 = zext i1 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1345, i8* %1346, align 1, !tbaa !2450
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 104
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 4
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i32*
  %1352 = load i32, i32* %1351
  %1353 = sext i32 %1352 to i64
  store i64 %1353, i64* %RCX, align 8, !tbaa !2428
  %1354 = load i64, i64* %RAX
  %1355 = load i64, i64* %RCX
  %1356 = mul i64 %1355, 8
  %1357 = add i64 %1356, %1354
  %1358 = bitcast %union.vec128_t* %XMM0 to i8*
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 5
  store i64 %1360, i64* %PC
  %1361 = bitcast i8* %1358 to double*
  %1362 = load double, double* %1361, align 1
  %1363 = inttoptr i64 %1357 to double*
  store double %1362, double* %1363
  %1364 = load i64, i64* %RBP
  %1365 = add i64 %1364, 88
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 4
  store i64 %1367, i64* %PC
  %1368 = inttoptr i64 %1365 to i64*
  %1369 = load i64, i64* %1368
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = load i64, i64* %RBP
  %1371 = sub i64 %1370, 104
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 4
  store i64 %1373, i64* %PC
  %1374 = inttoptr i64 %1371 to i32*
  %1375 = load i32, i32* %1374
  %1376 = sext i32 %1375 to i64
  store i64 %1376, i64* %RCX, align 8, !tbaa !2428
  %1377 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1378 = load i64, i64* %RAX
  %1379 = load i64, i64* %RCX
  %1380 = mul i64 %1379, 8
  %1381 = add i64 %1380, %1378
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 5
  store i64 %1383, i64* %PC
  %1384 = inttoptr i64 %1381 to double*
  %1385 = load double, double* %1384
  %1386 = bitcast i8* %1377 to double*
  store double %1385, double* %1386, align 1, !tbaa !2452
  %1387 = getelementptr inbounds i8, i8* %1377, i64 8
  %1388 = bitcast i8* %1387 to double*
  store double 0.000000e+00, double* %1388, align 1, !tbaa !2452
  %1389 = load i64, i64* %RBP
  %1390 = add i64 %1389, 96
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i64*
  %1394 = load i64, i64* %1393
  store i64 %1394, i64* %RAX, align 8, !tbaa !2428
  %1395 = load i64, i64* %RBP
  %1396 = sub i64 %1395, 104
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 4
  store i64 %1398, i64* %PC
  %1399 = inttoptr i64 %1396 to i32*
  %1400 = load i32, i32* %1399
  %1401 = sext i32 %1400 to i64
  store i64 %1401, i64* %RCX, align 8, !tbaa !2428
  %1402 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1403 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1404 = load i64, i64* %RAX
  %1405 = load i64, i64* %RCX
  %1406 = mul i64 %1405, 8
  %1407 = add i64 %1406, %1404
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 5
  store i64 %1409, i64* %PC
  %1410 = bitcast i8* %1403 to double*
  %1411 = load double, double* %1410, align 1
  %1412 = getelementptr inbounds i8, i8* %1403, i64 8
  %1413 = bitcast i8* %1412 to i64*
  %1414 = load i64, i64* %1413, align 1
  %1415 = inttoptr i64 %1407 to double*
  %1416 = load double, double* %1415
  %1417 = fdiv double %1411, %1416
  %1418 = bitcast i8* %1402 to double*
  store double %1417, double* %1418, align 1, !tbaa !2452
  %1419 = getelementptr inbounds i8, i8* %1402, i64 8
  %1420 = bitcast i8* %1419 to i64*
  store i64 %1414, i64* %1420, align 1, !tbaa !2452
  %1421 = load i64, i64* %RBP
  %1422 = add i64 %1421, 24
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1422 to i64*
  %1426 = load i64, i64* %1425
  store i64 %1426, i64* %RAX, align 8, !tbaa !2428
  %1427 = load i64, i64* %RBP
  %1428 = sub i64 %1427, 100
  %1429 = load i64, i64* %PC
  %1430 = add i64 %1429, 4
  store i64 %1430, i64* %PC
  %1431 = inttoptr i64 %1428 to i32*
  %1432 = load i32, i32* %1431
  %1433 = sext i32 %1432 to i64
  store i64 %1433, i64* %RCX, align 8, !tbaa !2428
  %1434 = load i64, i64* %RCX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 7
  store i64 %1436, i64* %PC
  %1437 = sext i64 %1434 to i128
  %1438 = and i128 %1437, -18446744073709551616
  %1439 = zext i64 %1434 to i128
  %1440 = or i128 %1438, %1439
  %1441 = mul nsw i128 33800, %1440
  %1442 = trunc i128 %1441 to i64
  store i64 %1442, i64* %RCX, align 8, !tbaa !2428
  %1443 = sext i64 %1442 to i128
  %1444 = icmp ne i128 %1443, %1441
  %1445 = zext i1 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1445, i8* %1446, align 1, !tbaa !2432
  %1447 = trunc i128 %1441 to i32
  %1448 = and i32 %1447, 255
  %1449 = call i32 @llvm.ctpop.i32(i32 %1448) #16
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = xor i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1452, i8* %1453, align 1, !tbaa !2446
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1454, align 1, !tbaa !2447
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1455, align 1, !tbaa !2448
  %1456 = lshr i64 %1442, 63
  %1457 = trunc i64 %1456 to i8
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1457, i8* %1458, align 1, !tbaa !2449
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1445, i8* %1459, align 1, !tbaa !2450
  %1460 = load i64, i64* %RAX
  %1461 = load i64, i64* %RCX
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 3
  store i64 %1463, i64* %PC
  %1464 = add i64 %1461, %1460
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = icmp ult i64 %1464, %1460
  %1466 = icmp ult i64 %1464, %1461
  %1467 = or i1 %1465, %1466
  %1468 = zext i1 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1468, i8* %1469, align 1, !tbaa !2432
  %1470 = trunc i64 %1464 to i32
  %1471 = and i32 %1470, 255
  %1472 = call i32 @llvm.ctpop.i32(i32 %1471) #16
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = xor i8 %1474, 1
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1475, i8* %1476, align 1, !tbaa !2446
  %1477 = xor i64 %1461, %1460
  %1478 = xor i64 %1477, %1464
  %1479 = lshr i64 %1478, 4
  %1480 = trunc i64 %1479 to i8
  %1481 = and i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1481, i8* %1482, align 1, !tbaa !2447
  %1483 = icmp eq i64 %1464, 0
  %1484 = zext i1 %1483 to i8
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1484, i8* %1485, align 1, !tbaa !2448
  %1486 = lshr i64 %1464, 63
  %1487 = trunc i64 %1486 to i8
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1487, i8* %1488, align 1, !tbaa !2449
  %1489 = lshr i64 %1460, 63
  %1490 = lshr i64 %1461, 63
  %1491 = xor i64 %1486, %1489
  %1492 = xor i64 %1486, %1490
  %1493 = add nuw nsw i64 %1491, %1492
  %1494 = icmp eq i64 %1493, 2
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1495, i8* %1496, align 1, !tbaa !2450
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 104
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 4
  store i64 %1500, i64* %PC
  %1501 = inttoptr i64 %1498 to i32*
  %1502 = load i32, i32* %1501
  %1503 = sext i32 %1502 to i64
  store i64 %1503, i64* %RCX, align 8, !tbaa !2428
  %1504 = load i64, i64* %RCX
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 7
  store i64 %1506, i64* %PC
  %1507 = sext i64 %1504 to i128
  %1508 = and i128 %1507, -18446744073709551616
  %1509 = zext i64 %1504 to i128
  %1510 = or i128 %1508, %1509
  %1511 = mul nsw i128 520, %1510
  %1512 = trunc i128 %1511 to i64
  store i64 %1512, i64* %RCX, align 8, !tbaa !2428
  %1513 = sext i64 %1512 to i128
  %1514 = icmp ne i128 %1513, %1511
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1515, i8* %1516, align 1, !tbaa !2432
  %1517 = trunc i128 %1511 to i32
  %1518 = and i32 %1517, 255
  %1519 = call i32 @llvm.ctpop.i32(i32 %1518) #16
  %1520 = trunc i32 %1519 to i8
  %1521 = and i8 %1520, 1
  %1522 = xor i8 %1521, 1
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1522, i8* %1523, align 1, !tbaa !2446
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1524, align 1, !tbaa !2447
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1525, align 1, !tbaa !2448
  %1526 = lshr i64 %1512, 63
  %1527 = trunc i64 %1526 to i8
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1527, i8* %1528, align 1, !tbaa !2449
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1515, i8* %1529, align 1, !tbaa !2450
  %1530 = load i64, i64* %RAX
  %1531 = load i64, i64* %RCX
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 3
  store i64 %1533, i64* %PC
  %1534 = add i64 %1531, %1530
  store i64 %1534, i64* %RAX, align 8, !tbaa !2428
  %1535 = icmp ult i64 %1534, %1530
  %1536 = icmp ult i64 %1534, %1531
  %1537 = or i1 %1535, %1536
  %1538 = zext i1 %1537 to i8
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1538, i8* %1539, align 1, !tbaa !2432
  %1540 = trunc i64 %1534 to i32
  %1541 = and i32 %1540, 255
  %1542 = call i32 @llvm.ctpop.i32(i32 %1541) #16
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1545, i8* %1546, align 1, !tbaa !2446
  %1547 = xor i64 %1531, %1530
  %1548 = xor i64 %1547, %1534
  %1549 = lshr i64 %1548, 4
  %1550 = trunc i64 %1549 to i8
  %1551 = and i8 %1550, 1
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1551, i8* %1552, align 1, !tbaa !2447
  %1553 = icmp eq i64 %1534, 0
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1554, i8* %1555, align 1, !tbaa !2448
  %1556 = lshr i64 %1534, 63
  %1557 = trunc i64 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1557, i8* %1558, align 1, !tbaa !2449
  %1559 = lshr i64 %1530, 63
  %1560 = lshr i64 %1531, 63
  %1561 = xor i64 %1556, %1559
  %1562 = xor i64 %1556, %1560
  %1563 = add nuw nsw i64 %1561, %1562
  %1564 = icmp eq i64 %1563, 2
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1565, i8* %1566, align 1, !tbaa !2450
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 48
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 4
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = sext i32 %1572 to i64
  store i64 %1573, i64* %RCX, align 8, !tbaa !2428
  %1574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1576 = load i64, i64* %RAX
  %1577 = load i64, i64* %RCX
  %1578 = mul i64 %1577, 8
  %1579 = add i64 %1578, %1576
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 5
  store i64 %1581, i64* %PC
  %1582 = bitcast i8* %1575 to double*
  %1583 = load double, double* %1582, align 1
  %1584 = getelementptr inbounds i8, i8* %1575, i64 8
  %1585 = bitcast i8* %1584 to i64*
  %1586 = load i64, i64* %1585, align 1
  %1587 = inttoptr i64 %1579 to double*
  %1588 = load double, double* %1587
  %1589 = fmul double %1583, %1588
  %1590 = bitcast i8* %1574 to double*
  store double %1589, double* %1590, align 1, !tbaa !2452
  %1591 = getelementptr inbounds i8, i8* %1574, i64 8
  %1592 = bitcast i8* %1591 to i64*
  store i64 %1586, i64* %1592, align 1, !tbaa !2452
  %1593 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1594 = load i64, i64* %RBP
  %1595 = sub i64 %1594, 72
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 5
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1595 to double*
  %1599 = load double, double* %1598
  %1600 = bitcast i8* %1593 to double*
  store double %1599, double* %1600, align 1, !tbaa !2452
  %1601 = getelementptr inbounds i8, i8* %1593, i64 8
  %1602 = bitcast i8* %1601 to double*
  store double 0.000000e+00, double* %1602, align 1, !tbaa !2452
  %1603 = load i64, i64* %RBP
  %1604 = add i64 %1603, 96
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 4
  store i64 %1606, i64* %PC
  %1607 = inttoptr i64 %1604 to i64*
  %1608 = load i64, i64* %1607
  store i64 %1608, i64* %RAX, align 8, !tbaa !2428
  %1609 = load i64, i64* %RBP
  %1610 = sub i64 %1609, 104
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 4
  store i64 %1612, i64* %PC
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613
  %1615 = sext i32 %1614 to i64
  store i64 %1615, i64* %RCX, align 8, !tbaa !2428
  %1616 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1617 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1618 = load i64, i64* %RAX
  %1619 = load i64, i64* %RCX
  %1620 = mul i64 %1619, 8
  %1621 = add i64 %1620, %1618
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  store i64 %1623, i64* %PC
  %1624 = bitcast i8* %1617 to double*
  %1625 = load double, double* %1624, align 1
  %1626 = getelementptr inbounds i8, i8* %1617, i64 8
  %1627 = bitcast i8* %1626 to i64*
  %1628 = load i64, i64* %1627, align 1
  %1629 = inttoptr i64 %1621 to double*
  %1630 = load double, double* %1629
  %1631 = fdiv double %1625, %1630
  %1632 = bitcast i8* %1616 to double*
  store double %1631, double* %1632, align 1, !tbaa !2452
  %1633 = getelementptr inbounds i8, i8* %1616, i64 8
  %1634 = bitcast i8* %1633 to i64*
  store i64 %1628, i64* %1634, align 1, !tbaa !2452
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 96
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 4
  store i64 %1638, i64* %PC
  %1639 = inttoptr i64 %1636 to i64*
  %1640 = load i64, i64* %1639
  store i64 %1640, i64* %RAX, align 8, !tbaa !2428
  %1641 = load i64, i64* %RBP
  %1642 = sub i64 %1641, 100
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 4
  store i64 %1644, i64* %PC
  %1645 = inttoptr i64 %1642 to i32*
  %1646 = load i32, i32* %1645
  %1647 = sext i32 %1646 to i64
  store i64 %1647, i64* %RCX, align 8, !tbaa !2428
  %1648 = load i64, i64* %RCX
  %1649 = load i64, i64* %PC
  %1650 = add i64 %1649, 7
  store i64 %1650, i64* %PC
  %1651 = sext i64 %1648 to i128
  %1652 = and i128 %1651, -18446744073709551616
  %1653 = zext i64 %1648 to i128
  %1654 = or i128 %1652, %1653
  %1655 = mul nsw i128 520, %1654
  %1656 = trunc i128 %1655 to i64
  store i64 %1656, i64* %RCX, align 8, !tbaa !2428
  %1657 = sext i64 %1656 to i128
  %1658 = icmp ne i128 %1657, %1655
  %1659 = zext i1 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1659, i8* %1660, align 1, !tbaa !2432
  %1661 = trunc i128 %1655 to i32
  %1662 = and i32 %1661, 255
  %1663 = call i32 @llvm.ctpop.i32(i32 %1662) #16
  %1664 = trunc i32 %1663 to i8
  %1665 = and i8 %1664, 1
  %1666 = xor i8 %1665, 1
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1666, i8* %1667, align 1, !tbaa !2446
  %1668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1668, align 1, !tbaa !2447
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1669, align 1, !tbaa !2448
  %1670 = lshr i64 %1656, 63
  %1671 = trunc i64 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1671, i8* %1672, align 1, !tbaa !2449
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1659, i8* %1673, align 1, !tbaa !2450
  %1674 = load i64, i64* %RAX
  %1675 = load i64, i64* %RCX
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 3
  store i64 %1677, i64* %PC
  %1678 = add i64 %1675, %1674
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = icmp ult i64 %1678, %1674
  %1680 = icmp ult i64 %1678, %1675
  %1681 = or i1 %1679, %1680
  %1682 = zext i1 %1681 to i8
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1682, i8* %1683, align 1, !tbaa !2432
  %1684 = trunc i64 %1678 to i32
  %1685 = and i32 %1684, 255
  %1686 = call i32 @llvm.ctpop.i32(i32 %1685) #16
  %1687 = trunc i32 %1686 to i8
  %1688 = and i8 %1687, 1
  %1689 = xor i8 %1688, 1
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1689, i8* %1690, align 1, !tbaa !2446
  %1691 = xor i64 %1675, %1674
  %1692 = xor i64 %1691, %1678
  %1693 = lshr i64 %1692, 4
  %1694 = trunc i64 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1695, i8* %1696, align 1, !tbaa !2447
  %1697 = icmp eq i64 %1678, 0
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1698, i8* %1699, align 1, !tbaa !2448
  %1700 = lshr i64 %1678, 63
  %1701 = trunc i64 %1700 to i8
  %1702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1701, i8* %1702, align 1, !tbaa !2449
  %1703 = lshr i64 %1674, 63
  %1704 = lshr i64 %1675, 63
  %1705 = xor i64 %1700, %1703
  %1706 = xor i64 %1700, %1704
  %1707 = add nuw nsw i64 %1705, %1706
  %1708 = icmp eq i64 %1707, 2
  %1709 = zext i1 %1708 to i8
  %1710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1709, i8* %1710, align 1, !tbaa !2450
  %1711 = load i64, i64* %RBP
  %1712 = sub i64 %1711, 104
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 4
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1712 to i32*
  %1716 = load i32, i32* %1715
  %1717 = sext i32 %1716 to i64
  store i64 %1717, i64* %RCX, align 8, !tbaa !2428
  %1718 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1719 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1720 = load i64, i64* %RAX
  %1721 = load i64, i64* %RCX
  %1722 = mul i64 %1721, 8
  %1723 = add i64 %1722, %1720
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 5
  store i64 %1725, i64* %PC
  %1726 = bitcast i8* %1719 to double*
  %1727 = load double, double* %1726, align 1
  %1728 = getelementptr inbounds i8, i8* %1719, i64 8
  %1729 = bitcast i8* %1728 to i64*
  %1730 = load i64, i64* %1729, align 1
  %1731 = inttoptr i64 %1723 to double*
  %1732 = load double, double* %1731
  %1733 = fmul double %1727, %1732
  %1734 = bitcast i8* %1718 to double*
  store double %1733, double* %1734, align 1, !tbaa !2452
  %1735 = getelementptr inbounds i8, i8* %1718, i64 8
  %1736 = bitcast i8* %1735 to i64*
  store i64 %1730, i64* %1736, align 1, !tbaa !2452
  %1737 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1738 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1739 = bitcast %union.vec128_t* %XMM1 to i8*
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 4
  store i64 %1741, i64* %PC
  %1742 = bitcast i8* %1738 to double*
  %1743 = load double, double* %1742, align 1
  %1744 = getelementptr inbounds i8, i8* %1738, i64 8
  %1745 = bitcast i8* %1744 to i64*
  %1746 = load i64, i64* %1745, align 1
  %1747 = bitcast i8* %1739 to double*
  %1748 = load double, double* %1747, align 1
  %1749 = fsub double %1743, %1748
  %1750 = bitcast i8* %1737 to double*
  store double %1749, double* %1750, align 1, !tbaa !2452
  %1751 = getelementptr inbounds i8, i8* %1737, i64 8
  %1752 = bitcast i8* %1751 to i64*
  store i64 %1746, i64* %1752, align 1, !tbaa !2452
  %1753 = load i64, i64* %RBP
  %1754 = add i64 %1753, 16
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1754 to i64*
  %1758 = load i64, i64* %1757
  store i64 %1758, i64* %RAX, align 8, !tbaa !2428
  %1759 = load i64, i64* %RBP
  %1760 = sub i64 %1759, 100
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1760 to i32*
  %1764 = load i32, i32* %1763
  %1765 = sext i32 %1764 to i64
  store i64 %1765, i64* %RCX, align 8, !tbaa !2428
  %1766 = load i64, i64* %RCX
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 7
  store i64 %1768, i64* %PC
  %1769 = sext i64 %1766 to i128
  %1770 = and i128 %1769, -18446744073709551616
  %1771 = zext i64 %1766 to i128
  %1772 = or i128 %1770, %1771
  %1773 = mul nsw i128 520, %1772
  %1774 = trunc i128 %1773 to i64
  store i64 %1774, i64* %RCX, align 8, !tbaa !2428
  %1775 = sext i64 %1774 to i128
  %1776 = icmp ne i128 %1775, %1773
  %1777 = zext i1 %1776 to i8
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1777, i8* %1778, align 1, !tbaa !2432
  %1779 = trunc i128 %1773 to i32
  %1780 = and i32 %1779, 255
  %1781 = call i32 @llvm.ctpop.i32(i32 %1780) #16
  %1782 = trunc i32 %1781 to i8
  %1783 = and i8 %1782, 1
  %1784 = xor i8 %1783, 1
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1784, i8* %1785, align 1, !tbaa !2446
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1786, align 1, !tbaa !2447
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1787, align 1, !tbaa !2448
  %1788 = lshr i64 %1774, 63
  %1789 = trunc i64 %1788 to i8
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1789, i8* %1790, align 1, !tbaa !2449
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1777, i8* %1791, align 1, !tbaa !2450
  %1792 = load i64, i64* %RAX
  %1793 = load i64, i64* %RCX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 3
  store i64 %1795, i64* %PC
  %1796 = add i64 %1793, %1792
  store i64 %1796, i64* %RAX, align 8, !tbaa !2428
  %1797 = icmp ult i64 %1796, %1792
  %1798 = icmp ult i64 %1796, %1793
  %1799 = or i1 %1797, %1798
  %1800 = zext i1 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1800, i8* %1801, align 1, !tbaa !2432
  %1802 = trunc i64 %1796 to i32
  %1803 = and i32 %1802, 255
  %1804 = call i32 @llvm.ctpop.i32(i32 %1803) #16
  %1805 = trunc i32 %1804 to i8
  %1806 = and i8 %1805, 1
  %1807 = xor i8 %1806, 1
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1807, i8* %1808, align 1, !tbaa !2446
  %1809 = xor i64 %1793, %1792
  %1810 = xor i64 %1809, %1796
  %1811 = lshr i64 %1810, 4
  %1812 = trunc i64 %1811 to i8
  %1813 = and i8 %1812, 1
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1813, i8* %1814, align 1, !tbaa !2447
  %1815 = icmp eq i64 %1796, 0
  %1816 = zext i1 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1816, i8* %1817, align 1, !tbaa !2448
  %1818 = lshr i64 %1796, 63
  %1819 = trunc i64 %1818 to i8
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1819, i8* %1820, align 1, !tbaa !2449
  %1821 = lshr i64 %1792, 63
  %1822 = lshr i64 %1793, 63
  %1823 = xor i64 %1818, %1821
  %1824 = xor i64 %1818, %1822
  %1825 = add nuw nsw i64 %1823, %1824
  %1826 = icmp eq i64 %1825, 2
  %1827 = zext i1 %1826 to i8
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1827, i8* %1828, align 1, !tbaa !2450
  %1829 = load i64, i64* %RBP
  %1830 = sub i64 %1829, 104
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 4
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RCX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = load i64, i64* %RCX
  %1838 = mul i64 %1837, 8
  %1839 = add i64 %1838, %1836
  %1840 = bitcast %union.vec128_t* %XMM0 to i8*
  %1841 = load i64, i64* %PC
  %1842 = add i64 %1841, 5
  store i64 %1842, i64* %PC
  %1843 = bitcast i8* %1840 to double*
  %1844 = load double, double* %1843, align 1
  %1845 = inttoptr i64 %1839 to double*
  store double %1844, double* %1845
  %1846 = load i64, i64* %RBP
  %1847 = add i64 %1846, 72
  %1848 = load i64, i64* %PC
  %1849 = add i64 %1848, 4
  store i64 %1849, i64* %PC
  %1850 = inttoptr i64 %1847 to i64*
  %1851 = load i64, i64* %1850
  store i64 %1851, i64* %RAX, align 8, !tbaa !2428
  %1852 = load i64, i64* %RBP
  %1853 = sub i64 %1852, 48
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 4
  store i64 %1855, i64* %PC
  %1856 = inttoptr i64 %1853 to i32*
  %1857 = load i32, i32* %1856
  %1858 = sext i32 %1857 to i64
  store i64 %1858, i64* %RCX, align 8, !tbaa !2428
  %1859 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1860 = load i64, i64* %RAX
  %1861 = load i64, i64* %RCX
  %1862 = mul i64 %1861, 8
  %1863 = add i64 %1862, %1860
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 5
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to double*
  %1867 = load double, double* %1866
  %1868 = bitcast i8* %1859 to double*
  store double %1867, double* %1868, align 1, !tbaa !2452
  %1869 = getelementptr inbounds i8, i8* %1859, i64 8
  %1870 = bitcast i8* %1869 to double*
  store double 0.000000e+00, double* %1870, align 1, !tbaa !2452
  %1871 = load i64, i64* %RBP
  %1872 = add i64 %1871, 80
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1872 to i64*
  %1876 = load i64, i64* %1875
  store i64 %1876, i64* %RAX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 48
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 4
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = sext i32 %1882 to i64
  store i64 %1883, i64* %RCX, align 8, !tbaa !2428
  %1884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1886 = load i64, i64* %RAX
  %1887 = load i64, i64* %RCX
  %1888 = mul i64 %1887, 8
  %1889 = add i64 %1888, %1886
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 5
  store i64 %1891, i64* %PC
  %1892 = bitcast i8* %1885 to double*
  %1893 = load double, double* %1892, align 1
  %1894 = getelementptr inbounds i8, i8* %1885, i64 8
  %1895 = bitcast i8* %1894 to i64*
  %1896 = load i64, i64* %1895, align 1
  %1897 = inttoptr i64 %1889 to double*
  %1898 = load double, double* %1897
  %1899 = fdiv double %1893, %1898
  %1900 = bitcast i8* %1884 to double*
  store double %1899, double* %1900, align 1, !tbaa !2452
  %1901 = getelementptr inbounds i8, i8* %1884, i64 8
  %1902 = bitcast i8* %1901 to i64*
  store i64 %1896, i64* %1902, align 1, !tbaa !2452
  %1903 = load i64, i64* %RBP
  %1904 = add i64 %1903, 48
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 4
  store i64 %1906, i64* %PC
  %1907 = inttoptr i64 %1904 to i64*
  %1908 = load i64, i64* %1907
  store i64 %1908, i64* %RAX, align 8, !tbaa !2428
  %1909 = load i64, i64* %RBP
  %1910 = sub i64 %1909, 100
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 4
  store i64 %1912, i64* %PC
  %1913 = inttoptr i64 %1910 to i32*
  %1914 = load i32, i32* %1913
  %1915 = sext i32 %1914 to i64
  store i64 %1915, i64* %RCX, align 8, !tbaa !2428
  %1916 = load i64, i64* %RCX
  %1917 = load i64, i64* %PC
  %1918 = add i64 %1917, 7
  store i64 %1918, i64* %PC
  %1919 = sext i64 %1916 to i128
  %1920 = and i128 %1919, -18446744073709551616
  %1921 = zext i64 %1916 to i128
  %1922 = or i128 %1920, %1921
  %1923 = mul nsw i128 33800, %1922
  %1924 = trunc i128 %1923 to i64
  store i64 %1924, i64* %RCX, align 8, !tbaa !2428
  %1925 = sext i64 %1924 to i128
  %1926 = icmp ne i128 %1925, %1923
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i128 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1936, align 1, !tbaa !2447
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1937, align 1, !tbaa !2448
  %1938 = lshr i64 %1924, 63
  %1939 = trunc i64 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1939, i8* %1940, align 1, !tbaa !2449
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1927, i8* %1941, align 1, !tbaa !2450
  %1942 = load i64, i64* %RAX
  %1943 = load i64, i64* %RCX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 3
  store i64 %1945, i64* %PC
  %1946 = add i64 %1943, %1942
  store i64 %1946, i64* %RAX, align 8, !tbaa !2428
  %1947 = icmp ult i64 %1946, %1942
  %1948 = icmp ult i64 %1946, %1943
  %1949 = or i1 %1947, %1948
  %1950 = zext i1 %1949 to i8
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1950, i8* %1951, align 1, !tbaa !2432
  %1952 = trunc i64 %1946 to i32
  %1953 = and i32 %1952, 255
  %1954 = call i32 @llvm.ctpop.i32(i32 %1953) #16
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = xor i8 %1956, 1
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1957, i8* %1958, align 1, !tbaa !2446
  %1959 = xor i64 %1943, %1942
  %1960 = xor i64 %1959, %1946
  %1961 = lshr i64 %1960, 4
  %1962 = trunc i64 %1961 to i8
  %1963 = and i8 %1962, 1
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1963, i8* %1964, align 1, !tbaa !2447
  %1965 = icmp eq i64 %1946, 0
  %1966 = zext i1 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1966, i8* %1967, align 1, !tbaa !2448
  %1968 = lshr i64 %1946, 63
  %1969 = trunc i64 %1968 to i8
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1969, i8* %1970, align 1, !tbaa !2449
  %1971 = lshr i64 %1942, 63
  %1972 = lshr i64 %1943, 63
  %1973 = xor i64 %1968, %1971
  %1974 = xor i64 %1968, %1972
  %1975 = add nuw nsw i64 %1973, %1974
  %1976 = icmp eq i64 %1975, 2
  %1977 = zext i1 %1976 to i8
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1977, i8* %1978, align 1, !tbaa !2450
  %1979 = load i64, i64* %RBP
  %1980 = sub i64 %1979, 104
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 4
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to i32*
  %1984 = load i32, i32* %1983
  %1985 = sext i32 %1984 to i64
  store i64 %1985, i64* %RCX, align 8, !tbaa !2428
  %1986 = load i64, i64* %RCX
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 7
  store i64 %1988, i64* %PC
  %1989 = sext i64 %1986 to i128
  %1990 = and i128 %1989, -18446744073709551616
  %1991 = zext i64 %1986 to i128
  %1992 = or i128 %1990, %1991
  %1993 = mul nsw i128 520, %1992
  %1994 = trunc i128 %1993 to i64
  store i64 %1994, i64* %RCX, align 8, !tbaa !2428
  %1995 = sext i64 %1994 to i128
  %1996 = icmp ne i128 %1995, %1993
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1997, i8* %1998, align 1, !tbaa !2432
  %1999 = trunc i128 %1993 to i32
  %2000 = and i32 %1999, 255
  %2001 = call i32 @llvm.ctpop.i32(i32 %2000) #16
  %2002 = trunc i32 %2001 to i8
  %2003 = and i8 %2002, 1
  %2004 = xor i8 %2003, 1
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2004, i8* %2005, align 1, !tbaa !2446
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2006, align 1, !tbaa !2447
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2007, align 1, !tbaa !2448
  %2008 = lshr i64 %1994, 63
  %2009 = trunc i64 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2009, i8* %2010, align 1, !tbaa !2449
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1997, i8* %2011, align 1, !tbaa !2450
  %2012 = load i64, i64* %RAX
  %2013 = load i64, i64* %RCX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 3
  store i64 %2015, i64* %PC
  %2016 = add i64 %2013, %2012
  store i64 %2016, i64* %RAX, align 8, !tbaa !2428
  %2017 = icmp ult i64 %2016, %2012
  %2018 = icmp ult i64 %2016, %2013
  %2019 = or i1 %2017, %2018
  %2020 = zext i1 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2020, i8* %2021, align 1, !tbaa !2432
  %2022 = trunc i64 %2016 to i32
  %2023 = and i32 %2022, 255
  %2024 = call i32 @llvm.ctpop.i32(i32 %2023) #16
  %2025 = trunc i32 %2024 to i8
  %2026 = and i8 %2025, 1
  %2027 = xor i8 %2026, 1
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2027, i8* %2028, align 1, !tbaa !2446
  %2029 = xor i64 %2013, %2012
  %2030 = xor i64 %2029, %2016
  %2031 = lshr i64 %2030, 4
  %2032 = trunc i64 %2031 to i8
  %2033 = and i8 %2032, 1
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2033, i8* %2034, align 1, !tbaa !2447
  %2035 = icmp eq i64 %2016, 0
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2036, i8* %2037, align 1, !tbaa !2448
  %2038 = lshr i64 %2016, 63
  %2039 = trunc i64 %2038 to i8
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2039, i8* %2040, align 1, !tbaa !2449
  %2041 = lshr i64 %2012, 63
  %2042 = lshr i64 %2013, 63
  %2043 = xor i64 %2038, %2041
  %2044 = xor i64 %2038, %2042
  %2045 = add nuw nsw i64 %2043, %2044
  %2046 = icmp eq i64 %2045, 2
  %2047 = zext i1 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2047, i8* %2048, align 1, !tbaa !2450
  %2049 = load i64, i64* %RBP
  %2050 = sub i64 %2049, 48
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 4
  store i64 %2052, i64* %PC
  %2053 = inttoptr i64 %2050 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  store i64 %2055, i64* %RCX, align 8, !tbaa !2428
  %2056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2057 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %RCX
  %2060 = mul i64 %2059, 8
  %2061 = add i64 %2060, %2058
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 5
  store i64 %2063, i64* %PC
  %2064 = bitcast i8* %2057 to double*
  %2065 = load double, double* %2064, align 1
  %2066 = getelementptr inbounds i8, i8* %2057, i64 8
  %2067 = bitcast i8* %2066 to i64*
  %2068 = load i64, i64* %2067, align 1
  %2069 = inttoptr i64 %2061 to double*
  %2070 = load double, double* %2069
  %2071 = fmul double %2065, %2070
  %2072 = bitcast i8* %2056 to double*
  store double %2071, double* %2072, align 1, !tbaa !2452
  %2073 = getelementptr inbounds i8, i8* %2056, i64 8
  %2074 = bitcast i8* %2073 to i64*
  store i64 %2068, i64* %2074, align 1, !tbaa !2452
  %2075 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2076 = load i64, i64* %RBP
  %2077 = sub i64 %2076, 64
  %2078 = load i64, i64* %PC
  %2079 = add i64 %2078, 5
  store i64 %2079, i64* %PC
  %2080 = inttoptr i64 %2077 to double*
  %2081 = load double, double* %2080
  %2082 = bitcast i8* %2075 to double*
  store double %2081, double* %2082, align 1, !tbaa !2452
  %2083 = getelementptr inbounds i8, i8* %2075, i64 8
  %2084 = bitcast i8* %2083 to double*
  store double 0.000000e+00, double* %2084, align 1, !tbaa !2452
  %2085 = load i64, i64* %RBP
  %2086 = add i64 %2085, 64
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 4
  store i64 %2088, i64* %PC
  %2089 = inttoptr i64 %2086 to i64*
  %2090 = load i64, i64* %2089
  store i64 %2090, i64* %RAX, align 8, !tbaa !2428
  %2091 = load i64, i64* %RBP
  %2092 = sub i64 %2091, 100
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 4
  store i64 %2094, i64* %PC
  %2095 = inttoptr i64 %2092 to i32*
  %2096 = load i32, i32* %2095
  %2097 = sext i32 %2096 to i64
  store i64 %2097, i64* %RCX, align 8, !tbaa !2428
  %2098 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2099 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2100 = load i64, i64* %RAX
  %2101 = load i64, i64* %RCX
  %2102 = mul i64 %2101, 8
  %2103 = add i64 %2102, %2100
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 5
  store i64 %2105, i64* %PC
  %2106 = bitcast i8* %2099 to double*
  %2107 = load double, double* %2106, align 1
  %2108 = getelementptr inbounds i8, i8* %2099, i64 8
  %2109 = bitcast i8* %2108 to i64*
  %2110 = load i64, i64* %2109, align 1
  %2111 = inttoptr i64 %2103 to double*
  %2112 = load double, double* %2111
  %2113 = fmul double %2107, %2112
  %2114 = bitcast i8* %2098 to double*
  store double %2113, double* %2114, align 1, !tbaa !2452
  %2115 = getelementptr inbounds i8, i8* %2098, i64 8
  %2116 = bitcast i8* %2115 to i64*
  store i64 %2110, i64* %2116, align 1, !tbaa !2452
  %2117 = load i64, i64* %RBP
  %2118 = add i64 %2117, 80
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 4
  store i64 %2120, i64* %PC
  %2121 = inttoptr i64 %2118 to i64*
  %2122 = load i64, i64* %2121
  store i64 %2122, i64* %RAX, align 8, !tbaa !2428
  %2123 = load i64, i64* %RBP
  %2124 = sub i64 %2123, 48
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 4
  store i64 %2126, i64* %PC
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127
  %2129 = sext i32 %2128 to i64
  store i64 %2129, i64* %RCX, align 8, !tbaa !2428
  %2130 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2131 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2132 = load i64, i64* %RAX
  %2133 = load i64, i64* %RCX
  %2134 = mul i64 %2133, 8
  %2135 = add i64 %2134, %2132
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 5
  store i64 %2137, i64* %PC
  %2138 = bitcast i8* %2131 to double*
  %2139 = load double, double* %2138, align 1
  %2140 = getelementptr inbounds i8, i8* %2131, i64 8
  %2141 = bitcast i8* %2140 to i64*
  %2142 = load i64, i64* %2141, align 1
  %2143 = inttoptr i64 %2135 to double*
  %2144 = load double, double* %2143
  %2145 = fdiv double %2139, %2144
  %2146 = bitcast i8* %2130 to double*
  store double %2145, double* %2146, align 1, !tbaa !2452
  %2147 = getelementptr inbounds i8, i8* %2130, i64 8
  %2148 = bitcast i8* %2147 to i64*
  store i64 %2142, i64* %2148, align 1, !tbaa !2452
  %2149 = load i64, i64* %RBP
  %2150 = add i64 %2149, 16
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 4
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to i64*
  %2154 = load i64, i64* %2153
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 100
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 4
  store i64 %2158, i64* %PC
  %2159 = inttoptr i64 %2156 to i32*
  %2160 = load i32, i32* %2159
  %2161 = sext i32 %2160 to i64
  store i64 %2161, i64* %RCX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RCX
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 7
  store i64 %2164, i64* %PC
  %2165 = sext i64 %2162 to i128
  %2166 = and i128 %2165, -18446744073709551616
  %2167 = zext i64 %2162 to i128
  %2168 = or i128 %2166, %2167
  %2169 = mul nsw i128 520, %2168
  %2170 = trunc i128 %2169 to i64
  store i64 %2170, i64* %RCX, align 8, !tbaa !2428
  %2171 = sext i64 %2170 to i128
  %2172 = icmp ne i128 %2171, %2169
  %2173 = zext i1 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2173, i8* %2174, align 1, !tbaa !2432
  %2175 = trunc i128 %2169 to i32
  %2176 = and i32 %2175, 255
  %2177 = call i32 @llvm.ctpop.i32(i32 %2176) #16
  %2178 = trunc i32 %2177 to i8
  %2179 = and i8 %2178, 1
  %2180 = xor i8 %2179, 1
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2180, i8* %2181, align 1, !tbaa !2446
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2182, align 1, !tbaa !2447
  %2183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2183, align 1, !tbaa !2448
  %2184 = lshr i64 %2170, 63
  %2185 = trunc i64 %2184 to i8
  %2186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2185, i8* %2186, align 1, !tbaa !2449
  %2187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2173, i8* %2187, align 1, !tbaa !2450
  %2188 = load i64, i64* %RAX
  %2189 = load i64, i64* %RCX
  %2190 = load i64, i64* %PC
  %2191 = add i64 %2190, 3
  store i64 %2191, i64* %PC
  %2192 = add i64 %2189, %2188
  store i64 %2192, i64* %RAX, align 8, !tbaa !2428
  %2193 = icmp ult i64 %2192, %2188
  %2194 = icmp ult i64 %2192, %2189
  %2195 = or i1 %2193, %2194
  %2196 = zext i1 %2195 to i8
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2196, i8* %2197, align 1, !tbaa !2432
  %2198 = trunc i64 %2192 to i32
  %2199 = and i32 %2198, 255
  %2200 = call i32 @llvm.ctpop.i32(i32 %2199) #16
  %2201 = trunc i32 %2200 to i8
  %2202 = and i8 %2201, 1
  %2203 = xor i8 %2202, 1
  %2204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2203, i8* %2204, align 1, !tbaa !2446
  %2205 = xor i64 %2189, %2188
  %2206 = xor i64 %2205, %2192
  %2207 = lshr i64 %2206, 4
  %2208 = trunc i64 %2207 to i8
  %2209 = and i8 %2208, 1
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2209, i8* %2210, align 1, !tbaa !2447
  %2211 = icmp eq i64 %2192, 0
  %2212 = zext i1 %2211 to i8
  %2213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2212, i8* %2213, align 1, !tbaa !2448
  %2214 = lshr i64 %2192, 63
  %2215 = trunc i64 %2214 to i8
  %2216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2215, i8* %2216, align 1, !tbaa !2449
  %2217 = lshr i64 %2188, 63
  %2218 = lshr i64 %2189, 63
  %2219 = xor i64 %2214, %2217
  %2220 = xor i64 %2214, %2218
  %2221 = add nuw nsw i64 %2219, %2220
  %2222 = icmp eq i64 %2221, 2
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2223, i8* %2224, align 1, !tbaa !2450
  %2225 = load i64, i64* %RBP
  %2226 = sub i64 %2225, 104
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 4
  store i64 %2228, i64* %PC
  %2229 = inttoptr i64 %2226 to i32*
  %2230 = load i32, i32* %2229
  %2231 = sext i32 %2230 to i64
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2233 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2234 = load i64, i64* %RAX
  %2235 = load i64, i64* %RCX
  %2236 = mul i64 %2235, 8
  %2237 = add i64 %2236, %2234
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 5
  store i64 %2239, i64* %PC
  %2240 = bitcast i8* %2233 to double*
  %2241 = load double, double* %2240, align 1
  %2242 = getelementptr inbounds i8, i8* %2233, i64 8
  %2243 = bitcast i8* %2242 to i64*
  %2244 = load i64, i64* %2243, align 1
  %2245 = inttoptr i64 %2237 to double*
  %2246 = load double, double* %2245
  %2247 = fmul double %2241, %2246
  %2248 = bitcast i8* %2232 to double*
  store double %2247, double* %2248, align 1, !tbaa !2452
  %2249 = getelementptr inbounds i8, i8* %2232, i64 8
  %2250 = bitcast i8* %2249 to i64*
  store i64 %2244, i64* %2250, align 1, !tbaa !2452
  %2251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2252 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2253 = bitcast %union.vec128_t* %XMM1 to i8*
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 4
  store i64 %2255, i64* %PC
  %2256 = bitcast i8* %2252 to double*
  %2257 = load double, double* %2256, align 1
  %2258 = getelementptr inbounds i8, i8* %2252, i64 8
  %2259 = bitcast i8* %2258 to i64*
  %2260 = load i64, i64* %2259, align 1
  %2261 = bitcast i8* %2253 to double*
  %2262 = load double, double* %2261, align 1
  %2263 = fadd double %2257, %2262
  %2264 = bitcast i8* %2251 to double*
  store double %2263, double* %2264, align 1, !tbaa !2452
  %2265 = getelementptr inbounds i8, i8* %2251, i64 8
  %2266 = bitcast i8* %2265 to i64*
  store i64 %2260, i64* %2266, align 1, !tbaa !2452
  %2267 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2268 = load i64, i64* %RBP
  %2269 = sub i64 %2268, 64
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 5
  store i64 %2271, i64* %PC
  %2272 = inttoptr i64 %2269 to double*
  %2273 = load double, double* %2272
  %2274 = bitcast i8* %2267 to double*
  store double %2273, double* %2274, align 1, !tbaa !2452
  %2275 = getelementptr inbounds i8, i8* %2267, i64 8
  %2276 = bitcast i8* %2275 to double*
  store double 0.000000e+00, double* %2276, align 1, !tbaa !2452
  %2277 = load i64, i64* %RBP
  %2278 = add i64 %2277, 56
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i64*
  %2282 = load i64, i64* %2281
  store i64 %2282, i64* %RAX, align 8, !tbaa !2428
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 100
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 4
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2284 to i32*
  %2288 = load i32, i32* %2287
  %2289 = sext i32 %2288 to i64
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2291 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2292 = load i64, i64* %RAX
  %2293 = load i64, i64* %RCX
  %2294 = mul i64 %2293, 8
  %2295 = add i64 %2294, %2292
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 5
  store i64 %2297, i64* %PC
  %2298 = bitcast i8* %2291 to double*
  %2299 = load double, double* %2298, align 1
  %2300 = getelementptr inbounds i8, i8* %2291, i64 8
  %2301 = bitcast i8* %2300 to i64*
  %2302 = load i64, i64* %2301, align 1
  %2303 = inttoptr i64 %2295 to double*
  %2304 = load double, double* %2303
  %2305 = fmul double %2299, %2304
  %2306 = bitcast i8* %2290 to double*
  store double %2305, double* %2306, align 1, !tbaa !2452
  %2307 = getelementptr inbounds i8, i8* %2290, i64 8
  %2308 = bitcast i8* %2307 to i64*
  store i64 %2302, i64* %2308, align 1, !tbaa !2452
  %2309 = load i64, i64* %RBP
  %2310 = add i64 %2309, 80
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 4
  store i64 %2312, i64* %PC
  %2313 = inttoptr i64 %2310 to i64*
  %2314 = load i64, i64* %2313
  store i64 %2314, i64* %RAX, align 8, !tbaa !2428
  %2315 = load i64, i64* %RBP
  %2316 = sub i64 %2315, 48
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 4
  store i64 %2318, i64* %PC
  %2319 = inttoptr i64 %2316 to i32*
  %2320 = load i32, i32* %2319
  %2321 = sext i32 %2320 to i64
  store i64 %2321, i64* %RCX, align 8, !tbaa !2428
  %2322 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2323 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2324 = load i64, i64* %RAX
  %2325 = load i64, i64* %RCX
  %2326 = mul i64 %2325, 8
  %2327 = add i64 %2326, %2324
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 5
  store i64 %2329, i64* %PC
  %2330 = bitcast i8* %2323 to double*
  %2331 = load double, double* %2330, align 1
  %2332 = getelementptr inbounds i8, i8* %2323, i64 8
  %2333 = bitcast i8* %2332 to i64*
  %2334 = load i64, i64* %2333, align 1
  %2335 = inttoptr i64 %2327 to double*
  %2336 = load double, double* %2335
  %2337 = fdiv double %2331, %2336
  %2338 = bitcast i8* %2322 to double*
  store double %2337, double* %2338, align 1, !tbaa !2452
  %2339 = getelementptr inbounds i8, i8* %2322, i64 8
  %2340 = bitcast i8* %2339 to i64*
  store i64 %2334, i64* %2340, align 1, !tbaa !2452
  %2341 = load i64, i64* %RBP
  %2342 = add i64 %2341, 24
  %2343 = load i64, i64* %PC
  %2344 = add i64 %2343, 4
  store i64 %2344, i64* %PC
  %2345 = inttoptr i64 %2342 to i64*
  %2346 = load i64, i64* %2345
  store i64 %2346, i64* %RAX, align 8, !tbaa !2428
  %2347 = load i64, i64* %RBP
  %2348 = sub i64 %2347, 100
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 4
  store i64 %2350, i64* %PC
  %2351 = inttoptr i64 %2348 to i32*
  %2352 = load i32, i32* %2351
  %2353 = sext i32 %2352 to i64
  store i64 %2353, i64* %RCX, align 8, !tbaa !2428
  %2354 = load i64, i64* %RCX
  %2355 = load i64, i64* %PC
  %2356 = add i64 %2355, 7
  store i64 %2356, i64* %PC
  %2357 = sext i64 %2354 to i128
  %2358 = and i128 %2357, -18446744073709551616
  %2359 = zext i64 %2354 to i128
  %2360 = or i128 %2358, %2359
  %2361 = mul nsw i128 33800, %2360
  %2362 = trunc i128 %2361 to i64
  store i64 %2362, i64* %RCX, align 8, !tbaa !2428
  %2363 = sext i64 %2362 to i128
  %2364 = icmp ne i128 %2363, %2361
  %2365 = zext i1 %2364 to i8
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2365, i8* %2366, align 1, !tbaa !2432
  %2367 = trunc i128 %2361 to i32
  %2368 = and i32 %2367, 255
  %2369 = call i32 @llvm.ctpop.i32(i32 %2368) #16
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = xor i8 %2371, 1
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2372, i8* %2373, align 1, !tbaa !2446
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2374, align 1, !tbaa !2447
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2375, align 1, !tbaa !2448
  %2376 = lshr i64 %2362, 63
  %2377 = trunc i64 %2376 to i8
  %2378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2377, i8* %2378, align 1, !tbaa !2449
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2365, i8* %2379, align 1, !tbaa !2450
  %2380 = load i64, i64* %RAX
  %2381 = load i64, i64* %RCX
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 3
  store i64 %2383, i64* %PC
  %2384 = add i64 %2381, %2380
  store i64 %2384, i64* %RAX, align 8, !tbaa !2428
  %2385 = icmp ult i64 %2384, %2380
  %2386 = icmp ult i64 %2384, %2381
  %2387 = or i1 %2385, %2386
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2388, i8* %2389, align 1, !tbaa !2432
  %2390 = trunc i64 %2384 to i32
  %2391 = and i32 %2390, 255
  %2392 = call i32 @llvm.ctpop.i32(i32 %2391) #16
  %2393 = trunc i32 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = xor i8 %2394, 1
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2395, i8* %2396, align 1, !tbaa !2446
  %2397 = xor i64 %2381, %2380
  %2398 = xor i64 %2397, %2384
  %2399 = lshr i64 %2398, 4
  %2400 = trunc i64 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2401, i8* %2402, align 1, !tbaa !2447
  %2403 = icmp eq i64 %2384, 0
  %2404 = zext i1 %2403 to i8
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2404, i8* %2405, align 1, !tbaa !2448
  %2406 = lshr i64 %2384, 63
  %2407 = trunc i64 %2406 to i8
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2407, i8* %2408, align 1, !tbaa !2449
  %2409 = lshr i64 %2380, 63
  %2410 = lshr i64 %2381, 63
  %2411 = xor i64 %2406, %2409
  %2412 = xor i64 %2406, %2410
  %2413 = add nuw nsw i64 %2411, %2412
  %2414 = icmp eq i64 %2413, 2
  %2415 = zext i1 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2415, i8* %2416, align 1, !tbaa !2450
  %2417 = load i64, i64* %RBP
  %2418 = sub i64 %2417, 104
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 4
  store i64 %2420, i64* %PC
  %2421 = inttoptr i64 %2418 to i32*
  %2422 = load i32, i32* %2421
  %2423 = sext i32 %2422 to i64
  store i64 %2423, i64* %RCX, align 8, !tbaa !2428
  %2424 = load i64, i64* %RCX
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 7
  store i64 %2426, i64* %PC
  %2427 = sext i64 %2424 to i128
  %2428 = and i128 %2427, -18446744073709551616
  %2429 = zext i64 %2424 to i128
  %2430 = or i128 %2428, %2429
  %2431 = mul nsw i128 520, %2430
  %2432 = trunc i128 %2431 to i64
  store i64 %2432, i64* %RCX, align 8, !tbaa !2428
  %2433 = sext i64 %2432 to i128
  %2434 = icmp ne i128 %2433, %2431
  %2435 = zext i1 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2435, i8* %2436, align 1, !tbaa !2432
  %2437 = trunc i128 %2431 to i32
  %2438 = and i32 %2437, 255
  %2439 = call i32 @llvm.ctpop.i32(i32 %2438) #16
  %2440 = trunc i32 %2439 to i8
  %2441 = and i8 %2440, 1
  %2442 = xor i8 %2441, 1
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2442, i8* %2443, align 1, !tbaa !2446
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2444, align 1, !tbaa !2447
  %2445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2445, align 1, !tbaa !2448
  %2446 = lshr i64 %2432, 63
  %2447 = trunc i64 %2446 to i8
  %2448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2447, i8* %2448, align 1, !tbaa !2449
  %2449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2435, i8* %2449, align 1, !tbaa !2450
  %2450 = load i64, i64* %RAX
  %2451 = load i64, i64* %RCX
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 3
  store i64 %2453, i64* %PC
  %2454 = add i64 %2451, %2450
  store i64 %2454, i64* %RAX, align 8, !tbaa !2428
  %2455 = icmp ult i64 %2454, %2450
  %2456 = icmp ult i64 %2454, %2451
  %2457 = or i1 %2455, %2456
  %2458 = zext i1 %2457 to i8
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2458, i8* %2459, align 1, !tbaa !2432
  %2460 = trunc i64 %2454 to i32
  %2461 = and i32 %2460, 255
  %2462 = call i32 @llvm.ctpop.i32(i32 %2461) #16
  %2463 = trunc i32 %2462 to i8
  %2464 = and i8 %2463, 1
  %2465 = xor i8 %2464, 1
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2465, i8* %2466, align 1, !tbaa !2446
  %2467 = xor i64 %2451, %2450
  %2468 = xor i64 %2467, %2454
  %2469 = lshr i64 %2468, 4
  %2470 = trunc i64 %2469 to i8
  %2471 = and i8 %2470, 1
  %2472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2471, i8* %2472, align 1, !tbaa !2447
  %2473 = icmp eq i64 %2454, 0
  %2474 = zext i1 %2473 to i8
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2474, i8* %2475, align 1, !tbaa !2448
  %2476 = lshr i64 %2454, 63
  %2477 = trunc i64 %2476 to i8
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2477, i8* %2478, align 1, !tbaa !2449
  %2479 = lshr i64 %2450, 63
  %2480 = lshr i64 %2451, 63
  %2481 = xor i64 %2476, %2479
  %2482 = xor i64 %2476, %2480
  %2483 = add nuw nsw i64 %2481, %2482
  %2484 = icmp eq i64 %2483, 2
  %2485 = zext i1 %2484 to i8
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2485, i8* %2486, align 1, !tbaa !2450
  %2487 = load i64, i64* %RBP
  %2488 = sub i64 %2487, 48
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 4
  store i64 %2490, i64* %PC
  %2491 = inttoptr i64 %2488 to i32*
  %2492 = load i32, i32* %2491
  %2493 = sext i32 %2492 to i64
  store i64 %2493, i64* %RCX, align 8, !tbaa !2428
  %2494 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2495 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2496 = load i64, i64* %RAX
  %2497 = load i64, i64* %RCX
  %2498 = mul i64 %2497, 8
  %2499 = add i64 %2498, %2496
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 5
  store i64 %2501, i64* %PC
  %2502 = bitcast i8* %2495 to double*
  %2503 = load double, double* %2502, align 1
  %2504 = getelementptr inbounds i8, i8* %2495, i64 8
  %2505 = bitcast i8* %2504 to i64*
  %2506 = load i64, i64* %2505, align 1
  %2507 = inttoptr i64 %2499 to double*
  %2508 = load double, double* %2507
  %2509 = fmul double %2503, %2508
  %2510 = bitcast i8* %2494 to double*
  store double %2509, double* %2510, align 1, !tbaa !2452
  %2511 = getelementptr inbounds i8, i8* %2494, i64 8
  %2512 = bitcast i8* %2511 to i64*
  store i64 %2506, i64* %2512, align 1, !tbaa !2452
  %2513 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2514 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2515 = bitcast %union.vec128_t* %XMM1 to i8*
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 4
  store i64 %2517, i64* %PC
  %2518 = bitcast i8* %2514 to double*
  %2519 = load double, double* %2518, align 1
  %2520 = getelementptr inbounds i8, i8* %2514, i64 8
  %2521 = bitcast i8* %2520 to i64*
  %2522 = load i64, i64* %2521, align 1
  %2523 = bitcast i8* %2515 to double*
  %2524 = load double, double* %2523, align 1
  %2525 = fsub double %2519, %2524
  %2526 = bitcast i8* %2513 to double*
  store double %2525, double* %2526, align 1, !tbaa !2452
  %2527 = getelementptr inbounds i8, i8* %2513, i64 8
  %2528 = bitcast i8* %2527 to i64*
  store i64 %2522, i64* %2528, align 1, !tbaa !2452
  %2529 = load i64, i64* %RBP
  %2530 = add i64 %2529, 48
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 4
  store i64 %2532, i64* %PC
  %2533 = inttoptr i64 %2530 to i64*
  %2534 = load i64, i64* %2533
  store i64 %2534, i64* %RAX, align 8, !tbaa !2428
  %2535 = load i64, i64* %RBP
  %2536 = sub i64 %2535, 100
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 4
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sext i32 %2540 to i64
  store i64 %2541, i64* %RCX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RCX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 7
  store i64 %2544, i64* %PC
  %2545 = sext i64 %2542 to i128
  %2546 = and i128 %2545, -18446744073709551616
  %2547 = zext i64 %2542 to i128
  %2548 = or i128 %2546, %2547
  %2549 = mul nsw i128 33800, %2548
  %2550 = trunc i128 %2549 to i64
  store i64 %2550, i64* %RCX, align 8, !tbaa !2428
  %2551 = sext i64 %2550 to i128
  %2552 = icmp ne i128 %2551, %2549
  %2553 = zext i1 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2553, i8* %2554, align 1, !tbaa !2432
  %2555 = trunc i128 %2549 to i32
  %2556 = and i32 %2555, 255
  %2557 = call i32 @llvm.ctpop.i32(i32 %2556) #16
  %2558 = trunc i32 %2557 to i8
  %2559 = and i8 %2558, 1
  %2560 = xor i8 %2559, 1
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2560, i8* %2561, align 1, !tbaa !2446
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2562, align 1, !tbaa !2447
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2563, align 1, !tbaa !2448
  %2564 = lshr i64 %2550, 63
  %2565 = trunc i64 %2564 to i8
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2565, i8* %2566, align 1, !tbaa !2449
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2553, i8* %2567, align 1, !tbaa !2450
  %2568 = load i64, i64* %RAX
  %2569 = load i64, i64* %RCX
  %2570 = load i64, i64* %PC
  %2571 = add i64 %2570, 3
  store i64 %2571, i64* %PC
  %2572 = add i64 %2569, %2568
  store i64 %2572, i64* %RAX, align 8, !tbaa !2428
  %2573 = icmp ult i64 %2572, %2568
  %2574 = icmp ult i64 %2572, %2569
  %2575 = or i1 %2573, %2574
  %2576 = zext i1 %2575 to i8
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2576, i8* %2577, align 1, !tbaa !2432
  %2578 = trunc i64 %2572 to i32
  %2579 = and i32 %2578, 255
  %2580 = call i32 @llvm.ctpop.i32(i32 %2579) #16
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  %2583 = xor i8 %2582, 1
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2583, i8* %2584, align 1, !tbaa !2446
  %2585 = xor i64 %2569, %2568
  %2586 = xor i64 %2585, %2572
  %2587 = lshr i64 %2586, 4
  %2588 = trunc i64 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2589, i8* %2590, align 1, !tbaa !2447
  %2591 = icmp eq i64 %2572, 0
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2592, i8* %2593, align 1, !tbaa !2448
  %2594 = lshr i64 %2572, 63
  %2595 = trunc i64 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2595, i8* %2596, align 1, !tbaa !2449
  %2597 = lshr i64 %2568, 63
  %2598 = lshr i64 %2569, 63
  %2599 = xor i64 %2594, %2597
  %2600 = xor i64 %2594, %2598
  %2601 = add nuw nsw i64 %2599, %2600
  %2602 = icmp eq i64 %2601, 2
  %2603 = zext i1 %2602 to i8
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2603, i8* %2604, align 1, !tbaa !2450
  %2605 = load i64, i64* %RBP
  %2606 = sub i64 %2605, 104
  %2607 = load i64, i64* %PC
  %2608 = add i64 %2607, 4
  store i64 %2608, i64* %PC
  %2609 = inttoptr i64 %2606 to i32*
  %2610 = load i32, i32* %2609
  %2611 = sext i32 %2610 to i64
  store i64 %2611, i64* %RCX, align 8, !tbaa !2428
  %2612 = load i64, i64* %RCX
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 7
  store i64 %2614, i64* %PC
  %2615 = sext i64 %2612 to i128
  %2616 = and i128 %2615, -18446744073709551616
  %2617 = zext i64 %2612 to i128
  %2618 = or i128 %2616, %2617
  %2619 = mul nsw i128 520, %2618
  %2620 = trunc i128 %2619 to i64
  store i64 %2620, i64* %RCX, align 8, !tbaa !2428
  %2621 = sext i64 %2620 to i128
  %2622 = icmp ne i128 %2621, %2619
  %2623 = zext i1 %2622 to i8
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2623, i8* %2624, align 1, !tbaa !2432
  %2625 = trunc i128 %2619 to i32
  %2626 = and i32 %2625, 255
  %2627 = call i32 @llvm.ctpop.i32(i32 %2626) #16
  %2628 = trunc i32 %2627 to i8
  %2629 = and i8 %2628, 1
  %2630 = xor i8 %2629, 1
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2630, i8* %2631, align 1, !tbaa !2446
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2632, align 1, !tbaa !2447
  %2633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2633, align 1, !tbaa !2448
  %2634 = lshr i64 %2620, 63
  %2635 = trunc i64 %2634 to i8
  %2636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2635, i8* %2636, align 1, !tbaa !2449
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2623, i8* %2637, align 1, !tbaa !2450
  %2638 = load i64, i64* %RAX
  %2639 = load i64, i64* %RCX
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 3
  store i64 %2641, i64* %PC
  %2642 = add i64 %2639, %2638
  store i64 %2642, i64* %RAX, align 8, !tbaa !2428
  %2643 = icmp ult i64 %2642, %2638
  %2644 = icmp ult i64 %2642, %2639
  %2645 = or i1 %2643, %2644
  %2646 = zext i1 %2645 to i8
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2646, i8* %2647, align 1, !tbaa !2432
  %2648 = trunc i64 %2642 to i32
  %2649 = and i32 %2648, 255
  %2650 = call i32 @llvm.ctpop.i32(i32 %2649) #16
  %2651 = trunc i32 %2650 to i8
  %2652 = and i8 %2651, 1
  %2653 = xor i8 %2652, 1
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2653, i8* %2654, align 1, !tbaa !2446
  %2655 = xor i64 %2639, %2638
  %2656 = xor i64 %2655, %2642
  %2657 = lshr i64 %2656, 4
  %2658 = trunc i64 %2657 to i8
  %2659 = and i8 %2658, 1
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2659, i8* %2660, align 1, !tbaa !2447
  %2661 = icmp eq i64 %2642, 0
  %2662 = zext i1 %2661 to i8
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2662, i8* %2663, align 1, !tbaa !2448
  %2664 = lshr i64 %2642, 63
  %2665 = trunc i64 %2664 to i8
  %2666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2665, i8* %2666, align 1, !tbaa !2449
  %2667 = lshr i64 %2638, 63
  %2668 = lshr i64 %2639, 63
  %2669 = xor i64 %2664, %2667
  %2670 = xor i64 %2664, %2668
  %2671 = add nuw nsw i64 %2669, %2670
  %2672 = icmp eq i64 %2671, 2
  %2673 = zext i1 %2672 to i8
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2673, i8* %2674, align 1, !tbaa !2450
  %2675 = load i64, i64* %RBP
  %2676 = sub i64 %2675, 48
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 4
  store i64 %2678, i64* %PC
  %2679 = inttoptr i64 %2676 to i32*
  %2680 = load i32, i32* %2679
  %2681 = sext i32 %2680 to i64
  store i64 %2681, i64* %RCX, align 8, !tbaa !2428
  %2682 = load i64, i64* %RAX
  %2683 = load i64, i64* %RCX
  %2684 = mul i64 %2683, 8
  %2685 = add i64 %2684, %2682
  %2686 = bitcast %union.vec128_t* %XMM0 to i8*
  %2687 = load i64, i64* %PC
  %2688 = add i64 %2687, 5
  store i64 %2688, i64* %PC
  %2689 = bitcast i8* %2686 to double*
  %2690 = load double, double* %2689, align 1
  %2691 = inttoptr i64 %2685 to double*
  store double %2690, double* %2691
  %2692 = load i64, i64* %RBP
  %2693 = add i64 %2692, 16
  %2694 = load i64, i64* %PC
  %2695 = add i64 %2694, 4
  store i64 %2695, i64* %PC
  %2696 = inttoptr i64 %2693 to i64*
  %2697 = load i64, i64* %2696
  store i64 %2697, i64* %RAX, align 8, !tbaa !2428
  %2698 = load i64, i64* %RBP
  %2699 = sub i64 %2698, 100
  %2700 = load i64, i64* %PC
  %2701 = add i64 %2700, 4
  store i64 %2701, i64* %PC
  %2702 = inttoptr i64 %2699 to i32*
  %2703 = load i32, i32* %2702
  %2704 = sext i32 %2703 to i64
  store i64 %2704, i64* %RCX, align 8, !tbaa !2428
  %2705 = load i64, i64* %RCX
  %2706 = load i64, i64* %PC
  %2707 = add i64 %2706, 7
  store i64 %2707, i64* %PC
  %2708 = sext i64 %2705 to i128
  %2709 = and i128 %2708, -18446744073709551616
  %2710 = zext i64 %2705 to i128
  %2711 = or i128 %2709, %2710
  %2712 = mul nsw i128 520, %2711
  %2713 = trunc i128 %2712 to i64
  store i64 %2713, i64* %RCX, align 8, !tbaa !2428
  %2714 = sext i64 %2713 to i128
  %2715 = icmp ne i128 %2714, %2712
  %2716 = zext i1 %2715 to i8
  %2717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2716, i8* %2717, align 1, !tbaa !2432
  %2718 = trunc i128 %2712 to i32
  %2719 = and i32 %2718, 255
  %2720 = call i32 @llvm.ctpop.i32(i32 %2719) #16
  %2721 = trunc i32 %2720 to i8
  %2722 = and i8 %2721, 1
  %2723 = xor i8 %2722, 1
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2723, i8* %2724, align 1, !tbaa !2446
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2725, align 1, !tbaa !2447
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2726, align 1, !tbaa !2448
  %2727 = lshr i64 %2713, 63
  %2728 = trunc i64 %2727 to i8
  %2729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2728, i8* %2729, align 1, !tbaa !2449
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2716, i8* %2730, align 1, !tbaa !2450
  %2731 = load i64, i64* %RAX
  %2732 = load i64, i64* %RCX
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 3
  store i64 %2734, i64* %PC
  %2735 = add i64 %2732, %2731
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = icmp ult i64 %2735, %2731
  %2737 = icmp ult i64 %2735, %2732
  %2738 = or i1 %2736, %2737
  %2739 = zext i1 %2738 to i8
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2739, i8* %2740, align 1, !tbaa !2432
  %2741 = trunc i64 %2735 to i32
  %2742 = and i32 %2741, 255
  %2743 = call i32 @llvm.ctpop.i32(i32 %2742) #16
  %2744 = trunc i32 %2743 to i8
  %2745 = and i8 %2744, 1
  %2746 = xor i8 %2745, 1
  %2747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2746, i8* %2747, align 1, !tbaa !2446
  %2748 = xor i64 %2732, %2731
  %2749 = xor i64 %2748, %2735
  %2750 = lshr i64 %2749, 4
  %2751 = trunc i64 %2750 to i8
  %2752 = and i8 %2751, 1
  %2753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2752, i8* %2753, align 1, !tbaa !2447
  %2754 = icmp eq i64 %2735, 0
  %2755 = zext i1 %2754 to i8
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2755, i8* %2756, align 1, !tbaa !2448
  %2757 = lshr i64 %2735, 63
  %2758 = trunc i64 %2757 to i8
  %2759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2758, i8* %2759, align 1, !tbaa !2449
  %2760 = lshr i64 %2731, 63
  %2761 = lshr i64 %2732, 63
  %2762 = xor i64 %2757, %2760
  %2763 = xor i64 %2757, %2761
  %2764 = add nuw nsw i64 %2762, %2763
  %2765 = icmp eq i64 %2764, 2
  %2766 = zext i1 %2765 to i8
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2766, i8* %2767, align 1, !tbaa !2450
  %2768 = load i64, i64* %RBP
  %2769 = sub i64 %2768, 104
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 4
  store i64 %2771, i64* %PC
  %2772 = inttoptr i64 %2769 to i32*
  %2773 = load i32, i32* %2772
  %2774 = sext i32 %2773 to i64
  store i64 %2774, i64* %RCX, align 8, !tbaa !2428
  %2775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2776 = load i64, i64* %RAX
  %2777 = load i64, i64* %RCX
  %2778 = mul i64 %2777, 8
  %2779 = add i64 %2778, %2776
  %2780 = load i64, i64* %PC
  %2781 = add i64 %2780, 5
  store i64 %2781, i64* %PC
  %2782 = inttoptr i64 %2779 to double*
  %2783 = load double, double* %2782
  %2784 = bitcast i8* %2775 to double*
  store double %2783, double* %2784, align 1, !tbaa !2452
  %2785 = getelementptr inbounds i8, i8* %2775, i64 8
  %2786 = bitcast i8* %2785 to double*
  store double 0.000000e+00, double* %2786, align 1, !tbaa !2452
  %2787 = load i64, i64* %RBP
  %2788 = add i64 %2787, 24
  %2789 = load i64, i64* %PC
  %2790 = add i64 %2789, 4
  store i64 %2790, i64* %PC
  %2791 = inttoptr i64 %2788 to i64*
  %2792 = load i64, i64* %2791
  store i64 %2792, i64* %RAX, align 8, !tbaa !2428
  %2793 = load i64, i64* %RBP
  %2794 = sub i64 %2793, 100
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 4
  store i64 %2796, i64* %PC
  %2797 = inttoptr i64 %2794 to i32*
  %2798 = load i32, i32* %2797
  %2799 = sext i32 %2798 to i64
  store i64 %2799, i64* %RCX, align 8, !tbaa !2428
  %2800 = load i64, i64* %RCX
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 7
  store i64 %2802, i64* %PC
  %2803 = sext i64 %2800 to i128
  %2804 = and i128 %2803, -18446744073709551616
  %2805 = zext i64 %2800 to i128
  %2806 = or i128 %2804, %2805
  %2807 = mul nsw i128 33800, %2806
  %2808 = trunc i128 %2807 to i64
  store i64 %2808, i64* %RCX, align 8, !tbaa !2428
  %2809 = sext i64 %2808 to i128
  %2810 = icmp ne i128 %2809, %2807
  %2811 = zext i1 %2810 to i8
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2811, i8* %2812, align 1, !tbaa !2432
  %2813 = trunc i128 %2807 to i32
  %2814 = and i32 %2813, 255
  %2815 = call i32 @llvm.ctpop.i32(i32 %2814) #16
  %2816 = trunc i32 %2815 to i8
  %2817 = and i8 %2816, 1
  %2818 = xor i8 %2817, 1
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2818, i8* %2819, align 1, !tbaa !2446
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2820, align 1, !tbaa !2447
  %2821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2821, align 1, !tbaa !2448
  %2822 = lshr i64 %2808, 63
  %2823 = trunc i64 %2822 to i8
  %2824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2823, i8* %2824, align 1, !tbaa !2449
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2811, i8* %2825, align 1, !tbaa !2450
  %2826 = load i64, i64* %RAX
  %2827 = load i64, i64* %RCX
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 3
  store i64 %2829, i64* %PC
  %2830 = add i64 %2827, %2826
  store i64 %2830, i64* %RAX, align 8, !tbaa !2428
  %2831 = icmp ult i64 %2830, %2826
  %2832 = icmp ult i64 %2830, %2827
  %2833 = or i1 %2831, %2832
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2834, i8* %2835, align 1, !tbaa !2432
  %2836 = trunc i64 %2830 to i32
  %2837 = and i32 %2836, 255
  %2838 = call i32 @llvm.ctpop.i32(i32 %2837) #16
  %2839 = trunc i32 %2838 to i8
  %2840 = and i8 %2839, 1
  %2841 = xor i8 %2840, 1
  %2842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2841, i8* %2842, align 1, !tbaa !2446
  %2843 = xor i64 %2827, %2826
  %2844 = xor i64 %2843, %2830
  %2845 = lshr i64 %2844, 4
  %2846 = trunc i64 %2845 to i8
  %2847 = and i8 %2846, 1
  %2848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2847, i8* %2848, align 1, !tbaa !2447
  %2849 = icmp eq i64 %2830, 0
  %2850 = zext i1 %2849 to i8
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2850, i8* %2851, align 1, !tbaa !2448
  %2852 = lshr i64 %2830, 63
  %2853 = trunc i64 %2852 to i8
  %2854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2853, i8* %2854, align 1, !tbaa !2449
  %2855 = lshr i64 %2826, 63
  %2856 = lshr i64 %2827, 63
  %2857 = xor i64 %2852, %2855
  %2858 = xor i64 %2852, %2856
  %2859 = add nuw nsw i64 %2857, %2858
  %2860 = icmp eq i64 %2859, 2
  %2861 = zext i1 %2860 to i8
  %2862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2861, i8* %2862, align 1, !tbaa !2450
  %2863 = load i64, i64* %RBP
  %2864 = sub i64 %2863, 104
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 4
  store i64 %2866, i64* %PC
  %2867 = inttoptr i64 %2864 to i32*
  %2868 = load i32, i32* %2867
  %2869 = sext i32 %2868 to i64
  store i64 %2869, i64* %RCX, align 8, !tbaa !2428
  %2870 = load i64, i64* %RCX
  %2871 = load i64, i64* %PC
  %2872 = add i64 %2871, 7
  store i64 %2872, i64* %PC
  %2873 = sext i64 %2870 to i128
  %2874 = and i128 %2873, -18446744073709551616
  %2875 = zext i64 %2870 to i128
  %2876 = or i128 %2874, %2875
  %2877 = mul nsw i128 520, %2876
  %2878 = trunc i128 %2877 to i64
  store i64 %2878, i64* %RCX, align 8, !tbaa !2428
  %2879 = sext i64 %2878 to i128
  %2880 = icmp ne i128 %2879, %2877
  %2881 = zext i1 %2880 to i8
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2881, i8* %2882, align 1, !tbaa !2432
  %2883 = trunc i128 %2877 to i32
  %2884 = and i32 %2883, 255
  %2885 = call i32 @llvm.ctpop.i32(i32 %2884) #16
  %2886 = trunc i32 %2885 to i8
  %2887 = and i8 %2886, 1
  %2888 = xor i8 %2887, 1
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2888, i8* %2889, align 1, !tbaa !2446
  %2890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2890, align 1, !tbaa !2447
  %2891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2891, align 1, !tbaa !2448
  %2892 = lshr i64 %2878, 63
  %2893 = trunc i64 %2892 to i8
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2893, i8* %2894, align 1, !tbaa !2449
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2881, i8* %2895, align 1, !tbaa !2450
  %2896 = load i64, i64* %RAX
  %2897 = load i64, i64* %RCX
  %2898 = load i64, i64* %PC
  %2899 = add i64 %2898, 3
  store i64 %2899, i64* %PC
  %2900 = add i64 %2897, %2896
  store i64 %2900, i64* %RAX, align 8, !tbaa !2428
  %2901 = icmp ult i64 %2900, %2896
  %2902 = icmp ult i64 %2900, %2897
  %2903 = or i1 %2901, %2902
  %2904 = zext i1 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2904, i8* %2905, align 1, !tbaa !2432
  %2906 = trunc i64 %2900 to i32
  %2907 = and i32 %2906, 255
  %2908 = call i32 @llvm.ctpop.i32(i32 %2907) #16
  %2909 = trunc i32 %2908 to i8
  %2910 = and i8 %2909, 1
  %2911 = xor i8 %2910, 1
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2911, i8* %2912, align 1, !tbaa !2446
  %2913 = xor i64 %2897, %2896
  %2914 = xor i64 %2913, %2900
  %2915 = lshr i64 %2914, 4
  %2916 = trunc i64 %2915 to i8
  %2917 = and i8 %2916, 1
  %2918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2917, i8* %2918, align 1, !tbaa !2447
  %2919 = icmp eq i64 %2900, 0
  %2920 = zext i1 %2919 to i8
  %2921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2920, i8* %2921, align 1, !tbaa !2448
  %2922 = lshr i64 %2900, 63
  %2923 = trunc i64 %2922 to i8
  %2924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2923, i8* %2924, align 1, !tbaa !2449
  %2925 = lshr i64 %2896, 63
  %2926 = lshr i64 %2897, 63
  %2927 = xor i64 %2922, %2925
  %2928 = xor i64 %2922, %2926
  %2929 = add nuw nsw i64 %2927, %2928
  %2930 = icmp eq i64 %2929, 2
  %2931 = zext i1 %2930 to i8
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2931, i8* %2932, align 1, !tbaa !2450
  %2933 = load i64, i64* %RBP
  %2934 = sub i64 %2933, 48
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 4
  store i64 %2936, i64* %PC
  %2937 = inttoptr i64 %2934 to i32*
  %2938 = load i32, i32* %2937
  %2939 = sext i32 %2938 to i64
  store i64 %2939, i64* %RCX, align 8, !tbaa !2428
  %2940 = load i64, i64* %RAX
  %2941 = load i64, i64* %RCX
  %2942 = mul i64 %2941, 8
  %2943 = add i64 %2942, %2940
  %2944 = bitcast %union.vec128_t* %XMM0 to i8*
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 5
  store i64 %2946, i64* %PC
  %2947 = bitcast i8* %2944 to double*
  %2948 = load double, double* %2947, align 1
  %2949 = inttoptr i64 %2943 to double*
  store double %2948, double* %2949
  %2950 = load i64, i64* %RBP
  %2951 = sub i64 %2950, 108
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 7
  store i64 %2953, i64* %PC
  %2954 = inttoptr i64 %2951 to i32*
  store i32 0, i32* %2954
  br label %block_402512

block_4027ab:                                     ; preds = %block_402512
  %2955 = sub i64 %764, 48
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 4
  store i64 %2957, i64* %PC
  %2958 = inttoptr i64 %2955 to i32*
  %2959 = load i32, i32* %2958
  %2960 = sext i32 %2959 to i64
  store i64 %2960, i64* %RCX, align 8, !tbaa !2428
  %2961 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2962 = load i64, i64* %RAX
  %2963 = load i64, i64* %RCX
  %2964 = mul i64 %2963, 8
  %2965 = add i64 %2964, %2962
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 5
  store i64 %2967, i64* %PC
  %2968 = inttoptr i64 %2965 to double*
  %2969 = load double, double* %2968
  %2970 = bitcast i8* %2961 to double*
  store double %2969, double* %2970, align 1, !tbaa !2452
  %2971 = getelementptr inbounds i8, i8* %2961, i64 8
  %2972 = bitcast i8* %2971 to double*
  store double 0.000000e+00, double* %2972, align 1, !tbaa !2452
  %2973 = load i64, i64* %RBP
  %2974 = sub i64 %2973, 80
  %2975 = load i64, i64* %PC
  %2976 = add i64 %2975, 4
  store i64 %2976, i64* %PC
  %2977 = inttoptr i64 %2974 to i64*
  %2978 = load i64, i64* %2977
  store i64 %2978, i64* %RAX, align 8, !tbaa !2428
  %2979 = load i64, i64* %RBP
  %2980 = sub i64 %2979, 100
  %2981 = load i64, i64* %PC
  %2982 = add i64 %2981, 4
  store i64 %2982, i64* %PC
  %2983 = inttoptr i64 %2980 to i32*
  %2984 = load i32, i32* %2983
  %2985 = sext i32 %2984 to i64
  store i64 %2985, i64* %RCX, align 8, !tbaa !2428
  %2986 = load i64, i64* %RCX
  %2987 = load i64, i64* %PC
  %2988 = add i64 %2987, 7
  store i64 %2988, i64* %PC
  %2989 = sext i64 %2986 to i128
  %2990 = and i128 %2989, -18446744073709551616
  %2991 = zext i64 %2986 to i128
  %2992 = or i128 %2990, %2991
  %2993 = mul nsw i128 520, %2992
  %2994 = trunc i128 %2993 to i64
  store i64 %2994, i64* %RCX, align 8, !tbaa !2428
  %2995 = sext i64 %2994 to i128
  %2996 = icmp ne i128 %2995, %2993
  %2997 = zext i1 %2996 to i8
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2997, i8* %2998, align 1, !tbaa !2432
  %2999 = trunc i128 %2993 to i32
  %3000 = and i32 %2999, 255
  %3001 = call i32 @llvm.ctpop.i32(i32 %3000) #16
  %3002 = trunc i32 %3001 to i8
  %3003 = and i8 %3002, 1
  %3004 = xor i8 %3003, 1
  %3005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3004, i8* %3005, align 1, !tbaa !2446
  %3006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3006, align 1, !tbaa !2447
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3007, align 1, !tbaa !2448
  %3008 = lshr i64 %2994, 63
  %3009 = trunc i64 %3008 to i8
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3009, i8* %3010, align 1, !tbaa !2449
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2997, i8* %3011, align 1, !tbaa !2450
  %3012 = load i64, i64* %RAX
  %3013 = load i64, i64* %RCX
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 3
  store i64 %3015, i64* %PC
  %3016 = add i64 %3013, %3012
  store i64 %3016, i64* %RAX, align 8, !tbaa !2428
  %3017 = icmp ult i64 %3016, %3012
  %3018 = icmp ult i64 %3016, %3013
  %3019 = or i1 %3017, %3018
  %3020 = zext i1 %3019 to i8
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3020, i8* %3021, align 1, !tbaa !2432
  %3022 = trunc i64 %3016 to i32
  %3023 = and i32 %3022, 255
  %3024 = call i32 @llvm.ctpop.i32(i32 %3023) #16
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  %3027 = xor i8 %3026, 1
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3027, i8* %3028, align 1, !tbaa !2446
  %3029 = xor i64 %3013, %3012
  %3030 = xor i64 %3029, %3016
  %3031 = lshr i64 %3030, 4
  %3032 = trunc i64 %3031 to i8
  %3033 = and i8 %3032, 1
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3033, i8* %3034, align 1, !tbaa !2447
  %3035 = icmp eq i64 %3016, 0
  %3036 = zext i1 %3035 to i8
  %3037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3036, i8* %3037, align 1, !tbaa !2448
  %3038 = lshr i64 %3016, 63
  %3039 = trunc i64 %3038 to i8
  %3040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3039, i8* %3040, align 1, !tbaa !2449
  %3041 = lshr i64 %3012, 63
  %3042 = lshr i64 %3013, 63
  %3043 = xor i64 %3038, %3041
  %3044 = xor i64 %3038, %3042
  %3045 = add nuw nsw i64 %3043, %3044
  %3046 = icmp eq i64 %3045, 2
  %3047 = zext i1 %3046 to i8
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3047, i8* %3048, align 1, !tbaa !2450
  %3049 = load i64, i64* %RBP
  %3050 = sub i64 %3049, 48
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 4
  store i64 %3052, i64* %PC
  %3053 = inttoptr i64 %3050 to i32*
  %3054 = load i32, i32* %3053
  %3055 = sext i32 %3054 to i64
  store i64 %3055, i64* %RCX, align 8, !tbaa !2428
  %3056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3057 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3058 = load i64, i64* %RAX
  %3059 = load i64, i64* %RCX
  %3060 = mul i64 %3059, 8
  %3061 = add i64 %3060, %3058
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 5
  store i64 %3063, i64* %PC
  %3064 = bitcast i8* %3057 to double*
  %3065 = load double, double* %3064, align 1
  %3066 = getelementptr inbounds i8, i8* %3057, i64 8
  %3067 = bitcast i8* %3066 to i64*
  %3068 = load i64, i64* %3067, align 1
  %3069 = inttoptr i64 %3061 to double*
  %3070 = load double, double* %3069
  %3071 = fsub double %3065, %3070
  %3072 = bitcast i8* %3056 to double*
  store double %3071, double* %3072, align 1, !tbaa !2452
  %3073 = getelementptr inbounds i8, i8* %3056, i64 8
  %3074 = bitcast i8* %3073 to i64*
  store i64 %3068, i64* %3074, align 1, !tbaa !2452
  %3075 = load i64, i64* %RBP
  %3076 = sub i64 %3075, 88
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 4
  store i64 %3078, i64* %PC
  %3079 = inttoptr i64 %3076 to i64*
  %3080 = load i64, i64* %3079
  store i64 %3080, i64* %RAX, align 8, !tbaa !2428
  %3081 = load i64, i64* %RBP
  %3082 = sub i64 %3081, 100
  %3083 = load i64, i64* %PC
  %3084 = add i64 %3083, 4
  store i64 %3084, i64* %PC
  %3085 = inttoptr i64 %3082 to i32*
  %3086 = load i32, i32* %3085
  %3087 = sext i32 %3086 to i64
  store i64 %3087, i64* %RCX, align 8, !tbaa !2428
  %3088 = load i64, i64* %RCX
  %3089 = load i64, i64* %PC
  %3090 = add i64 %3089, 7
  store i64 %3090, i64* %PC
  %3091 = sext i64 %3088 to i128
  %3092 = and i128 %3091, -18446744073709551616
  %3093 = zext i64 %3088 to i128
  %3094 = or i128 %3092, %3093
  %3095 = mul nsw i128 520, %3094
  %3096 = trunc i128 %3095 to i64
  store i64 %3096, i64* %RCX, align 8, !tbaa !2428
  %3097 = sext i64 %3096 to i128
  %3098 = icmp ne i128 %3097, %3095
  %3099 = zext i1 %3098 to i8
  %3100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3099, i8* %3100, align 1, !tbaa !2432
  %3101 = trunc i128 %3095 to i32
  %3102 = and i32 %3101, 255
  %3103 = call i32 @llvm.ctpop.i32(i32 %3102) #16
  %3104 = trunc i32 %3103 to i8
  %3105 = and i8 %3104, 1
  %3106 = xor i8 %3105, 1
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3106, i8* %3107, align 1, !tbaa !2446
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3108, align 1, !tbaa !2447
  %3109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3109, align 1, !tbaa !2448
  %3110 = lshr i64 %3096, 63
  %3111 = trunc i64 %3110 to i8
  %3112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3111, i8* %3112, align 1, !tbaa !2449
  %3113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3099, i8* %3113, align 1, !tbaa !2450
  %3114 = load i64, i64* %RAX
  %3115 = load i64, i64* %RCX
  %3116 = load i64, i64* %PC
  %3117 = add i64 %3116, 3
  store i64 %3117, i64* %PC
  %3118 = add i64 %3115, %3114
  store i64 %3118, i64* %RAX, align 8, !tbaa !2428
  %3119 = icmp ult i64 %3118, %3114
  %3120 = icmp ult i64 %3118, %3115
  %3121 = or i1 %3119, %3120
  %3122 = zext i1 %3121 to i8
  %3123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3122, i8* %3123, align 1, !tbaa !2432
  %3124 = trunc i64 %3118 to i32
  %3125 = and i32 %3124, 255
  %3126 = call i32 @llvm.ctpop.i32(i32 %3125) #16
  %3127 = trunc i32 %3126 to i8
  %3128 = and i8 %3127, 1
  %3129 = xor i8 %3128, 1
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3129, i8* %3130, align 1, !tbaa !2446
  %3131 = xor i64 %3115, %3114
  %3132 = xor i64 %3131, %3118
  %3133 = lshr i64 %3132, 4
  %3134 = trunc i64 %3133 to i8
  %3135 = and i8 %3134, 1
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3135, i8* %3136, align 1, !tbaa !2447
  %3137 = icmp eq i64 %3118, 0
  %3138 = zext i1 %3137 to i8
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3138, i8* %3139, align 1, !tbaa !2448
  %3140 = lshr i64 %3118, 63
  %3141 = trunc i64 %3140 to i8
  %3142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3141, i8* %3142, align 1, !tbaa !2449
  %3143 = lshr i64 %3114, 63
  %3144 = lshr i64 %3115, 63
  %3145 = xor i64 %3140, %3143
  %3146 = xor i64 %3140, %3144
  %3147 = add nuw nsw i64 %3145, %3146
  %3148 = icmp eq i64 %3147, 2
  %3149 = zext i1 %3148 to i8
  %3150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3149, i8* %3150, align 1, !tbaa !2450
  %3151 = load i64, i64* %RBP
  %3152 = sub i64 %3151, 52
  %3153 = load i64, i64* %PC
  %3154 = add i64 %3153, 4
  store i64 %3154, i64* %PC
  %3155 = inttoptr i64 %3152 to i32*
  %3156 = load i32, i32* %3155
  %3157 = sext i32 %3156 to i64
  store i64 %3157, i64* %RCX, align 8, !tbaa !2428
  %3158 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3159 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3160 = load i64, i64* %RAX
  %3161 = load i64, i64* %RCX
  %3162 = mul i64 %3161, 8
  %3163 = add i64 %3162, %3160
  %3164 = load i64, i64* %PC
  %3165 = add i64 %3164, 5
  store i64 %3165, i64* %PC
  %3166 = bitcast i8* %3159 to double*
  %3167 = load double, double* %3166, align 1
  %3168 = getelementptr inbounds i8, i8* %3159, i64 8
  %3169 = bitcast i8* %3168 to i64*
  %3170 = load i64, i64* %3169, align 1
  %3171 = inttoptr i64 %3163 to double*
  %3172 = load double, double* %3171
  %3173 = fadd double %3167, %3172
  %3174 = bitcast i8* %3158 to double*
  store double %3173, double* %3174, align 1, !tbaa !2452
  %3175 = getelementptr inbounds i8, i8* %3158, i64 8
  %3176 = bitcast i8* %3175 to i64*
  store i64 %3170, i64* %3176, align 1, !tbaa !2452
  %3177 = load i64, i64* %RBP
  %3178 = add i64 %3177, 40
  %3179 = load i64, i64* %PC
  %3180 = add i64 %3179, 4
  store i64 %3180, i64* %PC
  %3181 = inttoptr i64 %3178 to i64*
  %3182 = load i64, i64* %3181
  store i64 %3182, i64* %RAX, align 8, !tbaa !2428
  %3183 = load i64, i64* %RBP
  %3184 = sub i64 %3183, 100
  %3185 = load i64, i64* %PC
  %3186 = add i64 %3185, 4
  store i64 %3186, i64* %PC
  %3187 = inttoptr i64 %3184 to i32*
  %3188 = load i32, i32* %3187
  %3189 = sext i32 %3188 to i64
  store i64 %3189, i64* %RCX, align 8, !tbaa !2428
  %3190 = load i64, i64* %RCX
  %3191 = load i64, i64* %PC
  %3192 = add i64 %3191, 7
  store i64 %3192, i64* %PC
  %3193 = sext i64 %3190 to i128
  %3194 = and i128 %3193, -18446744073709551616
  %3195 = zext i64 %3190 to i128
  %3196 = or i128 %3194, %3195
  %3197 = mul nsw i128 33800, %3196
  %3198 = trunc i128 %3197 to i64
  store i64 %3198, i64* %RCX, align 8, !tbaa !2428
  %3199 = sext i64 %3198 to i128
  %3200 = icmp ne i128 %3199, %3197
  %3201 = zext i1 %3200 to i8
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3201, i8* %3202, align 1, !tbaa !2432
  %3203 = trunc i128 %3197 to i32
  %3204 = and i32 %3203, 255
  %3205 = call i32 @llvm.ctpop.i32(i32 %3204) #16
  %3206 = trunc i32 %3205 to i8
  %3207 = and i8 %3206, 1
  %3208 = xor i8 %3207, 1
  %3209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3208, i8* %3209, align 1, !tbaa !2446
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3210, align 1, !tbaa !2447
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3211, align 1, !tbaa !2448
  %3212 = lshr i64 %3198, 63
  %3213 = trunc i64 %3212 to i8
  %3214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3213, i8* %3214, align 1, !tbaa !2449
  %3215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3201, i8* %3215, align 1, !tbaa !2450
  %3216 = load i64, i64* %RAX
  %3217 = load i64, i64* %RCX
  %3218 = load i64, i64* %PC
  %3219 = add i64 %3218, 3
  store i64 %3219, i64* %PC
  %3220 = add i64 %3217, %3216
  store i64 %3220, i64* %RAX, align 8, !tbaa !2428
  %3221 = icmp ult i64 %3220, %3216
  %3222 = icmp ult i64 %3220, %3217
  %3223 = or i1 %3221, %3222
  %3224 = zext i1 %3223 to i8
  %3225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3224, i8* %3225, align 1, !tbaa !2432
  %3226 = trunc i64 %3220 to i32
  %3227 = and i32 %3226, 255
  %3228 = call i32 @llvm.ctpop.i32(i32 %3227) #16
  %3229 = trunc i32 %3228 to i8
  %3230 = and i8 %3229, 1
  %3231 = xor i8 %3230, 1
  %3232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3231, i8* %3232, align 1, !tbaa !2446
  %3233 = xor i64 %3217, %3216
  %3234 = xor i64 %3233, %3220
  %3235 = lshr i64 %3234, 4
  %3236 = trunc i64 %3235 to i8
  %3237 = and i8 %3236, 1
  %3238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3237, i8* %3238, align 1, !tbaa !2447
  %3239 = icmp eq i64 %3220, 0
  %3240 = zext i1 %3239 to i8
  %3241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3240, i8* %3241, align 1, !tbaa !2448
  %3242 = lshr i64 %3220, 63
  %3243 = trunc i64 %3242 to i8
  %3244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3243, i8* %3244, align 1, !tbaa !2449
  %3245 = lshr i64 %3216, 63
  %3246 = lshr i64 %3217, 63
  %3247 = xor i64 %3242, %3245
  %3248 = xor i64 %3242, %3246
  %3249 = add nuw nsw i64 %3247, %3248
  %3250 = icmp eq i64 %3249, 2
  %3251 = zext i1 %3250 to i8
  %3252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3251, i8* %3252, align 1, !tbaa !2450
  %3253 = load i64, i64* %RBP
  %3254 = sub i64 %3253, 52
  %3255 = load i64, i64* %PC
  %3256 = add i64 %3255, 4
  store i64 %3256, i64* %PC
  %3257 = inttoptr i64 %3254 to i32*
  %3258 = load i32, i32* %3257
  %3259 = sext i32 %3258 to i64
  store i64 %3259, i64* %RCX, align 8, !tbaa !2428
  %3260 = load i64, i64* %RCX
  %3261 = load i64, i64* %PC
  %3262 = add i64 %3261, 7
  store i64 %3262, i64* %PC
  %3263 = sext i64 %3260 to i128
  %3264 = and i128 %3263, -18446744073709551616
  %3265 = zext i64 %3260 to i128
  %3266 = or i128 %3264, %3265
  %3267 = mul nsw i128 520, %3266
  %3268 = trunc i128 %3267 to i64
  store i64 %3268, i64* %RCX, align 8, !tbaa !2428
  %3269 = sext i64 %3268 to i128
  %3270 = icmp ne i128 %3269, %3267
  %3271 = zext i1 %3270 to i8
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3271, i8* %3272, align 1, !tbaa !2432
  %3273 = trunc i128 %3267 to i32
  %3274 = and i32 %3273, 255
  %3275 = call i32 @llvm.ctpop.i32(i32 %3274) #16
  %3276 = trunc i32 %3275 to i8
  %3277 = and i8 %3276, 1
  %3278 = xor i8 %3277, 1
  %3279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3278, i8* %3279, align 1, !tbaa !2446
  %3280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3280, align 1, !tbaa !2447
  %3281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3281, align 1, !tbaa !2448
  %3282 = lshr i64 %3268, 63
  %3283 = trunc i64 %3282 to i8
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3283, i8* %3284, align 1, !tbaa !2449
  %3285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3271, i8* %3285, align 1, !tbaa !2450
  %3286 = load i64, i64* %RAX
  %3287 = load i64, i64* %RCX
  %3288 = load i64, i64* %PC
  %3289 = add i64 %3288, 3
  store i64 %3289, i64* %PC
  %3290 = add i64 %3287, %3286
  store i64 %3290, i64* %RAX, align 8, !tbaa !2428
  %3291 = icmp ult i64 %3290, %3286
  %3292 = icmp ult i64 %3290, %3287
  %3293 = or i1 %3291, %3292
  %3294 = zext i1 %3293 to i8
  %3295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3294, i8* %3295, align 1, !tbaa !2432
  %3296 = trunc i64 %3290 to i32
  %3297 = and i32 %3296, 255
  %3298 = call i32 @llvm.ctpop.i32(i32 %3297) #16
  %3299 = trunc i32 %3298 to i8
  %3300 = and i8 %3299, 1
  %3301 = xor i8 %3300, 1
  %3302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3301, i8* %3302, align 1, !tbaa !2446
  %3303 = xor i64 %3287, %3286
  %3304 = xor i64 %3303, %3290
  %3305 = lshr i64 %3304, 4
  %3306 = trunc i64 %3305 to i8
  %3307 = and i8 %3306, 1
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3307, i8* %3308, align 1, !tbaa !2447
  %3309 = icmp eq i64 %3290, 0
  %3310 = zext i1 %3309 to i8
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3310, i8* %3311, align 1, !tbaa !2448
  %3312 = lshr i64 %3290, 63
  %3313 = trunc i64 %3312 to i8
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3313, i8* %3314, align 1, !tbaa !2449
  %3315 = lshr i64 %3286, 63
  %3316 = lshr i64 %3287, 63
  %3317 = xor i64 %3312, %3315
  %3318 = xor i64 %3312, %3316
  %3319 = add nuw nsw i64 %3317, %3318
  %3320 = icmp eq i64 %3319, 2
  %3321 = zext i1 %3320 to i8
  %3322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3321, i8* %3322, align 1, !tbaa !2450
  %3323 = load i64, i64* %RBP
  %3324 = sub i64 %3323, 48
  %3325 = load i64, i64* %PC
  %3326 = add i64 %3325, 4
  store i64 %3326, i64* %PC
  %3327 = inttoptr i64 %3324 to i32*
  %3328 = load i32, i32* %3327
  %3329 = sext i32 %3328 to i64
  store i64 %3329, i64* %RCX, align 8, !tbaa !2428
  %3330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3331 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3332 = load i64, i64* %RAX
  %3333 = load i64, i64* %RCX
  %3334 = mul i64 %3333, 8
  %3335 = add i64 %3334, %3332
  %3336 = load i64, i64* %PC
  %3337 = add i64 %3336, 5
  store i64 %3337, i64* %PC
  %3338 = bitcast i8* %3331 to double*
  %3339 = load double, double* %3338, align 1
  %3340 = getelementptr inbounds i8, i8* %3331, i64 8
  %3341 = bitcast i8* %3340 to i64*
  %3342 = load i64, i64* %3341, align 1
  %3343 = inttoptr i64 %3335 to double*
  %3344 = load double, double* %3343
  %3345 = fsub double %3339, %3344
  %3346 = bitcast i8* %3330 to double*
  store double %3345, double* %3346, align 1, !tbaa !2452
  %3347 = getelementptr inbounds i8, i8* %3330, i64 8
  %3348 = bitcast i8* %3347 to i64*
  store i64 %3342, i64* %3348, align 1, !tbaa !2452
  %3349 = load i64, i64* %RBP
  %3350 = sub i64 %3349, 96
  %3351 = load i64, i64* %PC
  %3352 = add i64 %3351, 4
  store i64 %3352, i64* %PC
  %3353 = inttoptr i64 %3350 to i64*
  %3354 = load i64, i64* %3353
  store i64 %3354, i64* %RAX, align 8, !tbaa !2428
  %3355 = load i64, i64* %RBP
  %3356 = sub i64 %3355, 100
  %3357 = load i64, i64* %PC
  %3358 = add i64 %3357, 4
  store i64 %3358, i64* %PC
  %3359 = inttoptr i64 %3356 to i32*
  %3360 = load i32, i32* %3359
  %3361 = sext i32 %3360 to i64
  store i64 %3361, i64* %RCX, align 8, !tbaa !2428
  %3362 = load i64, i64* %RCX
  %3363 = load i64, i64* %PC
  %3364 = add i64 %3363, 7
  store i64 %3364, i64* %PC
  %3365 = sext i64 %3362 to i128
  %3366 = and i128 %3365, -18446744073709551616
  %3367 = zext i64 %3362 to i128
  %3368 = or i128 %3366, %3367
  %3369 = mul nsw i128 520, %3368
  %3370 = trunc i128 %3369 to i64
  store i64 %3370, i64* %RCX, align 8, !tbaa !2428
  %3371 = sext i64 %3370 to i128
  %3372 = icmp ne i128 %3371, %3369
  %3373 = zext i1 %3372 to i8
  %3374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3373, i8* %3374, align 1, !tbaa !2432
  %3375 = trunc i128 %3369 to i32
  %3376 = and i32 %3375, 255
  %3377 = call i32 @llvm.ctpop.i32(i32 %3376) #16
  %3378 = trunc i32 %3377 to i8
  %3379 = and i8 %3378, 1
  %3380 = xor i8 %3379, 1
  %3381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3380, i8* %3381, align 1, !tbaa !2446
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3382, align 1, !tbaa !2447
  %3383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3383, align 1, !tbaa !2448
  %3384 = lshr i64 %3370, 63
  %3385 = trunc i64 %3384 to i8
  %3386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3385, i8* %3386, align 1, !tbaa !2449
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3373, i8* %3387, align 1, !tbaa !2450
  %3388 = load i64, i64* %RAX
  %3389 = load i64, i64* %RCX
  %3390 = load i64, i64* %PC
  %3391 = add i64 %3390, 3
  store i64 %3391, i64* %PC
  %3392 = add i64 %3389, %3388
  store i64 %3392, i64* %RAX, align 8, !tbaa !2428
  %3393 = icmp ult i64 %3392, %3388
  %3394 = icmp ult i64 %3392, %3389
  %3395 = or i1 %3393, %3394
  %3396 = zext i1 %3395 to i8
  %3397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3396, i8* %3397, align 1, !tbaa !2432
  %3398 = trunc i64 %3392 to i32
  %3399 = and i32 %3398, 255
  %3400 = call i32 @llvm.ctpop.i32(i32 %3399) #16
  %3401 = trunc i32 %3400 to i8
  %3402 = and i8 %3401, 1
  %3403 = xor i8 %3402, 1
  %3404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3403, i8* %3404, align 1, !tbaa !2446
  %3405 = xor i64 %3389, %3388
  %3406 = xor i64 %3405, %3392
  %3407 = lshr i64 %3406, 4
  %3408 = trunc i64 %3407 to i8
  %3409 = and i8 %3408, 1
  %3410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3409, i8* %3410, align 1, !tbaa !2447
  %3411 = icmp eq i64 %3392, 0
  %3412 = zext i1 %3411 to i8
  %3413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3412, i8* %3413, align 1, !tbaa !2448
  %3414 = lshr i64 %3392, 63
  %3415 = trunc i64 %3414 to i8
  %3416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3415, i8* %3416, align 1, !tbaa !2449
  %3417 = lshr i64 %3388, 63
  %3418 = lshr i64 %3389, 63
  %3419 = xor i64 %3414, %3417
  %3420 = xor i64 %3414, %3418
  %3421 = add nuw nsw i64 %3419, %3420
  %3422 = icmp eq i64 %3421, 2
  %3423 = zext i1 %3422 to i8
  %3424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3423, i8* %3424, align 1, !tbaa !2450
  %3425 = load i64, i64* %RBP
  %3426 = sub i64 %3425, 104
  %3427 = load i64, i64* %PC
  %3428 = add i64 %3427, 4
  store i64 %3428, i64* %PC
  %3429 = inttoptr i64 %3426 to i32*
  %3430 = load i32, i32* %3429
  %3431 = sext i32 %3430 to i64
  store i64 %3431, i64* %RCX, align 8, !tbaa !2428
  %3432 = load i64, i64* %RAX
  %3433 = load i64, i64* %RCX
  %3434 = mul i64 %3433, 8
  %3435 = add i64 %3434, %3432
  %3436 = bitcast %union.vec128_t* %XMM0 to i8*
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 5
  store i64 %3438, i64* %PC
  %3439 = bitcast i8* %3436 to double*
  %3440 = load double, double* %3439, align 1
  %3441 = inttoptr i64 %3435 to double*
  store double %3440, double* %3441
  %3442 = load i64, i64* %RBP
  %3443 = add i64 %3442, 88
  %3444 = load i64, i64* %PC
  %3445 = add i64 %3444, 4
  store i64 %3445, i64* %PC
  %3446 = inttoptr i64 %3443 to i64*
  %3447 = load i64, i64* %3446
  store i64 %3447, i64* %RAX, align 8, !tbaa !2428
  %3448 = load i64, i64* %RBP
  %3449 = sub i64 %3448, 52
  %3450 = load i64, i64* %PC
  %3451 = add i64 %3450, 4
  store i64 %3451, i64* %PC
  %3452 = inttoptr i64 %3449 to i32*
  %3453 = load i32, i32* %3452
  %3454 = sext i32 %3453 to i64
  store i64 %3454, i64* %RCX, align 8, !tbaa !2428
  %3455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3456 = load i64, i64* %RAX
  %3457 = load i64, i64* %RCX
  %3458 = mul i64 %3457, 8
  %3459 = add i64 %3458, %3456
  %3460 = load i64, i64* %PC
  %3461 = add i64 %3460, 5
  store i64 %3461, i64* %PC
  %3462 = inttoptr i64 %3459 to double*
  %3463 = load double, double* %3462
  %3464 = bitcast i8* %3455 to double*
  store double %3463, double* %3464, align 1, !tbaa !2452
  %3465 = getelementptr inbounds i8, i8* %3455, i64 8
  %3466 = bitcast i8* %3465 to double*
  store double 0.000000e+00, double* %3466, align 1, !tbaa !2452
  %3467 = load i64, i64* %RBP
  %3468 = add i64 %3467, 96
  %3469 = load i64, i64* %PC
  %3470 = add i64 %3469, 4
  store i64 %3470, i64* %PC
  %3471 = inttoptr i64 %3468 to i64*
  %3472 = load i64, i64* %3471
  store i64 %3472, i64* %RAX, align 8, !tbaa !2428
  %3473 = load i64, i64* %RBP
  %3474 = sub i64 %3473, 52
  %3475 = load i64, i64* %PC
  %3476 = add i64 %3475, 4
  store i64 %3476, i64* %PC
  %3477 = inttoptr i64 %3474 to i32*
  %3478 = load i32, i32* %3477
  %3479 = sext i32 %3478 to i64
  store i64 %3479, i64* %RCX, align 8, !tbaa !2428
  %3480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3481 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3482 = load i64, i64* %RAX
  %3483 = load i64, i64* %RCX
  %3484 = mul i64 %3483, 8
  %3485 = add i64 %3484, %3482
  %3486 = load i64, i64* %PC
  %3487 = add i64 %3486, 5
  store i64 %3487, i64* %PC
  %3488 = bitcast i8* %3481 to double*
  %3489 = load double, double* %3488, align 1
  %3490 = getelementptr inbounds i8, i8* %3481, i64 8
  %3491 = bitcast i8* %3490 to i64*
  %3492 = load i64, i64* %3491, align 1
  %3493 = inttoptr i64 %3485 to double*
  %3494 = load double, double* %3493
  %3495 = fdiv double %3489, %3494
  %3496 = bitcast i8* %3480 to double*
  store double %3495, double* %3496, align 1, !tbaa !2452
  %3497 = getelementptr inbounds i8, i8* %3480, i64 8
  %3498 = bitcast i8* %3497 to i64*
  store i64 %3492, i64* %3498, align 1, !tbaa !2452
  %3499 = load i64, i64* %RBP
  %3500 = add i64 %3499, 24
  %3501 = load i64, i64* %PC
  %3502 = add i64 %3501, 4
  store i64 %3502, i64* %PC
  %3503 = inttoptr i64 %3500 to i64*
  %3504 = load i64, i64* %3503
  store i64 %3504, i64* %RAX, align 8, !tbaa !2428
  %3505 = load i64, i64* %RBP
  %3506 = sub i64 %3505, 100
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 4
  store i64 %3508, i64* %PC
  %3509 = inttoptr i64 %3506 to i32*
  %3510 = load i32, i32* %3509
  %3511 = sext i32 %3510 to i64
  store i64 %3511, i64* %RCX, align 8, !tbaa !2428
  %3512 = load i64, i64* %RCX
  %3513 = load i64, i64* %PC
  %3514 = add i64 %3513, 7
  store i64 %3514, i64* %PC
  %3515 = sext i64 %3512 to i128
  %3516 = and i128 %3515, -18446744073709551616
  %3517 = zext i64 %3512 to i128
  %3518 = or i128 %3516, %3517
  %3519 = mul nsw i128 33800, %3518
  %3520 = trunc i128 %3519 to i64
  store i64 %3520, i64* %RCX, align 8, !tbaa !2428
  %3521 = sext i64 %3520 to i128
  %3522 = icmp ne i128 %3521, %3519
  %3523 = zext i1 %3522 to i8
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3523, i8* %3524, align 1, !tbaa !2432
  %3525 = trunc i128 %3519 to i32
  %3526 = and i32 %3525, 255
  %3527 = call i32 @llvm.ctpop.i32(i32 %3526) #16
  %3528 = trunc i32 %3527 to i8
  %3529 = and i8 %3528, 1
  %3530 = xor i8 %3529, 1
  %3531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3530, i8* %3531, align 1, !tbaa !2446
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3532, align 1, !tbaa !2447
  %3533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3533, align 1, !tbaa !2448
  %3534 = lshr i64 %3520, 63
  %3535 = trunc i64 %3534 to i8
  %3536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3535, i8* %3536, align 1, !tbaa !2449
  %3537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3523, i8* %3537, align 1, !tbaa !2450
  %3538 = load i64, i64* %RAX
  %3539 = load i64, i64* %RCX
  %3540 = load i64, i64* %PC
  %3541 = add i64 %3540, 3
  store i64 %3541, i64* %PC
  %3542 = add i64 %3539, %3538
  store i64 %3542, i64* %RAX, align 8, !tbaa !2428
  %3543 = icmp ult i64 %3542, %3538
  %3544 = icmp ult i64 %3542, %3539
  %3545 = or i1 %3543, %3544
  %3546 = zext i1 %3545 to i8
  %3547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3546, i8* %3547, align 1, !tbaa !2432
  %3548 = trunc i64 %3542 to i32
  %3549 = and i32 %3548, 255
  %3550 = call i32 @llvm.ctpop.i32(i32 %3549) #16
  %3551 = trunc i32 %3550 to i8
  %3552 = and i8 %3551, 1
  %3553 = xor i8 %3552, 1
  %3554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3553, i8* %3554, align 1, !tbaa !2446
  %3555 = xor i64 %3539, %3538
  %3556 = xor i64 %3555, %3542
  %3557 = lshr i64 %3556, 4
  %3558 = trunc i64 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3559, i8* %3560, align 1, !tbaa !2447
  %3561 = icmp eq i64 %3542, 0
  %3562 = zext i1 %3561 to i8
  %3563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3562, i8* %3563, align 1, !tbaa !2448
  %3564 = lshr i64 %3542, 63
  %3565 = trunc i64 %3564 to i8
  %3566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3565, i8* %3566, align 1, !tbaa !2449
  %3567 = lshr i64 %3538, 63
  %3568 = lshr i64 %3539, 63
  %3569 = xor i64 %3564, %3567
  %3570 = xor i64 %3564, %3568
  %3571 = add nuw nsw i64 %3569, %3570
  %3572 = icmp eq i64 %3571, 2
  %3573 = zext i1 %3572 to i8
  %3574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3573, i8* %3574, align 1, !tbaa !2450
  %3575 = load i64, i64* %RBP
  %3576 = sub i64 %3575, 52
  %3577 = load i64, i64* %PC
  %3578 = add i64 %3577, 4
  store i64 %3578, i64* %PC
  %3579 = inttoptr i64 %3576 to i32*
  %3580 = load i32, i32* %3579
  %3581 = sext i32 %3580 to i64
  store i64 %3581, i64* %RCX, align 8, !tbaa !2428
  %3582 = load i64, i64* %RCX
  %3583 = load i64, i64* %PC
  %3584 = add i64 %3583, 7
  store i64 %3584, i64* %PC
  %3585 = sext i64 %3582 to i128
  %3586 = and i128 %3585, -18446744073709551616
  %3587 = zext i64 %3582 to i128
  %3588 = or i128 %3586, %3587
  %3589 = mul nsw i128 520, %3588
  %3590 = trunc i128 %3589 to i64
  store i64 %3590, i64* %RCX, align 8, !tbaa !2428
  %3591 = sext i64 %3590 to i128
  %3592 = icmp ne i128 %3591, %3589
  %3593 = zext i1 %3592 to i8
  %3594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3593, i8* %3594, align 1, !tbaa !2432
  %3595 = trunc i128 %3589 to i32
  %3596 = and i32 %3595, 255
  %3597 = call i32 @llvm.ctpop.i32(i32 %3596) #16
  %3598 = trunc i32 %3597 to i8
  %3599 = and i8 %3598, 1
  %3600 = xor i8 %3599, 1
  %3601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3600, i8* %3601, align 1, !tbaa !2446
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3602, align 1, !tbaa !2447
  %3603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3603, align 1, !tbaa !2448
  %3604 = lshr i64 %3590, 63
  %3605 = trunc i64 %3604 to i8
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3605, i8* %3606, align 1, !tbaa !2449
  %3607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3593, i8* %3607, align 1, !tbaa !2450
  %3608 = load i64, i64* %RAX
  %3609 = load i64, i64* %RCX
  %3610 = load i64, i64* %PC
  %3611 = add i64 %3610, 3
  store i64 %3611, i64* %PC
  %3612 = add i64 %3609, %3608
  store i64 %3612, i64* %RAX, align 8, !tbaa !2428
  %3613 = icmp ult i64 %3612, %3608
  %3614 = icmp ult i64 %3612, %3609
  %3615 = or i1 %3613, %3614
  %3616 = zext i1 %3615 to i8
  %3617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3616, i8* %3617, align 1, !tbaa !2432
  %3618 = trunc i64 %3612 to i32
  %3619 = and i32 %3618, 255
  %3620 = call i32 @llvm.ctpop.i32(i32 %3619) #16
  %3621 = trunc i32 %3620 to i8
  %3622 = and i8 %3621, 1
  %3623 = xor i8 %3622, 1
  %3624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3623, i8* %3624, align 1, !tbaa !2446
  %3625 = xor i64 %3609, %3608
  %3626 = xor i64 %3625, %3612
  %3627 = lshr i64 %3626, 4
  %3628 = trunc i64 %3627 to i8
  %3629 = and i8 %3628, 1
  %3630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3629, i8* %3630, align 1, !tbaa !2447
  %3631 = icmp eq i64 %3612, 0
  %3632 = zext i1 %3631 to i8
  %3633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3632, i8* %3633, align 1, !tbaa !2448
  %3634 = lshr i64 %3612, 63
  %3635 = trunc i64 %3634 to i8
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3635, i8* %3636, align 1, !tbaa !2449
  %3637 = lshr i64 %3608, 63
  %3638 = lshr i64 %3609, 63
  %3639 = xor i64 %3634, %3637
  %3640 = xor i64 %3634, %3638
  %3641 = add nuw nsw i64 %3639, %3640
  %3642 = icmp eq i64 %3641, 2
  %3643 = zext i1 %3642 to i8
  %3644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3643, i8* %3644, align 1, !tbaa !2450
  %3645 = load i64, i64* %RBP
  %3646 = sub i64 %3645, 48
  %3647 = load i64, i64* %PC
  %3648 = add i64 %3647, 4
  store i64 %3648, i64* %PC
  %3649 = inttoptr i64 %3646 to i32*
  %3650 = load i32, i32* %3649
  %3651 = sext i32 %3650 to i64
  store i64 %3651, i64* %RCX, align 8, !tbaa !2428
  %3652 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3653 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3654 = load i64, i64* %RAX
  %3655 = load i64, i64* %RCX
  %3656 = mul i64 %3655, 8
  %3657 = add i64 %3656, %3654
  %3658 = load i64, i64* %PC
  %3659 = add i64 %3658, 5
  store i64 %3659, i64* %PC
  %3660 = bitcast i8* %3653 to double*
  %3661 = load double, double* %3660, align 1
  %3662 = getelementptr inbounds i8, i8* %3653, i64 8
  %3663 = bitcast i8* %3662 to i64*
  %3664 = load i64, i64* %3663, align 1
  %3665 = inttoptr i64 %3657 to double*
  %3666 = load double, double* %3665
  %3667 = fmul double %3661, %3666
  %3668 = bitcast i8* %3652 to double*
  store double %3667, double* %3668, align 1, !tbaa !2452
  %3669 = getelementptr inbounds i8, i8* %3652, i64 8
  %3670 = bitcast i8* %3669 to i64*
  store i64 %3664, i64* %3670, align 1, !tbaa !2452
  %3671 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3672 = load i64, i64* %RBP
  %3673 = sub i64 %3672, 72
  %3674 = load i64, i64* %PC
  %3675 = add i64 %3674, 5
  store i64 %3675, i64* %PC
  %3676 = inttoptr i64 %3673 to double*
  %3677 = load double, double* %3676
  %3678 = bitcast i8* %3671 to double*
  store double %3677, double* %3678, align 1, !tbaa !2452
  %3679 = getelementptr inbounds i8, i8* %3671, i64 8
  %3680 = bitcast i8* %3679 to double*
  store double 0.000000e+00, double* %3680, align 1, !tbaa !2452
  %3681 = load i64, i64* %RBP
  %3682 = add i64 %3681, 96
  %3683 = load i64, i64* %PC
  %3684 = add i64 %3683, 4
  store i64 %3684, i64* %PC
  %3685 = inttoptr i64 %3682 to i64*
  %3686 = load i64, i64* %3685
  store i64 %3686, i64* %RAX, align 8, !tbaa !2428
  %3687 = load i64, i64* %RBP
  %3688 = sub i64 %3687, 52
  %3689 = load i64, i64* %PC
  %3690 = add i64 %3689, 4
  store i64 %3690, i64* %PC
  %3691 = inttoptr i64 %3688 to i32*
  %3692 = load i32, i32* %3691
  %3693 = sext i32 %3692 to i64
  store i64 %3693, i64* %RCX, align 8, !tbaa !2428
  %3694 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3695 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3696 = load i64, i64* %RAX
  %3697 = load i64, i64* %RCX
  %3698 = mul i64 %3697, 8
  %3699 = add i64 %3698, %3696
  %3700 = load i64, i64* %PC
  %3701 = add i64 %3700, 5
  store i64 %3701, i64* %PC
  %3702 = bitcast i8* %3695 to double*
  %3703 = load double, double* %3702, align 1
  %3704 = getelementptr inbounds i8, i8* %3695, i64 8
  %3705 = bitcast i8* %3704 to i64*
  %3706 = load i64, i64* %3705, align 1
  %3707 = inttoptr i64 %3699 to double*
  %3708 = load double, double* %3707
  %3709 = fdiv double %3703, %3708
  %3710 = bitcast i8* %3694 to double*
  store double %3709, double* %3710, align 1, !tbaa !2452
  %3711 = getelementptr inbounds i8, i8* %3694, i64 8
  %3712 = bitcast i8* %3711 to i64*
  store i64 %3706, i64* %3712, align 1, !tbaa !2452
  %3713 = load i64, i64* %RBP
  %3714 = sub i64 %3713, 96
  %3715 = load i64, i64* %PC
  %3716 = add i64 %3715, 4
  store i64 %3716, i64* %PC
  %3717 = inttoptr i64 %3714 to i64*
  %3718 = load i64, i64* %3717
  store i64 %3718, i64* %RAX, align 8, !tbaa !2428
  %3719 = load i64, i64* %RBP
  %3720 = sub i64 %3719, 100
  %3721 = load i64, i64* %PC
  %3722 = add i64 %3721, 4
  store i64 %3722, i64* %PC
  %3723 = inttoptr i64 %3720 to i32*
  %3724 = load i32, i32* %3723
  %3725 = sext i32 %3724 to i64
  store i64 %3725, i64* %RCX, align 8, !tbaa !2428
  %3726 = load i64, i64* %RCX
  %3727 = load i64, i64* %PC
  %3728 = add i64 %3727, 7
  store i64 %3728, i64* %PC
  %3729 = sext i64 %3726 to i128
  %3730 = and i128 %3729, -18446744073709551616
  %3731 = zext i64 %3726 to i128
  %3732 = or i128 %3730, %3731
  %3733 = mul nsw i128 520, %3732
  %3734 = trunc i128 %3733 to i64
  store i64 %3734, i64* %RCX, align 8, !tbaa !2428
  %3735 = sext i64 %3734 to i128
  %3736 = icmp ne i128 %3735, %3733
  %3737 = zext i1 %3736 to i8
  %3738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3737, i8* %3738, align 1, !tbaa !2432
  %3739 = trunc i128 %3733 to i32
  %3740 = and i32 %3739, 255
  %3741 = call i32 @llvm.ctpop.i32(i32 %3740) #16
  %3742 = trunc i32 %3741 to i8
  %3743 = and i8 %3742, 1
  %3744 = xor i8 %3743, 1
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3744, i8* %3745, align 1, !tbaa !2446
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3746, align 1, !tbaa !2447
  %3747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3747, align 1, !tbaa !2448
  %3748 = lshr i64 %3734, 63
  %3749 = trunc i64 %3748 to i8
  %3750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3749, i8* %3750, align 1, !tbaa !2449
  %3751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3737, i8* %3751, align 1, !tbaa !2450
  %3752 = load i64, i64* %RAX
  %3753 = load i64, i64* %RCX
  %3754 = load i64, i64* %PC
  %3755 = add i64 %3754, 3
  store i64 %3755, i64* %PC
  %3756 = add i64 %3753, %3752
  store i64 %3756, i64* %RAX, align 8, !tbaa !2428
  %3757 = icmp ult i64 %3756, %3752
  %3758 = icmp ult i64 %3756, %3753
  %3759 = or i1 %3757, %3758
  %3760 = zext i1 %3759 to i8
  %3761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3760, i8* %3761, align 1, !tbaa !2432
  %3762 = trunc i64 %3756 to i32
  %3763 = and i32 %3762, 255
  %3764 = call i32 @llvm.ctpop.i32(i32 %3763) #16
  %3765 = trunc i32 %3764 to i8
  %3766 = and i8 %3765, 1
  %3767 = xor i8 %3766, 1
  %3768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3767, i8* %3768, align 1, !tbaa !2446
  %3769 = xor i64 %3753, %3752
  %3770 = xor i64 %3769, %3756
  %3771 = lshr i64 %3770, 4
  %3772 = trunc i64 %3771 to i8
  %3773 = and i8 %3772, 1
  %3774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3773, i8* %3774, align 1, !tbaa !2447
  %3775 = icmp eq i64 %3756, 0
  %3776 = zext i1 %3775 to i8
  %3777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3776, i8* %3777, align 1, !tbaa !2448
  %3778 = lshr i64 %3756, 63
  %3779 = trunc i64 %3778 to i8
  %3780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3779, i8* %3780, align 1, !tbaa !2449
  %3781 = lshr i64 %3752, 63
  %3782 = lshr i64 %3753, 63
  %3783 = xor i64 %3778, %3781
  %3784 = xor i64 %3778, %3782
  %3785 = add nuw nsw i64 %3783, %3784
  %3786 = icmp eq i64 %3785, 2
  %3787 = zext i1 %3786 to i8
  %3788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3787, i8* %3788, align 1, !tbaa !2450
  %3789 = load i64, i64* %RBP
  %3790 = sub i64 %3789, 104
  %3791 = load i64, i64* %PC
  %3792 = add i64 %3791, 4
  store i64 %3792, i64* %PC
  %3793 = inttoptr i64 %3790 to i32*
  %3794 = load i32, i32* %3793
  %3795 = sext i32 %3794 to i64
  store i64 %3795, i64* %RCX, align 8, !tbaa !2428
  %3796 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3797 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3798 = load i64, i64* %RAX
  %3799 = load i64, i64* %RCX
  %3800 = mul i64 %3799, 8
  %3801 = add i64 %3800, %3798
  %3802 = load i64, i64* %PC
  %3803 = add i64 %3802, 5
  store i64 %3803, i64* %PC
  %3804 = bitcast i8* %3797 to double*
  %3805 = load double, double* %3804, align 1
  %3806 = getelementptr inbounds i8, i8* %3797, i64 8
  %3807 = bitcast i8* %3806 to i64*
  %3808 = load i64, i64* %3807, align 1
  %3809 = inttoptr i64 %3801 to double*
  %3810 = load double, double* %3809
  %3811 = fmul double %3805, %3810
  %3812 = bitcast i8* %3796 to double*
  store double %3811, double* %3812, align 1, !tbaa !2452
  %3813 = getelementptr inbounds i8, i8* %3796, i64 8
  %3814 = bitcast i8* %3813 to i64*
  store i64 %3808, i64* %3814, align 1, !tbaa !2452
  %3815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3816 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3817 = bitcast %union.vec128_t* %XMM1 to i8*
  %3818 = load i64, i64* %PC
  %3819 = add i64 %3818, 4
  store i64 %3819, i64* %PC
  %3820 = bitcast i8* %3816 to double*
  %3821 = load double, double* %3820, align 1
  %3822 = getelementptr inbounds i8, i8* %3816, i64 8
  %3823 = bitcast i8* %3822 to i64*
  %3824 = load i64, i64* %3823, align 1
  %3825 = bitcast i8* %3817 to double*
  %3826 = load double, double* %3825, align 1
  %3827 = fsub double %3821, %3826
  %3828 = bitcast i8* %3815 to double*
  store double %3827, double* %3828, align 1, !tbaa !2452
  %3829 = getelementptr inbounds i8, i8* %3815, i64 8
  %3830 = bitcast i8* %3829 to i64*
  store i64 %3824, i64* %3830, align 1, !tbaa !2452
  %3831 = load i64, i64* %RBP
  %3832 = add i64 %3831, 16
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 4
  store i64 %3834, i64* %PC
  %3835 = inttoptr i64 %3832 to i64*
  %3836 = load i64, i64* %3835
  store i64 %3836, i64* %RAX, align 8, !tbaa !2428
  %3837 = load i64, i64* %RBP
  %3838 = sub i64 %3837, 100
  %3839 = load i64, i64* %PC
  %3840 = add i64 %3839, 4
  store i64 %3840, i64* %PC
  %3841 = inttoptr i64 %3838 to i32*
  %3842 = load i32, i32* %3841
  %3843 = sext i32 %3842 to i64
  store i64 %3843, i64* %RCX, align 8, !tbaa !2428
  %3844 = load i64, i64* %RCX
  %3845 = load i64, i64* %PC
  %3846 = add i64 %3845, 7
  store i64 %3846, i64* %PC
  %3847 = sext i64 %3844 to i128
  %3848 = and i128 %3847, -18446744073709551616
  %3849 = zext i64 %3844 to i128
  %3850 = or i128 %3848, %3849
  %3851 = mul nsw i128 520, %3850
  %3852 = trunc i128 %3851 to i64
  store i64 %3852, i64* %RCX, align 8, !tbaa !2428
  %3853 = sext i64 %3852 to i128
  %3854 = icmp ne i128 %3853, %3851
  %3855 = zext i1 %3854 to i8
  %3856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3855, i8* %3856, align 1, !tbaa !2432
  %3857 = trunc i128 %3851 to i32
  %3858 = and i32 %3857, 255
  %3859 = call i32 @llvm.ctpop.i32(i32 %3858) #16
  %3860 = trunc i32 %3859 to i8
  %3861 = and i8 %3860, 1
  %3862 = xor i8 %3861, 1
  %3863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3862, i8* %3863, align 1, !tbaa !2446
  %3864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3864, align 1, !tbaa !2447
  %3865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3865, align 1, !tbaa !2448
  %3866 = lshr i64 %3852, 63
  %3867 = trunc i64 %3866 to i8
  %3868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3867, i8* %3868, align 1, !tbaa !2449
  %3869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3855, i8* %3869, align 1, !tbaa !2450
  %3870 = load i64, i64* %RAX
  %3871 = load i64, i64* %RCX
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 3
  store i64 %3873, i64* %PC
  %3874 = add i64 %3871, %3870
  store i64 %3874, i64* %RAX, align 8, !tbaa !2428
  %3875 = icmp ult i64 %3874, %3870
  %3876 = icmp ult i64 %3874, %3871
  %3877 = or i1 %3875, %3876
  %3878 = zext i1 %3877 to i8
  %3879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3878, i8* %3879, align 1, !tbaa !2432
  %3880 = trunc i64 %3874 to i32
  %3881 = and i32 %3880, 255
  %3882 = call i32 @llvm.ctpop.i32(i32 %3881) #16
  %3883 = trunc i32 %3882 to i8
  %3884 = and i8 %3883, 1
  %3885 = xor i8 %3884, 1
  %3886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3885, i8* %3886, align 1, !tbaa !2446
  %3887 = xor i64 %3871, %3870
  %3888 = xor i64 %3887, %3874
  %3889 = lshr i64 %3888, 4
  %3890 = trunc i64 %3889 to i8
  %3891 = and i8 %3890, 1
  %3892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3891, i8* %3892, align 1, !tbaa !2447
  %3893 = icmp eq i64 %3874, 0
  %3894 = zext i1 %3893 to i8
  %3895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3894, i8* %3895, align 1, !tbaa !2448
  %3896 = lshr i64 %3874, 63
  %3897 = trunc i64 %3896 to i8
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3897, i8* %3898, align 1, !tbaa !2449
  %3899 = lshr i64 %3870, 63
  %3900 = lshr i64 %3871, 63
  %3901 = xor i64 %3896, %3899
  %3902 = xor i64 %3896, %3900
  %3903 = add nuw nsw i64 %3901, %3902
  %3904 = icmp eq i64 %3903, 2
  %3905 = zext i1 %3904 to i8
  %3906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3905, i8* %3906, align 1, !tbaa !2450
  %3907 = load i64, i64* %RBP
  %3908 = sub i64 %3907, 104
  %3909 = load i64, i64* %PC
  %3910 = add i64 %3909, 4
  store i64 %3910, i64* %PC
  %3911 = inttoptr i64 %3908 to i32*
  %3912 = load i32, i32* %3911
  %3913 = sext i32 %3912 to i64
  store i64 %3913, i64* %RCX, align 8, !tbaa !2428
  %3914 = load i64, i64* %RAX
  %3915 = load i64, i64* %RCX
  %3916 = mul i64 %3915, 8
  %3917 = add i64 %3916, %3914
  %3918 = bitcast %union.vec128_t* %XMM0 to i8*
  %3919 = load i64, i64* %PC
  %3920 = add i64 %3919, 5
  store i64 %3920, i64* %PC
  %3921 = bitcast i8* %3918 to double*
  %3922 = load double, double* %3921, align 1
  %3923 = inttoptr i64 %3917 to double*
  store double %3922, double* %3923
  %3924 = load i64, i64* %RBP
  %3925 = add i64 %3924, 72
  %3926 = load i64, i64* %PC
  %3927 = add i64 %3926, 4
  store i64 %3927, i64* %PC
  %3928 = inttoptr i64 %3925 to i64*
  %3929 = load i64, i64* %3928
  store i64 %3929, i64* %RAX, align 8, !tbaa !2428
  %3930 = load i64, i64* %RBP
  %3931 = sub i64 %3930, 48
  %3932 = load i64, i64* %PC
  %3933 = add i64 %3932, 4
  store i64 %3933, i64* %PC
  %3934 = inttoptr i64 %3931 to i32*
  %3935 = load i32, i32* %3934
  %3936 = sext i32 %3935 to i64
  store i64 %3936, i64* %RCX, align 8, !tbaa !2428
  %3937 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3938 = load i64, i64* %RAX
  %3939 = load i64, i64* %RCX
  %3940 = mul i64 %3939, 8
  %3941 = add i64 %3940, %3938
  %3942 = load i64, i64* %PC
  %3943 = add i64 %3942, 5
  store i64 %3943, i64* %PC
  %3944 = inttoptr i64 %3941 to double*
  %3945 = load double, double* %3944
  %3946 = bitcast i8* %3937 to double*
  store double %3945, double* %3946, align 1, !tbaa !2452
  %3947 = getelementptr inbounds i8, i8* %3937, i64 8
  %3948 = bitcast i8* %3947 to double*
  store double 0.000000e+00, double* %3948, align 1, !tbaa !2452
  %3949 = load i64, i64* %RBP
  %3950 = add i64 %3949, 80
  %3951 = load i64, i64* %PC
  %3952 = add i64 %3951, 4
  store i64 %3952, i64* %PC
  %3953 = inttoptr i64 %3950 to i64*
  %3954 = load i64, i64* %3953
  store i64 %3954, i64* %RAX, align 8, !tbaa !2428
  %3955 = load i64, i64* %RBP
  %3956 = sub i64 %3955, 48
  %3957 = load i64, i64* %PC
  %3958 = add i64 %3957, 4
  store i64 %3958, i64* %PC
  %3959 = inttoptr i64 %3956 to i32*
  %3960 = load i32, i32* %3959
  %3961 = sext i32 %3960 to i64
  store i64 %3961, i64* %RCX, align 8, !tbaa !2428
  %3962 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3963 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3964 = load i64, i64* %RAX
  %3965 = load i64, i64* %RCX
  %3966 = mul i64 %3965, 8
  %3967 = add i64 %3966, %3964
  %3968 = load i64, i64* %PC
  %3969 = add i64 %3968, 5
  store i64 %3969, i64* %PC
  %3970 = bitcast i8* %3963 to double*
  %3971 = load double, double* %3970, align 1
  %3972 = getelementptr inbounds i8, i8* %3963, i64 8
  %3973 = bitcast i8* %3972 to i64*
  %3974 = load i64, i64* %3973, align 1
  %3975 = inttoptr i64 %3967 to double*
  %3976 = load double, double* %3975
  %3977 = fdiv double %3971, %3976
  %3978 = bitcast i8* %3962 to double*
  store double %3977, double* %3978, align 1, !tbaa !2452
  %3979 = getelementptr inbounds i8, i8* %3962, i64 8
  %3980 = bitcast i8* %3979 to i64*
  store i64 %3974, i64* %3980, align 1, !tbaa !2452
  %3981 = load i64, i64* %RBP
  %3982 = add i64 %3981, 48
  %3983 = load i64, i64* %PC
  %3984 = add i64 %3983, 4
  store i64 %3984, i64* %PC
  %3985 = inttoptr i64 %3982 to i64*
  %3986 = load i64, i64* %3985
  store i64 %3986, i64* %RAX, align 8, !tbaa !2428
  %3987 = load i64, i64* %RBP
  %3988 = sub i64 %3987, 100
  %3989 = load i64, i64* %PC
  %3990 = add i64 %3989, 4
  store i64 %3990, i64* %PC
  %3991 = inttoptr i64 %3988 to i32*
  %3992 = load i32, i32* %3991
  %3993 = sext i32 %3992 to i64
  store i64 %3993, i64* %RCX, align 8, !tbaa !2428
  %3994 = load i64, i64* %RCX
  %3995 = load i64, i64* %PC
  %3996 = add i64 %3995, 7
  store i64 %3996, i64* %PC
  %3997 = sext i64 %3994 to i128
  %3998 = and i128 %3997, -18446744073709551616
  %3999 = zext i64 %3994 to i128
  %4000 = or i128 %3998, %3999
  %4001 = mul nsw i128 33800, %4000
  %4002 = trunc i128 %4001 to i64
  store i64 %4002, i64* %RCX, align 8, !tbaa !2428
  %4003 = sext i64 %4002 to i128
  %4004 = icmp ne i128 %4003, %4001
  %4005 = zext i1 %4004 to i8
  %4006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4005, i8* %4006, align 1, !tbaa !2432
  %4007 = trunc i128 %4001 to i32
  %4008 = and i32 %4007, 255
  %4009 = call i32 @llvm.ctpop.i32(i32 %4008) #16
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  %4012 = xor i8 %4011, 1
  %4013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4012, i8* %4013, align 1, !tbaa !2446
  %4014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4014, align 1, !tbaa !2447
  %4015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4015, align 1, !tbaa !2448
  %4016 = lshr i64 %4002, 63
  %4017 = trunc i64 %4016 to i8
  %4018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4017, i8* %4018, align 1, !tbaa !2449
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4005, i8* %4019, align 1, !tbaa !2450
  %4020 = load i64, i64* %RAX
  %4021 = load i64, i64* %RCX
  %4022 = load i64, i64* %PC
  %4023 = add i64 %4022, 3
  store i64 %4023, i64* %PC
  %4024 = add i64 %4021, %4020
  store i64 %4024, i64* %RAX, align 8, !tbaa !2428
  %4025 = icmp ult i64 %4024, %4020
  %4026 = icmp ult i64 %4024, %4021
  %4027 = or i1 %4025, %4026
  %4028 = zext i1 %4027 to i8
  %4029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4028, i8* %4029, align 1, !tbaa !2432
  %4030 = trunc i64 %4024 to i32
  %4031 = and i32 %4030, 255
  %4032 = call i32 @llvm.ctpop.i32(i32 %4031) #16
  %4033 = trunc i32 %4032 to i8
  %4034 = and i8 %4033, 1
  %4035 = xor i8 %4034, 1
  %4036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4035, i8* %4036, align 1, !tbaa !2446
  %4037 = xor i64 %4021, %4020
  %4038 = xor i64 %4037, %4024
  %4039 = lshr i64 %4038, 4
  %4040 = trunc i64 %4039 to i8
  %4041 = and i8 %4040, 1
  %4042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4041, i8* %4042, align 1, !tbaa !2447
  %4043 = icmp eq i64 %4024, 0
  %4044 = zext i1 %4043 to i8
  %4045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4044, i8* %4045, align 1, !tbaa !2448
  %4046 = lshr i64 %4024, 63
  %4047 = trunc i64 %4046 to i8
  %4048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4047, i8* %4048, align 1, !tbaa !2449
  %4049 = lshr i64 %4020, 63
  %4050 = lshr i64 %4021, 63
  %4051 = xor i64 %4046, %4049
  %4052 = xor i64 %4046, %4050
  %4053 = add nuw nsw i64 %4051, %4052
  %4054 = icmp eq i64 %4053, 2
  %4055 = zext i1 %4054 to i8
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4055, i8* %4056, align 1, !tbaa !2450
  %4057 = load i64, i64* %RBP
  %4058 = sub i64 %4057, 52
  %4059 = load i64, i64* %PC
  %4060 = add i64 %4059, 4
  store i64 %4060, i64* %PC
  %4061 = inttoptr i64 %4058 to i32*
  %4062 = load i32, i32* %4061
  %4063 = sext i32 %4062 to i64
  store i64 %4063, i64* %RCX, align 8, !tbaa !2428
  %4064 = load i64, i64* %RCX
  %4065 = load i64, i64* %PC
  %4066 = add i64 %4065, 7
  store i64 %4066, i64* %PC
  %4067 = sext i64 %4064 to i128
  %4068 = and i128 %4067, -18446744073709551616
  %4069 = zext i64 %4064 to i128
  %4070 = or i128 %4068, %4069
  %4071 = mul nsw i128 520, %4070
  %4072 = trunc i128 %4071 to i64
  store i64 %4072, i64* %RCX, align 8, !tbaa !2428
  %4073 = sext i64 %4072 to i128
  %4074 = icmp ne i128 %4073, %4071
  %4075 = zext i1 %4074 to i8
  %4076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4075, i8* %4076, align 1, !tbaa !2432
  %4077 = trunc i128 %4071 to i32
  %4078 = and i32 %4077, 255
  %4079 = call i32 @llvm.ctpop.i32(i32 %4078) #16
  %4080 = trunc i32 %4079 to i8
  %4081 = and i8 %4080, 1
  %4082 = xor i8 %4081, 1
  %4083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4082, i8* %4083, align 1, !tbaa !2446
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4084, align 1, !tbaa !2447
  %4085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4085, align 1, !tbaa !2448
  %4086 = lshr i64 %4072, 63
  %4087 = trunc i64 %4086 to i8
  %4088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4087, i8* %4088, align 1, !tbaa !2449
  %4089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4075, i8* %4089, align 1, !tbaa !2450
  %4090 = load i64, i64* %RAX
  %4091 = load i64, i64* %RCX
  %4092 = load i64, i64* %PC
  %4093 = add i64 %4092, 3
  store i64 %4093, i64* %PC
  %4094 = add i64 %4091, %4090
  store i64 %4094, i64* %RAX, align 8, !tbaa !2428
  %4095 = icmp ult i64 %4094, %4090
  %4096 = icmp ult i64 %4094, %4091
  %4097 = or i1 %4095, %4096
  %4098 = zext i1 %4097 to i8
  %4099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4098, i8* %4099, align 1, !tbaa !2432
  %4100 = trunc i64 %4094 to i32
  %4101 = and i32 %4100, 255
  %4102 = call i32 @llvm.ctpop.i32(i32 %4101) #16
  %4103 = trunc i32 %4102 to i8
  %4104 = and i8 %4103, 1
  %4105 = xor i8 %4104, 1
  %4106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4105, i8* %4106, align 1, !tbaa !2446
  %4107 = xor i64 %4091, %4090
  %4108 = xor i64 %4107, %4094
  %4109 = lshr i64 %4108, 4
  %4110 = trunc i64 %4109 to i8
  %4111 = and i8 %4110, 1
  %4112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4111, i8* %4112, align 1, !tbaa !2447
  %4113 = icmp eq i64 %4094, 0
  %4114 = zext i1 %4113 to i8
  %4115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4114, i8* %4115, align 1, !tbaa !2448
  %4116 = lshr i64 %4094, 63
  %4117 = trunc i64 %4116 to i8
  %4118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4117, i8* %4118, align 1, !tbaa !2449
  %4119 = lshr i64 %4090, 63
  %4120 = lshr i64 %4091, 63
  %4121 = xor i64 %4116, %4119
  %4122 = xor i64 %4116, %4120
  %4123 = add nuw nsw i64 %4121, %4122
  %4124 = icmp eq i64 %4123, 2
  %4125 = zext i1 %4124 to i8
  %4126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4125, i8* %4126, align 1, !tbaa !2450
  %4127 = load i64, i64* %RBP
  %4128 = sub i64 %4127, 48
  %4129 = load i64, i64* %PC
  %4130 = add i64 %4129, 4
  store i64 %4130, i64* %PC
  %4131 = inttoptr i64 %4128 to i32*
  %4132 = load i32, i32* %4131
  %4133 = sext i32 %4132 to i64
  store i64 %4133, i64* %RCX, align 8, !tbaa !2428
  %4134 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4135 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4136 = load i64, i64* %RAX
  %4137 = load i64, i64* %RCX
  %4138 = mul i64 %4137, 8
  %4139 = add i64 %4138, %4136
  %4140 = load i64, i64* %PC
  %4141 = add i64 %4140, 5
  store i64 %4141, i64* %PC
  %4142 = bitcast i8* %4135 to double*
  %4143 = load double, double* %4142, align 1
  %4144 = getelementptr inbounds i8, i8* %4135, i64 8
  %4145 = bitcast i8* %4144 to i64*
  %4146 = load i64, i64* %4145, align 1
  %4147 = inttoptr i64 %4139 to double*
  %4148 = load double, double* %4147
  %4149 = fmul double %4143, %4148
  %4150 = bitcast i8* %4134 to double*
  store double %4149, double* %4150, align 1, !tbaa !2452
  %4151 = getelementptr inbounds i8, i8* %4134, i64 8
  %4152 = bitcast i8* %4151 to i64*
  store i64 %4146, i64* %4152, align 1, !tbaa !2452
  %4153 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4154 = load i64, i64* %RBP
  %4155 = sub i64 %4154, 64
  %4156 = load i64, i64* %PC
  %4157 = add i64 %4156, 5
  store i64 %4157, i64* %PC
  %4158 = inttoptr i64 %4155 to double*
  %4159 = load double, double* %4158
  %4160 = bitcast i8* %4153 to double*
  store double %4159, double* %4160, align 1, !tbaa !2452
  %4161 = getelementptr inbounds i8, i8* %4153, i64 8
  %4162 = bitcast i8* %4161 to double*
  store double 0.000000e+00, double* %4162, align 1, !tbaa !2452
  %4163 = load i64, i64* %RBP
  %4164 = add i64 %4163, 64
  %4165 = load i64, i64* %PC
  %4166 = add i64 %4165, 4
  store i64 %4166, i64* %PC
  %4167 = inttoptr i64 %4164 to i64*
  %4168 = load i64, i64* %4167
  store i64 %4168, i64* %RAX, align 8, !tbaa !2428
  %4169 = load i64, i64* %RBP
  %4170 = sub i64 %4169, 100
  %4171 = load i64, i64* %PC
  %4172 = add i64 %4171, 4
  store i64 %4172, i64* %PC
  %4173 = inttoptr i64 %4170 to i32*
  %4174 = load i32, i32* %4173
  %4175 = sext i32 %4174 to i64
  store i64 %4175, i64* %RCX, align 8, !tbaa !2428
  %4176 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4177 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4178 = load i64, i64* %RAX
  %4179 = load i64, i64* %RCX
  %4180 = mul i64 %4179, 8
  %4181 = add i64 %4180, %4178
  %4182 = load i64, i64* %PC
  %4183 = add i64 %4182, 5
  store i64 %4183, i64* %PC
  %4184 = bitcast i8* %4177 to double*
  %4185 = load double, double* %4184, align 1
  %4186 = getelementptr inbounds i8, i8* %4177, i64 8
  %4187 = bitcast i8* %4186 to i64*
  %4188 = load i64, i64* %4187, align 1
  %4189 = inttoptr i64 %4181 to double*
  %4190 = load double, double* %4189
  %4191 = fmul double %4185, %4190
  %4192 = bitcast i8* %4176 to double*
  store double %4191, double* %4192, align 1, !tbaa !2452
  %4193 = getelementptr inbounds i8, i8* %4176, i64 8
  %4194 = bitcast i8* %4193 to i64*
  store i64 %4188, i64* %4194, align 1, !tbaa !2452
  %4195 = load i64, i64* %RBP
  %4196 = add i64 %4195, 80
  %4197 = load i64, i64* %PC
  %4198 = add i64 %4197, 4
  store i64 %4198, i64* %PC
  %4199 = inttoptr i64 %4196 to i64*
  %4200 = load i64, i64* %4199
  store i64 %4200, i64* %RAX, align 8, !tbaa !2428
  %4201 = load i64, i64* %RBP
  %4202 = sub i64 %4201, 48
  %4203 = load i64, i64* %PC
  %4204 = add i64 %4203, 4
  store i64 %4204, i64* %PC
  %4205 = inttoptr i64 %4202 to i32*
  %4206 = load i32, i32* %4205
  %4207 = sext i32 %4206 to i64
  store i64 %4207, i64* %RCX, align 8, !tbaa !2428
  %4208 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4209 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4210 = load i64, i64* %RAX
  %4211 = load i64, i64* %RCX
  %4212 = mul i64 %4211, 8
  %4213 = add i64 %4212, %4210
  %4214 = load i64, i64* %PC
  %4215 = add i64 %4214, 5
  store i64 %4215, i64* %PC
  %4216 = bitcast i8* %4209 to double*
  %4217 = load double, double* %4216, align 1
  %4218 = getelementptr inbounds i8, i8* %4209, i64 8
  %4219 = bitcast i8* %4218 to i64*
  %4220 = load i64, i64* %4219, align 1
  %4221 = inttoptr i64 %4213 to double*
  %4222 = load double, double* %4221
  %4223 = fdiv double %4217, %4222
  %4224 = bitcast i8* %4208 to double*
  store double %4223, double* %4224, align 1, !tbaa !2452
  %4225 = getelementptr inbounds i8, i8* %4208, i64 8
  %4226 = bitcast i8* %4225 to i64*
  store i64 %4220, i64* %4226, align 1, !tbaa !2452
  %4227 = load i64, i64* %RBP
  %4228 = add i64 %4227, 16
  %4229 = load i64, i64* %PC
  %4230 = add i64 %4229, 4
  store i64 %4230, i64* %PC
  %4231 = inttoptr i64 %4228 to i64*
  %4232 = load i64, i64* %4231
  store i64 %4232, i64* %RAX, align 8, !tbaa !2428
  %4233 = load i64, i64* %RBP
  %4234 = sub i64 %4233, 100
  %4235 = load i64, i64* %PC
  %4236 = add i64 %4235, 4
  store i64 %4236, i64* %PC
  %4237 = inttoptr i64 %4234 to i32*
  %4238 = load i32, i32* %4237
  %4239 = sext i32 %4238 to i64
  store i64 %4239, i64* %RCX, align 8, !tbaa !2428
  %4240 = load i64, i64* %RCX
  %4241 = load i64, i64* %PC
  %4242 = add i64 %4241, 7
  store i64 %4242, i64* %PC
  %4243 = sext i64 %4240 to i128
  %4244 = and i128 %4243, -18446744073709551616
  %4245 = zext i64 %4240 to i128
  %4246 = or i128 %4244, %4245
  %4247 = mul nsw i128 520, %4246
  %4248 = trunc i128 %4247 to i64
  store i64 %4248, i64* %RCX, align 8, !tbaa !2428
  %4249 = sext i64 %4248 to i128
  %4250 = icmp ne i128 %4249, %4247
  %4251 = zext i1 %4250 to i8
  %4252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4251, i8* %4252, align 1, !tbaa !2432
  %4253 = trunc i128 %4247 to i32
  %4254 = and i32 %4253, 255
  %4255 = call i32 @llvm.ctpop.i32(i32 %4254) #16
  %4256 = trunc i32 %4255 to i8
  %4257 = and i8 %4256, 1
  %4258 = xor i8 %4257, 1
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4258, i8* %4259, align 1, !tbaa !2446
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4260, align 1, !tbaa !2447
  %4261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4261, align 1, !tbaa !2448
  %4262 = lshr i64 %4248, 63
  %4263 = trunc i64 %4262 to i8
  %4264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4263, i8* %4264, align 1, !tbaa !2449
  %4265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4251, i8* %4265, align 1, !tbaa !2450
  %4266 = load i64, i64* %RAX
  %4267 = load i64, i64* %RCX
  %4268 = load i64, i64* %PC
  %4269 = add i64 %4268, 3
  store i64 %4269, i64* %PC
  %4270 = add i64 %4267, %4266
  store i64 %4270, i64* %RAX, align 8, !tbaa !2428
  %4271 = icmp ult i64 %4270, %4266
  %4272 = icmp ult i64 %4270, %4267
  %4273 = or i1 %4271, %4272
  %4274 = zext i1 %4273 to i8
  %4275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4274, i8* %4275, align 1, !tbaa !2432
  %4276 = trunc i64 %4270 to i32
  %4277 = and i32 %4276, 255
  %4278 = call i32 @llvm.ctpop.i32(i32 %4277) #16
  %4279 = trunc i32 %4278 to i8
  %4280 = and i8 %4279, 1
  %4281 = xor i8 %4280, 1
  %4282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4281, i8* %4282, align 1, !tbaa !2446
  %4283 = xor i64 %4267, %4266
  %4284 = xor i64 %4283, %4270
  %4285 = lshr i64 %4284, 4
  %4286 = trunc i64 %4285 to i8
  %4287 = and i8 %4286, 1
  %4288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4287, i8* %4288, align 1, !tbaa !2447
  %4289 = icmp eq i64 %4270, 0
  %4290 = zext i1 %4289 to i8
  %4291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4290, i8* %4291, align 1, !tbaa !2448
  %4292 = lshr i64 %4270, 63
  %4293 = trunc i64 %4292 to i8
  %4294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4293, i8* %4294, align 1, !tbaa !2449
  %4295 = lshr i64 %4266, 63
  %4296 = lshr i64 %4267, 63
  %4297 = xor i64 %4292, %4295
  %4298 = xor i64 %4292, %4296
  %4299 = add nuw nsw i64 %4297, %4298
  %4300 = icmp eq i64 %4299, 2
  %4301 = zext i1 %4300 to i8
  %4302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4301, i8* %4302, align 1, !tbaa !2450
  %4303 = load i64, i64* %RBP
  %4304 = sub i64 %4303, 104
  %4305 = load i64, i64* %PC
  %4306 = add i64 %4305, 4
  store i64 %4306, i64* %PC
  %4307 = inttoptr i64 %4304 to i32*
  %4308 = load i32, i32* %4307
  %4309 = sext i32 %4308 to i64
  store i64 %4309, i64* %RCX, align 8, !tbaa !2428
  %4310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4311 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4312 = load i64, i64* %RAX
  %4313 = load i64, i64* %RCX
  %4314 = mul i64 %4313, 8
  %4315 = add i64 %4314, %4312
  %4316 = load i64, i64* %PC
  %4317 = add i64 %4316, 5
  store i64 %4317, i64* %PC
  %4318 = bitcast i8* %4311 to double*
  %4319 = load double, double* %4318, align 1
  %4320 = getelementptr inbounds i8, i8* %4311, i64 8
  %4321 = bitcast i8* %4320 to i64*
  %4322 = load i64, i64* %4321, align 1
  %4323 = inttoptr i64 %4315 to double*
  %4324 = load double, double* %4323
  %4325 = fmul double %4319, %4324
  %4326 = bitcast i8* %4310 to double*
  store double %4325, double* %4326, align 1, !tbaa !2452
  %4327 = getelementptr inbounds i8, i8* %4310, i64 8
  %4328 = bitcast i8* %4327 to i64*
  store i64 %4322, i64* %4328, align 1, !tbaa !2452
  %4329 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4331 = bitcast %union.vec128_t* %XMM1 to i8*
  %4332 = load i64, i64* %PC
  %4333 = add i64 %4332, 4
  store i64 %4333, i64* %PC
  %4334 = bitcast i8* %4330 to double*
  %4335 = load double, double* %4334, align 1
  %4336 = getelementptr inbounds i8, i8* %4330, i64 8
  %4337 = bitcast i8* %4336 to i64*
  %4338 = load i64, i64* %4337, align 1
  %4339 = bitcast i8* %4331 to double*
  %4340 = load double, double* %4339, align 1
  %4341 = fadd double %4335, %4340
  %4342 = bitcast i8* %4329 to double*
  store double %4341, double* %4342, align 1, !tbaa !2452
  %4343 = getelementptr inbounds i8, i8* %4329, i64 8
  %4344 = bitcast i8* %4343 to i64*
  store i64 %4338, i64* %4344, align 1, !tbaa !2452
  %4345 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4346 = load i64, i64* %RBP
  %4347 = sub i64 %4346, 64
  %4348 = load i64, i64* %PC
  %4349 = add i64 %4348, 5
  store i64 %4349, i64* %PC
  %4350 = inttoptr i64 %4347 to double*
  %4351 = load double, double* %4350
  %4352 = bitcast i8* %4345 to double*
  store double %4351, double* %4352, align 1, !tbaa !2452
  %4353 = getelementptr inbounds i8, i8* %4345, i64 8
  %4354 = bitcast i8* %4353 to double*
  store double 0.000000e+00, double* %4354, align 1, !tbaa !2452
  %4355 = load i64, i64* %RBP
  %4356 = add i64 %4355, 56
  %4357 = load i64, i64* %PC
  %4358 = add i64 %4357, 4
  store i64 %4358, i64* %PC
  %4359 = inttoptr i64 %4356 to i64*
  %4360 = load i64, i64* %4359
  store i64 %4360, i64* %RAX, align 8, !tbaa !2428
  %4361 = load i64, i64* %RBP
  %4362 = sub i64 %4361, 100
  %4363 = load i64, i64* %PC
  %4364 = add i64 %4363, 4
  store i64 %4364, i64* %PC
  %4365 = inttoptr i64 %4362 to i32*
  %4366 = load i32, i32* %4365
  %4367 = sext i32 %4366 to i64
  store i64 %4367, i64* %RCX, align 8, !tbaa !2428
  %4368 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4369 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4370 = load i64, i64* %RAX
  %4371 = load i64, i64* %RCX
  %4372 = mul i64 %4371, 8
  %4373 = add i64 %4372, %4370
  %4374 = load i64, i64* %PC
  %4375 = add i64 %4374, 5
  store i64 %4375, i64* %PC
  %4376 = bitcast i8* %4369 to double*
  %4377 = load double, double* %4376, align 1
  %4378 = getelementptr inbounds i8, i8* %4369, i64 8
  %4379 = bitcast i8* %4378 to i64*
  %4380 = load i64, i64* %4379, align 1
  %4381 = inttoptr i64 %4373 to double*
  %4382 = load double, double* %4381
  %4383 = fmul double %4377, %4382
  %4384 = bitcast i8* %4368 to double*
  store double %4383, double* %4384, align 1, !tbaa !2452
  %4385 = getelementptr inbounds i8, i8* %4368, i64 8
  %4386 = bitcast i8* %4385 to i64*
  store i64 %4380, i64* %4386, align 1, !tbaa !2452
  %4387 = load i64, i64* %RBP
  %4388 = add i64 %4387, 80
  %4389 = load i64, i64* %PC
  %4390 = add i64 %4389, 4
  store i64 %4390, i64* %PC
  %4391 = inttoptr i64 %4388 to i64*
  %4392 = load i64, i64* %4391
  store i64 %4392, i64* %RAX, align 8, !tbaa !2428
  %4393 = load i64, i64* %RBP
  %4394 = sub i64 %4393, 48
  %4395 = load i64, i64* %PC
  %4396 = add i64 %4395, 4
  store i64 %4396, i64* %PC
  %4397 = inttoptr i64 %4394 to i32*
  %4398 = load i32, i32* %4397
  %4399 = sext i32 %4398 to i64
  store i64 %4399, i64* %RCX, align 8, !tbaa !2428
  %4400 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4401 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4402 = load i64, i64* %RAX
  %4403 = load i64, i64* %RCX
  %4404 = mul i64 %4403, 8
  %4405 = add i64 %4404, %4402
  %4406 = load i64, i64* %PC
  %4407 = add i64 %4406, 5
  store i64 %4407, i64* %PC
  %4408 = bitcast i8* %4401 to double*
  %4409 = load double, double* %4408, align 1
  %4410 = getelementptr inbounds i8, i8* %4401, i64 8
  %4411 = bitcast i8* %4410 to i64*
  %4412 = load i64, i64* %4411, align 1
  %4413 = inttoptr i64 %4405 to double*
  %4414 = load double, double* %4413
  %4415 = fdiv double %4409, %4414
  %4416 = bitcast i8* %4400 to double*
  store double %4415, double* %4416, align 1, !tbaa !2452
  %4417 = getelementptr inbounds i8, i8* %4400, i64 8
  %4418 = bitcast i8* %4417 to i64*
  store i64 %4412, i64* %4418, align 1, !tbaa !2452
  %4419 = load i64, i64* %RBP
  %4420 = add i64 %4419, 24
  %4421 = load i64, i64* %PC
  %4422 = add i64 %4421, 4
  store i64 %4422, i64* %PC
  %4423 = inttoptr i64 %4420 to i64*
  %4424 = load i64, i64* %4423
  store i64 %4424, i64* %RAX, align 8, !tbaa !2428
  %4425 = load i64, i64* %RBP
  %4426 = sub i64 %4425, 100
  %4427 = load i64, i64* %PC
  %4428 = add i64 %4427, 4
  store i64 %4428, i64* %PC
  %4429 = inttoptr i64 %4426 to i32*
  %4430 = load i32, i32* %4429
  %4431 = sext i32 %4430 to i64
  store i64 %4431, i64* %RCX, align 8, !tbaa !2428
  %4432 = load i64, i64* %RCX
  %4433 = load i64, i64* %PC
  %4434 = add i64 %4433, 7
  store i64 %4434, i64* %PC
  %4435 = sext i64 %4432 to i128
  %4436 = and i128 %4435, -18446744073709551616
  %4437 = zext i64 %4432 to i128
  %4438 = or i128 %4436, %4437
  %4439 = mul nsw i128 33800, %4438
  %4440 = trunc i128 %4439 to i64
  store i64 %4440, i64* %RCX, align 8, !tbaa !2428
  %4441 = sext i64 %4440 to i128
  %4442 = icmp ne i128 %4441, %4439
  %4443 = zext i1 %4442 to i8
  %4444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4443, i8* %4444, align 1, !tbaa !2432
  %4445 = trunc i128 %4439 to i32
  %4446 = and i32 %4445, 255
  %4447 = call i32 @llvm.ctpop.i32(i32 %4446) #16
  %4448 = trunc i32 %4447 to i8
  %4449 = and i8 %4448, 1
  %4450 = xor i8 %4449, 1
  %4451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4450, i8* %4451, align 1, !tbaa !2446
  %4452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4452, align 1, !tbaa !2447
  %4453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4453, align 1, !tbaa !2448
  %4454 = lshr i64 %4440, 63
  %4455 = trunc i64 %4454 to i8
  %4456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4455, i8* %4456, align 1, !tbaa !2449
  %4457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4443, i8* %4457, align 1, !tbaa !2450
  %4458 = load i64, i64* %RAX
  %4459 = load i64, i64* %RCX
  %4460 = load i64, i64* %PC
  %4461 = add i64 %4460, 3
  store i64 %4461, i64* %PC
  %4462 = add i64 %4459, %4458
  store i64 %4462, i64* %RAX, align 8, !tbaa !2428
  %4463 = icmp ult i64 %4462, %4458
  %4464 = icmp ult i64 %4462, %4459
  %4465 = or i1 %4463, %4464
  %4466 = zext i1 %4465 to i8
  %4467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4466, i8* %4467, align 1, !tbaa !2432
  %4468 = trunc i64 %4462 to i32
  %4469 = and i32 %4468, 255
  %4470 = call i32 @llvm.ctpop.i32(i32 %4469) #16
  %4471 = trunc i32 %4470 to i8
  %4472 = and i8 %4471, 1
  %4473 = xor i8 %4472, 1
  %4474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4473, i8* %4474, align 1, !tbaa !2446
  %4475 = xor i64 %4459, %4458
  %4476 = xor i64 %4475, %4462
  %4477 = lshr i64 %4476, 4
  %4478 = trunc i64 %4477 to i8
  %4479 = and i8 %4478, 1
  %4480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4479, i8* %4480, align 1, !tbaa !2447
  %4481 = icmp eq i64 %4462, 0
  %4482 = zext i1 %4481 to i8
  %4483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4482, i8* %4483, align 1, !tbaa !2448
  %4484 = lshr i64 %4462, 63
  %4485 = trunc i64 %4484 to i8
  %4486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4485, i8* %4486, align 1, !tbaa !2449
  %4487 = lshr i64 %4458, 63
  %4488 = lshr i64 %4459, 63
  %4489 = xor i64 %4484, %4487
  %4490 = xor i64 %4484, %4488
  %4491 = add nuw nsw i64 %4489, %4490
  %4492 = icmp eq i64 %4491, 2
  %4493 = zext i1 %4492 to i8
  %4494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4493, i8* %4494, align 1, !tbaa !2450
  %4495 = load i64, i64* %RBP
  %4496 = sub i64 %4495, 52
  %4497 = load i64, i64* %PC
  %4498 = add i64 %4497, 4
  store i64 %4498, i64* %PC
  %4499 = inttoptr i64 %4496 to i32*
  %4500 = load i32, i32* %4499
  %4501 = sext i32 %4500 to i64
  store i64 %4501, i64* %RCX, align 8, !tbaa !2428
  %4502 = load i64, i64* %RCX
  %4503 = load i64, i64* %PC
  %4504 = add i64 %4503, 7
  store i64 %4504, i64* %PC
  %4505 = sext i64 %4502 to i128
  %4506 = and i128 %4505, -18446744073709551616
  %4507 = zext i64 %4502 to i128
  %4508 = or i128 %4506, %4507
  %4509 = mul nsw i128 520, %4508
  %4510 = trunc i128 %4509 to i64
  store i64 %4510, i64* %RCX, align 8, !tbaa !2428
  %4511 = sext i64 %4510 to i128
  %4512 = icmp ne i128 %4511, %4509
  %4513 = zext i1 %4512 to i8
  %4514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4513, i8* %4514, align 1, !tbaa !2432
  %4515 = trunc i128 %4509 to i32
  %4516 = and i32 %4515, 255
  %4517 = call i32 @llvm.ctpop.i32(i32 %4516) #16
  %4518 = trunc i32 %4517 to i8
  %4519 = and i8 %4518, 1
  %4520 = xor i8 %4519, 1
  %4521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4520, i8* %4521, align 1, !tbaa !2446
  %4522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4522, align 1, !tbaa !2447
  %4523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4523, align 1, !tbaa !2448
  %4524 = lshr i64 %4510, 63
  %4525 = trunc i64 %4524 to i8
  %4526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4525, i8* %4526, align 1, !tbaa !2449
  %4527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4513, i8* %4527, align 1, !tbaa !2450
  %4528 = load i64, i64* %RAX
  %4529 = load i64, i64* %RCX
  %4530 = load i64, i64* %PC
  %4531 = add i64 %4530, 3
  store i64 %4531, i64* %PC
  %4532 = add i64 %4529, %4528
  store i64 %4532, i64* %RAX, align 8, !tbaa !2428
  %4533 = icmp ult i64 %4532, %4528
  %4534 = icmp ult i64 %4532, %4529
  %4535 = or i1 %4533, %4534
  %4536 = zext i1 %4535 to i8
  %4537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4536, i8* %4537, align 1, !tbaa !2432
  %4538 = trunc i64 %4532 to i32
  %4539 = and i32 %4538, 255
  %4540 = call i32 @llvm.ctpop.i32(i32 %4539) #16
  %4541 = trunc i32 %4540 to i8
  %4542 = and i8 %4541, 1
  %4543 = xor i8 %4542, 1
  %4544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4543, i8* %4544, align 1, !tbaa !2446
  %4545 = xor i64 %4529, %4528
  %4546 = xor i64 %4545, %4532
  %4547 = lshr i64 %4546, 4
  %4548 = trunc i64 %4547 to i8
  %4549 = and i8 %4548, 1
  %4550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4549, i8* %4550, align 1, !tbaa !2447
  %4551 = icmp eq i64 %4532, 0
  %4552 = zext i1 %4551 to i8
  %4553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4552, i8* %4553, align 1, !tbaa !2448
  %4554 = lshr i64 %4532, 63
  %4555 = trunc i64 %4554 to i8
  %4556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4555, i8* %4556, align 1, !tbaa !2449
  %4557 = lshr i64 %4528, 63
  %4558 = lshr i64 %4529, 63
  %4559 = xor i64 %4554, %4557
  %4560 = xor i64 %4554, %4558
  %4561 = add nuw nsw i64 %4559, %4560
  %4562 = icmp eq i64 %4561, 2
  %4563 = zext i1 %4562 to i8
  %4564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4563, i8* %4564, align 1, !tbaa !2450
  %4565 = load i64, i64* %RBP
  %4566 = sub i64 %4565, 48
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 4
  store i64 %4568, i64* %PC
  %4569 = inttoptr i64 %4566 to i32*
  %4570 = load i32, i32* %4569
  %4571 = sext i32 %4570 to i64
  store i64 %4571, i64* %RCX, align 8, !tbaa !2428
  %4572 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4573 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4574 = load i64, i64* %RAX
  %4575 = load i64, i64* %RCX
  %4576 = mul i64 %4575, 8
  %4577 = add i64 %4576, %4574
  %4578 = load i64, i64* %PC
  %4579 = add i64 %4578, 5
  store i64 %4579, i64* %PC
  %4580 = bitcast i8* %4573 to double*
  %4581 = load double, double* %4580, align 1
  %4582 = getelementptr inbounds i8, i8* %4573, i64 8
  %4583 = bitcast i8* %4582 to i64*
  %4584 = load i64, i64* %4583, align 1
  %4585 = inttoptr i64 %4577 to double*
  %4586 = load double, double* %4585
  %4587 = fmul double %4581, %4586
  %4588 = bitcast i8* %4572 to double*
  store double %4587, double* %4588, align 1, !tbaa !2452
  %4589 = getelementptr inbounds i8, i8* %4572, i64 8
  %4590 = bitcast i8* %4589 to i64*
  store i64 %4584, i64* %4590, align 1, !tbaa !2452
  %4591 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4592 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4593 = bitcast %union.vec128_t* %XMM1 to i8*
  %4594 = load i64, i64* %PC
  %4595 = add i64 %4594, 4
  store i64 %4595, i64* %PC
  %4596 = bitcast i8* %4592 to double*
  %4597 = load double, double* %4596, align 1
  %4598 = getelementptr inbounds i8, i8* %4592, i64 8
  %4599 = bitcast i8* %4598 to i64*
  %4600 = load i64, i64* %4599, align 1
  %4601 = bitcast i8* %4593 to double*
  %4602 = load double, double* %4601, align 1
  %4603 = fsub double %4597, %4602
  %4604 = bitcast i8* %4591 to double*
  store double %4603, double* %4604, align 1, !tbaa !2452
  %4605 = getelementptr inbounds i8, i8* %4591, i64 8
  %4606 = bitcast i8* %4605 to i64*
  store i64 %4600, i64* %4606, align 1, !tbaa !2452
  %4607 = load i64, i64* %RBP
  %4608 = add i64 %4607, 48
  %4609 = load i64, i64* %PC
  %4610 = add i64 %4609, 4
  store i64 %4610, i64* %PC
  %4611 = inttoptr i64 %4608 to i64*
  %4612 = load i64, i64* %4611
  store i64 %4612, i64* %RAX, align 8, !tbaa !2428
  %4613 = load i64, i64* %RBP
  %4614 = sub i64 %4613, 100
  %4615 = load i64, i64* %PC
  %4616 = add i64 %4615, 4
  store i64 %4616, i64* %PC
  %4617 = inttoptr i64 %4614 to i32*
  %4618 = load i32, i32* %4617
  %4619 = sext i32 %4618 to i64
  store i64 %4619, i64* %RCX, align 8, !tbaa !2428
  %4620 = load i64, i64* %RCX
  %4621 = load i64, i64* %PC
  %4622 = add i64 %4621, 7
  store i64 %4622, i64* %PC
  %4623 = sext i64 %4620 to i128
  %4624 = and i128 %4623, -18446744073709551616
  %4625 = zext i64 %4620 to i128
  %4626 = or i128 %4624, %4625
  %4627 = mul nsw i128 33800, %4626
  %4628 = trunc i128 %4627 to i64
  store i64 %4628, i64* %RCX, align 8, !tbaa !2428
  %4629 = sext i64 %4628 to i128
  %4630 = icmp ne i128 %4629, %4627
  %4631 = zext i1 %4630 to i8
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4631, i8* %4632, align 1, !tbaa !2432
  %4633 = trunc i128 %4627 to i32
  %4634 = and i32 %4633, 255
  %4635 = call i32 @llvm.ctpop.i32(i32 %4634) #16
  %4636 = trunc i32 %4635 to i8
  %4637 = and i8 %4636, 1
  %4638 = xor i8 %4637, 1
  %4639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4638, i8* %4639, align 1, !tbaa !2446
  %4640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4640, align 1, !tbaa !2447
  %4641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4641, align 1, !tbaa !2448
  %4642 = lshr i64 %4628, 63
  %4643 = trunc i64 %4642 to i8
  %4644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4643, i8* %4644, align 1, !tbaa !2449
  %4645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4631, i8* %4645, align 1, !tbaa !2450
  %4646 = load i64, i64* %RAX
  %4647 = load i64, i64* %RCX
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 3
  store i64 %4649, i64* %PC
  %4650 = add i64 %4647, %4646
  store i64 %4650, i64* %RAX, align 8, !tbaa !2428
  %4651 = icmp ult i64 %4650, %4646
  %4652 = icmp ult i64 %4650, %4647
  %4653 = or i1 %4651, %4652
  %4654 = zext i1 %4653 to i8
  %4655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4654, i8* %4655, align 1, !tbaa !2432
  %4656 = trunc i64 %4650 to i32
  %4657 = and i32 %4656, 255
  %4658 = call i32 @llvm.ctpop.i32(i32 %4657) #16
  %4659 = trunc i32 %4658 to i8
  %4660 = and i8 %4659, 1
  %4661 = xor i8 %4660, 1
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4661, i8* %4662, align 1, !tbaa !2446
  %4663 = xor i64 %4647, %4646
  %4664 = xor i64 %4663, %4650
  %4665 = lshr i64 %4664, 4
  %4666 = trunc i64 %4665 to i8
  %4667 = and i8 %4666, 1
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4667, i8* %4668, align 1, !tbaa !2447
  %4669 = icmp eq i64 %4650, 0
  %4670 = zext i1 %4669 to i8
  %4671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4670, i8* %4671, align 1, !tbaa !2448
  %4672 = lshr i64 %4650, 63
  %4673 = trunc i64 %4672 to i8
  %4674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4673, i8* %4674, align 1, !tbaa !2449
  %4675 = lshr i64 %4646, 63
  %4676 = lshr i64 %4647, 63
  %4677 = xor i64 %4672, %4675
  %4678 = xor i64 %4672, %4676
  %4679 = add nuw nsw i64 %4677, %4678
  %4680 = icmp eq i64 %4679, 2
  %4681 = zext i1 %4680 to i8
  %4682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4681, i8* %4682, align 1, !tbaa !2450
  %4683 = load i64, i64* %RBP
  %4684 = sub i64 %4683, 52
  %4685 = load i64, i64* %PC
  %4686 = add i64 %4685, 4
  store i64 %4686, i64* %PC
  %4687 = inttoptr i64 %4684 to i32*
  %4688 = load i32, i32* %4687
  %4689 = sext i32 %4688 to i64
  store i64 %4689, i64* %RCX, align 8, !tbaa !2428
  %4690 = load i64, i64* %RCX
  %4691 = load i64, i64* %PC
  %4692 = add i64 %4691, 7
  store i64 %4692, i64* %PC
  %4693 = sext i64 %4690 to i128
  %4694 = and i128 %4693, -18446744073709551616
  %4695 = zext i64 %4690 to i128
  %4696 = or i128 %4694, %4695
  %4697 = mul nsw i128 520, %4696
  %4698 = trunc i128 %4697 to i64
  store i64 %4698, i64* %RCX, align 8, !tbaa !2428
  %4699 = sext i64 %4698 to i128
  %4700 = icmp ne i128 %4699, %4697
  %4701 = zext i1 %4700 to i8
  %4702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4701, i8* %4702, align 1, !tbaa !2432
  %4703 = trunc i128 %4697 to i32
  %4704 = and i32 %4703, 255
  %4705 = call i32 @llvm.ctpop.i32(i32 %4704) #16
  %4706 = trunc i32 %4705 to i8
  %4707 = and i8 %4706, 1
  %4708 = xor i8 %4707, 1
  %4709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4708, i8* %4709, align 1, !tbaa !2446
  %4710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4710, align 1, !tbaa !2447
  %4711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4711, align 1, !tbaa !2448
  %4712 = lshr i64 %4698, 63
  %4713 = trunc i64 %4712 to i8
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4713, i8* %4714, align 1, !tbaa !2449
  %4715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4701, i8* %4715, align 1, !tbaa !2450
  %4716 = load i64, i64* %RAX
  %4717 = load i64, i64* %RCX
  %4718 = load i64, i64* %PC
  %4719 = add i64 %4718, 3
  store i64 %4719, i64* %PC
  %4720 = add i64 %4717, %4716
  store i64 %4720, i64* %RAX, align 8, !tbaa !2428
  %4721 = icmp ult i64 %4720, %4716
  %4722 = icmp ult i64 %4720, %4717
  %4723 = or i1 %4721, %4722
  %4724 = zext i1 %4723 to i8
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4724, i8* %4725, align 1, !tbaa !2432
  %4726 = trunc i64 %4720 to i32
  %4727 = and i32 %4726, 255
  %4728 = call i32 @llvm.ctpop.i32(i32 %4727) #16
  %4729 = trunc i32 %4728 to i8
  %4730 = and i8 %4729, 1
  %4731 = xor i8 %4730, 1
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4731, i8* %4732, align 1, !tbaa !2446
  %4733 = xor i64 %4717, %4716
  %4734 = xor i64 %4733, %4720
  %4735 = lshr i64 %4734, 4
  %4736 = trunc i64 %4735 to i8
  %4737 = and i8 %4736, 1
  %4738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4737, i8* %4738, align 1, !tbaa !2447
  %4739 = icmp eq i64 %4720, 0
  %4740 = zext i1 %4739 to i8
  %4741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4740, i8* %4741, align 1, !tbaa !2448
  %4742 = lshr i64 %4720, 63
  %4743 = trunc i64 %4742 to i8
  %4744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4743, i8* %4744, align 1, !tbaa !2449
  %4745 = lshr i64 %4716, 63
  %4746 = lshr i64 %4717, 63
  %4747 = xor i64 %4742, %4745
  %4748 = xor i64 %4742, %4746
  %4749 = add nuw nsw i64 %4747, %4748
  %4750 = icmp eq i64 %4749, 2
  %4751 = zext i1 %4750 to i8
  %4752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4751, i8* %4752, align 1, !tbaa !2450
  %4753 = load i64, i64* %RBP
  %4754 = sub i64 %4753, 48
  %4755 = load i64, i64* %PC
  %4756 = add i64 %4755, 4
  store i64 %4756, i64* %PC
  %4757 = inttoptr i64 %4754 to i32*
  %4758 = load i32, i32* %4757
  %4759 = sext i32 %4758 to i64
  store i64 %4759, i64* %RCX, align 8, !tbaa !2428
  %4760 = load i64, i64* %RAX
  %4761 = load i64, i64* %RCX
  %4762 = mul i64 %4761, 8
  %4763 = add i64 %4762, %4760
  %4764 = bitcast %union.vec128_t* %XMM0 to i8*
  %4765 = load i64, i64* %PC
  %4766 = add i64 %4765, 5
  store i64 %4766, i64* %PC
  %4767 = bitcast i8* %4764 to double*
  %4768 = load double, double* %4767, align 1
  %4769 = inttoptr i64 %4763 to double*
  store double %4768, double* %4769
  %4770 = load i64, i64* %RBP
  %4771 = add i64 %4770, 16
  %4772 = load i64, i64* %PC
  %4773 = add i64 %4772, 4
  store i64 %4773, i64* %PC
  %4774 = inttoptr i64 %4771 to i64*
  %4775 = load i64, i64* %4774
  store i64 %4775, i64* %RAX, align 8, !tbaa !2428
  %4776 = load i64, i64* %RBP
  %4777 = sub i64 %4776, 100
  %4778 = load i64, i64* %PC
  %4779 = add i64 %4778, 4
  store i64 %4779, i64* %PC
  %4780 = inttoptr i64 %4777 to i32*
  %4781 = load i32, i32* %4780
  %4782 = sext i32 %4781 to i64
  store i64 %4782, i64* %RCX, align 8, !tbaa !2428
  %4783 = load i64, i64* %RCX
  %4784 = load i64, i64* %PC
  %4785 = add i64 %4784, 7
  store i64 %4785, i64* %PC
  %4786 = sext i64 %4783 to i128
  %4787 = and i128 %4786, -18446744073709551616
  %4788 = zext i64 %4783 to i128
  %4789 = or i128 %4787, %4788
  %4790 = mul nsw i128 520, %4789
  %4791 = trunc i128 %4790 to i64
  store i64 %4791, i64* %RCX, align 8, !tbaa !2428
  %4792 = sext i64 %4791 to i128
  %4793 = icmp ne i128 %4792, %4790
  %4794 = zext i1 %4793 to i8
  %4795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4794, i8* %4795, align 1, !tbaa !2432
  %4796 = trunc i128 %4790 to i32
  %4797 = and i32 %4796, 255
  %4798 = call i32 @llvm.ctpop.i32(i32 %4797) #16
  %4799 = trunc i32 %4798 to i8
  %4800 = and i8 %4799, 1
  %4801 = xor i8 %4800, 1
  %4802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4801, i8* %4802, align 1, !tbaa !2446
  %4803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4803, align 1, !tbaa !2447
  %4804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4804, align 1, !tbaa !2448
  %4805 = lshr i64 %4791, 63
  %4806 = trunc i64 %4805 to i8
  %4807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4806, i8* %4807, align 1, !tbaa !2449
  %4808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4794, i8* %4808, align 1, !tbaa !2450
  %4809 = load i64, i64* %RAX
  %4810 = load i64, i64* %RCX
  %4811 = load i64, i64* %PC
  %4812 = add i64 %4811, 3
  store i64 %4812, i64* %PC
  %4813 = add i64 %4810, %4809
  store i64 %4813, i64* %RAX, align 8, !tbaa !2428
  %4814 = icmp ult i64 %4813, %4809
  %4815 = icmp ult i64 %4813, %4810
  %4816 = or i1 %4814, %4815
  %4817 = zext i1 %4816 to i8
  %4818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4817, i8* %4818, align 1, !tbaa !2432
  %4819 = trunc i64 %4813 to i32
  %4820 = and i32 %4819, 255
  %4821 = call i32 @llvm.ctpop.i32(i32 %4820) #16
  %4822 = trunc i32 %4821 to i8
  %4823 = and i8 %4822, 1
  %4824 = xor i8 %4823, 1
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4824, i8* %4825, align 1, !tbaa !2446
  %4826 = xor i64 %4810, %4809
  %4827 = xor i64 %4826, %4813
  %4828 = lshr i64 %4827, 4
  %4829 = trunc i64 %4828 to i8
  %4830 = and i8 %4829, 1
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4830, i8* %4831, align 1, !tbaa !2447
  %4832 = icmp eq i64 %4813, 0
  %4833 = zext i1 %4832 to i8
  %4834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4833, i8* %4834, align 1, !tbaa !2448
  %4835 = lshr i64 %4813, 63
  %4836 = trunc i64 %4835 to i8
  %4837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4836, i8* %4837, align 1, !tbaa !2449
  %4838 = lshr i64 %4809, 63
  %4839 = lshr i64 %4810, 63
  %4840 = xor i64 %4835, %4838
  %4841 = xor i64 %4835, %4839
  %4842 = add nuw nsw i64 %4840, %4841
  %4843 = icmp eq i64 %4842, 2
  %4844 = zext i1 %4843 to i8
  %4845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4844, i8* %4845, align 1, !tbaa !2450
  %4846 = load i64, i64* %RBP
  %4847 = sub i64 %4846, 104
  %4848 = load i64, i64* %PC
  %4849 = add i64 %4848, 4
  store i64 %4849, i64* %PC
  %4850 = inttoptr i64 %4847 to i32*
  %4851 = load i32, i32* %4850
  %4852 = sext i32 %4851 to i64
  store i64 %4852, i64* %RCX, align 8, !tbaa !2428
  %4853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4854 = load i64, i64* %RAX
  %4855 = load i64, i64* %RCX
  %4856 = mul i64 %4855, 8
  %4857 = add i64 %4856, %4854
  %4858 = load i64, i64* %PC
  %4859 = add i64 %4858, 5
  store i64 %4859, i64* %PC
  %4860 = inttoptr i64 %4857 to double*
  %4861 = load double, double* %4860
  %4862 = bitcast i8* %4853 to double*
  store double %4861, double* %4862, align 1, !tbaa !2452
  %4863 = getelementptr inbounds i8, i8* %4853, i64 8
  %4864 = bitcast i8* %4863 to double*
  store double 0.000000e+00, double* %4864, align 1, !tbaa !2452
  %4865 = load i64, i64* %RBP
  %4866 = add i64 %4865, 24
  %4867 = load i64, i64* %PC
  %4868 = add i64 %4867, 4
  store i64 %4868, i64* %PC
  %4869 = inttoptr i64 %4866 to i64*
  %4870 = load i64, i64* %4869
  store i64 %4870, i64* %RAX, align 8, !tbaa !2428
  %4871 = load i64, i64* %RBP
  %4872 = sub i64 %4871, 100
  %4873 = load i64, i64* %PC
  %4874 = add i64 %4873, 4
  store i64 %4874, i64* %PC
  %4875 = inttoptr i64 %4872 to i32*
  %4876 = load i32, i32* %4875
  %4877 = sext i32 %4876 to i64
  store i64 %4877, i64* %RCX, align 8, !tbaa !2428
  %4878 = load i64, i64* %RCX
  %4879 = load i64, i64* %PC
  %4880 = add i64 %4879, 7
  store i64 %4880, i64* %PC
  %4881 = sext i64 %4878 to i128
  %4882 = and i128 %4881, -18446744073709551616
  %4883 = zext i64 %4878 to i128
  %4884 = or i128 %4882, %4883
  %4885 = mul nsw i128 33800, %4884
  %4886 = trunc i128 %4885 to i64
  store i64 %4886, i64* %RCX, align 8, !tbaa !2428
  %4887 = sext i64 %4886 to i128
  %4888 = icmp ne i128 %4887, %4885
  %4889 = zext i1 %4888 to i8
  %4890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4889, i8* %4890, align 1, !tbaa !2432
  %4891 = trunc i128 %4885 to i32
  %4892 = and i32 %4891, 255
  %4893 = call i32 @llvm.ctpop.i32(i32 %4892) #16
  %4894 = trunc i32 %4893 to i8
  %4895 = and i8 %4894, 1
  %4896 = xor i8 %4895, 1
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4896, i8* %4897, align 1, !tbaa !2446
  %4898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4898, align 1, !tbaa !2447
  %4899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4899, align 1, !tbaa !2448
  %4900 = lshr i64 %4886, 63
  %4901 = trunc i64 %4900 to i8
  %4902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4901, i8* %4902, align 1, !tbaa !2449
  %4903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4889, i8* %4903, align 1, !tbaa !2450
  %4904 = load i64, i64* %RAX
  %4905 = load i64, i64* %RCX
  %4906 = load i64, i64* %PC
  %4907 = add i64 %4906, 3
  store i64 %4907, i64* %PC
  %4908 = add i64 %4905, %4904
  store i64 %4908, i64* %RAX, align 8, !tbaa !2428
  %4909 = icmp ult i64 %4908, %4904
  %4910 = icmp ult i64 %4908, %4905
  %4911 = or i1 %4909, %4910
  %4912 = zext i1 %4911 to i8
  %4913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4912, i8* %4913, align 1, !tbaa !2432
  %4914 = trunc i64 %4908 to i32
  %4915 = and i32 %4914, 255
  %4916 = call i32 @llvm.ctpop.i32(i32 %4915) #16
  %4917 = trunc i32 %4916 to i8
  %4918 = and i8 %4917, 1
  %4919 = xor i8 %4918, 1
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4919, i8* %4920, align 1, !tbaa !2446
  %4921 = xor i64 %4905, %4904
  %4922 = xor i64 %4921, %4908
  %4923 = lshr i64 %4922, 4
  %4924 = trunc i64 %4923 to i8
  %4925 = and i8 %4924, 1
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4925, i8* %4926, align 1, !tbaa !2447
  %4927 = icmp eq i64 %4908, 0
  %4928 = zext i1 %4927 to i8
  %4929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4928, i8* %4929, align 1, !tbaa !2448
  %4930 = lshr i64 %4908, 63
  %4931 = trunc i64 %4930 to i8
  %4932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4931, i8* %4932, align 1, !tbaa !2449
  %4933 = lshr i64 %4904, 63
  %4934 = lshr i64 %4905, 63
  %4935 = xor i64 %4930, %4933
  %4936 = xor i64 %4930, %4934
  %4937 = add nuw nsw i64 %4935, %4936
  %4938 = icmp eq i64 %4937, 2
  %4939 = zext i1 %4938 to i8
  %4940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4939, i8* %4940, align 1, !tbaa !2450
  %4941 = load i64, i64* %RBP
  %4942 = sub i64 %4941, 52
  %4943 = load i64, i64* %PC
  %4944 = add i64 %4943, 4
  store i64 %4944, i64* %PC
  %4945 = inttoptr i64 %4942 to i32*
  %4946 = load i32, i32* %4945
  %4947 = sext i32 %4946 to i64
  store i64 %4947, i64* %RCX, align 8, !tbaa !2428
  %4948 = load i64, i64* %RCX
  %4949 = load i64, i64* %PC
  %4950 = add i64 %4949, 7
  store i64 %4950, i64* %PC
  %4951 = sext i64 %4948 to i128
  %4952 = and i128 %4951, -18446744073709551616
  %4953 = zext i64 %4948 to i128
  %4954 = or i128 %4952, %4953
  %4955 = mul nsw i128 520, %4954
  %4956 = trunc i128 %4955 to i64
  store i64 %4956, i64* %RCX, align 8, !tbaa !2428
  %4957 = sext i64 %4956 to i128
  %4958 = icmp ne i128 %4957, %4955
  %4959 = zext i1 %4958 to i8
  %4960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4959, i8* %4960, align 1, !tbaa !2432
  %4961 = trunc i128 %4955 to i32
  %4962 = and i32 %4961, 255
  %4963 = call i32 @llvm.ctpop.i32(i32 %4962) #16
  %4964 = trunc i32 %4963 to i8
  %4965 = and i8 %4964, 1
  %4966 = xor i8 %4965, 1
  %4967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4966, i8* %4967, align 1, !tbaa !2446
  %4968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4968, align 1, !tbaa !2447
  %4969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4969, align 1, !tbaa !2448
  %4970 = lshr i64 %4956, 63
  %4971 = trunc i64 %4970 to i8
  %4972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4971, i8* %4972, align 1, !tbaa !2449
  %4973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4959, i8* %4973, align 1, !tbaa !2450
  %4974 = load i64, i64* %RAX
  %4975 = load i64, i64* %RCX
  %4976 = load i64, i64* %PC
  %4977 = add i64 %4976, 3
  store i64 %4977, i64* %PC
  %4978 = add i64 %4975, %4974
  store i64 %4978, i64* %RAX, align 8, !tbaa !2428
  %4979 = icmp ult i64 %4978, %4974
  %4980 = icmp ult i64 %4978, %4975
  %4981 = or i1 %4979, %4980
  %4982 = zext i1 %4981 to i8
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4982, i8* %4983, align 1, !tbaa !2432
  %4984 = trunc i64 %4978 to i32
  %4985 = and i32 %4984, 255
  %4986 = call i32 @llvm.ctpop.i32(i32 %4985) #16
  %4987 = trunc i32 %4986 to i8
  %4988 = and i8 %4987, 1
  %4989 = xor i8 %4988, 1
  %4990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4989, i8* %4990, align 1, !tbaa !2446
  %4991 = xor i64 %4975, %4974
  %4992 = xor i64 %4991, %4978
  %4993 = lshr i64 %4992, 4
  %4994 = trunc i64 %4993 to i8
  %4995 = and i8 %4994, 1
  %4996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4995, i8* %4996, align 1, !tbaa !2447
  %4997 = icmp eq i64 %4978, 0
  %4998 = zext i1 %4997 to i8
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4998, i8* %4999, align 1, !tbaa !2448
  %5000 = lshr i64 %4978, 63
  %5001 = trunc i64 %5000 to i8
  %5002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5001, i8* %5002, align 1, !tbaa !2449
  %5003 = lshr i64 %4974, 63
  %5004 = lshr i64 %4975, 63
  %5005 = xor i64 %5000, %5003
  %5006 = xor i64 %5000, %5004
  %5007 = add nuw nsw i64 %5005, %5006
  %5008 = icmp eq i64 %5007, 2
  %5009 = zext i1 %5008 to i8
  %5010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5009, i8* %5010, align 1, !tbaa !2450
  %5011 = load i64, i64* %RBP
  %5012 = sub i64 %5011, 48
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 4
  store i64 %5014, i64* %PC
  %5015 = inttoptr i64 %5012 to i32*
  %5016 = load i32, i32* %5015
  %5017 = sext i32 %5016 to i64
  store i64 %5017, i64* %RCX, align 8, !tbaa !2428
  %5018 = load i64, i64* %RAX
  %5019 = load i64, i64* %RCX
  %5020 = mul i64 %5019, 8
  %5021 = add i64 %5020, %5018
  %5022 = bitcast %union.vec128_t* %XMM0 to i8*
  %5023 = load i64, i64* %PC
  %5024 = add i64 %5023, 5
  store i64 %5024, i64* %PC
  %5025 = bitcast i8* %5022 to double*
  %5026 = load double, double* %5025, align 1
  %5027 = inttoptr i64 %5021 to double*
  store double %5026, double* %5027
  %5028 = load i64, i64* %RBP
  %5029 = sub i64 %5028, 104
  %5030 = load i64, i64* %PC
  %5031 = add i64 %5030, 3
  store i64 %5031, i64* %PC
  %5032 = inttoptr i64 %5029 to i32*
  %5033 = load i32, i32* %5032
  %5034 = zext i32 %5033 to i64
  store i64 %5034, i64* %RAX, align 8, !tbaa !2428
  %5035 = load i64, i64* %RAX
  %5036 = load i64, i64* %PC
  %5037 = add i64 %5036, 3
  store i64 %5037, i64* %PC
  %5038 = trunc i64 %5035 to i32
  %5039 = add i32 1, %5038
  %5040 = zext i32 %5039 to i64
  store i64 %5040, i64* %RAX, align 8, !tbaa !2428
  %5041 = icmp ult i32 %5039, %5038
  %5042 = icmp ult i32 %5039, 1
  %5043 = or i1 %5041, %5042
  %5044 = zext i1 %5043 to i8
  %5045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5044, i8* %5045, align 1, !tbaa !2432
  %5046 = and i32 %5039, 255
  %5047 = call i32 @llvm.ctpop.i32(i32 %5046) #16
  %5048 = trunc i32 %5047 to i8
  %5049 = and i8 %5048, 1
  %5050 = xor i8 %5049, 1
  %5051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5050, i8* %5051, align 1, !tbaa !2446
  %5052 = xor i64 1, %5035
  %5053 = trunc i64 %5052 to i32
  %5054 = xor i32 %5053, %5039
  %5055 = lshr i32 %5054, 4
  %5056 = trunc i32 %5055 to i8
  %5057 = and i8 %5056, 1
  %5058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5057, i8* %5058, align 1, !tbaa !2447
  %5059 = icmp eq i32 %5039, 0
  %5060 = zext i1 %5059 to i8
  %5061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5060, i8* %5061, align 1, !tbaa !2448
  %5062 = lshr i32 %5039, 31
  %5063 = trunc i32 %5062 to i8
  %5064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5063, i8* %5064, align 1, !tbaa !2449
  %5065 = lshr i32 %5038, 31
  %5066 = xor i32 %5062, %5065
  %5067 = add nuw nsw i32 %5066, %5062
  %5068 = icmp eq i32 %5067, 2
  %5069 = zext i1 %5068 to i8
  %5070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5069, i8* %5070, align 1, !tbaa !2450
  %5071 = load i64, i64* %RBP
  %5072 = sub i64 %5071, 104
  %5073 = load i32, i32* %EAX
  %5074 = zext i32 %5073 to i64
  %5075 = load i64, i64* %PC
  %5076 = add i64 %5075, 3
  store i64 %5076, i64* %PC
  %5077 = inttoptr i64 %5072 to i32*
  store i32 %5073, i32* %5077
  %5078 = load i64, i64* %PC
  %5079 = sub i64 %5078, 2643
  %5080 = load i64, i64* %PC
  %5081 = add i64 %5080, 5
  store i64 %5081, i64* %PC
  %5082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5079, i64* %5082, align 8, !tbaa !2428
  br label %block_401fcd

block_40251e:                                     ; preds = %block_402512
  %5083 = sub i64 %764, 108
  %5084 = load i64, i64* %PC
  %5085 = add i64 %5084, 4
  store i64 %5085, i64* %PC
  %5086 = inttoptr i64 %5083 to i32*
  %5087 = load i32, i32* %5086
  %5088 = sext i32 %5087 to i64
  store i64 %5088, i64* %RCX, align 8, !tbaa !2428
  %5089 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5090 = load i64, i64* %RAX
  %5091 = load i64, i64* %RCX
  %5092 = mul i64 %5091, 8
  %5093 = add i64 %5092, %5090
  %5094 = load i64, i64* %PC
  %5095 = add i64 %5094, 5
  store i64 %5095, i64* %PC
  %5096 = inttoptr i64 %5093 to double*
  %5097 = load double, double* %5096
  %5098 = bitcast i8* %5089 to double*
  store double %5097, double* %5098, align 1, !tbaa !2452
  %5099 = getelementptr inbounds i8, i8* %5089, i64 8
  %5100 = bitcast i8* %5099 to double*
  store double 0.000000e+00, double* %5100, align 1, !tbaa !2452
  %5101 = load i64, i64* %RBP
  %5102 = sub i64 %5101, 80
  %5103 = load i64, i64* %PC
  %5104 = add i64 %5103, 4
  store i64 %5104, i64* %PC
  %5105 = inttoptr i64 %5102 to i64*
  %5106 = load i64, i64* %5105
  store i64 %5106, i64* %RAX, align 8, !tbaa !2428
  %5107 = load i64, i64* %RBP
  %5108 = sub i64 %5107, 100
  %5109 = load i64, i64* %PC
  %5110 = add i64 %5109, 4
  store i64 %5110, i64* %PC
  %5111 = inttoptr i64 %5108 to i32*
  %5112 = load i32, i32* %5111
  %5113 = sext i32 %5112 to i64
  store i64 %5113, i64* %RCX, align 8, !tbaa !2428
  %5114 = load i64, i64* %RCX
  %5115 = load i64, i64* %PC
  %5116 = add i64 %5115, 7
  store i64 %5116, i64* %PC
  %5117 = sext i64 %5114 to i128
  %5118 = and i128 %5117, -18446744073709551616
  %5119 = zext i64 %5114 to i128
  %5120 = or i128 %5118, %5119
  %5121 = mul nsw i128 520, %5120
  %5122 = trunc i128 %5121 to i64
  store i64 %5122, i64* %RCX, align 8, !tbaa !2428
  %5123 = sext i64 %5122 to i128
  %5124 = icmp ne i128 %5123, %5121
  %5125 = zext i1 %5124 to i8
  %5126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5125, i8* %5126, align 1, !tbaa !2432
  %5127 = trunc i128 %5121 to i32
  %5128 = and i32 %5127, 255
  %5129 = call i32 @llvm.ctpop.i32(i32 %5128) #16
  %5130 = trunc i32 %5129 to i8
  %5131 = and i8 %5130, 1
  %5132 = xor i8 %5131, 1
  %5133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5132, i8* %5133, align 1, !tbaa !2446
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5134, align 1, !tbaa !2447
  %5135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5135, align 1, !tbaa !2448
  %5136 = lshr i64 %5122, 63
  %5137 = trunc i64 %5136 to i8
  %5138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5137, i8* %5138, align 1, !tbaa !2449
  %5139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5125, i8* %5139, align 1, !tbaa !2450
  %5140 = load i64, i64* %RAX
  %5141 = load i64, i64* %RCX
  %5142 = load i64, i64* %PC
  %5143 = add i64 %5142, 3
  store i64 %5143, i64* %PC
  %5144 = add i64 %5141, %5140
  store i64 %5144, i64* %RAX, align 8, !tbaa !2428
  %5145 = icmp ult i64 %5144, %5140
  %5146 = icmp ult i64 %5144, %5141
  %5147 = or i1 %5145, %5146
  %5148 = zext i1 %5147 to i8
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5148, i8* %5149, align 1, !tbaa !2432
  %5150 = trunc i64 %5144 to i32
  %5151 = and i32 %5150, 255
  %5152 = call i32 @llvm.ctpop.i32(i32 %5151) #16
  %5153 = trunc i32 %5152 to i8
  %5154 = and i8 %5153, 1
  %5155 = xor i8 %5154, 1
  %5156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5155, i8* %5156, align 1, !tbaa !2446
  %5157 = xor i64 %5141, %5140
  %5158 = xor i64 %5157, %5144
  %5159 = lshr i64 %5158, 4
  %5160 = trunc i64 %5159 to i8
  %5161 = and i8 %5160, 1
  %5162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5161, i8* %5162, align 1, !tbaa !2447
  %5163 = icmp eq i64 %5144, 0
  %5164 = zext i1 %5163 to i8
  %5165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5164, i8* %5165, align 1, !tbaa !2448
  %5166 = lshr i64 %5144, 63
  %5167 = trunc i64 %5166 to i8
  %5168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5167, i8* %5168, align 1, !tbaa !2449
  %5169 = lshr i64 %5140, 63
  %5170 = lshr i64 %5141, 63
  %5171 = xor i64 %5166, %5169
  %5172 = xor i64 %5166, %5170
  %5173 = add nuw nsw i64 %5171, %5172
  %5174 = icmp eq i64 %5173, 2
  %5175 = zext i1 %5174 to i8
  %5176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5175, i8* %5176, align 1, !tbaa !2450
  %5177 = load i64, i64* %RBP
  %5178 = sub i64 %5177, 108
  %5179 = load i64, i64* %PC
  %5180 = add i64 %5179, 4
  store i64 %5180, i64* %PC
  %5181 = inttoptr i64 %5178 to i32*
  %5182 = load i32, i32* %5181
  %5183 = sext i32 %5182 to i64
  store i64 %5183, i64* %RCX, align 8, !tbaa !2428
  %5184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5186 = load i64, i64* %RAX
  %5187 = load i64, i64* %RCX
  %5188 = mul i64 %5187, 8
  %5189 = add i64 %5188, %5186
  %5190 = load i64, i64* %PC
  %5191 = add i64 %5190, 5
  store i64 %5191, i64* %PC
  %5192 = bitcast i8* %5185 to double*
  %5193 = load double, double* %5192, align 1
  %5194 = getelementptr inbounds i8, i8* %5185, i64 8
  %5195 = bitcast i8* %5194 to i64*
  %5196 = load i64, i64* %5195, align 1
  %5197 = inttoptr i64 %5189 to double*
  %5198 = load double, double* %5197
  %5199 = fsub double %5193, %5198
  %5200 = bitcast i8* %5184 to double*
  store double %5199, double* %5200, align 1, !tbaa !2452
  %5201 = getelementptr inbounds i8, i8* %5184, i64 8
  %5202 = bitcast i8* %5201 to i64*
  store i64 %5196, i64* %5202, align 1, !tbaa !2452
  %5203 = load i64, i64* %RBP
  %5204 = add i64 %5203, 40
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 4
  store i64 %5206, i64* %PC
  %5207 = inttoptr i64 %5204 to i64*
  %5208 = load i64, i64* %5207
  store i64 %5208, i64* %RAX, align 8, !tbaa !2428
  %5209 = load i64, i64* %RBP
  %5210 = sub i64 %5209, 100
  %5211 = load i64, i64* %PC
  %5212 = add i64 %5211, 4
  store i64 %5212, i64* %PC
  %5213 = inttoptr i64 %5210 to i32*
  %5214 = load i32, i32* %5213
  %5215 = sext i32 %5214 to i64
  store i64 %5215, i64* %RCX, align 8, !tbaa !2428
  %5216 = load i64, i64* %RCX
  %5217 = load i64, i64* %PC
  %5218 = add i64 %5217, 7
  store i64 %5218, i64* %PC
  %5219 = sext i64 %5216 to i128
  %5220 = and i128 %5219, -18446744073709551616
  %5221 = zext i64 %5216 to i128
  %5222 = or i128 %5220, %5221
  %5223 = mul nsw i128 33800, %5222
  %5224 = trunc i128 %5223 to i64
  store i64 %5224, i64* %RCX, align 8, !tbaa !2428
  %5225 = sext i64 %5224 to i128
  %5226 = icmp ne i128 %5225, %5223
  %5227 = zext i1 %5226 to i8
  %5228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5227, i8* %5228, align 1, !tbaa !2432
  %5229 = trunc i128 %5223 to i32
  %5230 = and i32 %5229, 255
  %5231 = call i32 @llvm.ctpop.i32(i32 %5230) #16
  %5232 = trunc i32 %5231 to i8
  %5233 = and i8 %5232, 1
  %5234 = xor i8 %5233, 1
  %5235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5234, i8* %5235, align 1, !tbaa !2446
  %5236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5236, align 1, !tbaa !2447
  %5237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5237, align 1, !tbaa !2448
  %5238 = lshr i64 %5224, 63
  %5239 = trunc i64 %5238 to i8
  %5240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5239, i8* %5240, align 1, !tbaa !2449
  %5241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5227, i8* %5241, align 1, !tbaa !2450
  %5242 = load i64, i64* %RAX
  %5243 = load i64, i64* %RCX
  %5244 = load i64, i64* %PC
  %5245 = add i64 %5244, 3
  store i64 %5245, i64* %PC
  %5246 = add i64 %5243, %5242
  store i64 %5246, i64* %RAX, align 8, !tbaa !2428
  %5247 = icmp ult i64 %5246, %5242
  %5248 = icmp ult i64 %5246, %5243
  %5249 = or i1 %5247, %5248
  %5250 = zext i1 %5249 to i8
  %5251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5250, i8* %5251, align 1, !tbaa !2432
  %5252 = trunc i64 %5246 to i32
  %5253 = and i32 %5252, 255
  %5254 = call i32 @llvm.ctpop.i32(i32 %5253) #16
  %5255 = trunc i32 %5254 to i8
  %5256 = and i8 %5255, 1
  %5257 = xor i8 %5256, 1
  %5258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5257, i8* %5258, align 1, !tbaa !2446
  %5259 = xor i64 %5243, %5242
  %5260 = xor i64 %5259, %5246
  %5261 = lshr i64 %5260, 4
  %5262 = trunc i64 %5261 to i8
  %5263 = and i8 %5262, 1
  %5264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5263, i8* %5264, align 1, !tbaa !2447
  %5265 = icmp eq i64 %5246, 0
  %5266 = zext i1 %5265 to i8
  %5267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5266, i8* %5267, align 1, !tbaa !2448
  %5268 = lshr i64 %5246, 63
  %5269 = trunc i64 %5268 to i8
  %5270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5269, i8* %5270, align 1, !tbaa !2449
  %5271 = lshr i64 %5242, 63
  %5272 = lshr i64 %5243, 63
  %5273 = xor i64 %5268, %5271
  %5274 = xor i64 %5268, %5272
  %5275 = add nuw nsw i64 %5273, %5274
  %5276 = icmp eq i64 %5275, 2
  %5277 = zext i1 %5276 to i8
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5277, i8* %5278, align 1, !tbaa !2450
  %5279 = load i64, i64* %RBP
  %5280 = sub i64 %5279, 52
  %5281 = load i64, i64* %PC
  %5282 = add i64 %5281, 4
  store i64 %5282, i64* %PC
  %5283 = inttoptr i64 %5280 to i32*
  %5284 = load i32, i32* %5283
  %5285 = sext i32 %5284 to i64
  store i64 %5285, i64* %RCX, align 8, !tbaa !2428
  %5286 = load i64, i64* %RCX
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 7
  store i64 %5288, i64* %PC
  %5289 = sext i64 %5286 to i128
  %5290 = and i128 %5289, -18446744073709551616
  %5291 = zext i64 %5286 to i128
  %5292 = or i128 %5290, %5291
  %5293 = mul nsw i128 520, %5292
  %5294 = trunc i128 %5293 to i64
  store i64 %5294, i64* %RCX, align 8, !tbaa !2428
  %5295 = sext i64 %5294 to i128
  %5296 = icmp ne i128 %5295, %5293
  %5297 = zext i1 %5296 to i8
  %5298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5297, i8* %5298, align 1, !tbaa !2432
  %5299 = trunc i128 %5293 to i32
  %5300 = and i32 %5299, 255
  %5301 = call i32 @llvm.ctpop.i32(i32 %5300) #16
  %5302 = trunc i32 %5301 to i8
  %5303 = and i8 %5302, 1
  %5304 = xor i8 %5303, 1
  %5305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5304, i8* %5305, align 1, !tbaa !2446
  %5306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5306, align 1, !tbaa !2447
  %5307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5307, align 1, !tbaa !2448
  %5308 = lshr i64 %5294, 63
  %5309 = trunc i64 %5308 to i8
  %5310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5309, i8* %5310, align 1, !tbaa !2449
  %5311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5297, i8* %5311, align 1, !tbaa !2450
  %5312 = load i64, i64* %RAX
  %5313 = load i64, i64* %RCX
  %5314 = load i64, i64* %PC
  %5315 = add i64 %5314, 3
  store i64 %5315, i64* %PC
  %5316 = add i64 %5313, %5312
  store i64 %5316, i64* %RAX, align 8, !tbaa !2428
  %5317 = icmp ult i64 %5316, %5312
  %5318 = icmp ult i64 %5316, %5313
  %5319 = or i1 %5317, %5318
  %5320 = zext i1 %5319 to i8
  %5321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5320, i8* %5321, align 1, !tbaa !2432
  %5322 = trunc i64 %5316 to i32
  %5323 = and i32 %5322, 255
  %5324 = call i32 @llvm.ctpop.i32(i32 %5323) #16
  %5325 = trunc i32 %5324 to i8
  %5326 = and i8 %5325, 1
  %5327 = xor i8 %5326, 1
  %5328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5327, i8* %5328, align 1, !tbaa !2446
  %5329 = xor i64 %5313, %5312
  %5330 = xor i64 %5329, %5316
  %5331 = lshr i64 %5330, 4
  %5332 = trunc i64 %5331 to i8
  %5333 = and i8 %5332, 1
  %5334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5333, i8* %5334, align 1, !tbaa !2447
  %5335 = icmp eq i64 %5316, 0
  %5336 = zext i1 %5335 to i8
  %5337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5336, i8* %5337, align 1, !tbaa !2448
  %5338 = lshr i64 %5316, 63
  %5339 = trunc i64 %5338 to i8
  %5340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5339, i8* %5340, align 1, !tbaa !2449
  %5341 = lshr i64 %5312, 63
  %5342 = lshr i64 %5313, 63
  %5343 = xor i64 %5338, %5341
  %5344 = xor i64 %5338, %5342
  %5345 = add nuw nsw i64 %5343, %5344
  %5346 = icmp eq i64 %5345, 2
  %5347 = zext i1 %5346 to i8
  %5348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5347, i8* %5348, align 1, !tbaa !2450
  %5349 = load i64, i64* %RBP
  %5350 = sub i64 %5349, 108
  %5351 = load i64, i64* %PC
  %5352 = add i64 %5351, 3
  store i64 %5352, i64* %PC
  %5353 = inttoptr i64 %5350 to i32*
  %5354 = load i32, i32* %5353
  %5355 = zext i32 %5354 to i64
  store i64 %5355, i64* %RDX, align 8, !tbaa !2428
  %5356 = load i64, i64* %RDX
  %5357 = load i64, i64* %PC
  %5358 = add i64 %5357, 3
  store i64 %5358, i64* %PC
  %5359 = trunc i64 %5356 to i32
  %5360 = add i32 1, %5359
  %5361 = zext i32 %5360 to i64
  store i64 %5361, i64* %RDX, align 8, !tbaa !2428
  %5362 = icmp ult i32 %5360, %5359
  %5363 = icmp ult i32 %5360, 1
  %5364 = or i1 %5362, %5363
  %5365 = zext i1 %5364 to i8
  %5366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5365, i8* %5366, align 1, !tbaa !2432
  %5367 = and i32 %5360, 255
  %5368 = call i32 @llvm.ctpop.i32(i32 %5367) #16
  %5369 = trunc i32 %5368 to i8
  %5370 = and i8 %5369, 1
  %5371 = xor i8 %5370, 1
  %5372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5371, i8* %5372, align 1, !tbaa !2446
  %5373 = xor i64 1, %5356
  %5374 = trunc i64 %5373 to i32
  %5375 = xor i32 %5374, %5360
  %5376 = lshr i32 %5375, 4
  %5377 = trunc i32 %5376 to i8
  %5378 = and i8 %5377, 1
  %5379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5378, i8* %5379, align 1, !tbaa !2447
  %5380 = icmp eq i32 %5360, 0
  %5381 = zext i1 %5380 to i8
  %5382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5381, i8* %5382, align 1, !tbaa !2448
  %5383 = lshr i32 %5360, 31
  %5384 = trunc i32 %5383 to i8
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5384, i8* %5385, align 1, !tbaa !2449
  %5386 = lshr i32 %5359, 31
  %5387 = xor i32 %5383, %5386
  %5388 = add nuw nsw i32 %5387, %5383
  %5389 = icmp eq i32 %5388, 2
  %5390 = zext i1 %5389 to i8
  %5391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5390, i8* %5391, align 1, !tbaa !2450
  %5392 = load i32, i32* %EDX
  %5393 = zext i32 %5392 to i64
  %5394 = load i64, i64* %PC
  %5395 = add i64 %5394, 3
  store i64 %5395, i64* %PC
  %5396 = shl i64 %5393, 32
  %5397 = ashr exact i64 %5396, 32
  store i64 %5397, i64* %RCX, align 8, !tbaa !2428
  %5398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5399 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5400 = load i64, i64* %RAX
  %5401 = load i64, i64* %RCX
  %5402 = mul i64 %5401, 8
  %5403 = add i64 %5402, %5400
  %5404 = load i64, i64* %PC
  %5405 = add i64 %5404, 5
  store i64 %5405, i64* %PC
  %5406 = bitcast i8* %5399 to double*
  %5407 = load double, double* %5406, align 1
  %5408 = getelementptr inbounds i8, i8* %5399, i64 8
  %5409 = bitcast i8* %5408 to i64*
  %5410 = load i64, i64* %5409, align 1
  %5411 = inttoptr i64 %5403 to double*
  %5412 = load double, double* %5411
  %5413 = fadd double %5407, %5412
  %5414 = bitcast i8* %5398 to double*
  store double %5413, double* %5414, align 1, !tbaa !2452
  %5415 = getelementptr inbounds i8, i8* %5398, i64 8
  %5416 = bitcast i8* %5415 to i64*
  store i64 %5410, i64* %5416, align 1, !tbaa !2452
  %5417 = load i64, i64* %RBP
  %5418 = add i64 %5417, 40
  %5419 = load i64, i64* %PC
  %5420 = add i64 %5419, 4
  store i64 %5420, i64* %PC
  %5421 = inttoptr i64 %5418 to i64*
  %5422 = load i64, i64* %5421
  store i64 %5422, i64* %RAX, align 8, !tbaa !2428
  %5423 = load i64, i64* %RBP
  %5424 = sub i64 %5423, 100
  %5425 = load i64, i64* %PC
  %5426 = add i64 %5425, 4
  store i64 %5426, i64* %PC
  %5427 = inttoptr i64 %5424 to i32*
  %5428 = load i32, i32* %5427
  %5429 = sext i32 %5428 to i64
  store i64 %5429, i64* %RCX, align 8, !tbaa !2428
  %5430 = load i64, i64* %RCX
  %5431 = load i64, i64* %PC
  %5432 = add i64 %5431, 7
  store i64 %5432, i64* %PC
  %5433 = sext i64 %5430 to i128
  %5434 = and i128 %5433, -18446744073709551616
  %5435 = zext i64 %5430 to i128
  %5436 = or i128 %5434, %5435
  %5437 = mul nsw i128 33800, %5436
  %5438 = trunc i128 %5437 to i64
  store i64 %5438, i64* %RCX, align 8, !tbaa !2428
  %5439 = sext i64 %5438 to i128
  %5440 = icmp ne i128 %5439, %5437
  %5441 = zext i1 %5440 to i8
  %5442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5441, i8* %5442, align 1, !tbaa !2432
  %5443 = trunc i128 %5437 to i32
  %5444 = and i32 %5443, 255
  %5445 = call i32 @llvm.ctpop.i32(i32 %5444) #16
  %5446 = trunc i32 %5445 to i8
  %5447 = and i8 %5446, 1
  %5448 = xor i8 %5447, 1
  %5449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5448, i8* %5449, align 1, !tbaa !2446
  %5450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5450, align 1, !tbaa !2447
  %5451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5451, align 1, !tbaa !2448
  %5452 = lshr i64 %5438, 63
  %5453 = trunc i64 %5452 to i8
  %5454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5453, i8* %5454, align 1, !tbaa !2449
  %5455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5441, i8* %5455, align 1, !tbaa !2450
  %5456 = load i64, i64* %RAX
  %5457 = load i64, i64* %RCX
  %5458 = load i64, i64* %PC
  %5459 = add i64 %5458, 3
  store i64 %5459, i64* %PC
  %5460 = add i64 %5457, %5456
  store i64 %5460, i64* %RAX, align 8, !tbaa !2428
  %5461 = icmp ult i64 %5460, %5456
  %5462 = icmp ult i64 %5460, %5457
  %5463 = or i1 %5461, %5462
  %5464 = zext i1 %5463 to i8
  %5465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5464, i8* %5465, align 1, !tbaa !2432
  %5466 = trunc i64 %5460 to i32
  %5467 = and i32 %5466, 255
  %5468 = call i32 @llvm.ctpop.i32(i32 %5467) #16
  %5469 = trunc i32 %5468 to i8
  %5470 = and i8 %5469, 1
  %5471 = xor i8 %5470, 1
  %5472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5471, i8* %5472, align 1, !tbaa !2446
  %5473 = xor i64 %5457, %5456
  %5474 = xor i64 %5473, %5460
  %5475 = lshr i64 %5474, 4
  %5476 = trunc i64 %5475 to i8
  %5477 = and i8 %5476, 1
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5477, i8* %5478, align 1, !tbaa !2447
  %5479 = icmp eq i64 %5460, 0
  %5480 = zext i1 %5479 to i8
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5480, i8* %5481, align 1, !tbaa !2448
  %5482 = lshr i64 %5460, 63
  %5483 = trunc i64 %5482 to i8
  %5484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5483, i8* %5484, align 1, !tbaa !2449
  %5485 = lshr i64 %5456, 63
  %5486 = lshr i64 %5457, 63
  %5487 = xor i64 %5482, %5485
  %5488 = xor i64 %5482, %5486
  %5489 = add nuw nsw i64 %5487, %5488
  %5490 = icmp eq i64 %5489, 2
  %5491 = zext i1 %5490 to i8
  %5492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5491, i8* %5492, align 1, !tbaa !2450
  %5493 = load i64, i64* %RBP
  %5494 = sub i64 %5493, 52
  %5495 = load i64, i64* %PC
  %5496 = add i64 %5495, 4
  store i64 %5496, i64* %PC
  %5497 = inttoptr i64 %5494 to i32*
  %5498 = load i32, i32* %5497
  %5499 = sext i32 %5498 to i64
  store i64 %5499, i64* %RCX, align 8, !tbaa !2428
  %5500 = load i64, i64* %RCX
  %5501 = load i64, i64* %PC
  %5502 = add i64 %5501, 7
  store i64 %5502, i64* %PC
  %5503 = sext i64 %5500 to i128
  %5504 = and i128 %5503, -18446744073709551616
  %5505 = zext i64 %5500 to i128
  %5506 = or i128 %5504, %5505
  %5507 = mul nsw i128 520, %5506
  %5508 = trunc i128 %5507 to i64
  store i64 %5508, i64* %RCX, align 8, !tbaa !2428
  %5509 = sext i64 %5508 to i128
  %5510 = icmp ne i128 %5509, %5507
  %5511 = zext i1 %5510 to i8
  %5512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5511, i8* %5512, align 1, !tbaa !2432
  %5513 = trunc i128 %5507 to i32
  %5514 = and i32 %5513, 255
  %5515 = call i32 @llvm.ctpop.i32(i32 %5514) #16
  %5516 = trunc i32 %5515 to i8
  %5517 = and i8 %5516, 1
  %5518 = xor i8 %5517, 1
  %5519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5518, i8* %5519, align 1, !tbaa !2446
  %5520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5520, align 1, !tbaa !2447
  %5521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5521, align 1, !tbaa !2448
  %5522 = lshr i64 %5508, 63
  %5523 = trunc i64 %5522 to i8
  %5524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5523, i8* %5524, align 1, !tbaa !2449
  %5525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5511, i8* %5525, align 1, !tbaa !2450
  %5526 = load i64, i64* %RAX
  %5527 = load i64, i64* %RCX
  %5528 = load i64, i64* %PC
  %5529 = add i64 %5528, 3
  store i64 %5529, i64* %PC
  %5530 = add i64 %5527, %5526
  store i64 %5530, i64* %RAX, align 8, !tbaa !2428
  %5531 = icmp ult i64 %5530, %5526
  %5532 = icmp ult i64 %5530, %5527
  %5533 = or i1 %5531, %5532
  %5534 = zext i1 %5533 to i8
  %5535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5534, i8* %5535, align 1, !tbaa !2432
  %5536 = trunc i64 %5530 to i32
  %5537 = and i32 %5536, 255
  %5538 = call i32 @llvm.ctpop.i32(i32 %5537) #16
  %5539 = trunc i32 %5538 to i8
  %5540 = and i8 %5539, 1
  %5541 = xor i8 %5540, 1
  %5542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5541, i8* %5542, align 1, !tbaa !2446
  %5543 = xor i64 %5527, %5526
  %5544 = xor i64 %5543, %5530
  %5545 = lshr i64 %5544, 4
  %5546 = trunc i64 %5545 to i8
  %5547 = and i8 %5546, 1
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5547, i8* %5548, align 1, !tbaa !2447
  %5549 = icmp eq i64 %5530, 0
  %5550 = zext i1 %5549 to i8
  %5551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5550, i8* %5551, align 1, !tbaa !2448
  %5552 = lshr i64 %5530, 63
  %5553 = trunc i64 %5552 to i8
  %5554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5553, i8* %5554, align 1, !tbaa !2449
  %5555 = lshr i64 %5526, 63
  %5556 = lshr i64 %5527, 63
  %5557 = xor i64 %5552, %5555
  %5558 = xor i64 %5552, %5556
  %5559 = add nuw nsw i64 %5557, %5558
  %5560 = icmp eq i64 %5559, 2
  %5561 = zext i1 %5560 to i8
  %5562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5561, i8* %5562, align 1, !tbaa !2450
  %5563 = load i64, i64* %RBP
  %5564 = sub i64 %5563, 108
  %5565 = load i64, i64* %PC
  %5566 = add i64 %5565, 4
  store i64 %5566, i64* %PC
  %5567 = inttoptr i64 %5564 to i32*
  %5568 = load i32, i32* %5567
  %5569 = sext i32 %5568 to i64
  store i64 %5569, i64* %RCX, align 8, !tbaa !2428
  %5570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5572 = load i64, i64* %RAX
  %5573 = load i64, i64* %RCX
  %5574 = mul i64 %5573, 8
  %5575 = add i64 %5574, %5572
  %5576 = load i64, i64* %PC
  %5577 = add i64 %5576, 5
  store i64 %5577, i64* %PC
  %5578 = bitcast i8* %5571 to double*
  %5579 = load double, double* %5578, align 1
  %5580 = getelementptr inbounds i8, i8* %5571, i64 8
  %5581 = bitcast i8* %5580 to i64*
  %5582 = load i64, i64* %5581, align 1
  %5583 = inttoptr i64 %5575 to double*
  %5584 = load double, double* %5583
  %5585 = fsub double %5579, %5584
  %5586 = bitcast i8* %5570 to double*
  store double %5585, double* %5586, align 1, !tbaa !2452
  %5587 = getelementptr inbounds i8, i8* %5570, i64 8
  %5588 = bitcast i8* %5587 to i64*
  store i64 %5582, i64* %5588, align 1, !tbaa !2452
  %5589 = load i64, i64* %RBP
  %5590 = sub i64 %5589, 96
  %5591 = load i64, i64* %PC
  %5592 = add i64 %5591, 4
  store i64 %5592, i64* %PC
  %5593 = inttoptr i64 %5590 to i64*
  %5594 = load i64, i64* %5593
  store i64 %5594, i64* %RAX, align 8, !tbaa !2428
  %5595 = load i64, i64* %RBP
  %5596 = sub i64 %5595, 100
  %5597 = load i64, i64* %PC
  %5598 = add i64 %5597, 4
  store i64 %5598, i64* %PC
  %5599 = inttoptr i64 %5596 to i32*
  %5600 = load i32, i32* %5599
  %5601 = sext i32 %5600 to i64
  store i64 %5601, i64* %RCX, align 8, !tbaa !2428
  %5602 = load i64, i64* %RCX
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 7
  store i64 %5604, i64* %PC
  %5605 = sext i64 %5602 to i128
  %5606 = and i128 %5605, -18446744073709551616
  %5607 = zext i64 %5602 to i128
  %5608 = or i128 %5606, %5607
  %5609 = mul nsw i128 520, %5608
  %5610 = trunc i128 %5609 to i64
  store i64 %5610, i64* %RCX, align 8, !tbaa !2428
  %5611 = sext i64 %5610 to i128
  %5612 = icmp ne i128 %5611, %5609
  %5613 = zext i1 %5612 to i8
  %5614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5613, i8* %5614, align 1, !tbaa !2432
  %5615 = trunc i128 %5609 to i32
  %5616 = and i32 %5615, 255
  %5617 = call i32 @llvm.ctpop.i32(i32 %5616) #16
  %5618 = trunc i32 %5617 to i8
  %5619 = and i8 %5618, 1
  %5620 = xor i8 %5619, 1
  %5621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5620, i8* %5621, align 1, !tbaa !2446
  %5622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5622, align 1, !tbaa !2447
  %5623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5623, align 1, !tbaa !2448
  %5624 = lshr i64 %5610, 63
  %5625 = trunc i64 %5624 to i8
  %5626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5625, i8* %5626, align 1, !tbaa !2449
  %5627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5613, i8* %5627, align 1, !tbaa !2450
  %5628 = load i64, i64* %RAX
  %5629 = load i64, i64* %RCX
  %5630 = load i64, i64* %PC
  %5631 = add i64 %5630, 3
  store i64 %5631, i64* %PC
  %5632 = add i64 %5629, %5628
  store i64 %5632, i64* %RAX, align 8, !tbaa !2428
  %5633 = icmp ult i64 %5632, %5628
  %5634 = icmp ult i64 %5632, %5629
  %5635 = or i1 %5633, %5634
  %5636 = zext i1 %5635 to i8
  %5637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5636, i8* %5637, align 1, !tbaa !2432
  %5638 = trunc i64 %5632 to i32
  %5639 = and i32 %5638, 255
  %5640 = call i32 @llvm.ctpop.i32(i32 %5639) #16
  %5641 = trunc i32 %5640 to i8
  %5642 = and i8 %5641, 1
  %5643 = xor i8 %5642, 1
  %5644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5643, i8* %5644, align 1, !tbaa !2446
  %5645 = xor i64 %5629, %5628
  %5646 = xor i64 %5645, %5632
  %5647 = lshr i64 %5646, 4
  %5648 = trunc i64 %5647 to i8
  %5649 = and i8 %5648, 1
  %5650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5649, i8* %5650, align 1, !tbaa !2447
  %5651 = icmp eq i64 %5632, 0
  %5652 = zext i1 %5651 to i8
  %5653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5652, i8* %5653, align 1, !tbaa !2448
  %5654 = lshr i64 %5632, 63
  %5655 = trunc i64 %5654 to i8
  %5656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5655, i8* %5656, align 1, !tbaa !2449
  %5657 = lshr i64 %5628, 63
  %5658 = lshr i64 %5629, 63
  %5659 = xor i64 %5654, %5657
  %5660 = xor i64 %5654, %5658
  %5661 = add nuw nsw i64 %5659, %5660
  %5662 = icmp eq i64 %5661, 2
  %5663 = zext i1 %5662 to i8
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5663, i8* %5664, align 1, !tbaa !2450
  %5665 = load i64, i64* %RBP
  %5666 = sub i64 %5665, 104
  %5667 = load i64, i64* %PC
  %5668 = add i64 %5667, 4
  store i64 %5668, i64* %PC
  %5669 = inttoptr i64 %5666 to i32*
  %5670 = load i32, i32* %5669
  %5671 = sext i32 %5670 to i64
  store i64 %5671, i64* %RCX, align 8, !tbaa !2428
  %5672 = load i64, i64* %RAX
  %5673 = load i64, i64* %RCX
  %5674 = mul i64 %5673, 8
  %5675 = add i64 %5674, %5672
  %5676 = bitcast %union.vec128_t* %XMM0 to i8*
  %5677 = load i64, i64* %PC
  %5678 = add i64 %5677, 5
  store i64 %5678, i64* %PC
  %5679 = bitcast i8* %5676 to double*
  %5680 = load double, double* %5679, align 1
  %5681 = inttoptr i64 %5675 to double*
  store double %5680, double* %5681
  %5682 = load i64, i64* %RBP
  %5683 = add i64 %5682, 88
  %5684 = load i64, i64* %PC
  %5685 = add i64 %5684, 4
  store i64 %5685, i64* %PC
  %5686 = inttoptr i64 %5683 to i64*
  %5687 = load i64, i64* %5686
  store i64 %5687, i64* %RAX, align 8, !tbaa !2428
  %5688 = load i64, i64* %RBP
  %5689 = sub i64 %5688, 52
  %5690 = load i64, i64* %PC
  %5691 = add i64 %5690, 4
  store i64 %5691, i64* %PC
  %5692 = inttoptr i64 %5689 to i32*
  %5693 = load i32, i32* %5692
  %5694 = sext i32 %5693 to i64
  store i64 %5694, i64* %RCX, align 8, !tbaa !2428
  %5695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5696 = load i64, i64* %RAX
  %5697 = load i64, i64* %RCX
  %5698 = mul i64 %5697, 8
  %5699 = add i64 %5698, %5696
  %5700 = load i64, i64* %PC
  %5701 = add i64 %5700, 5
  store i64 %5701, i64* %PC
  %5702 = inttoptr i64 %5699 to double*
  %5703 = load double, double* %5702
  %5704 = bitcast i8* %5695 to double*
  store double %5703, double* %5704, align 1, !tbaa !2452
  %5705 = getelementptr inbounds i8, i8* %5695, i64 8
  %5706 = bitcast i8* %5705 to double*
  store double 0.000000e+00, double* %5706, align 1, !tbaa !2452
  %5707 = load i64, i64* %RBP
  %5708 = add i64 %5707, 96
  %5709 = load i64, i64* %PC
  %5710 = add i64 %5709, 4
  store i64 %5710, i64* %PC
  %5711 = inttoptr i64 %5708 to i64*
  %5712 = load i64, i64* %5711
  store i64 %5712, i64* %RAX, align 8, !tbaa !2428
  %5713 = load i64, i64* %RBP
  %5714 = sub i64 %5713, 104
  %5715 = load i64, i64* %PC
  %5716 = add i64 %5715, 4
  store i64 %5716, i64* %PC
  %5717 = inttoptr i64 %5714 to i32*
  %5718 = load i32, i32* %5717
  %5719 = sext i32 %5718 to i64
  store i64 %5719, i64* %RCX, align 8, !tbaa !2428
  %5720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5721 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5722 = load i64, i64* %RAX
  %5723 = load i64, i64* %RCX
  %5724 = mul i64 %5723, 8
  %5725 = add i64 %5724, %5722
  %5726 = load i64, i64* %PC
  %5727 = add i64 %5726, 5
  store i64 %5727, i64* %PC
  %5728 = bitcast i8* %5721 to double*
  %5729 = load double, double* %5728, align 1
  %5730 = getelementptr inbounds i8, i8* %5721, i64 8
  %5731 = bitcast i8* %5730 to i64*
  %5732 = load i64, i64* %5731, align 1
  %5733 = inttoptr i64 %5725 to double*
  %5734 = load double, double* %5733
  %5735 = fdiv double %5729, %5734
  %5736 = bitcast i8* %5720 to double*
  store double %5735, double* %5736, align 1, !tbaa !2452
  %5737 = getelementptr inbounds i8, i8* %5720, i64 8
  %5738 = bitcast i8* %5737 to i64*
  store i64 %5732, i64* %5738, align 1, !tbaa !2452
  %5739 = load i64, i64* %RBP
  %5740 = add i64 %5739, 24
  %5741 = load i64, i64* %PC
  %5742 = add i64 %5741, 4
  store i64 %5742, i64* %PC
  %5743 = inttoptr i64 %5740 to i64*
  %5744 = load i64, i64* %5743
  store i64 %5744, i64* %RAX, align 8, !tbaa !2428
  %5745 = load i64, i64* %RBP
  %5746 = sub i64 %5745, 100
  %5747 = load i64, i64* %PC
  %5748 = add i64 %5747, 4
  store i64 %5748, i64* %PC
  %5749 = inttoptr i64 %5746 to i32*
  %5750 = load i32, i32* %5749
  %5751 = sext i32 %5750 to i64
  store i64 %5751, i64* %RCX, align 8, !tbaa !2428
  %5752 = load i64, i64* %RCX
  %5753 = load i64, i64* %PC
  %5754 = add i64 %5753, 7
  store i64 %5754, i64* %PC
  %5755 = sext i64 %5752 to i128
  %5756 = and i128 %5755, -18446744073709551616
  %5757 = zext i64 %5752 to i128
  %5758 = or i128 %5756, %5757
  %5759 = mul nsw i128 33800, %5758
  %5760 = trunc i128 %5759 to i64
  store i64 %5760, i64* %RCX, align 8, !tbaa !2428
  %5761 = sext i64 %5760 to i128
  %5762 = icmp ne i128 %5761, %5759
  %5763 = zext i1 %5762 to i8
  %5764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5763, i8* %5764, align 1, !tbaa !2432
  %5765 = trunc i128 %5759 to i32
  %5766 = and i32 %5765, 255
  %5767 = call i32 @llvm.ctpop.i32(i32 %5766) #16
  %5768 = trunc i32 %5767 to i8
  %5769 = and i8 %5768, 1
  %5770 = xor i8 %5769, 1
  %5771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5770, i8* %5771, align 1, !tbaa !2446
  %5772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5772, align 1, !tbaa !2447
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5773, align 1, !tbaa !2448
  %5774 = lshr i64 %5760, 63
  %5775 = trunc i64 %5774 to i8
  %5776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5775, i8* %5776, align 1, !tbaa !2449
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5763, i8* %5777, align 1, !tbaa !2450
  %5778 = load i64, i64* %RAX
  %5779 = load i64, i64* %RCX
  %5780 = load i64, i64* %PC
  %5781 = add i64 %5780, 3
  store i64 %5781, i64* %PC
  %5782 = add i64 %5779, %5778
  store i64 %5782, i64* %RAX, align 8, !tbaa !2428
  %5783 = icmp ult i64 %5782, %5778
  %5784 = icmp ult i64 %5782, %5779
  %5785 = or i1 %5783, %5784
  %5786 = zext i1 %5785 to i8
  %5787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5786, i8* %5787, align 1, !tbaa !2432
  %5788 = trunc i64 %5782 to i32
  %5789 = and i32 %5788, 255
  %5790 = call i32 @llvm.ctpop.i32(i32 %5789) #16
  %5791 = trunc i32 %5790 to i8
  %5792 = and i8 %5791, 1
  %5793 = xor i8 %5792, 1
  %5794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5793, i8* %5794, align 1, !tbaa !2446
  %5795 = xor i64 %5779, %5778
  %5796 = xor i64 %5795, %5782
  %5797 = lshr i64 %5796, 4
  %5798 = trunc i64 %5797 to i8
  %5799 = and i8 %5798, 1
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5799, i8* %5800, align 1, !tbaa !2447
  %5801 = icmp eq i64 %5782, 0
  %5802 = zext i1 %5801 to i8
  %5803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5802, i8* %5803, align 1, !tbaa !2448
  %5804 = lshr i64 %5782, 63
  %5805 = trunc i64 %5804 to i8
  %5806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5805, i8* %5806, align 1, !tbaa !2449
  %5807 = lshr i64 %5778, 63
  %5808 = lshr i64 %5779, 63
  %5809 = xor i64 %5804, %5807
  %5810 = xor i64 %5804, %5808
  %5811 = add nuw nsw i64 %5809, %5810
  %5812 = icmp eq i64 %5811, 2
  %5813 = zext i1 %5812 to i8
  %5814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5813, i8* %5814, align 1, !tbaa !2450
  %5815 = load i64, i64* %RBP
  %5816 = sub i64 %5815, 104
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 4
  store i64 %5818, i64* %PC
  %5819 = inttoptr i64 %5816 to i32*
  %5820 = load i32, i32* %5819
  %5821 = sext i32 %5820 to i64
  store i64 %5821, i64* %RCX, align 8, !tbaa !2428
  %5822 = load i64, i64* %RCX
  %5823 = load i64, i64* %PC
  %5824 = add i64 %5823, 7
  store i64 %5824, i64* %PC
  %5825 = sext i64 %5822 to i128
  %5826 = and i128 %5825, -18446744073709551616
  %5827 = zext i64 %5822 to i128
  %5828 = or i128 %5826, %5827
  %5829 = mul nsw i128 520, %5828
  %5830 = trunc i128 %5829 to i64
  store i64 %5830, i64* %RCX, align 8, !tbaa !2428
  %5831 = sext i64 %5830 to i128
  %5832 = icmp ne i128 %5831, %5829
  %5833 = zext i1 %5832 to i8
  %5834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5833, i8* %5834, align 1, !tbaa !2432
  %5835 = trunc i128 %5829 to i32
  %5836 = and i32 %5835, 255
  %5837 = call i32 @llvm.ctpop.i32(i32 %5836) #16
  %5838 = trunc i32 %5837 to i8
  %5839 = and i8 %5838, 1
  %5840 = xor i8 %5839, 1
  %5841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5840, i8* %5841, align 1, !tbaa !2446
  %5842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5842, align 1, !tbaa !2447
  %5843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5843, align 1, !tbaa !2448
  %5844 = lshr i64 %5830, 63
  %5845 = trunc i64 %5844 to i8
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5845, i8* %5846, align 1, !tbaa !2449
  %5847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5833, i8* %5847, align 1, !tbaa !2450
  %5848 = load i64, i64* %RAX
  %5849 = load i64, i64* %RCX
  %5850 = load i64, i64* %PC
  %5851 = add i64 %5850, 3
  store i64 %5851, i64* %PC
  %5852 = add i64 %5849, %5848
  store i64 %5852, i64* %RAX, align 8, !tbaa !2428
  %5853 = icmp ult i64 %5852, %5848
  %5854 = icmp ult i64 %5852, %5849
  %5855 = or i1 %5853, %5854
  %5856 = zext i1 %5855 to i8
  %5857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5856, i8* %5857, align 1, !tbaa !2432
  %5858 = trunc i64 %5852 to i32
  %5859 = and i32 %5858, 255
  %5860 = call i32 @llvm.ctpop.i32(i32 %5859) #16
  %5861 = trunc i32 %5860 to i8
  %5862 = and i8 %5861, 1
  %5863 = xor i8 %5862, 1
  %5864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5863, i8* %5864, align 1, !tbaa !2446
  %5865 = xor i64 %5849, %5848
  %5866 = xor i64 %5865, %5852
  %5867 = lshr i64 %5866, 4
  %5868 = trunc i64 %5867 to i8
  %5869 = and i8 %5868, 1
  %5870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5869, i8* %5870, align 1, !tbaa !2447
  %5871 = icmp eq i64 %5852, 0
  %5872 = zext i1 %5871 to i8
  %5873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5872, i8* %5873, align 1, !tbaa !2448
  %5874 = lshr i64 %5852, 63
  %5875 = trunc i64 %5874 to i8
  %5876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5875, i8* %5876, align 1, !tbaa !2449
  %5877 = lshr i64 %5848, 63
  %5878 = lshr i64 %5849, 63
  %5879 = xor i64 %5874, %5877
  %5880 = xor i64 %5874, %5878
  %5881 = add nuw nsw i64 %5879, %5880
  %5882 = icmp eq i64 %5881, 2
  %5883 = zext i1 %5882 to i8
  %5884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5883, i8* %5884, align 1, !tbaa !2450
  %5885 = load i64, i64* %RBP
  %5886 = sub i64 %5885, 108
  %5887 = load i64, i64* %PC
  %5888 = add i64 %5887, 4
  store i64 %5888, i64* %PC
  %5889 = inttoptr i64 %5886 to i32*
  %5890 = load i32, i32* %5889
  %5891 = sext i32 %5890 to i64
  store i64 %5891, i64* %RCX, align 8, !tbaa !2428
  %5892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5894 = load i64, i64* %RAX
  %5895 = load i64, i64* %RCX
  %5896 = mul i64 %5895, 8
  %5897 = add i64 %5896, %5894
  %5898 = load i64, i64* %PC
  %5899 = add i64 %5898, 5
  store i64 %5899, i64* %PC
  %5900 = bitcast i8* %5893 to double*
  %5901 = load double, double* %5900, align 1
  %5902 = getelementptr inbounds i8, i8* %5893, i64 8
  %5903 = bitcast i8* %5902 to i64*
  %5904 = load i64, i64* %5903, align 1
  %5905 = inttoptr i64 %5897 to double*
  %5906 = load double, double* %5905
  %5907 = fmul double %5901, %5906
  %5908 = bitcast i8* %5892 to double*
  store double %5907, double* %5908, align 1, !tbaa !2452
  %5909 = getelementptr inbounds i8, i8* %5892, i64 8
  %5910 = bitcast i8* %5909 to i64*
  store i64 %5904, i64* %5910, align 1, !tbaa !2452
  %5911 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5912 = load i64, i64* %RBP
  %5913 = sub i64 %5912, 72
  %5914 = load i64, i64* %PC
  %5915 = add i64 %5914, 5
  store i64 %5915, i64* %PC
  %5916 = inttoptr i64 %5913 to double*
  %5917 = load double, double* %5916
  %5918 = bitcast i8* %5911 to double*
  store double %5917, double* %5918, align 1, !tbaa !2452
  %5919 = getelementptr inbounds i8, i8* %5911, i64 8
  %5920 = bitcast i8* %5919 to double*
  store double 0.000000e+00, double* %5920, align 1, !tbaa !2452
  %5921 = load i64, i64* %RBP
  %5922 = add i64 %5921, 96
  %5923 = load i64, i64* %PC
  %5924 = add i64 %5923, 4
  store i64 %5924, i64* %PC
  %5925 = inttoptr i64 %5922 to i64*
  %5926 = load i64, i64* %5925
  store i64 %5926, i64* %RAX, align 8, !tbaa !2428
  %5927 = load i64, i64* %RBP
  %5928 = sub i64 %5927, 104
  %5929 = load i64, i64* %PC
  %5930 = add i64 %5929, 4
  store i64 %5930, i64* %PC
  %5931 = inttoptr i64 %5928 to i32*
  %5932 = load i32, i32* %5931
  %5933 = sext i32 %5932 to i64
  store i64 %5933, i64* %RCX, align 8, !tbaa !2428
  %5934 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5935 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5936 = load i64, i64* %RAX
  %5937 = load i64, i64* %RCX
  %5938 = mul i64 %5937, 8
  %5939 = add i64 %5938, %5936
  %5940 = load i64, i64* %PC
  %5941 = add i64 %5940, 5
  store i64 %5941, i64* %PC
  %5942 = bitcast i8* %5935 to double*
  %5943 = load double, double* %5942, align 1
  %5944 = getelementptr inbounds i8, i8* %5935, i64 8
  %5945 = bitcast i8* %5944 to i64*
  %5946 = load i64, i64* %5945, align 1
  %5947 = inttoptr i64 %5939 to double*
  %5948 = load double, double* %5947
  %5949 = fdiv double %5943, %5948
  %5950 = bitcast i8* %5934 to double*
  store double %5949, double* %5950, align 1, !tbaa !2452
  %5951 = getelementptr inbounds i8, i8* %5934, i64 8
  %5952 = bitcast i8* %5951 to i64*
  store i64 %5946, i64* %5952, align 1, !tbaa !2452
  %5953 = load i64, i64* %RBP
  %5954 = sub i64 %5953, 96
  %5955 = load i64, i64* %PC
  %5956 = add i64 %5955, 4
  store i64 %5956, i64* %PC
  %5957 = inttoptr i64 %5954 to i64*
  %5958 = load i64, i64* %5957
  store i64 %5958, i64* %RAX, align 8, !tbaa !2428
  %5959 = load i64, i64* %RBP
  %5960 = sub i64 %5959, 100
  %5961 = load i64, i64* %PC
  %5962 = add i64 %5961, 4
  store i64 %5962, i64* %PC
  %5963 = inttoptr i64 %5960 to i32*
  %5964 = load i32, i32* %5963
  %5965 = sext i32 %5964 to i64
  store i64 %5965, i64* %RCX, align 8, !tbaa !2428
  %5966 = load i64, i64* %RCX
  %5967 = load i64, i64* %PC
  %5968 = add i64 %5967, 7
  store i64 %5968, i64* %PC
  %5969 = sext i64 %5966 to i128
  %5970 = and i128 %5969, -18446744073709551616
  %5971 = zext i64 %5966 to i128
  %5972 = or i128 %5970, %5971
  %5973 = mul nsw i128 520, %5972
  %5974 = trunc i128 %5973 to i64
  store i64 %5974, i64* %RCX, align 8, !tbaa !2428
  %5975 = sext i64 %5974 to i128
  %5976 = icmp ne i128 %5975, %5973
  %5977 = zext i1 %5976 to i8
  %5978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5977, i8* %5978, align 1, !tbaa !2432
  %5979 = trunc i128 %5973 to i32
  %5980 = and i32 %5979, 255
  %5981 = call i32 @llvm.ctpop.i32(i32 %5980) #16
  %5982 = trunc i32 %5981 to i8
  %5983 = and i8 %5982, 1
  %5984 = xor i8 %5983, 1
  %5985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5984, i8* %5985, align 1, !tbaa !2446
  %5986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5986, align 1, !tbaa !2447
  %5987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5987, align 1, !tbaa !2448
  %5988 = lshr i64 %5974, 63
  %5989 = trunc i64 %5988 to i8
  %5990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5989, i8* %5990, align 1, !tbaa !2449
  %5991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5977, i8* %5991, align 1, !tbaa !2450
  %5992 = load i64, i64* %RAX
  %5993 = load i64, i64* %RCX
  %5994 = load i64, i64* %PC
  %5995 = add i64 %5994, 3
  store i64 %5995, i64* %PC
  %5996 = add i64 %5993, %5992
  store i64 %5996, i64* %RAX, align 8, !tbaa !2428
  %5997 = icmp ult i64 %5996, %5992
  %5998 = icmp ult i64 %5996, %5993
  %5999 = or i1 %5997, %5998
  %6000 = zext i1 %5999 to i8
  %6001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6000, i8* %6001, align 1, !tbaa !2432
  %6002 = trunc i64 %5996 to i32
  %6003 = and i32 %6002, 255
  %6004 = call i32 @llvm.ctpop.i32(i32 %6003) #16
  %6005 = trunc i32 %6004 to i8
  %6006 = and i8 %6005, 1
  %6007 = xor i8 %6006, 1
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6007, i8* %6008, align 1, !tbaa !2446
  %6009 = xor i64 %5993, %5992
  %6010 = xor i64 %6009, %5996
  %6011 = lshr i64 %6010, 4
  %6012 = trunc i64 %6011 to i8
  %6013 = and i8 %6012, 1
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6013, i8* %6014, align 1, !tbaa !2447
  %6015 = icmp eq i64 %5996, 0
  %6016 = zext i1 %6015 to i8
  %6017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6016, i8* %6017, align 1, !tbaa !2448
  %6018 = lshr i64 %5996, 63
  %6019 = trunc i64 %6018 to i8
  %6020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6019, i8* %6020, align 1, !tbaa !2449
  %6021 = lshr i64 %5992, 63
  %6022 = lshr i64 %5993, 63
  %6023 = xor i64 %6018, %6021
  %6024 = xor i64 %6018, %6022
  %6025 = add nuw nsw i64 %6023, %6024
  %6026 = icmp eq i64 %6025, 2
  %6027 = zext i1 %6026 to i8
  %6028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6027, i8* %6028, align 1, !tbaa !2450
  %6029 = load i64, i64* %RBP
  %6030 = sub i64 %6029, 104
  %6031 = load i64, i64* %PC
  %6032 = add i64 %6031, 4
  store i64 %6032, i64* %PC
  %6033 = inttoptr i64 %6030 to i32*
  %6034 = load i32, i32* %6033
  %6035 = sext i32 %6034 to i64
  store i64 %6035, i64* %RCX, align 8, !tbaa !2428
  %6036 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6037 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6038 = load i64, i64* %RAX
  %6039 = load i64, i64* %RCX
  %6040 = mul i64 %6039, 8
  %6041 = add i64 %6040, %6038
  %6042 = load i64, i64* %PC
  %6043 = add i64 %6042, 5
  store i64 %6043, i64* %PC
  %6044 = bitcast i8* %6037 to double*
  %6045 = load double, double* %6044, align 1
  %6046 = getelementptr inbounds i8, i8* %6037, i64 8
  %6047 = bitcast i8* %6046 to i64*
  %6048 = load i64, i64* %6047, align 1
  %6049 = inttoptr i64 %6041 to double*
  %6050 = load double, double* %6049
  %6051 = fmul double %6045, %6050
  %6052 = bitcast i8* %6036 to double*
  store double %6051, double* %6052, align 1, !tbaa !2452
  %6053 = getelementptr inbounds i8, i8* %6036, i64 8
  %6054 = bitcast i8* %6053 to i64*
  store i64 %6048, i64* %6054, align 1, !tbaa !2452
  %6055 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6057 = bitcast %union.vec128_t* %XMM1 to i8*
  %6058 = load i64, i64* %PC
  %6059 = add i64 %6058, 4
  store i64 %6059, i64* %PC
  %6060 = bitcast i8* %6056 to double*
  %6061 = load double, double* %6060, align 1
  %6062 = getelementptr inbounds i8, i8* %6056, i64 8
  %6063 = bitcast i8* %6062 to i64*
  %6064 = load i64, i64* %6063, align 1
  %6065 = bitcast i8* %6057 to double*
  %6066 = load double, double* %6065, align 1
  %6067 = fsub double %6061, %6066
  %6068 = bitcast i8* %6055 to double*
  store double %6067, double* %6068, align 1, !tbaa !2452
  %6069 = getelementptr inbounds i8, i8* %6055, i64 8
  %6070 = bitcast i8* %6069 to i64*
  store i64 %6064, i64* %6070, align 1, !tbaa !2452
  %6071 = load i64, i64* %RBP
  %6072 = add i64 %6071, 16
  %6073 = load i64, i64* %PC
  %6074 = add i64 %6073, 4
  store i64 %6074, i64* %PC
  %6075 = inttoptr i64 %6072 to i64*
  %6076 = load i64, i64* %6075
  store i64 %6076, i64* %RAX, align 8, !tbaa !2428
  %6077 = load i64, i64* %RBP
  %6078 = sub i64 %6077, 100
  %6079 = load i64, i64* %PC
  %6080 = add i64 %6079, 4
  store i64 %6080, i64* %PC
  %6081 = inttoptr i64 %6078 to i32*
  %6082 = load i32, i32* %6081
  %6083 = sext i32 %6082 to i64
  store i64 %6083, i64* %RCX, align 8, !tbaa !2428
  %6084 = load i64, i64* %RCX
  %6085 = load i64, i64* %PC
  %6086 = add i64 %6085, 7
  store i64 %6086, i64* %PC
  %6087 = sext i64 %6084 to i128
  %6088 = and i128 %6087, -18446744073709551616
  %6089 = zext i64 %6084 to i128
  %6090 = or i128 %6088, %6089
  %6091 = mul nsw i128 520, %6090
  %6092 = trunc i128 %6091 to i64
  store i64 %6092, i64* %RCX, align 8, !tbaa !2428
  %6093 = sext i64 %6092 to i128
  %6094 = icmp ne i128 %6093, %6091
  %6095 = zext i1 %6094 to i8
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6095, i8* %6096, align 1, !tbaa !2432
  %6097 = trunc i128 %6091 to i32
  %6098 = and i32 %6097, 255
  %6099 = call i32 @llvm.ctpop.i32(i32 %6098) #16
  %6100 = trunc i32 %6099 to i8
  %6101 = and i8 %6100, 1
  %6102 = xor i8 %6101, 1
  %6103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6102, i8* %6103, align 1, !tbaa !2446
  %6104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6104, align 1, !tbaa !2447
  %6105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6105, align 1, !tbaa !2448
  %6106 = lshr i64 %6092, 63
  %6107 = trunc i64 %6106 to i8
  %6108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6107, i8* %6108, align 1, !tbaa !2449
  %6109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6095, i8* %6109, align 1, !tbaa !2450
  %6110 = load i64, i64* %RAX
  %6111 = load i64, i64* %RCX
  %6112 = load i64, i64* %PC
  %6113 = add i64 %6112, 3
  store i64 %6113, i64* %PC
  %6114 = add i64 %6111, %6110
  store i64 %6114, i64* %RAX, align 8, !tbaa !2428
  %6115 = icmp ult i64 %6114, %6110
  %6116 = icmp ult i64 %6114, %6111
  %6117 = or i1 %6115, %6116
  %6118 = zext i1 %6117 to i8
  %6119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6118, i8* %6119, align 1, !tbaa !2432
  %6120 = trunc i64 %6114 to i32
  %6121 = and i32 %6120, 255
  %6122 = call i32 @llvm.ctpop.i32(i32 %6121) #16
  %6123 = trunc i32 %6122 to i8
  %6124 = and i8 %6123, 1
  %6125 = xor i8 %6124, 1
  %6126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6125, i8* %6126, align 1, !tbaa !2446
  %6127 = xor i64 %6111, %6110
  %6128 = xor i64 %6127, %6114
  %6129 = lshr i64 %6128, 4
  %6130 = trunc i64 %6129 to i8
  %6131 = and i8 %6130, 1
  %6132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6131, i8* %6132, align 1, !tbaa !2447
  %6133 = icmp eq i64 %6114, 0
  %6134 = zext i1 %6133 to i8
  %6135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6134, i8* %6135, align 1, !tbaa !2448
  %6136 = lshr i64 %6114, 63
  %6137 = trunc i64 %6136 to i8
  %6138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6137, i8* %6138, align 1, !tbaa !2449
  %6139 = lshr i64 %6110, 63
  %6140 = lshr i64 %6111, 63
  %6141 = xor i64 %6136, %6139
  %6142 = xor i64 %6136, %6140
  %6143 = add nuw nsw i64 %6141, %6142
  %6144 = icmp eq i64 %6143, 2
  %6145 = zext i1 %6144 to i8
  %6146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6145, i8* %6146, align 1, !tbaa !2450
  %6147 = load i64, i64* %RBP
  %6148 = sub i64 %6147, 104
  %6149 = load i64, i64* %PC
  %6150 = add i64 %6149, 4
  store i64 %6150, i64* %PC
  %6151 = inttoptr i64 %6148 to i32*
  %6152 = load i32, i32* %6151
  %6153 = sext i32 %6152 to i64
  store i64 %6153, i64* %RCX, align 8, !tbaa !2428
  %6154 = load i64, i64* %RAX
  %6155 = load i64, i64* %RCX
  %6156 = mul i64 %6155, 8
  %6157 = add i64 %6156, %6154
  %6158 = bitcast %union.vec128_t* %XMM0 to i8*
  %6159 = load i64, i64* %PC
  %6160 = add i64 %6159, 5
  store i64 %6160, i64* %PC
  %6161 = bitcast i8* %6158 to double*
  %6162 = load double, double* %6161, align 1
  %6163 = inttoptr i64 %6157 to double*
  store double %6162, double* %6163
  %6164 = load i64, i64* %RBP
  %6165 = add i64 %6164, 72
  %6166 = load i64, i64* %PC
  %6167 = add i64 %6166, 4
  store i64 %6167, i64* %PC
  %6168 = inttoptr i64 %6165 to i64*
  %6169 = load i64, i64* %6168
  store i64 %6169, i64* %RAX, align 8, !tbaa !2428
  %6170 = load i64, i64* %RBP
  %6171 = sub i64 %6170, 108
  %6172 = load i64, i64* %PC
  %6173 = add i64 %6172, 4
  store i64 %6173, i64* %PC
  %6174 = inttoptr i64 %6171 to i32*
  %6175 = load i32, i32* %6174
  %6176 = sext i32 %6175 to i64
  store i64 %6176, i64* %RCX, align 8, !tbaa !2428
  %6177 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6178 = load i64, i64* %RAX
  %6179 = load i64, i64* %RCX
  %6180 = mul i64 %6179, 8
  %6181 = add i64 %6180, %6178
  %6182 = load i64, i64* %PC
  %6183 = add i64 %6182, 5
  store i64 %6183, i64* %PC
  %6184 = inttoptr i64 %6181 to double*
  %6185 = load double, double* %6184
  %6186 = bitcast i8* %6177 to double*
  store double %6185, double* %6186, align 1, !tbaa !2452
  %6187 = getelementptr inbounds i8, i8* %6177, i64 8
  %6188 = bitcast i8* %6187 to double*
  store double 0.000000e+00, double* %6188, align 1, !tbaa !2452
  %6189 = load i64, i64* %RBP
  %6190 = add i64 %6189, 80
  %6191 = load i64, i64* %PC
  %6192 = add i64 %6191, 4
  store i64 %6192, i64* %PC
  %6193 = inttoptr i64 %6190 to i64*
  %6194 = load i64, i64* %6193
  store i64 %6194, i64* %RAX, align 8, !tbaa !2428
  %6195 = load i64, i64* %RBP
  %6196 = sub i64 %6195, 108
  %6197 = load i64, i64* %PC
  %6198 = add i64 %6197, 4
  store i64 %6198, i64* %PC
  %6199 = inttoptr i64 %6196 to i32*
  %6200 = load i32, i32* %6199
  %6201 = sext i32 %6200 to i64
  store i64 %6201, i64* %RCX, align 8, !tbaa !2428
  %6202 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6203 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6204 = load i64, i64* %RAX
  %6205 = load i64, i64* %RCX
  %6206 = mul i64 %6205, 8
  %6207 = add i64 %6206, %6204
  %6208 = load i64, i64* %PC
  %6209 = add i64 %6208, 5
  store i64 %6209, i64* %PC
  %6210 = bitcast i8* %6203 to double*
  %6211 = load double, double* %6210, align 1
  %6212 = getelementptr inbounds i8, i8* %6203, i64 8
  %6213 = bitcast i8* %6212 to i64*
  %6214 = load i64, i64* %6213, align 1
  %6215 = inttoptr i64 %6207 to double*
  %6216 = load double, double* %6215
  %6217 = fdiv double %6211, %6216
  %6218 = bitcast i8* %6202 to double*
  store double %6217, double* %6218, align 1, !tbaa !2452
  %6219 = getelementptr inbounds i8, i8* %6202, i64 8
  %6220 = bitcast i8* %6219 to i64*
  store i64 %6214, i64* %6220, align 1, !tbaa !2452
  %6221 = load i64, i64* %RBP
  %6222 = add i64 %6221, 48
  %6223 = load i64, i64* %PC
  %6224 = add i64 %6223, 4
  store i64 %6224, i64* %PC
  %6225 = inttoptr i64 %6222 to i64*
  %6226 = load i64, i64* %6225
  store i64 %6226, i64* %RAX, align 8, !tbaa !2428
  %6227 = load i64, i64* %RBP
  %6228 = sub i64 %6227, 100
  %6229 = load i64, i64* %PC
  %6230 = add i64 %6229, 4
  store i64 %6230, i64* %PC
  %6231 = inttoptr i64 %6228 to i32*
  %6232 = load i32, i32* %6231
  %6233 = sext i32 %6232 to i64
  store i64 %6233, i64* %RCX, align 8, !tbaa !2428
  %6234 = load i64, i64* %RCX
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 7
  store i64 %6236, i64* %PC
  %6237 = sext i64 %6234 to i128
  %6238 = and i128 %6237, -18446744073709551616
  %6239 = zext i64 %6234 to i128
  %6240 = or i128 %6238, %6239
  %6241 = mul nsw i128 33800, %6240
  %6242 = trunc i128 %6241 to i64
  store i64 %6242, i64* %RCX, align 8, !tbaa !2428
  %6243 = sext i64 %6242 to i128
  %6244 = icmp ne i128 %6243, %6241
  %6245 = zext i1 %6244 to i8
  %6246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6245, i8* %6246, align 1, !tbaa !2432
  %6247 = trunc i128 %6241 to i32
  %6248 = and i32 %6247, 255
  %6249 = call i32 @llvm.ctpop.i32(i32 %6248) #16
  %6250 = trunc i32 %6249 to i8
  %6251 = and i8 %6250, 1
  %6252 = xor i8 %6251, 1
  %6253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6252, i8* %6253, align 1, !tbaa !2446
  %6254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6254, align 1, !tbaa !2447
  %6255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6255, align 1, !tbaa !2448
  %6256 = lshr i64 %6242, 63
  %6257 = trunc i64 %6256 to i8
  %6258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6257, i8* %6258, align 1, !tbaa !2449
  %6259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6245, i8* %6259, align 1, !tbaa !2450
  %6260 = load i64, i64* %RAX
  %6261 = load i64, i64* %RCX
  %6262 = load i64, i64* %PC
  %6263 = add i64 %6262, 3
  store i64 %6263, i64* %PC
  %6264 = add i64 %6261, %6260
  store i64 %6264, i64* %RAX, align 8, !tbaa !2428
  %6265 = icmp ult i64 %6264, %6260
  %6266 = icmp ult i64 %6264, %6261
  %6267 = or i1 %6265, %6266
  %6268 = zext i1 %6267 to i8
  %6269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6268, i8* %6269, align 1, !tbaa !2432
  %6270 = trunc i64 %6264 to i32
  %6271 = and i32 %6270, 255
  %6272 = call i32 @llvm.ctpop.i32(i32 %6271) #16
  %6273 = trunc i32 %6272 to i8
  %6274 = and i8 %6273, 1
  %6275 = xor i8 %6274, 1
  %6276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6275, i8* %6276, align 1, !tbaa !2446
  %6277 = xor i64 %6261, %6260
  %6278 = xor i64 %6277, %6264
  %6279 = lshr i64 %6278, 4
  %6280 = trunc i64 %6279 to i8
  %6281 = and i8 %6280, 1
  %6282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6281, i8* %6282, align 1, !tbaa !2447
  %6283 = icmp eq i64 %6264, 0
  %6284 = zext i1 %6283 to i8
  %6285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6284, i8* %6285, align 1, !tbaa !2448
  %6286 = lshr i64 %6264, 63
  %6287 = trunc i64 %6286 to i8
  %6288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6287, i8* %6288, align 1, !tbaa !2449
  %6289 = lshr i64 %6260, 63
  %6290 = lshr i64 %6261, 63
  %6291 = xor i64 %6286, %6289
  %6292 = xor i64 %6286, %6290
  %6293 = add nuw nsw i64 %6291, %6292
  %6294 = icmp eq i64 %6293, 2
  %6295 = zext i1 %6294 to i8
  %6296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6295, i8* %6296, align 1, !tbaa !2450
  %6297 = load i64, i64* %RBP
  %6298 = sub i64 %6297, 52
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 4
  store i64 %6300, i64* %PC
  %6301 = inttoptr i64 %6298 to i32*
  %6302 = load i32, i32* %6301
  %6303 = sext i32 %6302 to i64
  store i64 %6303, i64* %RCX, align 8, !tbaa !2428
  %6304 = load i64, i64* %RCX
  %6305 = load i64, i64* %PC
  %6306 = add i64 %6305, 7
  store i64 %6306, i64* %PC
  %6307 = sext i64 %6304 to i128
  %6308 = and i128 %6307, -18446744073709551616
  %6309 = zext i64 %6304 to i128
  %6310 = or i128 %6308, %6309
  %6311 = mul nsw i128 520, %6310
  %6312 = trunc i128 %6311 to i64
  store i64 %6312, i64* %RCX, align 8, !tbaa !2428
  %6313 = sext i64 %6312 to i128
  %6314 = icmp ne i128 %6313, %6311
  %6315 = zext i1 %6314 to i8
  %6316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6315, i8* %6316, align 1, !tbaa !2432
  %6317 = trunc i128 %6311 to i32
  %6318 = and i32 %6317, 255
  %6319 = call i32 @llvm.ctpop.i32(i32 %6318) #16
  %6320 = trunc i32 %6319 to i8
  %6321 = and i8 %6320, 1
  %6322 = xor i8 %6321, 1
  %6323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6322, i8* %6323, align 1, !tbaa !2446
  %6324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6324, align 1, !tbaa !2447
  %6325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6325, align 1, !tbaa !2448
  %6326 = lshr i64 %6312, 63
  %6327 = trunc i64 %6326 to i8
  %6328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6327, i8* %6328, align 1, !tbaa !2449
  %6329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6315, i8* %6329, align 1, !tbaa !2450
  %6330 = load i64, i64* %RAX
  %6331 = load i64, i64* %RCX
  %6332 = load i64, i64* %PC
  %6333 = add i64 %6332, 3
  store i64 %6333, i64* %PC
  %6334 = add i64 %6331, %6330
  store i64 %6334, i64* %RAX, align 8, !tbaa !2428
  %6335 = icmp ult i64 %6334, %6330
  %6336 = icmp ult i64 %6334, %6331
  %6337 = or i1 %6335, %6336
  %6338 = zext i1 %6337 to i8
  %6339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6338, i8* %6339, align 1, !tbaa !2432
  %6340 = trunc i64 %6334 to i32
  %6341 = and i32 %6340, 255
  %6342 = call i32 @llvm.ctpop.i32(i32 %6341) #16
  %6343 = trunc i32 %6342 to i8
  %6344 = and i8 %6343, 1
  %6345 = xor i8 %6344, 1
  %6346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6345, i8* %6346, align 1, !tbaa !2446
  %6347 = xor i64 %6331, %6330
  %6348 = xor i64 %6347, %6334
  %6349 = lshr i64 %6348, 4
  %6350 = trunc i64 %6349 to i8
  %6351 = and i8 %6350, 1
  %6352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6351, i8* %6352, align 1, !tbaa !2447
  %6353 = icmp eq i64 %6334, 0
  %6354 = zext i1 %6353 to i8
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6354, i8* %6355, align 1, !tbaa !2448
  %6356 = lshr i64 %6334, 63
  %6357 = trunc i64 %6356 to i8
  %6358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6357, i8* %6358, align 1, !tbaa !2449
  %6359 = lshr i64 %6330, 63
  %6360 = lshr i64 %6331, 63
  %6361 = xor i64 %6356, %6359
  %6362 = xor i64 %6356, %6360
  %6363 = add nuw nsw i64 %6361, %6362
  %6364 = icmp eq i64 %6363, 2
  %6365 = zext i1 %6364 to i8
  %6366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6365, i8* %6366, align 1, !tbaa !2450
  %6367 = load i64, i64* %RBP
  %6368 = sub i64 %6367, 108
  %6369 = load i64, i64* %PC
  %6370 = add i64 %6369, 4
  store i64 %6370, i64* %PC
  %6371 = inttoptr i64 %6368 to i32*
  %6372 = load i32, i32* %6371
  %6373 = sext i32 %6372 to i64
  store i64 %6373, i64* %RCX, align 8, !tbaa !2428
  %6374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6375 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6376 = load i64, i64* %RAX
  %6377 = load i64, i64* %RCX
  %6378 = mul i64 %6377, 8
  %6379 = add i64 %6378, %6376
  %6380 = load i64, i64* %PC
  %6381 = add i64 %6380, 5
  store i64 %6381, i64* %PC
  %6382 = bitcast i8* %6375 to double*
  %6383 = load double, double* %6382, align 1
  %6384 = getelementptr inbounds i8, i8* %6375, i64 8
  %6385 = bitcast i8* %6384 to i64*
  %6386 = load i64, i64* %6385, align 1
  %6387 = inttoptr i64 %6379 to double*
  %6388 = load double, double* %6387
  %6389 = fmul double %6383, %6388
  %6390 = bitcast i8* %6374 to double*
  store double %6389, double* %6390, align 1, !tbaa !2452
  %6391 = getelementptr inbounds i8, i8* %6374, i64 8
  %6392 = bitcast i8* %6391 to i64*
  store i64 %6386, i64* %6392, align 1, !tbaa !2452
  %6393 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6394 = load i64, i64* %RBP
  %6395 = sub i64 %6394, 64
  %6396 = load i64, i64* %PC
  %6397 = add i64 %6396, 5
  store i64 %6397, i64* %PC
  %6398 = inttoptr i64 %6395 to double*
  %6399 = load double, double* %6398
  %6400 = bitcast i8* %6393 to double*
  store double %6399, double* %6400, align 1, !tbaa !2452
  %6401 = getelementptr inbounds i8, i8* %6393, i64 8
  %6402 = bitcast i8* %6401 to double*
  store double 0.000000e+00, double* %6402, align 1, !tbaa !2452
  %6403 = load i64, i64* %RBP
  %6404 = add i64 %6403, 64
  %6405 = load i64, i64* %PC
  %6406 = add i64 %6405, 4
  store i64 %6406, i64* %PC
  %6407 = inttoptr i64 %6404 to i64*
  %6408 = load i64, i64* %6407
  store i64 %6408, i64* %RAX, align 8, !tbaa !2428
  %6409 = load i64, i64* %RBP
  %6410 = sub i64 %6409, 100
  %6411 = load i64, i64* %PC
  %6412 = add i64 %6411, 4
  store i64 %6412, i64* %PC
  %6413 = inttoptr i64 %6410 to i32*
  %6414 = load i32, i32* %6413
  %6415 = sext i32 %6414 to i64
  store i64 %6415, i64* %RCX, align 8, !tbaa !2428
  %6416 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6417 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6418 = load i64, i64* %RAX
  %6419 = load i64, i64* %RCX
  %6420 = mul i64 %6419, 8
  %6421 = add i64 %6420, %6418
  %6422 = load i64, i64* %PC
  %6423 = add i64 %6422, 5
  store i64 %6423, i64* %PC
  %6424 = bitcast i8* %6417 to double*
  %6425 = load double, double* %6424, align 1
  %6426 = getelementptr inbounds i8, i8* %6417, i64 8
  %6427 = bitcast i8* %6426 to i64*
  %6428 = load i64, i64* %6427, align 1
  %6429 = inttoptr i64 %6421 to double*
  %6430 = load double, double* %6429
  %6431 = fmul double %6425, %6430
  %6432 = bitcast i8* %6416 to double*
  store double %6431, double* %6432, align 1, !tbaa !2452
  %6433 = getelementptr inbounds i8, i8* %6416, i64 8
  %6434 = bitcast i8* %6433 to i64*
  store i64 %6428, i64* %6434, align 1, !tbaa !2452
  %6435 = load i64, i64* %RBP
  %6436 = add i64 %6435, 80
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 4
  store i64 %6438, i64* %PC
  %6439 = inttoptr i64 %6436 to i64*
  %6440 = load i64, i64* %6439
  store i64 %6440, i64* %RAX, align 8, !tbaa !2428
  %6441 = load i64, i64* %RBP
  %6442 = sub i64 %6441, 108
  %6443 = load i64, i64* %PC
  %6444 = add i64 %6443, 4
  store i64 %6444, i64* %PC
  %6445 = inttoptr i64 %6442 to i32*
  %6446 = load i32, i32* %6445
  %6447 = sext i32 %6446 to i64
  store i64 %6447, i64* %RCX, align 8, !tbaa !2428
  %6448 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6449 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6450 = load i64, i64* %RAX
  %6451 = load i64, i64* %RCX
  %6452 = mul i64 %6451, 8
  %6453 = add i64 %6452, %6450
  %6454 = load i64, i64* %PC
  %6455 = add i64 %6454, 5
  store i64 %6455, i64* %PC
  %6456 = bitcast i8* %6449 to double*
  %6457 = load double, double* %6456, align 1
  %6458 = getelementptr inbounds i8, i8* %6449, i64 8
  %6459 = bitcast i8* %6458 to i64*
  %6460 = load i64, i64* %6459, align 1
  %6461 = inttoptr i64 %6453 to double*
  %6462 = load double, double* %6461
  %6463 = fdiv double %6457, %6462
  %6464 = bitcast i8* %6448 to double*
  store double %6463, double* %6464, align 1, !tbaa !2452
  %6465 = getelementptr inbounds i8, i8* %6448, i64 8
  %6466 = bitcast i8* %6465 to i64*
  store i64 %6460, i64* %6466, align 1, !tbaa !2452
  %6467 = load i64, i64* %RBP
  %6468 = add i64 %6467, 16
  %6469 = load i64, i64* %PC
  %6470 = add i64 %6469, 4
  store i64 %6470, i64* %PC
  %6471 = inttoptr i64 %6468 to i64*
  %6472 = load i64, i64* %6471
  store i64 %6472, i64* %RAX, align 8, !tbaa !2428
  %6473 = load i64, i64* %RBP
  %6474 = sub i64 %6473, 100
  %6475 = load i64, i64* %PC
  %6476 = add i64 %6475, 4
  store i64 %6476, i64* %PC
  %6477 = inttoptr i64 %6474 to i32*
  %6478 = load i32, i32* %6477
  %6479 = sext i32 %6478 to i64
  store i64 %6479, i64* %RCX, align 8, !tbaa !2428
  %6480 = load i64, i64* %RCX
  %6481 = load i64, i64* %PC
  %6482 = add i64 %6481, 7
  store i64 %6482, i64* %PC
  %6483 = sext i64 %6480 to i128
  %6484 = and i128 %6483, -18446744073709551616
  %6485 = zext i64 %6480 to i128
  %6486 = or i128 %6484, %6485
  %6487 = mul nsw i128 520, %6486
  %6488 = trunc i128 %6487 to i64
  store i64 %6488, i64* %RCX, align 8, !tbaa !2428
  %6489 = sext i64 %6488 to i128
  %6490 = icmp ne i128 %6489, %6487
  %6491 = zext i1 %6490 to i8
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6491, i8* %6492, align 1, !tbaa !2432
  %6493 = trunc i128 %6487 to i32
  %6494 = and i32 %6493, 255
  %6495 = call i32 @llvm.ctpop.i32(i32 %6494) #16
  %6496 = trunc i32 %6495 to i8
  %6497 = and i8 %6496, 1
  %6498 = xor i8 %6497, 1
  %6499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6498, i8* %6499, align 1, !tbaa !2446
  %6500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6500, align 1, !tbaa !2447
  %6501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6501, align 1, !tbaa !2448
  %6502 = lshr i64 %6488, 63
  %6503 = trunc i64 %6502 to i8
  %6504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6503, i8* %6504, align 1, !tbaa !2449
  %6505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6491, i8* %6505, align 1, !tbaa !2450
  %6506 = load i64, i64* %RAX
  %6507 = load i64, i64* %RCX
  %6508 = load i64, i64* %PC
  %6509 = add i64 %6508, 3
  store i64 %6509, i64* %PC
  %6510 = add i64 %6507, %6506
  store i64 %6510, i64* %RAX, align 8, !tbaa !2428
  %6511 = icmp ult i64 %6510, %6506
  %6512 = icmp ult i64 %6510, %6507
  %6513 = or i1 %6511, %6512
  %6514 = zext i1 %6513 to i8
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6514, i8* %6515, align 1, !tbaa !2432
  %6516 = trunc i64 %6510 to i32
  %6517 = and i32 %6516, 255
  %6518 = call i32 @llvm.ctpop.i32(i32 %6517) #16
  %6519 = trunc i32 %6518 to i8
  %6520 = and i8 %6519, 1
  %6521 = xor i8 %6520, 1
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6521, i8* %6522, align 1, !tbaa !2446
  %6523 = xor i64 %6507, %6506
  %6524 = xor i64 %6523, %6510
  %6525 = lshr i64 %6524, 4
  %6526 = trunc i64 %6525 to i8
  %6527 = and i8 %6526, 1
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6527, i8* %6528, align 1, !tbaa !2447
  %6529 = icmp eq i64 %6510, 0
  %6530 = zext i1 %6529 to i8
  %6531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6530, i8* %6531, align 1, !tbaa !2448
  %6532 = lshr i64 %6510, 63
  %6533 = trunc i64 %6532 to i8
  %6534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6533, i8* %6534, align 1, !tbaa !2449
  %6535 = lshr i64 %6506, 63
  %6536 = lshr i64 %6507, 63
  %6537 = xor i64 %6532, %6535
  %6538 = xor i64 %6532, %6536
  %6539 = add nuw nsw i64 %6537, %6538
  %6540 = icmp eq i64 %6539, 2
  %6541 = zext i1 %6540 to i8
  %6542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6541, i8* %6542, align 1, !tbaa !2450
  %6543 = load i64, i64* %RBP
  %6544 = sub i64 %6543, 104
  %6545 = load i64, i64* %PC
  %6546 = add i64 %6545, 4
  store i64 %6546, i64* %PC
  %6547 = inttoptr i64 %6544 to i32*
  %6548 = load i32, i32* %6547
  %6549 = sext i32 %6548 to i64
  store i64 %6549, i64* %RCX, align 8, !tbaa !2428
  %6550 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6551 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6552 = load i64, i64* %RAX
  %6553 = load i64, i64* %RCX
  %6554 = mul i64 %6553, 8
  %6555 = add i64 %6554, %6552
  %6556 = load i64, i64* %PC
  %6557 = add i64 %6556, 5
  store i64 %6557, i64* %PC
  %6558 = bitcast i8* %6551 to double*
  %6559 = load double, double* %6558, align 1
  %6560 = getelementptr inbounds i8, i8* %6551, i64 8
  %6561 = bitcast i8* %6560 to i64*
  %6562 = load i64, i64* %6561, align 1
  %6563 = inttoptr i64 %6555 to double*
  %6564 = load double, double* %6563
  %6565 = fmul double %6559, %6564
  %6566 = bitcast i8* %6550 to double*
  store double %6565, double* %6566, align 1, !tbaa !2452
  %6567 = getelementptr inbounds i8, i8* %6550, i64 8
  %6568 = bitcast i8* %6567 to i64*
  store i64 %6562, i64* %6568, align 1, !tbaa !2452
  %6569 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6571 = bitcast %union.vec128_t* %XMM1 to i8*
  %6572 = load i64, i64* %PC
  %6573 = add i64 %6572, 4
  store i64 %6573, i64* %PC
  %6574 = bitcast i8* %6570 to double*
  %6575 = load double, double* %6574, align 1
  %6576 = getelementptr inbounds i8, i8* %6570, i64 8
  %6577 = bitcast i8* %6576 to i64*
  %6578 = load i64, i64* %6577, align 1
  %6579 = bitcast i8* %6571 to double*
  %6580 = load double, double* %6579, align 1
  %6581 = fadd double %6575, %6580
  %6582 = bitcast i8* %6569 to double*
  store double %6581, double* %6582, align 1, !tbaa !2452
  %6583 = getelementptr inbounds i8, i8* %6569, i64 8
  %6584 = bitcast i8* %6583 to i64*
  store i64 %6578, i64* %6584, align 1, !tbaa !2452
  %6585 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6586 = load i64, i64* %RBP
  %6587 = sub i64 %6586, 64
  %6588 = load i64, i64* %PC
  %6589 = add i64 %6588, 5
  store i64 %6589, i64* %PC
  %6590 = inttoptr i64 %6587 to double*
  %6591 = load double, double* %6590
  %6592 = bitcast i8* %6585 to double*
  store double %6591, double* %6592, align 1, !tbaa !2452
  %6593 = getelementptr inbounds i8, i8* %6585, i64 8
  %6594 = bitcast i8* %6593 to double*
  store double 0.000000e+00, double* %6594, align 1, !tbaa !2452
  %6595 = load i64, i64* %RBP
  %6596 = add i64 %6595, 56
  %6597 = load i64, i64* %PC
  %6598 = add i64 %6597, 4
  store i64 %6598, i64* %PC
  %6599 = inttoptr i64 %6596 to i64*
  %6600 = load i64, i64* %6599
  store i64 %6600, i64* %RAX, align 8, !tbaa !2428
  %6601 = load i64, i64* %RBP
  %6602 = sub i64 %6601, 100
  %6603 = load i64, i64* %PC
  %6604 = add i64 %6603, 4
  store i64 %6604, i64* %PC
  %6605 = inttoptr i64 %6602 to i32*
  %6606 = load i32, i32* %6605
  %6607 = sext i32 %6606 to i64
  store i64 %6607, i64* %RCX, align 8, !tbaa !2428
  %6608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6609 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6610 = load i64, i64* %RAX
  %6611 = load i64, i64* %RCX
  %6612 = mul i64 %6611, 8
  %6613 = add i64 %6612, %6610
  %6614 = load i64, i64* %PC
  %6615 = add i64 %6614, 5
  store i64 %6615, i64* %PC
  %6616 = bitcast i8* %6609 to double*
  %6617 = load double, double* %6616, align 1
  %6618 = getelementptr inbounds i8, i8* %6609, i64 8
  %6619 = bitcast i8* %6618 to i64*
  %6620 = load i64, i64* %6619, align 1
  %6621 = inttoptr i64 %6613 to double*
  %6622 = load double, double* %6621
  %6623 = fmul double %6617, %6622
  %6624 = bitcast i8* %6608 to double*
  store double %6623, double* %6624, align 1, !tbaa !2452
  %6625 = getelementptr inbounds i8, i8* %6608, i64 8
  %6626 = bitcast i8* %6625 to i64*
  store i64 %6620, i64* %6626, align 1, !tbaa !2452
  %6627 = load i64, i64* %RBP
  %6628 = add i64 %6627, 80
  %6629 = load i64, i64* %PC
  %6630 = add i64 %6629, 4
  store i64 %6630, i64* %PC
  %6631 = inttoptr i64 %6628 to i64*
  %6632 = load i64, i64* %6631
  store i64 %6632, i64* %RAX, align 8, !tbaa !2428
  %6633 = load i64, i64* %RBP
  %6634 = sub i64 %6633, 108
  %6635 = load i64, i64* %PC
  %6636 = add i64 %6635, 4
  store i64 %6636, i64* %PC
  %6637 = inttoptr i64 %6634 to i32*
  %6638 = load i32, i32* %6637
  %6639 = sext i32 %6638 to i64
  store i64 %6639, i64* %RCX, align 8, !tbaa !2428
  %6640 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6641 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6642 = load i64, i64* %RAX
  %6643 = load i64, i64* %RCX
  %6644 = mul i64 %6643, 8
  %6645 = add i64 %6644, %6642
  %6646 = load i64, i64* %PC
  %6647 = add i64 %6646, 5
  store i64 %6647, i64* %PC
  %6648 = bitcast i8* %6641 to double*
  %6649 = load double, double* %6648, align 1
  %6650 = getelementptr inbounds i8, i8* %6641, i64 8
  %6651 = bitcast i8* %6650 to i64*
  %6652 = load i64, i64* %6651, align 1
  %6653 = inttoptr i64 %6645 to double*
  %6654 = load double, double* %6653
  %6655 = fdiv double %6649, %6654
  %6656 = bitcast i8* %6640 to double*
  store double %6655, double* %6656, align 1, !tbaa !2452
  %6657 = getelementptr inbounds i8, i8* %6640, i64 8
  %6658 = bitcast i8* %6657 to i64*
  store i64 %6652, i64* %6658, align 1, !tbaa !2452
  %6659 = load i64, i64* %RBP
  %6660 = add i64 %6659, 24
  %6661 = load i64, i64* %PC
  %6662 = add i64 %6661, 4
  store i64 %6662, i64* %PC
  %6663 = inttoptr i64 %6660 to i64*
  %6664 = load i64, i64* %6663
  store i64 %6664, i64* %RAX, align 8, !tbaa !2428
  %6665 = load i64, i64* %RBP
  %6666 = sub i64 %6665, 100
  %6667 = load i64, i64* %PC
  %6668 = add i64 %6667, 4
  store i64 %6668, i64* %PC
  %6669 = inttoptr i64 %6666 to i32*
  %6670 = load i32, i32* %6669
  %6671 = sext i32 %6670 to i64
  store i64 %6671, i64* %RCX, align 8, !tbaa !2428
  %6672 = load i64, i64* %RCX
  %6673 = load i64, i64* %PC
  %6674 = add i64 %6673, 7
  store i64 %6674, i64* %PC
  %6675 = sext i64 %6672 to i128
  %6676 = and i128 %6675, -18446744073709551616
  %6677 = zext i64 %6672 to i128
  %6678 = or i128 %6676, %6677
  %6679 = mul nsw i128 33800, %6678
  %6680 = trunc i128 %6679 to i64
  store i64 %6680, i64* %RCX, align 8, !tbaa !2428
  %6681 = sext i64 %6680 to i128
  %6682 = icmp ne i128 %6681, %6679
  %6683 = zext i1 %6682 to i8
  %6684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6683, i8* %6684, align 1, !tbaa !2432
  %6685 = trunc i128 %6679 to i32
  %6686 = and i32 %6685, 255
  %6687 = call i32 @llvm.ctpop.i32(i32 %6686) #16
  %6688 = trunc i32 %6687 to i8
  %6689 = and i8 %6688, 1
  %6690 = xor i8 %6689, 1
  %6691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6690, i8* %6691, align 1, !tbaa !2446
  %6692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6692, align 1, !tbaa !2447
  %6693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6693, align 1, !tbaa !2448
  %6694 = lshr i64 %6680, 63
  %6695 = trunc i64 %6694 to i8
  %6696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6695, i8* %6696, align 1, !tbaa !2449
  %6697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6683, i8* %6697, align 1, !tbaa !2450
  %6698 = load i64, i64* %RAX
  %6699 = load i64, i64* %RCX
  %6700 = load i64, i64* %PC
  %6701 = add i64 %6700, 3
  store i64 %6701, i64* %PC
  %6702 = add i64 %6699, %6698
  store i64 %6702, i64* %RAX, align 8, !tbaa !2428
  %6703 = icmp ult i64 %6702, %6698
  %6704 = icmp ult i64 %6702, %6699
  %6705 = or i1 %6703, %6704
  %6706 = zext i1 %6705 to i8
  %6707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6706, i8* %6707, align 1, !tbaa !2432
  %6708 = trunc i64 %6702 to i32
  %6709 = and i32 %6708, 255
  %6710 = call i32 @llvm.ctpop.i32(i32 %6709) #16
  %6711 = trunc i32 %6710 to i8
  %6712 = and i8 %6711, 1
  %6713 = xor i8 %6712, 1
  %6714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6713, i8* %6714, align 1, !tbaa !2446
  %6715 = xor i64 %6699, %6698
  %6716 = xor i64 %6715, %6702
  %6717 = lshr i64 %6716, 4
  %6718 = trunc i64 %6717 to i8
  %6719 = and i8 %6718, 1
  %6720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6719, i8* %6720, align 1, !tbaa !2447
  %6721 = icmp eq i64 %6702, 0
  %6722 = zext i1 %6721 to i8
  %6723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6722, i8* %6723, align 1, !tbaa !2448
  %6724 = lshr i64 %6702, 63
  %6725 = trunc i64 %6724 to i8
  %6726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6725, i8* %6726, align 1, !tbaa !2449
  %6727 = lshr i64 %6698, 63
  %6728 = lshr i64 %6699, 63
  %6729 = xor i64 %6724, %6727
  %6730 = xor i64 %6724, %6728
  %6731 = add nuw nsw i64 %6729, %6730
  %6732 = icmp eq i64 %6731, 2
  %6733 = zext i1 %6732 to i8
  %6734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6733, i8* %6734, align 1, !tbaa !2450
  %6735 = load i64, i64* %RBP
  %6736 = sub i64 %6735, 52
  %6737 = load i64, i64* %PC
  %6738 = add i64 %6737, 4
  store i64 %6738, i64* %PC
  %6739 = inttoptr i64 %6736 to i32*
  %6740 = load i32, i32* %6739
  %6741 = sext i32 %6740 to i64
  store i64 %6741, i64* %RCX, align 8, !tbaa !2428
  %6742 = load i64, i64* %RCX
  %6743 = load i64, i64* %PC
  %6744 = add i64 %6743, 7
  store i64 %6744, i64* %PC
  %6745 = sext i64 %6742 to i128
  %6746 = and i128 %6745, -18446744073709551616
  %6747 = zext i64 %6742 to i128
  %6748 = or i128 %6746, %6747
  %6749 = mul nsw i128 520, %6748
  %6750 = trunc i128 %6749 to i64
  store i64 %6750, i64* %RCX, align 8, !tbaa !2428
  %6751 = sext i64 %6750 to i128
  %6752 = icmp ne i128 %6751, %6749
  %6753 = zext i1 %6752 to i8
  %6754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6753, i8* %6754, align 1, !tbaa !2432
  %6755 = trunc i128 %6749 to i32
  %6756 = and i32 %6755, 255
  %6757 = call i32 @llvm.ctpop.i32(i32 %6756) #16
  %6758 = trunc i32 %6757 to i8
  %6759 = and i8 %6758, 1
  %6760 = xor i8 %6759, 1
  %6761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6760, i8* %6761, align 1, !tbaa !2446
  %6762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6762, align 1, !tbaa !2447
  %6763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6763, align 1, !tbaa !2448
  %6764 = lshr i64 %6750, 63
  %6765 = trunc i64 %6764 to i8
  %6766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6765, i8* %6766, align 1, !tbaa !2449
  %6767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6753, i8* %6767, align 1, !tbaa !2450
  %6768 = load i64, i64* %RAX
  %6769 = load i64, i64* %RCX
  %6770 = load i64, i64* %PC
  %6771 = add i64 %6770, 3
  store i64 %6771, i64* %PC
  %6772 = add i64 %6769, %6768
  store i64 %6772, i64* %RAX, align 8, !tbaa !2428
  %6773 = icmp ult i64 %6772, %6768
  %6774 = icmp ult i64 %6772, %6769
  %6775 = or i1 %6773, %6774
  %6776 = zext i1 %6775 to i8
  %6777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6776, i8* %6777, align 1, !tbaa !2432
  %6778 = trunc i64 %6772 to i32
  %6779 = and i32 %6778, 255
  %6780 = call i32 @llvm.ctpop.i32(i32 %6779) #16
  %6781 = trunc i32 %6780 to i8
  %6782 = and i8 %6781, 1
  %6783 = xor i8 %6782, 1
  %6784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6783, i8* %6784, align 1, !tbaa !2446
  %6785 = xor i64 %6769, %6768
  %6786 = xor i64 %6785, %6772
  %6787 = lshr i64 %6786, 4
  %6788 = trunc i64 %6787 to i8
  %6789 = and i8 %6788, 1
  %6790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6789, i8* %6790, align 1, !tbaa !2447
  %6791 = icmp eq i64 %6772, 0
  %6792 = zext i1 %6791 to i8
  %6793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6792, i8* %6793, align 1, !tbaa !2448
  %6794 = lshr i64 %6772, 63
  %6795 = trunc i64 %6794 to i8
  %6796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6795, i8* %6796, align 1, !tbaa !2449
  %6797 = lshr i64 %6768, 63
  %6798 = lshr i64 %6769, 63
  %6799 = xor i64 %6794, %6797
  %6800 = xor i64 %6794, %6798
  %6801 = add nuw nsw i64 %6799, %6800
  %6802 = icmp eq i64 %6801, 2
  %6803 = zext i1 %6802 to i8
  %6804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6803, i8* %6804, align 1, !tbaa !2450
  %6805 = load i64, i64* %RBP
  %6806 = sub i64 %6805, 108
  %6807 = load i64, i64* %PC
  %6808 = add i64 %6807, 4
  store i64 %6808, i64* %PC
  %6809 = inttoptr i64 %6806 to i32*
  %6810 = load i32, i32* %6809
  %6811 = sext i32 %6810 to i64
  store i64 %6811, i64* %RCX, align 8, !tbaa !2428
  %6812 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6813 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6814 = load i64, i64* %RAX
  %6815 = load i64, i64* %RCX
  %6816 = mul i64 %6815, 8
  %6817 = add i64 %6816, %6814
  %6818 = load i64, i64* %PC
  %6819 = add i64 %6818, 5
  store i64 %6819, i64* %PC
  %6820 = bitcast i8* %6813 to double*
  %6821 = load double, double* %6820, align 1
  %6822 = getelementptr inbounds i8, i8* %6813, i64 8
  %6823 = bitcast i8* %6822 to i64*
  %6824 = load i64, i64* %6823, align 1
  %6825 = inttoptr i64 %6817 to double*
  %6826 = load double, double* %6825
  %6827 = fmul double %6821, %6826
  %6828 = bitcast i8* %6812 to double*
  store double %6827, double* %6828, align 1, !tbaa !2452
  %6829 = getelementptr inbounds i8, i8* %6812, i64 8
  %6830 = bitcast i8* %6829 to i64*
  store i64 %6824, i64* %6830, align 1, !tbaa !2452
  %6831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6833 = bitcast %union.vec128_t* %XMM1 to i8*
  %6834 = load i64, i64* %PC
  %6835 = add i64 %6834, 4
  store i64 %6835, i64* %PC
  %6836 = bitcast i8* %6832 to double*
  %6837 = load double, double* %6836, align 1
  %6838 = getelementptr inbounds i8, i8* %6832, i64 8
  %6839 = bitcast i8* %6838 to i64*
  %6840 = load i64, i64* %6839, align 1
  %6841 = bitcast i8* %6833 to double*
  %6842 = load double, double* %6841, align 1
  %6843 = fsub double %6837, %6842
  %6844 = bitcast i8* %6831 to double*
  store double %6843, double* %6844, align 1, !tbaa !2452
  %6845 = getelementptr inbounds i8, i8* %6831, i64 8
  %6846 = bitcast i8* %6845 to i64*
  store i64 %6840, i64* %6846, align 1, !tbaa !2452
  %6847 = load i64, i64* %RBP
  %6848 = add i64 %6847, 48
  %6849 = load i64, i64* %PC
  %6850 = add i64 %6849, 4
  store i64 %6850, i64* %PC
  %6851 = inttoptr i64 %6848 to i64*
  %6852 = load i64, i64* %6851
  store i64 %6852, i64* %RAX, align 8, !tbaa !2428
  %6853 = load i64, i64* %RBP
  %6854 = sub i64 %6853, 100
  %6855 = load i64, i64* %PC
  %6856 = add i64 %6855, 4
  store i64 %6856, i64* %PC
  %6857 = inttoptr i64 %6854 to i32*
  %6858 = load i32, i32* %6857
  %6859 = sext i32 %6858 to i64
  store i64 %6859, i64* %RCX, align 8, !tbaa !2428
  %6860 = load i64, i64* %RCX
  %6861 = load i64, i64* %PC
  %6862 = add i64 %6861, 7
  store i64 %6862, i64* %PC
  %6863 = sext i64 %6860 to i128
  %6864 = and i128 %6863, -18446744073709551616
  %6865 = zext i64 %6860 to i128
  %6866 = or i128 %6864, %6865
  %6867 = mul nsw i128 33800, %6866
  %6868 = trunc i128 %6867 to i64
  store i64 %6868, i64* %RCX, align 8, !tbaa !2428
  %6869 = sext i64 %6868 to i128
  %6870 = icmp ne i128 %6869, %6867
  %6871 = zext i1 %6870 to i8
  %6872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6871, i8* %6872, align 1, !tbaa !2432
  %6873 = trunc i128 %6867 to i32
  %6874 = and i32 %6873, 255
  %6875 = call i32 @llvm.ctpop.i32(i32 %6874) #16
  %6876 = trunc i32 %6875 to i8
  %6877 = and i8 %6876, 1
  %6878 = xor i8 %6877, 1
  %6879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6878, i8* %6879, align 1, !tbaa !2446
  %6880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6880, align 1, !tbaa !2447
  %6881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6881, align 1, !tbaa !2448
  %6882 = lshr i64 %6868, 63
  %6883 = trunc i64 %6882 to i8
  %6884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6883, i8* %6884, align 1, !tbaa !2449
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6871, i8* %6885, align 1, !tbaa !2450
  %6886 = load i64, i64* %RAX
  %6887 = load i64, i64* %RCX
  %6888 = load i64, i64* %PC
  %6889 = add i64 %6888, 3
  store i64 %6889, i64* %PC
  %6890 = add i64 %6887, %6886
  store i64 %6890, i64* %RAX, align 8, !tbaa !2428
  %6891 = icmp ult i64 %6890, %6886
  %6892 = icmp ult i64 %6890, %6887
  %6893 = or i1 %6891, %6892
  %6894 = zext i1 %6893 to i8
  %6895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6894, i8* %6895, align 1, !tbaa !2432
  %6896 = trunc i64 %6890 to i32
  %6897 = and i32 %6896, 255
  %6898 = call i32 @llvm.ctpop.i32(i32 %6897) #16
  %6899 = trunc i32 %6898 to i8
  %6900 = and i8 %6899, 1
  %6901 = xor i8 %6900, 1
  %6902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6901, i8* %6902, align 1, !tbaa !2446
  %6903 = xor i64 %6887, %6886
  %6904 = xor i64 %6903, %6890
  %6905 = lshr i64 %6904, 4
  %6906 = trunc i64 %6905 to i8
  %6907 = and i8 %6906, 1
  %6908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6907, i8* %6908, align 1, !tbaa !2447
  %6909 = icmp eq i64 %6890, 0
  %6910 = zext i1 %6909 to i8
  %6911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6910, i8* %6911, align 1, !tbaa !2448
  %6912 = lshr i64 %6890, 63
  %6913 = trunc i64 %6912 to i8
  %6914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6913, i8* %6914, align 1, !tbaa !2449
  %6915 = lshr i64 %6886, 63
  %6916 = lshr i64 %6887, 63
  %6917 = xor i64 %6912, %6915
  %6918 = xor i64 %6912, %6916
  %6919 = add nuw nsw i64 %6917, %6918
  %6920 = icmp eq i64 %6919, 2
  %6921 = zext i1 %6920 to i8
  %6922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6921, i8* %6922, align 1, !tbaa !2450
  %6923 = load i64, i64* %RBP
  %6924 = sub i64 %6923, 52
  %6925 = load i64, i64* %PC
  %6926 = add i64 %6925, 4
  store i64 %6926, i64* %PC
  %6927 = inttoptr i64 %6924 to i32*
  %6928 = load i32, i32* %6927
  %6929 = sext i32 %6928 to i64
  store i64 %6929, i64* %RCX, align 8, !tbaa !2428
  %6930 = load i64, i64* %RCX
  %6931 = load i64, i64* %PC
  %6932 = add i64 %6931, 7
  store i64 %6932, i64* %PC
  %6933 = sext i64 %6930 to i128
  %6934 = and i128 %6933, -18446744073709551616
  %6935 = zext i64 %6930 to i128
  %6936 = or i128 %6934, %6935
  %6937 = mul nsw i128 520, %6936
  %6938 = trunc i128 %6937 to i64
  store i64 %6938, i64* %RCX, align 8, !tbaa !2428
  %6939 = sext i64 %6938 to i128
  %6940 = icmp ne i128 %6939, %6937
  %6941 = zext i1 %6940 to i8
  %6942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6941, i8* %6942, align 1, !tbaa !2432
  %6943 = trunc i128 %6937 to i32
  %6944 = and i32 %6943, 255
  %6945 = call i32 @llvm.ctpop.i32(i32 %6944) #16
  %6946 = trunc i32 %6945 to i8
  %6947 = and i8 %6946, 1
  %6948 = xor i8 %6947, 1
  %6949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6948, i8* %6949, align 1, !tbaa !2446
  %6950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6950, align 1, !tbaa !2447
  %6951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6951, align 1, !tbaa !2448
  %6952 = lshr i64 %6938, 63
  %6953 = trunc i64 %6952 to i8
  %6954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6953, i8* %6954, align 1, !tbaa !2449
  %6955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6941, i8* %6955, align 1, !tbaa !2450
  %6956 = load i64, i64* %RAX
  %6957 = load i64, i64* %RCX
  %6958 = load i64, i64* %PC
  %6959 = add i64 %6958, 3
  store i64 %6959, i64* %PC
  %6960 = add i64 %6957, %6956
  store i64 %6960, i64* %RAX, align 8, !tbaa !2428
  %6961 = icmp ult i64 %6960, %6956
  %6962 = icmp ult i64 %6960, %6957
  %6963 = or i1 %6961, %6962
  %6964 = zext i1 %6963 to i8
  %6965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6964, i8* %6965, align 1, !tbaa !2432
  %6966 = trunc i64 %6960 to i32
  %6967 = and i32 %6966, 255
  %6968 = call i32 @llvm.ctpop.i32(i32 %6967) #16
  %6969 = trunc i32 %6968 to i8
  %6970 = and i8 %6969, 1
  %6971 = xor i8 %6970, 1
  %6972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6971, i8* %6972, align 1, !tbaa !2446
  %6973 = xor i64 %6957, %6956
  %6974 = xor i64 %6973, %6960
  %6975 = lshr i64 %6974, 4
  %6976 = trunc i64 %6975 to i8
  %6977 = and i8 %6976, 1
  %6978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6977, i8* %6978, align 1, !tbaa !2447
  %6979 = icmp eq i64 %6960, 0
  %6980 = zext i1 %6979 to i8
  %6981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6980, i8* %6981, align 1, !tbaa !2448
  %6982 = lshr i64 %6960, 63
  %6983 = trunc i64 %6982 to i8
  %6984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6983, i8* %6984, align 1, !tbaa !2449
  %6985 = lshr i64 %6956, 63
  %6986 = lshr i64 %6957, 63
  %6987 = xor i64 %6982, %6985
  %6988 = xor i64 %6982, %6986
  %6989 = add nuw nsw i64 %6987, %6988
  %6990 = icmp eq i64 %6989, 2
  %6991 = zext i1 %6990 to i8
  %6992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6991, i8* %6992, align 1, !tbaa !2450
  %6993 = load i64, i64* %RBP
  %6994 = sub i64 %6993, 108
  %6995 = load i64, i64* %PC
  %6996 = add i64 %6995, 4
  store i64 %6996, i64* %PC
  %6997 = inttoptr i64 %6994 to i32*
  %6998 = load i32, i32* %6997
  %6999 = sext i32 %6998 to i64
  store i64 %6999, i64* %RCX, align 8, !tbaa !2428
  %7000 = load i64, i64* %RAX
  %7001 = load i64, i64* %RCX
  %7002 = mul i64 %7001, 8
  %7003 = add i64 %7002, %7000
  %7004 = bitcast %union.vec128_t* %XMM0 to i8*
  %7005 = load i64, i64* %PC
  %7006 = add i64 %7005, 5
  store i64 %7006, i64* %PC
  %7007 = bitcast i8* %7004 to double*
  %7008 = load double, double* %7007, align 1
  %7009 = inttoptr i64 %7003 to double*
  store double %7008, double* %7009
  %7010 = load i64, i64* %RBP
  %7011 = add i64 %7010, 16
  %7012 = load i64, i64* %PC
  %7013 = add i64 %7012, 4
  store i64 %7013, i64* %PC
  %7014 = inttoptr i64 %7011 to i64*
  %7015 = load i64, i64* %7014
  store i64 %7015, i64* %RAX, align 8, !tbaa !2428
  %7016 = load i64, i64* %RBP
  %7017 = sub i64 %7016, 100
  %7018 = load i64, i64* %PC
  %7019 = add i64 %7018, 4
  store i64 %7019, i64* %PC
  %7020 = inttoptr i64 %7017 to i32*
  %7021 = load i32, i32* %7020
  %7022 = sext i32 %7021 to i64
  store i64 %7022, i64* %RCX, align 8, !tbaa !2428
  %7023 = load i64, i64* %RCX
  %7024 = load i64, i64* %PC
  %7025 = add i64 %7024, 7
  store i64 %7025, i64* %PC
  %7026 = sext i64 %7023 to i128
  %7027 = and i128 %7026, -18446744073709551616
  %7028 = zext i64 %7023 to i128
  %7029 = or i128 %7027, %7028
  %7030 = mul nsw i128 520, %7029
  %7031 = trunc i128 %7030 to i64
  store i64 %7031, i64* %RCX, align 8, !tbaa !2428
  %7032 = sext i64 %7031 to i128
  %7033 = icmp ne i128 %7032, %7030
  %7034 = zext i1 %7033 to i8
  %7035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7034, i8* %7035, align 1, !tbaa !2432
  %7036 = trunc i128 %7030 to i32
  %7037 = and i32 %7036, 255
  %7038 = call i32 @llvm.ctpop.i32(i32 %7037) #16
  %7039 = trunc i32 %7038 to i8
  %7040 = and i8 %7039, 1
  %7041 = xor i8 %7040, 1
  %7042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7041, i8* %7042, align 1, !tbaa !2446
  %7043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7043, align 1, !tbaa !2447
  %7044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7044, align 1, !tbaa !2448
  %7045 = lshr i64 %7031, 63
  %7046 = trunc i64 %7045 to i8
  %7047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7046, i8* %7047, align 1, !tbaa !2449
  %7048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7034, i8* %7048, align 1, !tbaa !2450
  %7049 = load i64, i64* %RAX
  %7050 = load i64, i64* %RCX
  %7051 = load i64, i64* %PC
  %7052 = add i64 %7051, 3
  store i64 %7052, i64* %PC
  %7053 = add i64 %7050, %7049
  store i64 %7053, i64* %RAX, align 8, !tbaa !2428
  %7054 = icmp ult i64 %7053, %7049
  %7055 = icmp ult i64 %7053, %7050
  %7056 = or i1 %7054, %7055
  %7057 = zext i1 %7056 to i8
  %7058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7057, i8* %7058, align 1, !tbaa !2432
  %7059 = trunc i64 %7053 to i32
  %7060 = and i32 %7059, 255
  %7061 = call i32 @llvm.ctpop.i32(i32 %7060) #16
  %7062 = trunc i32 %7061 to i8
  %7063 = and i8 %7062, 1
  %7064 = xor i8 %7063, 1
  %7065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7064, i8* %7065, align 1, !tbaa !2446
  %7066 = xor i64 %7050, %7049
  %7067 = xor i64 %7066, %7053
  %7068 = lshr i64 %7067, 4
  %7069 = trunc i64 %7068 to i8
  %7070 = and i8 %7069, 1
  %7071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7070, i8* %7071, align 1, !tbaa !2447
  %7072 = icmp eq i64 %7053, 0
  %7073 = zext i1 %7072 to i8
  %7074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7073, i8* %7074, align 1, !tbaa !2448
  %7075 = lshr i64 %7053, 63
  %7076 = trunc i64 %7075 to i8
  %7077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7076, i8* %7077, align 1, !tbaa !2449
  %7078 = lshr i64 %7049, 63
  %7079 = lshr i64 %7050, 63
  %7080 = xor i64 %7075, %7078
  %7081 = xor i64 %7075, %7079
  %7082 = add nuw nsw i64 %7080, %7081
  %7083 = icmp eq i64 %7082, 2
  %7084 = zext i1 %7083 to i8
  %7085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7084, i8* %7085, align 1, !tbaa !2450
  %7086 = load i64, i64* %RBP
  %7087 = sub i64 %7086, 104
  %7088 = load i64, i64* %PC
  %7089 = add i64 %7088, 4
  store i64 %7089, i64* %PC
  %7090 = inttoptr i64 %7087 to i32*
  %7091 = load i32, i32* %7090
  %7092 = sext i32 %7091 to i64
  store i64 %7092, i64* %RCX, align 8, !tbaa !2428
  %7093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7094 = load i64, i64* %RAX
  %7095 = load i64, i64* %RCX
  %7096 = mul i64 %7095, 8
  %7097 = add i64 %7096, %7094
  %7098 = load i64, i64* %PC
  %7099 = add i64 %7098, 5
  store i64 %7099, i64* %PC
  %7100 = inttoptr i64 %7097 to double*
  %7101 = load double, double* %7100
  %7102 = bitcast i8* %7093 to double*
  store double %7101, double* %7102, align 1, !tbaa !2452
  %7103 = getelementptr inbounds i8, i8* %7093, i64 8
  %7104 = bitcast i8* %7103 to double*
  store double 0.000000e+00, double* %7104, align 1, !tbaa !2452
  %7105 = load i64, i64* %RBP
  %7106 = add i64 %7105, 24
  %7107 = load i64, i64* %PC
  %7108 = add i64 %7107, 4
  store i64 %7108, i64* %PC
  %7109 = inttoptr i64 %7106 to i64*
  %7110 = load i64, i64* %7109
  store i64 %7110, i64* %RAX, align 8, !tbaa !2428
  %7111 = load i64, i64* %RBP
  %7112 = sub i64 %7111, 100
  %7113 = load i64, i64* %PC
  %7114 = add i64 %7113, 4
  store i64 %7114, i64* %PC
  %7115 = inttoptr i64 %7112 to i32*
  %7116 = load i32, i32* %7115
  %7117 = sext i32 %7116 to i64
  store i64 %7117, i64* %RCX, align 8, !tbaa !2428
  %7118 = load i64, i64* %RCX
  %7119 = load i64, i64* %PC
  %7120 = add i64 %7119, 7
  store i64 %7120, i64* %PC
  %7121 = sext i64 %7118 to i128
  %7122 = and i128 %7121, -18446744073709551616
  %7123 = zext i64 %7118 to i128
  %7124 = or i128 %7122, %7123
  %7125 = mul nsw i128 33800, %7124
  %7126 = trunc i128 %7125 to i64
  store i64 %7126, i64* %RCX, align 8, !tbaa !2428
  %7127 = sext i64 %7126 to i128
  %7128 = icmp ne i128 %7127, %7125
  %7129 = zext i1 %7128 to i8
  %7130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7129, i8* %7130, align 1, !tbaa !2432
  %7131 = trunc i128 %7125 to i32
  %7132 = and i32 %7131, 255
  %7133 = call i32 @llvm.ctpop.i32(i32 %7132) #16
  %7134 = trunc i32 %7133 to i8
  %7135 = and i8 %7134, 1
  %7136 = xor i8 %7135, 1
  %7137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7136, i8* %7137, align 1, !tbaa !2446
  %7138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7138, align 1, !tbaa !2447
  %7139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7139, align 1, !tbaa !2448
  %7140 = lshr i64 %7126, 63
  %7141 = trunc i64 %7140 to i8
  %7142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7141, i8* %7142, align 1, !tbaa !2449
  %7143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7129, i8* %7143, align 1, !tbaa !2450
  %7144 = load i64, i64* %RAX
  %7145 = load i64, i64* %RCX
  %7146 = load i64, i64* %PC
  %7147 = add i64 %7146, 3
  store i64 %7147, i64* %PC
  %7148 = add i64 %7145, %7144
  store i64 %7148, i64* %RAX, align 8, !tbaa !2428
  %7149 = icmp ult i64 %7148, %7144
  %7150 = icmp ult i64 %7148, %7145
  %7151 = or i1 %7149, %7150
  %7152 = zext i1 %7151 to i8
  %7153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7152, i8* %7153, align 1, !tbaa !2432
  %7154 = trunc i64 %7148 to i32
  %7155 = and i32 %7154, 255
  %7156 = call i32 @llvm.ctpop.i32(i32 %7155) #16
  %7157 = trunc i32 %7156 to i8
  %7158 = and i8 %7157, 1
  %7159 = xor i8 %7158, 1
  %7160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7159, i8* %7160, align 1, !tbaa !2446
  %7161 = xor i64 %7145, %7144
  %7162 = xor i64 %7161, %7148
  %7163 = lshr i64 %7162, 4
  %7164 = trunc i64 %7163 to i8
  %7165 = and i8 %7164, 1
  %7166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7165, i8* %7166, align 1, !tbaa !2447
  %7167 = icmp eq i64 %7148, 0
  %7168 = zext i1 %7167 to i8
  %7169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7168, i8* %7169, align 1, !tbaa !2448
  %7170 = lshr i64 %7148, 63
  %7171 = trunc i64 %7170 to i8
  %7172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7171, i8* %7172, align 1, !tbaa !2449
  %7173 = lshr i64 %7144, 63
  %7174 = lshr i64 %7145, 63
  %7175 = xor i64 %7170, %7173
  %7176 = xor i64 %7170, %7174
  %7177 = add nuw nsw i64 %7175, %7176
  %7178 = icmp eq i64 %7177, 2
  %7179 = zext i1 %7178 to i8
  %7180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7179, i8* %7180, align 1, !tbaa !2450
  %7181 = load i64, i64* %RBP
  %7182 = sub i64 %7181, 52
  %7183 = load i64, i64* %PC
  %7184 = add i64 %7183, 4
  store i64 %7184, i64* %PC
  %7185 = inttoptr i64 %7182 to i32*
  %7186 = load i32, i32* %7185
  %7187 = sext i32 %7186 to i64
  store i64 %7187, i64* %RCX, align 8, !tbaa !2428
  %7188 = load i64, i64* %RCX
  %7189 = load i64, i64* %PC
  %7190 = add i64 %7189, 7
  store i64 %7190, i64* %PC
  %7191 = sext i64 %7188 to i128
  %7192 = and i128 %7191, -18446744073709551616
  %7193 = zext i64 %7188 to i128
  %7194 = or i128 %7192, %7193
  %7195 = mul nsw i128 520, %7194
  %7196 = trunc i128 %7195 to i64
  store i64 %7196, i64* %RCX, align 8, !tbaa !2428
  %7197 = sext i64 %7196 to i128
  %7198 = icmp ne i128 %7197, %7195
  %7199 = zext i1 %7198 to i8
  %7200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7199, i8* %7200, align 1, !tbaa !2432
  %7201 = trunc i128 %7195 to i32
  %7202 = and i32 %7201, 255
  %7203 = call i32 @llvm.ctpop.i32(i32 %7202) #16
  %7204 = trunc i32 %7203 to i8
  %7205 = and i8 %7204, 1
  %7206 = xor i8 %7205, 1
  %7207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7206, i8* %7207, align 1, !tbaa !2446
  %7208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7208, align 1, !tbaa !2447
  %7209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7209, align 1, !tbaa !2448
  %7210 = lshr i64 %7196, 63
  %7211 = trunc i64 %7210 to i8
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7211, i8* %7212, align 1, !tbaa !2449
  %7213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7199, i8* %7213, align 1, !tbaa !2450
  %7214 = load i64, i64* %RAX
  %7215 = load i64, i64* %RCX
  %7216 = load i64, i64* %PC
  %7217 = add i64 %7216, 3
  store i64 %7217, i64* %PC
  %7218 = add i64 %7215, %7214
  store i64 %7218, i64* %RAX, align 8, !tbaa !2428
  %7219 = icmp ult i64 %7218, %7214
  %7220 = icmp ult i64 %7218, %7215
  %7221 = or i1 %7219, %7220
  %7222 = zext i1 %7221 to i8
  %7223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7222, i8* %7223, align 1, !tbaa !2432
  %7224 = trunc i64 %7218 to i32
  %7225 = and i32 %7224, 255
  %7226 = call i32 @llvm.ctpop.i32(i32 %7225) #16
  %7227 = trunc i32 %7226 to i8
  %7228 = and i8 %7227, 1
  %7229 = xor i8 %7228, 1
  %7230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7229, i8* %7230, align 1, !tbaa !2446
  %7231 = xor i64 %7215, %7214
  %7232 = xor i64 %7231, %7218
  %7233 = lshr i64 %7232, 4
  %7234 = trunc i64 %7233 to i8
  %7235 = and i8 %7234, 1
  %7236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7235, i8* %7236, align 1, !tbaa !2447
  %7237 = icmp eq i64 %7218, 0
  %7238 = zext i1 %7237 to i8
  %7239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7238, i8* %7239, align 1, !tbaa !2448
  %7240 = lshr i64 %7218, 63
  %7241 = trunc i64 %7240 to i8
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7241, i8* %7242, align 1, !tbaa !2449
  %7243 = lshr i64 %7214, 63
  %7244 = lshr i64 %7215, 63
  %7245 = xor i64 %7240, %7243
  %7246 = xor i64 %7240, %7244
  %7247 = add nuw nsw i64 %7245, %7246
  %7248 = icmp eq i64 %7247, 2
  %7249 = zext i1 %7248 to i8
  %7250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7249, i8* %7250, align 1, !tbaa !2450
  %7251 = load i64, i64* %RBP
  %7252 = sub i64 %7251, 108
  %7253 = load i64, i64* %PC
  %7254 = add i64 %7253, 4
  store i64 %7254, i64* %PC
  %7255 = inttoptr i64 %7252 to i32*
  %7256 = load i32, i32* %7255
  %7257 = sext i32 %7256 to i64
  store i64 %7257, i64* %RCX, align 8, !tbaa !2428
  %7258 = load i64, i64* %RAX
  %7259 = load i64, i64* %RCX
  %7260 = mul i64 %7259, 8
  %7261 = add i64 %7260, %7258
  %7262 = bitcast %union.vec128_t* %XMM0 to i8*
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 5
  store i64 %7264, i64* %PC
  %7265 = bitcast i8* %7262 to double*
  %7266 = load double, double* %7265, align 1
  %7267 = inttoptr i64 %7261 to double*
  store double %7266, double* %7267
  %7268 = load i64, i64* %RBP
  %7269 = sub i64 %7268, 108
  %7270 = load i64, i64* %PC
  %7271 = add i64 %7270, 3
  store i64 %7271, i64* %PC
  %7272 = inttoptr i64 %7269 to i32*
  %7273 = load i32, i32* %7272
  %7274 = zext i32 %7273 to i64
  store i64 %7274, i64* %RAX, align 8, !tbaa !2428
  %7275 = load i64, i64* %RAX
  %7276 = load i64, i64* %PC
  %7277 = add i64 %7276, 3
  store i64 %7277, i64* %PC
  %7278 = trunc i64 %7275 to i32
  %7279 = add i32 1, %7278
  %7280 = zext i32 %7279 to i64
  store i64 %7280, i64* %RAX, align 8, !tbaa !2428
  %7281 = icmp ult i32 %7279, %7278
  %7282 = icmp ult i32 %7279, 1
  %7283 = or i1 %7281, %7282
  %7284 = zext i1 %7283 to i8
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7284, i8* %7285, align 1, !tbaa !2432
  %7286 = and i32 %7279, 255
  %7287 = call i32 @llvm.ctpop.i32(i32 %7286) #16
  %7288 = trunc i32 %7287 to i8
  %7289 = and i8 %7288, 1
  %7290 = xor i8 %7289, 1
  %7291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7290, i8* %7291, align 1, !tbaa !2446
  %7292 = xor i64 1, %7275
  %7293 = trunc i64 %7292 to i32
  %7294 = xor i32 %7293, %7279
  %7295 = lshr i32 %7294, 4
  %7296 = trunc i32 %7295 to i8
  %7297 = and i8 %7296, 1
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7297, i8* %7298, align 1, !tbaa !2447
  %7299 = icmp eq i32 %7279, 0
  %7300 = zext i1 %7299 to i8
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7300, i8* %7301, align 1, !tbaa !2448
  %7302 = lshr i32 %7279, 31
  %7303 = trunc i32 %7302 to i8
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7303, i8* %7304, align 1, !tbaa !2449
  %7305 = lshr i32 %7278, 31
  %7306 = xor i32 %7302, %7305
  %7307 = add nuw nsw i32 %7306, %7302
  %7308 = icmp eq i32 %7307, 2
  %7309 = zext i1 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7309, i8* %7310, align 1, !tbaa !2450
  %7311 = load i64, i64* %RBP
  %7312 = sub i64 %7311, 108
  %7313 = load i32, i32* %EAX
  %7314 = zext i32 %7313 to i64
  %7315 = load i64, i64* %PC
  %7316 = add i64 %7315, 3
  store i64 %7316, i64* %PC
  %7317 = inttoptr i64 %7312 to i32*
  store i32 %7313, i32* %7317
  %7318 = load i64, i64* %PC
  %7319 = sub i64 %7318, 660
  %7320 = load i64, i64* %PC
  %7321 = add i64 %7320, 5
  store i64 %7321, i64* %PC
  %7322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7319, i64* %7322, align 8, !tbaa !2428
  br label %block_402512

block_401fec:                                     ; preds = %block_401fe0
  %7323 = sub i64 %9950, 108
  %7324 = load i64, i64* %PC
  %7325 = add i64 %7324, 4
  store i64 %7325, i64* %PC
  %7326 = inttoptr i64 %7323 to i32*
  %7327 = load i32, i32* %7326
  %7328 = sext i32 %7327 to i64
  store i64 %7328, i64* %RCX, align 8, !tbaa !2428
  %7329 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7330 = load i64, i64* %RAX
  %7331 = load i64, i64* %RCX
  %7332 = mul i64 %7331, 8
  %7333 = add i64 %7332, %7330
  %7334 = load i64, i64* %PC
  %7335 = add i64 %7334, 5
  store i64 %7335, i64* %PC
  %7336 = inttoptr i64 %7333 to double*
  %7337 = load double, double* %7336
  %7338 = bitcast i8* %7329 to double*
  store double %7337, double* %7338, align 1, !tbaa !2452
  %7339 = getelementptr inbounds i8, i8* %7329, i64 8
  %7340 = bitcast i8* %7339 to double*
  store double 0.000000e+00, double* %7340, align 1, !tbaa !2452
  %7341 = load i64, i64* %RBP
  %7342 = add i64 %7341, 32
  %7343 = load i64, i64* %PC
  %7344 = add i64 %7343, 4
  store i64 %7344, i64* %PC
  %7345 = inttoptr i64 %7342 to i64*
  %7346 = load i64, i64* %7345
  store i64 %7346, i64* %RAX, align 8, !tbaa !2428
  %7347 = load i64, i64* %RBP
  %7348 = sub i64 %7347, 100
  %7349 = load i64, i64* %PC
  %7350 = add i64 %7349, 4
  store i64 %7350, i64* %PC
  %7351 = inttoptr i64 %7348 to i32*
  %7352 = load i32, i32* %7351
  %7353 = sext i32 %7352 to i64
  store i64 %7353, i64* %RCX, align 8, !tbaa !2428
  %7354 = load i64, i64* %RCX
  %7355 = load i64, i64* %PC
  %7356 = add i64 %7355, 7
  store i64 %7356, i64* %PC
  %7357 = sext i64 %7354 to i128
  %7358 = and i128 %7357, -18446744073709551616
  %7359 = zext i64 %7354 to i128
  %7360 = or i128 %7358, %7359
  %7361 = mul nsw i128 33800, %7360
  %7362 = trunc i128 %7361 to i64
  store i64 %7362, i64* %RCX, align 8, !tbaa !2428
  %7363 = sext i64 %7362 to i128
  %7364 = icmp ne i128 %7363, %7361
  %7365 = zext i1 %7364 to i8
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7365, i8* %7366, align 1, !tbaa !2432
  %7367 = trunc i128 %7361 to i32
  %7368 = and i32 %7367, 255
  %7369 = call i32 @llvm.ctpop.i32(i32 %7368) #16
  %7370 = trunc i32 %7369 to i8
  %7371 = and i8 %7370, 1
  %7372 = xor i8 %7371, 1
  %7373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7372, i8* %7373, align 1, !tbaa !2446
  %7374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7374, align 1, !tbaa !2447
  %7375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7375, align 1, !tbaa !2448
  %7376 = lshr i64 %7362, 63
  %7377 = trunc i64 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7377, i8* %7378, align 1, !tbaa !2449
  %7379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7365, i8* %7379, align 1, !tbaa !2450
  %7380 = load i64, i64* %RAX
  %7381 = load i64, i64* %RCX
  %7382 = load i64, i64* %PC
  %7383 = add i64 %7382, 3
  store i64 %7383, i64* %PC
  %7384 = add i64 %7381, %7380
  store i64 %7384, i64* %RAX, align 8, !tbaa !2428
  %7385 = icmp ult i64 %7384, %7380
  %7386 = icmp ult i64 %7384, %7381
  %7387 = or i1 %7385, %7386
  %7388 = zext i1 %7387 to i8
  %7389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7388, i8* %7389, align 1, !tbaa !2432
  %7390 = trunc i64 %7384 to i32
  %7391 = and i32 %7390, 255
  %7392 = call i32 @llvm.ctpop.i32(i32 %7391) #16
  %7393 = trunc i32 %7392 to i8
  %7394 = and i8 %7393, 1
  %7395 = xor i8 %7394, 1
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7395, i8* %7396, align 1, !tbaa !2446
  %7397 = xor i64 %7381, %7380
  %7398 = xor i64 %7397, %7384
  %7399 = lshr i64 %7398, 4
  %7400 = trunc i64 %7399 to i8
  %7401 = and i8 %7400, 1
  %7402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7401, i8* %7402, align 1, !tbaa !2447
  %7403 = icmp eq i64 %7384, 0
  %7404 = zext i1 %7403 to i8
  %7405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7404, i8* %7405, align 1, !tbaa !2448
  %7406 = lshr i64 %7384, 63
  %7407 = trunc i64 %7406 to i8
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7407, i8* %7408, align 1, !tbaa !2449
  %7409 = lshr i64 %7380, 63
  %7410 = lshr i64 %7381, 63
  %7411 = xor i64 %7406, %7409
  %7412 = xor i64 %7406, %7410
  %7413 = add nuw nsw i64 %7411, %7412
  %7414 = icmp eq i64 %7413, 2
  %7415 = zext i1 %7414 to i8
  %7416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7415, i8* %7416, align 1, !tbaa !2450
  %7417 = load i64, i64* %RBP
  %7418 = sub i64 %7417, 104
  %7419 = load i64, i64* %PC
  %7420 = add i64 %7419, 3
  store i64 %7420, i64* %PC
  %7421 = inttoptr i64 %7418 to i32*
  %7422 = load i32, i32* %7421
  %7423 = zext i32 %7422 to i64
  store i64 %7423, i64* %RDX, align 8, !tbaa !2428
  %7424 = load i64, i64* %RDX
  %7425 = load i64, i64* %PC
  %7426 = add i64 %7425, 3
  store i64 %7426, i64* %PC
  %7427 = trunc i64 %7424 to i32
  %7428 = add i32 1, %7427
  %7429 = zext i32 %7428 to i64
  store i64 %7429, i64* %RDX, align 8, !tbaa !2428
  %7430 = icmp ult i32 %7428, %7427
  %7431 = icmp ult i32 %7428, 1
  %7432 = or i1 %7430, %7431
  %7433 = zext i1 %7432 to i8
  %7434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7433, i8* %7434, align 1, !tbaa !2432
  %7435 = and i32 %7428, 255
  %7436 = call i32 @llvm.ctpop.i32(i32 %7435) #16
  %7437 = trunc i32 %7436 to i8
  %7438 = and i8 %7437, 1
  %7439 = xor i8 %7438, 1
  %7440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7439, i8* %7440, align 1, !tbaa !2446
  %7441 = xor i64 1, %7424
  %7442 = trunc i64 %7441 to i32
  %7443 = xor i32 %7442, %7428
  %7444 = lshr i32 %7443, 4
  %7445 = trunc i32 %7444 to i8
  %7446 = and i8 %7445, 1
  %7447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7446, i8* %7447, align 1, !tbaa !2447
  %7448 = icmp eq i32 %7428, 0
  %7449 = zext i1 %7448 to i8
  %7450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7449, i8* %7450, align 1, !tbaa !2448
  %7451 = lshr i32 %7428, 31
  %7452 = trunc i32 %7451 to i8
  %7453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7452, i8* %7453, align 1, !tbaa !2449
  %7454 = lshr i32 %7427, 31
  %7455 = xor i32 %7451, %7454
  %7456 = add nuw nsw i32 %7455, %7451
  %7457 = icmp eq i32 %7456, 2
  %7458 = zext i1 %7457 to i8
  %7459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7458, i8* %7459, align 1, !tbaa !2450
  %7460 = load i32, i32* %EDX
  %7461 = zext i32 %7460 to i64
  %7462 = load i64, i64* %PC
  %7463 = add i64 %7462, 3
  store i64 %7463, i64* %PC
  %7464 = shl i64 %7461, 32
  %7465 = ashr exact i64 %7464, 32
  store i64 %7465, i64* %RCX, align 8, !tbaa !2428
  %7466 = load i64, i64* %RCX
  %7467 = load i64, i64* %PC
  %7468 = add i64 %7467, 7
  store i64 %7468, i64* %PC
  %7469 = sext i64 %7466 to i128
  %7470 = and i128 %7469, -18446744073709551616
  %7471 = zext i64 %7466 to i128
  %7472 = or i128 %7470, %7471
  %7473 = mul nsw i128 520, %7472
  %7474 = trunc i128 %7473 to i64
  store i64 %7474, i64* %RCX, align 8, !tbaa !2428
  %7475 = sext i64 %7474 to i128
  %7476 = icmp ne i128 %7475, %7473
  %7477 = zext i1 %7476 to i8
  %7478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7477, i8* %7478, align 1, !tbaa !2432
  %7479 = trunc i128 %7473 to i32
  %7480 = and i32 %7479, 255
  %7481 = call i32 @llvm.ctpop.i32(i32 %7480) #16
  %7482 = trunc i32 %7481 to i8
  %7483 = and i8 %7482, 1
  %7484 = xor i8 %7483, 1
  %7485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7484, i8* %7485, align 1, !tbaa !2446
  %7486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7486, align 1, !tbaa !2447
  %7487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7487, align 1, !tbaa !2448
  %7488 = lshr i64 %7474, 63
  %7489 = trunc i64 %7488 to i8
  %7490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7489, i8* %7490, align 1, !tbaa !2449
  %7491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7477, i8* %7491, align 1, !tbaa !2450
  %7492 = load i64, i64* %RAX
  %7493 = load i64, i64* %RCX
  %7494 = load i64, i64* %PC
  %7495 = add i64 %7494, 3
  store i64 %7495, i64* %PC
  %7496 = add i64 %7493, %7492
  store i64 %7496, i64* %RAX, align 8, !tbaa !2428
  %7497 = icmp ult i64 %7496, %7492
  %7498 = icmp ult i64 %7496, %7493
  %7499 = or i1 %7497, %7498
  %7500 = zext i1 %7499 to i8
  %7501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7500, i8* %7501, align 1, !tbaa !2432
  %7502 = trunc i64 %7496 to i32
  %7503 = and i32 %7502, 255
  %7504 = call i32 @llvm.ctpop.i32(i32 %7503) #16
  %7505 = trunc i32 %7504 to i8
  %7506 = and i8 %7505, 1
  %7507 = xor i8 %7506, 1
  %7508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7507, i8* %7508, align 1, !tbaa !2446
  %7509 = xor i64 %7493, %7492
  %7510 = xor i64 %7509, %7496
  %7511 = lshr i64 %7510, 4
  %7512 = trunc i64 %7511 to i8
  %7513 = and i8 %7512, 1
  %7514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7513, i8* %7514, align 1, !tbaa !2447
  %7515 = icmp eq i64 %7496, 0
  %7516 = zext i1 %7515 to i8
  %7517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7516, i8* %7517, align 1, !tbaa !2448
  %7518 = lshr i64 %7496, 63
  %7519 = trunc i64 %7518 to i8
  %7520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7519, i8* %7520, align 1, !tbaa !2449
  %7521 = lshr i64 %7492, 63
  %7522 = lshr i64 %7493, 63
  %7523 = xor i64 %7518, %7521
  %7524 = xor i64 %7518, %7522
  %7525 = add nuw nsw i64 %7523, %7524
  %7526 = icmp eq i64 %7525, 2
  %7527 = zext i1 %7526 to i8
  %7528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7527, i8* %7528, align 1, !tbaa !2450
  %7529 = load i64, i64* %RBP
  %7530 = sub i64 %7529, 108
  %7531 = load i64, i64* %PC
  %7532 = add i64 %7531, 4
  store i64 %7532, i64* %PC
  %7533 = inttoptr i64 %7530 to i32*
  %7534 = load i32, i32* %7533
  %7535 = sext i32 %7534 to i64
  store i64 %7535, i64* %RCX, align 8, !tbaa !2428
  %7536 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7537 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7538 = load i64, i64* %RAX
  %7539 = load i64, i64* %RCX
  %7540 = mul i64 %7539, 8
  %7541 = add i64 %7540, %7538
  %7542 = load i64, i64* %PC
  %7543 = add i64 %7542, 5
  store i64 %7543, i64* %PC
  %7544 = bitcast i8* %7537 to double*
  %7545 = load double, double* %7544, align 1
  %7546 = getelementptr inbounds i8, i8* %7537, i64 8
  %7547 = bitcast i8* %7546 to i64*
  %7548 = load i64, i64* %7547, align 1
  %7549 = inttoptr i64 %7541 to double*
  %7550 = load double, double* %7549
  %7551 = fsub double %7545, %7550
  %7552 = bitcast i8* %7536 to double*
  store double %7551, double* %7552, align 1, !tbaa !2452
  %7553 = getelementptr inbounds i8, i8* %7536, i64 8
  %7554 = bitcast i8* %7553 to i64*
  store i64 %7548, i64* %7554, align 1, !tbaa !2452
  %7555 = load i64, i64* %RBP
  %7556 = add i64 %7555, 40
  %7557 = load i64, i64* %PC
  %7558 = add i64 %7557, 4
  store i64 %7558, i64* %PC
  %7559 = inttoptr i64 %7556 to i64*
  %7560 = load i64, i64* %7559
  store i64 %7560, i64* %RAX, align 8, !tbaa !2428
  %7561 = load i64, i64* %RBP
  %7562 = sub i64 %7561, 100
  %7563 = load i64, i64* %PC
  %7564 = add i64 %7563, 4
  store i64 %7564, i64* %PC
  %7565 = inttoptr i64 %7562 to i32*
  %7566 = load i32, i32* %7565
  %7567 = sext i32 %7566 to i64
  store i64 %7567, i64* %RCX, align 8, !tbaa !2428
  %7568 = load i64, i64* %RCX
  %7569 = load i64, i64* %PC
  %7570 = add i64 %7569, 7
  store i64 %7570, i64* %PC
  %7571 = sext i64 %7568 to i128
  %7572 = and i128 %7571, -18446744073709551616
  %7573 = zext i64 %7568 to i128
  %7574 = or i128 %7572, %7573
  %7575 = mul nsw i128 33800, %7574
  %7576 = trunc i128 %7575 to i64
  store i64 %7576, i64* %RCX, align 8, !tbaa !2428
  %7577 = sext i64 %7576 to i128
  %7578 = icmp ne i128 %7577, %7575
  %7579 = zext i1 %7578 to i8
  %7580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7579, i8* %7580, align 1, !tbaa !2432
  %7581 = trunc i128 %7575 to i32
  %7582 = and i32 %7581, 255
  %7583 = call i32 @llvm.ctpop.i32(i32 %7582) #16
  %7584 = trunc i32 %7583 to i8
  %7585 = and i8 %7584, 1
  %7586 = xor i8 %7585, 1
  %7587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7586, i8* %7587, align 1, !tbaa !2446
  %7588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7588, align 1, !tbaa !2447
  %7589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7589, align 1, !tbaa !2448
  %7590 = lshr i64 %7576, 63
  %7591 = trunc i64 %7590 to i8
  %7592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7591, i8* %7592, align 1, !tbaa !2449
  %7593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7579, i8* %7593, align 1, !tbaa !2450
  %7594 = load i64, i64* %RAX
  %7595 = load i64, i64* %RCX
  %7596 = load i64, i64* %PC
  %7597 = add i64 %7596, 3
  store i64 %7597, i64* %PC
  %7598 = add i64 %7595, %7594
  store i64 %7598, i64* %RAX, align 8, !tbaa !2428
  %7599 = icmp ult i64 %7598, %7594
  %7600 = icmp ult i64 %7598, %7595
  %7601 = or i1 %7599, %7600
  %7602 = zext i1 %7601 to i8
  %7603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7602, i8* %7603, align 1, !tbaa !2432
  %7604 = trunc i64 %7598 to i32
  %7605 = and i32 %7604, 255
  %7606 = call i32 @llvm.ctpop.i32(i32 %7605) #16
  %7607 = trunc i32 %7606 to i8
  %7608 = and i8 %7607, 1
  %7609 = xor i8 %7608, 1
  %7610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7609, i8* %7610, align 1, !tbaa !2446
  %7611 = xor i64 %7595, %7594
  %7612 = xor i64 %7611, %7598
  %7613 = lshr i64 %7612, 4
  %7614 = trunc i64 %7613 to i8
  %7615 = and i8 %7614, 1
  %7616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7615, i8* %7616, align 1, !tbaa !2447
  %7617 = icmp eq i64 %7598, 0
  %7618 = zext i1 %7617 to i8
  %7619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7618, i8* %7619, align 1, !tbaa !2448
  %7620 = lshr i64 %7598, 63
  %7621 = trunc i64 %7620 to i8
  %7622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7621, i8* %7622, align 1, !tbaa !2449
  %7623 = lshr i64 %7594, 63
  %7624 = lshr i64 %7595, 63
  %7625 = xor i64 %7620, %7623
  %7626 = xor i64 %7620, %7624
  %7627 = add nuw nsw i64 %7625, %7626
  %7628 = icmp eq i64 %7627, 2
  %7629 = zext i1 %7628 to i8
  %7630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7629, i8* %7630, align 1, !tbaa !2450
  %7631 = load i64, i64* %RBP
  %7632 = sub i64 %7631, 104
  %7633 = load i64, i64* %PC
  %7634 = add i64 %7633, 4
  store i64 %7634, i64* %PC
  %7635 = inttoptr i64 %7632 to i32*
  %7636 = load i32, i32* %7635
  %7637 = sext i32 %7636 to i64
  store i64 %7637, i64* %RCX, align 8, !tbaa !2428
  %7638 = load i64, i64* %RCX
  %7639 = load i64, i64* %PC
  %7640 = add i64 %7639, 7
  store i64 %7640, i64* %PC
  %7641 = sext i64 %7638 to i128
  %7642 = and i128 %7641, -18446744073709551616
  %7643 = zext i64 %7638 to i128
  %7644 = or i128 %7642, %7643
  %7645 = mul nsw i128 520, %7644
  %7646 = trunc i128 %7645 to i64
  store i64 %7646, i64* %RCX, align 8, !tbaa !2428
  %7647 = sext i64 %7646 to i128
  %7648 = icmp ne i128 %7647, %7645
  %7649 = zext i1 %7648 to i8
  %7650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7649, i8* %7650, align 1, !tbaa !2432
  %7651 = trunc i128 %7645 to i32
  %7652 = and i32 %7651, 255
  %7653 = call i32 @llvm.ctpop.i32(i32 %7652) #16
  %7654 = trunc i32 %7653 to i8
  %7655 = and i8 %7654, 1
  %7656 = xor i8 %7655, 1
  %7657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7656, i8* %7657, align 1, !tbaa !2446
  %7658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7658, align 1, !tbaa !2447
  %7659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7659, align 1, !tbaa !2448
  %7660 = lshr i64 %7646, 63
  %7661 = trunc i64 %7660 to i8
  %7662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7661, i8* %7662, align 1, !tbaa !2449
  %7663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7649, i8* %7663, align 1, !tbaa !2450
  %7664 = load i64, i64* %RAX
  %7665 = load i64, i64* %RCX
  %7666 = load i64, i64* %PC
  %7667 = add i64 %7666, 3
  store i64 %7667, i64* %PC
  %7668 = add i64 %7665, %7664
  store i64 %7668, i64* %RAX, align 8, !tbaa !2428
  %7669 = icmp ult i64 %7668, %7664
  %7670 = icmp ult i64 %7668, %7665
  %7671 = or i1 %7669, %7670
  %7672 = zext i1 %7671 to i8
  %7673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7672, i8* %7673, align 1, !tbaa !2432
  %7674 = trunc i64 %7668 to i32
  %7675 = and i32 %7674, 255
  %7676 = call i32 @llvm.ctpop.i32(i32 %7675) #16
  %7677 = trunc i32 %7676 to i8
  %7678 = and i8 %7677, 1
  %7679 = xor i8 %7678, 1
  %7680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7679, i8* %7680, align 1, !tbaa !2446
  %7681 = xor i64 %7665, %7664
  %7682 = xor i64 %7681, %7668
  %7683 = lshr i64 %7682, 4
  %7684 = trunc i64 %7683 to i8
  %7685 = and i8 %7684, 1
  %7686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7685, i8* %7686, align 1, !tbaa !2447
  %7687 = icmp eq i64 %7668, 0
  %7688 = zext i1 %7687 to i8
  %7689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7688, i8* %7689, align 1, !tbaa !2448
  %7690 = lshr i64 %7668, 63
  %7691 = trunc i64 %7690 to i8
  %7692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7691, i8* %7692, align 1, !tbaa !2449
  %7693 = lshr i64 %7664, 63
  %7694 = lshr i64 %7665, 63
  %7695 = xor i64 %7690, %7693
  %7696 = xor i64 %7690, %7694
  %7697 = add nuw nsw i64 %7695, %7696
  %7698 = icmp eq i64 %7697, 2
  %7699 = zext i1 %7698 to i8
  %7700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7699, i8* %7700, align 1, !tbaa !2450
  %7701 = load i64, i64* %RBP
  %7702 = sub i64 %7701, 108
  %7703 = load i64, i64* %PC
  %7704 = add i64 %7703, 3
  store i64 %7704, i64* %PC
  %7705 = inttoptr i64 %7702 to i32*
  %7706 = load i32, i32* %7705
  %7707 = zext i32 %7706 to i64
  store i64 %7707, i64* %RDX, align 8, !tbaa !2428
  %7708 = load i64, i64* %RDX
  %7709 = load i64, i64* %PC
  %7710 = add i64 %7709, 3
  store i64 %7710, i64* %PC
  %7711 = trunc i64 %7708 to i32
  %7712 = add i32 1, %7711
  %7713 = zext i32 %7712 to i64
  store i64 %7713, i64* %RDX, align 8, !tbaa !2428
  %7714 = icmp ult i32 %7712, %7711
  %7715 = icmp ult i32 %7712, 1
  %7716 = or i1 %7714, %7715
  %7717 = zext i1 %7716 to i8
  %7718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7717, i8* %7718, align 1, !tbaa !2432
  %7719 = and i32 %7712, 255
  %7720 = call i32 @llvm.ctpop.i32(i32 %7719) #16
  %7721 = trunc i32 %7720 to i8
  %7722 = and i8 %7721, 1
  %7723 = xor i8 %7722, 1
  %7724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7723, i8* %7724, align 1, !tbaa !2446
  %7725 = xor i64 1, %7708
  %7726 = trunc i64 %7725 to i32
  %7727 = xor i32 %7726, %7712
  %7728 = lshr i32 %7727, 4
  %7729 = trunc i32 %7728 to i8
  %7730 = and i8 %7729, 1
  %7731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7730, i8* %7731, align 1, !tbaa !2447
  %7732 = icmp eq i32 %7712, 0
  %7733 = zext i1 %7732 to i8
  %7734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7733, i8* %7734, align 1, !tbaa !2448
  %7735 = lshr i32 %7712, 31
  %7736 = trunc i32 %7735 to i8
  %7737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7736, i8* %7737, align 1, !tbaa !2449
  %7738 = lshr i32 %7711, 31
  %7739 = xor i32 %7735, %7738
  %7740 = add nuw nsw i32 %7739, %7735
  %7741 = icmp eq i32 %7740, 2
  %7742 = zext i1 %7741 to i8
  %7743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7742, i8* %7743, align 1, !tbaa !2450
  %7744 = load i32, i32* %EDX
  %7745 = zext i32 %7744 to i64
  %7746 = load i64, i64* %PC
  %7747 = add i64 %7746, 3
  store i64 %7747, i64* %PC
  %7748 = shl i64 %7745, 32
  %7749 = ashr exact i64 %7748, 32
  store i64 %7749, i64* %RCX, align 8, !tbaa !2428
  %7750 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7751 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7752 = load i64, i64* %RAX
  %7753 = load i64, i64* %RCX
  %7754 = mul i64 %7753, 8
  %7755 = add i64 %7754, %7752
  %7756 = load i64, i64* %PC
  %7757 = add i64 %7756, 5
  store i64 %7757, i64* %PC
  %7758 = bitcast i8* %7751 to double*
  %7759 = load double, double* %7758, align 1
  %7760 = getelementptr inbounds i8, i8* %7751, i64 8
  %7761 = bitcast i8* %7760 to i64*
  %7762 = load i64, i64* %7761, align 1
  %7763 = inttoptr i64 %7755 to double*
  %7764 = load double, double* %7763
  %7765 = fadd double %7759, %7764
  %7766 = bitcast i8* %7750 to double*
  store double %7765, double* %7766, align 1, !tbaa !2452
  %7767 = getelementptr inbounds i8, i8* %7750, i64 8
  %7768 = bitcast i8* %7767 to i64*
  store i64 %7762, i64* %7768, align 1, !tbaa !2452
  %7769 = load i64, i64* %RBP
  %7770 = add i64 %7769, 40
  %7771 = load i64, i64* %PC
  %7772 = add i64 %7771, 4
  store i64 %7772, i64* %PC
  %7773 = inttoptr i64 %7770 to i64*
  %7774 = load i64, i64* %7773
  store i64 %7774, i64* %RAX, align 8, !tbaa !2428
  %7775 = load i64, i64* %RBP
  %7776 = sub i64 %7775, 100
  %7777 = load i64, i64* %PC
  %7778 = add i64 %7777, 4
  store i64 %7778, i64* %PC
  %7779 = inttoptr i64 %7776 to i32*
  %7780 = load i32, i32* %7779
  %7781 = sext i32 %7780 to i64
  store i64 %7781, i64* %RCX, align 8, !tbaa !2428
  %7782 = load i64, i64* %RCX
  %7783 = load i64, i64* %PC
  %7784 = add i64 %7783, 7
  store i64 %7784, i64* %PC
  %7785 = sext i64 %7782 to i128
  %7786 = and i128 %7785, -18446744073709551616
  %7787 = zext i64 %7782 to i128
  %7788 = or i128 %7786, %7787
  %7789 = mul nsw i128 33800, %7788
  %7790 = trunc i128 %7789 to i64
  store i64 %7790, i64* %RCX, align 8, !tbaa !2428
  %7791 = sext i64 %7790 to i128
  %7792 = icmp ne i128 %7791, %7789
  %7793 = zext i1 %7792 to i8
  %7794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7793, i8* %7794, align 1, !tbaa !2432
  %7795 = trunc i128 %7789 to i32
  %7796 = and i32 %7795, 255
  %7797 = call i32 @llvm.ctpop.i32(i32 %7796) #16
  %7798 = trunc i32 %7797 to i8
  %7799 = and i8 %7798, 1
  %7800 = xor i8 %7799, 1
  %7801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7800, i8* %7801, align 1, !tbaa !2446
  %7802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7802, align 1, !tbaa !2447
  %7803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7803, align 1, !tbaa !2448
  %7804 = lshr i64 %7790, 63
  %7805 = trunc i64 %7804 to i8
  %7806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7805, i8* %7806, align 1, !tbaa !2449
  %7807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7793, i8* %7807, align 1, !tbaa !2450
  %7808 = load i64, i64* %RAX
  %7809 = load i64, i64* %RCX
  %7810 = load i64, i64* %PC
  %7811 = add i64 %7810, 3
  store i64 %7811, i64* %PC
  %7812 = add i64 %7809, %7808
  store i64 %7812, i64* %RAX, align 8, !tbaa !2428
  %7813 = icmp ult i64 %7812, %7808
  %7814 = icmp ult i64 %7812, %7809
  %7815 = or i1 %7813, %7814
  %7816 = zext i1 %7815 to i8
  %7817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7816, i8* %7817, align 1, !tbaa !2432
  %7818 = trunc i64 %7812 to i32
  %7819 = and i32 %7818, 255
  %7820 = call i32 @llvm.ctpop.i32(i32 %7819) #16
  %7821 = trunc i32 %7820 to i8
  %7822 = and i8 %7821, 1
  %7823 = xor i8 %7822, 1
  %7824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7823, i8* %7824, align 1, !tbaa !2446
  %7825 = xor i64 %7809, %7808
  %7826 = xor i64 %7825, %7812
  %7827 = lshr i64 %7826, 4
  %7828 = trunc i64 %7827 to i8
  %7829 = and i8 %7828, 1
  %7830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7829, i8* %7830, align 1, !tbaa !2447
  %7831 = icmp eq i64 %7812, 0
  %7832 = zext i1 %7831 to i8
  %7833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7832, i8* %7833, align 1, !tbaa !2448
  %7834 = lshr i64 %7812, 63
  %7835 = trunc i64 %7834 to i8
  %7836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7835, i8* %7836, align 1, !tbaa !2449
  %7837 = lshr i64 %7808, 63
  %7838 = lshr i64 %7809, 63
  %7839 = xor i64 %7834, %7837
  %7840 = xor i64 %7834, %7838
  %7841 = add nuw nsw i64 %7839, %7840
  %7842 = icmp eq i64 %7841, 2
  %7843 = zext i1 %7842 to i8
  %7844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7843, i8* %7844, align 1, !tbaa !2450
  %7845 = load i64, i64* %RBP
  %7846 = sub i64 %7845, 104
  %7847 = load i64, i64* %PC
  %7848 = add i64 %7847, 4
  store i64 %7848, i64* %PC
  %7849 = inttoptr i64 %7846 to i32*
  %7850 = load i32, i32* %7849
  %7851 = sext i32 %7850 to i64
  store i64 %7851, i64* %RCX, align 8, !tbaa !2428
  %7852 = load i64, i64* %RCX
  %7853 = load i64, i64* %PC
  %7854 = add i64 %7853, 7
  store i64 %7854, i64* %PC
  %7855 = sext i64 %7852 to i128
  %7856 = and i128 %7855, -18446744073709551616
  %7857 = zext i64 %7852 to i128
  %7858 = or i128 %7856, %7857
  %7859 = mul nsw i128 520, %7858
  %7860 = trunc i128 %7859 to i64
  store i64 %7860, i64* %RCX, align 8, !tbaa !2428
  %7861 = sext i64 %7860 to i128
  %7862 = icmp ne i128 %7861, %7859
  %7863 = zext i1 %7862 to i8
  %7864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7863, i8* %7864, align 1, !tbaa !2432
  %7865 = trunc i128 %7859 to i32
  %7866 = and i32 %7865, 255
  %7867 = call i32 @llvm.ctpop.i32(i32 %7866) #16
  %7868 = trunc i32 %7867 to i8
  %7869 = and i8 %7868, 1
  %7870 = xor i8 %7869, 1
  %7871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7870, i8* %7871, align 1, !tbaa !2446
  %7872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7872, align 1, !tbaa !2447
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7873, align 1, !tbaa !2448
  %7874 = lshr i64 %7860, 63
  %7875 = trunc i64 %7874 to i8
  %7876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7875, i8* %7876, align 1, !tbaa !2449
  %7877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7863, i8* %7877, align 1, !tbaa !2450
  %7878 = load i64, i64* %RAX
  %7879 = load i64, i64* %RCX
  %7880 = load i64, i64* %PC
  %7881 = add i64 %7880, 3
  store i64 %7881, i64* %PC
  %7882 = add i64 %7879, %7878
  store i64 %7882, i64* %RAX, align 8, !tbaa !2428
  %7883 = icmp ult i64 %7882, %7878
  %7884 = icmp ult i64 %7882, %7879
  %7885 = or i1 %7883, %7884
  %7886 = zext i1 %7885 to i8
  %7887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7886, i8* %7887, align 1, !tbaa !2432
  %7888 = trunc i64 %7882 to i32
  %7889 = and i32 %7888, 255
  %7890 = call i32 @llvm.ctpop.i32(i32 %7889) #16
  %7891 = trunc i32 %7890 to i8
  %7892 = and i8 %7891, 1
  %7893 = xor i8 %7892, 1
  %7894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7893, i8* %7894, align 1, !tbaa !2446
  %7895 = xor i64 %7879, %7878
  %7896 = xor i64 %7895, %7882
  %7897 = lshr i64 %7896, 4
  %7898 = trunc i64 %7897 to i8
  %7899 = and i8 %7898, 1
  %7900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7899, i8* %7900, align 1, !tbaa !2447
  %7901 = icmp eq i64 %7882, 0
  %7902 = zext i1 %7901 to i8
  %7903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7902, i8* %7903, align 1, !tbaa !2448
  %7904 = lshr i64 %7882, 63
  %7905 = trunc i64 %7904 to i8
  %7906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7905, i8* %7906, align 1, !tbaa !2449
  %7907 = lshr i64 %7878, 63
  %7908 = lshr i64 %7879, 63
  %7909 = xor i64 %7904, %7907
  %7910 = xor i64 %7904, %7908
  %7911 = add nuw nsw i64 %7909, %7910
  %7912 = icmp eq i64 %7911, 2
  %7913 = zext i1 %7912 to i8
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7913, i8* %7914, align 1, !tbaa !2450
  %7915 = load i64, i64* %RBP
  %7916 = sub i64 %7915, 108
  %7917 = load i64, i64* %PC
  %7918 = add i64 %7917, 4
  store i64 %7918, i64* %PC
  %7919 = inttoptr i64 %7916 to i32*
  %7920 = load i32, i32* %7919
  %7921 = sext i32 %7920 to i64
  store i64 %7921, i64* %RCX, align 8, !tbaa !2428
  %7922 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7923 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7924 = load i64, i64* %RAX
  %7925 = load i64, i64* %RCX
  %7926 = mul i64 %7925, 8
  %7927 = add i64 %7926, %7924
  %7928 = load i64, i64* %PC
  %7929 = add i64 %7928, 5
  store i64 %7929, i64* %PC
  %7930 = bitcast i8* %7923 to double*
  %7931 = load double, double* %7930, align 1
  %7932 = getelementptr inbounds i8, i8* %7923, i64 8
  %7933 = bitcast i8* %7932 to i64*
  %7934 = load i64, i64* %7933, align 1
  %7935 = inttoptr i64 %7927 to double*
  %7936 = load double, double* %7935
  %7937 = fsub double %7931, %7936
  %7938 = bitcast i8* %7922 to double*
  store double %7937, double* %7938, align 1, !tbaa !2452
  %7939 = getelementptr inbounds i8, i8* %7922, i64 8
  %7940 = bitcast i8* %7939 to i64*
  store i64 %7934, i64* %7940, align 1, !tbaa !2452
  %7941 = load i64, i64* %RBP
  %7942 = sub i64 %7941, 96
  %7943 = load i64, i64* %PC
  %7944 = add i64 %7943, 4
  store i64 %7944, i64* %PC
  %7945 = inttoptr i64 %7942 to i64*
  %7946 = load i64, i64* %7945
  store i64 %7946, i64* %RAX, align 8, !tbaa !2428
  %7947 = load i64, i64* %RBP
  %7948 = sub i64 %7947, 100
  %7949 = load i64, i64* %PC
  %7950 = add i64 %7949, 4
  store i64 %7950, i64* %PC
  %7951 = inttoptr i64 %7948 to i32*
  %7952 = load i32, i32* %7951
  %7953 = sext i32 %7952 to i64
  store i64 %7953, i64* %RCX, align 8, !tbaa !2428
  %7954 = load i64, i64* %RCX
  %7955 = load i64, i64* %PC
  %7956 = add i64 %7955, 7
  store i64 %7956, i64* %PC
  %7957 = sext i64 %7954 to i128
  %7958 = and i128 %7957, -18446744073709551616
  %7959 = zext i64 %7954 to i128
  %7960 = or i128 %7958, %7959
  %7961 = mul nsw i128 520, %7960
  %7962 = trunc i128 %7961 to i64
  store i64 %7962, i64* %RCX, align 8, !tbaa !2428
  %7963 = sext i64 %7962 to i128
  %7964 = icmp ne i128 %7963, %7961
  %7965 = zext i1 %7964 to i8
  %7966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7965, i8* %7966, align 1, !tbaa !2432
  %7967 = trunc i128 %7961 to i32
  %7968 = and i32 %7967, 255
  %7969 = call i32 @llvm.ctpop.i32(i32 %7968) #16
  %7970 = trunc i32 %7969 to i8
  %7971 = and i8 %7970, 1
  %7972 = xor i8 %7971, 1
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7972, i8* %7973, align 1, !tbaa !2446
  %7974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7974, align 1, !tbaa !2447
  %7975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7975, align 1, !tbaa !2448
  %7976 = lshr i64 %7962, 63
  %7977 = trunc i64 %7976 to i8
  %7978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7977, i8* %7978, align 1, !tbaa !2449
  %7979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7965, i8* %7979, align 1, !tbaa !2450
  %7980 = load i64, i64* %RAX
  %7981 = load i64, i64* %RCX
  %7982 = load i64, i64* %PC
  %7983 = add i64 %7982, 3
  store i64 %7983, i64* %PC
  %7984 = add i64 %7981, %7980
  store i64 %7984, i64* %RAX, align 8, !tbaa !2428
  %7985 = icmp ult i64 %7984, %7980
  %7986 = icmp ult i64 %7984, %7981
  %7987 = or i1 %7985, %7986
  %7988 = zext i1 %7987 to i8
  %7989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7988, i8* %7989, align 1, !tbaa !2432
  %7990 = trunc i64 %7984 to i32
  %7991 = and i32 %7990, 255
  %7992 = call i32 @llvm.ctpop.i32(i32 %7991) #16
  %7993 = trunc i32 %7992 to i8
  %7994 = and i8 %7993, 1
  %7995 = xor i8 %7994, 1
  %7996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7995, i8* %7996, align 1, !tbaa !2446
  %7997 = xor i64 %7981, %7980
  %7998 = xor i64 %7997, %7984
  %7999 = lshr i64 %7998, 4
  %8000 = trunc i64 %7999 to i8
  %8001 = and i8 %8000, 1
  %8002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8001, i8* %8002, align 1, !tbaa !2447
  %8003 = icmp eq i64 %7984, 0
  %8004 = zext i1 %8003 to i8
  %8005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8004, i8* %8005, align 1, !tbaa !2448
  %8006 = lshr i64 %7984, 63
  %8007 = trunc i64 %8006 to i8
  %8008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8007, i8* %8008, align 1, !tbaa !2449
  %8009 = lshr i64 %7980, 63
  %8010 = lshr i64 %7981, 63
  %8011 = xor i64 %8006, %8009
  %8012 = xor i64 %8006, %8010
  %8013 = add nuw nsw i64 %8011, %8012
  %8014 = icmp eq i64 %8013, 2
  %8015 = zext i1 %8014 to i8
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8015, i8* %8016, align 1, !tbaa !2450
  %8017 = load i64, i64* %RBP
  %8018 = sub i64 %8017, 104
  %8019 = load i64, i64* %PC
  %8020 = add i64 %8019, 4
  store i64 %8020, i64* %PC
  %8021 = inttoptr i64 %8018 to i32*
  %8022 = load i32, i32* %8021
  %8023 = sext i32 %8022 to i64
  store i64 %8023, i64* %RCX, align 8, !tbaa !2428
  %8024 = load i64, i64* %RAX
  %8025 = load i64, i64* %RCX
  %8026 = mul i64 %8025, 8
  %8027 = add i64 %8026, %8024
  %8028 = bitcast %union.vec128_t* %XMM0 to i8*
  %8029 = load i64, i64* %PC
  %8030 = add i64 %8029, 5
  store i64 %8030, i64* %PC
  %8031 = bitcast i8* %8028 to double*
  %8032 = load double, double* %8031, align 1
  %8033 = inttoptr i64 %8027 to double*
  store double %8032, double* %8033
  %8034 = load i64, i64* %RBP
  %8035 = add i64 %8034, 88
  %8036 = load i64, i64* %PC
  %8037 = add i64 %8036, 4
  store i64 %8037, i64* %PC
  %8038 = inttoptr i64 %8035 to i64*
  %8039 = load i64, i64* %8038
  store i64 %8039, i64* %RAX, align 8, !tbaa !2428
  %8040 = load i64, i64* %RBP
  %8041 = sub i64 %8040, 104
  %8042 = load i64, i64* %PC
  %8043 = add i64 %8042, 4
  store i64 %8043, i64* %PC
  %8044 = inttoptr i64 %8041 to i32*
  %8045 = load i32, i32* %8044
  %8046 = sext i32 %8045 to i64
  store i64 %8046, i64* %RCX, align 8, !tbaa !2428
  %8047 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8048 = load i64, i64* %RAX
  %8049 = load i64, i64* %RCX
  %8050 = mul i64 %8049, 8
  %8051 = add i64 %8050, %8048
  %8052 = load i64, i64* %PC
  %8053 = add i64 %8052, 5
  store i64 %8053, i64* %PC
  %8054 = inttoptr i64 %8051 to double*
  %8055 = load double, double* %8054
  %8056 = bitcast i8* %8047 to double*
  store double %8055, double* %8056, align 1, !tbaa !2452
  %8057 = getelementptr inbounds i8, i8* %8047, i64 8
  %8058 = bitcast i8* %8057 to double*
  store double 0.000000e+00, double* %8058, align 1, !tbaa !2452
  %8059 = load i64, i64* %RBP
  %8060 = add i64 %8059, 96
  %8061 = load i64, i64* %PC
  %8062 = add i64 %8061, 4
  store i64 %8062, i64* %PC
  %8063 = inttoptr i64 %8060 to i64*
  %8064 = load i64, i64* %8063
  store i64 %8064, i64* %RAX, align 8, !tbaa !2428
  %8065 = load i64, i64* %RBP
  %8066 = sub i64 %8065, 104
  %8067 = load i64, i64* %PC
  %8068 = add i64 %8067, 4
  store i64 %8068, i64* %PC
  %8069 = inttoptr i64 %8066 to i32*
  %8070 = load i32, i32* %8069
  %8071 = sext i32 %8070 to i64
  store i64 %8071, i64* %RCX, align 8, !tbaa !2428
  %8072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8073 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8074 = load i64, i64* %RAX
  %8075 = load i64, i64* %RCX
  %8076 = mul i64 %8075, 8
  %8077 = add i64 %8076, %8074
  %8078 = load i64, i64* %PC
  %8079 = add i64 %8078, 5
  store i64 %8079, i64* %PC
  %8080 = bitcast i8* %8073 to double*
  %8081 = load double, double* %8080, align 1
  %8082 = getelementptr inbounds i8, i8* %8073, i64 8
  %8083 = bitcast i8* %8082 to i64*
  %8084 = load i64, i64* %8083, align 1
  %8085 = inttoptr i64 %8077 to double*
  %8086 = load double, double* %8085
  %8087 = fdiv double %8081, %8086
  %8088 = bitcast i8* %8072 to double*
  store double %8087, double* %8088, align 1, !tbaa !2452
  %8089 = getelementptr inbounds i8, i8* %8072, i64 8
  %8090 = bitcast i8* %8089 to i64*
  store i64 %8084, i64* %8090, align 1, !tbaa !2452
  %8091 = load i64, i64* %RBP
  %8092 = add i64 %8091, 24
  %8093 = load i64, i64* %PC
  %8094 = add i64 %8093, 4
  store i64 %8094, i64* %PC
  %8095 = inttoptr i64 %8092 to i64*
  %8096 = load i64, i64* %8095
  store i64 %8096, i64* %RAX, align 8, !tbaa !2428
  %8097 = load i64, i64* %RBP
  %8098 = sub i64 %8097, 100
  %8099 = load i64, i64* %PC
  %8100 = add i64 %8099, 4
  store i64 %8100, i64* %PC
  %8101 = inttoptr i64 %8098 to i32*
  %8102 = load i32, i32* %8101
  %8103 = sext i32 %8102 to i64
  store i64 %8103, i64* %RCX, align 8, !tbaa !2428
  %8104 = load i64, i64* %RCX
  %8105 = load i64, i64* %PC
  %8106 = add i64 %8105, 7
  store i64 %8106, i64* %PC
  %8107 = sext i64 %8104 to i128
  %8108 = and i128 %8107, -18446744073709551616
  %8109 = zext i64 %8104 to i128
  %8110 = or i128 %8108, %8109
  %8111 = mul nsw i128 33800, %8110
  %8112 = trunc i128 %8111 to i64
  store i64 %8112, i64* %RCX, align 8, !tbaa !2428
  %8113 = sext i64 %8112 to i128
  %8114 = icmp ne i128 %8113, %8111
  %8115 = zext i1 %8114 to i8
  %8116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8115, i8* %8116, align 1, !tbaa !2432
  %8117 = trunc i128 %8111 to i32
  %8118 = and i32 %8117, 255
  %8119 = call i32 @llvm.ctpop.i32(i32 %8118) #16
  %8120 = trunc i32 %8119 to i8
  %8121 = and i8 %8120, 1
  %8122 = xor i8 %8121, 1
  %8123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8122, i8* %8123, align 1, !tbaa !2446
  %8124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8124, align 1, !tbaa !2447
  %8125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8125, align 1, !tbaa !2448
  %8126 = lshr i64 %8112, 63
  %8127 = trunc i64 %8126 to i8
  %8128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8127, i8* %8128, align 1, !tbaa !2449
  %8129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8115, i8* %8129, align 1, !tbaa !2450
  %8130 = load i64, i64* %RAX
  %8131 = load i64, i64* %RCX
  %8132 = load i64, i64* %PC
  %8133 = add i64 %8132, 3
  store i64 %8133, i64* %PC
  %8134 = add i64 %8131, %8130
  store i64 %8134, i64* %RAX, align 8, !tbaa !2428
  %8135 = icmp ult i64 %8134, %8130
  %8136 = icmp ult i64 %8134, %8131
  %8137 = or i1 %8135, %8136
  %8138 = zext i1 %8137 to i8
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8138, i8* %8139, align 1, !tbaa !2432
  %8140 = trunc i64 %8134 to i32
  %8141 = and i32 %8140, 255
  %8142 = call i32 @llvm.ctpop.i32(i32 %8141) #16
  %8143 = trunc i32 %8142 to i8
  %8144 = and i8 %8143, 1
  %8145 = xor i8 %8144, 1
  %8146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8145, i8* %8146, align 1, !tbaa !2446
  %8147 = xor i64 %8131, %8130
  %8148 = xor i64 %8147, %8134
  %8149 = lshr i64 %8148, 4
  %8150 = trunc i64 %8149 to i8
  %8151 = and i8 %8150, 1
  %8152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8151, i8* %8152, align 1, !tbaa !2447
  %8153 = icmp eq i64 %8134, 0
  %8154 = zext i1 %8153 to i8
  %8155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8154, i8* %8155, align 1, !tbaa !2448
  %8156 = lshr i64 %8134, 63
  %8157 = trunc i64 %8156 to i8
  %8158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8157, i8* %8158, align 1, !tbaa !2449
  %8159 = lshr i64 %8130, 63
  %8160 = lshr i64 %8131, 63
  %8161 = xor i64 %8156, %8159
  %8162 = xor i64 %8156, %8160
  %8163 = add nuw nsw i64 %8161, %8162
  %8164 = icmp eq i64 %8163, 2
  %8165 = zext i1 %8164 to i8
  %8166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8165, i8* %8166, align 1, !tbaa !2450
  %8167 = load i64, i64* %RBP
  %8168 = sub i64 %8167, 104
  %8169 = load i64, i64* %PC
  %8170 = add i64 %8169, 4
  store i64 %8170, i64* %PC
  %8171 = inttoptr i64 %8168 to i32*
  %8172 = load i32, i32* %8171
  %8173 = sext i32 %8172 to i64
  store i64 %8173, i64* %RCX, align 8, !tbaa !2428
  %8174 = load i64, i64* %RCX
  %8175 = load i64, i64* %PC
  %8176 = add i64 %8175, 7
  store i64 %8176, i64* %PC
  %8177 = sext i64 %8174 to i128
  %8178 = and i128 %8177, -18446744073709551616
  %8179 = zext i64 %8174 to i128
  %8180 = or i128 %8178, %8179
  %8181 = mul nsw i128 520, %8180
  %8182 = trunc i128 %8181 to i64
  store i64 %8182, i64* %RCX, align 8, !tbaa !2428
  %8183 = sext i64 %8182 to i128
  %8184 = icmp ne i128 %8183, %8181
  %8185 = zext i1 %8184 to i8
  %8186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8185, i8* %8186, align 1, !tbaa !2432
  %8187 = trunc i128 %8181 to i32
  %8188 = and i32 %8187, 255
  %8189 = call i32 @llvm.ctpop.i32(i32 %8188) #16
  %8190 = trunc i32 %8189 to i8
  %8191 = and i8 %8190, 1
  %8192 = xor i8 %8191, 1
  %8193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8192, i8* %8193, align 1, !tbaa !2446
  %8194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8194, align 1, !tbaa !2447
  %8195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8195, align 1, !tbaa !2448
  %8196 = lshr i64 %8182, 63
  %8197 = trunc i64 %8196 to i8
  %8198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8197, i8* %8198, align 1, !tbaa !2449
  %8199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8185, i8* %8199, align 1, !tbaa !2450
  %8200 = load i64, i64* %RAX
  %8201 = load i64, i64* %RCX
  %8202 = load i64, i64* %PC
  %8203 = add i64 %8202, 3
  store i64 %8203, i64* %PC
  %8204 = add i64 %8201, %8200
  store i64 %8204, i64* %RAX, align 8, !tbaa !2428
  %8205 = icmp ult i64 %8204, %8200
  %8206 = icmp ult i64 %8204, %8201
  %8207 = or i1 %8205, %8206
  %8208 = zext i1 %8207 to i8
  %8209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8208, i8* %8209, align 1, !tbaa !2432
  %8210 = trunc i64 %8204 to i32
  %8211 = and i32 %8210, 255
  %8212 = call i32 @llvm.ctpop.i32(i32 %8211) #16
  %8213 = trunc i32 %8212 to i8
  %8214 = and i8 %8213, 1
  %8215 = xor i8 %8214, 1
  %8216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8215, i8* %8216, align 1, !tbaa !2446
  %8217 = xor i64 %8201, %8200
  %8218 = xor i64 %8217, %8204
  %8219 = lshr i64 %8218, 4
  %8220 = trunc i64 %8219 to i8
  %8221 = and i8 %8220, 1
  %8222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8221, i8* %8222, align 1, !tbaa !2447
  %8223 = icmp eq i64 %8204, 0
  %8224 = zext i1 %8223 to i8
  %8225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8224, i8* %8225, align 1, !tbaa !2448
  %8226 = lshr i64 %8204, 63
  %8227 = trunc i64 %8226 to i8
  %8228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8227, i8* %8228, align 1, !tbaa !2449
  %8229 = lshr i64 %8200, 63
  %8230 = lshr i64 %8201, 63
  %8231 = xor i64 %8226, %8229
  %8232 = xor i64 %8226, %8230
  %8233 = add nuw nsw i64 %8231, %8232
  %8234 = icmp eq i64 %8233, 2
  %8235 = zext i1 %8234 to i8
  %8236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8235, i8* %8236, align 1, !tbaa !2450
  %8237 = load i64, i64* %RBP
  %8238 = sub i64 %8237, 108
  %8239 = load i64, i64* %PC
  %8240 = add i64 %8239, 4
  store i64 %8240, i64* %PC
  %8241 = inttoptr i64 %8238 to i32*
  %8242 = load i32, i32* %8241
  %8243 = sext i32 %8242 to i64
  store i64 %8243, i64* %RCX, align 8, !tbaa !2428
  %8244 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8246 = load i64, i64* %RAX
  %8247 = load i64, i64* %RCX
  %8248 = mul i64 %8247, 8
  %8249 = add i64 %8248, %8246
  %8250 = load i64, i64* %PC
  %8251 = add i64 %8250, 5
  store i64 %8251, i64* %PC
  %8252 = bitcast i8* %8245 to double*
  %8253 = load double, double* %8252, align 1
  %8254 = getelementptr inbounds i8, i8* %8245, i64 8
  %8255 = bitcast i8* %8254 to i64*
  %8256 = load i64, i64* %8255, align 1
  %8257 = inttoptr i64 %8249 to double*
  %8258 = load double, double* %8257
  %8259 = fmul double %8253, %8258
  %8260 = bitcast i8* %8244 to double*
  store double %8259, double* %8260, align 1, !tbaa !2452
  %8261 = getelementptr inbounds i8, i8* %8244, i64 8
  %8262 = bitcast i8* %8261 to i64*
  store i64 %8256, i64* %8262, align 1, !tbaa !2452
  %8263 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8264 = load i64, i64* %RBP
  %8265 = sub i64 %8264, 72
  %8266 = load i64, i64* %PC
  %8267 = add i64 %8266, 5
  store i64 %8267, i64* %PC
  %8268 = inttoptr i64 %8265 to double*
  %8269 = load double, double* %8268
  %8270 = bitcast i8* %8263 to double*
  store double %8269, double* %8270, align 1, !tbaa !2452
  %8271 = getelementptr inbounds i8, i8* %8263, i64 8
  %8272 = bitcast i8* %8271 to double*
  store double 0.000000e+00, double* %8272, align 1, !tbaa !2452
  %8273 = load i64, i64* %RBP
  %8274 = add i64 %8273, 96
  %8275 = load i64, i64* %PC
  %8276 = add i64 %8275, 4
  store i64 %8276, i64* %PC
  %8277 = inttoptr i64 %8274 to i64*
  %8278 = load i64, i64* %8277
  store i64 %8278, i64* %RAX, align 8, !tbaa !2428
  %8279 = load i64, i64* %RBP
  %8280 = sub i64 %8279, 104
  %8281 = load i64, i64* %PC
  %8282 = add i64 %8281, 4
  store i64 %8282, i64* %PC
  %8283 = inttoptr i64 %8280 to i32*
  %8284 = load i32, i32* %8283
  %8285 = sext i32 %8284 to i64
  store i64 %8285, i64* %RCX, align 8, !tbaa !2428
  %8286 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8287 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8288 = load i64, i64* %RAX
  %8289 = load i64, i64* %RCX
  %8290 = mul i64 %8289, 8
  %8291 = add i64 %8290, %8288
  %8292 = load i64, i64* %PC
  %8293 = add i64 %8292, 5
  store i64 %8293, i64* %PC
  %8294 = bitcast i8* %8287 to double*
  %8295 = load double, double* %8294, align 1
  %8296 = getelementptr inbounds i8, i8* %8287, i64 8
  %8297 = bitcast i8* %8296 to i64*
  %8298 = load i64, i64* %8297, align 1
  %8299 = inttoptr i64 %8291 to double*
  %8300 = load double, double* %8299
  %8301 = fdiv double %8295, %8300
  %8302 = bitcast i8* %8286 to double*
  store double %8301, double* %8302, align 1, !tbaa !2452
  %8303 = getelementptr inbounds i8, i8* %8286, i64 8
  %8304 = bitcast i8* %8303 to i64*
  store i64 %8298, i64* %8304, align 1, !tbaa !2452
  %8305 = load i64, i64* %RBP
  %8306 = sub i64 %8305, 96
  %8307 = load i64, i64* %PC
  %8308 = add i64 %8307, 4
  store i64 %8308, i64* %PC
  %8309 = inttoptr i64 %8306 to i64*
  %8310 = load i64, i64* %8309
  store i64 %8310, i64* %RAX, align 8, !tbaa !2428
  %8311 = load i64, i64* %RBP
  %8312 = sub i64 %8311, 100
  %8313 = load i64, i64* %PC
  %8314 = add i64 %8313, 4
  store i64 %8314, i64* %PC
  %8315 = inttoptr i64 %8312 to i32*
  %8316 = load i32, i32* %8315
  %8317 = sext i32 %8316 to i64
  store i64 %8317, i64* %RCX, align 8, !tbaa !2428
  %8318 = load i64, i64* %RCX
  %8319 = load i64, i64* %PC
  %8320 = add i64 %8319, 7
  store i64 %8320, i64* %PC
  %8321 = sext i64 %8318 to i128
  %8322 = and i128 %8321, -18446744073709551616
  %8323 = zext i64 %8318 to i128
  %8324 = or i128 %8322, %8323
  %8325 = mul nsw i128 520, %8324
  %8326 = trunc i128 %8325 to i64
  store i64 %8326, i64* %RCX, align 8, !tbaa !2428
  %8327 = sext i64 %8326 to i128
  %8328 = icmp ne i128 %8327, %8325
  %8329 = zext i1 %8328 to i8
  %8330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8329, i8* %8330, align 1, !tbaa !2432
  %8331 = trunc i128 %8325 to i32
  %8332 = and i32 %8331, 255
  %8333 = call i32 @llvm.ctpop.i32(i32 %8332) #16
  %8334 = trunc i32 %8333 to i8
  %8335 = and i8 %8334, 1
  %8336 = xor i8 %8335, 1
  %8337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8336, i8* %8337, align 1, !tbaa !2446
  %8338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8338, align 1, !tbaa !2447
  %8339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8339, align 1, !tbaa !2448
  %8340 = lshr i64 %8326, 63
  %8341 = trunc i64 %8340 to i8
  %8342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8341, i8* %8342, align 1, !tbaa !2449
  %8343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8329, i8* %8343, align 1, !tbaa !2450
  %8344 = load i64, i64* %RAX
  %8345 = load i64, i64* %RCX
  %8346 = load i64, i64* %PC
  %8347 = add i64 %8346, 3
  store i64 %8347, i64* %PC
  %8348 = add i64 %8345, %8344
  store i64 %8348, i64* %RAX, align 8, !tbaa !2428
  %8349 = icmp ult i64 %8348, %8344
  %8350 = icmp ult i64 %8348, %8345
  %8351 = or i1 %8349, %8350
  %8352 = zext i1 %8351 to i8
  %8353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8352, i8* %8353, align 1, !tbaa !2432
  %8354 = trunc i64 %8348 to i32
  %8355 = and i32 %8354, 255
  %8356 = call i32 @llvm.ctpop.i32(i32 %8355) #16
  %8357 = trunc i32 %8356 to i8
  %8358 = and i8 %8357, 1
  %8359 = xor i8 %8358, 1
  %8360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8359, i8* %8360, align 1, !tbaa !2446
  %8361 = xor i64 %8345, %8344
  %8362 = xor i64 %8361, %8348
  %8363 = lshr i64 %8362, 4
  %8364 = trunc i64 %8363 to i8
  %8365 = and i8 %8364, 1
  %8366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8365, i8* %8366, align 1, !tbaa !2447
  %8367 = icmp eq i64 %8348, 0
  %8368 = zext i1 %8367 to i8
  %8369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8368, i8* %8369, align 1, !tbaa !2448
  %8370 = lshr i64 %8348, 63
  %8371 = trunc i64 %8370 to i8
  %8372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8371, i8* %8372, align 1, !tbaa !2449
  %8373 = lshr i64 %8344, 63
  %8374 = lshr i64 %8345, 63
  %8375 = xor i64 %8370, %8373
  %8376 = xor i64 %8370, %8374
  %8377 = add nuw nsw i64 %8375, %8376
  %8378 = icmp eq i64 %8377, 2
  %8379 = zext i1 %8378 to i8
  %8380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8379, i8* %8380, align 1, !tbaa !2450
  %8381 = load i64, i64* %RBP
  %8382 = sub i64 %8381, 104
  %8383 = load i64, i64* %PC
  %8384 = add i64 %8383, 4
  store i64 %8384, i64* %PC
  %8385 = inttoptr i64 %8382 to i32*
  %8386 = load i32, i32* %8385
  %8387 = sext i32 %8386 to i64
  store i64 %8387, i64* %RCX, align 8, !tbaa !2428
  %8388 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8389 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8390 = load i64, i64* %RAX
  %8391 = load i64, i64* %RCX
  %8392 = mul i64 %8391, 8
  %8393 = add i64 %8392, %8390
  %8394 = load i64, i64* %PC
  %8395 = add i64 %8394, 5
  store i64 %8395, i64* %PC
  %8396 = bitcast i8* %8389 to double*
  %8397 = load double, double* %8396, align 1
  %8398 = getelementptr inbounds i8, i8* %8389, i64 8
  %8399 = bitcast i8* %8398 to i64*
  %8400 = load i64, i64* %8399, align 1
  %8401 = inttoptr i64 %8393 to double*
  %8402 = load double, double* %8401
  %8403 = fmul double %8397, %8402
  %8404 = bitcast i8* %8388 to double*
  store double %8403, double* %8404, align 1, !tbaa !2452
  %8405 = getelementptr inbounds i8, i8* %8388, i64 8
  %8406 = bitcast i8* %8405 to i64*
  store i64 %8400, i64* %8406, align 1, !tbaa !2452
  %8407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8408 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8409 = bitcast %union.vec128_t* %XMM1 to i8*
  %8410 = load i64, i64* %PC
  %8411 = add i64 %8410, 4
  store i64 %8411, i64* %PC
  %8412 = bitcast i8* %8408 to double*
  %8413 = load double, double* %8412, align 1
  %8414 = getelementptr inbounds i8, i8* %8408, i64 8
  %8415 = bitcast i8* %8414 to i64*
  %8416 = load i64, i64* %8415, align 1
  %8417 = bitcast i8* %8409 to double*
  %8418 = load double, double* %8417, align 1
  %8419 = fsub double %8413, %8418
  %8420 = bitcast i8* %8407 to double*
  store double %8419, double* %8420, align 1, !tbaa !2452
  %8421 = getelementptr inbounds i8, i8* %8407, i64 8
  %8422 = bitcast i8* %8421 to i64*
  store i64 %8416, i64* %8422, align 1, !tbaa !2452
  %8423 = load i64, i64* %RBP
  %8424 = add i64 %8423, 16
  %8425 = load i64, i64* %PC
  %8426 = add i64 %8425, 4
  store i64 %8426, i64* %PC
  %8427 = inttoptr i64 %8424 to i64*
  %8428 = load i64, i64* %8427
  store i64 %8428, i64* %RAX, align 8, !tbaa !2428
  %8429 = load i64, i64* %RBP
  %8430 = sub i64 %8429, 100
  %8431 = load i64, i64* %PC
  %8432 = add i64 %8431, 4
  store i64 %8432, i64* %PC
  %8433 = inttoptr i64 %8430 to i32*
  %8434 = load i32, i32* %8433
  %8435 = sext i32 %8434 to i64
  store i64 %8435, i64* %RCX, align 8, !tbaa !2428
  %8436 = load i64, i64* %RCX
  %8437 = load i64, i64* %PC
  %8438 = add i64 %8437, 7
  store i64 %8438, i64* %PC
  %8439 = sext i64 %8436 to i128
  %8440 = and i128 %8439, -18446744073709551616
  %8441 = zext i64 %8436 to i128
  %8442 = or i128 %8440, %8441
  %8443 = mul nsw i128 520, %8442
  %8444 = trunc i128 %8443 to i64
  store i64 %8444, i64* %RCX, align 8, !tbaa !2428
  %8445 = sext i64 %8444 to i128
  %8446 = icmp ne i128 %8445, %8443
  %8447 = zext i1 %8446 to i8
  %8448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8447, i8* %8448, align 1, !tbaa !2432
  %8449 = trunc i128 %8443 to i32
  %8450 = and i32 %8449, 255
  %8451 = call i32 @llvm.ctpop.i32(i32 %8450) #16
  %8452 = trunc i32 %8451 to i8
  %8453 = and i8 %8452, 1
  %8454 = xor i8 %8453, 1
  %8455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8454, i8* %8455, align 1, !tbaa !2446
  %8456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8456, align 1, !tbaa !2447
  %8457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8457, align 1, !tbaa !2448
  %8458 = lshr i64 %8444, 63
  %8459 = trunc i64 %8458 to i8
  %8460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8459, i8* %8460, align 1, !tbaa !2449
  %8461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8447, i8* %8461, align 1, !tbaa !2450
  %8462 = load i64, i64* %RAX
  %8463 = load i64, i64* %RCX
  %8464 = load i64, i64* %PC
  %8465 = add i64 %8464, 3
  store i64 %8465, i64* %PC
  %8466 = add i64 %8463, %8462
  store i64 %8466, i64* %RAX, align 8, !tbaa !2428
  %8467 = icmp ult i64 %8466, %8462
  %8468 = icmp ult i64 %8466, %8463
  %8469 = or i1 %8467, %8468
  %8470 = zext i1 %8469 to i8
  %8471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8470, i8* %8471, align 1, !tbaa !2432
  %8472 = trunc i64 %8466 to i32
  %8473 = and i32 %8472, 255
  %8474 = call i32 @llvm.ctpop.i32(i32 %8473) #16
  %8475 = trunc i32 %8474 to i8
  %8476 = and i8 %8475, 1
  %8477 = xor i8 %8476, 1
  %8478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8477, i8* %8478, align 1, !tbaa !2446
  %8479 = xor i64 %8463, %8462
  %8480 = xor i64 %8479, %8466
  %8481 = lshr i64 %8480, 4
  %8482 = trunc i64 %8481 to i8
  %8483 = and i8 %8482, 1
  %8484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8483, i8* %8484, align 1, !tbaa !2447
  %8485 = icmp eq i64 %8466, 0
  %8486 = zext i1 %8485 to i8
  %8487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8486, i8* %8487, align 1, !tbaa !2448
  %8488 = lshr i64 %8466, 63
  %8489 = trunc i64 %8488 to i8
  %8490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8489, i8* %8490, align 1, !tbaa !2449
  %8491 = lshr i64 %8462, 63
  %8492 = lshr i64 %8463, 63
  %8493 = xor i64 %8488, %8491
  %8494 = xor i64 %8488, %8492
  %8495 = add nuw nsw i64 %8493, %8494
  %8496 = icmp eq i64 %8495, 2
  %8497 = zext i1 %8496 to i8
  %8498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8497, i8* %8498, align 1, !tbaa !2450
  %8499 = load i64, i64* %RBP
  %8500 = sub i64 %8499, 104
  %8501 = load i64, i64* %PC
  %8502 = add i64 %8501, 4
  store i64 %8502, i64* %PC
  %8503 = inttoptr i64 %8500 to i32*
  %8504 = load i32, i32* %8503
  %8505 = sext i32 %8504 to i64
  store i64 %8505, i64* %RCX, align 8, !tbaa !2428
  %8506 = load i64, i64* %RAX
  %8507 = load i64, i64* %RCX
  %8508 = mul i64 %8507, 8
  %8509 = add i64 %8508, %8506
  %8510 = bitcast %union.vec128_t* %XMM0 to i8*
  %8511 = load i64, i64* %PC
  %8512 = add i64 %8511, 5
  store i64 %8512, i64* %PC
  %8513 = bitcast i8* %8510 to double*
  %8514 = load double, double* %8513, align 1
  %8515 = inttoptr i64 %8509 to double*
  store double %8514, double* %8515
  %8516 = load i64, i64* %RBP
  %8517 = add i64 %8516, 72
  %8518 = load i64, i64* %PC
  %8519 = add i64 %8518, 4
  store i64 %8519, i64* %PC
  %8520 = inttoptr i64 %8517 to i64*
  %8521 = load i64, i64* %8520
  store i64 %8521, i64* %RAX, align 8, !tbaa !2428
  %8522 = load i64, i64* %RBP
  %8523 = sub i64 %8522, 108
  %8524 = load i64, i64* %PC
  %8525 = add i64 %8524, 4
  store i64 %8525, i64* %PC
  %8526 = inttoptr i64 %8523 to i32*
  %8527 = load i32, i32* %8526
  %8528 = sext i32 %8527 to i64
  store i64 %8528, i64* %RCX, align 8, !tbaa !2428
  %8529 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8530 = load i64, i64* %RAX
  %8531 = load i64, i64* %RCX
  %8532 = mul i64 %8531, 8
  %8533 = add i64 %8532, %8530
  %8534 = load i64, i64* %PC
  %8535 = add i64 %8534, 5
  store i64 %8535, i64* %PC
  %8536 = inttoptr i64 %8533 to double*
  %8537 = load double, double* %8536
  %8538 = bitcast i8* %8529 to double*
  store double %8537, double* %8538, align 1, !tbaa !2452
  %8539 = getelementptr inbounds i8, i8* %8529, i64 8
  %8540 = bitcast i8* %8539 to double*
  store double 0.000000e+00, double* %8540, align 1, !tbaa !2452
  %8541 = load i64, i64* %RBP
  %8542 = add i64 %8541, 80
  %8543 = load i64, i64* %PC
  %8544 = add i64 %8543, 4
  store i64 %8544, i64* %PC
  %8545 = inttoptr i64 %8542 to i64*
  %8546 = load i64, i64* %8545
  store i64 %8546, i64* %RAX, align 8, !tbaa !2428
  %8547 = load i64, i64* %RBP
  %8548 = sub i64 %8547, 108
  %8549 = load i64, i64* %PC
  %8550 = add i64 %8549, 4
  store i64 %8550, i64* %PC
  %8551 = inttoptr i64 %8548 to i32*
  %8552 = load i32, i32* %8551
  %8553 = sext i32 %8552 to i64
  store i64 %8553, i64* %RCX, align 8, !tbaa !2428
  %8554 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8555 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8556 = load i64, i64* %RAX
  %8557 = load i64, i64* %RCX
  %8558 = mul i64 %8557, 8
  %8559 = add i64 %8558, %8556
  %8560 = load i64, i64* %PC
  %8561 = add i64 %8560, 5
  store i64 %8561, i64* %PC
  %8562 = bitcast i8* %8555 to double*
  %8563 = load double, double* %8562, align 1
  %8564 = getelementptr inbounds i8, i8* %8555, i64 8
  %8565 = bitcast i8* %8564 to i64*
  %8566 = load i64, i64* %8565, align 1
  %8567 = inttoptr i64 %8559 to double*
  %8568 = load double, double* %8567
  %8569 = fdiv double %8563, %8568
  %8570 = bitcast i8* %8554 to double*
  store double %8569, double* %8570, align 1, !tbaa !2452
  %8571 = getelementptr inbounds i8, i8* %8554, i64 8
  %8572 = bitcast i8* %8571 to i64*
  store i64 %8566, i64* %8572, align 1, !tbaa !2452
  %8573 = load i64, i64* %RBP
  %8574 = add i64 %8573, 48
  %8575 = load i64, i64* %PC
  %8576 = add i64 %8575, 4
  store i64 %8576, i64* %PC
  %8577 = inttoptr i64 %8574 to i64*
  %8578 = load i64, i64* %8577
  store i64 %8578, i64* %RAX, align 8, !tbaa !2428
  %8579 = load i64, i64* %RBP
  %8580 = sub i64 %8579, 100
  %8581 = load i64, i64* %PC
  %8582 = add i64 %8581, 4
  store i64 %8582, i64* %PC
  %8583 = inttoptr i64 %8580 to i32*
  %8584 = load i32, i32* %8583
  %8585 = sext i32 %8584 to i64
  store i64 %8585, i64* %RCX, align 8, !tbaa !2428
  %8586 = load i64, i64* %RCX
  %8587 = load i64, i64* %PC
  %8588 = add i64 %8587, 7
  store i64 %8588, i64* %PC
  %8589 = sext i64 %8586 to i128
  %8590 = and i128 %8589, -18446744073709551616
  %8591 = zext i64 %8586 to i128
  %8592 = or i128 %8590, %8591
  %8593 = mul nsw i128 33800, %8592
  %8594 = trunc i128 %8593 to i64
  store i64 %8594, i64* %RCX, align 8, !tbaa !2428
  %8595 = sext i64 %8594 to i128
  %8596 = icmp ne i128 %8595, %8593
  %8597 = zext i1 %8596 to i8
  %8598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8597, i8* %8598, align 1, !tbaa !2432
  %8599 = trunc i128 %8593 to i32
  %8600 = and i32 %8599, 255
  %8601 = call i32 @llvm.ctpop.i32(i32 %8600) #16
  %8602 = trunc i32 %8601 to i8
  %8603 = and i8 %8602, 1
  %8604 = xor i8 %8603, 1
  %8605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8604, i8* %8605, align 1, !tbaa !2446
  %8606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8606, align 1, !tbaa !2447
  %8607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8607, align 1, !tbaa !2448
  %8608 = lshr i64 %8594, 63
  %8609 = trunc i64 %8608 to i8
  %8610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8609, i8* %8610, align 1, !tbaa !2449
  %8611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8597, i8* %8611, align 1, !tbaa !2450
  %8612 = load i64, i64* %RAX
  %8613 = load i64, i64* %RCX
  %8614 = load i64, i64* %PC
  %8615 = add i64 %8614, 3
  store i64 %8615, i64* %PC
  %8616 = add i64 %8613, %8612
  store i64 %8616, i64* %RAX, align 8, !tbaa !2428
  %8617 = icmp ult i64 %8616, %8612
  %8618 = icmp ult i64 %8616, %8613
  %8619 = or i1 %8617, %8618
  %8620 = zext i1 %8619 to i8
  %8621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8620, i8* %8621, align 1, !tbaa !2432
  %8622 = trunc i64 %8616 to i32
  %8623 = and i32 %8622, 255
  %8624 = call i32 @llvm.ctpop.i32(i32 %8623) #16
  %8625 = trunc i32 %8624 to i8
  %8626 = and i8 %8625, 1
  %8627 = xor i8 %8626, 1
  %8628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8627, i8* %8628, align 1, !tbaa !2446
  %8629 = xor i64 %8613, %8612
  %8630 = xor i64 %8629, %8616
  %8631 = lshr i64 %8630, 4
  %8632 = trunc i64 %8631 to i8
  %8633 = and i8 %8632, 1
  %8634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8633, i8* %8634, align 1, !tbaa !2447
  %8635 = icmp eq i64 %8616, 0
  %8636 = zext i1 %8635 to i8
  %8637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8636, i8* %8637, align 1, !tbaa !2448
  %8638 = lshr i64 %8616, 63
  %8639 = trunc i64 %8638 to i8
  %8640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8639, i8* %8640, align 1, !tbaa !2449
  %8641 = lshr i64 %8612, 63
  %8642 = lshr i64 %8613, 63
  %8643 = xor i64 %8638, %8641
  %8644 = xor i64 %8638, %8642
  %8645 = add nuw nsw i64 %8643, %8644
  %8646 = icmp eq i64 %8645, 2
  %8647 = zext i1 %8646 to i8
  %8648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8647, i8* %8648, align 1, !tbaa !2450
  %8649 = load i64, i64* %RBP
  %8650 = sub i64 %8649, 104
  %8651 = load i64, i64* %PC
  %8652 = add i64 %8651, 4
  store i64 %8652, i64* %PC
  %8653 = inttoptr i64 %8650 to i32*
  %8654 = load i32, i32* %8653
  %8655 = sext i32 %8654 to i64
  store i64 %8655, i64* %RCX, align 8, !tbaa !2428
  %8656 = load i64, i64* %RCX
  %8657 = load i64, i64* %PC
  %8658 = add i64 %8657, 7
  store i64 %8658, i64* %PC
  %8659 = sext i64 %8656 to i128
  %8660 = and i128 %8659, -18446744073709551616
  %8661 = zext i64 %8656 to i128
  %8662 = or i128 %8660, %8661
  %8663 = mul nsw i128 520, %8662
  %8664 = trunc i128 %8663 to i64
  store i64 %8664, i64* %RCX, align 8, !tbaa !2428
  %8665 = sext i64 %8664 to i128
  %8666 = icmp ne i128 %8665, %8663
  %8667 = zext i1 %8666 to i8
  %8668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8667, i8* %8668, align 1, !tbaa !2432
  %8669 = trunc i128 %8663 to i32
  %8670 = and i32 %8669, 255
  %8671 = call i32 @llvm.ctpop.i32(i32 %8670) #16
  %8672 = trunc i32 %8671 to i8
  %8673 = and i8 %8672, 1
  %8674 = xor i8 %8673, 1
  %8675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8674, i8* %8675, align 1, !tbaa !2446
  %8676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8676, align 1, !tbaa !2447
  %8677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8677, align 1, !tbaa !2448
  %8678 = lshr i64 %8664, 63
  %8679 = trunc i64 %8678 to i8
  %8680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8679, i8* %8680, align 1, !tbaa !2449
  %8681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8667, i8* %8681, align 1, !tbaa !2450
  %8682 = load i64, i64* %RAX
  %8683 = load i64, i64* %RCX
  %8684 = load i64, i64* %PC
  %8685 = add i64 %8684, 3
  store i64 %8685, i64* %PC
  %8686 = add i64 %8683, %8682
  store i64 %8686, i64* %RAX, align 8, !tbaa !2428
  %8687 = icmp ult i64 %8686, %8682
  %8688 = icmp ult i64 %8686, %8683
  %8689 = or i1 %8687, %8688
  %8690 = zext i1 %8689 to i8
  %8691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8690, i8* %8691, align 1, !tbaa !2432
  %8692 = trunc i64 %8686 to i32
  %8693 = and i32 %8692, 255
  %8694 = call i32 @llvm.ctpop.i32(i32 %8693) #16
  %8695 = trunc i32 %8694 to i8
  %8696 = and i8 %8695, 1
  %8697 = xor i8 %8696, 1
  %8698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8697, i8* %8698, align 1, !tbaa !2446
  %8699 = xor i64 %8683, %8682
  %8700 = xor i64 %8699, %8686
  %8701 = lshr i64 %8700, 4
  %8702 = trunc i64 %8701 to i8
  %8703 = and i8 %8702, 1
  %8704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8703, i8* %8704, align 1, !tbaa !2447
  %8705 = icmp eq i64 %8686, 0
  %8706 = zext i1 %8705 to i8
  %8707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8706, i8* %8707, align 1, !tbaa !2448
  %8708 = lshr i64 %8686, 63
  %8709 = trunc i64 %8708 to i8
  %8710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8709, i8* %8710, align 1, !tbaa !2449
  %8711 = lshr i64 %8682, 63
  %8712 = lshr i64 %8683, 63
  %8713 = xor i64 %8708, %8711
  %8714 = xor i64 %8708, %8712
  %8715 = add nuw nsw i64 %8713, %8714
  %8716 = icmp eq i64 %8715, 2
  %8717 = zext i1 %8716 to i8
  %8718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8717, i8* %8718, align 1, !tbaa !2450
  %8719 = load i64, i64* %RBP
  %8720 = sub i64 %8719, 108
  %8721 = load i64, i64* %PC
  %8722 = add i64 %8721, 4
  store i64 %8722, i64* %PC
  %8723 = inttoptr i64 %8720 to i32*
  %8724 = load i32, i32* %8723
  %8725 = sext i32 %8724 to i64
  store i64 %8725, i64* %RCX, align 8, !tbaa !2428
  %8726 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8727 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8728 = load i64, i64* %RAX
  %8729 = load i64, i64* %RCX
  %8730 = mul i64 %8729, 8
  %8731 = add i64 %8730, %8728
  %8732 = load i64, i64* %PC
  %8733 = add i64 %8732, 5
  store i64 %8733, i64* %PC
  %8734 = bitcast i8* %8727 to double*
  %8735 = load double, double* %8734, align 1
  %8736 = getelementptr inbounds i8, i8* %8727, i64 8
  %8737 = bitcast i8* %8736 to i64*
  %8738 = load i64, i64* %8737, align 1
  %8739 = inttoptr i64 %8731 to double*
  %8740 = load double, double* %8739
  %8741 = fmul double %8735, %8740
  %8742 = bitcast i8* %8726 to double*
  store double %8741, double* %8742, align 1, !tbaa !2452
  %8743 = getelementptr inbounds i8, i8* %8726, i64 8
  %8744 = bitcast i8* %8743 to i64*
  store i64 %8738, i64* %8744, align 1, !tbaa !2452
  %8745 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8746 = load i64, i64* %RBP
  %8747 = sub i64 %8746, 64
  %8748 = load i64, i64* %PC
  %8749 = add i64 %8748, 5
  store i64 %8749, i64* %PC
  %8750 = inttoptr i64 %8747 to double*
  %8751 = load double, double* %8750
  %8752 = bitcast i8* %8745 to double*
  store double %8751, double* %8752, align 1, !tbaa !2452
  %8753 = getelementptr inbounds i8, i8* %8745, i64 8
  %8754 = bitcast i8* %8753 to double*
  store double 0.000000e+00, double* %8754, align 1, !tbaa !2452
  %8755 = load i64, i64* %RBP
  %8756 = add i64 %8755, 64
  %8757 = load i64, i64* %PC
  %8758 = add i64 %8757, 4
  store i64 %8758, i64* %PC
  %8759 = inttoptr i64 %8756 to i64*
  %8760 = load i64, i64* %8759
  store i64 %8760, i64* %RAX, align 8, !tbaa !2428
  %8761 = load i64, i64* %RBP
  %8762 = sub i64 %8761, 100
  %8763 = load i64, i64* %PC
  %8764 = add i64 %8763, 4
  store i64 %8764, i64* %PC
  %8765 = inttoptr i64 %8762 to i32*
  %8766 = load i32, i32* %8765
  %8767 = sext i32 %8766 to i64
  store i64 %8767, i64* %RCX, align 8, !tbaa !2428
  %8768 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8769 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8770 = load i64, i64* %RAX
  %8771 = load i64, i64* %RCX
  %8772 = mul i64 %8771, 8
  %8773 = add i64 %8772, %8770
  %8774 = load i64, i64* %PC
  %8775 = add i64 %8774, 5
  store i64 %8775, i64* %PC
  %8776 = bitcast i8* %8769 to double*
  %8777 = load double, double* %8776, align 1
  %8778 = getelementptr inbounds i8, i8* %8769, i64 8
  %8779 = bitcast i8* %8778 to i64*
  %8780 = load i64, i64* %8779, align 1
  %8781 = inttoptr i64 %8773 to double*
  %8782 = load double, double* %8781
  %8783 = fmul double %8777, %8782
  %8784 = bitcast i8* %8768 to double*
  store double %8783, double* %8784, align 1, !tbaa !2452
  %8785 = getelementptr inbounds i8, i8* %8768, i64 8
  %8786 = bitcast i8* %8785 to i64*
  store i64 %8780, i64* %8786, align 1, !tbaa !2452
  %8787 = load i64, i64* %RBP
  %8788 = add i64 %8787, 80
  %8789 = load i64, i64* %PC
  %8790 = add i64 %8789, 4
  store i64 %8790, i64* %PC
  %8791 = inttoptr i64 %8788 to i64*
  %8792 = load i64, i64* %8791
  store i64 %8792, i64* %RAX, align 8, !tbaa !2428
  %8793 = load i64, i64* %RBP
  %8794 = sub i64 %8793, 108
  %8795 = load i64, i64* %PC
  %8796 = add i64 %8795, 4
  store i64 %8796, i64* %PC
  %8797 = inttoptr i64 %8794 to i32*
  %8798 = load i32, i32* %8797
  %8799 = sext i32 %8798 to i64
  store i64 %8799, i64* %RCX, align 8, !tbaa !2428
  %8800 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8801 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8802 = load i64, i64* %RAX
  %8803 = load i64, i64* %RCX
  %8804 = mul i64 %8803, 8
  %8805 = add i64 %8804, %8802
  %8806 = load i64, i64* %PC
  %8807 = add i64 %8806, 5
  store i64 %8807, i64* %PC
  %8808 = bitcast i8* %8801 to double*
  %8809 = load double, double* %8808, align 1
  %8810 = getelementptr inbounds i8, i8* %8801, i64 8
  %8811 = bitcast i8* %8810 to i64*
  %8812 = load i64, i64* %8811, align 1
  %8813 = inttoptr i64 %8805 to double*
  %8814 = load double, double* %8813
  %8815 = fdiv double %8809, %8814
  %8816 = bitcast i8* %8800 to double*
  store double %8815, double* %8816, align 1, !tbaa !2452
  %8817 = getelementptr inbounds i8, i8* %8800, i64 8
  %8818 = bitcast i8* %8817 to i64*
  store i64 %8812, i64* %8818, align 1, !tbaa !2452
  %8819 = load i64, i64* %RBP
  %8820 = add i64 %8819, 16
  %8821 = load i64, i64* %PC
  %8822 = add i64 %8821, 4
  store i64 %8822, i64* %PC
  %8823 = inttoptr i64 %8820 to i64*
  %8824 = load i64, i64* %8823
  store i64 %8824, i64* %RAX, align 8, !tbaa !2428
  %8825 = load i64, i64* %RBP
  %8826 = sub i64 %8825, 100
  %8827 = load i64, i64* %PC
  %8828 = add i64 %8827, 4
  store i64 %8828, i64* %PC
  %8829 = inttoptr i64 %8826 to i32*
  %8830 = load i32, i32* %8829
  %8831 = sext i32 %8830 to i64
  store i64 %8831, i64* %RCX, align 8, !tbaa !2428
  %8832 = load i64, i64* %RCX
  %8833 = load i64, i64* %PC
  %8834 = add i64 %8833, 7
  store i64 %8834, i64* %PC
  %8835 = sext i64 %8832 to i128
  %8836 = and i128 %8835, -18446744073709551616
  %8837 = zext i64 %8832 to i128
  %8838 = or i128 %8836, %8837
  %8839 = mul nsw i128 520, %8838
  %8840 = trunc i128 %8839 to i64
  store i64 %8840, i64* %RCX, align 8, !tbaa !2428
  %8841 = sext i64 %8840 to i128
  %8842 = icmp ne i128 %8841, %8839
  %8843 = zext i1 %8842 to i8
  %8844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8843, i8* %8844, align 1, !tbaa !2432
  %8845 = trunc i128 %8839 to i32
  %8846 = and i32 %8845, 255
  %8847 = call i32 @llvm.ctpop.i32(i32 %8846) #16
  %8848 = trunc i32 %8847 to i8
  %8849 = and i8 %8848, 1
  %8850 = xor i8 %8849, 1
  %8851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8850, i8* %8851, align 1, !tbaa !2446
  %8852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8852, align 1, !tbaa !2447
  %8853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8853, align 1, !tbaa !2448
  %8854 = lshr i64 %8840, 63
  %8855 = trunc i64 %8854 to i8
  %8856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8855, i8* %8856, align 1, !tbaa !2449
  %8857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8843, i8* %8857, align 1, !tbaa !2450
  %8858 = load i64, i64* %RAX
  %8859 = load i64, i64* %RCX
  %8860 = load i64, i64* %PC
  %8861 = add i64 %8860, 3
  store i64 %8861, i64* %PC
  %8862 = add i64 %8859, %8858
  store i64 %8862, i64* %RAX, align 8, !tbaa !2428
  %8863 = icmp ult i64 %8862, %8858
  %8864 = icmp ult i64 %8862, %8859
  %8865 = or i1 %8863, %8864
  %8866 = zext i1 %8865 to i8
  %8867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8866, i8* %8867, align 1, !tbaa !2432
  %8868 = trunc i64 %8862 to i32
  %8869 = and i32 %8868, 255
  %8870 = call i32 @llvm.ctpop.i32(i32 %8869) #16
  %8871 = trunc i32 %8870 to i8
  %8872 = and i8 %8871, 1
  %8873 = xor i8 %8872, 1
  %8874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8873, i8* %8874, align 1, !tbaa !2446
  %8875 = xor i64 %8859, %8858
  %8876 = xor i64 %8875, %8862
  %8877 = lshr i64 %8876, 4
  %8878 = trunc i64 %8877 to i8
  %8879 = and i8 %8878, 1
  %8880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8879, i8* %8880, align 1, !tbaa !2447
  %8881 = icmp eq i64 %8862, 0
  %8882 = zext i1 %8881 to i8
  %8883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8882, i8* %8883, align 1, !tbaa !2448
  %8884 = lshr i64 %8862, 63
  %8885 = trunc i64 %8884 to i8
  %8886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8885, i8* %8886, align 1, !tbaa !2449
  %8887 = lshr i64 %8858, 63
  %8888 = lshr i64 %8859, 63
  %8889 = xor i64 %8884, %8887
  %8890 = xor i64 %8884, %8888
  %8891 = add nuw nsw i64 %8889, %8890
  %8892 = icmp eq i64 %8891, 2
  %8893 = zext i1 %8892 to i8
  %8894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8893, i8* %8894, align 1, !tbaa !2450
  %8895 = load i64, i64* %RBP
  %8896 = sub i64 %8895, 104
  %8897 = load i64, i64* %PC
  %8898 = add i64 %8897, 4
  store i64 %8898, i64* %PC
  %8899 = inttoptr i64 %8896 to i32*
  %8900 = load i32, i32* %8899
  %8901 = sext i32 %8900 to i64
  store i64 %8901, i64* %RCX, align 8, !tbaa !2428
  %8902 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8904 = load i64, i64* %RAX
  %8905 = load i64, i64* %RCX
  %8906 = mul i64 %8905, 8
  %8907 = add i64 %8906, %8904
  %8908 = load i64, i64* %PC
  %8909 = add i64 %8908, 5
  store i64 %8909, i64* %PC
  %8910 = bitcast i8* %8903 to double*
  %8911 = load double, double* %8910, align 1
  %8912 = getelementptr inbounds i8, i8* %8903, i64 8
  %8913 = bitcast i8* %8912 to i64*
  %8914 = load i64, i64* %8913, align 1
  %8915 = inttoptr i64 %8907 to double*
  %8916 = load double, double* %8915
  %8917 = fmul double %8911, %8916
  %8918 = bitcast i8* %8902 to double*
  store double %8917, double* %8918, align 1, !tbaa !2452
  %8919 = getelementptr inbounds i8, i8* %8902, i64 8
  %8920 = bitcast i8* %8919 to i64*
  store i64 %8914, i64* %8920, align 1, !tbaa !2452
  %8921 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8922 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8923 = bitcast %union.vec128_t* %XMM1 to i8*
  %8924 = load i64, i64* %PC
  %8925 = add i64 %8924, 4
  store i64 %8925, i64* %PC
  %8926 = bitcast i8* %8922 to double*
  %8927 = load double, double* %8926, align 1
  %8928 = getelementptr inbounds i8, i8* %8922, i64 8
  %8929 = bitcast i8* %8928 to i64*
  %8930 = load i64, i64* %8929, align 1
  %8931 = bitcast i8* %8923 to double*
  %8932 = load double, double* %8931, align 1
  %8933 = fadd double %8927, %8932
  %8934 = bitcast i8* %8921 to double*
  store double %8933, double* %8934, align 1, !tbaa !2452
  %8935 = getelementptr inbounds i8, i8* %8921, i64 8
  %8936 = bitcast i8* %8935 to i64*
  store i64 %8930, i64* %8936, align 1, !tbaa !2452
  %8937 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8938 = load i64, i64* %RBP
  %8939 = sub i64 %8938, 64
  %8940 = load i64, i64* %PC
  %8941 = add i64 %8940, 5
  store i64 %8941, i64* %PC
  %8942 = inttoptr i64 %8939 to double*
  %8943 = load double, double* %8942
  %8944 = bitcast i8* %8937 to double*
  store double %8943, double* %8944, align 1, !tbaa !2452
  %8945 = getelementptr inbounds i8, i8* %8937, i64 8
  %8946 = bitcast i8* %8945 to double*
  store double 0.000000e+00, double* %8946, align 1, !tbaa !2452
  %8947 = load i64, i64* %RBP
  %8948 = add i64 %8947, 56
  %8949 = load i64, i64* %PC
  %8950 = add i64 %8949, 4
  store i64 %8950, i64* %PC
  %8951 = inttoptr i64 %8948 to i64*
  %8952 = load i64, i64* %8951
  store i64 %8952, i64* %RAX, align 8, !tbaa !2428
  %8953 = load i64, i64* %RBP
  %8954 = sub i64 %8953, 100
  %8955 = load i64, i64* %PC
  %8956 = add i64 %8955, 4
  store i64 %8956, i64* %PC
  %8957 = inttoptr i64 %8954 to i32*
  %8958 = load i32, i32* %8957
  %8959 = sext i32 %8958 to i64
  store i64 %8959, i64* %RCX, align 8, !tbaa !2428
  %8960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8961 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8962 = load i64, i64* %RAX
  %8963 = load i64, i64* %RCX
  %8964 = mul i64 %8963, 8
  %8965 = add i64 %8964, %8962
  %8966 = load i64, i64* %PC
  %8967 = add i64 %8966, 5
  store i64 %8967, i64* %PC
  %8968 = bitcast i8* %8961 to double*
  %8969 = load double, double* %8968, align 1
  %8970 = getelementptr inbounds i8, i8* %8961, i64 8
  %8971 = bitcast i8* %8970 to i64*
  %8972 = load i64, i64* %8971, align 1
  %8973 = inttoptr i64 %8965 to double*
  %8974 = load double, double* %8973
  %8975 = fmul double %8969, %8974
  %8976 = bitcast i8* %8960 to double*
  store double %8975, double* %8976, align 1, !tbaa !2452
  %8977 = getelementptr inbounds i8, i8* %8960, i64 8
  %8978 = bitcast i8* %8977 to i64*
  store i64 %8972, i64* %8978, align 1, !tbaa !2452
  %8979 = load i64, i64* %RBP
  %8980 = add i64 %8979, 80
  %8981 = load i64, i64* %PC
  %8982 = add i64 %8981, 4
  store i64 %8982, i64* %PC
  %8983 = inttoptr i64 %8980 to i64*
  %8984 = load i64, i64* %8983
  store i64 %8984, i64* %RAX, align 8, !tbaa !2428
  %8985 = load i64, i64* %RBP
  %8986 = sub i64 %8985, 108
  %8987 = load i64, i64* %PC
  %8988 = add i64 %8987, 4
  store i64 %8988, i64* %PC
  %8989 = inttoptr i64 %8986 to i32*
  %8990 = load i32, i32* %8989
  %8991 = sext i32 %8990 to i64
  store i64 %8991, i64* %RCX, align 8, !tbaa !2428
  %8992 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8993 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8994 = load i64, i64* %RAX
  %8995 = load i64, i64* %RCX
  %8996 = mul i64 %8995, 8
  %8997 = add i64 %8996, %8994
  %8998 = load i64, i64* %PC
  %8999 = add i64 %8998, 5
  store i64 %8999, i64* %PC
  %9000 = bitcast i8* %8993 to double*
  %9001 = load double, double* %9000, align 1
  %9002 = getelementptr inbounds i8, i8* %8993, i64 8
  %9003 = bitcast i8* %9002 to i64*
  %9004 = load i64, i64* %9003, align 1
  %9005 = inttoptr i64 %8997 to double*
  %9006 = load double, double* %9005
  %9007 = fdiv double %9001, %9006
  %9008 = bitcast i8* %8992 to double*
  store double %9007, double* %9008, align 1, !tbaa !2452
  %9009 = getelementptr inbounds i8, i8* %8992, i64 8
  %9010 = bitcast i8* %9009 to i64*
  store i64 %9004, i64* %9010, align 1, !tbaa !2452
  %9011 = load i64, i64* %RBP
  %9012 = add i64 %9011, 24
  %9013 = load i64, i64* %PC
  %9014 = add i64 %9013, 4
  store i64 %9014, i64* %PC
  %9015 = inttoptr i64 %9012 to i64*
  %9016 = load i64, i64* %9015
  store i64 %9016, i64* %RAX, align 8, !tbaa !2428
  %9017 = load i64, i64* %RBP
  %9018 = sub i64 %9017, 100
  %9019 = load i64, i64* %PC
  %9020 = add i64 %9019, 4
  store i64 %9020, i64* %PC
  %9021 = inttoptr i64 %9018 to i32*
  %9022 = load i32, i32* %9021
  %9023 = sext i32 %9022 to i64
  store i64 %9023, i64* %RCX, align 8, !tbaa !2428
  %9024 = load i64, i64* %RCX
  %9025 = load i64, i64* %PC
  %9026 = add i64 %9025, 7
  store i64 %9026, i64* %PC
  %9027 = sext i64 %9024 to i128
  %9028 = and i128 %9027, -18446744073709551616
  %9029 = zext i64 %9024 to i128
  %9030 = or i128 %9028, %9029
  %9031 = mul nsw i128 33800, %9030
  %9032 = trunc i128 %9031 to i64
  store i64 %9032, i64* %RCX, align 8, !tbaa !2428
  %9033 = sext i64 %9032 to i128
  %9034 = icmp ne i128 %9033, %9031
  %9035 = zext i1 %9034 to i8
  %9036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9035, i8* %9036, align 1, !tbaa !2432
  %9037 = trunc i128 %9031 to i32
  %9038 = and i32 %9037, 255
  %9039 = call i32 @llvm.ctpop.i32(i32 %9038) #16
  %9040 = trunc i32 %9039 to i8
  %9041 = and i8 %9040, 1
  %9042 = xor i8 %9041, 1
  %9043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9042, i8* %9043, align 1, !tbaa !2446
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9044, align 1, !tbaa !2447
  %9045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9045, align 1, !tbaa !2448
  %9046 = lshr i64 %9032, 63
  %9047 = trunc i64 %9046 to i8
  %9048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9047, i8* %9048, align 1, !tbaa !2449
  %9049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9035, i8* %9049, align 1, !tbaa !2450
  %9050 = load i64, i64* %RAX
  %9051 = load i64, i64* %RCX
  %9052 = load i64, i64* %PC
  %9053 = add i64 %9052, 3
  store i64 %9053, i64* %PC
  %9054 = add i64 %9051, %9050
  store i64 %9054, i64* %RAX, align 8, !tbaa !2428
  %9055 = icmp ult i64 %9054, %9050
  %9056 = icmp ult i64 %9054, %9051
  %9057 = or i1 %9055, %9056
  %9058 = zext i1 %9057 to i8
  %9059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9058, i8* %9059, align 1, !tbaa !2432
  %9060 = trunc i64 %9054 to i32
  %9061 = and i32 %9060, 255
  %9062 = call i32 @llvm.ctpop.i32(i32 %9061) #16
  %9063 = trunc i32 %9062 to i8
  %9064 = and i8 %9063, 1
  %9065 = xor i8 %9064, 1
  %9066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9065, i8* %9066, align 1, !tbaa !2446
  %9067 = xor i64 %9051, %9050
  %9068 = xor i64 %9067, %9054
  %9069 = lshr i64 %9068, 4
  %9070 = trunc i64 %9069 to i8
  %9071 = and i8 %9070, 1
  %9072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9071, i8* %9072, align 1, !tbaa !2447
  %9073 = icmp eq i64 %9054, 0
  %9074 = zext i1 %9073 to i8
  %9075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9074, i8* %9075, align 1, !tbaa !2448
  %9076 = lshr i64 %9054, 63
  %9077 = trunc i64 %9076 to i8
  %9078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9077, i8* %9078, align 1, !tbaa !2449
  %9079 = lshr i64 %9050, 63
  %9080 = lshr i64 %9051, 63
  %9081 = xor i64 %9076, %9079
  %9082 = xor i64 %9076, %9080
  %9083 = add nuw nsw i64 %9081, %9082
  %9084 = icmp eq i64 %9083, 2
  %9085 = zext i1 %9084 to i8
  %9086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9085, i8* %9086, align 1, !tbaa !2450
  %9087 = load i64, i64* %RBP
  %9088 = sub i64 %9087, 104
  %9089 = load i64, i64* %PC
  %9090 = add i64 %9089, 4
  store i64 %9090, i64* %PC
  %9091 = inttoptr i64 %9088 to i32*
  %9092 = load i32, i32* %9091
  %9093 = sext i32 %9092 to i64
  store i64 %9093, i64* %RCX, align 8, !tbaa !2428
  %9094 = load i64, i64* %RCX
  %9095 = load i64, i64* %PC
  %9096 = add i64 %9095, 7
  store i64 %9096, i64* %PC
  %9097 = sext i64 %9094 to i128
  %9098 = and i128 %9097, -18446744073709551616
  %9099 = zext i64 %9094 to i128
  %9100 = or i128 %9098, %9099
  %9101 = mul nsw i128 520, %9100
  %9102 = trunc i128 %9101 to i64
  store i64 %9102, i64* %RCX, align 8, !tbaa !2428
  %9103 = sext i64 %9102 to i128
  %9104 = icmp ne i128 %9103, %9101
  %9105 = zext i1 %9104 to i8
  %9106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9105, i8* %9106, align 1, !tbaa !2432
  %9107 = trunc i128 %9101 to i32
  %9108 = and i32 %9107, 255
  %9109 = call i32 @llvm.ctpop.i32(i32 %9108) #16
  %9110 = trunc i32 %9109 to i8
  %9111 = and i8 %9110, 1
  %9112 = xor i8 %9111, 1
  %9113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9112, i8* %9113, align 1, !tbaa !2446
  %9114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9114, align 1, !tbaa !2447
  %9115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9115, align 1, !tbaa !2448
  %9116 = lshr i64 %9102, 63
  %9117 = trunc i64 %9116 to i8
  %9118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9117, i8* %9118, align 1, !tbaa !2449
  %9119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9105, i8* %9119, align 1, !tbaa !2450
  %9120 = load i64, i64* %RAX
  %9121 = load i64, i64* %RCX
  %9122 = load i64, i64* %PC
  %9123 = add i64 %9122, 3
  store i64 %9123, i64* %PC
  %9124 = add i64 %9121, %9120
  store i64 %9124, i64* %RAX, align 8, !tbaa !2428
  %9125 = icmp ult i64 %9124, %9120
  %9126 = icmp ult i64 %9124, %9121
  %9127 = or i1 %9125, %9126
  %9128 = zext i1 %9127 to i8
  %9129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9128, i8* %9129, align 1, !tbaa !2432
  %9130 = trunc i64 %9124 to i32
  %9131 = and i32 %9130, 255
  %9132 = call i32 @llvm.ctpop.i32(i32 %9131) #16
  %9133 = trunc i32 %9132 to i8
  %9134 = and i8 %9133, 1
  %9135 = xor i8 %9134, 1
  %9136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9135, i8* %9136, align 1, !tbaa !2446
  %9137 = xor i64 %9121, %9120
  %9138 = xor i64 %9137, %9124
  %9139 = lshr i64 %9138, 4
  %9140 = trunc i64 %9139 to i8
  %9141 = and i8 %9140, 1
  %9142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9141, i8* %9142, align 1, !tbaa !2447
  %9143 = icmp eq i64 %9124, 0
  %9144 = zext i1 %9143 to i8
  %9145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9144, i8* %9145, align 1, !tbaa !2448
  %9146 = lshr i64 %9124, 63
  %9147 = trunc i64 %9146 to i8
  %9148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9147, i8* %9148, align 1, !tbaa !2449
  %9149 = lshr i64 %9120, 63
  %9150 = lshr i64 %9121, 63
  %9151 = xor i64 %9146, %9149
  %9152 = xor i64 %9146, %9150
  %9153 = add nuw nsw i64 %9151, %9152
  %9154 = icmp eq i64 %9153, 2
  %9155 = zext i1 %9154 to i8
  %9156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9155, i8* %9156, align 1, !tbaa !2450
  %9157 = load i64, i64* %RBP
  %9158 = sub i64 %9157, 108
  %9159 = load i64, i64* %PC
  %9160 = add i64 %9159, 4
  store i64 %9160, i64* %PC
  %9161 = inttoptr i64 %9158 to i32*
  %9162 = load i32, i32* %9161
  %9163 = sext i32 %9162 to i64
  store i64 %9163, i64* %RCX, align 8, !tbaa !2428
  %9164 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9165 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9166 = load i64, i64* %RAX
  %9167 = load i64, i64* %RCX
  %9168 = mul i64 %9167, 8
  %9169 = add i64 %9168, %9166
  %9170 = load i64, i64* %PC
  %9171 = add i64 %9170, 5
  store i64 %9171, i64* %PC
  %9172 = bitcast i8* %9165 to double*
  %9173 = load double, double* %9172, align 1
  %9174 = getelementptr inbounds i8, i8* %9165, i64 8
  %9175 = bitcast i8* %9174 to i64*
  %9176 = load i64, i64* %9175, align 1
  %9177 = inttoptr i64 %9169 to double*
  %9178 = load double, double* %9177
  %9179 = fmul double %9173, %9178
  %9180 = bitcast i8* %9164 to double*
  store double %9179, double* %9180, align 1, !tbaa !2452
  %9181 = getelementptr inbounds i8, i8* %9164, i64 8
  %9182 = bitcast i8* %9181 to i64*
  store i64 %9176, i64* %9182, align 1, !tbaa !2452
  %9183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9185 = bitcast %union.vec128_t* %XMM1 to i8*
  %9186 = load i64, i64* %PC
  %9187 = add i64 %9186, 4
  store i64 %9187, i64* %PC
  %9188 = bitcast i8* %9184 to double*
  %9189 = load double, double* %9188, align 1
  %9190 = getelementptr inbounds i8, i8* %9184, i64 8
  %9191 = bitcast i8* %9190 to i64*
  %9192 = load i64, i64* %9191, align 1
  %9193 = bitcast i8* %9185 to double*
  %9194 = load double, double* %9193, align 1
  %9195 = fsub double %9189, %9194
  %9196 = bitcast i8* %9183 to double*
  store double %9195, double* %9196, align 1, !tbaa !2452
  %9197 = getelementptr inbounds i8, i8* %9183, i64 8
  %9198 = bitcast i8* %9197 to i64*
  store i64 %9192, i64* %9198, align 1, !tbaa !2452
  %9199 = load i64, i64* %RBP
  %9200 = add i64 %9199, 48
  %9201 = load i64, i64* %PC
  %9202 = add i64 %9201, 4
  store i64 %9202, i64* %PC
  %9203 = inttoptr i64 %9200 to i64*
  %9204 = load i64, i64* %9203
  store i64 %9204, i64* %RAX, align 8, !tbaa !2428
  %9205 = load i64, i64* %RBP
  %9206 = sub i64 %9205, 100
  %9207 = load i64, i64* %PC
  %9208 = add i64 %9207, 4
  store i64 %9208, i64* %PC
  %9209 = inttoptr i64 %9206 to i32*
  %9210 = load i32, i32* %9209
  %9211 = sext i32 %9210 to i64
  store i64 %9211, i64* %RCX, align 8, !tbaa !2428
  %9212 = load i64, i64* %RCX
  %9213 = load i64, i64* %PC
  %9214 = add i64 %9213, 7
  store i64 %9214, i64* %PC
  %9215 = sext i64 %9212 to i128
  %9216 = and i128 %9215, -18446744073709551616
  %9217 = zext i64 %9212 to i128
  %9218 = or i128 %9216, %9217
  %9219 = mul nsw i128 33800, %9218
  %9220 = trunc i128 %9219 to i64
  store i64 %9220, i64* %RCX, align 8, !tbaa !2428
  %9221 = sext i64 %9220 to i128
  %9222 = icmp ne i128 %9221, %9219
  %9223 = zext i1 %9222 to i8
  %9224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9223, i8* %9224, align 1, !tbaa !2432
  %9225 = trunc i128 %9219 to i32
  %9226 = and i32 %9225, 255
  %9227 = call i32 @llvm.ctpop.i32(i32 %9226) #16
  %9228 = trunc i32 %9227 to i8
  %9229 = and i8 %9228, 1
  %9230 = xor i8 %9229, 1
  %9231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9230, i8* %9231, align 1, !tbaa !2446
  %9232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9232, align 1, !tbaa !2447
  %9233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9233, align 1, !tbaa !2448
  %9234 = lshr i64 %9220, 63
  %9235 = trunc i64 %9234 to i8
  %9236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9235, i8* %9236, align 1, !tbaa !2449
  %9237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9223, i8* %9237, align 1, !tbaa !2450
  %9238 = load i64, i64* %RAX
  %9239 = load i64, i64* %RCX
  %9240 = load i64, i64* %PC
  %9241 = add i64 %9240, 3
  store i64 %9241, i64* %PC
  %9242 = add i64 %9239, %9238
  store i64 %9242, i64* %RAX, align 8, !tbaa !2428
  %9243 = icmp ult i64 %9242, %9238
  %9244 = icmp ult i64 %9242, %9239
  %9245 = or i1 %9243, %9244
  %9246 = zext i1 %9245 to i8
  %9247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9246, i8* %9247, align 1, !tbaa !2432
  %9248 = trunc i64 %9242 to i32
  %9249 = and i32 %9248, 255
  %9250 = call i32 @llvm.ctpop.i32(i32 %9249) #16
  %9251 = trunc i32 %9250 to i8
  %9252 = and i8 %9251, 1
  %9253 = xor i8 %9252, 1
  %9254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9253, i8* %9254, align 1, !tbaa !2446
  %9255 = xor i64 %9239, %9238
  %9256 = xor i64 %9255, %9242
  %9257 = lshr i64 %9256, 4
  %9258 = trunc i64 %9257 to i8
  %9259 = and i8 %9258, 1
  %9260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9259, i8* %9260, align 1, !tbaa !2447
  %9261 = icmp eq i64 %9242, 0
  %9262 = zext i1 %9261 to i8
  %9263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9262, i8* %9263, align 1, !tbaa !2448
  %9264 = lshr i64 %9242, 63
  %9265 = trunc i64 %9264 to i8
  %9266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9265, i8* %9266, align 1, !tbaa !2449
  %9267 = lshr i64 %9238, 63
  %9268 = lshr i64 %9239, 63
  %9269 = xor i64 %9264, %9267
  %9270 = xor i64 %9264, %9268
  %9271 = add nuw nsw i64 %9269, %9270
  %9272 = icmp eq i64 %9271, 2
  %9273 = zext i1 %9272 to i8
  %9274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9273, i8* %9274, align 1, !tbaa !2450
  %9275 = load i64, i64* %RBP
  %9276 = sub i64 %9275, 104
  %9277 = load i64, i64* %PC
  %9278 = add i64 %9277, 4
  store i64 %9278, i64* %PC
  %9279 = inttoptr i64 %9276 to i32*
  %9280 = load i32, i32* %9279
  %9281 = sext i32 %9280 to i64
  store i64 %9281, i64* %RCX, align 8, !tbaa !2428
  %9282 = load i64, i64* %RCX
  %9283 = load i64, i64* %PC
  %9284 = add i64 %9283, 7
  store i64 %9284, i64* %PC
  %9285 = sext i64 %9282 to i128
  %9286 = and i128 %9285, -18446744073709551616
  %9287 = zext i64 %9282 to i128
  %9288 = or i128 %9286, %9287
  %9289 = mul nsw i128 520, %9288
  %9290 = trunc i128 %9289 to i64
  store i64 %9290, i64* %RCX, align 8, !tbaa !2428
  %9291 = sext i64 %9290 to i128
  %9292 = icmp ne i128 %9291, %9289
  %9293 = zext i1 %9292 to i8
  %9294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9293, i8* %9294, align 1, !tbaa !2432
  %9295 = trunc i128 %9289 to i32
  %9296 = and i32 %9295, 255
  %9297 = call i32 @llvm.ctpop.i32(i32 %9296) #16
  %9298 = trunc i32 %9297 to i8
  %9299 = and i8 %9298, 1
  %9300 = xor i8 %9299, 1
  %9301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9300, i8* %9301, align 1, !tbaa !2446
  %9302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9302, align 1, !tbaa !2447
  %9303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9303, align 1, !tbaa !2448
  %9304 = lshr i64 %9290, 63
  %9305 = trunc i64 %9304 to i8
  %9306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9305, i8* %9306, align 1, !tbaa !2449
  %9307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9293, i8* %9307, align 1, !tbaa !2450
  %9308 = load i64, i64* %RAX
  %9309 = load i64, i64* %RCX
  %9310 = load i64, i64* %PC
  %9311 = add i64 %9310, 3
  store i64 %9311, i64* %PC
  %9312 = add i64 %9309, %9308
  store i64 %9312, i64* %RAX, align 8, !tbaa !2428
  %9313 = icmp ult i64 %9312, %9308
  %9314 = icmp ult i64 %9312, %9309
  %9315 = or i1 %9313, %9314
  %9316 = zext i1 %9315 to i8
  %9317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9316, i8* %9317, align 1, !tbaa !2432
  %9318 = trunc i64 %9312 to i32
  %9319 = and i32 %9318, 255
  %9320 = call i32 @llvm.ctpop.i32(i32 %9319) #16
  %9321 = trunc i32 %9320 to i8
  %9322 = and i8 %9321, 1
  %9323 = xor i8 %9322, 1
  %9324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9323, i8* %9324, align 1, !tbaa !2446
  %9325 = xor i64 %9309, %9308
  %9326 = xor i64 %9325, %9312
  %9327 = lshr i64 %9326, 4
  %9328 = trunc i64 %9327 to i8
  %9329 = and i8 %9328, 1
  %9330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9329, i8* %9330, align 1, !tbaa !2447
  %9331 = icmp eq i64 %9312, 0
  %9332 = zext i1 %9331 to i8
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9332, i8* %9333, align 1, !tbaa !2448
  %9334 = lshr i64 %9312, 63
  %9335 = trunc i64 %9334 to i8
  %9336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9335, i8* %9336, align 1, !tbaa !2449
  %9337 = lshr i64 %9308, 63
  %9338 = lshr i64 %9309, 63
  %9339 = xor i64 %9334, %9337
  %9340 = xor i64 %9334, %9338
  %9341 = add nuw nsw i64 %9339, %9340
  %9342 = icmp eq i64 %9341, 2
  %9343 = zext i1 %9342 to i8
  %9344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9343, i8* %9344, align 1, !tbaa !2450
  %9345 = load i64, i64* %RBP
  %9346 = sub i64 %9345, 108
  %9347 = load i64, i64* %PC
  %9348 = add i64 %9347, 4
  store i64 %9348, i64* %PC
  %9349 = inttoptr i64 %9346 to i32*
  %9350 = load i32, i32* %9349
  %9351 = sext i32 %9350 to i64
  store i64 %9351, i64* %RCX, align 8, !tbaa !2428
  %9352 = load i64, i64* %RAX
  %9353 = load i64, i64* %RCX
  %9354 = mul i64 %9353, 8
  %9355 = add i64 %9354, %9352
  %9356 = bitcast %union.vec128_t* %XMM0 to i8*
  %9357 = load i64, i64* %PC
  %9358 = add i64 %9357, 5
  store i64 %9358, i64* %PC
  %9359 = bitcast i8* %9356 to double*
  %9360 = load double, double* %9359, align 1
  %9361 = inttoptr i64 %9355 to double*
  store double %9360, double* %9361
  %9362 = load i64, i64* %RBP
  %9363 = add i64 %9362, 16
  %9364 = load i64, i64* %PC
  %9365 = add i64 %9364, 4
  store i64 %9365, i64* %PC
  %9366 = inttoptr i64 %9363 to i64*
  %9367 = load i64, i64* %9366
  store i64 %9367, i64* %RAX, align 8, !tbaa !2428
  %9368 = load i64, i64* %RBP
  %9369 = sub i64 %9368, 100
  %9370 = load i64, i64* %PC
  %9371 = add i64 %9370, 4
  store i64 %9371, i64* %PC
  %9372 = inttoptr i64 %9369 to i32*
  %9373 = load i32, i32* %9372
  %9374 = sext i32 %9373 to i64
  store i64 %9374, i64* %RCX, align 8, !tbaa !2428
  %9375 = load i64, i64* %RCX
  %9376 = load i64, i64* %PC
  %9377 = add i64 %9376, 7
  store i64 %9377, i64* %PC
  %9378 = sext i64 %9375 to i128
  %9379 = and i128 %9378, -18446744073709551616
  %9380 = zext i64 %9375 to i128
  %9381 = or i128 %9379, %9380
  %9382 = mul nsw i128 520, %9381
  %9383 = trunc i128 %9382 to i64
  store i64 %9383, i64* %RCX, align 8, !tbaa !2428
  %9384 = sext i64 %9383 to i128
  %9385 = icmp ne i128 %9384, %9382
  %9386 = zext i1 %9385 to i8
  %9387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9386, i8* %9387, align 1, !tbaa !2432
  %9388 = trunc i128 %9382 to i32
  %9389 = and i32 %9388, 255
  %9390 = call i32 @llvm.ctpop.i32(i32 %9389) #16
  %9391 = trunc i32 %9390 to i8
  %9392 = and i8 %9391, 1
  %9393 = xor i8 %9392, 1
  %9394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9393, i8* %9394, align 1, !tbaa !2446
  %9395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9395, align 1, !tbaa !2447
  %9396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9396, align 1, !tbaa !2448
  %9397 = lshr i64 %9383, 63
  %9398 = trunc i64 %9397 to i8
  %9399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9398, i8* %9399, align 1, !tbaa !2449
  %9400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9386, i8* %9400, align 1, !tbaa !2450
  %9401 = load i64, i64* %RAX
  %9402 = load i64, i64* %RCX
  %9403 = load i64, i64* %PC
  %9404 = add i64 %9403, 3
  store i64 %9404, i64* %PC
  %9405 = add i64 %9402, %9401
  store i64 %9405, i64* %RAX, align 8, !tbaa !2428
  %9406 = icmp ult i64 %9405, %9401
  %9407 = icmp ult i64 %9405, %9402
  %9408 = or i1 %9406, %9407
  %9409 = zext i1 %9408 to i8
  %9410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9409, i8* %9410, align 1, !tbaa !2432
  %9411 = trunc i64 %9405 to i32
  %9412 = and i32 %9411, 255
  %9413 = call i32 @llvm.ctpop.i32(i32 %9412) #16
  %9414 = trunc i32 %9413 to i8
  %9415 = and i8 %9414, 1
  %9416 = xor i8 %9415, 1
  %9417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9416, i8* %9417, align 1, !tbaa !2446
  %9418 = xor i64 %9402, %9401
  %9419 = xor i64 %9418, %9405
  %9420 = lshr i64 %9419, 4
  %9421 = trunc i64 %9420 to i8
  %9422 = and i8 %9421, 1
  %9423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9422, i8* %9423, align 1, !tbaa !2447
  %9424 = icmp eq i64 %9405, 0
  %9425 = zext i1 %9424 to i8
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9425, i8* %9426, align 1, !tbaa !2448
  %9427 = lshr i64 %9405, 63
  %9428 = trunc i64 %9427 to i8
  %9429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9428, i8* %9429, align 1, !tbaa !2449
  %9430 = lshr i64 %9401, 63
  %9431 = lshr i64 %9402, 63
  %9432 = xor i64 %9427, %9430
  %9433 = xor i64 %9427, %9431
  %9434 = add nuw nsw i64 %9432, %9433
  %9435 = icmp eq i64 %9434, 2
  %9436 = zext i1 %9435 to i8
  %9437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9436, i8* %9437, align 1, !tbaa !2450
  %9438 = load i64, i64* %RBP
  %9439 = sub i64 %9438, 104
  %9440 = load i64, i64* %PC
  %9441 = add i64 %9440, 4
  store i64 %9441, i64* %PC
  %9442 = inttoptr i64 %9439 to i32*
  %9443 = load i32, i32* %9442
  %9444 = sext i32 %9443 to i64
  store i64 %9444, i64* %RCX, align 8, !tbaa !2428
  %9445 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9446 = load i64, i64* %RAX
  %9447 = load i64, i64* %RCX
  %9448 = mul i64 %9447, 8
  %9449 = add i64 %9448, %9446
  %9450 = load i64, i64* %PC
  %9451 = add i64 %9450, 5
  store i64 %9451, i64* %PC
  %9452 = inttoptr i64 %9449 to double*
  %9453 = load double, double* %9452
  %9454 = bitcast i8* %9445 to double*
  store double %9453, double* %9454, align 1, !tbaa !2452
  %9455 = getelementptr inbounds i8, i8* %9445, i64 8
  %9456 = bitcast i8* %9455 to double*
  store double 0.000000e+00, double* %9456, align 1, !tbaa !2452
  %9457 = load i64, i64* %RBP
  %9458 = add i64 %9457, 24
  %9459 = load i64, i64* %PC
  %9460 = add i64 %9459, 4
  store i64 %9460, i64* %PC
  %9461 = inttoptr i64 %9458 to i64*
  %9462 = load i64, i64* %9461
  store i64 %9462, i64* %RAX, align 8, !tbaa !2428
  %9463 = load i64, i64* %RBP
  %9464 = sub i64 %9463, 100
  %9465 = load i64, i64* %PC
  %9466 = add i64 %9465, 4
  store i64 %9466, i64* %PC
  %9467 = inttoptr i64 %9464 to i32*
  %9468 = load i32, i32* %9467
  %9469 = sext i32 %9468 to i64
  store i64 %9469, i64* %RCX, align 8, !tbaa !2428
  %9470 = load i64, i64* %RCX
  %9471 = load i64, i64* %PC
  %9472 = add i64 %9471, 7
  store i64 %9472, i64* %PC
  %9473 = sext i64 %9470 to i128
  %9474 = and i128 %9473, -18446744073709551616
  %9475 = zext i64 %9470 to i128
  %9476 = or i128 %9474, %9475
  %9477 = mul nsw i128 33800, %9476
  %9478 = trunc i128 %9477 to i64
  store i64 %9478, i64* %RCX, align 8, !tbaa !2428
  %9479 = sext i64 %9478 to i128
  %9480 = icmp ne i128 %9479, %9477
  %9481 = zext i1 %9480 to i8
  %9482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9481, i8* %9482, align 1, !tbaa !2432
  %9483 = trunc i128 %9477 to i32
  %9484 = and i32 %9483, 255
  %9485 = call i32 @llvm.ctpop.i32(i32 %9484) #16
  %9486 = trunc i32 %9485 to i8
  %9487 = and i8 %9486, 1
  %9488 = xor i8 %9487, 1
  %9489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9488, i8* %9489, align 1, !tbaa !2446
  %9490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9490, align 1, !tbaa !2447
  %9491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9491, align 1, !tbaa !2448
  %9492 = lshr i64 %9478, 63
  %9493 = trunc i64 %9492 to i8
  %9494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9493, i8* %9494, align 1, !tbaa !2449
  %9495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9481, i8* %9495, align 1, !tbaa !2450
  %9496 = load i64, i64* %RAX
  %9497 = load i64, i64* %RCX
  %9498 = load i64, i64* %PC
  %9499 = add i64 %9498, 3
  store i64 %9499, i64* %PC
  %9500 = add i64 %9497, %9496
  store i64 %9500, i64* %RAX, align 8, !tbaa !2428
  %9501 = icmp ult i64 %9500, %9496
  %9502 = icmp ult i64 %9500, %9497
  %9503 = or i1 %9501, %9502
  %9504 = zext i1 %9503 to i8
  %9505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9504, i8* %9505, align 1, !tbaa !2432
  %9506 = trunc i64 %9500 to i32
  %9507 = and i32 %9506, 255
  %9508 = call i32 @llvm.ctpop.i32(i32 %9507) #16
  %9509 = trunc i32 %9508 to i8
  %9510 = and i8 %9509, 1
  %9511 = xor i8 %9510, 1
  %9512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9511, i8* %9512, align 1, !tbaa !2446
  %9513 = xor i64 %9497, %9496
  %9514 = xor i64 %9513, %9500
  %9515 = lshr i64 %9514, 4
  %9516 = trunc i64 %9515 to i8
  %9517 = and i8 %9516, 1
  %9518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9517, i8* %9518, align 1, !tbaa !2447
  %9519 = icmp eq i64 %9500, 0
  %9520 = zext i1 %9519 to i8
  %9521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9520, i8* %9521, align 1, !tbaa !2448
  %9522 = lshr i64 %9500, 63
  %9523 = trunc i64 %9522 to i8
  %9524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9523, i8* %9524, align 1, !tbaa !2449
  %9525 = lshr i64 %9496, 63
  %9526 = lshr i64 %9497, 63
  %9527 = xor i64 %9522, %9525
  %9528 = xor i64 %9522, %9526
  %9529 = add nuw nsw i64 %9527, %9528
  %9530 = icmp eq i64 %9529, 2
  %9531 = zext i1 %9530 to i8
  %9532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9531, i8* %9532, align 1, !tbaa !2450
  %9533 = load i64, i64* %RBP
  %9534 = sub i64 %9533, 104
  %9535 = load i64, i64* %PC
  %9536 = add i64 %9535, 4
  store i64 %9536, i64* %PC
  %9537 = inttoptr i64 %9534 to i32*
  %9538 = load i32, i32* %9537
  %9539 = sext i32 %9538 to i64
  store i64 %9539, i64* %RCX, align 8, !tbaa !2428
  %9540 = load i64, i64* %RCX
  %9541 = load i64, i64* %PC
  %9542 = add i64 %9541, 7
  store i64 %9542, i64* %PC
  %9543 = sext i64 %9540 to i128
  %9544 = and i128 %9543, -18446744073709551616
  %9545 = zext i64 %9540 to i128
  %9546 = or i128 %9544, %9545
  %9547 = mul nsw i128 520, %9546
  %9548 = trunc i128 %9547 to i64
  store i64 %9548, i64* %RCX, align 8, !tbaa !2428
  %9549 = sext i64 %9548 to i128
  %9550 = icmp ne i128 %9549, %9547
  %9551 = zext i1 %9550 to i8
  %9552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9551, i8* %9552, align 1, !tbaa !2432
  %9553 = trunc i128 %9547 to i32
  %9554 = and i32 %9553, 255
  %9555 = call i32 @llvm.ctpop.i32(i32 %9554) #16
  %9556 = trunc i32 %9555 to i8
  %9557 = and i8 %9556, 1
  %9558 = xor i8 %9557, 1
  %9559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9558, i8* %9559, align 1, !tbaa !2446
  %9560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9560, align 1, !tbaa !2447
  %9561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9561, align 1, !tbaa !2448
  %9562 = lshr i64 %9548, 63
  %9563 = trunc i64 %9562 to i8
  %9564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9563, i8* %9564, align 1, !tbaa !2449
  %9565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9551, i8* %9565, align 1, !tbaa !2450
  %9566 = load i64, i64* %RAX
  %9567 = load i64, i64* %RCX
  %9568 = load i64, i64* %PC
  %9569 = add i64 %9568, 3
  store i64 %9569, i64* %PC
  %9570 = add i64 %9567, %9566
  store i64 %9570, i64* %RAX, align 8, !tbaa !2428
  %9571 = icmp ult i64 %9570, %9566
  %9572 = icmp ult i64 %9570, %9567
  %9573 = or i1 %9571, %9572
  %9574 = zext i1 %9573 to i8
  %9575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9574, i8* %9575, align 1, !tbaa !2432
  %9576 = trunc i64 %9570 to i32
  %9577 = and i32 %9576, 255
  %9578 = call i32 @llvm.ctpop.i32(i32 %9577) #16
  %9579 = trunc i32 %9578 to i8
  %9580 = and i8 %9579, 1
  %9581 = xor i8 %9580, 1
  %9582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9581, i8* %9582, align 1, !tbaa !2446
  %9583 = xor i64 %9567, %9566
  %9584 = xor i64 %9583, %9570
  %9585 = lshr i64 %9584, 4
  %9586 = trunc i64 %9585 to i8
  %9587 = and i8 %9586, 1
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9587, i8* %9588, align 1, !tbaa !2447
  %9589 = icmp eq i64 %9570, 0
  %9590 = zext i1 %9589 to i8
  %9591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9590, i8* %9591, align 1, !tbaa !2448
  %9592 = lshr i64 %9570, 63
  %9593 = trunc i64 %9592 to i8
  %9594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9593, i8* %9594, align 1, !tbaa !2449
  %9595 = lshr i64 %9566, 63
  %9596 = lshr i64 %9567, 63
  %9597 = xor i64 %9592, %9595
  %9598 = xor i64 %9592, %9596
  %9599 = add nuw nsw i64 %9597, %9598
  %9600 = icmp eq i64 %9599, 2
  %9601 = zext i1 %9600 to i8
  %9602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9601, i8* %9602, align 1, !tbaa !2450
  %9603 = load i64, i64* %RBP
  %9604 = sub i64 %9603, 108
  %9605 = load i64, i64* %PC
  %9606 = add i64 %9605, 4
  store i64 %9606, i64* %PC
  %9607 = inttoptr i64 %9604 to i32*
  %9608 = load i32, i32* %9607
  %9609 = sext i32 %9608 to i64
  store i64 %9609, i64* %RCX, align 8, !tbaa !2428
  %9610 = load i64, i64* %RAX
  %9611 = load i64, i64* %RCX
  %9612 = mul i64 %9611, 8
  %9613 = add i64 %9612, %9610
  %9614 = bitcast %union.vec128_t* %XMM0 to i8*
  %9615 = load i64, i64* %PC
  %9616 = add i64 %9615, 5
  store i64 %9616, i64* %PC
  %9617 = bitcast i8* %9614 to double*
  %9618 = load double, double* %9617, align 1
  %9619 = inttoptr i64 %9613 to double*
  store double %9618, double* %9619
  %9620 = load i64, i64* %RBP
  %9621 = sub i64 %9620, 108
  %9622 = load i64, i64* %PC
  %9623 = add i64 %9622, 3
  store i64 %9623, i64* %PC
  %9624 = inttoptr i64 %9621 to i32*
  %9625 = load i32, i32* %9624
  %9626 = zext i32 %9625 to i64
  store i64 %9626, i64* %RAX, align 8, !tbaa !2428
  %9627 = load i64, i64* %RAX
  %9628 = load i64, i64* %PC
  %9629 = add i64 %9628, 3
  store i64 %9629, i64* %PC
  %9630 = trunc i64 %9627 to i32
  %9631 = add i32 1, %9630
  %9632 = zext i32 %9631 to i64
  store i64 %9632, i64* %RAX, align 8, !tbaa !2428
  %9633 = icmp ult i32 %9631, %9630
  %9634 = icmp ult i32 %9631, 1
  %9635 = or i1 %9633, %9634
  %9636 = zext i1 %9635 to i8
  %9637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9636, i8* %9637, align 1, !tbaa !2432
  %9638 = and i32 %9631, 255
  %9639 = call i32 @llvm.ctpop.i32(i32 %9638) #16
  %9640 = trunc i32 %9639 to i8
  %9641 = and i8 %9640, 1
  %9642 = xor i8 %9641, 1
  %9643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9642, i8* %9643, align 1, !tbaa !2446
  %9644 = xor i64 1, %9627
  %9645 = trunc i64 %9644 to i32
  %9646 = xor i32 %9645, %9631
  %9647 = lshr i32 %9646, 4
  %9648 = trunc i32 %9647 to i8
  %9649 = and i8 %9648, 1
  %9650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9649, i8* %9650, align 1, !tbaa !2447
  %9651 = icmp eq i32 %9631, 0
  %9652 = zext i1 %9651 to i8
  %9653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9652, i8* %9653, align 1, !tbaa !2448
  %9654 = lshr i32 %9631, 31
  %9655 = trunc i32 %9654 to i8
  %9656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9655, i8* %9656, align 1, !tbaa !2449
  %9657 = lshr i32 %9630, 31
  %9658 = xor i32 %9654, %9657
  %9659 = add nuw nsw i32 %9658, %9654
  %9660 = icmp eq i32 %9659, 2
  %9661 = zext i1 %9660 to i8
  %9662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9661, i8* %9662, align 1, !tbaa !2450
  %9663 = load i64, i64* %RBP
  %9664 = sub i64 %9663, 108
  %9665 = load i32, i32* %EAX
  %9666 = zext i32 %9665 to i64
  %9667 = load i64, i64* %PC
  %9668 = add i64 %9667, 3
  store i64 %9668, i64* %PC
  %9669 = inttoptr i64 %9664 to i32*
  store i32 %9665, i32* %9669
  %9670 = load i64, i64* %PC
  %9671 = sub i64 %9670, 679
  %9672 = load i64, i64* %PC
  %9673 = add i64 %9672, 5
  store i64 %9673, i64* %PC
  %9674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9671, i64* %9674, align 8, !tbaa !2428
  br label %block_401fe0

block_401fc6:                                     ; preds = %block_401fba
  %9675 = load i64, i64* %RBP
  %9676 = sub i64 %9675, 104
  %9677 = load i64, i64* %PC
  %9678 = add i64 %9677, 7
  store i64 %9678, i64* %PC
  %9679 = inttoptr i64 %9676 to i32*
  store i32 0, i32* %9679
  br label %block_401fcd

block_402a25:                                     ; preds = %block_401fcd
  %9680 = load i64, i64* %PC
  %9681 = add i64 %9680, 5
  %9682 = load i64, i64* %PC
  %9683 = add i64 %9682, 5
  store i64 %9683, i64* %PC
  %9684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9681, i64* %9684, align 8, !tbaa !2428
  %9685 = load i64, i64* %RBP
  %9686 = sub i64 %9685, 100
  %9687 = load i64, i64* %PC
  %9688 = add i64 %9687, 3
  store i64 %9688, i64* %PC
  %9689 = inttoptr i64 %9686 to i32*
  %9690 = load i32, i32* %9689
  %9691 = zext i32 %9690 to i64
  store i64 %9691, i64* %RAX, align 8, !tbaa !2428
  %9692 = load i64, i64* %RAX
  %9693 = load i64, i64* %PC
  %9694 = add i64 %9693, 3
  store i64 %9694, i64* %PC
  %9695 = trunc i64 %9692 to i32
  %9696 = add i32 1, %9695
  %9697 = zext i32 %9696 to i64
  store i64 %9697, i64* %RAX, align 8, !tbaa !2428
  %9698 = icmp ult i32 %9696, %9695
  %9699 = icmp ult i32 %9696, 1
  %9700 = or i1 %9698, %9699
  %9701 = zext i1 %9700 to i8
  %9702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9701, i8* %9702, align 1, !tbaa !2432
  %9703 = and i32 %9696, 255
  %9704 = call i32 @llvm.ctpop.i32(i32 %9703) #16
  %9705 = trunc i32 %9704 to i8
  %9706 = and i8 %9705, 1
  %9707 = xor i8 %9706, 1
  %9708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9707, i8* %9708, align 1, !tbaa !2446
  %9709 = xor i64 1, %9692
  %9710 = trunc i64 %9709 to i32
  %9711 = xor i32 %9710, %9696
  %9712 = lshr i32 %9711, 4
  %9713 = trunc i32 %9712 to i8
  %9714 = and i8 %9713, 1
  %9715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9714, i8* %9715, align 1, !tbaa !2447
  %9716 = icmp eq i32 %9696, 0
  %9717 = zext i1 %9716 to i8
  %9718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9717, i8* %9718, align 1, !tbaa !2448
  %9719 = lshr i32 %9696, 31
  %9720 = trunc i32 %9719 to i8
  %9721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9720, i8* %9721, align 1, !tbaa !2449
  %9722 = lshr i32 %9695, 31
  %9723 = xor i32 %9719, %9722
  %9724 = add nuw nsw i32 %9723, %9719
  %9725 = icmp eq i32 %9724, 2
  %9726 = zext i1 %9725 to i8
  %9727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9726, i8* %9727, align 1, !tbaa !2450
  %9728 = load i64, i64* %RBP
  %9729 = sub i64 %9728, 100
  %9730 = load i32, i32* %EAX
  %9731 = zext i32 %9730 to i64
  %9732 = load i64, i64* %PC
  %9733 = add i64 %9732, 3
  store i64 %9733, i64* %PC
  %9734 = inttoptr i64 %9729 to i32*
  store i32 %9730, i32* %9734
  %9735 = load i64, i64* %PC
  %9736 = sub i64 %9735, 2681
  %9737 = load i64, i64* %PC
  %9738 = add i64 %9737, 5
  store i64 %9738, i64* %PC
  %9739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9736, i64* %9739, align 8, !tbaa !2428
  br label %block_401fba

block_401fe0:                                     ; preds = %block_401fec, %block_401fd9
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_401fd9 ], [ %MEMORY.3, %block_401fec ]
  %9740 = load i64, i64* %RBP
  %9741 = sub i64 %9740, 108
  %9742 = load i64, i64* %PC
  %9743 = add i64 %9742, 3
  store i64 %9743, i64* %PC
  %9744 = inttoptr i64 %9741 to i32*
  %9745 = load i32, i32* %9744
  %9746 = zext i32 %9745 to i64
  store i64 %9746, i64* %RAX, align 8, !tbaa !2428
  %9747 = load i32, i32* %EAX
  %9748 = zext i32 %9747 to i64
  %9749 = load i64, i64* %RBP
  %9750 = sub i64 %9749, 48
  %9751 = load i64, i64* %PC
  %9752 = add i64 %9751, 3
  store i64 %9752, i64* %PC
  %9753 = inttoptr i64 %9750 to i32*
  %9754 = load i32, i32* %9753
  %9755 = sub i32 %9747, %9754
  %9756 = icmp ult i32 %9747, %9754
  %9757 = zext i1 %9756 to i8
  %9758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9757, i8* %9758, align 1, !tbaa !2432
  %9759 = and i32 %9755, 255
  %9760 = call i32 @llvm.ctpop.i32(i32 %9759) #16
  %9761 = trunc i32 %9760 to i8
  %9762 = and i8 %9761, 1
  %9763 = xor i8 %9762, 1
  %9764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9763, i8* %9764, align 1, !tbaa !2446
  %9765 = xor i32 %9754, %9747
  %9766 = xor i32 %9765, %9755
  %9767 = lshr i32 %9766, 4
  %9768 = trunc i32 %9767 to i8
  %9769 = and i8 %9768, 1
  %9770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9769, i8* %9770, align 1, !tbaa !2447
  %9771 = icmp eq i32 %9755, 0
  %9772 = zext i1 %9771 to i8
  %9773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9772, i8* %9773, align 1, !tbaa !2448
  %9774 = lshr i32 %9755, 31
  %9775 = trunc i32 %9774 to i8
  %9776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9775, i8* %9776, align 1, !tbaa !2449
  %9777 = lshr i32 %9747, 31
  %9778 = lshr i32 %9754, 31
  %9779 = xor i32 %9778, %9777
  %9780 = xor i32 %9774, %9777
  %9781 = add nuw nsw i32 %9780, %9779
  %9782 = icmp eq i32 %9781, 2
  %9783 = zext i1 %9782 to i8
  %9784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9783, i8* %9784, align 1, !tbaa !2450
  %9785 = load i64, i64* %PC
  %9786 = add i64 %9785, 678
  %9787 = load i64, i64* %PC
  %9788 = add i64 %9787, 6
  %9789 = load i64, i64* %PC
  %9790 = add i64 %9789, 6
  store i64 %9790, i64* %PC
  %9791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9792 = load i8, i8* %9791, align 1, !tbaa !2449
  %9793 = icmp ne i8 %9792, 0
  %9794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9795 = load i8, i8* %9794, align 1, !tbaa !2450
  %9796 = icmp ne i8 %9795, 0
  %9797 = xor i1 %9793, %9796
  %9798 = xor i1 %9797, true
  %9799 = zext i1 %9798 to i8
  store i8 %9799, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %9800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9801 = select i1 %9797, i64 %9788, i64 %9786
  store i64 %9801, i64* %9800, align 8, !tbaa !2428
  %9802 = load i8, i8* %BRANCH_TAKEN
  %9803 = icmp eq i8 %9802, 1
  %9804 = load i64, i64* %RBP
  %9805 = add i64 %9804, 32
  %9806 = load i64, i64* %PC
  %9807 = add i64 %9806, 4
  store i64 %9807, i64* %PC
  %9808 = inttoptr i64 %9805 to i64*
  %9809 = load i64, i64* %9808
  store i64 %9809, i64* %RAX, align 8, !tbaa !2428
  %9810 = load i64, i64* %RBP
  %9811 = sub i64 %9810, 100
  %9812 = load i64, i64* %PC
  %9813 = add i64 %9812, 4
  store i64 %9813, i64* %PC
  %9814 = inttoptr i64 %9811 to i32*
  %9815 = load i32, i32* %9814
  %9816 = sext i32 %9815 to i64
  store i64 %9816, i64* %RCX, align 8, !tbaa !2428
  %9817 = load i64, i64* %RCX
  %9818 = load i64, i64* %PC
  %9819 = add i64 %9818, 7
  store i64 %9819, i64* %PC
  %9820 = sext i64 %9817 to i128
  %9821 = and i128 %9820, -18446744073709551616
  %9822 = zext i64 %9817 to i128
  %9823 = or i128 %9821, %9822
  %9824 = mul nsw i128 33800, %9823
  %9825 = trunc i128 %9824 to i64
  store i64 %9825, i64* %RCX, align 8, !tbaa !2428
  %9826 = sext i64 %9825 to i128
  %9827 = icmp ne i128 %9826, %9824
  %9828 = zext i1 %9827 to i8
  %9829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9828, i8* %9829, align 1, !tbaa !2432
  %9830 = trunc i128 %9824 to i32
  %9831 = and i32 %9830, 255
  %9832 = call i32 @llvm.ctpop.i32(i32 %9831) #16
  %9833 = trunc i32 %9832 to i8
  %9834 = and i8 %9833, 1
  %9835 = xor i8 %9834, 1
  %9836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9835, i8* %9836, align 1, !tbaa !2446
  %9837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9837, align 1, !tbaa !2447
  %9838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9838, align 1, !tbaa !2448
  %9839 = lshr i64 %9825, 63
  %9840 = trunc i64 %9839 to i8
  %9841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9840, i8* %9841, align 1, !tbaa !2449
  %9842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9828, i8* %9842, align 1, !tbaa !2450
  %9843 = load i64, i64* %RAX
  %9844 = load i64, i64* %RCX
  %9845 = load i64, i64* %PC
  %9846 = add i64 %9845, 3
  store i64 %9846, i64* %PC
  %9847 = add i64 %9844, %9843
  store i64 %9847, i64* %RAX, align 8, !tbaa !2428
  %9848 = icmp ult i64 %9847, %9843
  %9849 = icmp ult i64 %9847, %9844
  %9850 = or i1 %9848, %9849
  %9851 = zext i1 %9850 to i8
  %9852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9851, i8* %9852, align 1, !tbaa !2432
  %9853 = trunc i64 %9847 to i32
  %9854 = and i32 %9853, 255
  %9855 = call i32 @llvm.ctpop.i32(i32 %9854) #16
  %9856 = trunc i32 %9855 to i8
  %9857 = and i8 %9856, 1
  %9858 = xor i8 %9857, 1
  %9859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9858, i8* %9859, align 1, !tbaa !2446
  %9860 = xor i64 %9844, %9843
  %9861 = xor i64 %9860, %9847
  %9862 = lshr i64 %9861, 4
  %9863 = trunc i64 %9862 to i8
  %9864 = and i8 %9863, 1
  %9865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9864, i8* %9865, align 1, !tbaa !2447
  %9866 = icmp eq i64 %9847, 0
  %9867 = zext i1 %9866 to i8
  %9868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9867, i8* %9868, align 1, !tbaa !2448
  %9869 = lshr i64 %9847, 63
  %9870 = trunc i64 %9869 to i8
  %9871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9870, i8* %9871, align 1, !tbaa !2449
  %9872 = lshr i64 %9843, 63
  %9873 = lshr i64 %9844, 63
  %9874 = xor i64 %9869, %9872
  %9875 = xor i64 %9869, %9873
  %9876 = add nuw nsw i64 %9874, %9875
  %9877 = icmp eq i64 %9876, 2
  %9878 = zext i1 %9877 to i8
  %9879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9878, i8* %9879, align 1, !tbaa !2450
  %9880 = load i64, i64* %RBP
  %9881 = sub i64 %9880, 104
  %9882 = load i64, i64* %PC
  %9883 = add i64 %9882, 4
  store i64 %9883, i64* %PC
  %9884 = inttoptr i64 %9881 to i32*
  %9885 = load i32, i32* %9884
  %9886 = sext i32 %9885 to i64
  store i64 %9886, i64* %RCX, align 8, !tbaa !2428
  %9887 = load i64, i64* %RCX
  %9888 = load i64, i64* %PC
  %9889 = add i64 %9888, 7
  store i64 %9889, i64* %PC
  %9890 = sext i64 %9887 to i128
  %9891 = and i128 %9890, -18446744073709551616
  %9892 = zext i64 %9887 to i128
  %9893 = or i128 %9891, %9892
  %9894 = mul nsw i128 520, %9893
  %9895 = trunc i128 %9894 to i64
  store i64 %9895, i64* %RCX, align 8, !tbaa !2428
  %9896 = sext i64 %9895 to i128
  %9897 = icmp ne i128 %9896, %9894
  %9898 = zext i1 %9897 to i8
  %9899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9898, i8* %9899, align 1, !tbaa !2432
  %9900 = trunc i128 %9894 to i32
  %9901 = and i32 %9900, 255
  %9902 = call i32 @llvm.ctpop.i32(i32 %9901) #16
  %9903 = trunc i32 %9902 to i8
  %9904 = and i8 %9903, 1
  %9905 = xor i8 %9904, 1
  %9906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9905, i8* %9906, align 1, !tbaa !2446
  %9907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9907, align 1, !tbaa !2447
  %9908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9908, align 1, !tbaa !2448
  %9909 = lshr i64 %9895, 63
  %9910 = trunc i64 %9909 to i8
  %9911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9910, i8* %9911, align 1, !tbaa !2449
  %9912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9898, i8* %9912, align 1, !tbaa !2450
  %9913 = load i64, i64* %RAX
  %9914 = load i64, i64* %RCX
  %9915 = load i64, i64* %PC
  %9916 = add i64 %9915, 3
  store i64 %9916, i64* %PC
  %9917 = add i64 %9914, %9913
  store i64 %9917, i64* %RAX, align 8, !tbaa !2428
  %9918 = icmp ult i64 %9917, %9913
  %9919 = icmp ult i64 %9917, %9914
  %9920 = or i1 %9918, %9919
  %9921 = zext i1 %9920 to i8
  %9922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9921, i8* %9922, align 1, !tbaa !2432
  %9923 = trunc i64 %9917 to i32
  %9924 = and i32 %9923, 255
  %9925 = call i32 @llvm.ctpop.i32(i32 %9924) #16
  %9926 = trunc i32 %9925 to i8
  %9927 = and i8 %9926, 1
  %9928 = xor i8 %9927, 1
  %9929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9928, i8* %9929, align 1, !tbaa !2446
  %9930 = xor i64 %9914, %9913
  %9931 = xor i64 %9930, %9917
  %9932 = lshr i64 %9931, 4
  %9933 = trunc i64 %9932 to i8
  %9934 = and i8 %9933, 1
  %9935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9934, i8* %9935, align 1, !tbaa !2447
  %9936 = icmp eq i64 %9917, 0
  %9937 = zext i1 %9936 to i8
  %9938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9937, i8* %9938, align 1, !tbaa !2448
  %9939 = lshr i64 %9917, 63
  %9940 = trunc i64 %9939 to i8
  %9941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9940, i8* %9941, align 1, !tbaa !2449
  %9942 = lshr i64 %9913, 63
  %9943 = lshr i64 %9914, 63
  %9944 = xor i64 %9939, %9942
  %9945 = xor i64 %9939, %9943
  %9946 = add nuw nsw i64 %9944, %9945
  %9947 = icmp eq i64 %9946, 2
  %9948 = zext i1 %9947 to i8
  %9949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9948, i8* %9949, align 1, !tbaa !2450
  %9950 = load i64, i64* %RBP
  br i1 %9803, label %block_40228c, label %block_401fec
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780_polybench_timer_print(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400780:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 11
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RDI = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 13
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSP = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 15
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RBP = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %23 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %22, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %23 to %"class.std::bitset"*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = sub i64 %34, 16
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %38 = icmp ult i64 %34, 16
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2432
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = call i32 @llvm.ctpop.i32(i32 %42) #16
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2446
  %48 = xor i64 16, %34
  %49 = xor i64 %48, %37
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = icmp eq i64 %37, 0
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i64 %37, 63
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %34, 63
  %61 = xor i64 %57, %60
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 10
  store i64 %67, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %68 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 9
  store i64 %70, i64* %PC
  %71 = load double, double* bitcast (%polybench_t_end_type* @polybench_t_end to double*)
  %72 = bitcast i8* %68 to double*
  store double %71, double* %72, align 1, !tbaa !2452
  %73 = getelementptr inbounds i8, i8* %68, i64 8
  %74 = bitcast i8* %73 to double*
  store double 0.000000e+00, double* %74, align 1, !tbaa !2452
  %75 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %76 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 9
  store i64 %78, i64* %PC
  %79 = bitcast i8* %76 to double*
  %80 = load double, double* %79, align 1
  %81 = getelementptr inbounds i8, i8* %76, i64 8
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 1
  %84 = load double, double* bitcast (%polybench_t_start_type* @polybench_t_start to double*)
  %85 = fsub double %80, %84
  %86 = bitcast i8* %75 to double*
  store double %85, double* %86, align 1, !tbaa !2452
  %87 = getelementptr inbounds i8, i8* %75, i64 8
  %88 = bitcast i8* %87 to i64*
  store i64 %83, i64* %88, align 1, !tbaa !2452
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 2
  store i64 %90, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %91 = load i64, i64* %PC
  %92 = sub i64 %91, 582
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 5
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %92, i64* %101, align 8, !tbaa !2428
  %102 = load i64, i64* %PC
  %103 = call %struct.Memory* @ext_6040e0_printf(%struct.State* %0, i64 %102, %struct.Memory* %2)
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 4
  %106 = load i32, i32* %EAX
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RSP
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = add i64 16, %111
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %115 = icmp ult i64 %114, %111
  %116 = icmp ult i64 %114, 16
  %117 = or i1 %115, %116
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %118, i8* %119, align 1, !tbaa !2432
  %120 = trunc i64 %114 to i32
  %121 = and i32 %120, 255
  %122 = call i32 @llvm.ctpop.i32(i32 %121) #16
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %125, i8* %126, align 1, !tbaa !2446
  %127 = xor i64 16, %111
  %128 = xor i64 %127, %114
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %131, i8* %132, align 1, !tbaa !2447
  %133 = icmp eq i64 %114, 0
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = lshr i64 %114, 63
  %137 = trunc i64 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %137, i8* %138, align 1, !tbaa !2449
  %139 = lshr i64 %111, 63
  %140 = xor i64 %136, %139
  %141 = add nuw nsw i64 %140, %136
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %143, i8* %144, align 1, !tbaa !2450
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 1
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %148 = load i64, i64* %147, align 8, !tbaa !2428
  %149 = add i64 %148, 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %RBP, align 8, !tbaa !2428
  store i64 %149, i64* %147, align 8, !tbaa !2428
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 1
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %156 = load i64, i64* %155, align 8, !tbaa !2428
  %157 = inttoptr i64 %156 to i64*
  %158 = load i64, i64* %157
  store i64 %158, i64* %154, align 8, !tbaa !2428
  %159 = add i64 %156, 8
  store i64 %159, i64* %155, align 8, !tbaa !2428
  ret %struct.Memory* %103
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005b0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402e70___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402e00___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_6040b0___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400690:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400620_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_402bf0_print_array(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402bf0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 7
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %EDX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %ESI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 17
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %R8D = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 19
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R9D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 17
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R8 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 19
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R9 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %56 to %"class.std::bitset"*
  %57 = load i64, i64* %RBP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 1
  store i64 %59, i64* %PC
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %61 = load i64, i64* %60, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %57, i64* %63
  store i64 %62, i64* %60, align 8, !tbaa !2428
  %64 = load i64, i64* %RSP
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 3
  store i64 %66, i64* %PC
  store i64 %64, i64* %RBP, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = sub i64 %67, 96
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ult i64 %67, 96
  %72 = zext i1 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %72, i8* %73, align 1, !tbaa !2432
  %74 = trunc i64 %70 to i32
  %75 = and i32 %74, 255
  %76 = call i32 @llvm.ctpop.i32(i32 %75) #16
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %79, i8* %80, align 1, !tbaa !2446
  %81 = xor i64 96, %67
  %82 = xor i64 %81, %70
  %83 = lshr i64 %82, 4
  %84 = trunc i64 %83 to i8
  %85 = and i8 %84, 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %85, i8* %86, align 1, !tbaa !2447
  %87 = icmp eq i64 %70, 0
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %88, i8* %89, align 1, !tbaa !2448
  %90 = lshr i64 %70, 63
  %91 = trunc i64 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %91, i8* %92, align 1, !tbaa !2449
  %93 = lshr i64 %67, 63
  %94 = xor i64 %90, %93
  %95 = add nuw nsw i64 %94, %93
  %96 = icmp eq i64 %95, 2
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %97, i8* %98, align 1, !tbaa !2450
  %99 = load i64, i64* %RBP
  %100 = add i64 %99, 16
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 4
  %107 = load i32, i32* %EDI
  %108 = zext i32 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 3
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %106 to i32*
  store i32 %107, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 8
  %114 = load i32, i32* %ESI
  %115 = zext i32 %114 to i64
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %113 to i32*
  store i32 %114, i32* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 12
  %121 = load i32, i32* %EDX
  %122 = zext i32 %121 to i64
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %120 to i32*
  store i32 %121, i32* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 24
  %128 = load i64, i64* %RCX
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 32
  %134 = load i64, i64* %R8
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %133 to i64*
  store i64 %134, i64* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 40
  %140 = load i64, i64* %R9
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %139 to i64*
  store i64 %140, i64* %143
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 44
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 7
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i32*
  store i32 0, i32* %148
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 64
  %151 = load i64, i64* %RAX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %150 to i64*
  store i64 %151, i64* %154
  br label %block_402c1c

block_402c3b:                                     ; preds = %block_402c2f
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 52
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  store i32 0, i32* %159
  br label %block_402c42

block_402c1c:                                     ; preds = %block_402dc7, %block_402bf0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402bf0 ], [ %MEMORY.1, %block_402dc7 ]
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 44
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %161 to i32*
  %165 = load i32, i32* %164
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = load i32, i32* %EAX
  %168 = zext i32 %167 to i64
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 4
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i32*
  %174 = load i32, i32* %173
  %175 = sub i32 %167, %174
  %176 = icmp ult i32 %167, %174
  %177 = zext i1 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %177, i8* %178, align 1, !tbaa !2432
  %179 = and i32 %175, 255
  %180 = call i32 @llvm.ctpop.i32(i32 %179) #16
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %183, i8* %184, align 1, !tbaa !2446
  %185 = xor i32 %174, %167
  %186 = xor i32 %185, %175
  %187 = lshr i32 %186, 4
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = icmp eq i32 %175, 0
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %192, i8* %193, align 1, !tbaa !2448
  %194 = lshr i32 %175, 31
  %195 = trunc i32 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %195, i8* %196, align 1, !tbaa !2449
  %197 = lshr i32 %167, 31
  %198 = lshr i32 %174, 31
  %199 = xor i32 %198, %197
  %200 = xor i32 %194, %197
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %203, i8* %204, align 1, !tbaa !2450
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 440
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 6
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %212 = load i8, i8* %211, align 1, !tbaa !2448
  %213 = icmp eq i8 %212, 0
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %215 = load i8, i8* %214, align 1, !tbaa !2449
  %216 = icmp ne i8 %215, 0
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %218 = load i8, i8* %217, align 1, !tbaa !2450
  %219 = icmp ne i8 %218, 0
  %220 = xor i1 %216, %219
  %221 = xor i1 %220, true
  %222 = and i1 %213, %221
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %225 = select i1 %222, i64 %206, i64 %208
  store i64 %225, i64* %224, align 8, !tbaa !2428
  %226 = load i8, i8* %BRANCH_TAKEN
  %227 = icmp eq i8 %226, 1
  br i1 %227, label %block_402dda, label %block_402c28

block_402db4:                                     ; preds = %block_402c42
  %228 = add i64 %1531, 5
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %231, align 8, !tbaa !2428
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 48
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = trunc i64 %239 to i32
  %243 = add i32 1, %242
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = icmp ult i32 %243, %242
  %246 = icmp ult i32 %243, 1
  %247 = or i1 %245, %246
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %248, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %243, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 1, %239
  %257 = trunc i64 %256 to i32
  %258 = xor i32 %257, %243
  %259 = lshr i32 %258, 4
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %261, i8* %262, align 1, !tbaa !2447
  %263 = icmp eq i32 %243, 0
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = lshr i32 %243, 31
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i32 %242, 31
  %270 = xor i32 %266, %269
  %271 = add nuw nsw i32 %270, %266
  %272 = icmp eq i32 %271, 2
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %273, i8* %274, align 1, !tbaa !2450
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 48
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %PC
  %283 = sub i64 %282, 403
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 5
  store i64 %285, i64* %PC
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %283, i64* %286, align 8, !tbaa !2428
  br label %block_402c2f

block_402c4e:                                     ; preds = %block_402c42
  %287 = add i64 %1531, 10
  store i64 %287, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 8
  store i64 %289, i64* %PC
  %290 = load i64, i64* @stderr
  store i64 %290, i64* %RDI, align 8, !tbaa !2428
  %291 = load i64, i64* %RBP
  %292 = sub i64 %291, 24
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 4
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %292 to i64*
  %296 = load i64, i64* %295
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 44
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = sext i32 %302 to i64
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = load i64, i64* %RCX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 7
  store i64 %306, i64* %PC
  %307 = sext i64 %304 to i128
  %308 = and i128 %307, -18446744073709551616
  %309 = zext i64 %304 to i128
  %310 = or i128 %308, %309
  %311 = mul nsw i128 33800, %310
  %312 = trunc i128 %311 to i64
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = sext i64 %312 to i128
  %314 = icmp ne i128 %313, %311
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %315, i8* %316, align 1, !tbaa !2432
  %317 = trunc i128 %311 to i32
  %318 = and i32 %317, 255
  %319 = call i32 @llvm.ctpop.i32(i32 %318) #16
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %322, i8* %323, align 1, !tbaa !2446
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %324, align 1, !tbaa !2447
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %325, align 1, !tbaa !2448
  %326 = lshr i64 %312, 63
  %327 = trunc i64 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %327, i8* %328, align 1, !tbaa !2449
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %315, i8* %329, align 1, !tbaa !2450
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %RCX
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 3
  store i64 %333, i64* %PC
  %334 = add i64 %331, %330
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = icmp ult i64 %334, %330
  %336 = icmp ult i64 %334, %331
  %337 = or i1 %335, %336
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %338, i8* %339, align 1, !tbaa !2432
  %340 = trunc i64 %334 to i32
  %341 = and i32 %340, 255
  %342 = call i32 @llvm.ctpop.i32(i32 %341) #16
  %343 = trunc i32 %342 to i8
  %344 = and i8 %343, 1
  %345 = xor i8 %344, 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %345, i8* %346, align 1, !tbaa !2446
  %347 = xor i64 %331, %330
  %348 = xor i64 %347, %334
  %349 = lshr i64 %348, 4
  %350 = trunc i64 %349 to i8
  %351 = and i8 %350, 1
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %351, i8* %352, align 1, !tbaa !2447
  %353 = icmp eq i64 %334, 0
  %354 = zext i1 %353 to i8
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %354, i8* %355, align 1, !tbaa !2448
  %356 = lshr i64 %334, 63
  %357 = trunc i64 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %357, i8* %358, align 1, !tbaa !2449
  %359 = lshr i64 %330, 63
  %360 = lshr i64 %331, 63
  %361 = xor i64 %356, %359
  %362 = xor i64 %356, %360
  %363 = add nuw nsw i64 %361, %362
  %364 = icmp eq i64 %363, 2
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %365, i8* %366, align 1, !tbaa !2450
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 48
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i32*
  %372 = load i32, i32* %371
  %373 = sext i32 %372 to i64
  store i64 %373, i64* %RCX, align 8, !tbaa !2428
  %374 = load i64, i64* %RCX
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 7
  store i64 %376, i64* %PC
  %377 = sext i64 %374 to i128
  %378 = and i128 %377, -18446744073709551616
  %379 = zext i64 %374 to i128
  %380 = or i128 %378, %379
  %381 = mul nsw i128 520, %380
  %382 = trunc i128 %381 to i64
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %383 = sext i64 %382 to i128
  %384 = icmp ne i128 %383, %381
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %385, i8* %386, align 1, !tbaa !2432
  %387 = trunc i128 %381 to i32
  %388 = and i32 %387, 255
  %389 = call i32 @llvm.ctpop.i32(i32 %388) #16
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %392, i8* %393, align 1, !tbaa !2446
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %394, align 1, !tbaa !2447
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %395, align 1, !tbaa !2448
  %396 = lshr i64 %382, 63
  %397 = trunc i64 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %397, i8* %398, align 1, !tbaa !2449
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %385, i8* %399, align 1, !tbaa !2450
  %400 = load i64, i64* %RAX
  %401 = load i64, i64* %RCX
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 3
  store i64 %403, i64* %PC
  %404 = add i64 %401, %400
  store i64 %404, i64* %RAX, align 8, !tbaa !2428
  %405 = icmp ult i64 %404, %400
  %406 = icmp ult i64 %404, %401
  %407 = or i1 %405, %406
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %408, i8* %409, align 1, !tbaa !2432
  %410 = trunc i64 %404 to i32
  %411 = and i32 %410, 255
  %412 = call i32 @llvm.ctpop.i32(i32 %411) #16
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  %415 = xor i8 %414, 1
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %415, i8* %416, align 1, !tbaa !2446
  %417 = xor i64 %401, %400
  %418 = xor i64 %417, %404
  %419 = lshr i64 %418, 4
  %420 = trunc i64 %419 to i8
  %421 = and i8 %420, 1
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %421, i8* %422, align 1, !tbaa !2447
  %423 = icmp eq i64 %404, 0
  %424 = zext i1 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %424, i8* %425, align 1, !tbaa !2448
  %426 = lshr i64 %404, 63
  %427 = trunc i64 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %427, i8* %428, align 1, !tbaa !2449
  %429 = lshr i64 %400, 63
  %430 = lshr i64 %401, 63
  %431 = xor i64 %426, %429
  %432 = xor i64 %426, %430
  %433 = add nuw nsw i64 %431, %432
  %434 = icmp eq i64 %433, 2
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %435, i8* %436, align 1, !tbaa !2450
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 52
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = sext i32 %442 to i64
  store i64 %443, i64* %RCX, align 8, !tbaa !2428
  %444 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %445 = load i64, i64* %RAX
  %446 = load i64, i64* %RCX
  %447 = mul i64 %446, 8
  %448 = add i64 %447, %445
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 5
  store i64 %450, i64* %PC
  %451 = inttoptr i64 %448 to double*
  %452 = load double, double* %451
  %453 = bitcast i8* %444 to double*
  store double %452, double* %453, align 1, !tbaa !2452
  %454 = getelementptr inbounds i8, i8* %444, i64 8
  %455 = bitcast i8* %454 to double*
  store double 0.000000e+00, double* %455, align 1, !tbaa !2452
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 2
  store i64 %457, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %458 = load i64, i64* %PC
  %459 = sub i64 %458, 9995
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 5
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 5
  store i64 %463, i64* %PC
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %465 = load i64, i64* %464, align 8, !tbaa !2428
  %466 = add i64 %465, -8
  %467 = inttoptr i64 %466 to i64*
  store i64 %461, i64* %467
  store i64 %466, i64* %464, align 8, !tbaa !2428
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %459, i64* %468, align 8, !tbaa !2428
  %469 = load i64, i64* %PC
  %470 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %469, %struct.Memory* %MEMORY.2)
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 10
  store i64 %472, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 8
  store i64 %474, i64* %PC
  %475 = load i64, i64* @stderr
  store i64 %475, i64* %RDI, align 8, !tbaa !2428
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 32
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480
  store i64 %481, i64* %RCX, align 8, !tbaa !2428
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 44
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486
  %488 = sext i32 %487 to i64
  store i64 %488, i64* %RDX, align 8, !tbaa !2428
  %489 = load i64, i64* %RDX
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 7
  store i64 %491, i64* %PC
  %492 = sext i64 %489 to i128
  %493 = and i128 %492, -18446744073709551616
  %494 = zext i64 %489 to i128
  %495 = or i128 %493, %494
  %496 = mul nsw i128 33800, %495
  %497 = trunc i128 %496 to i64
  store i64 %497, i64* %RDX, align 8, !tbaa !2428
  %498 = sext i64 %497 to i128
  %499 = icmp ne i128 %498, %496
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %500, i8* %501, align 1, !tbaa !2432
  %502 = trunc i128 %496 to i32
  %503 = and i32 %502, 255
  %504 = call i32 @llvm.ctpop.i32(i32 %503) #16
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %507, i8* %508, align 1, !tbaa !2446
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %509, align 1, !tbaa !2447
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %510, align 1, !tbaa !2448
  %511 = lshr i64 %497, 63
  %512 = trunc i64 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %512, i8* %513, align 1, !tbaa !2449
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %500, i8* %514, align 1, !tbaa !2450
  %515 = load i64, i64* %RCX
  %516 = load i64, i64* %RDX
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 3
  store i64 %518, i64* %PC
  %519 = add i64 %516, %515
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = icmp ult i64 %519, %515
  %521 = icmp ult i64 %519, %516
  %522 = or i1 %520, %521
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %523, i8* %524, align 1, !tbaa !2432
  %525 = trunc i64 %519 to i32
  %526 = and i32 %525, 255
  %527 = call i32 @llvm.ctpop.i32(i32 %526) #16
  %528 = trunc i32 %527 to i8
  %529 = and i8 %528, 1
  %530 = xor i8 %529, 1
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %530, i8* %531, align 1, !tbaa !2446
  %532 = xor i64 %516, %515
  %533 = xor i64 %532, %519
  %534 = lshr i64 %533, 4
  %535 = trunc i64 %534 to i8
  %536 = and i8 %535, 1
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %536, i8* %537, align 1, !tbaa !2447
  %538 = icmp eq i64 %519, 0
  %539 = zext i1 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %539, i8* %540, align 1, !tbaa !2448
  %541 = lshr i64 %519, 63
  %542 = trunc i64 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %542, i8* %543, align 1, !tbaa !2449
  %544 = lshr i64 %515, 63
  %545 = lshr i64 %516, 63
  %546 = xor i64 %541, %544
  %547 = xor i64 %541, %545
  %548 = add nuw nsw i64 %546, %547
  %549 = icmp eq i64 %548, 2
  %550 = zext i1 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %550, i8* %551, align 1, !tbaa !2450
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 48
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i32*
  %557 = load i32, i32* %556
  %558 = sext i32 %557 to i64
  store i64 %558, i64* %RDX, align 8, !tbaa !2428
  %559 = load i64, i64* %RDX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 7
  store i64 %561, i64* %PC
  %562 = sext i64 %559 to i128
  %563 = and i128 %562, -18446744073709551616
  %564 = zext i64 %559 to i128
  %565 = or i128 %563, %564
  %566 = mul nsw i128 520, %565
  %567 = trunc i128 %566 to i64
  store i64 %567, i64* %RDX, align 8, !tbaa !2428
  %568 = sext i64 %567 to i128
  %569 = icmp ne i128 %568, %566
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %570, i8* %571, align 1, !tbaa !2432
  %572 = trunc i128 %566 to i32
  %573 = and i32 %572, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %579, align 1, !tbaa !2447
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %580, align 1, !tbaa !2448
  %581 = lshr i64 %567, 63
  %582 = trunc i64 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %582, i8* %583, align 1, !tbaa !2449
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %570, i8* %584, align 1, !tbaa !2450
  %585 = load i64, i64* %RCX
  %586 = load i64, i64* %RDX
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 3
  store i64 %588, i64* %PC
  %589 = add i64 %586, %585
  store i64 %589, i64* %RCX, align 8, !tbaa !2428
  %590 = icmp ult i64 %589, %585
  %591 = icmp ult i64 %589, %586
  %592 = or i1 %590, %591
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %593, i8* %594, align 1, !tbaa !2432
  %595 = trunc i64 %589 to i32
  %596 = and i32 %595, 255
  %597 = call i32 @llvm.ctpop.i32(i32 %596) #16
  %598 = trunc i32 %597 to i8
  %599 = and i8 %598, 1
  %600 = xor i8 %599, 1
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %600, i8* %601, align 1, !tbaa !2446
  %602 = xor i64 %586, %585
  %603 = xor i64 %602, %589
  %604 = lshr i64 %603, 4
  %605 = trunc i64 %604 to i8
  %606 = and i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %606, i8* %607, align 1, !tbaa !2447
  %608 = icmp eq i64 %589, 0
  %609 = zext i1 %608 to i8
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %609, i8* %610, align 1, !tbaa !2448
  %611 = lshr i64 %589, 63
  %612 = trunc i64 %611 to i8
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %612, i8* %613, align 1, !tbaa !2449
  %614 = lshr i64 %585, 63
  %615 = lshr i64 %586, 63
  %616 = xor i64 %611, %614
  %617 = xor i64 %611, %615
  %618 = add nuw nsw i64 %616, %617
  %619 = icmp eq i64 %618, 2
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %620, i8* %621, align 1, !tbaa !2450
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 52
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = sext i32 %627 to i64
  store i64 %628, i64* %RDX, align 8, !tbaa !2428
  %629 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %630 = load i64, i64* %RCX
  %631 = load i64, i64* %RDX
  %632 = mul i64 %631, 8
  %633 = add i64 %632, %630
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 5
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to double*
  %637 = load double, double* %636
  %638 = bitcast i8* %629 to double*
  store double %637, double* %638, align 1, !tbaa !2452
  %639 = getelementptr inbounds i8, i8* %629, i64 8
  %640 = bitcast i8* %639 to double*
  store double 0.000000e+00, double* %640, align 1, !tbaa !2452
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 68
  %643 = load i32, i32* %EAX
  %644 = zext i32 %643 to i64
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %642 to i32*
  store i32 %643, i32* %647
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 2
  store i64 %649, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %650 = load i64, i64* %PC
  %651 = sub i64 %650, 10064
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 5
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 5
  store i64 %655, i64* %PC
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %657 = load i64, i64* %656, align 8, !tbaa !2428
  %658 = add i64 %657, -8
  %659 = inttoptr i64 %658 to i64*
  store i64 %653, i64* %659
  store i64 %658, i64* %656, align 8, !tbaa !2428
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %651, i64* %660, align 8, !tbaa !2428
  %661 = load i64, i64* %PC
  %662 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %661, %struct.Memory* %470)
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 10
  store i64 %664, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 8
  store i64 %666, i64* %PC
  %667 = load i64, i64* @stderr
  store i64 %667, i64* %RDI, align 8, !tbaa !2428
  %668 = load i64, i64* %RBP
  %669 = sub i64 %668, 40
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i64*
  %673 = load i64, i64* %672
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 44
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %675 to i32*
  %679 = load i32, i32* %678
  %680 = sext i32 %679 to i64
  store i64 %680, i64* %RDX, align 8, !tbaa !2428
  %681 = load i64, i64* %RDX
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 7
  store i64 %683, i64* %PC
  %684 = sext i64 %681 to i128
  %685 = and i128 %684, -18446744073709551616
  %686 = zext i64 %681 to i128
  %687 = or i128 %685, %686
  %688 = mul nsw i128 33800, %687
  %689 = trunc i128 %688 to i64
  store i64 %689, i64* %RDX, align 8, !tbaa !2428
  %690 = sext i64 %689 to i128
  %691 = icmp ne i128 %690, %688
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %692, i8* %693, align 1, !tbaa !2432
  %694 = trunc i128 %688 to i32
  %695 = and i32 %694, 255
  %696 = call i32 @llvm.ctpop.i32(i32 %695) #16
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %699, i8* %700, align 1, !tbaa !2446
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %701, align 1, !tbaa !2447
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %702, align 1, !tbaa !2448
  %703 = lshr i64 %689, 63
  %704 = trunc i64 %703 to i8
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %704, i8* %705, align 1, !tbaa !2449
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %692, i8* %706, align 1, !tbaa !2450
  %707 = load i64, i64* %RCX
  %708 = load i64, i64* %RDX
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 3
  store i64 %710, i64* %PC
  %711 = add i64 %708, %707
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = icmp ult i64 %711, %707
  %713 = icmp ult i64 %711, %708
  %714 = or i1 %712, %713
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %715, i8* %716, align 1, !tbaa !2432
  %717 = trunc i64 %711 to i32
  %718 = and i32 %717, 255
  %719 = call i32 @llvm.ctpop.i32(i32 %718) #16
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %722, i8* %723, align 1, !tbaa !2446
  %724 = xor i64 %708, %707
  %725 = xor i64 %724, %711
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %728, i8* %729, align 1, !tbaa !2447
  %730 = icmp eq i64 %711, 0
  %731 = zext i1 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %731, i8* %732, align 1, !tbaa !2448
  %733 = lshr i64 %711, 63
  %734 = trunc i64 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %734, i8* %735, align 1, !tbaa !2449
  %736 = lshr i64 %707, 63
  %737 = lshr i64 %708, 63
  %738 = xor i64 %733, %736
  %739 = xor i64 %733, %737
  %740 = add nuw nsw i64 %738, %739
  %741 = icmp eq i64 %740, 2
  %742 = zext i1 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %742, i8* %743, align 1, !tbaa !2450
  %744 = load i64, i64* %RBP
  %745 = sub i64 %744, 48
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 4
  store i64 %747, i64* %PC
  %748 = inttoptr i64 %745 to i32*
  %749 = load i32, i32* %748
  %750 = sext i32 %749 to i64
  store i64 %750, i64* %RDX, align 8, !tbaa !2428
  %751 = load i64, i64* %RDX
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 7
  store i64 %753, i64* %PC
  %754 = sext i64 %751 to i128
  %755 = and i128 %754, -18446744073709551616
  %756 = zext i64 %751 to i128
  %757 = or i128 %755, %756
  %758 = mul nsw i128 520, %757
  %759 = trunc i128 %758 to i64
  store i64 %759, i64* %RDX, align 8, !tbaa !2428
  %760 = sext i64 %759 to i128
  %761 = icmp ne i128 %760, %758
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %762, i8* %763, align 1, !tbaa !2432
  %764 = trunc i128 %758 to i32
  %765 = and i32 %764, 255
  %766 = call i32 @llvm.ctpop.i32(i32 %765) #16
  %767 = trunc i32 %766 to i8
  %768 = and i8 %767, 1
  %769 = xor i8 %768, 1
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %769, i8* %770, align 1, !tbaa !2446
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %771, align 1, !tbaa !2447
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %772, align 1, !tbaa !2448
  %773 = lshr i64 %759, 63
  %774 = trunc i64 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %774, i8* %775, align 1, !tbaa !2449
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %762, i8* %776, align 1, !tbaa !2450
  %777 = load i64, i64* %RCX
  %778 = load i64, i64* %RDX
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 3
  store i64 %780, i64* %PC
  %781 = add i64 %778, %777
  store i64 %781, i64* %RCX, align 8, !tbaa !2428
  %782 = icmp ult i64 %781, %777
  %783 = icmp ult i64 %781, %778
  %784 = or i1 %782, %783
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %785, i8* %786, align 1, !tbaa !2432
  %787 = trunc i64 %781 to i32
  %788 = and i32 %787, 255
  %789 = call i32 @llvm.ctpop.i32(i32 %788) #16
  %790 = trunc i32 %789 to i8
  %791 = and i8 %790, 1
  %792 = xor i8 %791, 1
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %792, i8* %793, align 1, !tbaa !2446
  %794 = xor i64 %778, %777
  %795 = xor i64 %794, %781
  %796 = lshr i64 %795, 4
  %797 = trunc i64 %796 to i8
  %798 = and i8 %797, 1
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %798, i8* %799, align 1, !tbaa !2447
  %800 = icmp eq i64 %781, 0
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %801, i8* %802, align 1, !tbaa !2448
  %803 = lshr i64 %781, 63
  %804 = trunc i64 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %804, i8* %805, align 1, !tbaa !2449
  %806 = lshr i64 %777, 63
  %807 = lshr i64 %778, 63
  %808 = xor i64 %803, %806
  %809 = xor i64 %803, %807
  %810 = add nuw nsw i64 %808, %809
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %812, i8* %813, align 1, !tbaa !2450
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 52
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to i32*
  %819 = load i32, i32* %818
  %820 = sext i32 %819 to i64
  store i64 %820, i64* %RDX, align 8, !tbaa !2428
  %821 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %822 = load i64, i64* %RCX
  %823 = load i64, i64* %RDX
  %824 = mul i64 %823, 8
  %825 = add i64 %824, %822
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to double*
  %829 = load double, double* %828
  %830 = bitcast i8* %821 to double*
  store double %829, double* %830, align 1, !tbaa !2452
  %831 = getelementptr inbounds i8, i8* %821, i64 8
  %832 = bitcast i8* %831 to double*
  store double 0.000000e+00, double* %832, align 1, !tbaa !2452
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 72
  %835 = load i32, i32* %EAX
  %836 = zext i32 %835 to i64
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 3
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %834 to i32*
  store i32 %835, i32* %839
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 2
  store i64 %841, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %842 = load i64, i64* %PC
  %843 = sub i64 %842, 10133
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %849 = load i64, i64* %848, align 8, !tbaa !2428
  %850 = add i64 %849, -8
  %851 = inttoptr i64 %850 to i64*
  store i64 %845, i64* %851
  store i64 %850, i64* %848, align 8, !tbaa !2428
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %843, i64* %852, align 8, !tbaa !2428
  %853 = load i64, i64* %PC
  %854 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %853, %struct.Memory* %662)
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 10
  store i64 %856, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 170), i64* %RSI, align 8, !tbaa !2428
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 8
  store i64 %858, i64* %PC
  %859 = load i64, i64* @stderr
  store i64 %859, i64* %RDI, align 8, !tbaa !2428
  %860 = load i64, i64* %RBP
  %861 = add i64 %860, 16
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 4
  store i64 %863, i64* %PC
  %864 = inttoptr i64 %861 to i64*
  %865 = load i64, i64* %864
  store i64 %865, i64* %RCX, align 8, !tbaa !2428
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 44
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 4
  store i64 %869, i64* %PC
  %870 = inttoptr i64 %867 to i32*
  %871 = load i32, i32* %870
  %872 = sext i32 %871 to i64
  store i64 %872, i64* %RDX, align 8, !tbaa !2428
  %873 = load i64, i64* %RDX
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 7
  store i64 %875, i64* %PC
  %876 = sext i64 %873 to i128
  %877 = and i128 %876, -18446744073709551616
  %878 = zext i64 %873 to i128
  %879 = or i128 %877, %878
  %880 = mul nsw i128 33800, %879
  %881 = trunc i128 %880 to i64
  store i64 %881, i64* %RDX, align 8, !tbaa !2428
  %882 = sext i64 %881 to i128
  %883 = icmp ne i128 %882, %880
  %884 = zext i1 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %884, i8* %885, align 1, !tbaa !2432
  %886 = trunc i128 %880 to i32
  %887 = and i32 %886, 255
  %888 = call i32 @llvm.ctpop.i32(i32 %887) #16
  %889 = trunc i32 %888 to i8
  %890 = and i8 %889, 1
  %891 = xor i8 %890, 1
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %891, i8* %892, align 1, !tbaa !2446
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %893, align 1, !tbaa !2447
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %894, align 1, !tbaa !2448
  %895 = lshr i64 %881, 63
  %896 = trunc i64 %895 to i8
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %896, i8* %897, align 1, !tbaa !2449
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %884, i8* %898, align 1, !tbaa !2450
  %899 = load i64, i64* %RCX
  %900 = load i64, i64* %RDX
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = add i64 %900, %899
  store i64 %903, i64* %RCX, align 8, !tbaa !2428
  %904 = icmp ult i64 %903, %899
  %905 = icmp ult i64 %903, %900
  %906 = or i1 %904, %905
  %907 = zext i1 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %907, i8* %908, align 1, !tbaa !2432
  %909 = trunc i64 %903 to i32
  %910 = and i32 %909, 255
  %911 = call i32 @llvm.ctpop.i32(i32 %910) #16
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %914, i8* %915, align 1, !tbaa !2446
  %916 = xor i64 %900, %899
  %917 = xor i64 %916, %903
  %918 = lshr i64 %917, 4
  %919 = trunc i64 %918 to i8
  %920 = and i8 %919, 1
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %920, i8* %921, align 1, !tbaa !2447
  %922 = icmp eq i64 %903, 0
  %923 = zext i1 %922 to i8
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %923, i8* %924, align 1, !tbaa !2448
  %925 = lshr i64 %903, 63
  %926 = trunc i64 %925 to i8
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %926, i8* %927, align 1, !tbaa !2449
  %928 = lshr i64 %899, 63
  %929 = lshr i64 %900, 63
  %930 = xor i64 %925, %928
  %931 = xor i64 %925, %929
  %932 = add nuw nsw i64 %930, %931
  %933 = icmp eq i64 %932, 2
  %934 = zext i1 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %934, i8* %935, align 1, !tbaa !2450
  %936 = load i64, i64* %RBP
  %937 = sub i64 %936, 48
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 4
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i32*
  %941 = load i32, i32* %940
  %942 = sext i32 %941 to i64
  store i64 %942, i64* %RDX, align 8, !tbaa !2428
  %943 = load i64, i64* %RDX
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 7
  store i64 %945, i64* %PC
  %946 = sext i64 %943 to i128
  %947 = and i128 %946, -18446744073709551616
  %948 = zext i64 %943 to i128
  %949 = or i128 %947, %948
  %950 = mul nsw i128 520, %949
  %951 = trunc i128 %950 to i64
  store i64 %951, i64* %RDX, align 8, !tbaa !2428
  %952 = sext i64 %951 to i128
  %953 = icmp ne i128 %952, %950
  %954 = zext i1 %953 to i8
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %954, i8* %955, align 1, !tbaa !2432
  %956 = trunc i128 %950 to i32
  %957 = and i32 %956, 255
  %958 = call i32 @llvm.ctpop.i32(i32 %957) #16
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %961, i8* %962, align 1, !tbaa !2446
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %963, align 1, !tbaa !2447
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %964, align 1, !tbaa !2448
  %965 = lshr i64 %951, 63
  %966 = trunc i64 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2449
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %954, i8* %968, align 1, !tbaa !2450
  %969 = load i64, i64* %RCX
  %970 = load i64, i64* %RDX
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 3
  store i64 %972, i64* %PC
  %973 = add i64 %970, %969
  store i64 %973, i64* %RCX, align 8, !tbaa !2428
  %974 = icmp ult i64 %973, %969
  %975 = icmp ult i64 %973, %970
  %976 = or i1 %974, %975
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %977, i8* %978, align 1, !tbaa !2432
  %979 = trunc i64 %973 to i32
  %980 = and i32 %979, 255
  %981 = call i32 @llvm.ctpop.i32(i32 %980) #16
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  %984 = xor i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %984, i8* %985, align 1, !tbaa !2446
  %986 = xor i64 %970, %969
  %987 = xor i64 %986, %973
  %988 = lshr i64 %987, 4
  %989 = trunc i64 %988 to i8
  %990 = and i8 %989, 1
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %990, i8* %991, align 1, !tbaa !2447
  %992 = icmp eq i64 %973, 0
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %993, i8* %994, align 1, !tbaa !2448
  %995 = lshr i64 %973, 63
  %996 = trunc i64 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %996, i8* %997, align 1, !tbaa !2449
  %998 = lshr i64 %969, 63
  %999 = lshr i64 %970, 63
  %1000 = xor i64 %995, %998
  %1001 = xor i64 %995, %999
  %1002 = add nuw nsw i64 %1000, %1001
  %1003 = icmp eq i64 %1002, 2
  %1004 = zext i1 %1003 to i8
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1004, i8* %1005, align 1, !tbaa !2450
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 52
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 4
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to i32*
  %1011 = load i32, i32* %1010
  %1012 = sext i32 %1011 to i64
  store i64 %1012, i64* %RDX, align 8, !tbaa !2428
  %1013 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1014 = load i64, i64* %RCX
  %1015 = load i64, i64* %RDX
  %1016 = mul i64 %1015, 8
  %1017 = add i64 %1016, %1014
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 5
  store i64 %1019, i64* %PC
  %1020 = inttoptr i64 %1017 to double*
  %1021 = load double, double* %1020
  %1022 = bitcast i8* %1013 to double*
  store double %1021, double* %1022, align 1, !tbaa !2452
  %1023 = getelementptr inbounds i8, i8* %1013, i64 8
  %1024 = bitcast i8* %1023 to double*
  store double 0.000000e+00, double* %1024, align 1, !tbaa !2452
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 76
  %1027 = load i32, i32* %EAX
  %1028 = zext i32 %1027 to i64
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 3
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1026 to i32*
  store i32 %1027, i32* %1031
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 2
  store i64 %1033, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2454
  %1034 = load i64, i64* %PC
  %1035 = sub i64 %1034, 10202
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 5
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 5
  store i64 %1039, i64* %PC
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1041 = load i64, i64* %1040, align 8, !tbaa !2428
  %1042 = add i64 %1041, -8
  %1043 = inttoptr i64 %1042 to i64*
  store i64 %1037, i64* %1043
  store i64 %1042, i64* %1040, align 8, !tbaa !2428
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1035, i64* %1044, align 8, !tbaa !2428
  %1045 = load i64, i64* %PC
  %1046 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %1045, %struct.Memory* %854)
  %1047 = bitcast i32* %R8D to i64*
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 6
  store i64 %1049, i64* %PC
  store i64 20, i64* %1047, align 8, !tbaa !2428
  %1050 = bitcast i32* %R9D to i64*
  %1051 = load i64, i64* %RBP
  %1052 = sub i64 %1051, 44
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 4
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1052 to i32*
  %1056 = load i32, i32* %1055
  %1057 = zext i32 %1056 to i64
  store i64 %1057, i64* %1050, align 8, !tbaa !2428
  %1058 = bitcast i32* %R9D to i64*
  %1059 = load i32, i32* %R9D
  %1060 = zext i32 %1059 to i64
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 8
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 5
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i32*
  %1066 = load i32, i32* %1065
  %1067 = shl i64 %1060, 32
  %1068 = ashr exact i64 %1067, 32
  %1069 = sext i32 %1066 to i64
  %1070 = mul nsw i64 %1069, %1068
  %1071 = trunc i64 %1070 to i32
  %1072 = and i64 %1070, 4294967295
  store i64 %1072, i64* %1058, align 8, !tbaa !2428
  %1073 = shl i64 %1070, 32
  %1074 = ashr exact i64 %1073, 32
  %1075 = icmp ne i64 %1074, %1070
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2432
  %1078 = and i32 %1071, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2446
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1084, align 1, !tbaa !2447
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1085, align 1, !tbaa !2448
  %1086 = lshr i32 %1071, 31
  %1087 = trunc i32 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1087, i8* %1088, align 1, !tbaa !2449
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1076, i8* %1089, align 1, !tbaa !2450
  %1090 = bitcast i32* %R9D to i64*
  %1091 = load i32, i32* %R9D
  %1092 = zext i32 %1091 to i64
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 48
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i32*
  %1098 = load i32, i32* %1097
  %1099 = add i32 %1098, %1091
  %1100 = zext i32 %1099 to i64
  store i64 %1100, i64* %1090, align 8, !tbaa !2428
  %1101 = icmp ult i32 %1099, %1091
  %1102 = icmp ult i32 %1099, %1098
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = and i32 %1099, 255
  %1107 = call i32 @llvm.ctpop.i32(i32 %1106) #16
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = xor i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1110, i8* %1111, align 1, !tbaa !2446
  %1112 = xor i32 %1098, %1091
  %1113 = xor i32 %1112, %1099
  %1114 = lshr i32 %1113, 4
  %1115 = trunc i32 %1114 to i8
  %1116 = and i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1116, i8* %1117, align 1, !tbaa !2447
  %1118 = icmp eq i32 %1099, 0
  %1119 = zext i1 %1118 to i8
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1119, i8* %1120, align 1, !tbaa !2448
  %1121 = lshr i32 %1099, 31
  %1122 = trunc i32 %1121 to i8
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1122, i8* %1123, align 1, !tbaa !2449
  %1124 = lshr i32 %1091, 31
  %1125 = lshr i32 %1098, 31
  %1126 = xor i32 %1121, %1124
  %1127 = xor i32 %1121, %1125
  %1128 = add nuw nsw i32 %1126, %1127
  %1129 = icmp eq i32 %1128, 2
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1130, i8* %1131, align 1, !tbaa !2450
  %1132 = load i64, i64* %RBP
  %1133 = sub i64 %1132, 80
  %1134 = load i32, i32* %EAX
  %1135 = zext i32 %1134 to i64
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 3
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1133 to i32*
  store i32 %1134, i32* %1138
  %1139 = load i32, i32* %R9D
  %1140 = zext i32 %1139 to i64
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 3
  store i64 %1142, i64* %PC
  %1143 = and i64 %1140, 4294967295
  store i64 %1143, i64* %RAX, align 8, !tbaa !2428
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 1
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1148 = bitcast %union.anon* %1147 to i32*
  %1149 = load i32, i32* %1148, align 8, !tbaa !2451
  %1150 = sext i32 %1149 to i64
  %1151 = lshr i64 %1150, 32
  store i64 %1151, i64* %1146, align 8, !tbaa !2428
  %1152 = load i32, i32* %R8D
  %1153 = zext i32 %1152 to i64
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 3
  store i64 %1155, i64* %PC
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %1157 = bitcast %union.anon* %1156 to i32*
  %1158 = load i32, i32* %1157, align 8, !tbaa !2451
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %1161 = bitcast %union.anon* %1160 to i32*
  %1162 = load i32, i32* %1161, align 8, !tbaa !2451
  %1163 = zext i32 %1162 to i64
  %1164 = shl i64 %1153, 32
  %1165 = ashr exact i64 %1164, 32
  %1166 = shl nuw i64 %1163, 32
  %1167 = or i64 %1166, %1159
  %1168 = sdiv i64 %1167, %1165
  %1169 = shl i64 %1168, 32
  %1170 = ashr exact i64 %1169, 32
  %1171 = icmp eq i64 %1168, %1170
  br i1 %1171, label %1176, label %1172

; <label>:1172:                                   ; preds = %block_402c4e
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1174 = load i64, i64* %1173, align 8, !tbaa !2428
  %1175 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1174, %struct.Memory* %1046) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:1176:                                   ; preds = %block_402c4e
  %1177 = srem i64 %1167, %1165
  %1178 = getelementptr inbounds %union.anon, %union.anon* %1156, i64 0, i32 0
  %1179 = and i64 %1168, 4294967295
  store i64 %1179, i64* %1178, align 8, !tbaa !2428
  %1180 = getelementptr inbounds %union.anon, %union.anon* %1160, i64 0, i32 0
  %1181 = and i64 %1177, 4294967295
  store i64 %1181, i64* %1180, align 8, !tbaa !2428
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1182, align 1, !tbaa !2432
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1183, align 1, !tbaa !2446
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1184, align 1, !tbaa !2447
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1185, align 1, !tbaa !2448
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1186, align 1, !tbaa !2449
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1187, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %1172, %1176
  %1188 = phi %struct.Memory* [ %1175, %1172 ], [ %1046, %1176 ]
  %1189 = load i32, i32* %EDX
  %1190 = zext i32 %1189 to i64
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 3
  store i64 %1192, i64* %PC
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1193, align 1, !tbaa !2432
  %1194 = and i32 %1189, 255
  %1195 = call i32 @llvm.ctpop.i32(i32 %1194) #16
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1198, i8* %1199, align 1, !tbaa !2446
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1200, align 1, !tbaa !2447
  %1201 = icmp eq i32 %1189, 0
  %1202 = zext i1 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1202, i8* %1203, align 1, !tbaa !2448
  %1204 = lshr i32 %1189, 31
  %1205 = trunc i32 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1205, i8* %1206, align 1, !tbaa !2449
  %1207 = lshr i32 %1189, 31
  %1208 = xor i32 %1204, %1207
  %1209 = add nuw nsw i32 %1208, %1207
  %1210 = icmp eq i32 %1209, 2
  %1211 = zext i1 %1210 to i8
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1211, i8* %1212, align 1, !tbaa !2450
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 34
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 6
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 6
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1220 = load i8, i8* %1219, align 1, !tbaa !2448
  %1221 = icmp eq i8 %1220, 0
  %1222 = zext i1 %1221 to i8
  store i8 %1222, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1224 = select i1 %1221, i64 %1214, i64 %1216
  store i64 %1224, i64* %1223, align 8, !tbaa !2428
  %1225 = load i8, i8* %BRANCH_TAKEN
  %1226 = icmp eq i8 %1225, 1
  br i1 %1226, label %block_402da1, label %block_402d85

block_402c28:                                     ; preds = %block_402c1c
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 48
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 7
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i32*
  store i32 0, i32* %1231
  br label %block_402c2f

block_402c2f:                                     ; preds = %block_402c28, %block_402db4
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_402c28 ], [ %MEMORY.2, %block_402db4 ]
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 48
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 3
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i32*
  %1237 = load i32, i32* %1236
  %1238 = zext i32 %1237 to i64
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  %1239 = load i32, i32* %EAX
  %1240 = zext i32 %1239 to i64
  %1241 = load i64, i64* %RBP
  %1242 = sub i64 %1241, 12
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 3
  store i64 %1244, i64* %PC
  %1245 = inttoptr i64 %1242 to i32*
  %1246 = load i32, i32* %1245
  %1247 = sub i32 %1239, %1246
  %1248 = icmp ult i32 %1239, %1246
  %1249 = zext i1 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1249, i8* %1250, align 1, !tbaa !2432
  %1251 = and i32 %1247, 255
  %1252 = call i32 @llvm.ctpop.i32(i32 %1251) #16
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = xor i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1255, i8* %1256, align 1, !tbaa !2446
  %1257 = xor i32 %1246, %1239
  %1258 = xor i32 %1257, %1247
  %1259 = lshr i32 %1258, 4
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1261, i8* %1262, align 1, !tbaa !2447
  %1263 = icmp eq i32 %1247, 0
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1264, i8* %1265, align 1, !tbaa !2448
  %1266 = lshr i32 %1247, 31
  %1267 = trunc i32 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1267, i8* %1268, align 1, !tbaa !2449
  %1269 = lshr i32 %1239, 31
  %1270 = lshr i32 %1246, 31
  %1271 = xor i32 %1270, %1269
  %1272 = xor i32 %1266, %1269
  %1273 = add nuw nsw i32 %1272, %1271
  %1274 = icmp eq i32 %1273, 2
  %1275 = zext i1 %1274 to i8
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1275, i8* %1276, align 1, !tbaa !2450
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 402
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 6
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 6
  store i64 %1282, i64* %PC
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1284 = load i8, i8* %1283, align 1, !tbaa !2448
  %1285 = icmp eq i8 %1284, 0
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1287 = load i8, i8* %1286, align 1, !tbaa !2449
  %1288 = icmp ne i8 %1287, 0
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1290 = load i8, i8* %1289, align 1, !tbaa !2450
  %1291 = icmp ne i8 %1290, 0
  %1292 = xor i1 %1288, %1291
  %1293 = xor i1 %1292, true
  %1294 = and i1 %1285, %1293
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1297 = select i1 %1294, i64 %1278, i64 %1280
  store i64 %1297, i64* %1296, align 8, !tbaa !2428
  %1298 = load i8, i8* %BRANCH_TAKEN
  %1299 = icmp eq i8 %1298, 1
  br i1 %1299, label %block_402dc7, label %block_402c3b

block_402dc7:                                     ; preds = %block_402c2f
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 5
  store i64 %1303, i64* %PC
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1301, i64* %1304, align 8, !tbaa !2428
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 44
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 3
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i32*
  %1310 = load i32, i32* %1309
  %1311 = zext i32 %1310 to i64
  store i64 %1311, i64* %RAX, align 8, !tbaa !2428
  %1312 = load i64, i64* %RAX
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 3
  store i64 %1314, i64* %PC
  %1315 = trunc i64 %1312 to i32
  %1316 = add i32 1, %1315
  %1317 = zext i32 %1316 to i64
  store i64 %1317, i64* %RAX, align 8, !tbaa !2428
  %1318 = icmp ult i32 %1316, %1315
  %1319 = icmp ult i32 %1316, 1
  %1320 = or i1 %1318, %1319
  %1321 = zext i1 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1321, i8* %1322, align 1, !tbaa !2432
  %1323 = and i32 %1316, 255
  %1324 = call i32 @llvm.ctpop.i32(i32 %1323) #16
  %1325 = trunc i32 %1324 to i8
  %1326 = and i8 %1325, 1
  %1327 = xor i8 %1326, 1
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1327, i8* %1328, align 1, !tbaa !2446
  %1329 = xor i64 1, %1312
  %1330 = trunc i64 %1329 to i32
  %1331 = xor i32 %1330, %1316
  %1332 = lshr i32 %1331, 4
  %1333 = trunc i32 %1332 to i8
  %1334 = and i8 %1333, 1
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1334, i8* %1335, align 1, !tbaa !2447
  %1336 = icmp eq i32 %1316, 0
  %1337 = zext i1 %1336 to i8
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1337, i8* %1338, align 1, !tbaa !2448
  %1339 = lshr i32 %1316, 31
  %1340 = trunc i32 %1339 to i8
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1340, i8* %1341, align 1, !tbaa !2449
  %1342 = lshr i32 %1315, 31
  %1343 = xor i32 %1339, %1342
  %1344 = add nuw nsw i32 %1343, %1339
  %1345 = icmp eq i32 %1344, 2
  %1346 = zext i1 %1345 to i8
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1346, i8* %1347, align 1, !tbaa !2450
  %1348 = load i64, i64* %RBP
  %1349 = sub i64 %1348, 44
  %1350 = load i32, i32* %EAX
  %1351 = zext i32 %1350 to i64
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 3
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1349 to i32*
  store i32 %1350, i32* %1354
  %1355 = load i64, i64* %PC
  %1356 = sub i64 %1355, 441
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 5
  store i64 %1358, i64* %PC
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1356, i64* %1359, align 8, !tbaa !2428
  br label %block_402c1c

block_402dda:                                     ; preds = %block_402c1c
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 10
  store i64 %1361, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 8
  store i64 %1363, i64* %PC
  %1364 = load i64, i64* @stderr
  store i64 %1364, i64* %RDI, align 8, !tbaa !2428
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 2
  store i64 %1366, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %1367 = load i64, i64* %PC
  %1368 = sub i64 %1367, 10350
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 5
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 5
  store i64 %1372, i64* %PC
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1374 = load i64, i64* %1373, align 8, !tbaa !2428
  %1375 = add i64 %1374, -8
  %1376 = inttoptr i64 %1375 to i64*
  store i64 %1370, i64* %1376
  store i64 %1375, i64* %1373, align 8, !tbaa !2428
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1368, i64* %1377, align 8, !tbaa !2428
  %1378 = load i64, i64* %PC
  %1379 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %1378, %struct.Memory* %MEMORY.0)
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 88
  %1382 = load i32, i32* %EAX
  %1383 = zext i32 %1382 to i64
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 3
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1381 to i32*
  store i32 %1382, i32* %1386
  %1387 = load i64, i64* %RSP
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 4
  store i64 %1389, i64* %PC
  %1390 = add i64 96, %1387
  store i64 %1390, i64* %RSP, align 8, !tbaa !2428
  %1391 = icmp ult i64 %1390, %1387
  %1392 = icmp ult i64 %1390, 96
  %1393 = or i1 %1391, %1392
  %1394 = zext i1 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1394, i8* %1395, align 1, !tbaa !2432
  %1396 = trunc i64 %1390 to i32
  %1397 = and i32 %1396, 255
  %1398 = call i32 @llvm.ctpop.i32(i32 %1397) #16
  %1399 = trunc i32 %1398 to i8
  %1400 = and i8 %1399, 1
  %1401 = xor i8 %1400, 1
  %1402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1401, i8* %1402, align 1, !tbaa !2446
  %1403 = xor i64 96, %1387
  %1404 = xor i64 %1403, %1390
  %1405 = lshr i64 %1404, 4
  %1406 = trunc i64 %1405 to i8
  %1407 = and i8 %1406, 1
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1407, i8* %1408, align 1, !tbaa !2447
  %1409 = icmp eq i64 %1390, 0
  %1410 = zext i1 %1409 to i8
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1410, i8* %1411, align 1, !tbaa !2448
  %1412 = lshr i64 %1390, 63
  %1413 = trunc i64 %1412 to i8
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1413, i8* %1414, align 1, !tbaa !2449
  %1415 = lshr i64 %1387, 63
  %1416 = xor i64 %1412, %1415
  %1417 = add nuw nsw i64 %1416, %1412
  %1418 = icmp eq i64 %1417, 2
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1419, i8* %1420, align 1, !tbaa !2450
  %1421 = load i64, i64* %PC
  %1422 = add i64 %1421, 1
  store i64 %1422, i64* %PC
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1424 = load i64, i64* %1423, align 8, !tbaa !2428
  %1425 = add i64 %1424, 8
  %1426 = inttoptr i64 %1424 to i64*
  %1427 = load i64, i64* %1426
  store i64 %1427, i64* %RBP, align 8, !tbaa !2428
  store i64 %1425, i64* %1423, align 8, !tbaa !2428
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 1
  store i64 %1429, i64* %PC
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1432 = load i64, i64* %1431, align 8, !tbaa !2428
  %1433 = inttoptr i64 %1432 to i64*
  %1434 = load i64, i64* %1433
  store i64 %1434, i64* %1430, align 8, !tbaa !2428
  %1435 = add i64 %1432, 8
  store i64 %1435, i64* %1431, align 8, !tbaa !2428
  ret %struct.Memory* %1379

block_402d85:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 10
  store i64 %1437, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 117), i64* %RSI, align 8, !tbaa !2428
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 8
  store i64 %1439, i64* %PC
  %1440 = load i64, i64* @stderr
  store i64 %1440, i64* %RDI, align 8, !tbaa !2428
  %1441 = load i64, i64* %PC
  %1442 = add i64 %1441, 2
  store i64 %1442, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %1443 = load i64, i64* %PC
  %1444 = sub i64 %1443, 10265
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 5
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 5
  store i64 %1448, i64* %PC
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1450 = load i64, i64* %1449, align 8, !tbaa !2428
  %1451 = add i64 %1450, -8
  %1452 = inttoptr i64 %1451 to i64*
  store i64 %1446, i64* %1452
  store i64 %1451, i64* %1449, align 8, !tbaa !2428
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1444, i64* %1453, align 8, !tbaa !2428
  %1454 = load i64, i64* %PC
  %1455 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %1454, %struct.Memory* %1188)
  %1456 = load i64, i64* %RBP
  %1457 = sub i64 %1456, 84
  %1458 = load i32, i32* %EAX
  %1459 = zext i32 %1458 to i64
  %1460 = load i64, i64* %PC
  %1461 = add i64 %1460, 3
  store i64 %1461, i64* %PC
  %1462 = inttoptr i64 %1457 to i32*
  store i32 %1458, i32* %1462
  br label %block_402da1

block_402c42:                                     ; preds = %block_402da1, %block_402c3b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_402c3b ], [ %MEMORY.3, %block_402da1 ]
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 52
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 3
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1464 to i32*
  %1468 = load i32, i32* %1467
  %1469 = zext i32 %1468 to i64
  store i64 %1469, i64* %RAX, align 8, !tbaa !2428
  %1470 = load i32, i32* %EAX
  %1471 = zext i32 %1470 to i64
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 8
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 3
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1473 to i32*
  %1477 = load i32, i32* %1476
  %1478 = sub i32 %1470, %1477
  %1479 = icmp ult i32 %1470, %1477
  %1480 = zext i1 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1480, i8* %1481, align 1, !tbaa !2432
  %1482 = and i32 %1478, 255
  %1483 = call i32 @llvm.ctpop.i32(i32 %1482) #16
  %1484 = trunc i32 %1483 to i8
  %1485 = and i8 %1484, 1
  %1486 = xor i8 %1485, 1
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1486, i8* %1487, align 1, !tbaa !2446
  %1488 = xor i32 %1477, %1470
  %1489 = xor i32 %1488, %1478
  %1490 = lshr i32 %1489, 4
  %1491 = trunc i32 %1490 to i8
  %1492 = and i8 %1491, 1
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1492, i8* %1493, align 1, !tbaa !2447
  %1494 = icmp eq i32 %1478, 0
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1495, i8* %1496, align 1, !tbaa !2448
  %1497 = lshr i32 %1478, 31
  %1498 = trunc i32 %1497 to i8
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1498, i8* %1499, align 1, !tbaa !2449
  %1500 = lshr i32 %1470, 31
  %1501 = lshr i32 %1477, 31
  %1502 = xor i32 %1501, %1500
  %1503 = xor i32 %1497, %1500
  %1504 = add nuw nsw i32 %1503, %1502
  %1505 = icmp eq i32 %1504, 2
  %1506 = zext i1 %1505 to i8
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1506, i8* %1507, align 1, !tbaa !2450
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 364
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 6
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 6
  store i64 %1513, i64* %PC
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1515 = load i8, i8* %1514, align 1, !tbaa !2448
  %1516 = icmp eq i8 %1515, 0
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1518 = load i8, i8* %1517, align 1, !tbaa !2449
  %1519 = icmp ne i8 %1518, 0
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1521 = load i8, i8* %1520, align 1, !tbaa !2450
  %1522 = icmp ne i8 %1521, 0
  %1523 = xor i1 %1519, %1522
  %1524 = xor i1 %1523, true
  %1525 = and i1 %1516, %1524
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1528 = select i1 %1525, i64 %1509, i64 %1511
  store i64 %1528, i64* %1527, align 8, !tbaa !2428
  %1529 = load i8, i8* %BRANCH_TAKEN
  %1530 = icmp eq i8 %1529, 1
  %1531 = load i64, i64* %PC
  br i1 %1530, label %block_402db4, label %block_402c4e

block_402da1:                                     ; preds = %block_402d85, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.3 = phi %struct.Memory* [ %1188, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %1455, %block_402d85 ]
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 5
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 5
  store i64 %1535, i64* %PC
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1533, i64* %1536, align 8, !tbaa !2428
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 52
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 3
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1538 to i32*
  %1542 = load i32, i32* %1541
  %1543 = zext i32 %1542 to i64
  store i64 %1543, i64* %RAX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RAX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 3
  store i64 %1546, i64* %PC
  %1547 = trunc i64 %1544 to i32
  %1548 = add i32 1, %1547
  %1549 = zext i32 %1548 to i64
  store i64 %1549, i64* %RAX, align 8, !tbaa !2428
  %1550 = icmp ult i32 %1548, %1547
  %1551 = icmp ult i32 %1548, 1
  %1552 = or i1 %1550, %1551
  %1553 = zext i1 %1552 to i8
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1553, i8* %1554, align 1, !tbaa !2432
  %1555 = and i32 %1548, 255
  %1556 = call i32 @llvm.ctpop.i32(i32 %1555) #16
  %1557 = trunc i32 %1556 to i8
  %1558 = and i8 %1557, 1
  %1559 = xor i8 %1558, 1
  %1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1559, i8* %1560, align 1, !tbaa !2446
  %1561 = xor i64 1, %1544
  %1562 = trunc i64 %1561 to i32
  %1563 = xor i32 %1562, %1548
  %1564 = lshr i32 %1563, 4
  %1565 = trunc i32 %1564 to i8
  %1566 = and i8 %1565, 1
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1566, i8* %1567, align 1, !tbaa !2447
  %1568 = icmp eq i32 %1548, 0
  %1569 = zext i1 %1568 to i8
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1569, i8* %1570, align 1, !tbaa !2448
  %1571 = lshr i32 %1548, 31
  %1572 = trunc i32 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1572, i8* %1573, align 1, !tbaa !2449
  %1574 = lshr i32 %1547, 31
  %1575 = xor i32 %1571, %1574
  %1576 = add nuw nsw i32 %1575, %1571
  %1577 = icmp eq i32 %1576, 2
  %1578 = zext i1 %1577 to i8
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1578, i8* %1579, align 1, !tbaa !2450
  %1580 = load i64, i64* %RBP
  %1581 = sub i64 %1580, 52
  %1582 = load i32, i32* %EAX
  %1583 = zext i32 %1582 to i64
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 3
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1581 to i32*
  store i32 %1582, i32* %1586
  %1587 = load i64, i64* %PC
  %1588 = sub i64 %1587, 365
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1588, i64* %1591, align 8, !tbaa !2428
  br label %block_402c42
}

; Function Attrs: noinline
define %struct.Memory* @sub_400720_polybench_prepare_instruments(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400720:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = sub i64 %22, 132
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 5
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 5
  store i64 %27, i64* %PC
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %29 = load i64, i64* %28, align 8, !tbaa !2428
  %30 = add i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  store i64 %25, i64* %31
  store i64 %30, i64* %28, align 8, !tbaa !2428
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %23, i64* %32, align 8, !tbaa !2428
  %33 = load i64, i64* %PC
  %34 = call %struct.Memory* @sub_4006a0_polybench_flush_cache_renamed_(%struct.State* %0, i64 %33, %struct.Memory* %2)
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = inttoptr i64 %46 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %44, align 8, !tbaa !2428
  %49 = add i64 %46, 8
  store i64 %49, i64* %45, align 8, !tbaa !2428
  ret %struct.Memory* %34
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400520:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400532, label %block_400530

block_400530:                                     ; preds = %block_400520
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400532

block_400532:                                     ; preds = %block_400530, %block_400520
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400520 ], [ %92, %block_400530 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4013d0_kernel_fdtd_apml(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4013d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 17
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %R8 = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 19
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R9 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 21
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R10 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 23
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R11 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 25
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R12 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 27
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R13 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 29
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R14 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 31
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R15 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %R15
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 2
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %82 = load i64, i64* %81, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %78, i64* %84
  store i64 %83, i64* %81, align 8, !tbaa !2428
  %85 = load i64, i64* %R14
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 2
  store i64 %87, i64* %PC
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %85, i64* %91
  store i64 %90, i64* %88, align 8, !tbaa !2428
  %92 = load i64, i64* %R13
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 2
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %R12
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 2
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %RBX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 1
  store i64 %108, i64* %PC
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %110 = load i64, i64* %109, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %106, i64* %112
  store i64 %111, i64* %109, align 8, !tbaa !2428
  %113 = load i64, i64* %RSP
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = sub i64 %113, 32
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  %117 = icmp ult i64 %113, 32
  %118 = zext i1 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %118, i8* %119, align 1, !tbaa !2432
  %120 = trunc i64 %116 to i32
  %121 = and i32 %120, 255
  %122 = call i32 @llvm.ctpop.i32(i32 %121) #16
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %125, i8* %126, align 1, !tbaa !2446
  %127 = xor i64 32, %113
  %128 = xor i64 %127, %116
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %131, i8* %132, align 1, !tbaa !2447
  %133 = icmp eq i64 %116, 0
  %134 = zext i1 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = lshr i64 %116, 63
  %137 = trunc i64 %136 to i8
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %137, i8* %138, align 1, !tbaa !2449
  %139 = lshr i64 %113, 63
  %140 = xor i64 %136, %139
  %141 = add nuw nsw i64 %140, %139
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %143, i8* %144, align 1, !tbaa !2450
  %145 = load i64, i64* %RBP
  %146 = add i64 %145, 96
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP
  %152 = add i64 %151, 88
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %R10, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = add i64 %157, 80
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161
  store i64 %162, i64* %R11, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = add i64 %163, 72
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167
  store i64 %168, i64* %RBX, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP
  %170 = add i64 %169, 64
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %R14, align 8, !tbaa !2428
  %175 = load i64, i64* %RBP
  %176 = add i64 %175, 56
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  %180 = load i64, i64* %179
  store i64 %180, i64* %R15, align 8, !tbaa !2428
  %181 = load i64, i64* %RBP
  %182 = add i64 %181, 48
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %R12, align 8, !tbaa !2428
  %187 = load i64, i64* %RBP
  %188 = add i64 %187, 40
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %R13, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 120
  %195 = load i64, i64* %RAX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %194 to i64*
  store i64 %195, i64* %198
  %199 = load i64, i64* %RBP
  %200 = add i64 %199, 32
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 128
  %207 = load i64, i64* %RAX
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %206 to i64*
  store i64 %207, i64* %210
  %211 = load i64, i64* %RBP
  %212 = add i64 %211, 24
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 136
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %RBP
  %224 = add i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 44
  %231 = load i32, i32* %EDI
  %232 = zext i32 %231 to i64
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %230 to i32*
  store i32 %231, i32* %235
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 48
  %238 = load i32, i32* %ESI
  %239 = zext i32 %238 to i64
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 3
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %237 to i32*
  store i32 %238, i32* %242
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 52
  %245 = load i32, i32* %EDX
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %244 to i32*
  store i32 %245, i32* %249
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 64
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = bitcast i8* %252 to double*
  %256 = load double, double* %255, align 1
  %257 = inttoptr i64 %251 to double*
  store double %256, double* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 72
  %260 = bitcast %union.vec128_t* %XMM1 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = bitcast i8* %260 to double*
  %264 = load double, double* %263, align 1
  %265 = inttoptr i64 %259 to double*
  store double %264, double* %265
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 80
  %268 = load i64, i64* %RCX
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %271
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 88
  %274 = load i64, i64* %R8
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 96
  %280 = load i64, i64* %R9
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %279 to i64*
  store i64 %280, i64* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 100
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 7
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  store i32 0, i32* %288
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 144
  %291 = load i64, i64* %R13
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 7
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %290 to i64*
  store i64 %291, i64* %294
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 152
  %297 = load i64, i64* %RAX
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 7
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %296 to i64*
  store i64 %297, i64* %300
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 160
  %303 = load i64, i64* %R10
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 7
  store i64 %305, i64* %PC
  %306 = inttoptr i64 %302 to i64*
  store i64 %303, i64* %306
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 168
  %309 = load i64, i64* %R11
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 7
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %308 to i64*
  store i64 %309, i64* %312
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 176
  %315 = load i64, i64* %RBX
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 7
  store i64 %317, i64* %PC
  %318 = inttoptr i64 %314 to i64*
  store i64 %315, i64* %318
  %319 = load i64, i64* %RBP
  %320 = sub i64 %319, 184
  %321 = load i64, i64* %R14
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 7
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %320 to i64*
  store i64 %321, i64* %324
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 192
  %327 = load i64, i64* %R15
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 7
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %326 to i64*
  store i64 %327, i64* %330
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 200
  %333 = load i64, i64* %R12
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 7
  store i64 %335, i64* %PC
  %336 = inttoptr i64 %332 to i64*
  store i64 %333, i64* %336
  br label %block_40147a

block_401499:                                     ; preds = %block_40148d
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 108
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 7
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %338 to i32*
  store i32 0, i32* %341
  br label %block_4014a0

block_40147a:                                     ; preds = %block_401ee5, %block_4013d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4013d0 ], [ %MEMORY.1, %block_401ee5 ]
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 100
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i32*
  %347 = load i32, i32* %346
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = load i32, i32* %EAX
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 44
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i32*
  %356 = load i32, i32* %355
  %357 = sub i32 %349, %356
  %358 = icmp ult i32 %349, %356
  %359 = zext i1 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %359, i8* %360, align 1, !tbaa !2432
  %361 = and i32 %357, 255
  %362 = call i32 @llvm.ctpop.i32(i32 %361) #16
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %365, i8* %366, align 1, !tbaa !2446
  %367 = xor i32 %356, %349
  %368 = xor i32 %367, %357
  %369 = lshr i32 %368, 4
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %371, i8* %372, align 1, !tbaa !2447
  %373 = icmp eq i32 %357, 0
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %374, i8* %375, align 1, !tbaa !2448
  %376 = lshr i32 %357, 31
  %377 = trunc i32 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %377, i8* %378, align 1, !tbaa !2449
  %379 = lshr i32 %349, 31
  %380 = lshr i32 %356, 31
  %381 = xor i32 %380, %379
  %382 = xor i32 %376, %379
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %385, i8* %386, align 1, !tbaa !2450
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 2680
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 6
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 6
  store i64 %392, i64* %PC
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %394 = load i8, i8* %393, align 1, !tbaa !2449
  %395 = icmp ne i8 %394, 0
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %397 = load i8, i8* %396, align 1, !tbaa !2450
  %398 = icmp ne i8 %397, 0
  %399 = xor i1 %395, %398
  %400 = xor i1 %399, true
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %403 = select i1 %399, i64 %390, i64 %388
  store i64 %403, i64* %402, align 8, !tbaa !2428
  %404 = load i8, i8* %BRANCH_TAKEN
  %405 = icmp eq i8 %404, 1
  br i1 %405, label %block_401ef8, label %block_401486

block_401ef8:                                     ; preds = %block_40147a
  %406 = load i64, i64* %RSP
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = add i64 32, %406
  store i64 %409, i64* %RSP, align 8, !tbaa !2428
  %410 = icmp ult i64 %409, %406
  %411 = icmp ult i64 %409, 32
  %412 = or i1 %410, %411
  %413 = zext i1 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %413, i8* %414, align 1, !tbaa !2432
  %415 = trunc i64 %409 to i32
  %416 = and i32 %415, 255
  %417 = call i32 @llvm.ctpop.i32(i32 %416) #16
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = xor i8 %419, 1
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %420, i8* %421, align 1, !tbaa !2446
  %422 = xor i64 32, %406
  %423 = xor i64 %422, %409
  %424 = lshr i64 %423, 4
  %425 = trunc i64 %424 to i8
  %426 = and i8 %425, 1
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %426, i8* %427, align 1, !tbaa !2447
  %428 = icmp eq i64 %409, 0
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %429, i8* %430, align 1, !tbaa !2448
  %431 = lshr i64 %409, 63
  %432 = trunc i64 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %432, i8* %433, align 1, !tbaa !2449
  %434 = lshr i64 %406, 63
  %435 = xor i64 %431, %434
  %436 = add nuw nsw i64 %435, %431
  %437 = icmp eq i64 %436, 2
  %438 = zext i1 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %438, i8* %439, align 1, !tbaa !2450
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 1
  store i64 %441, i64* %PC
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %443 = load i64, i64* %442, align 8, !tbaa !2428
  %444 = add i64 %443, 8
  %445 = inttoptr i64 %443 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RBX, align 8, !tbaa !2428
  store i64 %444, i64* %442, align 8, !tbaa !2428
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 2
  store i64 %448, i64* %PC
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %450 = load i64, i64* %449, align 8, !tbaa !2428
  %451 = add i64 %450, 8
  %452 = inttoptr i64 %450 to i64*
  %453 = load i64, i64* %452
  store i64 %453, i64* %R12, align 8, !tbaa !2428
  store i64 %451, i64* %449, align 8, !tbaa !2428
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 2
  store i64 %455, i64* %PC
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %457 = load i64, i64* %456, align 8, !tbaa !2428
  %458 = add i64 %457, 8
  %459 = inttoptr i64 %457 to i64*
  %460 = load i64, i64* %459
  store i64 %460, i64* %R13, align 8, !tbaa !2428
  store i64 %458, i64* %456, align 8, !tbaa !2428
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %464 = load i64, i64* %463, align 8, !tbaa !2428
  %465 = add i64 %464, 8
  %466 = inttoptr i64 %464 to i64*
  %467 = load i64, i64* %466
  store i64 %467, i64* %R14, align 8, !tbaa !2428
  store i64 %465, i64* %463, align 8, !tbaa !2428
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 2
  store i64 %469, i64* %PC
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %471 = load i64, i64* %470, align 8, !tbaa !2428
  %472 = add i64 %471, 8
  %473 = inttoptr i64 %471 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %R15, align 8, !tbaa !2428
  store i64 %472, i64* %470, align 8, !tbaa !2428
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 1
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %478 = load i64, i64* %477, align 8, !tbaa !2428
  %479 = add i64 %478, 8
  %480 = inttoptr i64 %478 to i64*
  %481 = load i64, i64* %480
  store i64 %481, i64* %RBP, align 8, !tbaa !2428
  store i64 %479, i64* %477, align 8, !tbaa !2428
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 1
  store i64 %483, i64* %PC
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %486 = load i64, i64* %485, align 8, !tbaa !2428
  %487 = inttoptr i64 %486 to i64*
  %488 = load i64, i64* %487
  store i64 %488, i64* %484, align 8, !tbaa !2428
  %489 = add i64 %486, 8
  store i64 %489, i64* %485, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40148d:                                     ; preds = %block_401486, %block_401c6b
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_401486 ], [ %MEMORY.2, %block_401c6b ]
  %490 = load i64, i64* %RBP
  %491 = sub i64 %490, 104
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %491 to i32*
  %495 = load i32, i32* %494
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = load i32, i32* %EAX
  %498 = zext i32 %497 to i64
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 52
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = sub i32 %497, %504
  %506 = icmp ult i32 %497, %504
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %507, i8* %508, align 1, !tbaa !2432
  %509 = and i32 %505, 255
  %510 = call i32 @llvm.ctpop.i32(i32 %509) #16
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %513, i8* %514, align 1, !tbaa !2446
  %515 = xor i32 %504, %497
  %516 = xor i32 %515, %505
  %517 = lshr i32 %516, 4
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %519, i8* %520, align 1, !tbaa !2447
  %521 = icmp eq i32 %505, 0
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %522, i8* %523, align 1, !tbaa !2448
  %524 = lshr i32 %505, 31
  %525 = trunc i32 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %525, i8* %526, align 1, !tbaa !2449
  %527 = lshr i32 %497, 31
  %528 = lshr i32 %504, 31
  %529 = xor i32 %528, %527
  %530 = xor i32 %524, %527
  %531 = add nuw nsw i32 %530, %529
  %532 = icmp eq i32 %531, 2
  %533 = zext i1 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %533, i8* %534, align 1, !tbaa !2450
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 2642
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 6
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 6
  store i64 %540, i64* %PC
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %542 = load i8, i8* %541, align 1, !tbaa !2449
  %543 = icmp ne i8 %542, 0
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %545 = load i8, i8* %544, align 1, !tbaa !2450
  %546 = icmp ne i8 %545, 0
  %547 = xor i1 %543, %546
  %548 = xor i1 %547, true
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %551 = select i1 %547, i64 %538, i64 %536
  store i64 %551, i64* %550, align 8, !tbaa !2428
  %552 = load i8, i8* %BRANCH_TAKEN
  %553 = icmp eq i8 %552, 1
  br i1 %553, label %block_401ee5, label %block_401499

block_4019d2:                                     ; preds = %block_4019de, %block_40174c
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_40174c ], [ %MEMORY.2, %block_4019de ]
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 108
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 3
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i32*
  %559 = load i32, i32* %558
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RAX, align 8, !tbaa !2428
  %561 = load i32, i32* %EAX
  %562 = zext i32 %561 to i64
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 48
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = sub i32 %561, %568
  %570 = icmp ult i32 %561, %568
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %571, i8* %572, align 1, !tbaa !2432
  %573 = and i32 %569, 255
  %574 = call i32 @llvm.ctpop.i32(i32 %573) #16
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = xor i8 %576, 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %577, i8* %578, align 1, !tbaa !2446
  %579 = xor i32 %568, %561
  %580 = xor i32 %579, %569
  %581 = lshr i32 %580, 4
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %583, i8* %584, align 1, !tbaa !2447
  %585 = icmp eq i32 %569, 0
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %586, i8* %587, align 1, !tbaa !2448
  %588 = lshr i32 %569, 31
  %589 = trunc i32 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %589, i8* %590, align 1, !tbaa !2449
  %591 = lshr i32 %561, 31
  %592 = lshr i32 %568, 31
  %593 = xor i32 %592, %591
  %594 = xor i32 %588, %591
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = zext i1 %596 to i8
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %597, i8* %598, align 1, !tbaa !2450
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 659
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 6
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 6
  store i64 %604, i64* %PC
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %606 = load i8, i8* %605, align 1, !tbaa !2449
  %607 = icmp ne i8 %606, 0
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %609 = load i8, i8* %608, align 1, !tbaa !2450
  %610 = icmp ne i8 %609, 0
  %611 = xor i1 %607, %610
  %612 = xor i1 %611, true
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %615 = select i1 %611, i64 %602, i64 %600
  store i64 %615, i64* %614, align 8, !tbaa !2428
  %616 = load i8, i8* %BRANCH_TAKEN
  %617 = icmp eq i8 %616, 1
  %618 = load i64, i64* %RBP
  %619 = add i64 %618, 32
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 100
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 4
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i32*
  %629 = load i32, i32* %628
  %630 = sext i32 %629 to i64
  store i64 %630, i64* %RCX, align 8, !tbaa !2428
  %631 = load i64, i64* %RCX
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 7
  store i64 %633, i64* %PC
  %634 = sext i64 %631 to i128
  %635 = and i128 %634, -18446744073709551616
  %636 = zext i64 %631 to i128
  %637 = or i128 %635, %636
  %638 = mul nsw i128 33800, %637
  %639 = trunc i128 %638 to i64
  store i64 %639, i64* %RCX, align 8, !tbaa !2428
  %640 = sext i64 %639 to i128
  %641 = icmp ne i128 %640, %638
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %642, i8* %643, align 1, !tbaa !2432
  %644 = trunc i128 %638 to i32
  %645 = and i32 %644, 255
  %646 = call i32 @llvm.ctpop.i32(i32 %645) #16
  %647 = trunc i32 %646 to i8
  %648 = and i8 %647, 1
  %649 = xor i8 %648, 1
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %649, i8* %650, align 1, !tbaa !2446
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %651, align 1, !tbaa !2447
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %652, align 1, !tbaa !2448
  %653 = lshr i64 %639, 63
  %654 = trunc i64 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %654, i8* %655, align 1, !tbaa !2449
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %642, i8* %656, align 1, !tbaa !2450
  %657 = load i64, i64* %RAX
  %658 = load i64, i64* %RCX
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 3
  store i64 %660, i64* %PC
  %661 = add i64 %658, %657
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = icmp ult i64 %661, %657
  %663 = icmp ult i64 %661, %658
  %664 = or i1 %662, %663
  %665 = zext i1 %664 to i8
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %665, i8* %666, align 1, !tbaa !2432
  %667 = trunc i64 %661 to i32
  %668 = and i32 %667, 255
  %669 = call i32 @llvm.ctpop.i32(i32 %668) #16
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %672, i8* %673, align 1, !tbaa !2446
  %674 = xor i64 %658, %657
  %675 = xor i64 %674, %661
  %676 = lshr i64 %675, 4
  %677 = trunc i64 %676 to i8
  %678 = and i8 %677, 1
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %678, i8* %679, align 1, !tbaa !2447
  %680 = icmp eq i64 %661, 0
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %681, i8* %682, align 1, !tbaa !2448
  %683 = lshr i64 %661, 63
  %684 = trunc i64 %683 to i8
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %684, i8* %685, align 1, !tbaa !2449
  %686 = lshr i64 %657, 63
  %687 = lshr i64 %658, 63
  %688 = xor i64 %683, %686
  %689 = xor i64 %683, %687
  %690 = add nuw nsw i64 %688, %689
  %691 = icmp eq i64 %690, 2
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %692, i8* %693, align 1, !tbaa !2450
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 52
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 4
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = sext i32 %699 to i64
  store i64 %700, i64* %RCX, align 8, !tbaa !2428
  %701 = load i64, i64* %RCX
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 7
  store i64 %703, i64* %PC
  %704 = sext i64 %701 to i128
  %705 = and i128 %704, -18446744073709551616
  %706 = zext i64 %701 to i128
  %707 = or i128 %705, %706
  %708 = mul nsw i128 520, %707
  %709 = trunc i128 %708 to i64
  store i64 %709, i64* %RCX, align 8, !tbaa !2428
  %710 = sext i64 %709 to i128
  %711 = icmp ne i128 %710, %708
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = trunc i128 %708 to i32
  %715 = and i32 %714, 255
  %716 = call i32 @llvm.ctpop.i32(i32 %715) #16
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %719, i8* %720, align 1, !tbaa !2446
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %721, align 1, !tbaa !2447
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %722, align 1, !tbaa !2448
  %723 = lshr i64 %709, 63
  %724 = trunc i64 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %724, i8* %725, align 1, !tbaa !2449
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %712, i8* %726, align 1, !tbaa !2450
  %727 = load i64, i64* %RAX
  %728 = load i64, i64* %RCX
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 3
  store i64 %730, i64* %PC
  %731 = add i64 %728, %727
  store i64 %731, i64* %RAX, align 8, !tbaa !2428
  %732 = icmp ult i64 %731, %727
  %733 = icmp ult i64 %731, %728
  %734 = or i1 %732, %733
  %735 = zext i1 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %735, i8* %736, align 1, !tbaa !2432
  %737 = trunc i64 %731 to i32
  %738 = and i32 %737, 255
  %739 = call i32 @llvm.ctpop.i32(i32 %738) #16
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %742, i8* %743, align 1, !tbaa !2446
  %744 = xor i64 %728, %727
  %745 = xor i64 %744, %731
  %746 = lshr i64 %745, 4
  %747 = trunc i64 %746 to i8
  %748 = and i8 %747, 1
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %748, i8* %749, align 1, !tbaa !2447
  %750 = icmp eq i64 %731, 0
  %751 = zext i1 %750 to i8
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %751, i8* %752, align 1, !tbaa !2448
  %753 = lshr i64 %731, 63
  %754 = trunc i64 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %754, i8* %755, align 1, !tbaa !2449
  %756 = lshr i64 %727, 63
  %757 = lshr i64 %728, 63
  %758 = xor i64 %753, %756
  %759 = xor i64 %753, %757
  %760 = add nuw nsw i64 %758, %759
  %761 = icmp eq i64 %760, 2
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %762, i8* %763, align 1, !tbaa !2450
  %764 = load i64, i64* %RBP
  br i1 %617, label %block_401c6b, label %block_4019de

block_40174c:                                     ; preds = %block_4014a0
  %765 = sub i64 %9950, 48
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 4
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768
  %770 = sext i32 %769 to i64
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %RCX
  %774 = mul i64 %773, 8
  %775 = add i64 %774, %772
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 5
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to double*
  %779 = load double, double* %778
  %780 = bitcast i8* %771 to double*
  store double %779, double* %780, align 1, !tbaa !2452
  %781 = getelementptr inbounds i8, i8* %771, i64 8
  %782 = bitcast i8* %781 to double*
  store double 0.000000e+00, double* %782, align 1, !tbaa !2452
  %783 = load i64, i64* %RBP
  %784 = add i64 %783, 32
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 4
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i64*
  %788 = load i64, i64* %787
  store i64 %788, i64* %RAX, align 8, !tbaa !2428
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 100
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %790 to i32*
  %794 = load i32, i32* %793
  %795 = sext i32 %794 to i64
  store i64 %795, i64* %RCX, align 8, !tbaa !2428
  %796 = load i64, i64* %RCX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 7
  store i64 %798, i64* %PC
  %799 = sext i64 %796 to i128
  %800 = and i128 %799, -18446744073709551616
  %801 = zext i64 %796 to i128
  %802 = or i128 %800, %801
  %803 = mul nsw i128 33800, %802
  %804 = trunc i128 %803 to i64
  store i64 %804, i64* %RCX, align 8, !tbaa !2428
  %805 = sext i64 %804 to i128
  %806 = icmp ne i128 %805, %803
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %807, i8* %808, align 1, !tbaa !2432
  %809 = trunc i128 %803 to i32
  %810 = and i32 %809, 255
  %811 = call i32 @llvm.ctpop.i32(i32 %810) #16
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %814, i8* %815, align 1, !tbaa !2446
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %816, align 1, !tbaa !2447
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %817, align 1, !tbaa !2448
  %818 = lshr i64 %804, 63
  %819 = trunc i64 %818 to i8
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %819, i8* %820, align 1, !tbaa !2449
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %807, i8* %821, align 1, !tbaa !2450
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %RCX
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 3
  store i64 %825, i64* %PC
  %826 = add i64 %823, %822
  store i64 %826, i64* %RAX, align 8, !tbaa !2428
  %827 = icmp ult i64 %826, %822
  %828 = icmp ult i64 %826, %823
  %829 = or i1 %827, %828
  %830 = zext i1 %829 to i8
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %830, i8* %831, align 1, !tbaa !2432
  %832 = trunc i64 %826 to i32
  %833 = and i32 %832, 255
  %834 = call i32 @llvm.ctpop.i32(i32 %833) #16
  %835 = trunc i32 %834 to i8
  %836 = and i8 %835, 1
  %837 = xor i8 %836, 1
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %837, i8* %838, align 1, !tbaa !2446
  %839 = xor i64 %823, %822
  %840 = xor i64 %839, %826
  %841 = lshr i64 %840, 4
  %842 = trunc i64 %841 to i8
  %843 = and i8 %842, 1
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %843, i8* %844, align 1, !tbaa !2447
  %845 = icmp eq i64 %826, 0
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %846, i8* %847, align 1, !tbaa !2448
  %848 = lshr i64 %826, 63
  %849 = trunc i64 %848 to i8
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %849, i8* %850, align 1, !tbaa !2449
  %851 = lshr i64 %822, 63
  %852 = lshr i64 %823, 63
  %853 = xor i64 %848, %851
  %854 = xor i64 %848, %852
  %855 = add nuw nsw i64 %853, %854
  %856 = icmp eq i64 %855, 2
  %857 = zext i1 %856 to i8
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %857, i8* %858, align 1, !tbaa !2450
  %859 = load i64, i64* %RBP
  %860 = sub i64 %859, 104
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 3
  store i64 %862, i64* %PC
  %863 = inttoptr i64 %860 to i32*
  %864 = load i32, i32* %863
  %865 = zext i32 %864 to i64
  store i64 %865, i64* %RDX, align 8, !tbaa !2428
  %866 = load i64, i64* %RDX
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 3
  store i64 %868, i64* %PC
  %869 = trunc i64 %866 to i32
  %870 = add i32 1, %869
  %871 = zext i32 %870 to i64
  store i64 %871, i64* %RDX, align 8, !tbaa !2428
  %872 = icmp ult i32 %870, %869
  %873 = icmp ult i32 %870, 1
  %874 = or i1 %872, %873
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %875, i8* %876, align 1, !tbaa !2432
  %877 = and i32 %870, 255
  %878 = call i32 @llvm.ctpop.i32(i32 %877) #16
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  %881 = xor i8 %880, 1
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %881, i8* %882, align 1, !tbaa !2446
  %883 = xor i64 1, %866
  %884 = trunc i64 %883 to i32
  %885 = xor i32 %884, %870
  %886 = lshr i32 %885, 4
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %888, i8* %889, align 1, !tbaa !2447
  %890 = icmp eq i32 %870, 0
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %891, i8* %892, align 1, !tbaa !2448
  %893 = lshr i32 %870, 31
  %894 = trunc i32 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %894, i8* %895, align 1, !tbaa !2449
  %896 = lshr i32 %869, 31
  %897 = xor i32 %893, %896
  %898 = add nuw nsw i32 %897, %893
  %899 = icmp eq i32 %898, 2
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %900, i8* %901, align 1, !tbaa !2450
  %902 = load i32, i32* %EDX
  %903 = zext i32 %902 to i64
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 3
  store i64 %905, i64* %PC
  %906 = shl i64 %903, 32
  %907 = ashr exact i64 %906, 32
  store i64 %907, i64* %RCX, align 8, !tbaa !2428
  %908 = load i64, i64* %RCX
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 7
  store i64 %910, i64* %PC
  %911 = sext i64 %908 to i128
  %912 = and i128 %911, -18446744073709551616
  %913 = zext i64 %908 to i128
  %914 = or i128 %912, %913
  %915 = mul nsw i128 520, %914
  %916 = trunc i128 %915 to i64
  store i64 %916, i64* %RCX, align 8, !tbaa !2428
  %917 = sext i64 %916 to i128
  %918 = icmp ne i128 %917, %915
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %919, i8* %920, align 1, !tbaa !2432
  %921 = trunc i128 %915 to i32
  %922 = and i32 %921, 255
  %923 = call i32 @llvm.ctpop.i32(i32 %922) #16
  %924 = trunc i32 %923 to i8
  %925 = and i8 %924, 1
  %926 = xor i8 %925, 1
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %926, i8* %927, align 1, !tbaa !2446
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %928, align 1, !tbaa !2447
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %929, align 1, !tbaa !2448
  %930 = lshr i64 %916, 63
  %931 = trunc i64 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %931, i8* %932, align 1, !tbaa !2449
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %919, i8* %933, align 1, !tbaa !2450
  %934 = load i64, i64* %RAX
  %935 = load i64, i64* %RCX
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 3
  store i64 %937, i64* %PC
  %938 = add i64 %935, %934
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = icmp ult i64 %938, %934
  %940 = icmp ult i64 %938, %935
  %941 = or i1 %939, %940
  %942 = zext i1 %941 to i8
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %942, i8* %943, align 1, !tbaa !2432
  %944 = trunc i64 %938 to i32
  %945 = and i32 %944, 255
  %946 = call i32 @llvm.ctpop.i32(i32 %945) #16
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  %949 = xor i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %949, i8* %950, align 1, !tbaa !2446
  %951 = xor i64 %935, %934
  %952 = xor i64 %951, %938
  %953 = lshr i64 %952, 4
  %954 = trunc i64 %953 to i8
  %955 = and i8 %954, 1
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %955, i8* %956, align 1, !tbaa !2447
  %957 = icmp eq i64 %938, 0
  %958 = zext i1 %957 to i8
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %958, i8* %959, align 1, !tbaa !2448
  %960 = lshr i64 %938, 63
  %961 = trunc i64 %960 to i8
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %961, i8* %962, align 1, !tbaa !2449
  %963 = lshr i64 %934, 63
  %964 = lshr i64 %935, 63
  %965 = xor i64 %960, %963
  %966 = xor i64 %960, %964
  %967 = add nuw nsw i64 %965, %966
  %968 = icmp eq i64 %967, 2
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %969, i8* %970, align 1, !tbaa !2450
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 48
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 4
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i32*
  %976 = load i32, i32* %975
  %977 = sext i32 %976 to i64
  store i64 %977, i64* %RCX, align 8, !tbaa !2428
  %978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %979 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %980 = load i64, i64* %RAX
  %981 = load i64, i64* %RCX
  %982 = mul i64 %981, 8
  %983 = add i64 %982, %980
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 5
  store i64 %985, i64* %PC
  %986 = bitcast i8* %979 to double*
  %987 = load double, double* %986, align 1
  %988 = getelementptr inbounds i8, i8* %979, i64 8
  %989 = bitcast i8* %988 to i64*
  %990 = load i64, i64* %989, align 1
  %991 = inttoptr i64 %983 to double*
  %992 = load double, double* %991
  %993 = fsub double %987, %992
  %994 = bitcast i8* %978 to double*
  store double %993, double* %994, align 1, !tbaa !2452
  %995 = getelementptr inbounds i8, i8* %978, i64 8
  %996 = bitcast i8* %995 to i64*
  store i64 %990, i64* %996, align 1, !tbaa !2452
  %997 = load i64, i64* %RBP
  %998 = sub i64 %997, 88
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 4
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %998 to i64*
  %1002 = load i64, i64* %1001
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RBP
  %1004 = sub i64 %1003, 100
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 4
  store i64 %1006, i64* %PC
  %1007 = inttoptr i64 %1004 to i32*
  %1008 = load i32, i32* %1007
  %1009 = sext i32 %1008 to i64
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = load i64, i64* %RCX
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 7
  store i64 %1012, i64* %PC
  %1013 = sext i64 %1010 to i128
  %1014 = and i128 %1013, -18446744073709551616
  %1015 = zext i64 %1010 to i128
  %1016 = or i128 %1014, %1015
  %1017 = mul nsw i128 520, %1016
  %1018 = trunc i128 %1017 to i64
  store i64 %1018, i64* %RCX, align 8, !tbaa !2428
  %1019 = sext i64 %1018 to i128
  %1020 = icmp ne i128 %1019, %1017
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = trunc i128 %1017 to i32
  %1024 = and i32 %1023, 255
  %1025 = call i32 @llvm.ctpop.i32(i32 %1024) #16
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1028, i8* %1029, align 1, !tbaa !2446
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1030, align 1, !tbaa !2447
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1031, align 1, !tbaa !2448
  %1032 = lshr i64 %1018, 63
  %1033 = trunc i64 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1033, i8* %1034, align 1, !tbaa !2449
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1021, i8* %1035, align 1, !tbaa !2450
  %1036 = load i64, i64* %RAX
  %1037 = load i64, i64* %RCX
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  %1040 = add i64 %1037, %1036
  store i64 %1040, i64* %RAX, align 8, !tbaa !2428
  %1041 = icmp ult i64 %1040, %1036
  %1042 = icmp ult i64 %1040, %1037
  %1043 = or i1 %1041, %1042
  %1044 = zext i1 %1043 to i8
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1044, i8* %1045, align 1, !tbaa !2432
  %1046 = trunc i64 %1040 to i32
  %1047 = and i32 %1046, 255
  %1048 = call i32 @llvm.ctpop.i32(i32 %1047) #16
  %1049 = trunc i32 %1048 to i8
  %1050 = and i8 %1049, 1
  %1051 = xor i8 %1050, 1
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1051, i8* %1052, align 1, !tbaa !2446
  %1053 = xor i64 %1037, %1036
  %1054 = xor i64 %1053, %1040
  %1055 = lshr i64 %1054, 4
  %1056 = trunc i64 %1055 to i8
  %1057 = and i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1057, i8* %1058, align 1, !tbaa !2447
  %1059 = icmp eq i64 %1040, 0
  %1060 = zext i1 %1059 to i8
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1060, i8* %1061, align 1, !tbaa !2448
  %1062 = lshr i64 %1040, 63
  %1063 = trunc i64 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1063, i8* %1064, align 1, !tbaa !2449
  %1065 = lshr i64 %1036, 63
  %1066 = lshr i64 %1037, 63
  %1067 = xor i64 %1062, %1065
  %1068 = xor i64 %1062, %1066
  %1069 = add nuw nsw i64 %1067, %1068
  %1070 = icmp eq i64 %1069, 2
  %1071 = zext i1 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1071, i8* %1072, align 1, !tbaa !2450
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 104
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  %1078 = load i32, i32* %1077
  %1079 = sext i32 %1078 to i64
  store i64 %1079, i64* %RCX, align 8, !tbaa !2428
  %1080 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1081 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1082 = load i64, i64* %RAX
  %1083 = load i64, i64* %RCX
  %1084 = mul i64 %1083, 8
  %1085 = add i64 %1084, %1082
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 5
  store i64 %1087, i64* %PC
  %1088 = bitcast i8* %1081 to double*
  %1089 = load double, double* %1088, align 1
  %1090 = getelementptr inbounds i8, i8* %1081, i64 8
  %1091 = bitcast i8* %1090 to i64*
  %1092 = load i64, i64* %1091, align 1
  %1093 = inttoptr i64 %1085 to double*
  %1094 = load double, double* %1093
  %1095 = fadd double %1089, %1094
  %1096 = bitcast i8* %1080 to double*
  store double %1095, double* %1096, align 1, !tbaa !2452
  %1097 = getelementptr inbounds i8, i8* %1080, i64 8
  %1098 = bitcast i8* %1097 to i64*
  store i64 %1092, i64* %1098, align 1, !tbaa !2452
  %1099 = load i64, i64* %RBP
  %1100 = add i64 %1099, 40
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1100 to i64*
  %1104 = load i64, i64* %1103
  store i64 %1104, i64* %RAX, align 8, !tbaa !2428
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 100
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i32*
  %1110 = load i32, i32* %1109
  %1111 = sext i32 %1110 to i64
  store i64 %1111, i64* %RCX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RCX
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 7
  store i64 %1114, i64* %PC
  %1115 = sext i64 %1112 to i128
  %1116 = and i128 %1115, -18446744073709551616
  %1117 = zext i64 %1112 to i128
  %1118 = or i128 %1116, %1117
  %1119 = mul nsw i128 33800, %1118
  %1120 = trunc i128 %1119 to i64
  store i64 %1120, i64* %RCX, align 8, !tbaa !2428
  %1121 = sext i64 %1120 to i128
  %1122 = icmp ne i128 %1121, %1119
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1123, i8* %1124, align 1, !tbaa !2432
  %1125 = trunc i128 %1119 to i32
  %1126 = and i32 %1125, 255
  %1127 = call i32 @llvm.ctpop.i32(i32 %1126) #16
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1130, i8* %1131, align 1, !tbaa !2446
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1132, align 1, !tbaa !2447
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1133, align 1, !tbaa !2448
  %1134 = lshr i64 %1120, 63
  %1135 = trunc i64 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1135, i8* %1136, align 1, !tbaa !2449
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1123, i8* %1137, align 1, !tbaa !2450
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %RCX
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 3
  store i64 %1141, i64* %PC
  %1142 = add i64 %1139, %1138
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = icmp ult i64 %1142, %1138
  %1144 = icmp ult i64 %1142, %1139
  %1145 = or i1 %1143, %1144
  %1146 = zext i1 %1145 to i8
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1146, i8* %1147, align 1, !tbaa !2432
  %1148 = trunc i64 %1142 to i32
  %1149 = and i32 %1148, 255
  %1150 = call i32 @llvm.ctpop.i32(i32 %1149) #16
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1153, i8* %1154, align 1, !tbaa !2446
  %1155 = xor i64 %1139, %1138
  %1156 = xor i64 %1155, %1142
  %1157 = lshr i64 %1156, 4
  %1158 = trunc i64 %1157 to i8
  %1159 = and i8 %1158, 1
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1159, i8* %1160, align 1, !tbaa !2447
  %1161 = icmp eq i64 %1142, 0
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1162, i8* %1163, align 1, !tbaa !2448
  %1164 = lshr i64 %1142, 63
  %1165 = trunc i64 %1164 to i8
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1165, i8* %1166, align 1, !tbaa !2449
  %1167 = lshr i64 %1138, 63
  %1168 = lshr i64 %1139, 63
  %1169 = xor i64 %1164, %1167
  %1170 = xor i64 %1164, %1168
  %1171 = add nuw nsw i64 %1169, %1170
  %1172 = icmp eq i64 %1171, 2
  %1173 = zext i1 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1173, i8* %1174, align 1, !tbaa !2450
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 104
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 4
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = sext i32 %1180 to i64
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 7
  store i64 %1184, i64* %PC
  %1185 = sext i64 %1182 to i128
  %1186 = and i128 %1185, -18446744073709551616
  %1187 = zext i64 %1182 to i128
  %1188 = or i128 %1186, %1187
  %1189 = mul nsw i128 520, %1188
  %1190 = trunc i128 %1189 to i64
  store i64 %1190, i64* %RCX, align 8, !tbaa !2428
  %1191 = sext i64 %1190 to i128
  %1192 = icmp ne i128 %1191, %1189
  %1193 = zext i1 %1192 to i8
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1193, i8* %1194, align 1, !tbaa !2432
  %1195 = trunc i128 %1189 to i32
  %1196 = and i32 %1195, 255
  %1197 = call i32 @llvm.ctpop.i32(i32 %1196) #16
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1200, i8* %1201, align 1, !tbaa !2446
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1202, align 1, !tbaa !2447
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1203, align 1, !tbaa !2448
  %1204 = lshr i64 %1190, 63
  %1205 = trunc i64 %1204 to i8
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1205, i8* %1206, align 1, !tbaa !2449
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1193, i8* %1207, align 1, !tbaa !2450
  %1208 = load i64, i64* %RAX
  %1209 = load i64, i64* %RCX
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = add i64 %1209, %1208
  store i64 %1212, i64* %RAX, align 8, !tbaa !2428
  %1213 = icmp ult i64 %1212, %1208
  %1214 = icmp ult i64 %1212, %1209
  %1215 = or i1 %1213, %1214
  %1216 = zext i1 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1216, i8* %1217, align 1, !tbaa !2432
  %1218 = trunc i64 %1212 to i32
  %1219 = and i32 %1218, 255
  %1220 = call i32 @llvm.ctpop.i32(i32 %1219) #16
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1223, i8* %1224, align 1, !tbaa !2446
  %1225 = xor i64 %1209, %1208
  %1226 = xor i64 %1225, %1212
  %1227 = lshr i64 %1226, 4
  %1228 = trunc i64 %1227 to i8
  %1229 = and i8 %1228, 1
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1229, i8* %1230, align 1, !tbaa !2447
  %1231 = icmp eq i64 %1212, 0
  %1232 = zext i1 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1232, i8* %1233, align 1, !tbaa !2448
  %1234 = lshr i64 %1212, 63
  %1235 = trunc i64 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1235, i8* %1236, align 1, !tbaa !2449
  %1237 = lshr i64 %1208, 63
  %1238 = lshr i64 %1209, 63
  %1239 = xor i64 %1234, %1237
  %1240 = xor i64 %1234, %1238
  %1241 = add nuw nsw i64 %1239, %1240
  %1242 = icmp eq i64 %1241, 2
  %1243 = zext i1 %1242 to i8
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1243, i8* %1244, align 1, !tbaa !2450
  %1245 = load i64, i64* %RBP
  %1246 = sub i64 %1245, 48
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 4
  store i64 %1248, i64* %PC
  %1249 = inttoptr i64 %1246 to i32*
  %1250 = load i32, i32* %1249
  %1251 = sext i32 %1250 to i64
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1253 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1254 = load i64, i64* %RAX
  %1255 = load i64, i64* %RCX
  %1256 = mul i64 %1255, 8
  %1257 = add i64 %1256, %1254
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 5
  store i64 %1259, i64* %PC
  %1260 = bitcast i8* %1253 to double*
  %1261 = load double, double* %1260, align 1
  %1262 = getelementptr inbounds i8, i8* %1253, i64 8
  %1263 = bitcast i8* %1262 to i64*
  %1264 = load i64, i64* %1263, align 1
  %1265 = inttoptr i64 %1257 to double*
  %1266 = load double, double* %1265
  %1267 = fsub double %1261, %1266
  %1268 = bitcast i8* %1252 to double*
  store double %1267, double* %1268, align 1, !tbaa !2452
  %1269 = getelementptr inbounds i8, i8* %1252, i64 8
  %1270 = bitcast i8* %1269 to i64*
  store i64 %1264, i64* %1270, align 1, !tbaa !2452
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 96
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 4
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i64*
  %1276 = load i64, i64* %1275
  store i64 %1276, i64* %RAX, align 8, !tbaa !2428
  %1277 = load i64, i64* %RBP
  %1278 = sub i64 %1277, 100
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 4
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1278 to i32*
  %1282 = load i32, i32* %1281
  %1283 = sext i32 %1282 to i64
  store i64 %1283, i64* %RCX, align 8, !tbaa !2428
  %1284 = load i64, i64* %RCX
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 7
  store i64 %1286, i64* %PC
  %1287 = sext i64 %1284 to i128
  %1288 = and i128 %1287, -18446744073709551616
  %1289 = zext i64 %1284 to i128
  %1290 = or i128 %1288, %1289
  %1291 = mul nsw i128 520, %1290
  %1292 = trunc i128 %1291 to i64
  store i64 %1292, i64* %RCX, align 8, !tbaa !2428
  %1293 = sext i64 %1292 to i128
  %1294 = icmp ne i128 %1293, %1291
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = trunc i128 %1291 to i32
  %1298 = and i32 %1297, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2446
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1304, align 1, !tbaa !2447
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1305, align 1, !tbaa !2448
  %1306 = lshr i64 %1292, 63
  %1307 = trunc i64 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1307, i8* %1308, align 1, !tbaa !2449
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1295, i8* %1309, align 1, !tbaa !2450
  %1310 = load i64, i64* %RAX
  %1311 = load i64, i64* %RCX
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 3
  store i64 %1313, i64* %PC
  %1314 = add i64 %1311, %1310
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = icmp ult i64 %1314, %1310
  %1316 = icmp ult i64 %1314, %1311
  %1317 = or i1 %1315, %1316
  %1318 = zext i1 %1317 to i8
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1318, i8* %1319, align 1, !tbaa !2432
  %1320 = trunc i64 %1314 to i32
  %1321 = and i32 %1320, 255
  %1322 = call i32 @llvm.ctpop.i32(i32 %1321) #16
  %1323 = trunc i32 %1322 to i8
  %1324 = and i8 %1323, 1
  %1325 = xor i8 %1324, 1
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1325, i8* %1326, align 1, !tbaa !2446
  %1327 = xor i64 %1311, %1310
  %1328 = xor i64 %1327, %1314
  %1329 = lshr i64 %1328, 4
  %1330 = trunc i64 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1331, i8* %1332, align 1, !tbaa !2447
  %1333 = icmp eq i64 %1314, 0
  %1334 = zext i1 %1333 to i8
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1334, i8* %1335, align 1, !tbaa !2448
  %1336 = lshr i64 %1314, 63
  %1337 = trunc i64 %1336 to i8
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1337, i8* %1338, align 1, !tbaa !2449
  %1339 = lshr i64 %1310, 63
  %1340 = lshr i64 %1311, 63
  %1341 = xor i64 %1336, %1339
  %1342 = xor i64 %1336, %1340
  %1343 = add nuw nsw i64 %1341, %1342
  %1344 = icmp eq i64 %1343, 2
  %1345 = zext i1 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1345, i8* %1346, align 1, !tbaa !2450
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 104
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 4
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i32*
  %1352 = load i32, i32* %1351
  %1353 = sext i32 %1352 to i64
  store i64 %1353, i64* %RCX, align 8, !tbaa !2428
  %1354 = load i64, i64* %RAX
  %1355 = load i64, i64* %RCX
  %1356 = mul i64 %1355, 8
  %1357 = add i64 %1356, %1354
  %1358 = bitcast %union.vec128_t* %XMM0 to i8*
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 5
  store i64 %1360, i64* %PC
  %1361 = bitcast i8* %1358 to double*
  %1362 = load double, double* %1361, align 1
  %1363 = inttoptr i64 %1357 to double*
  store double %1362, double* %1363
  %1364 = load i64, i64* %RBP
  %1365 = add i64 %1364, 88
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 4
  store i64 %1367, i64* %PC
  %1368 = inttoptr i64 %1365 to i64*
  %1369 = load i64, i64* %1368
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = load i64, i64* %RBP
  %1371 = sub i64 %1370, 104
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 4
  store i64 %1373, i64* %PC
  %1374 = inttoptr i64 %1371 to i32*
  %1375 = load i32, i32* %1374
  %1376 = sext i32 %1375 to i64
  store i64 %1376, i64* %RCX, align 8, !tbaa !2428
  %1377 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1378 = load i64, i64* %RAX
  %1379 = load i64, i64* %RCX
  %1380 = mul i64 %1379, 8
  %1381 = add i64 %1380, %1378
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 5
  store i64 %1383, i64* %PC
  %1384 = inttoptr i64 %1381 to double*
  %1385 = load double, double* %1384
  %1386 = bitcast i8* %1377 to double*
  store double %1385, double* %1386, align 1, !tbaa !2452
  %1387 = getelementptr inbounds i8, i8* %1377, i64 8
  %1388 = bitcast i8* %1387 to double*
  store double 0.000000e+00, double* %1388, align 1, !tbaa !2452
  %1389 = load i64, i64* %RBP
  %1390 = add i64 %1389, 96
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 4
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to i64*
  %1394 = load i64, i64* %1393
  store i64 %1394, i64* %RAX, align 8, !tbaa !2428
  %1395 = load i64, i64* %RBP
  %1396 = sub i64 %1395, 104
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 4
  store i64 %1398, i64* %PC
  %1399 = inttoptr i64 %1396 to i32*
  %1400 = load i32, i32* %1399
  %1401 = sext i32 %1400 to i64
  store i64 %1401, i64* %RCX, align 8, !tbaa !2428
  %1402 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1403 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1404 = load i64, i64* %RAX
  %1405 = load i64, i64* %RCX
  %1406 = mul i64 %1405, 8
  %1407 = add i64 %1406, %1404
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 5
  store i64 %1409, i64* %PC
  %1410 = bitcast i8* %1403 to double*
  %1411 = load double, double* %1410, align 1
  %1412 = getelementptr inbounds i8, i8* %1403, i64 8
  %1413 = bitcast i8* %1412 to i64*
  %1414 = load i64, i64* %1413, align 1
  %1415 = inttoptr i64 %1407 to double*
  %1416 = load double, double* %1415
  %1417 = fdiv double %1411, %1416
  %1418 = bitcast i8* %1402 to double*
  store double %1417, double* %1418, align 1, !tbaa !2452
  %1419 = getelementptr inbounds i8, i8* %1402, i64 8
  %1420 = bitcast i8* %1419 to i64*
  store i64 %1414, i64* %1420, align 1, !tbaa !2452
  %1421 = load i64, i64* %RBP
  %1422 = add i64 %1421, 24
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1422 to i64*
  %1426 = load i64, i64* %1425
  store i64 %1426, i64* %RAX, align 8, !tbaa !2428
  %1427 = load i64, i64* %RBP
  %1428 = sub i64 %1427, 100
  %1429 = load i64, i64* %PC
  %1430 = add i64 %1429, 4
  store i64 %1430, i64* %PC
  %1431 = inttoptr i64 %1428 to i32*
  %1432 = load i32, i32* %1431
  %1433 = sext i32 %1432 to i64
  store i64 %1433, i64* %RCX, align 8, !tbaa !2428
  %1434 = load i64, i64* %RCX
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 7
  store i64 %1436, i64* %PC
  %1437 = sext i64 %1434 to i128
  %1438 = and i128 %1437, -18446744073709551616
  %1439 = zext i64 %1434 to i128
  %1440 = or i128 %1438, %1439
  %1441 = mul nsw i128 33800, %1440
  %1442 = trunc i128 %1441 to i64
  store i64 %1442, i64* %RCX, align 8, !tbaa !2428
  %1443 = sext i64 %1442 to i128
  %1444 = icmp ne i128 %1443, %1441
  %1445 = zext i1 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1445, i8* %1446, align 1, !tbaa !2432
  %1447 = trunc i128 %1441 to i32
  %1448 = and i32 %1447, 255
  %1449 = call i32 @llvm.ctpop.i32(i32 %1448) #16
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = xor i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1452, i8* %1453, align 1, !tbaa !2446
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1454, align 1, !tbaa !2447
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1455, align 1, !tbaa !2448
  %1456 = lshr i64 %1442, 63
  %1457 = trunc i64 %1456 to i8
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1457, i8* %1458, align 1, !tbaa !2449
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1445, i8* %1459, align 1, !tbaa !2450
  %1460 = load i64, i64* %RAX
  %1461 = load i64, i64* %RCX
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 3
  store i64 %1463, i64* %PC
  %1464 = add i64 %1461, %1460
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = icmp ult i64 %1464, %1460
  %1466 = icmp ult i64 %1464, %1461
  %1467 = or i1 %1465, %1466
  %1468 = zext i1 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1468, i8* %1469, align 1, !tbaa !2432
  %1470 = trunc i64 %1464 to i32
  %1471 = and i32 %1470, 255
  %1472 = call i32 @llvm.ctpop.i32(i32 %1471) #16
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = xor i8 %1474, 1
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1475, i8* %1476, align 1, !tbaa !2446
  %1477 = xor i64 %1461, %1460
  %1478 = xor i64 %1477, %1464
  %1479 = lshr i64 %1478, 4
  %1480 = trunc i64 %1479 to i8
  %1481 = and i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1481, i8* %1482, align 1, !tbaa !2447
  %1483 = icmp eq i64 %1464, 0
  %1484 = zext i1 %1483 to i8
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1484, i8* %1485, align 1, !tbaa !2448
  %1486 = lshr i64 %1464, 63
  %1487 = trunc i64 %1486 to i8
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1487, i8* %1488, align 1, !tbaa !2449
  %1489 = lshr i64 %1460, 63
  %1490 = lshr i64 %1461, 63
  %1491 = xor i64 %1486, %1489
  %1492 = xor i64 %1486, %1490
  %1493 = add nuw nsw i64 %1491, %1492
  %1494 = icmp eq i64 %1493, 2
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1495, i8* %1496, align 1, !tbaa !2450
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 104
  %1499 = load i64, i64* %PC
  %1500 = add i64 %1499, 4
  store i64 %1500, i64* %PC
  %1501 = inttoptr i64 %1498 to i32*
  %1502 = load i32, i32* %1501
  %1503 = sext i32 %1502 to i64
  store i64 %1503, i64* %RCX, align 8, !tbaa !2428
  %1504 = load i64, i64* %RCX
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 7
  store i64 %1506, i64* %PC
  %1507 = sext i64 %1504 to i128
  %1508 = and i128 %1507, -18446744073709551616
  %1509 = zext i64 %1504 to i128
  %1510 = or i128 %1508, %1509
  %1511 = mul nsw i128 520, %1510
  %1512 = trunc i128 %1511 to i64
  store i64 %1512, i64* %RCX, align 8, !tbaa !2428
  %1513 = sext i64 %1512 to i128
  %1514 = icmp ne i128 %1513, %1511
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1515, i8* %1516, align 1, !tbaa !2432
  %1517 = trunc i128 %1511 to i32
  %1518 = and i32 %1517, 255
  %1519 = call i32 @llvm.ctpop.i32(i32 %1518) #16
  %1520 = trunc i32 %1519 to i8
  %1521 = and i8 %1520, 1
  %1522 = xor i8 %1521, 1
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1522, i8* %1523, align 1, !tbaa !2446
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1524, align 1, !tbaa !2447
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1525, align 1, !tbaa !2448
  %1526 = lshr i64 %1512, 63
  %1527 = trunc i64 %1526 to i8
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1527, i8* %1528, align 1, !tbaa !2449
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1515, i8* %1529, align 1, !tbaa !2450
  %1530 = load i64, i64* %RAX
  %1531 = load i64, i64* %RCX
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 3
  store i64 %1533, i64* %PC
  %1534 = add i64 %1531, %1530
  store i64 %1534, i64* %RAX, align 8, !tbaa !2428
  %1535 = icmp ult i64 %1534, %1530
  %1536 = icmp ult i64 %1534, %1531
  %1537 = or i1 %1535, %1536
  %1538 = zext i1 %1537 to i8
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1538, i8* %1539, align 1, !tbaa !2432
  %1540 = trunc i64 %1534 to i32
  %1541 = and i32 %1540, 255
  %1542 = call i32 @llvm.ctpop.i32(i32 %1541) #16
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1545, i8* %1546, align 1, !tbaa !2446
  %1547 = xor i64 %1531, %1530
  %1548 = xor i64 %1547, %1534
  %1549 = lshr i64 %1548, 4
  %1550 = trunc i64 %1549 to i8
  %1551 = and i8 %1550, 1
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1551, i8* %1552, align 1, !tbaa !2447
  %1553 = icmp eq i64 %1534, 0
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1554, i8* %1555, align 1, !tbaa !2448
  %1556 = lshr i64 %1534, 63
  %1557 = trunc i64 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1557, i8* %1558, align 1, !tbaa !2449
  %1559 = lshr i64 %1530, 63
  %1560 = lshr i64 %1531, 63
  %1561 = xor i64 %1556, %1559
  %1562 = xor i64 %1556, %1560
  %1563 = add nuw nsw i64 %1561, %1562
  %1564 = icmp eq i64 %1563, 2
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1565, i8* %1566, align 1, !tbaa !2450
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 48
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 4
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = sext i32 %1572 to i64
  store i64 %1573, i64* %RCX, align 8, !tbaa !2428
  %1574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1576 = load i64, i64* %RAX
  %1577 = load i64, i64* %RCX
  %1578 = mul i64 %1577, 8
  %1579 = add i64 %1578, %1576
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 5
  store i64 %1581, i64* %PC
  %1582 = bitcast i8* %1575 to double*
  %1583 = load double, double* %1582, align 1
  %1584 = getelementptr inbounds i8, i8* %1575, i64 8
  %1585 = bitcast i8* %1584 to i64*
  %1586 = load i64, i64* %1585, align 1
  %1587 = inttoptr i64 %1579 to double*
  %1588 = load double, double* %1587
  %1589 = fmul double %1583, %1588
  %1590 = bitcast i8* %1574 to double*
  store double %1589, double* %1590, align 1, !tbaa !2452
  %1591 = getelementptr inbounds i8, i8* %1574, i64 8
  %1592 = bitcast i8* %1591 to i64*
  store i64 %1586, i64* %1592, align 1, !tbaa !2452
  %1593 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1594 = load i64, i64* %RBP
  %1595 = sub i64 %1594, 72
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 5
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1595 to double*
  %1599 = load double, double* %1598
  %1600 = bitcast i8* %1593 to double*
  store double %1599, double* %1600, align 1, !tbaa !2452
  %1601 = getelementptr inbounds i8, i8* %1593, i64 8
  %1602 = bitcast i8* %1601 to double*
  store double 0.000000e+00, double* %1602, align 1, !tbaa !2452
  %1603 = load i64, i64* %RBP
  %1604 = add i64 %1603, 96
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 4
  store i64 %1606, i64* %PC
  %1607 = inttoptr i64 %1604 to i64*
  %1608 = load i64, i64* %1607
  store i64 %1608, i64* %RAX, align 8, !tbaa !2428
  %1609 = load i64, i64* %RBP
  %1610 = sub i64 %1609, 104
  %1611 = load i64, i64* %PC
  %1612 = add i64 %1611, 4
  store i64 %1612, i64* %PC
  %1613 = inttoptr i64 %1610 to i32*
  %1614 = load i32, i32* %1613
  %1615 = sext i32 %1614 to i64
  store i64 %1615, i64* %RCX, align 8, !tbaa !2428
  %1616 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1617 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1618 = load i64, i64* %RAX
  %1619 = load i64, i64* %RCX
  %1620 = mul i64 %1619, 8
  %1621 = add i64 %1620, %1618
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 5
  store i64 %1623, i64* %PC
  %1624 = bitcast i8* %1617 to double*
  %1625 = load double, double* %1624, align 1
  %1626 = getelementptr inbounds i8, i8* %1617, i64 8
  %1627 = bitcast i8* %1626 to i64*
  %1628 = load i64, i64* %1627, align 1
  %1629 = inttoptr i64 %1621 to double*
  %1630 = load double, double* %1629
  %1631 = fdiv double %1625, %1630
  %1632 = bitcast i8* %1616 to double*
  store double %1631, double* %1632, align 1, !tbaa !2452
  %1633 = getelementptr inbounds i8, i8* %1616, i64 8
  %1634 = bitcast i8* %1633 to i64*
  store i64 %1628, i64* %1634, align 1, !tbaa !2452
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 96
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 4
  store i64 %1638, i64* %PC
  %1639 = inttoptr i64 %1636 to i64*
  %1640 = load i64, i64* %1639
  store i64 %1640, i64* %RAX, align 8, !tbaa !2428
  %1641 = load i64, i64* %RBP
  %1642 = sub i64 %1641, 100
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 4
  store i64 %1644, i64* %PC
  %1645 = inttoptr i64 %1642 to i32*
  %1646 = load i32, i32* %1645
  %1647 = sext i32 %1646 to i64
  store i64 %1647, i64* %RCX, align 8, !tbaa !2428
  %1648 = load i64, i64* %RCX
  %1649 = load i64, i64* %PC
  %1650 = add i64 %1649, 7
  store i64 %1650, i64* %PC
  %1651 = sext i64 %1648 to i128
  %1652 = and i128 %1651, -18446744073709551616
  %1653 = zext i64 %1648 to i128
  %1654 = or i128 %1652, %1653
  %1655 = mul nsw i128 520, %1654
  %1656 = trunc i128 %1655 to i64
  store i64 %1656, i64* %RCX, align 8, !tbaa !2428
  %1657 = sext i64 %1656 to i128
  %1658 = icmp ne i128 %1657, %1655
  %1659 = zext i1 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1659, i8* %1660, align 1, !tbaa !2432
  %1661 = trunc i128 %1655 to i32
  %1662 = and i32 %1661, 255
  %1663 = call i32 @llvm.ctpop.i32(i32 %1662) #16
  %1664 = trunc i32 %1663 to i8
  %1665 = and i8 %1664, 1
  %1666 = xor i8 %1665, 1
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1666, i8* %1667, align 1, !tbaa !2446
  %1668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1668, align 1, !tbaa !2447
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1669, align 1, !tbaa !2448
  %1670 = lshr i64 %1656, 63
  %1671 = trunc i64 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1671, i8* %1672, align 1, !tbaa !2449
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1659, i8* %1673, align 1, !tbaa !2450
  %1674 = load i64, i64* %RAX
  %1675 = load i64, i64* %RCX
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 3
  store i64 %1677, i64* %PC
  %1678 = add i64 %1675, %1674
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = icmp ult i64 %1678, %1674
  %1680 = icmp ult i64 %1678, %1675
  %1681 = or i1 %1679, %1680
  %1682 = zext i1 %1681 to i8
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1682, i8* %1683, align 1, !tbaa !2432
  %1684 = trunc i64 %1678 to i32
  %1685 = and i32 %1684, 255
  %1686 = call i32 @llvm.ctpop.i32(i32 %1685) #16
  %1687 = trunc i32 %1686 to i8
  %1688 = and i8 %1687, 1
  %1689 = xor i8 %1688, 1
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1689, i8* %1690, align 1, !tbaa !2446
  %1691 = xor i64 %1675, %1674
  %1692 = xor i64 %1691, %1678
  %1693 = lshr i64 %1692, 4
  %1694 = trunc i64 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1695, i8* %1696, align 1, !tbaa !2447
  %1697 = icmp eq i64 %1678, 0
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1698, i8* %1699, align 1, !tbaa !2448
  %1700 = lshr i64 %1678, 63
  %1701 = trunc i64 %1700 to i8
  %1702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1701, i8* %1702, align 1, !tbaa !2449
  %1703 = lshr i64 %1674, 63
  %1704 = lshr i64 %1675, 63
  %1705 = xor i64 %1700, %1703
  %1706 = xor i64 %1700, %1704
  %1707 = add nuw nsw i64 %1705, %1706
  %1708 = icmp eq i64 %1707, 2
  %1709 = zext i1 %1708 to i8
  %1710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1709, i8* %1710, align 1, !tbaa !2450
  %1711 = load i64, i64* %RBP
  %1712 = sub i64 %1711, 104
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 4
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1712 to i32*
  %1716 = load i32, i32* %1715
  %1717 = sext i32 %1716 to i64
  store i64 %1717, i64* %RCX, align 8, !tbaa !2428
  %1718 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1719 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1720 = load i64, i64* %RAX
  %1721 = load i64, i64* %RCX
  %1722 = mul i64 %1721, 8
  %1723 = add i64 %1722, %1720
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 5
  store i64 %1725, i64* %PC
  %1726 = bitcast i8* %1719 to double*
  %1727 = load double, double* %1726, align 1
  %1728 = getelementptr inbounds i8, i8* %1719, i64 8
  %1729 = bitcast i8* %1728 to i64*
  %1730 = load i64, i64* %1729, align 1
  %1731 = inttoptr i64 %1723 to double*
  %1732 = load double, double* %1731
  %1733 = fmul double %1727, %1732
  %1734 = bitcast i8* %1718 to double*
  store double %1733, double* %1734, align 1, !tbaa !2452
  %1735 = getelementptr inbounds i8, i8* %1718, i64 8
  %1736 = bitcast i8* %1735 to i64*
  store i64 %1730, i64* %1736, align 1, !tbaa !2452
  %1737 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1738 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1739 = bitcast %union.vec128_t* %XMM1 to i8*
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 4
  store i64 %1741, i64* %PC
  %1742 = bitcast i8* %1738 to double*
  %1743 = load double, double* %1742, align 1
  %1744 = getelementptr inbounds i8, i8* %1738, i64 8
  %1745 = bitcast i8* %1744 to i64*
  %1746 = load i64, i64* %1745, align 1
  %1747 = bitcast i8* %1739 to double*
  %1748 = load double, double* %1747, align 1
  %1749 = fsub double %1743, %1748
  %1750 = bitcast i8* %1737 to double*
  store double %1749, double* %1750, align 1, !tbaa !2452
  %1751 = getelementptr inbounds i8, i8* %1737, i64 8
  %1752 = bitcast i8* %1751 to i64*
  store i64 %1746, i64* %1752, align 1, !tbaa !2452
  %1753 = load i64, i64* %RBP
  %1754 = add i64 %1753, 16
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1754 to i64*
  %1758 = load i64, i64* %1757
  store i64 %1758, i64* %RAX, align 8, !tbaa !2428
  %1759 = load i64, i64* %RBP
  %1760 = sub i64 %1759, 100
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1760 to i32*
  %1764 = load i32, i32* %1763
  %1765 = sext i32 %1764 to i64
  store i64 %1765, i64* %RCX, align 8, !tbaa !2428
  %1766 = load i64, i64* %RCX
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 7
  store i64 %1768, i64* %PC
  %1769 = sext i64 %1766 to i128
  %1770 = and i128 %1769, -18446744073709551616
  %1771 = zext i64 %1766 to i128
  %1772 = or i128 %1770, %1771
  %1773 = mul nsw i128 520, %1772
  %1774 = trunc i128 %1773 to i64
  store i64 %1774, i64* %RCX, align 8, !tbaa !2428
  %1775 = sext i64 %1774 to i128
  %1776 = icmp ne i128 %1775, %1773
  %1777 = zext i1 %1776 to i8
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1777, i8* %1778, align 1, !tbaa !2432
  %1779 = trunc i128 %1773 to i32
  %1780 = and i32 %1779, 255
  %1781 = call i32 @llvm.ctpop.i32(i32 %1780) #16
  %1782 = trunc i32 %1781 to i8
  %1783 = and i8 %1782, 1
  %1784 = xor i8 %1783, 1
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1784, i8* %1785, align 1, !tbaa !2446
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1786, align 1, !tbaa !2447
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1787, align 1, !tbaa !2448
  %1788 = lshr i64 %1774, 63
  %1789 = trunc i64 %1788 to i8
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1789, i8* %1790, align 1, !tbaa !2449
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1777, i8* %1791, align 1, !tbaa !2450
  %1792 = load i64, i64* %RAX
  %1793 = load i64, i64* %RCX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 3
  store i64 %1795, i64* %PC
  %1796 = add i64 %1793, %1792
  store i64 %1796, i64* %RAX, align 8, !tbaa !2428
  %1797 = icmp ult i64 %1796, %1792
  %1798 = icmp ult i64 %1796, %1793
  %1799 = or i1 %1797, %1798
  %1800 = zext i1 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1800, i8* %1801, align 1, !tbaa !2432
  %1802 = trunc i64 %1796 to i32
  %1803 = and i32 %1802, 255
  %1804 = call i32 @llvm.ctpop.i32(i32 %1803) #16
  %1805 = trunc i32 %1804 to i8
  %1806 = and i8 %1805, 1
  %1807 = xor i8 %1806, 1
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1807, i8* %1808, align 1, !tbaa !2446
  %1809 = xor i64 %1793, %1792
  %1810 = xor i64 %1809, %1796
  %1811 = lshr i64 %1810, 4
  %1812 = trunc i64 %1811 to i8
  %1813 = and i8 %1812, 1
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1813, i8* %1814, align 1, !tbaa !2447
  %1815 = icmp eq i64 %1796, 0
  %1816 = zext i1 %1815 to i8
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1816, i8* %1817, align 1, !tbaa !2448
  %1818 = lshr i64 %1796, 63
  %1819 = trunc i64 %1818 to i8
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1819, i8* %1820, align 1, !tbaa !2449
  %1821 = lshr i64 %1792, 63
  %1822 = lshr i64 %1793, 63
  %1823 = xor i64 %1818, %1821
  %1824 = xor i64 %1818, %1822
  %1825 = add nuw nsw i64 %1823, %1824
  %1826 = icmp eq i64 %1825, 2
  %1827 = zext i1 %1826 to i8
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1827, i8* %1828, align 1, !tbaa !2450
  %1829 = load i64, i64* %RBP
  %1830 = sub i64 %1829, 104
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 4
  store i64 %1832, i64* %PC
  %1833 = inttoptr i64 %1830 to i32*
  %1834 = load i32, i32* %1833
  %1835 = sext i32 %1834 to i64
  store i64 %1835, i64* %RCX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RAX
  %1837 = load i64, i64* %RCX
  %1838 = mul i64 %1837, 8
  %1839 = add i64 %1838, %1836
  %1840 = bitcast %union.vec128_t* %XMM0 to i8*
  %1841 = load i64, i64* %PC
  %1842 = add i64 %1841, 5
  store i64 %1842, i64* %PC
  %1843 = bitcast i8* %1840 to double*
  %1844 = load double, double* %1843, align 1
  %1845 = inttoptr i64 %1839 to double*
  store double %1844, double* %1845
  %1846 = load i64, i64* %RBP
  %1847 = add i64 %1846, 72
  %1848 = load i64, i64* %PC
  %1849 = add i64 %1848, 4
  store i64 %1849, i64* %PC
  %1850 = inttoptr i64 %1847 to i64*
  %1851 = load i64, i64* %1850
  store i64 %1851, i64* %RAX, align 8, !tbaa !2428
  %1852 = load i64, i64* %RBP
  %1853 = sub i64 %1852, 48
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 4
  store i64 %1855, i64* %PC
  %1856 = inttoptr i64 %1853 to i32*
  %1857 = load i32, i32* %1856
  %1858 = sext i32 %1857 to i64
  store i64 %1858, i64* %RCX, align 8, !tbaa !2428
  %1859 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1860 = load i64, i64* %RAX
  %1861 = load i64, i64* %RCX
  %1862 = mul i64 %1861, 8
  %1863 = add i64 %1862, %1860
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 5
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to double*
  %1867 = load double, double* %1866
  %1868 = bitcast i8* %1859 to double*
  store double %1867, double* %1868, align 1, !tbaa !2452
  %1869 = getelementptr inbounds i8, i8* %1859, i64 8
  %1870 = bitcast i8* %1869 to double*
  store double 0.000000e+00, double* %1870, align 1, !tbaa !2452
  %1871 = load i64, i64* %RBP
  %1872 = add i64 %1871, 80
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1872 to i64*
  %1876 = load i64, i64* %1875
  store i64 %1876, i64* %RAX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 48
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 4
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = sext i32 %1882 to i64
  store i64 %1883, i64* %RCX, align 8, !tbaa !2428
  %1884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1886 = load i64, i64* %RAX
  %1887 = load i64, i64* %RCX
  %1888 = mul i64 %1887, 8
  %1889 = add i64 %1888, %1886
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 5
  store i64 %1891, i64* %PC
  %1892 = bitcast i8* %1885 to double*
  %1893 = load double, double* %1892, align 1
  %1894 = getelementptr inbounds i8, i8* %1885, i64 8
  %1895 = bitcast i8* %1894 to i64*
  %1896 = load i64, i64* %1895, align 1
  %1897 = inttoptr i64 %1889 to double*
  %1898 = load double, double* %1897
  %1899 = fdiv double %1893, %1898
  %1900 = bitcast i8* %1884 to double*
  store double %1899, double* %1900, align 1, !tbaa !2452
  %1901 = getelementptr inbounds i8, i8* %1884, i64 8
  %1902 = bitcast i8* %1901 to i64*
  store i64 %1896, i64* %1902, align 1, !tbaa !2452
  %1903 = load i64, i64* %RBP
  %1904 = add i64 %1903, 48
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 4
  store i64 %1906, i64* %PC
  %1907 = inttoptr i64 %1904 to i64*
  %1908 = load i64, i64* %1907
  store i64 %1908, i64* %RAX, align 8, !tbaa !2428
  %1909 = load i64, i64* %RBP
  %1910 = sub i64 %1909, 100
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 4
  store i64 %1912, i64* %PC
  %1913 = inttoptr i64 %1910 to i32*
  %1914 = load i32, i32* %1913
  %1915 = sext i32 %1914 to i64
  store i64 %1915, i64* %RCX, align 8, !tbaa !2428
  %1916 = load i64, i64* %RCX
  %1917 = load i64, i64* %PC
  %1918 = add i64 %1917, 7
  store i64 %1918, i64* %PC
  %1919 = sext i64 %1916 to i128
  %1920 = and i128 %1919, -18446744073709551616
  %1921 = zext i64 %1916 to i128
  %1922 = or i128 %1920, %1921
  %1923 = mul nsw i128 33800, %1922
  %1924 = trunc i128 %1923 to i64
  store i64 %1924, i64* %RCX, align 8, !tbaa !2428
  %1925 = sext i64 %1924 to i128
  %1926 = icmp ne i128 %1925, %1923
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1927, i8* %1928, align 1, !tbaa !2432
  %1929 = trunc i128 %1923 to i32
  %1930 = and i32 %1929, 255
  %1931 = call i32 @llvm.ctpop.i32(i32 %1930) #16
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1934, i8* %1935, align 1, !tbaa !2446
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1936, align 1, !tbaa !2447
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1937, align 1, !tbaa !2448
  %1938 = lshr i64 %1924, 63
  %1939 = trunc i64 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1939, i8* %1940, align 1, !tbaa !2449
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1927, i8* %1941, align 1, !tbaa !2450
  %1942 = load i64, i64* %RAX
  %1943 = load i64, i64* %RCX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 3
  store i64 %1945, i64* %PC
  %1946 = add i64 %1943, %1942
  store i64 %1946, i64* %RAX, align 8, !tbaa !2428
  %1947 = icmp ult i64 %1946, %1942
  %1948 = icmp ult i64 %1946, %1943
  %1949 = or i1 %1947, %1948
  %1950 = zext i1 %1949 to i8
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1950, i8* %1951, align 1, !tbaa !2432
  %1952 = trunc i64 %1946 to i32
  %1953 = and i32 %1952, 255
  %1954 = call i32 @llvm.ctpop.i32(i32 %1953) #16
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = xor i8 %1956, 1
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1957, i8* %1958, align 1, !tbaa !2446
  %1959 = xor i64 %1943, %1942
  %1960 = xor i64 %1959, %1946
  %1961 = lshr i64 %1960, 4
  %1962 = trunc i64 %1961 to i8
  %1963 = and i8 %1962, 1
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1963, i8* %1964, align 1, !tbaa !2447
  %1965 = icmp eq i64 %1946, 0
  %1966 = zext i1 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1966, i8* %1967, align 1, !tbaa !2448
  %1968 = lshr i64 %1946, 63
  %1969 = trunc i64 %1968 to i8
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1969, i8* %1970, align 1, !tbaa !2449
  %1971 = lshr i64 %1942, 63
  %1972 = lshr i64 %1943, 63
  %1973 = xor i64 %1968, %1971
  %1974 = xor i64 %1968, %1972
  %1975 = add nuw nsw i64 %1973, %1974
  %1976 = icmp eq i64 %1975, 2
  %1977 = zext i1 %1976 to i8
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1977, i8* %1978, align 1, !tbaa !2450
  %1979 = load i64, i64* %RBP
  %1980 = sub i64 %1979, 104
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 4
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to i32*
  %1984 = load i32, i32* %1983
  %1985 = sext i32 %1984 to i64
  store i64 %1985, i64* %RCX, align 8, !tbaa !2428
  %1986 = load i64, i64* %RCX
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 7
  store i64 %1988, i64* %PC
  %1989 = sext i64 %1986 to i128
  %1990 = and i128 %1989, -18446744073709551616
  %1991 = zext i64 %1986 to i128
  %1992 = or i128 %1990, %1991
  %1993 = mul nsw i128 520, %1992
  %1994 = trunc i128 %1993 to i64
  store i64 %1994, i64* %RCX, align 8, !tbaa !2428
  %1995 = sext i64 %1994 to i128
  %1996 = icmp ne i128 %1995, %1993
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1997, i8* %1998, align 1, !tbaa !2432
  %1999 = trunc i128 %1993 to i32
  %2000 = and i32 %1999, 255
  %2001 = call i32 @llvm.ctpop.i32(i32 %2000) #16
  %2002 = trunc i32 %2001 to i8
  %2003 = and i8 %2002, 1
  %2004 = xor i8 %2003, 1
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2004, i8* %2005, align 1, !tbaa !2446
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2006, align 1, !tbaa !2447
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2007, align 1, !tbaa !2448
  %2008 = lshr i64 %1994, 63
  %2009 = trunc i64 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2009, i8* %2010, align 1, !tbaa !2449
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1997, i8* %2011, align 1, !tbaa !2450
  %2012 = load i64, i64* %RAX
  %2013 = load i64, i64* %RCX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 3
  store i64 %2015, i64* %PC
  %2016 = add i64 %2013, %2012
  store i64 %2016, i64* %RAX, align 8, !tbaa !2428
  %2017 = icmp ult i64 %2016, %2012
  %2018 = icmp ult i64 %2016, %2013
  %2019 = or i1 %2017, %2018
  %2020 = zext i1 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2020, i8* %2021, align 1, !tbaa !2432
  %2022 = trunc i64 %2016 to i32
  %2023 = and i32 %2022, 255
  %2024 = call i32 @llvm.ctpop.i32(i32 %2023) #16
  %2025 = trunc i32 %2024 to i8
  %2026 = and i8 %2025, 1
  %2027 = xor i8 %2026, 1
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2027, i8* %2028, align 1, !tbaa !2446
  %2029 = xor i64 %2013, %2012
  %2030 = xor i64 %2029, %2016
  %2031 = lshr i64 %2030, 4
  %2032 = trunc i64 %2031 to i8
  %2033 = and i8 %2032, 1
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2033, i8* %2034, align 1, !tbaa !2447
  %2035 = icmp eq i64 %2016, 0
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2036, i8* %2037, align 1, !tbaa !2448
  %2038 = lshr i64 %2016, 63
  %2039 = trunc i64 %2038 to i8
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2039, i8* %2040, align 1, !tbaa !2449
  %2041 = lshr i64 %2012, 63
  %2042 = lshr i64 %2013, 63
  %2043 = xor i64 %2038, %2041
  %2044 = xor i64 %2038, %2042
  %2045 = add nuw nsw i64 %2043, %2044
  %2046 = icmp eq i64 %2045, 2
  %2047 = zext i1 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2047, i8* %2048, align 1, !tbaa !2450
  %2049 = load i64, i64* %RBP
  %2050 = sub i64 %2049, 48
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 4
  store i64 %2052, i64* %PC
  %2053 = inttoptr i64 %2050 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  store i64 %2055, i64* %RCX, align 8, !tbaa !2428
  %2056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2057 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %RCX
  %2060 = mul i64 %2059, 8
  %2061 = add i64 %2060, %2058
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 5
  store i64 %2063, i64* %PC
  %2064 = bitcast i8* %2057 to double*
  %2065 = load double, double* %2064, align 1
  %2066 = getelementptr inbounds i8, i8* %2057, i64 8
  %2067 = bitcast i8* %2066 to i64*
  %2068 = load i64, i64* %2067, align 1
  %2069 = inttoptr i64 %2061 to double*
  %2070 = load double, double* %2069
  %2071 = fmul double %2065, %2070
  %2072 = bitcast i8* %2056 to double*
  store double %2071, double* %2072, align 1, !tbaa !2452
  %2073 = getelementptr inbounds i8, i8* %2056, i64 8
  %2074 = bitcast i8* %2073 to i64*
  store i64 %2068, i64* %2074, align 1, !tbaa !2452
  %2075 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2076 = load i64, i64* %RBP
  %2077 = sub i64 %2076, 64
  %2078 = load i64, i64* %PC
  %2079 = add i64 %2078, 5
  store i64 %2079, i64* %PC
  %2080 = inttoptr i64 %2077 to double*
  %2081 = load double, double* %2080
  %2082 = bitcast i8* %2075 to double*
  store double %2081, double* %2082, align 1, !tbaa !2452
  %2083 = getelementptr inbounds i8, i8* %2075, i64 8
  %2084 = bitcast i8* %2083 to double*
  store double 0.000000e+00, double* %2084, align 1, !tbaa !2452
  %2085 = load i64, i64* %RBP
  %2086 = add i64 %2085, 64
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 4
  store i64 %2088, i64* %PC
  %2089 = inttoptr i64 %2086 to i64*
  %2090 = load i64, i64* %2089
  store i64 %2090, i64* %RAX, align 8, !tbaa !2428
  %2091 = load i64, i64* %RBP
  %2092 = sub i64 %2091, 100
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 4
  store i64 %2094, i64* %PC
  %2095 = inttoptr i64 %2092 to i32*
  %2096 = load i32, i32* %2095
  %2097 = sext i32 %2096 to i64
  store i64 %2097, i64* %RCX, align 8, !tbaa !2428
  %2098 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2099 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2100 = load i64, i64* %RAX
  %2101 = load i64, i64* %RCX
  %2102 = mul i64 %2101, 8
  %2103 = add i64 %2102, %2100
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 5
  store i64 %2105, i64* %PC
  %2106 = bitcast i8* %2099 to double*
  %2107 = load double, double* %2106, align 1
  %2108 = getelementptr inbounds i8, i8* %2099, i64 8
  %2109 = bitcast i8* %2108 to i64*
  %2110 = load i64, i64* %2109, align 1
  %2111 = inttoptr i64 %2103 to double*
  %2112 = load double, double* %2111
  %2113 = fmul double %2107, %2112
  %2114 = bitcast i8* %2098 to double*
  store double %2113, double* %2114, align 1, !tbaa !2452
  %2115 = getelementptr inbounds i8, i8* %2098, i64 8
  %2116 = bitcast i8* %2115 to i64*
  store i64 %2110, i64* %2116, align 1, !tbaa !2452
  %2117 = load i64, i64* %RBP
  %2118 = add i64 %2117, 80
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 4
  store i64 %2120, i64* %PC
  %2121 = inttoptr i64 %2118 to i64*
  %2122 = load i64, i64* %2121
  store i64 %2122, i64* %RAX, align 8, !tbaa !2428
  %2123 = load i64, i64* %RBP
  %2124 = sub i64 %2123, 48
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 4
  store i64 %2126, i64* %PC
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127
  %2129 = sext i32 %2128 to i64
  store i64 %2129, i64* %RCX, align 8, !tbaa !2428
  %2130 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2131 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2132 = load i64, i64* %RAX
  %2133 = load i64, i64* %RCX
  %2134 = mul i64 %2133, 8
  %2135 = add i64 %2134, %2132
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 5
  store i64 %2137, i64* %PC
  %2138 = bitcast i8* %2131 to double*
  %2139 = load double, double* %2138, align 1
  %2140 = getelementptr inbounds i8, i8* %2131, i64 8
  %2141 = bitcast i8* %2140 to i64*
  %2142 = load i64, i64* %2141, align 1
  %2143 = inttoptr i64 %2135 to double*
  %2144 = load double, double* %2143
  %2145 = fdiv double %2139, %2144
  %2146 = bitcast i8* %2130 to double*
  store double %2145, double* %2146, align 1, !tbaa !2452
  %2147 = getelementptr inbounds i8, i8* %2130, i64 8
  %2148 = bitcast i8* %2147 to i64*
  store i64 %2142, i64* %2148, align 1, !tbaa !2452
  %2149 = load i64, i64* %RBP
  %2150 = add i64 %2149, 16
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 4
  store i64 %2152, i64* %PC
  %2153 = inttoptr i64 %2150 to i64*
  %2154 = load i64, i64* %2153
  store i64 %2154, i64* %RAX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP
  %2156 = sub i64 %2155, 100
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 4
  store i64 %2158, i64* %PC
  %2159 = inttoptr i64 %2156 to i32*
  %2160 = load i32, i32* %2159
  %2161 = sext i32 %2160 to i64
  store i64 %2161, i64* %RCX, align 8, !tbaa !2428
  %2162 = load i64, i64* %RCX
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 7
  store i64 %2164, i64* %PC
  %2165 = sext i64 %2162 to i128
  %2166 = and i128 %2165, -18446744073709551616
  %2167 = zext i64 %2162 to i128
  %2168 = or i128 %2166, %2167
  %2169 = mul nsw i128 520, %2168
  %2170 = trunc i128 %2169 to i64
  store i64 %2170, i64* %RCX, align 8, !tbaa !2428
  %2171 = sext i64 %2170 to i128
  %2172 = icmp ne i128 %2171, %2169
  %2173 = zext i1 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2173, i8* %2174, align 1, !tbaa !2432
  %2175 = trunc i128 %2169 to i32
  %2176 = and i32 %2175, 255
  %2177 = call i32 @llvm.ctpop.i32(i32 %2176) #16
  %2178 = trunc i32 %2177 to i8
  %2179 = and i8 %2178, 1
  %2180 = xor i8 %2179, 1
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2180, i8* %2181, align 1, !tbaa !2446
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2182, align 1, !tbaa !2447
  %2183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2183, align 1, !tbaa !2448
  %2184 = lshr i64 %2170, 63
  %2185 = trunc i64 %2184 to i8
  %2186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2185, i8* %2186, align 1, !tbaa !2449
  %2187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2173, i8* %2187, align 1, !tbaa !2450
  %2188 = load i64, i64* %RAX
  %2189 = load i64, i64* %RCX
  %2190 = load i64, i64* %PC
  %2191 = add i64 %2190, 3
  store i64 %2191, i64* %PC
  %2192 = add i64 %2189, %2188
  store i64 %2192, i64* %RAX, align 8, !tbaa !2428
  %2193 = icmp ult i64 %2192, %2188
  %2194 = icmp ult i64 %2192, %2189
  %2195 = or i1 %2193, %2194
  %2196 = zext i1 %2195 to i8
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2196, i8* %2197, align 1, !tbaa !2432
  %2198 = trunc i64 %2192 to i32
  %2199 = and i32 %2198, 255
  %2200 = call i32 @llvm.ctpop.i32(i32 %2199) #16
  %2201 = trunc i32 %2200 to i8
  %2202 = and i8 %2201, 1
  %2203 = xor i8 %2202, 1
  %2204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2203, i8* %2204, align 1, !tbaa !2446
  %2205 = xor i64 %2189, %2188
  %2206 = xor i64 %2205, %2192
  %2207 = lshr i64 %2206, 4
  %2208 = trunc i64 %2207 to i8
  %2209 = and i8 %2208, 1
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2209, i8* %2210, align 1, !tbaa !2447
  %2211 = icmp eq i64 %2192, 0
  %2212 = zext i1 %2211 to i8
  %2213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2212, i8* %2213, align 1, !tbaa !2448
  %2214 = lshr i64 %2192, 63
  %2215 = trunc i64 %2214 to i8
  %2216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2215, i8* %2216, align 1, !tbaa !2449
  %2217 = lshr i64 %2188, 63
  %2218 = lshr i64 %2189, 63
  %2219 = xor i64 %2214, %2217
  %2220 = xor i64 %2214, %2218
  %2221 = add nuw nsw i64 %2219, %2220
  %2222 = icmp eq i64 %2221, 2
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2223, i8* %2224, align 1, !tbaa !2450
  %2225 = load i64, i64* %RBP
  %2226 = sub i64 %2225, 104
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 4
  store i64 %2228, i64* %PC
  %2229 = inttoptr i64 %2226 to i32*
  %2230 = load i32, i32* %2229
  %2231 = sext i32 %2230 to i64
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2233 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2234 = load i64, i64* %RAX
  %2235 = load i64, i64* %RCX
  %2236 = mul i64 %2235, 8
  %2237 = add i64 %2236, %2234
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 5
  store i64 %2239, i64* %PC
  %2240 = bitcast i8* %2233 to double*
  %2241 = load double, double* %2240, align 1
  %2242 = getelementptr inbounds i8, i8* %2233, i64 8
  %2243 = bitcast i8* %2242 to i64*
  %2244 = load i64, i64* %2243, align 1
  %2245 = inttoptr i64 %2237 to double*
  %2246 = load double, double* %2245
  %2247 = fmul double %2241, %2246
  %2248 = bitcast i8* %2232 to double*
  store double %2247, double* %2248, align 1, !tbaa !2452
  %2249 = getelementptr inbounds i8, i8* %2232, i64 8
  %2250 = bitcast i8* %2249 to i64*
  store i64 %2244, i64* %2250, align 1, !tbaa !2452
  %2251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2252 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2253 = bitcast %union.vec128_t* %XMM1 to i8*
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 4
  store i64 %2255, i64* %PC
  %2256 = bitcast i8* %2252 to double*
  %2257 = load double, double* %2256, align 1
  %2258 = getelementptr inbounds i8, i8* %2252, i64 8
  %2259 = bitcast i8* %2258 to i64*
  %2260 = load i64, i64* %2259, align 1
  %2261 = bitcast i8* %2253 to double*
  %2262 = load double, double* %2261, align 1
  %2263 = fadd double %2257, %2262
  %2264 = bitcast i8* %2251 to double*
  store double %2263, double* %2264, align 1, !tbaa !2452
  %2265 = getelementptr inbounds i8, i8* %2251, i64 8
  %2266 = bitcast i8* %2265 to i64*
  store i64 %2260, i64* %2266, align 1, !tbaa !2452
  %2267 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2268 = load i64, i64* %RBP
  %2269 = sub i64 %2268, 64
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 5
  store i64 %2271, i64* %PC
  %2272 = inttoptr i64 %2269 to double*
  %2273 = load double, double* %2272
  %2274 = bitcast i8* %2267 to double*
  store double %2273, double* %2274, align 1, !tbaa !2452
  %2275 = getelementptr inbounds i8, i8* %2267, i64 8
  %2276 = bitcast i8* %2275 to double*
  store double 0.000000e+00, double* %2276, align 1, !tbaa !2452
  %2277 = load i64, i64* %RBP
  %2278 = add i64 %2277, 56
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i64*
  %2282 = load i64, i64* %2281
  store i64 %2282, i64* %RAX, align 8, !tbaa !2428
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 100
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 4
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2284 to i32*
  %2288 = load i32, i32* %2287
  %2289 = sext i32 %2288 to i64
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2291 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2292 = load i64, i64* %RAX
  %2293 = load i64, i64* %RCX
  %2294 = mul i64 %2293, 8
  %2295 = add i64 %2294, %2292
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 5
  store i64 %2297, i64* %PC
  %2298 = bitcast i8* %2291 to double*
  %2299 = load double, double* %2298, align 1
  %2300 = getelementptr inbounds i8, i8* %2291, i64 8
  %2301 = bitcast i8* %2300 to i64*
  %2302 = load i64, i64* %2301, align 1
  %2303 = inttoptr i64 %2295 to double*
  %2304 = load double, double* %2303
  %2305 = fmul double %2299, %2304
  %2306 = bitcast i8* %2290 to double*
  store double %2305, double* %2306, align 1, !tbaa !2452
  %2307 = getelementptr inbounds i8, i8* %2290, i64 8
  %2308 = bitcast i8* %2307 to i64*
  store i64 %2302, i64* %2308, align 1, !tbaa !2452
  %2309 = load i64, i64* %RBP
  %2310 = add i64 %2309, 80
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 4
  store i64 %2312, i64* %PC
  %2313 = inttoptr i64 %2310 to i64*
  %2314 = load i64, i64* %2313
  store i64 %2314, i64* %RAX, align 8, !tbaa !2428
  %2315 = load i64, i64* %RBP
  %2316 = sub i64 %2315, 48
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 4
  store i64 %2318, i64* %PC
  %2319 = inttoptr i64 %2316 to i32*
  %2320 = load i32, i32* %2319
  %2321 = sext i32 %2320 to i64
  store i64 %2321, i64* %RCX, align 8, !tbaa !2428
  %2322 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2323 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2324 = load i64, i64* %RAX
  %2325 = load i64, i64* %RCX
  %2326 = mul i64 %2325, 8
  %2327 = add i64 %2326, %2324
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 5
  store i64 %2329, i64* %PC
  %2330 = bitcast i8* %2323 to double*
  %2331 = load double, double* %2330, align 1
  %2332 = getelementptr inbounds i8, i8* %2323, i64 8
  %2333 = bitcast i8* %2332 to i64*
  %2334 = load i64, i64* %2333, align 1
  %2335 = inttoptr i64 %2327 to double*
  %2336 = load double, double* %2335
  %2337 = fdiv double %2331, %2336
  %2338 = bitcast i8* %2322 to double*
  store double %2337, double* %2338, align 1, !tbaa !2452
  %2339 = getelementptr inbounds i8, i8* %2322, i64 8
  %2340 = bitcast i8* %2339 to i64*
  store i64 %2334, i64* %2340, align 1, !tbaa !2452
  %2341 = load i64, i64* %RBP
  %2342 = add i64 %2341, 24
  %2343 = load i64, i64* %PC
  %2344 = add i64 %2343, 4
  store i64 %2344, i64* %PC
  %2345 = inttoptr i64 %2342 to i64*
  %2346 = load i64, i64* %2345
  store i64 %2346, i64* %RAX, align 8, !tbaa !2428
  %2347 = load i64, i64* %RBP
  %2348 = sub i64 %2347, 100
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 4
  store i64 %2350, i64* %PC
  %2351 = inttoptr i64 %2348 to i32*
  %2352 = load i32, i32* %2351
  %2353 = sext i32 %2352 to i64
  store i64 %2353, i64* %RCX, align 8, !tbaa !2428
  %2354 = load i64, i64* %RCX
  %2355 = load i64, i64* %PC
  %2356 = add i64 %2355, 7
  store i64 %2356, i64* %PC
  %2357 = sext i64 %2354 to i128
  %2358 = and i128 %2357, -18446744073709551616
  %2359 = zext i64 %2354 to i128
  %2360 = or i128 %2358, %2359
  %2361 = mul nsw i128 33800, %2360
  %2362 = trunc i128 %2361 to i64
  store i64 %2362, i64* %RCX, align 8, !tbaa !2428
  %2363 = sext i64 %2362 to i128
  %2364 = icmp ne i128 %2363, %2361
  %2365 = zext i1 %2364 to i8
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2365, i8* %2366, align 1, !tbaa !2432
  %2367 = trunc i128 %2361 to i32
  %2368 = and i32 %2367, 255
  %2369 = call i32 @llvm.ctpop.i32(i32 %2368) #16
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = xor i8 %2371, 1
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2372, i8* %2373, align 1, !tbaa !2446
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2374, align 1, !tbaa !2447
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2375, align 1, !tbaa !2448
  %2376 = lshr i64 %2362, 63
  %2377 = trunc i64 %2376 to i8
  %2378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2377, i8* %2378, align 1, !tbaa !2449
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2365, i8* %2379, align 1, !tbaa !2450
  %2380 = load i64, i64* %RAX
  %2381 = load i64, i64* %RCX
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 3
  store i64 %2383, i64* %PC
  %2384 = add i64 %2381, %2380
  store i64 %2384, i64* %RAX, align 8, !tbaa !2428
  %2385 = icmp ult i64 %2384, %2380
  %2386 = icmp ult i64 %2384, %2381
  %2387 = or i1 %2385, %2386
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2388, i8* %2389, align 1, !tbaa !2432
  %2390 = trunc i64 %2384 to i32
  %2391 = and i32 %2390, 255
  %2392 = call i32 @llvm.ctpop.i32(i32 %2391) #16
  %2393 = trunc i32 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = xor i8 %2394, 1
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2395, i8* %2396, align 1, !tbaa !2446
  %2397 = xor i64 %2381, %2380
  %2398 = xor i64 %2397, %2384
  %2399 = lshr i64 %2398, 4
  %2400 = trunc i64 %2399 to i8
  %2401 = and i8 %2400, 1
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2401, i8* %2402, align 1, !tbaa !2447
  %2403 = icmp eq i64 %2384, 0
  %2404 = zext i1 %2403 to i8
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2404, i8* %2405, align 1, !tbaa !2448
  %2406 = lshr i64 %2384, 63
  %2407 = trunc i64 %2406 to i8
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2407, i8* %2408, align 1, !tbaa !2449
  %2409 = lshr i64 %2380, 63
  %2410 = lshr i64 %2381, 63
  %2411 = xor i64 %2406, %2409
  %2412 = xor i64 %2406, %2410
  %2413 = add nuw nsw i64 %2411, %2412
  %2414 = icmp eq i64 %2413, 2
  %2415 = zext i1 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2415, i8* %2416, align 1, !tbaa !2450
  %2417 = load i64, i64* %RBP
  %2418 = sub i64 %2417, 104
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 4
  store i64 %2420, i64* %PC
  %2421 = inttoptr i64 %2418 to i32*
  %2422 = load i32, i32* %2421
  %2423 = sext i32 %2422 to i64
  store i64 %2423, i64* %RCX, align 8, !tbaa !2428
  %2424 = load i64, i64* %RCX
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 7
  store i64 %2426, i64* %PC
  %2427 = sext i64 %2424 to i128
  %2428 = and i128 %2427, -18446744073709551616
  %2429 = zext i64 %2424 to i128
  %2430 = or i128 %2428, %2429
  %2431 = mul nsw i128 520, %2430
  %2432 = trunc i128 %2431 to i64
  store i64 %2432, i64* %RCX, align 8, !tbaa !2428
  %2433 = sext i64 %2432 to i128
  %2434 = icmp ne i128 %2433, %2431
  %2435 = zext i1 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2435, i8* %2436, align 1, !tbaa !2432
  %2437 = trunc i128 %2431 to i32
  %2438 = and i32 %2437, 255
  %2439 = call i32 @llvm.ctpop.i32(i32 %2438) #16
  %2440 = trunc i32 %2439 to i8
  %2441 = and i8 %2440, 1
  %2442 = xor i8 %2441, 1
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2442, i8* %2443, align 1, !tbaa !2446
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2444, align 1, !tbaa !2447
  %2445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2445, align 1, !tbaa !2448
  %2446 = lshr i64 %2432, 63
  %2447 = trunc i64 %2446 to i8
  %2448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2447, i8* %2448, align 1, !tbaa !2449
  %2449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2435, i8* %2449, align 1, !tbaa !2450
  %2450 = load i64, i64* %RAX
  %2451 = load i64, i64* %RCX
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 3
  store i64 %2453, i64* %PC
  %2454 = add i64 %2451, %2450
  store i64 %2454, i64* %RAX, align 8, !tbaa !2428
  %2455 = icmp ult i64 %2454, %2450
  %2456 = icmp ult i64 %2454, %2451
  %2457 = or i1 %2455, %2456
  %2458 = zext i1 %2457 to i8
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2458, i8* %2459, align 1, !tbaa !2432
  %2460 = trunc i64 %2454 to i32
  %2461 = and i32 %2460, 255
  %2462 = call i32 @llvm.ctpop.i32(i32 %2461) #16
  %2463 = trunc i32 %2462 to i8
  %2464 = and i8 %2463, 1
  %2465 = xor i8 %2464, 1
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2465, i8* %2466, align 1, !tbaa !2446
  %2467 = xor i64 %2451, %2450
  %2468 = xor i64 %2467, %2454
  %2469 = lshr i64 %2468, 4
  %2470 = trunc i64 %2469 to i8
  %2471 = and i8 %2470, 1
  %2472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2471, i8* %2472, align 1, !tbaa !2447
  %2473 = icmp eq i64 %2454, 0
  %2474 = zext i1 %2473 to i8
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2474, i8* %2475, align 1, !tbaa !2448
  %2476 = lshr i64 %2454, 63
  %2477 = trunc i64 %2476 to i8
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2477, i8* %2478, align 1, !tbaa !2449
  %2479 = lshr i64 %2450, 63
  %2480 = lshr i64 %2451, 63
  %2481 = xor i64 %2476, %2479
  %2482 = xor i64 %2476, %2480
  %2483 = add nuw nsw i64 %2481, %2482
  %2484 = icmp eq i64 %2483, 2
  %2485 = zext i1 %2484 to i8
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2485, i8* %2486, align 1, !tbaa !2450
  %2487 = load i64, i64* %RBP
  %2488 = sub i64 %2487, 48
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 4
  store i64 %2490, i64* %PC
  %2491 = inttoptr i64 %2488 to i32*
  %2492 = load i32, i32* %2491
  %2493 = sext i32 %2492 to i64
  store i64 %2493, i64* %RCX, align 8, !tbaa !2428
  %2494 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2495 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2496 = load i64, i64* %RAX
  %2497 = load i64, i64* %RCX
  %2498 = mul i64 %2497, 8
  %2499 = add i64 %2498, %2496
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 5
  store i64 %2501, i64* %PC
  %2502 = bitcast i8* %2495 to double*
  %2503 = load double, double* %2502, align 1
  %2504 = getelementptr inbounds i8, i8* %2495, i64 8
  %2505 = bitcast i8* %2504 to i64*
  %2506 = load i64, i64* %2505, align 1
  %2507 = inttoptr i64 %2499 to double*
  %2508 = load double, double* %2507
  %2509 = fmul double %2503, %2508
  %2510 = bitcast i8* %2494 to double*
  store double %2509, double* %2510, align 1, !tbaa !2452
  %2511 = getelementptr inbounds i8, i8* %2494, i64 8
  %2512 = bitcast i8* %2511 to i64*
  store i64 %2506, i64* %2512, align 1, !tbaa !2452
  %2513 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2514 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2515 = bitcast %union.vec128_t* %XMM1 to i8*
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 4
  store i64 %2517, i64* %PC
  %2518 = bitcast i8* %2514 to double*
  %2519 = load double, double* %2518, align 1
  %2520 = getelementptr inbounds i8, i8* %2514, i64 8
  %2521 = bitcast i8* %2520 to i64*
  %2522 = load i64, i64* %2521, align 1
  %2523 = bitcast i8* %2515 to double*
  %2524 = load double, double* %2523, align 1
  %2525 = fsub double %2519, %2524
  %2526 = bitcast i8* %2513 to double*
  store double %2525, double* %2526, align 1, !tbaa !2452
  %2527 = getelementptr inbounds i8, i8* %2513, i64 8
  %2528 = bitcast i8* %2527 to i64*
  store i64 %2522, i64* %2528, align 1, !tbaa !2452
  %2529 = load i64, i64* %RBP
  %2530 = add i64 %2529, 48
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 4
  store i64 %2532, i64* %PC
  %2533 = inttoptr i64 %2530 to i64*
  %2534 = load i64, i64* %2533
  store i64 %2534, i64* %RAX, align 8, !tbaa !2428
  %2535 = load i64, i64* %RBP
  %2536 = sub i64 %2535, 100
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 4
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i32*
  %2540 = load i32, i32* %2539
  %2541 = sext i32 %2540 to i64
  store i64 %2541, i64* %RCX, align 8, !tbaa !2428
  %2542 = load i64, i64* %RCX
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 7
  store i64 %2544, i64* %PC
  %2545 = sext i64 %2542 to i128
  %2546 = and i128 %2545, -18446744073709551616
  %2547 = zext i64 %2542 to i128
  %2548 = or i128 %2546, %2547
  %2549 = mul nsw i128 33800, %2548
  %2550 = trunc i128 %2549 to i64
  store i64 %2550, i64* %RCX, align 8, !tbaa !2428
  %2551 = sext i64 %2550 to i128
  %2552 = icmp ne i128 %2551, %2549
  %2553 = zext i1 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2553, i8* %2554, align 1, !tbaa !2432
  %2555 = trunc i128 %2549 to i32
  %2556 = and i32 %2555, 255
  %2557 = call i32 @llvm.ctpop.i32(i32 %2556) #16
  %2558 = trunc i32 %2557 to i8
  %2559 = and i8 %2558, 1
  %2560 = xor i8 %2559, 1
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2560, i8* %2561, align 1, !tbaa !2446
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2562, align 1, !tbaa !2447
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2563, align 1, !tbaa !2448
  %2564 = lshr i64 %2550, 63
  %2565 = trunc i64 %2564 to i8
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2565, i8* %2566, align 1, !tbaa !2449
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2553, i8* %2567, align 1, !tbaa !2450
  %2568 = load i64, i64* %RAX
  %2569 = load i64, i64* %RCX
  %2570 = load i64, i64* %PC
  %2571 = add i64 %2570, 3
  store i64 %2571, i64* %PC
  %2572 = add i64 %2569, %2568
  store i64 %2572, i64* %RAX, align 8, !tbaa !2428
  %2573 = icmp ult i64 %2572, %2568
  %2574 = icmp ult i64 %2572, %2569
  %2575 = or i1 %2573, %2574
  %2576 = zext i1 %2575 to i8
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2576, i8* %2577, align 1, !tbaa !2432
  %2578 = trunc i64 %2572 to i32
  %2579 = and i32 %2578, 255
  %2580 = call i32 @llvm.ctpop.i32(i32 %2579) #16
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  %2583 = xor i8 %2582, 1
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2583, i8* %2584, align 1, !tbaa !2446
  %2585 = xor i64 %2569, %2568
  %2586 = xor i64 %2585, %2572
  %2587 = lshr i64 %2586, 4
  %2588 = trunc i64 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2589, i8* %2590, align 1, !tbaa !2447
  %2591 = icmp eq i64 %2572, 0
  %2592 = zext i1 %2591 to i8
  %2593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2592, i8* %2593, align 1, !tbaa !2448
  %2594 = lshr i64 %2572, 63
  %2595 = trunc i64 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2595, i8* %2596, align 1, !tbaa !2449
  %2597 = lshr i64 %2568, 63
  %2598 = lshr i64 %2569, 63
  %2599 = xor i64 %2594, %2597
  %2600 = xor i64 %2594, %2598
  %2601 = add nuw nsw i64 %2599, %2600
  %2602 = icmp eq i64 %2601, 2
  %2603 = zext i1 %2602 to i8
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2603, i8* %2604, align 1, !tbaa !2450
  %2605 = load i64, i64* %RBP
  %2606 = sub i64 %2605, 104
  %2607 = load i64, i64* %PC
  %2608 = add i64 %2607, 4
  store i64 %2608, i64* %PC
  %2609 = inttoptr i64 %2606 to i32*
  %2610 = load i32, i32* %2609
  %2611 = sext i32 %2610 to i64
  store i64 %2611, i64* %RCX, align 8, !tbaa !2428
  %2612 = load i64, i64* %RCX
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 7
  store i64 %2614, i64* %PC
  %2615 = sext i64 %2612 to i128
  %2616 = and i128 %2615, -18446744073709551616
  %2617 = zext i64 %2612 to i128
  %2618 = or i128 %2616, %2617
  %2619 = mul nsw i128 520, %2618
  %2620 = trunc i128 %2619 to i64
  store i64 %2620, i64* %RCX, align 8, !tbaa !2428
  %2621 = sext i64 %2620 to i128
  %2622 = icmp ne i128 %2621, %2619
  %2623 = zext i1 %2622 to i8
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2623, i8* %2624, align 1, !tbaa !2432
  %2625 = trunc i128 %2619 to i32
  %2626 = and i32 %2625, 255
  %2627 = call i32 @llvm.ctpop.i32(i32 %2626) #16
  %2628 = trunc i32 %2627 to i8
  %2629 = and i8 %2628, 1
  %2630 = xor i8 %2629, 1
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2630, i8* %2631, align 1, !tbaa !2446
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2632, align 1, !tbaa !2447
  %2633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2633, align 1, !tbaa !2448
  %2634 = lshr i64 %2620, 63
  %2635 = trunc i64 %2634 to i8
  %2636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2635, i8* %2636, align 1, !tbaa !2449
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2623, i8* %2637, align 1, !tbaa !2450
  %2638 = load i64, i64* %RAX
  %2639 = load i64, i64* %RCX
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 3
  store i64 %2641, i64* %PC
  %2642 = add i64 %2639, %2638
  store i64 %2642, i64* %RAX, align 8, !tbaa !2428
  %2643 = icmp ult i64 %2642, %2638
  %2644 = icmp ult i64 %2642, %2639
  %2645 = or i1 %2643, %2644
  %2646 = zext i1 %2645 to i8
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2646, i8* %2647, align 1, !tbaa !2432
  %2648 = trunc i64 %2642 to i32
  %2649 = and i32 %2648, 255
  %2650 = call i32 @llvm.ctpop.i32(i32 %2649) #16
  %2651 = trunc i32 %2650 to i8
  %2652 = and i8 %2651, 1
  %2653 = xor i8 %2652, 1
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2653, i8* %2654, align 1, !tbaa !2446
  %2655 = xor i64 %2639, %2638
  %2656 = xor i64 %2655, %2642
  %2657 = lshr i64 %2656, 4
  %2658 = trunc i64 %2657 to i8
  %2659 = and i8 %2658, 1
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2659, i8* %2660, align 1, !tbaa !2447
  %2661 = icmp eq i64 %2642, 0
  %2662 = zext i1 %2661 to i8
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2662, i8* %2663, align 1, !tbaa !2448
  %2664 = lshr i64 %2642, 63
  %2665 = trunc i64 %2664 to i8
  %2666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2665, i8* %2666, align 1, !tbaa !2449
  %2667 = lshr i64 %2638, 63
  %2668 = lshr i64 %2639, 63
  %2669 = xor i64 %2664, %2667
  %2670 = xor i64 %2664, %2668
  %2671 = add nuw nsw i64 %2669, %2670
  %2672 = icmp eq i64 %2671, 2
  %2673 = zext i1 %2672 to i8
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2673, i8* %2674, align 1, !tbaa !2450
  %2675 = load i64, i64* %RBP
  %2676 = sub i64 %2675, 48
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 4
  store i64 %2678, i64* %PC
  %2679 = inttoptr i64 %2676 to i32*
  %2680 = load i32, i32* %2679
  %2681 = sext i32 %2680 to i64
  store i64 %2681, i64* %RCX, align 8, !tbaa !2428
  %2682 = load i64, i64* %RAX
  %2683 = load i64, i64* %RCX
  %2684 = mul i64 %2683, 8
  %2685 = add i64 %2684, %2682
  %2686 = bitcast %union.vec128_t* %XMM0 to i8*
  %2687 = load i64, i64* %PC
  %2688 = add i64 %2687, 5
  store i64 %2688, i64* %PC
  %2689 = bitcast i8* %2686 to double*
  %2690 = load double, double* %2689, align 1
  %2691 = inttoptr i64 %2685 to double*
  store double %2690, double* %2691
  %2692 = load i64, i64* %RBP
  %2693 = add i64 %2692, 16
  %2694 = load i64, i64* %PC
  %2695 = add i64 %2694, 4
  store i64 %2695, i64* %PC
  %2696 = inttoptr i64 %2693 to i64*
  %2697 = load i64, i64* %2696
  store i64 %2697, i64* %RAX, align 8, !tbaa !2428
  %2698 = load i64, i64* %RBP
  %2699 = sub i64 %2698, 100
  %2700 = load i64, i64* %PC
  %2701 = add i64 %2700, 4
  store i64 %2701, i64* %PC
  %2702 = inttoptr i64 %2699 to i32*
  %2703 = load i32, i32* %2702
  %2704 = sext i32 %2703 to i64
  store i64 %2704, i64* %RCX, align 8, !tbaa !2428
  %2705 = load i64, i64* %RCX
  %2706 = load i64, i64* %PC
  %2707 = add i64 %2706, 7
  store i64 %2707, i64* %PC
  %2708 = sext i64 %2705 to i128
  %2709 = and i128 %2708, -18446744073709551616
  %2710 = zext i64 %2705 to i128
  %2711 = or i128 %2709, %2710
  %2712 = mul nsw i128 520, %2711
  %2713 = trunc i128 %2712 to i64
  store i64 %2713, i64* %RCX, align 8, !tbaa !2428
  %2714 = sext i64 %2713 to i128
  %2715 = icmp ne i128 %2714, %2712
  %2716 = zext i1 %2715 to i8
  %2717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2716, i8* %2717, align 1, !tbaa !2432
  %2718 = trunc i128 %2712 to i32
  %2719 = and i32 %2718, 255
  %2720 = call i32 @llvm.ctpop.i32(i32 %2719) #16
  %2721 = trunc i32 %2720 to i8
  %2722 = and i8 %2721, 1
  %2723 = xor i8 %2722, 1
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2723, i8* %2724, align 1, !tbaa !2446
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2725, align 1, !tbaa !2447
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2726, align 1, !tbaa !2448
  %2727 = lshr i64 %2713, 63
  %2728 = trunc i64 %2727 to i8
  %2729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2728, i8* %2729, align 1, !tbaa !2449
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2716, i8* %2730, align 1, !tbaa !2450
  %2731 = load i64, i64* %RAX
  %2732 = load i64, i64* %RCX
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 3
  store i64 %2734, i64* %PC
  %2735 = add i64 %2732, %2731
  store i64 %2735, i64* %RAX, align 8, !tbaa !2428
  %2736 = icmp ult i64 %2735, %2731
  %2737 = icmp ult i64 %2735, %2732
  %2738 = or i1 %2736, %2737
  %2739 = zext i1 %2738 to i8
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2739, i8* %2740, align 1, !tbaa !2432
  %2741 = trunc i64 %2735 to i32
  %2742 = and i32 %2741, 255
  %2743 = call i32 @llvm.ctpop.i32(i32 %2742) #16
  %2744 = trunc i32 %2743 to i8
  %2745 = and i8 %2744, 1
  %2746 = xor i8 %2745, 1
  %2747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2746, i8* %2747, align 1, !tbaa !2446
  %2748 = xor i64 %2732, %2731
  %2749 = xor i64 %2748, %2735
  %2750 = lshr i64 %2749, 4
  %2751 = trunc i64 %2750 to i8
  %2752 = and i8 %2751, 1
  %2753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2752, i8* %2753, align 1, !tbaa !2447
  %2754 = icmp eq i64 %2735, 0
  %2755 = zext i1 %2754 to i8
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2755, i8* %2756, align 1, !tbaa !2448
  %2757 = lshr i64 %2735, 63
  %2758 = trunc i64 %2757 to i8
  %2759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2758, i8* %2759, align 1, !tbaa !2449
  %2760 = lshr i64 %2731, 63
  %2761 = lshr i64 %2732, 63
  %2762 = xor i64 %2757, %2760
  %2763 = xor i64 %2757, %2761
  %2764 = add nuw nsw i64 %2762, %2763
  %2765 = icmp eq i64 %2764, 2
  %2766 = zext i1 %2765 to i8
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2766, i8* %2767, align 1, !tbaa !2450
  %2768 = load i64, i64* %RBP
  %2769 = sub i64 %2768, 104
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 4
  store i64 %2771, i64* %PC
  %2772 = inttoptr i64 %2769 to i32*
  %2773 = load i32, i32* %2772
  %2774 = sext i32 %2773 to i64
  store i64 %2774, i64* %RCX, align 8, !tbaa !2428
  %2775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2776 = load i64, i64* %RAX
  %2777 = load i64, i64* %RCX
  %2778 = mul i64 %2777, 8
  %2779 = add i64 %2778, %2776
  %2780 = load i64, i64* %PC
  %2781 = add i64 %2780, 5
  store i64 %2781, i64* %PC
  %2782 = inttoptr i64 %2779 to double*
  %2783 = load double, double* %2782
  %2784 = bitcast i8* %2775 to double*
  store double %2783, double* %2784, align 1, !tbaa !2452
  %2785 = getelementptr inbounds i8, i8* %2775, i64 8
  %2786 = bitcast i8* %2785 to double*
  store double 0.000000e+00, double* %2786, align 1, !tbaa !2452
  %2787 = load i64, i64* %RBP
  %2788 = add i64 %2787, 24
  %2789 = load i64, i64* %PC
  %2790 = add i64 %2789, 4
  store i64 %2790, i64* %PC
  %2791 = inttoptr i64 %2788 to i64*
  %2792 = load i64, i64* %2791
  store i64 %2792, i64* %RAX, align 8, !tbaa !2428
  %2793 = load i64, i64* %RBP
  %2794 = sub i64 %2793, 100
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 4
  store i64 %2796, i64* %PC
  %2797 = inttoptr i64 %2794 to i32*
  %2798 = load i32, i32* %2797
  %2799 = sext i32 %2798 to i64
  store i64 %2799, i64* %RCX, align 8, !tbaa !2428
  %2800 = load i64, i64* %RCX
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 7
  store i64 %2802, i64* %PC
  %2803 = sext i64 %2800 to i128
  %2804 = and i128 %2803, -18446744073709551616
  %2805 = zext i64 %2800 to i128
  %2806 = or i128 %2804, %2805
  %2807 = mul nsw i128 33800, %2806
  %2808 = trunc i128 %2807 to i64
  store i64 %2808, i64* %RCX, align 8, !tbaa !2428
  %2809 = sext i64 %2808 to i128
  %2810 = icmp ne i128 %2809, %2807
  %2811 = zext i1 %2810 to i8
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2811, i8* %2812, align 1, !tbaa !2432
  %2813 = trunc i128 %2807 to i32
  %2814 = and i32 %2813, 255
  %2815 = call i32 @llvm.ctpop.i32(i32 %2814) #16
  %2816 = trunc i32 %2815 to i8
  %2817 = and i8 %2816, 1
  %2818 = xor i8 %2817, 1
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2818, i8* %2819, align 1, !tbaa !2446
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2820, align 1, !tbaa !2447
  %2821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2821, align 1, !tbaa !2448
  %2822 = lshr i64 %2808, 63
  %2823 = trunc i64 %2822 to i8
  %2824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2823, i8* %2824, align 1, !tbaa !2449
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2811, i8* %2825, align 1, !tbaa !2450
  %2826 = load i64, i64* %RAX
  %2827 = load i64, i64* %RCX
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 3
  store i64 %2829, i64* %PC
  %2830 = add i64 %2827, %2826
  store i64 %2830, i64* %RAX, align 8, !tbaa !2428
  %2831 = icmp ult i64 %2830, %2826
  %2832 = icmp ult i64 %2830, %2827
  %2833 = or i1 %2831, %2832
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2834, i8* %2835, align 1, !tbaa !2432
  %2836 = trunc i64 %2830 to i32
  %2837 = and i32 %2836, 255
  %2838 = call i32 @llvm.ctpop.i32(i32 %2837) #16
  %2839 = trunc i32 %2838 to i8
  %2840 = and i8 %2839, 1
  %2841 = xor i8 %2840, 1
  %2842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2841, i8* %2842, align 1, !tbaa !2446
  %2843 = xor i64 %2827, %2826
  %2844 = xor i64 %2843, %2830
  %2845 = lshr i64 %2844, 4
  %2846 = trunc i64 %2845 to i8
  %2847 = and i8 %2846, 1
  %2848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2847, i8* %2848, align 1, !tbaa !2447
  %2849 = icmp eq i64 %2830, 0
  %2850 = zext i1 %2849 to i8
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2850, i8* %2851, align 1, !tbaa !2448
  %2852 = lshr i64 %2830, 63
  %2853 = trunc i64 %2852 to i8
  %2854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2853, i8* %2854, align 1, !tbaa !2449
  %2855 = lshr i64 %2826, 63
  %2856 = lshr i64 %2827, 63
  %2857 = xor i64 %2852, %2855
  %2858 = xor i64 %2852, %2856
  %2859 = add nuw nsw i64 %2857, %2858
  %2860 = icmp eq i64 %2859, 2
  %2861 = zext i1 %2860 to i8
  %2862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2861, i8* %2862, align 1, !tbaa !2450
  %2863 = load i64, i64* %RBP
  %2864 = sub i64 %2863, 104
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 4
  store i64 %2866, i64* %PC
  %2867 = inttoptr i64 %2864 to i32*
  %2868 = load i32, i32* %2867
  %2869 = sext i32 %2868 to i64
  store i64 %2869, i64* %RCX, align 8, !tbaa !2428
  %2870 = load i64, i64* %RCX
  %2871 = load i64, i64* %PC
  %2872 = add i64 %2871, 7
  store i64 %2872, i64* %PC
  %2873 = sext i64 %2870 to i128
  %2874 = and i128 %2873, -18446744073709551616
  %2875 = zext i64 %2870 to i128
  %2876 = or i128 %2874, %2875
  %2877 = mul nsw i128 520, %2876
  %2878 = trunc i128 %2877 to i64
  store i64 %2878, i64* %RCX, align 8, !tbaa !2428
  %2879 = sext i64 %2878 to i128
  %2880 = icmp ne i128 %2879, %2877
  %2881 = zext i1 %2880 to i8
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2881, i8* %2882, align 1, !tbaa !2432
  %2883 = trunc i128 %2877 to i32
  %2884 = and i32 %2883, 255
  %2885 = call i32 @llvm.ctpop.i32(i32 %2884) #16
  %2886 = trunc i32 %2885 to i8
  %2887 = and i8 %2886, 1
  %2888 = xor i8 %2887, 1
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2888, i8* %2889, align 1, !tbaa !2446
  %2890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2890, align 1, !tbaa !2447
  %2891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2891, align 1, !tbaa !2448
  %2892 = lshr i64 %2878, 63
  %2893 = trunc i64 %2892 to i8
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2893, i8* %2894, align 1, !tbaa !2449
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2881, i8* %2895, align 1, !tbaa !2450
  %2896 = load i64, i64* %RAX
  %2897 = load i64, i64* %RCX
  %2898 = load i64, i64* %PC
  %2899 = add i64 %2898, 3
  store i64 %2899, i64* %PC
  %2900 = add i64 %2897, %2896
  store i64 %2900, i64* %RAX, align 8, !tbaa !2428
  %2901 = icmp ult i64 %2900, %2896
  %2902 = icmp ult i64 %2900, %2897
  %2903 = or i1 %2901, %2902
  %2904 = zext i1 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2904, i8* %2905, align 1, !tbaa !2432
  %2906 = trunc i64 %2900 to i32
  %2907 = and i32 %2906, 255
  %2908 = call i32 @llvm.ctpop.i32(i32 %2907) #16
  %2909 = trunc i32 %2908 to i8
  %2910 = and i8 %2909, 1
  %2911 = xor i8 %2910, 1
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2911, i8* %2912, align 1, !tbaa !2446
  %2913 = xor i64 %2897, %2896
  %2914 = xor i64 %2913, %2900
  %2915 = lshr i64 %2914, 4
  %2916 = trunc i64 %2915 to i8
  %2917 = and i8 %2916, 1
  %2918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2917, i8* %2918, align 1, !tbaa !2447
  %2919 = icmp eq i64 %2900, 0
  %2920 = zext i1 %2919 to i8
  %2921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2920, i8* %2921, align 1, !tbaa !2448
  %2922 = lshr i64 %2900, 63
  %2923 = trunc i64 %2922 to i8
  %2924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2923, i8* %2924, align 1, !tbaa !2449
  %2925 = lshr i64 %2896, 63
  %2926 = lshr i64 %2897, 63
  %2927 = xor i64 %2922, %2925
  %2928 = xor i64 %2922, %2926
  %2929 = add nuw nsw i64 %2927, %2928
  %2930 = icmp eq i64 %2929, 2
  %2931 = zext i1 %2930 to i8
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2931, i8* %2932, align 1, !tbaa !2450
  %2933 = load i64, i64* %RBP
  %2934 = sub i64 %2933, 48
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 4
  store i64 %2936, i64* %PC
  %2937 = inttoptr i64 %2934 to i32*
  %2938 = load i32, i32* %2937
  %2939 = sext i32 %2938 to i64
  store i64 %2939, i64* %RCX, align 8, !tbaa !2428
  %2940 = load i64, i64* %RAX
  %2941 = load i64, i64* %RCX
  %2942 = mul i64 %2941, 8
  %2943 = add i64 %2942, %2940
  %2944 = bitcast %union.vec128_t* %XMM0 to i8*
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 5
  store i64 %2946, i64* %PC
  %2947 = bitcast i8* %2944 to double*
  %2948 = load double, double* %2947, align 1
  %2949 = inttoptr i64 %2943 to double*
  store double %2948, double* %2949
  %2950 = load i64, i64* %RBP
  %2951 = sub i64 %2950, 108
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 7
  store i64 %2953, i64* %PC
  %2954 = inttoptr i64 %2951 to i32*
  store i32 0, i32* %2954
  br label %block_4019d2

block_401c6b:                                     ; preds = %block_4019d2
  %2955 = sub i64 %764, 48
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 4
  store i64 %2957, i64* %PC
  %2958 = inttoptr i64 %2955 to i32*
  %2959 = load i32, i32* %2958
  %2960 = sext i32 %2959 to i64
  store i64 %2960, i64* %RCX, align 8, !tbaa !2428
  %2961 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2962 = load i64, i64* %RAX
  %2963 = load i64, i64* %RCX
  %2964 = mul i64 %2963, 8
  %2965 = add i64 %2964, %2962
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 5
  store i64 %2967, i64* %PC
  %2968 = inttoptr i64 %2965 to double*
  %2969 = load double, double* %2968
  %2970 = bitcast i8* %2961 to double*
  store double %2969, double* %2970, align 1, !tbaa !2452
  %2971 = getelementptr inbounds i8, i8* %2961, i64 8
  %2972 = bitcast i8* %2971 to double*
  store double 0.000000e+00, double* %2972, align 1, !tbaa !2452
  %2973 = load i64, i64* %RBP
  %2974 = sub i64 %2973, 80
  %2975 = load i64, i64* %PC
  %2976 = add i64 %2975, 4
  store i64 %2976, i64* %PC
  %2977 = inttoptr i64 %2974 to i64*
  %2978 = load i64, i64* %2977
  store i64 %2978, i64* %RAX, align 8, !tbaa !2428
  %2979 = load i64, i64* %RBP
  %2980 = sub i64 %2979, 100
  %2981 = load i64, i64* %PC
  %2982 = add i64 %2981, 4
  store i64 %2982, i64* %PC
  %2983 = inttoptr i64 %2980 to i32*
  %2984 = load i32, i32* %2983
  %2985 = sext i32 %2984 to i64
  store i64 %2985, i64* %RCX, align 8, !tbaa !2428
  %2986 = load i64, i64* %RCX
  %2987 = load i64, i64* %PC
  %2988 = add i64 %2987, 7
  store i64 %2988, i64* %PC
  %2989 = sext i64 %2986 to i128
  %2990 = and i128 %2989, -18446744073709551616
  %2991 = zext i64 %2986 to i128
  %2992 = or i128 %2990, %2991
  %2993 = mul nsw i128 520, %2992
  %2994 = trunc i128 %2993 to i64
  store i64 %2994, i64* %RCX, align 8, !tbaa !2428
  %2995 = sext i64 %2994 to i128
  %2996 = icmp ne i128 %2995, %2993
  %2997 = zext i1 %2996 to i8
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2997, i8* %2998, align 1, !tbaa !2432
  %2999 = trunc i128 %2993 to i32
  %3000 = and i32 %2999, 255
  %3001 = call i32 @llvm.ctpop.i32(i32 %3000) #16
  %3002 = trunc i32 %3001 to i8
  %3003 = and i8 %3002, 1
  %3004 = xor i8 %3003, 1
  %3005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3004, i8* %3005, align 1, !tbaa !2446
  %3006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3006, align 1, !tbaa !2447
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3007, align 1, !tbaa !2448
  %3008 = lshr i64 %2994, 63
  %3009 = trunc i64 %3008 to i8
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3009, i8* %3010, align 1, !tbaa !2449
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2997, i8* %3011, align 1, !tbaa !2450
  %3012 = load i64, i64* %RAX
  %3013 = load i64, i64* %RCX
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 3
  store i64 %3015, i64* %PC
  %3016 = add i64 %3013, %3012
  store i64 %3016, i64* %RAX, align 8, !tbaa !2428
  %3017 = icmp ult i64 %3016, %3012
  %3018 = icmp ult i64 %3016, %3013
  %3019 = or i1 %3017, %3018
  %3020 = zext i1 %3019 to i8
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3020, i8* %3021, align 1, !tbaa !2432
  %3022 = trunc i64 %3016 to i32
  %3023 = and i32 %3022, 255
  %3024 = call i32 @llvm.ctpop.i32(i32 %3023) #16
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  %3027 = xor i8 %3026, 1
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3027, i8* %3028, align 1, !tbaa !2446
  %3029 = xor i64 %3013, %3012
  %3030 = xor i64 %3029, %3016
  %3031 = lshr i64 %3030, 4
  %3032 = trunc i64 %3031 to i8
  %3033 = and i8 %3032, 1
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3033, i8* %3034, align 1, !tbaa !2447
  %3035 = icmp eq i64 %3016, 0
  %3036 = zext i1 %3035 to i8
  %3037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3036, i8* %3037, align 1, !tbaa !2448
  %3038 = lshr i64 %3016, 63
  %3039 = trunc i64 %3038 to i8
  %3040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3039, i8* %3040, align 1, !tbaa !2449
  %3041 = lshr i64 %3012, 63
  %3042 = lshr i64 %3013, 63
  %3043 = xor i64 %3038, %3041
  %3044 = xor i64 %3038, %3042
  %3045 = add nuw nsw i64 %3043, %3044
  %3046 = icmp eq i64 %3045, 2
  %3047 = zext i1 %3046 to i8
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3047, i8* %3048, align 1, !tbaa !2450
  %3049 = load i64, i64* %RBP
  %3050 = sub i64 %3049, 48
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 4
  store i64 %3052, i64* %PC
  %3053 = inttoptr i64 %3050 to i32*
  %3054 = load i32, i32* %3053
  %3055 = sext i32 %3054 to i64
  store i64 %3055, i64* %RCX, align 8, !tbaa !2428
  %3056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3057 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3058 = load i64, i64* %RAX
  %3059 = load i64, i64* %RCX
  %3060 = mul i64 %3059, 8
  %3061 = add i64 %3060, %3058
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 5
  store i64 %3063, i64* %PC
  %3064 = bitcast i8* %3057 to double*
  %3065 = load double, double* %3064, align 1
  %3066 = getelementptr inbounds i8, i8* %3057, i64 8
  %3067 = bitcast i8* %3066 to i64*
  %3068 = load i64, i64* %3067, align 1
  %3069 = inttoptr i64 %3061 to double*
  %3070 = load double, double* %3069
  %3071 = fsub double %3065, %3070
  %3072 = bitcast i8* %3056 to double*
  store double %3071, double* %3072, align 1, !tbaa !2452
  %3073 = getelementptr inbounds i8, i8* %3056, i64 8
  %3074 = bitcast i8* %3073 to i64*
  store i64 %3068, i64* %3074, align 1, !tbaa !2452
  %3075 = load i64, i64* %RBP
  %3076 = sub i64 %3075, 88
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 4
  store i64 %3078, i64* %PC
  %3079 = inttoptr i64 %3076 to i64*
  %3080 = load i64, i64* %3079
  store i64 %3080, i64* %RAX, align 8, !tbaa !2428
  %3081 = load i64, i64* %RBP
  %3082 = sub i64 %3081, 100
  %3083 = load i64, i64* %PC
  %3084 = add i64 %3083, 4
  store i64 %3084, i64* %PC
  %3085 = inttoptr i64 %3082 to i32*
  %3086 = load i32, i32* %3085
  %3087 = sext i32 %3086 to i64
  store i64 %3087, i64* %RCX, align 8, !tbaa !2428
  %3088 = load i64, i64* %RCX
  %3089 = load i64, i64* %PC
  %3090 = add i64 %3089, 7
  store i64 %3090, i64* %PC
  %3091 = sext i64 %3088 to i128
  %3092 = and i128 %3091, -18446744073709551616
  %3093 = zext i64 %3088 to i128
  %3094 = or i128 %3092, %3093
  %3095 = mul nsw i128 520, %3094
  %3096 = trunc i128 %3095 to i64
  store i64 %3096, i64* %RCX, align 8, !tbaa !2428
  %3097 = sext i64 %3096 to i128
  %3098 = icmp ne i128 %3097, %3095
  %3099 = zext i1 %3098 to i8
  %3100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3099, i8* %3100, align 1, !tbaa !2432
  %3101 = trunc i128 %3095 to i32
  %3102 = and i32 %3101, 255
  %3103 = call i32 @llvm.ctpop.i32(i32 %3102) #16
  %3104 = trunc i32 %3103 to i8
  %3105 = and i8 %3104, 1
  %3106 = xor i8 %3105, 1
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3106, i8* %3107, align 1, !tbaa !2446
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3108, align 1, !tbaa !2447
  %3109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3109, align 1, !tbaa !2448
  %3110 = lshr i64 %3096, 63
  %3111 = trunc i64 %3110 to i8
  %3112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3111, i8* %3112, align 1, !tbaa !2449
  %3113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3099, i8* %3113, align 1, !tbaa !2450
  %3114 = load i64, i64* %RAX
  %3115 = load i64, i64* %RCX
  %3116 = load i64, i64* %PC
  %3117 = add i64 %3116, 3
  store i64 %3117, i64* %PC
  %3118 = add i64 %3115, %3114
  store i64 %3118, i64* %RAX, align 8, !tbaa !2428
  %3119 = icmp ult i64 %3118, %3114
  %3120 = icmp ult i64 %3118, %3115
  %3121 = or i1 %3119, %3120
  %3122 = zext i1 %3121 to i8
  %3123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3122, i8* %3123, align 1, !tbaa !2432
  %3124 = trunc i64 %3118 to i32
  %3125 = and i32 %3124, 255
  %3126 = call i32 @llvm.ctpop.i32(i32 %3125) #16
  %3127 = trunc i32 %3126 to i8
  %3128 = and i8 %3127, 1
  %3129 = xor i8 %3128, 1
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3129, i8* %3130, align 1, !tbaa !2446
  %3131 = xor i64 %3115, %3114
  %3132 = xor i64 %3131, %3118
  %3133 = lshr i64 %3132, 4
  %3134 = trunc i64 %3133 to i8
  %3135 = and i8 %3134, 1
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3135, i8* %3136, align 1, !tbaa !2447
  %3137 = icmp eq i64 %3118, 0
  %3138 = zext i1 %3137 to i8
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3138, i8* %3139, align 1, !tbaa !2448
  %3140 = lshr i64 %3118, 63
  %3141 = trunc i64 %3140 to i8
  %3142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3141, i8* %3142, align 1, !tbaa !2449
  %3143 = lshr i64 %3114, 63
  %3144 = lshr i64 %3115, 63
  %3145 = xor i64 %3140, %3143
  %3146 = xor i64 %3140, %3144
  %3147 = add nuw nsw i64 %3145, %3146
  %3148 = icmp eq i64 %3147, 2
  %3149 = zext i1 %3148 to i8
  %3150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3149, i8* %3150, align 1, !tbaa !2450
  %3151 = load i64, i64* %RBP
  %3152 = sub i64 %3151, 52
  %3153 = load i64, i64* %PC
  %3154 = add i64 %3153, 4
  store i64 %3154, i64* %PC
  %3155 = inttoptr i64 %3152 to i32*
  %3156 = load i32, i32* %3155
  %3157 = sext i32 %3156 to i64
  store i64 %3157, i64* %RCX, align 8, !tbaa !2428
  %3158 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3159 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3160 = load i64, i64* %RAX
  %3161 = load i64, i64* %RCX
  %3162 = mul i64 %3161, 8
  %3163 = add i64 %3162, %3160
  %3164 = load i64, i64* %PC
  %3165 = add i64 %3164, 5
  store i64 %3165, i64* %PC
  %3166 = bitcast i8* %3159 to double*
  %3167 = load double, double* %3166, align 1
  %3168 = getelementptr inbounds i8, i8* %3159, i64 8
  %3169 = bitcast i8* %3168 to i64*
  %3170 = load i64, i64* %3169, align 1
  %3171 = inttoptr i64 %3163 to double*
  %3172 = load double, double* %3171
  %3173 = fadd double %3167, %3172
  %3174 = bitcast i8* %3158 to double*
  store double %3173, double* %3174, align 1, !tbaa !2452
  %3175 = getelementptr inbounds i8, i8* %3158, i64 8
  %3176 = bitcast i8* %3175 to i64*
  store i64 %3170, i64* %3176, align 1, !tbaa !2452
  %3177 = load i64, i64* %RBP
  %3178 = add i64 %3177, 40
  %3179 = load i64, i64* %PC
  %3180 = add i64 %3179, 4
  store i64 %3180, i64* %PC
  %3181 = inttoptr i64 %3178 to i64*
  %3182 = load i64, i64* %3181
  store i64 %3182, i64* %RAX, align 8, !tbaa !2428
  %3183 = load i64, i64* %RBP
  %3184 = sub i64 %3183, 100
  %3185 = load i64, i64* %PC
  %3186 = add i64 %3185, 4
  store i64 %3186, i64* %PC
  %3187 = inttoptr i64 %3184 to i32*
  %3188 = load i32, i32* %3187
  %3189 = sext i32 %3188 to i64
  store i64 %3189, i64* %RCX, align 8, !tbaa !2428
  %3190 = load i64, i64* %RCX
  %3191 = load i64, i64* %PC
  %3192 = add i64 %3191, 7
  store i64 %3192, i64* %PC
  %3193 = sext i64 %3190 to i128
  %3194 = and i128 %3193, -18446744073709551616
  %3195 = zext i64 %3190 to i128
  %3196 = or i128 %3194, %3195
  %3197 = mul nsw i128 33800, %3196
  %3198 = trunc i128 %3197 to i64
  store i64 %3198, i64* %RCX, align 8, !tbaa !2428
  %3199 = sext i64 %3198 to i128
  %3200 = icmp ne i128 %3199, %3197
  %3201 = zext i1 %3200 to i8
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3201, i8* %3202, align 1, !tbaa !2432
  %3203 = trunc i128 %3197 to i32
  %3204 = and i32 %3203, 255
  %3205 = call i32 @llvm.ctpop.i32(i32 %3204) #16
  %3206 = trunc i32 %3205 to i8
  %3207 = and i8 %3206, 1
  %3208 = xor i8 %3207, 1
  %3209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3208, i8* %3209, align 1, !tbaa !2446
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3210, align 1, !tbaa !2447
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3211, align 1, !tbaa !2448
  %3212 = lshr i64 %3198, 63
  %3213 = trunc i64 %3212 to i8
  %3214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3213, i8* %3214, align 1, !tbaa !2449
  %3215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3201, i8* %3215, align 1, !tbaa !2450
  %3216 = load i64, i64* %RAX
  %3217 = load i64, i64* %RCX
  %3218 = load i64, i64* %PC
  %3219 = add i64 %3218, 3
  store i64 %3219, i64* %PC
  %3220 = add i64 %3217, %3216
  store i64 %3220, i64* %RAX, align 8, !tbaa !2428
  %3221 = icmp ult i64 %3220, %3216
  %3222 = icmp ult i64 %3220, %3217
  %3223 = or i1 %3221, %3222
  %3224 = zext i1 %3223 to i8
  %3225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3224, i8* %3225, align 1, !tbaa !2432
  %3226 = trunc i64 %3220 to i32
  %3227 = and i32 %3226, 255
  %3228 = call i32 @llvm.ctpop.i32(i32 %3227) #16
  %3229 = trunc i32 %3228 to i8
  %3230 = and i8 %3229, 1
  %3231 = xor i8 %3230, 1
  %3232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3231, i8* %3232, align 1, !tbaa !2446
  %3233 = xor i64 %3217, %3216
  %3234 = xor i64 %3233, %3220
  %3235 = lshr i64 %3234, 4
  %3236 = trunc i64 %3235 to i8
  %3237 = and i8 %3236, 1
  %3238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3237, i8* %3238, align 1, !tbaa !2447
  %3239 = icmp eq i64 %3220, 0
  %3240 = zext i1 %3239 to i8
  %3241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3240, i8* %3241, align 1, !tbaa !2448
  %3242 = lshr i64 %3220, 63
  %3243 = trunc i64 %3242 to i8
  %3244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3243, i8* %3244, align 1, !tbaa !2449
  %3245 = lshr i64 %3216, 63
  %3246 = lshr i64 %3217, 63
  %3247 = xor i64 %3242, %3245
  %3248 = xor i64 %3242, %3246
  %3249 = add nuw nsw i64 %3247, %3248
  %3250 = icmp eq i64 %3249, 2
  %3251 = zext i1 %3250 to i8
  %3252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3251, i8* %3252, align 1, !tbaa !2450
  %3253 = load i64, i64* %RBP
  %3254 = sub i64 %3253, 52
  %3255 = load i64, i64* %PC
  %3256 = add i64 %3255, 4
  store i64 %3256, i64* %PC
  %3257 = inttoptr i64 %3254 to i32*
  %3258 = load i32, i32* %3257
  %3259 = sext i32 %3258 to i64
  store i64 %3259, i64* %RCX, align 8, !tbaa !2428
  %3260 = load i64, i64* %RCX
  %3261 = load i64, i64* %PC
  %3262 = add i64 %3261, 7
  store i64 %3262, i64* %PC
  %3263 = sext i64 %3260 to i128
  %3264 = and i128 %3263, -18446744073709551616
  %3265 = zext i64 %3260 to i128
  %3266 = or i128 %3264, %3265
  %3267 = mul nsw i128 520, %3266
  %3268 = trunc i128 %3267 to i64
  store i64 %3268, i64* %RCX, align 8, !tbaa !2428
  %3269 = sext i64 %3268 to i128
  %3270 = icmp ne i128 %3269, %3267
  %3271 = zext i1 %3270 to i8
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3271, i8* %3272, align 1, !tbaa !2432
  %3273 = trunc i128 %3267 to i32
  %3274 = and i32 %3273, 255
  %3275 = call i32 @llvm.ctpop.i32(i32 %3274) #16
  %3276 = trunc i32 %3275 to i8
  %3277 = and i8 %3276, 1
  %3278 = xor i8 %3277, 1
  %3279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3278, i8* %3279, align 1, !tbaa !2446
  %3280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3280, align 1, !tbaa !2447
  %3281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3281, align 1, !tbaa !2448
  %3282 = lshr i64 %3268, 63
  %3283 = trunc i64 %3282 to i8
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3283, i8* %3284, align 1, !tbaa !2449
  %3285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3271, i8* %3285, align 1, !tbaa !2450
  %3286 = load i64, i64* %RAX
  %3287 = load i64, i64* %RCX
  %3288 = load i64, i64* %PC
  %3289 = add i64 %3288, 3
  store i64 %3289, i64* %PC
  %3290 = add i64 %3287, %3286
  store i64 %3290, i64* %RAX, align 8, !tbaa !2428
  %3291 = icmp ult i64 %3290, %3286
  %3292 = icmp ult i64 %3290, %3287
  %3293 = or i1 %3291, %3292
  %3294 = zext i1 %3293 to i8
  %3295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3294, i8* %3295, align 1, !tbaa !2432
  %3296 = trunc i64 %3290 to i32
  %3297 = and i32 %3296, 255
  %3298 = call i32 @llvm.ctpop.i32(i32 %3297) #16
  %3299 = trunc i32 %3298 to i8
  %3300 = and i8 %3299, 1
  %3301 = xor i8 %3300, 1
  %3302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3301, i8* %3302, align 1, !tbaa !2446
  %3303 = xor i64 %3287, %3286
  %3304 = xor i64 %3303, %3290
  %3305 = lshr i64 %3304, 4
  %3306 = trunc i64 %3305 to i8
  %3307 = and i8 %3306, 1
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3307, i8* %3308, align 1, !tbaa !2447
  %3309 = icmp eq i64 %3290, 0
  %3310 = zext i1 %3309 to i8
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3310, i8* %3311, align 1, !tbaa !2448
  %3312 = lshr i64 %3290, 63
  %3313 = trunc i64 %3312 to i8
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3313, i8* %3314, align 1, !tbaa !2449
  %3315 = lshr i64 %3286, 63
  %3316 = lshr i64 %3287, 63
  %3317 = xor i64 %3312, %3315
  %3318 = xor i64 %3312, %3316
  %3319 = add nuw nsw i64 %3317, %3318
  %3320 = icmp eq i64 %3319, 2
  %3321 = zext i1 %3320 to i8
  %3322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3321, i8* %3322, align 1, !tbaa !2450
  %3323 = load i64, i64* %RBP
  %3324 = sub i64 %3323, 48
  %3325 = load i64, i64* %PC
  %3326 = add i64 %3325, 4
  store i64 %3326, i64* %PC
  %3327 = inttoptr i64 %3324 to i32*
  %3328 = load i32, i32* %3327
  %3329 = sext i32 %3328 to i64
  store i64 %3329, i64* %RCX, align 8, !tbaa !2428
  %3330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3331 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3332 = load i64, i64* %RAX
  %3333 = load i64, i64* %RCX
  %3334 = mul i64 %3333, 8
  %3335 = add i64 %3334, %3332
  %3336 = load i64, i64* %PC
  %3337 = add i64 %3336, 5
  store i64 %3337, i64* %PC
  %3338 = bitcast i8* %3331 to double*
  %3339 = load double, double* %3338, align 1
  %3340 = getelementptr inbounds i8, i8* %3331, i64 8
  %3341 = bitcast i8* %3340 to i64*
  %3342 = load i64, i64* %3341, align 1
  %3343 = inttoptr i64 %3335 to double*
  %3344 = load double, double* %3343
  %3345 = fsub double %3339, %3344
  %3346 = bitcast i8* %3330 to double*
  store double %3345, double* %3346, align 1, !tbaa !2452
  %3347 = getelementptr inbounds i8, i8* %3330, i64 8
  %3348 = bitcast i8* %3347 to i64*
  store i64 %3342, i64* %3348, align 1, !tbaa !2452
  %3349 = load i64, i64* %RBP
  %3350 = sub i64 %3349, 96
  %3351 = load i64, i64* %PC
  %3352 = add i64 %3351, 4
  store i64 %3352, i64* %PC
  %3353 = inttoptr i64 %3350 to i64*
  %3354 = load i64, i64* %3353
  store i64 %3354, i64* %RAX, align 8, !tbaa !2428
  %3355 = load i64, i64* %RBP
  %3356 = sub i64 %3355, 100
  %3357 = load i64, i64* %PC
  %3358 = add i64 %3357, 4
  store i64 %3358, i64* %PC
  %3359 = inttoptr i64 %3356 to i32*
  %3360 = load i32, i32* %3359
  %3361 = sext i32 %3360 to i64
  store i64 %3361, i64* %RCX, align 8, !tbaa !2428
  %3362 = load i64, i64* %RCX
  %3363 = load i64, i64* %PC
  %3364 = add i64 %3363, 7
  store i64 %3364, i64* %PC
  %3365 = sext i64 %3362 to i128
  %3366 = and i128 %3365, -18446744073709551616
  %3367 = zext i64 %3362 to i128
  %3368 = or i128 %3366, %3367
  %3369 = mul nsw i128 520, %3368
  %3370 = trunc i128 %3369 to i64
  store i64 %3370, i64* %RCX, align 8, !tbaa !2428
  %3371 = sext i64 %3370 to i128
  %3372 = icmp ne i128 %3371, %3369
  %3373 = zext i1 %3372 to i8
  %3374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3373, i8* %3374, align 1, !tbaa !2432
  %3375 = trunc i128 %3369 to i32
  %3376 = and i32 %3375, 255
  %3377 = call i32 @llvm.ctpop.i32(i32 %3376) #16
  %3378 = trunc i32 %3377 to i8
  %3379 = and i8 %3378, 1
  %3380 = xor i8 %3379, 1
  %3381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3380, i8* %3381, align 1, !tbaa !2446
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3382, align 1, !tbaa !2447
  %3383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3383, align 1, !tbaa !2448
  %3384 = lshr i64 %3370, 63
  %3385 = trunc i64 %3384 to i8
  %3386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3385, i8* %3386, align 1, !tbaa !2449
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3373, i8* %3387, align 1, !tbaa !2450
  %3388 = load i64, i64* %RAX
  %3389 = load i64, i64* %RCX
  %3390 = load i64, i64* %PC
  %3391 = add i64 %3390, 3
  store i64 %3391, i64* %PC
  %3392 = add i64 %3389, %3388
  store i64 %3392, i64* %RAX, align 8, !tbaa !2428
  %3393 = icmp ult i64 %3392, %3388
  %3394 = icmp ult i64 %3392, %3389
  %3395 = or i1 %3393, %3394
  %3396 = zext i1 %3395 to i8
  %3397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3396, i8* %3397, align 1, !tbaa !2432
  %3398 = trunc i64 %3392 to i32
  %3399 = and i32 %3398, 255
  %3400 = call i32 @llvm.ctpop.i32(i32 %3399) #16
  %3401 = trunc i32 %3400 to i8
  %3402 = and i8 %3401, 1
  %3403 = xor i8 %3402, 1
  %3404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3403, i8* %3404, align 1, !tbaa !2446
  %3405 = xor i64 %3389, %3388
  %3406 = xor i64 %3405, %3392
  %3407 = lshr i64 %3406, 4
  %3408 = trunc i64 %3407 to i8
  %3409 = and i8 %3408, 1
  %3410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3409, i8* %3410, align 1, !tbaa !2447
  %3411 = icmp eq i64 %3392, 0
  %3412 = zext i1 %3411 to i8
  %3413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3412, i8* %3413, align 1, !tbaa !2448
  %3414 = lshr i64 %3392, 63
  %3415 = trunc i64 %3414 to i8
  %3416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3415, i8* %3416, align 1, !tbaa !2449
  %3417 = lshr i64 %3388, 63
  %3418 = lshr i64 %3389, 63
  %3419 = xor i64 %3414, %3417
  %3420 = xor i64 %3414, %3418
  %3421 = add nuw nsw i64 %3419, %3420
  %3422 = icmp eq i64 %3421, 2
  %3423 = zext i1 %3422 to i8
  %3424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3423, i8* %3424, align 1, !tbaa !2450
  %3425 = load i64, i64* %RBP
  %3426 = sub i64 %3425, 104
  %3427 = load i64, i64* %PC
  %3428 = add i64 %3427, 4
  store i64 %3428, i64* %PC
  %3429 = inttoptr i64 %3426 to i32*
  %3430 = load i32, i32* %3429
  %3431 = sext i32 %3430 to i64
  store i64 %3431, i64* %RCX, align 8, !tbaa !2428
  %3432 = load i64, i64* %RAX
  %3433 = load i64, i64* %RCX
  %3434 = mul i64 %3433, 8
  %3435 = add i64 %3434, %3432
  %3436 = bitcast %union.vec128_t* %XMM0 to i8*
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 5
  store i64 %3438, i64* %PC
  %3439 = bitcast i8* %3436 to double*
  %3440 = load double, double* %3439, align 1
  %3441 = inttoptr i64 %3435 to double*
  store double %3440, double* %3441
  %3442 = load i64, i64* %RBP
  %3443 = add i64 %3442, 88
  %3444 = load i64, i64* %PC
  %3445 = add i64 %3444, 4
  store i64 %3445, i64* %PC
  %3446 = inttoptr i64 %3443 to i64*
  %3447 = load i64, i64* %3446
  store i64 %3447, i64* %RAX, align 8, !tbaa !2428
  %3448 = load i64, i64* %RBP
  %3449 = sub i64 %3448, 52
  %3450 = load i64, i64* %PC
  %3451 = add i64 %3450, 4
  store i64 %3451, i64* %PC
  %3452 = inttoptr i64 %3449 to i32*
  %3453 = load i32, i32* %3452
  %3454 = sext i32 %3453 to i64
  store i64 %3454, i64* %RCX, align 8, !tbaa !2428
  %3455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3456 = load i64, i64* %RAX
  %3457 = load i64, i64* %RCX
  %3458 = mul i64 %3457, 8
  %3459 = add i64 %3458, %3456
  %3460 = load i64, i64* %PC
  %3461 = add i64 %3460, 5
  store i64 %3461, i64* %PC
  %3462 = inttoptr i64 %3459 to double*
  %3463 = load double, double* %3462
  %3464 = bitcast i8* %3455 to double*
  store double %3463, double* %3464, align 1, !tbaa !2452
  %3465 = getelementptr inbounds i8, i8* %3455, i64 8
  %3466 = bitcast i8* %3465 to double*
  store double 0.000000e+00, double* %3466, align 1, !tbaa !2452
  %3467 = load i64, i64* %RBP
  %3468 = add i64 %3467, 96
  %3469 = load i64, i64* %PC
  %3470 = add i64 %3469, 4
  store i64 %3470, i64* %PC
  %3471 = inttoptr i64 %3468 to i64*
  %3472 = load i64, i64* %3471
  store i64 %3472, i64* %RAX, align 8, !tbaa !2428
  %3473 = load i64, i64* %RBP
  %3474 = sub i64 %3473, 52
  %3475 = load i64, i64* %PC
  %3476 = add i64 %3475, 4
  store i64 %3476, i64* %PC
  %3477 = inttoptr i64 %3474 to i32*
  %3478 = load i32, i32* %3477
  %3479 = sext i32 %3478 to i64
  store i64 %3479, i64* %RCX, align 8, !tbaa !2428
  %3480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3481 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3482 = load i64, i64* %RAX
  %3483 = load i64, i64* %RCX
  %3484 = mul i64 %3483, 8
  %3485 = add i64 %3484, %3482
  %3486 = load i64, i64* %PC
  %3487 = add i64 %3486, 5
  store i64 %3487, i64* %PC
  %3488 = bitcast i8* %3481 to double*
  %3489 = load double, double* %3488, align 1
  %3490 = getelementptr inbounds i8, i8* %3481, i64 8
  %3491 = bitcast i8* %3490 to i64*
  %3492 = load i64, i64* %3491, align 1
  %3493 = inttoptr i64 %3485 to double*
  %3494 = load double, double* %3493
  %3495 = fdiv double %3489, %3494
  %3496 = bitcast i8* %3480 to double*
  store double %3495, double* %3496, align 1, !tbaa !2452
  %3497 = getelementptr inbounds i8, i8* %3480, i64 8
  %3498 = bitcast i8* %3497 to i64*
  store i64 %3492, i64* %3498, align 1, !tbaa !2452
  %3499 = load i64, i64* %RBP
  %3500 = add i64 %3499, 24
  %3501 = load i64, i64* %PC
  %3502 = add i64 %3501, 4
  store i64 %3502, i64* %PC
  %3503 = inttoptr i64 %3500 to i64*
  %3504 = load i64, i64* %3503
  store i64 %3504, i64* %RAX, align 8, !tbaa !2428
  %3505 = load i64, i64* %RBP
  %3506 = sub i64 %3505, 100
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 4
  store i64 %3508, i64* %PC
  %3509 = inttoptr i64 %3506 to i32*
  %3510 = load i32, i32* %3509
  %3511 = sext i32 %3510 to i64
  store i64 %3511, i64* %RCX, align 8, !tbaa !2428
  %3512 = load i64, i64* %RCX
  %3513 = load i64, i64* %PC
  %3514 = add i64 %3513, 7
  store i64 %3514, i64* %PC
  %3515 = sext i64 %3512 to i128
  %3516 = and i128 %3515, -18446744073709551616
  %3517 = zext i64 %3512 to i128
  %3518 = or i128 %3516, %3517
  %3519 = mul nsw i128 33800, %3518
  %3520 = trunc i128 %3519 to i64
  store i64 %3520, i64* %RCX, align 8, !tbaa !2428
  %3521 = sext i64 %3520 to i128
  %3522 = icmp ne i128 %3521, %3519
  %3523 = zext i1 %3522 to i8
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3523, i8* %3524, align 1, !tbaa !2432
  %3525 = trunc i128 %3519 to i32
  %3526 = and i32 %3525, 255
  %3527 = call i32 @llvm.ctpop.i32(i32 %3526) #16
  %3528 = trunc i32 %3527 to i8
  %3529 = and i8 %3528, 1
  %3530 = xor i8 %3529, 1
  %3531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3530, i8* %3531, align 1, !tbaa !2446
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3532, align 1, !tbaa !2447
  %3533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3533, align 1, !tbaa !2448
  %3534 = lshr i64 %3520, 63
  %3535 = trunc i64 %3534 to i8
  %3536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3535, i8* %3536, align 1, !tbaa !2449
  %3537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3523, i8* %3537, align 1, !tbaa !2450
  %3538 = load i64, i64* %RAX
  %3539 = load i64, i64* %RCX
  %3540 = load i64, i64* %PC
  %3541 = add i64 %3540, 3
  store i64 %3541, i64* %PC
  %3542 = add i64 %3539, %3538
  store i64 %3542, i64* %RAX, align 8, !tbaa !2428
  %3543 = icmp ult i64 %3542, %3538
  %3544 = icmp ult i64 %3542, %3539
  %3545 = or i1 %3543, %3544
  %3546 = zext i1 %3545 to i8
  %3547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3546, i8* %3547, align 1, !tbaa !2432
  %3548 = trunc i64 %3542 to i32
  %3549 = and i32 %3548, 255
  %3550 = call i32 @llvm.ctpop.i32(i32 %3549) #16
  %3551 = trunc i32 %3550 to i8
  %3552 = and i8 %3551, 1
  %3553 = xor i8 %3552, 1
  %3554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3553, i8* %3554, align 1, !tbaa !2446
  %3555 = xor i64 %3539, %3538
  %3556 = xor i64 %3555, %3542
  %3557 = lshr i64 %3556, 4
  %3558 = trunc i64 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3559, i8* %3560, align 1, !tbaa !2447
  %3561 = icmp eq i64 %3542, 0
  %3562 = zext i1 %3561 to i8
  %3563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3562, i8* %3563, align 1, !tbaa !2448
  %3564 = lshr i64 %3542, 63
  %3565 = trunc i64 %3564 to i8
  %3566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3565, i8* %3566, align 1, !tbaa !2449
  %3567 = lshr i64 %3538, 63
  %3568 = lshr i64 %3539, 63
  %3569 = xor i64 %3564, %3567
  %3570 = xor i64 %3564, %3568
  %3571 = add nuw nsw i64 %3569, %3570
  %3572 = icmp eq i64 %3571, 2
  %3573 = zext i1 %3572 to i8
  %3574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3573, i8* %3574, align 1, !tbaa !2450
  %3575 = load i64, i64* %RBP
  %3576 = sub i64 %3575, 52
  %3577 = load i64, i64* %PC
  %3578 = add i64 %3577, 4
  store i64 %3578, i64* %PC
  %3579 = inttoptr i64 %3576 to i32*
  %3580 = load i32, i32* %3579
  %3581 = sext i32 %3580 to i64
  store i64 %3581, i64* %RCX, align 8, !tbaa !2428
  %3582 = load i64, i64* %RCX
  %3583 = load i64, i64* %PC
  %3584 = add i64 %3583, 7
  store i64 %3584, i64* %PC
  %3585 = sext i64 %3582 to i128
  %3586 = and i128 %3585, -18446744073709551616
  %3587 = zext i64 %3582 to i128
  %3588 = or i128 %3586, %3587
  %3589 = mul nsw i128 520, %3588
  %3590 = trunc i128 %3589 to i64
  store i64 %3590, i64* %RCX, align 8, !tbaa !2428
  %3591 = sext i64 %3590 to i128
  %3592 = icmp ne i128 %3591, %3589
  %3593 = zext i1 %3592 to i8
  %3594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3593, i8* %3594, align 1, !tbaa !2432
  %3595 = trunc i128 %3589 to i32
  %3596 = and i32 %3595, 255
  %3597 = call i32 @llvm.ctpop.i32(i32 %3596) #16
  %3598 = trunc i32 %3597 to i8
  %3599 = and i8 %3598, 1
  %3600 = xor i8 %3599, 1
  %3601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3600, i8* %3601, align 1, !tbaa !2446
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3602, align 1, !tbaa !2447
  %3603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3603, align 1, !tbaa !2448
  %3604 = lshr i64 %3590, 63
  %3605 = trunc i64 %3604 to i8
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3605, i8* %3606, align 1, !tbaa !2449
  %3607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3593, i8* %3607, align 1, !tbaa !2450
  %3608 = load i64, i64* %RAX
  %3609 = load i64, i64* %RCX
  %3610 = load i64, i64* %PC
  %3611 = add i64 %3610, 3
  store i64 %3611, i64* %PC
  %3612 = add i64 %3609, %3608
  store i64 %3612, i64* %RAX, align 8, !tbaa !2428
  %3613 = icmp ult i64 %3612, %3608
  %3614 = icmp ult i64 %3612, %3609
  %3615 = or i1 %3613, %3614
  %3616 = zext i1 %3615 to i8
  %3617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3616, i8* %3617, align 1, !tbaa !2432
  %3618 = trunc i64 %3612 to i32
  %3619 = and i32 %3618, 255
  %3620 = call i32 @llvm.ctpop.i32(i32 %3619) #16
  %3621 = trunc i32 %3620 to i8
  %3622 = and i8 %3621, 1
  %3623 = xor i8 %3622, 1
  %3624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3623, i8* %3624, align 1, !tbaa !2446
  %3625 = xor i64 %3609, %3608
  %3626 = xor i64 %3625, %3612
  %3627 = lshr i64 %3626, 4
  %3628 = trunc i64 %3627 to i8
  %3629 = and i8 %3628, 1
  %3630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3629, i8* %3630, align 1, !tbaa !2447
  %3631 = icmp eq i64 %3612, 0
  %3632 = zext i1 %3631 to i8
  %3633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3632, i8* %3633, align 1, !tbaa !2448
  %3634 = lshr i64 %3612, 63
  %3635 = trunc i64 %3634 to i8
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3635, i8* %3636, align 1, !tbaa !2449
  %3637 = lshr i64 %3608, 63
  %3638 = lshr i64 %3609, 63
  %3639 = xor i64 %3634, %3637
  %3640 = xor i64 %3634, %3638
  %3641 = add nuw nsw i64 %3639, %3640
  %3642 = icmp eq i64 %3641, 2
  %3643 = zext i1 %3642 to i8
  %3644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3643, i8* %3644, align 1, !tbaa !2450
  %3645 = load i64, i64* %RBP
  %3646 = sub i64 %3645, 48
  %3647 = load i64, i64* %PC
  %3648 = add i64 %3647, 4
  store i64 %3648, i64* %PC
  %3649 = inttoptr i64 %3646 to i32*
  %3650 = load i32, i32* %3649
  %3651 = sext i32 %3650 to i64
  store i64 %3651, i64* %RCX, align 8, !tbaa !2428
  %3652 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3653 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3654 = load i64, i64* %RAX
  %3655 = load i64, i64* %RCX
  %3656 = mul i64 %3655, 8
  %3657 = add i64 %3656, %3654
  %3658 = load i64, i64* %PC
  %3659 = add i64 %3658, 5
  store i64 %3659, i64* %PC
  %3660 = bitcast i8* %3653 to double*
  %3661 = load double, double* %3660, align 1
  %3662 = getelementptr inbounds i8, i8* %3653, i64 8
  %3663 = bitcast i8* %3662 to i64*
  %3664 = load i64, i64* %3663, align 1
  %3665 = inttoptr i64 %3657 to double*
  %3666 = load double, double* %3665
  %3667 = fmul double %3661, %3666
  %3668 = bitcast i8* %3652 to double*
  store double %3667, double* %3668, align 1, !tbaa !2452
  %3669 = getelementptr inbounds i8, i8* %3652, i64 8
  %3670 = bitcast i8* %3669 to i64*
  store i64 %3664, i64* %3670, align 1, !tbaa !2452
  %3671 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3672 = load i64, i64* %RBP
  %3673 = sub i64 %3672, 72
  %3674 = load i64, i64* %PC
  %3675 = add i64 %3674, 5
  store i64 %3675, i64* %PC
  %3676 = inttoptr i64 %3673 to double*
  %3677 = load double, double* %3676
  %3678 = bitcast i8* %3671 to double*
  store double %3677, double* %3678, align 1, !tbaa !2452
  %3679 = getelementptr inbounds i8, i8* %3671, i64 8
  %3680 = bitcast i8* %3679 to double*
  store double 0.000000e+00, double* %3680, align 1, !tbaa !2452
  %3681 = load i64, i64* %RBP
  %3682 = add i64 %3681, 96
  %3683 = load i64, i64* %PC
  %3684 = add i64 %3683, 4
  store i64 %3684, i64* %PC
  %3685 = inttoptr i64 %3682 to i64*
  %3686 = load i64, i64* %3685
  store i64 %3686, i64* %RAX, align 8, !tbaa !2428
  %3687 = load i64, i64* %RBP
  %3688 = sub i64 %3687, 52
  %3689 = load i64, i64* %PC
  %3690 = add i64 %3689, 4
  store i64 %3690, i64* %PC
  %3691 = inttoptr i64 %3688 to i32*
  %3692 = load i32, i32* %3691
  %3693 = sext i32 %3692 to i64
  store i64 %3693, i64* %RCX, align 8, !tbaa !2428
  %3694 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3695 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3696 = load i64, i64* %RAX
  %3697 = load i64, i64* %RCX
  %3698 = mul i64 %3697, 8
  %3699 = add i64 %3698, %3696
  %3700 = load i64, i64* %PC
  %3701 = add i64 %3700, 5
  store i64 %3701, i64* %PC
  %3702 = bitcast i8* %3695 to double*
  %3703 = load double, double* %3702, align 1
  %3704 = getelementptr inbounds i8, i8* %3695, i64 8
  %3705 = bitcast i8* %3704 to i64*
  %3706 = load i64, i64* %3705, align 1
  %3707 = inttoptr i64 %3699 to double*
  %3708 = load double, double* %3707
  %3709 = fdiv double %3703, %3708
  %3710 = bitcast i8* %3694 to double*
  store double %3709, double* %3710, align 1, !tbaa !2452
  %3711 = getelementptr inbounds i8, i8* %3694, i64 8
  %3712 = bitcast i8* %3711 to i64*
  store i64 %3706, i64* %3712, align 1, !tbaa !2452
  %3713 = load i64, i64* %RBP
  %3714 = sub i64 %3713, 96
  %3715 = load i64, i64* %PC
  %3716 = add i64 %3715, 4
  store i64 %3716, i64* %PC
  %3717 = inttoptr i64 %3714 to i64*
  %3718 = load i64, i64* %3717
  store i64 %3718, i64* %RAX, align 8, !tbaa !2428
  %3719 = load i64, i64* %RBP
  %3720 = sub i64 %3719, 100
  %3721 = load i64, i64* %PC
  %3722 = add i64 %3721, 4
  store i64 %3722, i64* %PC
  %3723 = inttoptr i64 %3720 to i32*
  %3724 = load i32, i32* %3723
  %3725 = sext i32 %3724 to i64
  store i64 %3725, i64* %RCX, align 8, !tbaa !2428
  %3726 = load i64, i64* %RCX
  %3727 = load i64, i64* %PC
  %3728 = add i64 %3727, 7
  store i64 %3728, i64* %PC
  %3729 = sext i64 %3726 to i128
  %3730 = and i128 %3729, -18446744073709551616
  %3731 = zext i64 %3726 to i128
  %3732 = or i128 %3730, %3731
  %3733 = mul nsw i128 520, %3732
  %3734 = trunc i128 %3733 to i64
  store i64 %3734, i64* %RCX, align 8, !tbaa !2428
  %3735 = sext i64 %3734 to i128
  %3736 = icmp ne i128 %3735, %3733
  %3737 = zext i1 %3736 to i8
  %3738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3737, i8* %3738, align 1, !tbaa !2432
  %3739 = trunc i128 %3733 to i32
  %3740 = and i32 %3739, 255
  %3741 = call i32 @llvm.ctpop.i32(i32 %3740) #16
  %3742 = trunc i32 %3741 to i8
  %3743 = and i8 %3742, 1
  %3744 = xor i8 %3743, 1
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3744, i8* %3745, align 1, !tbaa !2446
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3746, align 1, !tbaa !2447
  %3747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3747, align 1, !tbaa !2448
  %3748 = lshr i64 %3734, 63
  %3749 = trunc i64 %3748 to i8
  %3750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3749, i8* %3750, align 1, !tbaa !2449
  %3751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3737, i8* %3751, align 1, !tbaa !2450
  %3752 = load i64, i64* %RAX
  %3753 = load i64, i64* %RCX
  %3754 = load i64, i64* %PC
  %3755 = add i64 %3754, 3
  store i64 %3755, i64* %PC
  %3756 = add i64 %3753, %3752
  store i64 %3756, i64* %RAX, align 8, !tbaa !2428
  %3757 = icmp ult i64 %3756, %3752
  %3758 = icmp ult i64 %3756, %3753
  %3759 = or i1 %3757, %3758
  %3760 = zext i1 %3759 to i8
  %3761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3760, i8* %3761, align 1, !tbaa !2432
  %3762 = trunc i64 %3756 to i32
  %3763 = and i32 %3762, 255
  %3764 = call i32 @llvm.ctpop.i32(i32 %3763) #16
  %3765 = trunc i32 %3764 to i8
  %3766 = and i8 %3765, 1
  %3767 = xor i8 %3766, 1
  %3768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3767, i8* %3768, align 1, !tbaa !2446
  %3769 = xor i64 %3753, %3752
  %3770 = xor i64 %3769, %3756
  %3771 = lshr i64 %3770, 4
  %3772 = trunc i64 %3771 to i8
  %3773 = and i8 %3772, 1
  %3774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3773, i8* %3774, align 1, !tbaa !2447
  %3775 = icmp eq i64 %3756, 0
  %3776 = zext i1 %3775 to i8
  %3777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3776, i8* %3777, align 1, !tbaa !2448
  %3778 = lshr i64 %3756, 63
  %3779 = trunc i64 %3778 to i8
  %3780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3779, i8* %3780, align 1, !tbaa !2449
  %3781 = lshr i64 %3752, 63
  %3782 = lshr i64 %3753, 63
  %3783 = xor i64 %3778, %3781
  %3784 = xor i64 %3778, %3782
  %3785 = add nuw nsw i64 %3783, %3784
  %3786 = icmp eq i64 %3785, 2
  %3787 = zext i1 %3786 to i8
  %3788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3787, i8* %3788, align 1, !tbaa !2450
  %3789 = load i64, i64* %RBP
  %3790 = sub i64 %3789, 104
  %3791 = load i64, i64* %PC
  %3792 = add i64 %3791, 4
  store i64 %3792, i64* %PC
  %3793 = inttoptr i64 %3790 to i32*
  %3794 = load i32, i32* %3793
  %3795 = sext i32 %3794 to i64
  store i64 %3795, i64* %RCX, align 8, !tbaa !2428
  %3796 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3797 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3798 = load i64, i64* %RAX
  %3799 = load i64, i64* %RCX
  %3800 = mul i64 %3799, 8
  %3801 = add i64 %3800, %3798
  %3802 = load i64, i64* %PC
  %3803 = add i64 %3802, 5
  store i64 %3803, i64* %PC
  %3804 = bitcast i8* %3797 to double*
  %3805 = load double, double* %3804, align 1
  %3806 = getelementptr inbounds i8, i8* %3797, i64 8
  %3807 = bitcast i8* %3806 to i64*
  %3808 = load i64, i64* %3807, align 1
  %3809 = inttoptr i64 %3801 to double*
  %3810 = load double, double* %3809
  %3811 = fmul double %3805, %3810
  %3812 = bitcast i8* %3796 to double*
  store double %3811, double* %3812, align 1, !tbaa !2452
  %3813 = getelementptr inbounds i8, i8* %3796, i64 8
  %3814 = bitcast i8* %3813 to i64*
  store i64 %3808, i64* %3814, align 1, !tbaa !2452
  %3815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3816 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3817 = bitcast %union.vec128_t* %XMM1 to i8*
  %3818 = load i64, i64* %PC
  %3819 = add i64 %3818, 4
  store i64 %3819, i64* %PC
  %3820 = bitcast i8* %3816 to double*
  %3821 = load double, double* %3820, align 1
  %3822 = getelementptr inbounds i8, i8* %3816, i64 8
  %3823 = bitcast i8* %3822 to i64*
  %3824 = load i64, i64* %3823, align 1
  %3825 = bitcast i8* %3817 to double*
  %3826 = load double, double* %3825, align 1
  %3827 = fsub double %3821, %3826
  %3828 = bitcast i8* %3815 to double*
  store double %3827, double* %3828, align 1, !tbaa !2452
  %3829 = getelementptr inbounds i8, i8* %3815, i64 8
  %3830 = bitcast i8* %3829 to i64*
  store i64 %3824, i64* %3830, align 1, !tbaa !2452
  %3831 = load i64, i64* %RBP
  %3832 = add i64 %3831, 16
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 4
  store i64 %3834, i64* %PC
  %3835 = inttoptr i64 %3832 to i64*
  %3836 = load i64, i64* %3835
  store i64 %3836, i64* %RAX, align 8, !tbaa !2428
  %3837 = load i64, i64* %RBP
  %3838 = sub i64 %3837, 100
  %3839 = load i64, i64* %PC
  %3840 = add i64 %3839, 4
  store i64 %3840, i64* %PC
  %3841 = inttoptr i64 %3838 to i32*
  %3842 = load i32, i32* %3841
  %3843 = sext i32 %3842 to i64
  store i64 %3843, i64* %RCX, align 8, !tbaa !2428
  %3844 = load i64, i64* %RCX
  %3845 = load i64, i64* %PC
  %3846 = add i64 %3845, 7
  store i64 %3846, i64* %PC
  %3847 = sext i64 %3844 to i128
  %3848 = and i128 %3847, -18446744073709551616
  %3849 = zext i64 %3844 to i128
  %3850 = or i128 %3848, %3849
  %3851 = mul nsw i128 520, %3850
  %3852 = trunc i128 %3851 to i64
  store i64 %3852, i64* %RCX, align 8, !tbaa !2428
  %3853 = sext i64 %3852 to i128
  %3854 = icmp ne i128 %3853, %3851
  %3855 = zext i1 %3854 to i8
  %3856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3855, i8* %3856, align 1, !tbaa !2432
  %3857 = trunc i128 %3851 to i32
  %3858 = and i32 %3857, 255
  %3859 = call i32 @llvm.ctpop.i32(i32 %3858) #16
  %3860 = trunc i32 %3859 to i8
  %3861 = and i8 %3860, 1
  %3862 = xor i8 %3861, 1
  %3863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3862, i8* %3863, align 1, !tbaa !2446
  %3864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3864, align 1, !tbaa !2447
  %3865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3865, align 1, !tbaa !2448
  %3866 = lshr i64 %3852, 63
  %3867 = trunc i64 %3866 to i8
  %3868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3867, i8* %3868, align 1, !tbaa !2449
  %3869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3855, i8* %3869, align 1, !tbaa !2450
  %3870 = load i64, i64* %RAX
  %3871 = load i64, i64* %RCX
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 3
  store i64 %3873, i64* %PC
  %3874 = add i64 %3871, %3870
  store i64 %3874, i64* %RAX, align 8, !tbaa !2428
  %3875 = icmp ult i64 %3874, %3870
  %3876 = icmp ult i64 %3874, %3871
  %3877 = or i1 %3875, %3876
  %3878 = zext i1 %3877 to i8
  %3879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3878, i8* %3879, align 1, !tbaa !2432
  %3880 = trunc i64 %3874 to i32
  %3881 = and i32 %3880, 255
  %3882 = call i32 @llvm.ctpop.i32(i32 %3881) #16
  %3883 = trunc i32 %3882 to i8
  %3884 = and i8 %3883, 1
  %3885 = xor i8 %3884, 1
  %3886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3885, i8* %3886, align 1, !tbaa !2446
  %3887 = xor i64 %3871, %3870
  %3888 = xor i64 %3887, %3874
  %3889 = lshr i64 %3888, 4
  %3890 = trunc i64 %3889 to i8
  %3891 = and i8 %3890, 1
  %3892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3891, i8* %3892, align 1, !tbaa !2447
  %3893 = icmp eq i64 %3874, 0
  %3894 = zext i1 %3893 to i8
  %3895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3894, i8* %3895, align 1, !tbaa !2448
  %3896 = lshr i64 %3874, 63
  %3897 = trunc i64 %3896 to i8
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3897, i8* %3898, align 1, !tbaa !2449
  %3899 = lshr i64 %3870, 63
  %3900 = lshr i64 %3871, 63
  %3901 = xor i64 %3896, %3899
  %3902 = xor i64 %3896, %3900
  %3903 = add nuw nsw i64 %3901, %3902
  %3904 = icmp eq i64 %3903, 2
  %3905 = zext i1 %3904 to i8
  %3906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3905, i8* %3906, align 1, !tbaa !2450
  %3907 = load i64, i64* %RBP
  %3908 = sub i64 %3907, 104
  %3909 = load i64, i64* %PC
  %3910 = add i64 %3909, 4
  store i64 %3910, i64* %PC
  %3911 = inttoptr i64 %3908 to i32*
  %3912 = load i32, i32* %3911
  %3913 = sext i32 %3912 to i64
  store i64 %3913, i64* %RCX, align 8, !tbaa !2428
  %3914 = load i64, i64* %RAX
  %3915 = load i64, i64* %RCX
  %3916 = mul i64 %3915, 8
  %3917 = add i64 %3916, %3914
  %3918 = bitcast %union.vec128_t* %XMM0 to i8*
  %3919 = load i64, i64* %PC
  %3920 = add i64 %3919, 5
  store i64 %3920, i64* %PC
  %3921 = bitcast i8* %3918 to double*
  %3922 = load double, double* %3921, align 1
  %3923 = inttoptr i64 %3917 to double*
  store double %3922, double* %3923
  %3924 = load i64, i64* %RBP
  %3925 = add i64 %3924, 72
  %3926 = load i64, i64* %PC
  %3927 = add i64 %3926, 4
  store i64 %3927, i64* %PC
  %3928 = inttoptr i64 %3925 to i64*
  %3929 = load i64, i64* %3928
  store i64 %3929, i64* %RAX, align 8, !tbaa !2428
  %3930 = load i64, i64* %RBP
  %3931 = sub i64 %3930, 48
  %3932 = load i64, i64* %PC
  %3933 = add i64 %3932, 4
  store i64 %3933, i64* %PC
  %3934 = inttoptr i64 %3931 to i32*
  %3935 = load i32, i32* %3934
  %3936 = sext i32 %3935 to i64
  store i64 %3936, i64* %RCX, align 8, !tbaa !2428
  %3937 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3938 = load i64, i64* %RAX
  %3939 = load i64, i64* %RCX
  %3940 = mul i64 %3939, 8
  %3941 = add i64 %3940, %3938
  %3942 = load i64, i64* %PC
  %3943 = add i64 %3942, 5
  store i64 %3943, i64* %PC
  %3944 = inttoptr i64 %3941 to double*
  %3945 = load double, double* %3944
  %3946 = bitcast i8* %3937 to double*
  store double %3945, double* %3946, align 1, !tbaa !2452
  %3947 = getelementptr inbounds i8, i8* %3937, i64 8
  %3948 = bitcast i8* %3947 to double*
  store double 0.000000e+00, double* %3948, align 1, !tbaa !2452
  %3949 = load i64, i64* %RBP
  %3950 = add i64 %3949, 80
  %3951 = load i64, i64* %PC
  %3952 = add i64 %3951, 4
  store i64 %3952, i64* %PC
  %3953 = inttoptr i64 %3950 to i64*
  %3954 = load i64, i64* %3953
  store i64 %3954, i64* %RAX, align 8, !tbaa !2428
  %3955 = load i64, i64* %RBP
  %3956 = sub i64 %3955, 48
  %3957 = load i64, i64* %PC
  %3958 = add i64 %3957, 4
  store i64 %3958, i64* %PC
  %3959 = inttoptr i64 %3956 to i32*
  %3960 = load i32, i32* %3959
  %3961 = sext i32 %3960 to i64
  store i64 %3961, i64* %RCX, align 8, !tbaa !2428
  %3962 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3963 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3964 = load i64, i64* %RAX
  %3965 = load i64, i64* %RCX
  %3966 = mul i64 %3965, 8
  %3967 = add i64 %3966, %3964
  %3968 = load i64, i64* %PC
  %3969 = add i64 %3968, 5
  store i64 %3969, i64* %PC
  %3970 = bitcast i8* %3963 to double*
  %3971 = load double, double* %3970, align 1
  %3972 = getelementptr inbounds i8, i8* %3963, i64 8
  %3973 = bitcast i8* %3972 to i64*
  %3974 = load i64, i64* %3973, align 1
  %3975 = inttoptr i64 %3967 to double*
  %3976 = load double, double* %3975
  %3977 = fdiv double %3971, %3976
  %3978 = bitcast i8* %3962 to double*
  store double %3977, double* %3978, align 1, !tbaa !2452
  %3979 = getelementptr inbounds i8, i8* %3962, i64 8
  %3980 = bitcast i8* %3979 to i64*
  store i64 %3974, i64* %3980, align 1, !tbaa !2452
  %3981 = load i64, i64* %RBP
  %3982 = add i64 %3981, 48
  %3983 = load i64, i64* %PC
  %3984 = add i64 %3983, 4
  store i64 %3984, i64* %PC
  %3985 = inttoptr i64 %3982 to i64*
  %3986 = load i64, i64* %3985
  store i64 %3986, i64* %RAX, align 8, !tbaa !2428
  %3987 = load i64, i64* %RBP
  %3988 = sub i64 %3987, 100
  %3989 = load i64, i64* %PC
  %3990 = add i64 %3989, 4
  store i64 %3990, i64* %PC
  %3991 = inttoptr i64 %3988 to i32*
  %3992 = load i32, i32* %3991
  %3993 = sext i32 %3992 to i64
  store i64 %3993, i64* %RCX, align 8, !tbaa !2428
  %3994 = load i64, i64* %RCX
  %3995 = load i64, i64* %PC
  %3996 = add i64 %3995, 7
  store i64 %3996, i64* %PC
  %3997 = sext i64 %3994 to i128
  %3998 = and i128 %3997, -18446744073709551616
  %3999 = zext i64 %3994 to i128
  %4000 = or i128 %3998, %3999
  %4001 = mul nsw i128 33800, %4000
  %4002 = trunc i128 %4001 to i64
  store i64 %4002, i64* %RCX, align 8, !tbaa !2428
  %4003 = sext i64 %4002 to i128
  %4004 = icmp ne i128 %4003, %4001
  %4005 = zext i1 %4004 to i8
  %4006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4005, i8* %4006, align 1, !tbaa !2432
  %4007 = trunc i128 %4001 to i32
  %4008 = and i32 %4007, 255
  %4009 = call i32 @llvm.ctpop.i32(i32 %4008) #16
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  %4012 = xor i8 %4011, 1
  %4013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4012, i8* %4013, align 1, !tbaa !2446
  %4014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4014, align 1, !tbaa !2447
  %4015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4015, align 1, !tbaa !2448
  %4016 = lshr i64 %4002, 63
  %4017 = trunc i64 %4016 to i8
  %4018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4017, i8* %4018, align 1, !tbaa !2449
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4005, i8* %4019, align 1, !tbaa !2450
  %4020 = load i64, i64* %RAX
  %4021 = load i64, i64* %RCX
  %4022 = load i64, i64* %PC
  %4023 = add i64 %4022, 3
  store i64 %4023, i64* %PC
  %4024 = add i64 %4021, %4020
  store i64 %4024, i64* %RAX, align 8, !tbaa !2428
  %4025 = icmp ult i64 %4024, %4020
  %4026 = icmp ult i64 %4024, %4021
  %4027 = or i1 %4025, %4026
  %4028 = zext i1 %4027 to i8
  %4029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4028, i8* %4029, align 1, !tbaa !2432
  %4030 = trunc i64 %4024 to i32
  %4031 = and i32 %4030, 255
  %4032 = call i32 @llvm.ctpop.i32(i32 %4031) #16
  %4033 = trunc i32 %4032 to i8
  %4034 = and i8 %4033, 1
  %4035 = xor i8 %4034, 1
  %4036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4035, i8* %4036, align 1, !tbaa !2446
  %4037 = xor i64 %4021, %4020
  %4038 = xor i64 %4037, %4024
  %4039 = lshr i64 %4038, 4
  %4040 = trunc i64 %4039 to i8
  %4041 = and i8 %4040, 1
  %4042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4041, i8* %4042, align 1, !tbaa !2447
  %4043 = icmp eq i64 %4024, 0
  %4044 = zext i1 %4043 to i8
  %4045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4044, i8* %4045, align 1, !tbaa !2448
  %4046 = lshr i64 %4024, 63
  %4047 = trunc i64 %4046 to i8
  %4048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4047, i8* %4048, align 1, !tbaa !2449
  %4049 = lshr i64 %4020, 63
  %4050 = lshr i64 %4021, 63
  %4051 = xor i64 %4046, %4049
  %4052 = xor i64 %4046, %4050
  %4053 = add nuw nsw i64 %4051, %4052
  %4054 = icmp eq i64 %4053, 2
  %4055 = zext i1 %4054 to i8
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4055, i8* %4056, align 1, !tbaa !2450
  %4057 = load i64, i64* %RBP
  %4058 = sub i64 %4057, 52
  %4059 = load i64, i64* %PC
  %4060 = add i64 %4059, 4
  store i64 %4060, i64* %PC
  %4061 = inttoptr i64 %4058 to i32*
  %4062 = load i32, i32* %4061
  %4063 = sext i32 %4062 to i64
  store i64 %4063, i64* %RCX, align 8, !tbaa !2428
  %4064 = load i64, i64* %RCX
  %4065 = load i64, i64* %PC
  %4066 = add i64 %4065, 7
  store i64 %4066, i64* %PC
  %4067 = sext i64 %4064 to i128
  %4068 = and i128 %4067, -18446744073709551616
  %4069 = zext i64 %4064 to i128
  %4070 = or i128 %4068, %4069
  %4071 = mul nsw i128 520, %4070
  %4072 = trunc i128 %4071 to i64
  store i64 %4072, i64* %RCX, align 8, !tbaa !2428
  %4073 = sext i64 %4072 to i128
  %4074 = icmp ne i128 %4073, %4071
  %4075 = zext i1 %4074 to i8
  %4076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4075, i8* %4076, align 1, !tbaa !2432
  %4077 = trunc i128 %4071 to i32
  %4078 = and i32 %4077, 255
  %4079 = call i32 @llvm.ctpop.i32(i32 %4078) #16
  %4080 = trunc i32 %4079 to i8
  %4081 = and i8 %4080, 1
  %4082 = xor i8 %4081, 1
  %4083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4082, i8* %4083, align 1, !tbaa !2446
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4084, align 1, !tbaa !2447
  %4085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4085, align 1, !tbaa !2448
  %4086 = lshr i64 %4072, 63
  %4087 = trunc i64 %4086 to i8
  %4088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4087, i8* %4088, align 1, !tbaa !2449
  %4089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4075, i8* %4089, align 1, !tbaa !2450
  %4090 = load i64, i64* %RAX
  %4091 = load i64, i64* %RCX
  %4092 = load i64, i64* %PC
  %4093 = add i64 %4092, 3
  store i64 %4093, i64* %PC
  %4094 = add i64 %4091, %4090
  store i64 %4094, i64* %RAX, align 8, !tbaa !2428
  %4095 = icmp ult i64 %4094, %4090
  %4096 = icmp ult i64 %4094, %4091
  %4097 = or i1 %4095, %4096
  %4098 = zext i1 %4097 to i8
  %4099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4098, i8* %4099, align 1, !tbaa !2432
  %4100 = trunc i64 %4094 to i32
  %4101 = and i32 %4100, 255
  %4102 = call i32 @llvm.ctpop.i32(i32 %4101) #16
  %4103 = trunc i32 %4102 to i8
  %4104 = and i8 %4103, 1
  %4105 = xor i8 %4104, 1
  %4106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4105, i8* %4106, align 1, !tbaa !2446
  %4107 = xor i64 %4091, %4090
  %4108 = xor i64 %4107, %4094
  %4109 = lshr i64 %4108, 4
  %4110 = trunc i64 %4109 to i8
  %4111 = and i8 %4110, 1
  %4112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4111, i8* %4112, align 1, !tbaa !2447
  %4113 = icmp eq i64 %4094, 0
  %4114 = zext i1 %4113 to i8
  %4115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4114, i8* %4115, align 1, !tbaa !2448
  %4116 = lshr i64 %4094, 63
  %4117 = trunc i64 %4116 to i8
  %4118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4117, i8* %4118, align 1, !tbaa !2449
  %4119 = lshr i64 %4090, 63
  %4120 = lshr i64 %4091, 63
  %4121 = xor i64 %4116, %4119
  %4122 = xor i64 %4116, %4120
  %4123 = add nuw nsw i64 %4121, %4122
  %4124 = icmp eq i64 %4123, 2
  %4125 = zext i1 %4124 to i8
  %4126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4125, i8* %4126, align 1, !tbaa !2450
  %4127 = load i64, i64* %RBP
  %4128 = sub i64 %4127, 48
  %4129 = load i64, i64* %PC
  %4130 = add i64 %4129, 4
  store i64 %4130, i64* %PC
  %4131 = inttoptr i64 %4128 to i32*
  %4132 = load i32, i32* %4131
  %4133 = sext i32 %4132 to i64
  store i64 %4133, i64* %RCX, align 8, !tbaa !2428
  %4134 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4135 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4136 = load i64, i64* %RAX
  %4137 = load i64, i64* %RCX
  %4138 = mul i64 %4137, 8
  %4139 = add i64 %4138, %4136
  %4140 = load i64, i64* %PC
  %4141 = add i64 %4140, 5
  store i64 %4141, i64* %PC
  %4142 = bitcast i8* %4135 to double*
  %4143 = load double, double* %4142, align 1
  %4144 = getelementptr inbounds i8, i8* %4135, i64 8
  %4145 = bitcast i8* %4144 to i64*
  %4146 = load i64, i64* %4145, align 1
  %4147 = inttoptr i64 %4139 to double*
  %4148 = load double, double* %4147
  %4149 = fmul double %4143, %4148
  %4150 = bitcast i8* %4134 to double*
  store double %4149, double* %4150, align 1, !tbaa !2452
  %4151 = getelementptr inbounds i8, i8* %4134, i64 8
  %4152 = bitcast i8* %4151 to i64*
  store i64 %4146, i64* %4152, align 1, !tbaa !2452
  %4153 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4154 = load i64, i64* %RBP
  %4155 = sub i64 %4154, 64
  %4156 = load i64, i64* %PC
  %4157 = add i64 %4156, 5
  store i64 %4157, i64* %PC
  %4158 = inttoptr i64 %4155 to double*
  %4159 = load double, double* %4158
  %4160 = bitcast i8* %4153 to double*
  store double %4159, double* %4160, align 1, !tbaa !2452
  %4161 = getelementptr inbounds i8, i8* %4153, i64 8
  %4162 = bitcast i8* %4161 to double*
  store double 0.000000e+00, double* %4162, align 1, !tbaa !2452
  %4163 = load i64, i64* %RBP
  %4164 = add i64 %4163, 64
  %4165 = load i64, i64* %PC
  %4166 = add i64 %4165, 4
  store i64 %4166, i64* %PC
  %4167 = inttoptr i64 %4164 to i64*
  %4168 = load i64, i64* %4167
  store i64 %4168, i64* %RAX, align 8, !tbaa !2428
  %4169 = load i64, i64* %RBP
  %4170 = sub i64 %4169, 100
  %4171 = load i64, i64* %PC
  %4172 = add i64 %4171, 4
  store i64 %4172, i64* %PC
  %4173 = inttoptr i64 %4170 to i32*
  %4174 = load i32, i32* %4173
  %4175 = sext i32 %4174 to i64
  store i64 %4175, i64* %RCX, align 8, !tbaa !2428
  %4176 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4177 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4178 = load i64, i64* %RAX
  %4179 = load i64, i64* %RCX
  %4180 = mul i64 %4179, 8
  %4181 = add i64 %4180, %4178
  %4182 = load i64, i64* %PC
  %4183 = add i64 %4182, 5
  store i64 %4183, i64* %PC
  %4184 = bitcast i8* %4177 to double*
  %4185 = load double, double* %4184, align 1
  %4186 = getelementptr inbounds i8, i8* %4177, i64 8
  %4187 = bitcast i8* %4186 to i64*
  %4188 = load i64, i64* %4187, align 1
  %4189 = inttoptr i64 %4181 to double*
  %4190 = load double, double* %4189
  %4191 = fmul double %4185, %4190
  %4192 = bitcast i8* %4176 to double*
  store double %4191, double* %4192, align 1, !tbaa !2452
  %4193 = getelementptr inbounds i8, i8* %4176, i64 8
  %4194 = bitcast i8* %4193 to i64*
  store i64 %4188, i64* %4194, align 1, !tbaa !2452
  %4195 = load i64, i64* %RBP
  %4196 = add i64 %4195, 80
  %4197 = load i64, i64* %PC
  %4198 = add i64 %4197, 4
  store i64 %4198, i64* %PC
  %4199 = inttoptr i64 %4196 to i64*
  %4200 = load i64, i64* %4199
  store i64 %4200, i64* %RAX, align 8, !tbaa !2428
  %4201 = load i64, i64* %RBP
  %4202 = sub i64 %4201, 48
  %4203 = load i64, i64* %PC
  %4204 = add i64 %4203, 4
  store i64 %4204, i64* %PC
  %4205 = inttoptr i64 %4202 to i32*
  %4206 = load i32, i32* %4205
  %4207 = sext i32 %4206 to i64
  store i64 %4207, i64* %RCX, align 8, !tbaa !2428
  %4208 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4209 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4210 = load i64, i64* %RAX
  %4211 = load i64, i64* %RCX
  %4212 = mul i64 %4211, 8
  %4213 = add i64 %4212, %4210
  %4214 = load i64, i64* %PC
  %4215 = add i64 %4214, 5
  store i64 %4215, i64* %PC
  %4216 = bitcast i8* %4209 to double*
  %4217 = load double, double* %4216, align 1
  %4218 = getelementptr inbounds i8, i8* %4209, i64 8
  %4219 = bitcast i8* %4218 to i64*
  %4220 = load i64, i64* %4219, align 1
  %4221 = inttoptr i64 %4213 to double*
  %4222 = load double, double* %4221
  %4223 = fdiv double %4217, %4222
  %4224 = bitcast i8* %4208 to double*
  store double %4223, double* %4224, align 1, !tbaa !2452
  %4225 = getelementptr inbounds i8, i8* %4208, i64 8
  %4226 = bitcast i8* %4225 to i64*
  store i64 %4220, i64* %4226, align 1, !tbaa !2452
  %4227 = load i64, i64* %RBP
  %4228 = add i64 %4227, 16
  %4229 = load i64, i64* %PC
  %4230 = add i64 %4229, 4
  store i64 %4230, i64* %PC
  %4231 = inttoptr i64 %4228 to i64*
  %4232 = load i64, i64* %4231
  store i64 %4232, i64* %RAX, align 8, !tbaa !2428
  %4233 = load i64, i64* %RBP
  %4234 = sub i64 %4233, 100
  %4235 = load i64, i64* %PC
  %4236 = add i64 %4235, 4
  store i64 %4236, i64* %PC
  %4237 = inttoptr i64 %4234 to i32*
  %4238 = load i32, i32* %4237
  %4239 = sext i32 %4238 to i64
  store i64 %4239, i64* %RCX, align 8, !tbaa !2428
  %4240 = load i64, i64* %RCX
  %4241 = load i64, i64* %PC
  %4242 = add i64 %4241, 7
  store i64 %4242, i64* %PC
  %4243 = sext i64 %4240 to i128
  %4244 = and i128 %4243, -18446744073709551616
  %4245 = zext i64 %4240 to i128
  %4246 = or i128 %4244, %4245
  %4247 = mul nsw i128 520, %4246
  %4248 = trunc i128 %4247 to i64
  store i64 %4248, i64* %RCX, align 8, !tbaa !2428
  %4249 = sext i64 %4248 to i128
  %4250 = icmp ne i128 %4249, %4247
  %4251 = zext i1 %4250 to i8
  %4252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4251, i8* %4252, align 1, !tbaa !2432
  %4253 = trunc i128 %4247 to i32
  %4254 = and i32 %4253, 255
  %4255 = call i32 @llvm.ctpop.i32(i32 %4254) #16
  %4256 = trunc i32 %4255 to i8
  %4257 = and i8 %4256, 1
  %4258 = xor i8 %4257, 1
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4258, i8* %4259, align 1, !tbaa !2446
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4260, align 1, !tbaa !2447
  %4261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4261, align 1, !tbaa !2448
  %4262 = lshr i64 %4248, 63
  %4263 = trunc i64 %4262 to i8
  %4264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4263, i8* %4264, align 1, !tbaa !2449
  %4265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4251, i8* %4265, align 1, !tbaa !2450
  %4266 = load i64, i64* %RAX
  %4267 = load i64, i64* %RCX
  %4268 = load i64, i64* %PC
  %4269 = add i64 %4268, 3
  store i64 %4269, i64* %PC
  %4270 = add i64 %4267, %4266
  store i64 %4270, i64* %RAX, align 8, !tbaa !2428
  %4271 = icmp ult i64 %4270, %4266
  %4272 = icmp ult i64 %4270, %4267
  %4273 = or i1 %4271, %4272
  %4274 = zext i1 %4273 to i8
  %4275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4274, i8* %4275, align 1, !tbaa !2432
  %4276 = trunc i64 %4270 to i32
  %4277 = and i32 %4276, 255
  %4278 = call i32 @llvm.ctpop.i32(i32 %4277) #16
  %4279 = trunc i32 %4278 to i8
  %4280 = and i8 %4279, 1
  %4281 = xor i8 %4280, 1
  %4282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4281, i8* %4282, align 1, !tbaa !2446
  %4283 = xor i64 %4267, %4266
  %4284 = xor i64 %4283, %4270
  %4285 = lshr i64 %4284, 4
  %4286 = trunc i64 %4285 to i8
  %4287 = and i8 %4286, 1
  %4288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4287, i8* %4288, align 1, !tbaa !2447
  %4289 = icmp eq i64 %4270, 0
  %4290 = zext i1 %4289 to i8
  %4291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4290, i8* %4291, align 1, !tbaa !2448
  %4292 = lshr i64 %4270, 63
  %4293 = trunc i64 %4292 to i8
  %4294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4293, i8* %4294, align 1, !tbaa !2449
  %4295 = lshr i64 %4266, 63
  %4296 = lshr i64 %4267, 63
  %4297 = xor i64 %4292, %4295
  %4298 = xor i64 %4292, %4296
  %4299 = add nuw nsw i64 %4297, %4298
  %4300 = icmp eq i64 %4299, 2
  %4301 = zext i1 %4300 to i8
  %4302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4301, i8* %4302, align 1, !tbaa !2450
  %4303 = load i64, i64* %RBP
  %4304 = sub i64 %4303, 104
  %4305 = load i64, i64* %PC
  %4306 = add i64 %4305, 4
  store i64 %4306, i64* %PC
  %4307 = inttoptr i64 %4304 to i32*
  %4308 = load i32, i32* %4307
  %4309 = sext i32 %4308 to i64
  store i64 %4309, i64* %RCX, align 8, !tbaa !2428
  %4310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4311 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4312 = load i64, i64* %RAX
  %4313 = load i64, i64* %RCX
  %4314 = mul i64 %4313, 8
  %4315 = add i64 %4314, %4312
  %4316 = load i64, i64* %PC
  %4317 = add i64 %4316, 5
  store i64 %4317, i64* %PC
  %4318 = bitcast i8* %4311 to double*
  %4319 = load double, double* %4318, align 1
  %4320 = getelementptr inbounds i8, i8* %4311, i64 8
  %4321 = bitcast i8* %4320 to i64*
  %4322 = load i64, i64* %4321, align 1
  %4323 = inttoptr i64 %4315 to double*
  %4324 = load double, double* %4323
  %4325 = fmul double %4319, %4324
  %4326 = bitcast i8* %4310 to double*
  store double %4325, double* %4326, align 1, !tbaa !2452
  %4327 = getelementptr inbounds i8, i8* %4310, i64 8
  %4328 = bitcast i8* %4327 to i64*
  store i64 %4322, i64* %4328, align 1, !tbaa !2452
  %4329 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4331 = bitcast %union.vec128_t* %XMM1 to i8*
  %4332 = load i64, i64* %PC
  %4333 = add i64 %4332, 4
  store i64 %4333, i64* %PC
  %4334 = bitcast i8* %4330 to double*
  %4335 = load double, double* %4334, align 1
  %4336 = getelementptr inbounds i8, i8* %4330, i64 8
  %4337 = bitcast i8* %4336 to i64*
  %4338 = load i64, i64* %4337, align 1
  %4339 = bitcast i8* %4331 to double*
  %4340 = load double, double* %4339, align 1
  %4341 = fadd double %4335, %4340
  %4342 = bitcast i8* %4329 to double*
  store double %4341, double* %4342, align 1, !tbaa !2452
  %4343 = getelementptr inbounds i8, i8* %4329, i64 8
  %4344 = bitcast i8* %4343 to i64*
  store i64 %4338, i64* %4344, align 1, !tbaa !2452
  %4345 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4346 = load i64, i64* %RBP
  %4347 = sub i64 %4346, 64
  %4348 = load i64, i64* %PC
  %4349 = add i64 %4348, 5
  store i64 %4349, i64* %PC
  %4350 = inttoptr i64 %4347 to double*
  %4351 = load double, double* %4350
  %4352 = bitcast i8* %4345 to double*
  store double %4351, double* %4352, align 1, !tbaa !2452
  %4353 = getelementptr inbounds i8, i8* %4345, i64 8
  %4354 = bitcast i8* %4353 to double*
  store double 0.000000e+00, double* %4354, align 1, !tbaa !2452
  %4355 = load i64, i64* %RBP
  %4356 = add i64 %4355, 56
  %4357 = load i64, i64* %PC
  %4358 = add i64 %4357, 4
  store i64 %4358, i64* %PC
  %4359 = inttoptr i64 %4356 to i64*
  %4360 = load i64, i64* %4359
  store i64 %4360, i64* %RAX, align 8, !tbaa !2428
  %4361 = load i64, i64* %RBP
  %4362 = sub i64 %4361, 100
  %4363 = load i64, i64* %PC
  %4364 = add i64 %4363, 4
  store i64 %4364, i64* %PC
  %4365 = inttoptr i64 %4362 to i32*
  %4366 = load i32, i32* %4365
  %4367 = sext i32 %4366 to i64
  store i64 %4367, i64* %RCX, align 8, !tbaa !2428
  %4368 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4369 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4370 = load i64, i64* %RAX
  %4371 = load i64, i64* %RCX
  %4372 = mul i64 %4371, 8
  %4373 = add i64 %4372, %4370
  %4374 = load i64, i64* %PC
  %4375 = add i64 %4374, 5
  store i64 %4375, i64* %PC
  %4376 = bitcast i8* %4369 to double*
  %4377 = load double, double* %4376, align 1
  %4378 = getelementptr inbounds i8, i8* %4369, i64 8
  %4379 = bitcast i8* %4378 to i64*
  %4380 = load i64, i64* %4379, align 1
  %4381 = inttoptr i64 %4373 to double*
  %4382 = load double, double* %4381
  %4383 = fmul double %4377, %4382
  %4384 = bitcast i8* %4368 to double*
  store double %4383, double* %4384, align 1, !tbaa !2452
  %4385 = getelementptr inbounds i8, i8* %4368, i64 8
  %4386 = bitcast i8* %4385 to i64*
  store i64 %4380, i64* %4386, align 1, !tbaa !2452
  %4387 = load i64, i64* %RBP
  %4388 = add i64 %4387, 80
  %4389 = load i64, i64* %PC
  %4390 = add i64 %4389, 4
  store i64 %4390, i64* %PC
  %4391 = inttoptr i64 %4388 to i64*
  %4392 = load i64, i64* %4391
  store i64 %4392, i64* %RAX, align 8, !tbaa !2428
  %4393 = load i64, i64* %RBP
  %4394 = sub i64 %4393, 48
  %4395 = load i64, i64* %PC
  %4396 = add i64 %4395, 4
  store i64 %4396, i64* %PC
  %4397 = inttoptr i64 %4394 to i32*
  %4398 = load i32, i32* %4397
  %4399 = sext i32 %4398 to i64
  store i64 %4399, i64* %RCX, align 8, !tbaa !2428
  %4400 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4401 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4402 = load i64, i64* %RAX
  %4403 = load i64, i64* %RCX
  %4404 = mul i64 %4403, 8
  %4405 = add i64 %4404, %4402
  %4406 = load i64, i64* %PC
  %4407 = add i64 %4406, 5
  store i64 %4407, i64* %PC
  %4408 = bitcast i8* %4401 to double*
  %4409 = load double, double* %4408, align 1
  %4410 = getelementptr inbounds i8, i8* %4401, i64 8
  %4411 = bitcast i8* %4410 to i64*
  %4412 = load i64, i64* %4411, align 1
  %4413 = inttoptr i64 %4405 to double*
  %4414 = load double, double* %4413
  %4415 = fdiv double %4409, %4414
  %4416 = bitcast i8* %4400 to double*
  store double %4415, double* %4416, align 1, !tbaa !2452
  %4417 = getelementptr inbounds i8, i8* %4400, i64 8
  %4418 = bitcast i8* %4417 to i64*
  store i64 %4412, i64* %4418, align 1, !tbaa !2452
  %4419 = load i64, i64* %RBP
  %4420 = add i64 %4419, 24
  %4421 = load i64, i64* %PC
  %4422 = add i64 %4421, 4
  store i64 %4422, i64* %PC
  %4423 = inttoptr i64 %4420 to i64*
  %4424 = load i64, i64* %4423
  store i64 %4424, i64* %RAX, align 8, !tbaa !2428
  %4425 = load i64, i64* %RBP
  %4426 = sub i64 %4425, 100
  %4427 = load i64, i64* %PC
  %4428 = add i64 %4427, 4
  store i64 %4428, i64* %PC
  %4429 = inttoptr i64 %4426 to i32*
  %4430 = load i32, i32* %4429
  %4431 = sext i32 %4430 to i64
  store i64 %4431, i64* %RCX, align 8, !tbaa !2428
  %4432 = load i64, i64* %RCX
  %4433 = load i64, i64* %PC
  %4434 = add i64 %4433, 7
  store i64 %4434, i64* %PC
  %4435 = sext i64 %4432 to i128
  %4436 = and i128 %4435, -18446744073709551616
  %4437 = zext i64 %4432 to i128
  %4438 = or i128 %4436, %4437
  %4439 = mul nsw i128 33800, %4438
  %4440 = trunc i128 %4439 to i64
  store i64 %4440, i64* %RCX, align 8, !tbaa !2428
  %4441 = sext i64 %4440 to i128
  %4442 = icmp ne i128 %4441, %4439
  %4443 = zext i1 %4442 to i8
  %4444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4443, i8* %4444, align 1, !tbaa !2432
  %4445 = trunc i128 %4439 to i32
  %4446 = and i32 %4445, 255
  %4447 = call i32 @llvm.ctpop.i32(i32 %4446) #16
  %4448 = trunc i32 %4447 to i8
  %4449 = and i8 %4448, 1
  %4450 = xor i8 %4449, 1
  %4451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4450, i8* %4451, align 1, !tbaa !2446
  %4452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4452, align 1, !tbaa !2447
  %4453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4453, align 1, !tbaa !2448
  %4454 = lshr i64 %4440, 63
  %4455 = trunc i64 %4454 to i8
  %4456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4455, i8* %4456, align 1, !tbaa !2449
  %4457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4443, i8* %4457, align 1, !tbaa !2450
  %4458 = load i64, i64* %RAX
  %4459 = load i64, i64* %RCX
  %4460 = load i64, i64* %PC
  %4461 = add i64 %4460, 3
  store i64 %4461, i64* %PC
  %4462 = add i64 %4459, %4458
  store i64 %4462, i64* %RAX, align 8, !tbaa !2428
  %4463 = icmp ult i64 %4462, %4458
  %4464 = icmp ult i64 %4462, %4459
  %4465 = or i1 %4463, %4464
  %4466 = zext i1 %4465 to i8
  %4467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4466, i8* %4467, align 1, !tbaa !2432
  %4468 = trunc i64 %4462 to i32
  %4469 = and i32 %4468, 255
  %4470 = call i32 @llvm.ctpop.i32(i32 %4469) #16
  %4471 = trunc i32 %4470 to i8
  %4472 = and i8 %4471, 1
  %4473 = xor i8 %4472, 1
  %4474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4473, i8* %4474, align 1, !tbaa !2446
  %4475 = xor i64 %4459, %4458
  %4476 = xor i64 %4475, %4462
  %4477 = lshr i64 %4476, 4
  %4478 = trunc i64 %4477 to i8
  %4479 = and i8 %4478, 1
  %4480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4479, i8* %4480, align 1, !tbaa !2447
  %4481 = icmp eq i64 %4462, 0
  %4482 = zext i1 %4481 to i8
  %4483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4482, i8* %4483, align 1, !tbaa !2448
  %4484 = lshr i64 %4462, 63
  %4485 = trunc i64 %4484 to i8
  %4486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4485, i8* %4486, align 1, !tbaa !2449
  %4487 = lshr i64 %4458, 63
  %4488 = lshr i64 %4459, 63
  %4489 = xor i64 %4484, %4487
  %4490 = xor i64 %4484, %4488
  %4491 = add nuw nsw i64 %4489, %4490
  %4492 = icmp eq i64 %4491, 2
  %4493 = zext i1 %4492 to i8
  %4494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4493, i8* %4494, align 1, !tbaa !2450
  %4495 = load i64, i64* %RBP
  %4496 = sub i64 %4495, 52
  %4497 = load i64, i64* %PC
  %4498 = add i64 %4497, 4
  store i64 %4498, i64* %PC
  %4499 = inttoptr i64 %4496 to i32*
  %4500 = load i32, i32* %4499
  %4501 = sext i32 %4500 to i64
  store i64 %4501, i64* %RCX, align 8, !tbaa !2428
  %4502 = load i64, i64* %RCX
  %4503 = load i64, i64* %PC
  %4504 = add i64 %4503, 7
  store i64 %4504, i64* %PC
  %4505 = sext i64 %4502 to i128
  %4506 = and i128 %4505, -18446744073709551616
  %4507 = zext i64 %4502 to i128
  %4508 = or i128 %4506, %4507
  %4509 = mul nsw i128 520, %4508
  %4510 = trunc i128 %4509 to i64
  store i64 %4510, i64* %RCX, align 8, !tbaa !2428
  %4511 = sext i64 %4510 to i128
  %4512 = icmp ne i128 %4511, %4509
  %4513 = zext i1 %4512 to i8
  %4514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4513, i8* %4514, align 1, !tbaa !2432
  %4515 = trunc i128 %4509 to i32
  %4516 = and i32 %4515, 255
  %4517 = call i32 @llvm.ctpop.i32(i32 %4516) #16
  %4518 = trunc i32 %4517 to i8
  %4519 = and i8 %4518, 1
  %4520 = xor i8 %4519, 1
  %4521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4520, i8* %4521, align 1, !tbaa !2446
  %4522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4522, align 1, !tbaa !2447
  %4523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4523, align 1, !tbaa !2448
  %4524 = lshr i64 %4510, 63
  %4525 = trunc i64 %4524 to i8
  %4526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4525, i8* %4526, align 1, !tbaa !2449
  %4527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4513, i8* %4527, align 1, !tbaa !2450
  %4528 = load i64, i64* %RAX
  %4529 = load i64, i64* %RCX
  %4530 = load i64, i64* %PC
  %4531 = add i64 %4530, 3
  store i64 %4531, i64* %PC
  %4532 = add i64 %4529, %4528
  store i64 %4532, i64* %RAX, align 8, !tbaa !2428
  %4533 = icmp ult i64 %4532, %4528
  %4534 = icmp ult i64 %4532, %4529
  %4535 = or i1 %4533, %4534
  %4536 = zext i1 %4535 to i8
  %4537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4536, i8* %4537, align 1, !tbaa !2432
  %4538 = trunc i64 %4532 to i32
  %4539 = and i32 %4538, 255
  %4540 = call i32 @llvm.ctpop.i32(i32 %4539) #16
  %4541 = trunc i32 %4540 to i8
  %4542 = and i8 %4541, 1
  %4543 = xor i8 %4542, 1
  %4544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4543, i8* %4544, align 1, !tbaa !2446
  %4545 = xor i64 %4529, %4528
  %4546 = xor i64 %4545, %4532
  %4547 = lshr i64 %4546, 4
  %4548 = trunc i64 %4547 to i8
  %4549 = and i8 %4548, 1
  %4550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4549, i8* %4550, align 1, !tbaa !2447
  %4551 = icmp eq i64 %4532, 0
  %4552 = zext i1 %4551 to i8
  %4553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4552, i8* %4553, align 1, !tbaa !2448
  %4554 = lshr i64 %4532, 63
  %4555 = trunc i64 %4554 to i8
  %4556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4555, i8* %4556, align 1, !tbaa !2449
  %4557 = lshr i64 %4528, 63
  %4558 = lshr i64 %4529, 63
  %4559 = xor i64 %4554, %4557
  %4560 = xor i64 %4554, %4558
  %4561 = add nuw nsw i64 %4559, %4560
  %4562 = icmp eq i64 %4561, 2
  %4563 = zext i1 %4562 to i8
  %4564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4563, i8* %4564, align 1, !tbaa !2450
  %4565 = load i64, i64* %RBP
  %4566 = sub i64 %4565, 48
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 4
  store i64 %4568, i64* %PC
  %4569 = inttoptr i64 %4566 to i32*
  %4570 = load i32, i32* %4569
  %4571 = sext i32 %4570 to i64
  store i64 %4571, i64* %RCX, align 8, !tbaa !2428
  %4572 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4573 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4574 = load i64, i64* %RAX
  %4575 = load i64, i64* %RCX
  %4576 = mul i64 %4575, 8
  %4577 = add i64 %4576, %4574
  %4578 = load i64, i64* %PC
  %4579 = add i64 %4578, 5
  store i64 %4579, i64* %PC
  %4580 = bitcast i8* %4573 to double*
  %4581 = load double, double* %4580, align 1
  %4582 = getelementptr inbounds i8, i8* %4573, i64 8
  %4583 = bitcast i8* %4582 to i64*
  %4584 = load i64, i64* %4583, align 1
  %4585 = inttoptr i64 %4577 to double*
  %4586 = load double, double* %4585
  %4587 = fmul double %4581, %4586
  %4588 = bitcast i8* %4572 to double*
  store double %4587, double* %4588, align 1, !tbaa !2452
  %4589 = getelementptr inbounds i8, i8* %4572, i64 8
  %4590 = bitcast i8* %4589 to i64*
  store i64 %4584, i64* %4590, align 1, !tbaa !2452
  %4591 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4592 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4593 = bitcast %union.vec128_t* %XMM1 to i8*
  %4594 = load i64, i64* %PC
  %4595 = add i64 %4594, 4
  store i64 %4595, i64* %PC
  %4596 = bitcast i8* %4592 to double*
  %4597 = load double, double* %4596, align 1
  %4598 = getelementptr inbounds i8, i8* %4592, i64 8
  %4599 = bitcast i8* %4598 to i64*
  %4600 = load i64, i64* %4599, align 1
  %4601 = bitcast i8* %4593 to double*
  %4602 = load double, double* %4601, align 1
  %4603 = fsub double %4597, %4602
  %4604 = bitcast i8* %4591 to double*
  store double %4603, double* %4604, align 1, !tbaa !2452
  %4605 = getelementptr inbounds i8, i8* %4591, i64 8
  %4606 = bitcast i8* %4605 to i64*
  store i64 %4600, i64* %4606, align 1, !tbaa !2452
  %4607 = load i64, i64* %RBP
  %4608 = add i64 %4607, 48
  %4609 = load i64, i64* %PC
  %4610 = add i64 %4609, 4
  store i64 %4610, i64* %PC
  %4611 = inttoptr i64 %4608 to i64*
  %4612 = load i64, i64* %4611
  store i64 %4612, i64* %RAX, align 8, !tbaa !2428
  %4613 = load i64, i64* %RBP
  %4614 = sub i64 %4613, 100
  %4615 = load i64, i64* %PC
  %4616 = add i64 %4615, 4
  store i64 %4616, i64* %PC
  %4617 = inttoptr i64 %4614 to i32*
  %4618 = load i32, i32* %4617
  %4619 = sext i32 %4618 to i64
  store i64 %4619, i64* %RCX, align 8, !tbaa !2428
  %4620 = load i64, i64* %RCX
  %4621 = load i64, i64* %PC
  %4622 = add i64 %4621, 7
  store i64 %4622, i64* %PC
  %4623 = sext i64 %4620 to i128
  %4624 = and i128 %4623, -18446744073709551616
  %4625 = zext i64 %4620 to i128
  %4626 = or i128 %4624, %4625
  %4627 = mul nsw i128 33800, %4626
  %4628 = trunc i128 %4627 to i64
  store i64 %4628, i64* %RCX, align 8, !tbaa !2428
  %4629 = sext i64 %4628 to i128
  %4630 = icmp ne i128 %4629, %4627
  %4631 = zext i1 %4630 to i8
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4631, i8* %4632, align 1, !tbaa !2432
  %4633 = trunc i128 %4627 to i32
  %4634 = and i32 %4633, 255
  %4635 = call i32 @llvm.ctpop.i32(i32 %4634) #16
  %4636 = trunc i32 %4635 to i8
  %4637 = and i8 %4636, 1
  %4638 = xor i8 %4637, 1
  %4639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4638, i8* %4639, align 1, !tbaa !2446
  %4640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4640, align 1, !tbaa !2447
  %4641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4641, align 1, !tbaa !2448
  %4642 = lshr i64 %4628, 63
  %4643 = trunc i64 %4642 to i8
  %4644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4643, i8* %4644, align 1, !tbaa !2449
  %4645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4631, i8* %4645, align 1, !tbaa !2450
  %4646 = load i64, i64* %RAX
  %4647 = load i64, i64* %RCX
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 3
  store i64 %4649, i64* %PC
  %4650 = add i64 %4647, %4646
  store i64 %4650, i64* %RAX, align 8, !tbaa !2428
  %4651 = icmp ult i64 %4650, %4646
  %4652 = icmp ult i64 %4650, %4647
  %4653 = or i1 %4651, %4652
  %4654 = zext i1 %4653 to i8
  %4655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4654, i8* %4655, align 1, !tbaa !2432
  %4656 = trunc i64 %4650 to i32
  %4657 = and i32 %4656, 255
  %4658 = call i32 @llvm.ctpop.i32(i32 %4657) #16
  %4659 = trunc i32 %4658 to i8
  %4660 = and i8 %4659, 1
  %4661 = xor i8 %4660, 1
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4661, i8* %4662, align 1, !tbaa !2446
  %4663 = xor i64 %4647, %4646
  %4664 = xor i64 %4663, %4650
  %4665 = lshr i64 %4664, 4
  %4666 = trunc i64 %4665 to i8
  %4667 = and i8 %4666, 1
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4667, i8* %4668, align 1, !tbaa !2447
  %4669 = icmp eq i64 %4650, 0
  %4670 = zext i1 %4669 to i8
  %4671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4670, i8* %4671, align 1, !tbaa !2448
  %4672 = lshr i64 %4650, 63
  %4673 = trunc i64 %4672 to i8
  %4674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4673, i8* %4674, align 1, !tbaa !2449
  %4675 = lshr i64 %4646, 63
  %4676 = lshr i64 %4647, 63
  %4677 = xor i64 %4672, %4675
  %4678 = xor i64 %4672, %4676
  %4679 = add nuw nsw i64 %4677, %4678
  %4680 = icmp eq i64 %4679, 2
  %4681 = zext i1 %4680 to i8
  %4682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4681, i8* %4682, align 1, !tbaa !2450
  %4683 = load i64, i64* %RBP
  %4684 = sub i64 %4683, 52
  %4685 = load i64, i64* %PC
  %4686 = add i64 %4685, 4
  store i64 %4686, i64* %PC
  %4687 = inttoptr i64 %4684 to i32*
  %4688 = load i32, i32* %4687
  %4689 = sext i32 %4688 to i64
  store i64 %4689, i64* %RCX, align 8, !tbaa !2428
  %4690 = load i64, i64* %RCX
  %4691 = load i64, i64* %PC
  %4692 = add i64 %4691, 7
  store i64 %4692, i64* %PC
  %4693 = sext i64 %4690 to i128
  %4694 = and i128 %4693, -18446744073709551616
  %4695 = zext i64 %4690 to i128
  %4696 = or i128 %4694, %4695
  %4697 = mul nsw i128 520, %4696
  %4698 = trunc i128 %4697 to i64
  store i64 %4698, i64* %RCX, align 8, !tbaa !2428
  %4699 = sext i64 %4698 to i128
  %4700 = icmp ne i128 %4699, %4697
  %4701 = zext i1 %4700 to i8
  %4702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4701, i8* %4702, align 1, !tbaa !2432
  %4703 = trunc i128 %4697 to i32
  %4704 = and i32 %4703, 255
  %4705 = call i32 @llvm.ctpop.i32(i32 %4704) #16
  %4706 = trunc i32 %4705 to i8
  %4707 = and i8 %4706, 1
  %4708 = xor i8 %4707, 1
  %4709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4708, i8* %4709, align 1, !tbaa !2446
  %4710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4710, align 1, !tbaa !2447
  %4711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4711, align 1, !tbaa !2448
  %4712 = lshr i64 %4698, 63
  %4713 = trunc i64 %4712 to i8
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4713, i8* %4714, align 1, !tbaa !2449
  %4715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4701, i8* %4715, align 1, !tbaa !2450
  %4716 = load i64, i64* %RAX
  %4717 = load i64, i64* %RCX
  %4718 = load i64, i64* %PC
  %4719 = add i64 %4718, 3
  store i64 %4719, i64* %PC
  %4720 = add i64 %4717, %4716
  store i64 %4720, i64* %RAX, align 8, !tbaa !2428
  %4721 = icmp ult i64 %4720, %4716
  %4722 = icmp ult i64 %4720, %4717
  %4723 = or i1 %4721, %4722
  %4724 = zext i1 %4723 to i8
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4724, i8* %4725, align 1, !tbaa !2432
  %4726 = trunc i64 %4720 to i32
  %4727 = and i32 %4726, 255
  %4728 = call i32 @llvm.ctpop.i32(i32 %4727) #16
  %4729 = trunc i32 %4728 to i8
  %4730 = and i8 %4729, 1
  %4731 = xor i8 %4730, 1
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4731, i8* %4732, align 1, !tbaa !2446
  %4733 = xor i64 %4717, %4716
  %4734 = xor i64 %4733, %4720
  %4735 = lshr i64 %4734, 4
  %4736 = trunc i64 %4735 to i8
  %4737 = and i8 %4736, 1
  %4738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4737, i8* %4738, align 1, !tbaa !2447
  %4739 = icmp eq i64 %4720, 0
  %4740 = zext i1 %4739 to i8
  %4741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4740, i8* %4741, align 1, !tbaa !2448
  %4742 = lshr i64 %4720, 63
  %4743 = trunc i64 %4742 to i8
  %4744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4743, i8* %4744, align 1, !tbaa !2449
  %4745 = lshr i64 %4716, 63
  %4746 = lshr i64 %4717, 63
  %4747 = xor i64 %4742, %4745
  %4748 = xor i64 %4742, %4746
  %4749 = add nuw nsw i64 %4747, %4748
  %4750 = icmp eq i64 %4749, 2
  %4751 = zext i1 %4750 to i8
  %4752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4751, i8* %4752, align 1, !tbaa !2450
  %4753 = load i64, i64* %RBP
  %4754 = sub i64 %4753, 48
  %4755 = load i64, i64* %PC
  %4756 = add i64 %4755, 4
  store i64 %4756, i64* %PC
  %4757 = inttoptr i64 %4754 to i32*
  %4758 = load i32, i32* %4757
  %4759 = sext i32 %4758 to i64
  store i64 %4759, i64* %RCX, align 8, !tbaa !2428
  %4760 = load i64, i64* %RAX
  %4761 = load i64, i64* %RCX
  %4762 = mul i64 %4761, 8
  %4763 = add i64 %4762, %4760
  %4764 = bitcast %union.vec128_t* %XMM0 to i8*
  %4765 = load i64, i64* %PC
  %4766 = add i64 %4765, 5
  store i64 %4766, i64* %PC
  %4767 = bitcast i8* %4764 to double*
  %4768 = load double, double* %4767, align 1
  %4769 = inttoptr i64 %4763 to double*
  store double %4768, double* %4769
  %4770 = load i64, i64* %RBP
  %4771 = add i64 %4770, 16
  %4772 = load i64, i64* %PC
  %4773 = add i64 %4772, 4
  store i64 %4773, i64* %PC
  %4774 = inttoptr i64 %4771 to i64*
  %4775 = load i64, i64* %4774
  store i64 %4775, i64* %RAX, align 8, !tbaa !2428
  %4776 = load i64, i64* %RBP
  %4777 = sub i64 %4776, 100
  %4778 = load i64, i64* %PC
  %4779 = add i64 %4778, 4
  store i64 %4779, i64* %PC
  %4780 = inttoptr i64 %4777 to i32*
  %4781 = load i32, i32* %4780
  %4782 = sext i32 %4781 to i64
  store i64 %4782, i64* %RCX, align 8, !tbaa !2428
  %4783 = load i64, i64* %RCX
  %4784 = load i64, i64* %PC
  %4785 = add i64 %4784, 7
  store i64 %4785, i64* %PC
  %4786 = sext i64 %4783 to i128
  %4787 = and i128 %4786, -18446744073709551616
  %4788 = zext i64 %4783 to i128
  %4789 = or i128 %4787, %4788
  %4790 = mul nsw i128 520, %4789
  %4791 = trunc i128 %4790 to i64
  store i64 %4791, i64* %RCX, align 8, !tbaa !2428
  %4792 = sext i64 %4791 to i128
  %4793 = icmp ne i128 %4792, %4790
  %4794 = zext i1 %4793 to i8
  %4795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4794, i8* %4795, align 1, !tbaa !2432
  %4796 = trunc i128 %4790 to i32
  %4797 = and i32 %4796, 255
  %4798 = call i32 @llvm.ctpop.i32(i32 %4797) #16
  %4799 = trunc i32 %4798 to i8
  %4800 = and i8 %4799, 1
  %4801 = xor i8 %4800, 1
  %4802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4801, i8* %4802, align 1, !tbaa !2446
  %4803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4803, align 1, !tbaa !2447
  %4804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4804, align 1, !tbaa !2448
  %4805 = lshr i64 %4791, 63
  %4806 = trunc i64 %4805 to i8
  %4807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4806, i8* %4807, align 1, !tbaa !2449
  %4808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4794, i8* %4808, align 1, !tbaa !2450
  %4809 = load i64, i64* %RAX
  %4810 = load i64, i64* %RCX
  %4811 = load i64, i64* %PC
  %4812 = add i64 %4811, 3
  store i64 %4812, i64* %PC
  %4813 = add i64 %4810, %4809
  store i64 %4813, i64* %RAX, align 8, !tbaa !2428
  %4814 = icmp ult i64 %4813, %4809
  %4815 = icmp ult i64 %4813, %4810
  %4816 = or i1 %4814, %4815
  %4817 = zext i1 %4816 to i8
  %4818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4817, i8* %4818, align 1, !tbaa !2432
  %4819 = trunc i64 %4813 to i32
  %4820 = and i32 %4819, 255
  %4821 = call i32 @llvm.ctpop.i32(i32 %4820) #16
  %4822 = trunc i32 %4821 to i8
  %4823 = and i8 %4822, 1
  %4824 = xor i8 %4823, 1
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4824, i8* %4825, align 1, !tbaa !2446
  %4826 = xor i64 %4810, %4809
  %4827 = xor i64 %4826, %4813
  %4828 = lshr i64 %4827, 4
  %4829 = trunc i64 %4828 to i8
  %4830 = and i8 %4829, 1
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4830, i8* %4831, align 1, !tbaa !2447
  %4832 = icmp eq i64 %4813, 0
  %4833 = zext i1 %4832 to i8
  %4834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4833, i8* %4834, align 1, !tbaa !2448
  %4835 = lshr i64 %4813, 63
  %4836 = trunc i64 %4835 to i8
  %4837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4836, i8* %4837, align 1, !tbaa !2449
  %4838 = lshr i64 %4809, 63
  %4839 = lshr i64 %4810, 63
  %4840 = xor i64 %4835, %4838
  %4841 = xor i64 %4835, %4839
  %4842 = add nuw nsw i64 %4840, %4841
  %4843 = icmp eq i64 %4842, 2
  %4844 = zext i1 %4843 to i8
  %4845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4844, i8* %4845, align 1, !tbaa !2450
  %4846 = load i64, i64* %RBP
  %4847 = sub i64 %4846, 104
  %4848 = load i64, i64* %PC
  %4849 = add i64 %4848, 4
  store i64 %4849, i64* %PC
  %4850 = inttoptr i64 %4847 to i32*
  %4851 = load i32, i32* %4850
  %4852 = sext i32 %4851 to i64
  store i64 %4852, i64* %RCX, align 8, !tbaa !2428
  %4853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4854 = load i64, i64* %RAX
  %4855 = load i64, i64* %RCX
  %4856 = mul i64 %4855, 8
  %4857 = add i64 %4856, %4854
  %4858 = load i64, i64* %PC
  %4859 = add i64 %4858, 5
  store i64 %4859, i64* %PC
  %4860 = inttoptr i64 %4857 to double*
  %4861 = load double, double* %4860
  %4862 = bitcast i8* %4853 to double*
  store double %4861, double* %4862, align 1, !tbaa !2452
  %4863 = getelementptr inbounds i8, i8* %4853, i64 8
  %4864 = bitcast i8* %4863 to double*
  store double 0.000000e+00, double* %4864, align 1, !tbaa !2452
  %4865 = load i64, i64* %RBP
  %4866 = add i64 %4865, 24
  %4867 = load i64, i64* %PC
  %4868 = add i64 %4867, 4
  store i64 %4868, i64* %PC
  %4869 = inttoptr i64 %4866 to i64*
  %4870 = load i64, i64* %4869
  store i64 %4870, i64* %RAX, align 8, !tbaa !2428
  %4871 = load i64, i64* %RBP
  %4872 = sub i64 %4871, 100
  %4873 = load i64, i64* %PC
  %4874 = add i64 %4873, 4
  store i64 %4874, i64* %PC
  %4875 = inttoptr i64 %4872 to i32*
  %4876 = load i32, i32* %4875
  %4877 = sext i32 %4876 to i64
  store i64 %4877, i64* %RCX, align 8, !tbaa !2428
  %4878 = load i64, i64* %RCX
  %4879 = load i64, i64* %PC
  %4880 = add i64 %4879, 7
  store i64 %4880, i64* %PC
  %4881 = sext i64 %4878 to i128
  %4882 = and i128 %4881, -18446744073709551616
  %4883 = zext i64 %4878 to i128
  %4884 = or i128 %4882, %4883
  %4885 = mul nsw i128 33800, %4884
  %4886 = trunc i128 %4885 to i64
  store i64 %4886, i64* %RCX, align 8, !tbaa !2428
  %4887 = sext i64 %4886 to i128
  %4888 = icmp ne i128 %4887, %4885
  %4889 = zext i1 %4888 to i8
  %4890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4889, i8* %4890, align 1, !tbaa !2432
  %4891 = trunc i128 %4885 to i32
  %4892 = and i32 %4891, 255
  %4893 = call i32 @llvm.ctpop.i32(i32 %4892) #16
  %4894 = trunc i32 %4893 to i8
  %4895 = and i8 %4894, 1
  %4896 = xor i8 %4895, 1
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4896, i8* %4897, align 1, !tbaa !2446
  %4898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4898, align 1, !tbaa !2447
  %4899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4899, align 1, !tbaa !2448
  %4900 = lshr i64 %4886, 63
  %4901 = trunc i64 %4900 to i8
  %4902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4901, i8* %4902, align 1, !tbaa !2449
  %4903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4889, i8* %4903, align 1, !tbaa !2450
  %4904 = load i64, i64* %RAX
  %4905 = load i64, i64* %RCX
  %4906 = load i64, i64* %PC
  %4907 = add i64 %4906, 3
  store i64 %4907, i64* %PC
  %4908 = add i64 %4905, %4904
  store i64 %4908, i64* %RAX, align 8, !tbaa !2428
  %4909 = icmp ult i64 %4908, %4904
  %4910 = icmp ult i64 %4908, %4905
  %4911 = or i1 %4909, %4910
  %4912 = zext i1 %4911 to i8
  %4913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4912, i8* %4913, align 1, !tbaa !2432
  %4914 = trunc i64 %4908 to i32
  %4915 = and i32 %4914, 255
  %4916 = call i32 @llvm.ctpop.i32(i32 %4915) #16
  %4917 = trunc i32 %4916 to i8
  %4918 = and i8 %4917, 1
  %4919 = xor i8 %4918, 1
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4919, i8* %4920, align 1, !tbaa !2446
  %4921 = xor i64 %4905, %4904
  %4922 = xor i64 %4921, %4908
  %4923 = lshr i64 %4922, 4
  %4924 = trunc i64 %4923 to i8
  %4925 = and i8 %4924, 1
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4925, i8* %4926, align 1, !tbaa !2447
  %4927 = icmp eq i64 %4908, 0
  %4928 = zext i1 %4927 to i8
  %4929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4928, i8* %4929, align 1, !tbaa !2448
  %4930 = lshr i64 %4908, 63
  %4931 = trunc i64 %4930 to i8
  %4932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4931, i8* %4932, align 1, !tbaa !2449
  %4933 = lshr i64 %4904, 63
  %4934 = lshr i64 %4905, 63
  %4935 = xor i64 %4930, %4933
  %4936 = xor i64 %4930, %4934
  %4937 = add nuw nsw i64 %4935, %4936
  %4938 = icmp eq i64 %4937, 2
  %4939 = zext i1 %4938 to i8
  %4940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4939, i8* %4940, align 1, !tbaa !2450
  %4941 = load i64, i64* %RBP
  %4942 = sub i64 %4941, 52
  %4943 = load i64, i64* %PC
  %4944 = add i64 %4943, 4
  store i64 %4944, i64* %PC
  %4945 = inttoptr i64 %4942 to i32*
  %4946 = load i32, i32* %4945
  %4947 = sext i32 %4946 to i64
  store i64 %4947, i64* %RCX, align 8, !tbaa !2428
  %4948 = load i64, i64* %RCX
  %4949 = load i64, i64* %PC
  %4950 = add i64 %4949, 7
  store i64 %4950, i64* %PC
  %4951 = sext i64 %4948 to i128
  %4952 = and i128 %4951, -18446744073709551616
  %4953 = zext i64 %4948 to i128
  %4954 = or i128 %4952, %4953
  %4955 = mul nsw i128 520, %4954
  %4956 = trunc i128 %4955 to i64
  store i64 %4956, i64* %RCX, align 8, !tbaa !2428
  %4957 = sext i64 %4956 to i128
  %4958 = icmp ne i128 %4957, %4955
  %4959 = zext i1 %4958 to i8
  %4960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4959, i8* %4960, align 1, !tbaa !2432
  %4961 = trunc i128 %4955 to i32
  %4962 = and i32 %4961, 255
  %4963 = call i32 @llvm.ctpop.i32(i32 %4962) #16
  %4964 = trunc i32 %4963 to i8
  %4965 = and i8 %4964, 1
  %4966 = xor i8 %4965, 1
  %4967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4966, i8* %4967, align 1, !tbaa !2446
  %4968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4968, align 1, !tbaa !2447
  %4969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4969, align 1, !tbaa !2448
  %4970 = lshr i64 %4956, 63
  %4971 = trunc i64 %4970 to i8
  %4972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4971, i8* %4972, align 1, !tbaa !2449
  %4973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4959, i8* %4973, align 1, !tbaa !2450
  %4974 = load i64, i64* %RAX
  %4975 = load i64, i64* %RCX
  %4976 = load i64, i64* %PC
  %4977 = add i64 %4976, 3
  store i64 %4977, i64* %PC
  %4978 = add i64 %4975, %4974
  store i64 %4978, i64* %RAX, align 8, !tbaa !2428
  %4979 = icmp ult i64 %4978, %4974
  %4980 = icmp ult i64 %4978, %4975
  %4981 = or i1 %4979, %4980
  %4982 = zext i1 %4981 to i8
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4982, i8* %4983, align 1, !tbaa !2432
  %4984 = trunc i64 %4978 to i32
  %4985 = and i32 %4984, 255
  %4986 = call i32 @llvm.ctpop.i32(i32 %4985) #16
  %4987 = trunc i32 %4986 to i8
  %4988 = and i8 %4987, 1
  %4989 = xor i8 %4988, 1
  %4990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4989, i8* %4990, align 1, !tbaa !2446
  %4991 = xor i64 %4975, %4974
  %4992 = xor i64 %4991, %4978
  %4993 = lshr i64 %4992, 4
  %4994 = trunc i64 %4993 to i8
  %4995 = and i8 %4994, 1
  %4996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4995, i8* %4996, align 1, !tbaa !2447
  %4997 = icmp eq i64 %4978, 0
  %4998 = zext i1 %4997 to i8
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4998, i8* %4999, align 1, !tbaa !2448
  %5000 = lshr i64 %4978, 63
  %5001 = trunc i64 %5000 to i8
  %5002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5001, i8* %5002, align 1, !tbaa !2449
  %5003 = lshr i64 %4974, 63
  %5004 = lshr i64 %4975, 63
  %5005 = xor i64 %5000, %5003
  %5006 = xor i64 %5000, %5004
  %5007 = add nuw nsw i64 %5005, %5006
  %5008 = icmp eq i64 %5007, 2
  %5009 = zext i1 %5008 to i8
  %5010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5009, i8* %5010, align 1, !tbaa !2450
  %5011 = load i64, i64* %RBP
  %5012 = sub i64 %5011, 48
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 4
  store i64 %5014, i64* %PC
  %5015 = inttoptr i64 %5012 to i32*
  %5016 = load i32, i32* %5015
  %5017 = sext i32 %5016 to i64
  store i64 %5017, i64* %RCX, align 8, !tbaa !2428
  %5018 = load i64, i64* %RAX
  %5019 = load i64, i64* %RCX
  %5020 = mul i64 %5019, 8
  %5021 = add i64 %5020, %5018
  %5022 = bitcast %union.vec128_t* %XMM0 to i8*
  %5023 = load i64, i64* %PC
  %5024 = add i64 %5023, 5
  store i64 %5024, i64* %PC
  %5025 = bitcast i8* %5022 to double*
  %5026 = load double, double* %5025, align 1
  %5027 = inttoptr i64 %5021 to double*
  store double %5026, double* %5027
  %5028 = load i64, i64* %RBP
  %5029 = sub i64 %5028, 104
  %5030 = load i64, i64* %PC
  %5031 = add i64 %5030, 3
  store i64 %5031, i64* %PC
  %5032 = inttoptr i64 %5029 to i32*
  %5033 = load i32, i32* %5032
  %5034 = zext i32 %5033 to i64
  store i64 %5034, i64* %RAX, align 8, !tbaa !2428
  %5035 = load i64, i64* %RAX
  %5036 = load i64, i64* %PC
  %5037 = add i64 %5036, 3
  store i64 %5037, i64* %PC
  %5038 = trunc i64 %5035 to i32
  %5039 = add i32 1, %5038
  %5040 = zext i32 %5039 to i64
  store i64 %5040, i64* %RAX, align 8, !tbaa !2428
  %5041 = icmp ult i32 %5039, %5038
  %5042 = icmp ult i32 %5039, 1
  %5043 = or i1 %5041, %5042
  %5044 = zext i1 %5043 to i8
  %5045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5044, i8* %5045, align 1, !tbaa !2432
  %5046 = and i32 %5039, 255
  %5047 = call i32 @llvm.ctpop.i32(i32 %5046) #16
  %5048 = trunc i32 %5047 to i8
  %5049 = and i8 %5048, 1
  %5050 = xor i8 %5049, 1
  %5051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5050, i8* %5051, align 1, !tbaa !2446
  %5052 = xor i64 1, %5035
  %5053 = trunc i64 %5052 to i32
  %5054 = xor i32 %5053, %5039
  %5055 = lshr i32 %5054, 4
  %5056 = trunc i32 %5055 to i8
  %5057 = and i8 %5056, 1
  %5058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5057, i8* %5058, align 1, !tbaa !2447
  %5059 = icmp eq i32 %5039, 0
  %5060 = zext i1 %5059 to i8
  %5061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5060, i8* %5061, align 1, !tbaa !2448
  %5062 = lshr i32 %5039, 31
  %5063 = trunc i32 %5062 to i8
  %5064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5063, i8* %5064, align 1, !tbaa !2449
  %5065 = lshr i32 %5038, 31
  %5066 = xor i32 %5062, %5065
  %5067 = add nuw nsw i32 %5066, %5062
  %5068 = icmp eq i32 %5067, 2
  %5069 = zext i1 %5068 to i8
  %5070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5069, i8* %5070, align 1, !tbaa !2450
  %5071 = load i64, i64* %RBP
  %5072 = sub i64 %5071, 104
  %5073 = load i32, i32* %EAX
  %5074 = zext i32 %5073 to i64
  %5075 = load i64, i64* %PC
  %5076 = add i64 %5075, 3
  store i64 %5076, i64* %PC
  %5077 = inttoptr i64 %5072 to i32*
  store i32 %5073, i32* %5077
  %5078 = load i64, i64* %PC
  %5079 = sub i64 %5078, 2643
  %5080 = load i64, i64* %PC
  %5081 = add i64 %5080, 5
  store i64 %5081, i64* %PC
  %5082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5079, i64* %5082, align 8, !tbaa !2428
  br label %block_40148d

block_4019de:                                     ; preds = %block_4019d2
  %5083 = sub i64 %764, 108
  %5084 = load i64, i64* %PC
  %5085 = add i64 %5084, 4
  store i64 %5085, i64* %PC
  %5086 = inttoptr i64 %5083 to i32*
  %5087 = load i32, i32* %5086
  %5088 = sext i32 %5087 to i64
  store i64 %5088, i64* %RCX, align 8, !tbaa !2428
  %5089 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5090 = load i64, i64* %RAX
  %5091 = load i64, i64* %RCX
  %5092 = mul i64 %5091, 8
  %5093 = add i64 %5092, %5090
  %5094 = load i64, i64* %PC
  %5095 = add i64 %5094, 5
  store i64 %5095, i64* %PC
  %5096 = inttoptr i64 %5093 to double*
  %5097 = load double, double* %5096
  %5098 = bitcast i8* %5089 to double*
  store double %5097, double* %5098, align 1, !tbaa !2452
  %5099 = getelementptr inbounds i8, i8* %5089, i64 8
  %5100 = bitcast i8* %5099 to double*
  store double 0.000000e+00, double* %5100, align 1, !tbaa !2452
  %5101 = load i64, i64* %RBP
  %5102 = sub i64 %5101, 80
  %5103 = load i64, i64* %PC
  %5104 = add i64 %5103, 4
  store i64 %5104, i64* %PC
  %5105 = inttoptr i64 %5102 to i64*
  %5106 = load i64, i64* %5105
  store i64 %5106, i64* %RAX, align 8, !tbaa !2428
  %5107 = load i64, i64* %RBP
  %5108 = sub i64 %5107, 100
  %5109 = load i64, i64* %PC
  %5110 = add i64 %5109, 4
  store i64 %5110, i64* %PC
  %5111 = inttoptr i64 %5108 to i32*
  %5112 = load i32, i32* %5111
  %5113 = sext i32 %5112 to i64
  store i64 %5113, i64* %RCX, align 8, !tbaa !2428
  %5114 = load i64, i64* %RCX
  %5115 = load i64, i64* %PC
  %5116 = add i64 %5115, 7
  store i64 %5116, i64* %PC
  %5117 = sext i64 %5114 to i128
  %5118 = and i128 %5117, -18446744073709551616
  %5119 = zext i64 %5114 to i128
  %5120 = or i128 %5118, %5119
  %5121 = mul nsw i128 520, %5120
  %5122 = trunc i128 %5121 to i64
  store i64 %5122, i64* %RCX, align 8, !tbaa !2428
  %5123 = sext i64 %5122 to i128
  %5124 = icmp ne i128 %5123, %5121
  %5125 = zext i1 %5124 to i8
  %5126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5125, i8* %5126, align 1, !tbaa !2432
  %5127 = trunc i128 %5121 to i32
  %5128 = and i32 %5127, 255
  %5129 = call i32 @llvm.ctpop.i32(i32 %5128) #16
  %5130 = trunc i32 %5129 to i8
  %5131 = and i8 %5130, 1
  %5132 = xor i8 %5131, 1
  %5133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5132, i8* %5133, align 1, !tbaa !2446
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5134, align 1, !tbaa !2447
  %5135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5135, align 1, !tbaa !2448
  %5136 = lshr i64 %5122, 63
  %5137 = trunc i64 %5136 to i8
  %5138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5137, i8* %5138, align 1, !tbaa !2449
  %5139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5125, i8* %5139, align 1, !tbaa !2450
  %5140 = load i64, i64* %RAX
  %5141 = load i64, i64* %RCX
  %5142 = load i64, i64* %PC
  %5143 = add i64 %5142, 3
  store i64 %5143, i64* %PC
  %5144 = add i64 %5141, %5140
  store i64 %5144, i64* %RAX, align 8, !tbaa !2428
  %5145 = icmp ult i64 %5144, %5140
  %5146 = icmp ult i64 %5144, %5141
  %5147 = or i1 %5145, %5146
  %5148 = zext i1 %5147 to i8
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5148, i8* %5149, align 1, !tbaa !2432
  %5150 = trunc i64 %5144 to i32
  %5151 = and i32 %5150, 255
  %5152 = call i32 @llvm.ctpop.i32(i32 %5151) #16
  %5153 = trunc i32 %5152 to i8
  %5154 = and i8 %5153, 1
  %5155 = xor i8 %5154, 1
  %5156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5155, i8* %5156, align 1, !tbaa !2446
  %5157 = xor i64 %5141, %5140
  %5158 = xor i64 %5157, %5144
  %5159 = lshr i64 %5158, 4
  %5160 = trunc i64 %5159 to i8
  %5161 = and i8 %5160, 1
  %5162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5161, i8* %5162, align 1, !tbaa !2447
  %5163 = icmp eq i64 %5144, 0
  %5164 = zext i1 %5163 to i8
  %5165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5164, i8* %5165, align 1, !tbaa !2448
  %5166 = lshr i64 %5144, 63
  %5167 = trunc i64 %5166 to i8
  %5168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5167, i8* %5168, align 1, !tbaa !2449
  %5169 = lshr i64 %5140, 63
  %5170 = lshr i64 %5141, 63
  %5171 = xor i64 %5166, %5169
  %5172 = xor i64 %5166, %5170
  %5173 = add nuw nsw i64 %5171, %5172
  %5174 = icmp eq i64 %5173, 2
  %5175 = zext i1 %5174 to i8
  %5176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5175, i8* %5176, align 1, !tbaa !2450
  %5177 = load i64, i64* %RBP
  %5178 = sub i64 %5177, 108
  %5179 = load i64, i64* %PC
  %5180 = add i64 %5179, 4
  store i64 %5180, i64* %PC
  %5181 = inttoptr i64 %5178 to i32*
  %5182 = load i32, i32* %5181
  %5183 = sext i32 %5182 to i64
  store i64 %5183, i64* %RCX, align 8, !tbaa !2428
  %5184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5186 = load i64, i64* %RAX
  %5187 = load i64, i64* %RCX
  %5188 = mul i64 %5187, 8
  %5189 = add i64 %5188, %5186
  %5190 = load i64, i64* %PC
  %5191 = add i64 %5190, 5
  store i64 %5191, i64* %PC
  %5192 = bitcast i8* %5185 to double*
  %5193 = load double, double* %5192, align 1
  %5194 = getelementptr inbounds i8, i8* %5185, i64 8
  %5195 = bitcast i8* %5194 to i64*
  %5196 = load i64, i64* %5195, align 1
  %5197 = inttoptr i64 %5189 to double*
  %5198 = load double, double* %5197
  %5199 = fsub double %5193, %5198
  %5200 = bitcast i8* %5184 to double*
  store double %5199, double* %5200, align 1, !tbaa !2452
  %5201 = getelementptr inbounds i8, i8* %5184, i64 8
  %5202 = bitcast i8* %5201 to i64*
  store i64 %5196, i64* %5202, align 1, !tbaa !2452
  %5203 = load i64, i64* %RBP
  %5204 = add i64 %5203, 40
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 4
  store i64 %5206, i64* %PC
  %5207 = inttoptr i64 %5204 to i64*
  %5208 = load i64, i64* %5207
  store i64 %5208, i64* %RAX, align 8, !tbaa !2428
  %5209 = load i64, i64* %RBP
  %5210 = sub i64 %5209, 100
  %5211 = load i64, i64* %PC
  %5212 = add i64 %5211, 4
  store i64 %5212, i64* %PC
  %5213 = inttoptr i64 %5210 to i32*
  %5214 = load i32, i32* %5213
  %5215 = sext i32 %5214 to i64
  store i64 %5215, i64* %RCX, align 8, !tbaa !2428
  %5216 = load i64, i64* %RCX
  %5217 = load i64, i64* %PC
  %5218 = add i64 %5217, 7
  store i64 %5218, i64* %PC
  %5219 = sext i64 %5216 to i128
  %5220 = and i128 %5219, -18446744073709551616
  %5221 = zext i64 %5216 to i128
  %5222 = or i128 %5220, %5221
  %5223 = mul nsw i128 33800, %5222
  %5224 = trunc i128 %5223 to i64
  store i64 %5224, i64* %RCX, align 8, !tbaa !2428
  %5225 = sext i64 %5224 to i128
  %5226 = icmp ne i128 %5225, %5223
  %5227 = zext i1 %5226 to i8
  %5228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5227, i8* %5228, align 1, !tbaa !2432
  %5229 = trunc i128 %5223 to i32
  %5230 = and i32 %5229, 255
  %5231 = call i32 @llvm.ctpop.i32(i32 %5230) #16
  %5232 = trunc i32 %5231 to i8
  %5233 = and i8 %5232, 1
  %5234 = xor i8 %5233, 1
  %5235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5234, i8* %5235, align 1, !tbaa !2446
  %5236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5236, align 1, !tbaa !2447
  %5237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5237, align 1, !tbaa !2448
  %5238 = lshr i64 %5224, 63
  %5239 = trunc i64 %5238 to i8
  %5240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5239, i8* %5240, align 1, !tbaa !2449
  %5241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5227, i8* %5241, align 1, !tbaa !2450
  %5242 = load i64, i64* %RAX
  %5243 = load i64, i64* %RCX
  %5244 = load i64, i64* %PC
  %5245 = add i64 %5244, 3
  store i64 %5245, i64* %PC
  %5246 = add i64 %5243, %5242
  store i64 %5246, i64* %RAX, align 8, !tbaa !2428
  %5247 = icmp ult i64 %5246, %5242
  %5248 = icmp ult i64 %5246, %5243
  %5249 = or i1 %5247, %5248
  %5250 = zext i1 %5249 to i8
  %5251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5250, i8* %5251, align 1, !tbaa !2432
  %5252 = trunc i64 %5246 to i32
  %5253 = and i32 %5252, 255
  %5254 = call i32 @llvm.ctpop.i32(i32 %5253) #16
  %5255 = trunc i32 %5254 to i8
  %5256 = and i8 %5255, 1
  %5257 = xor i8 %5256, 1
  %5258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5257, i8* %5258, align 1, !tbaa !2446
  %5259 = xor i64 %5243, %5242
  %5260 = xor i64 %5259, %5246
  %5261 = lshr i64 %5260, 4
  %5262 = trunc i64 %5261 to i8
  %5263 = and i8 %5262, 1
  %5264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5263, i8* %5264, align 1, !tbaa !2447
  %5265 = icmp eq i64 %5246, 0
  %5266 = zext i1 %5265 to i8
  %5267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5266, i8* %5267, align 1, !tbaa !2448
  %5268 = lshr i64 %5246, 63
  %5269 = trunc i64 %5268 to i8
  %5270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5269, i8* %5270, align 1, !tbaa !2449
  %5271 = lshr i64 %5242, 63
  %5272 = lshr i64 %5243, 63
  %5273 = xor i64 %5268, %5271
  %5274 = xor i64 %5268, %5272
  %5275 = add nuw nsw i64 %5273, %5274
  %5276 = icmp eq i64 %5275, 2
  %5277 = zext i1 %5276 to i8
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5277, i8* %5278, align 1, !tbaa !2450
  %5279 = load i64, i64* %RBP
  %5280 = sub i64 %5279, 52
  %5281 = load i64, i64* %PC
  %5282 = add i64 %5281, 4
  store i64 %5282, i64* %PC
  %5283 = inttoptr i64 %5280 to i32*
  %5284 = load i32, i32* %5283
  %5285 = sext i32 %5284 to i64
  store i64 %5285, i64* %RCX, align 8, !tbaa !2428
  %5286 = load i64, i64* %RCX
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 7
  store i64 %5288, i64* %PC
  %5289 = sext i64 %5286 to i128
  %5290 = and i128 %5289, -18446744073709551616
  %5291 = zext i64 %5286 to i128
  %5292 = or i128 %5290, %5291
  %5293 = mul nsw i128 520, %5292
  %5294 = trunc i128 %5293 to i64
  store i64 %5294, i64* %RCX, align 8, !tbaa !2428
  %5295 = sext i64 %5294 to i128
  %5296 = icmp ne i128 %5295, %5293
  %5297 = zext i1 %5296 to i8
  %5298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5297, i8* %5298, align 1, !tbaa !2432
  %5299 = trunc i128 %5293 to i32
  %5300 = and i32 %5299, 255
  %5301 = call i32 @llvm.ctpop.i32(i32 %5300) #16
  %5302 = trunc i32 %5301 to i8
  %5303 = and i8 %5302, 1
  %5304 = xor i8 %5303, 1
  %5305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5304, i8* %5305, align 1, !tbaa !2446
  %5306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5306, align 1, !tbaa !2447
  %5307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5307, align 1, !tbaa !2448
  %5308 = lshr i64 %5294, 63
  %5309 = trunc i64 %5308 to i8
  %5310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5309, i8* %5310, align 1, !tbaa !2449
  %5311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5297, i8* %5311, align 1, !tbaa !2450
  %5312 = load i64, i64* %RAX
  %5313 = load i64, i64* %RCX
  %5314 = load i64, i64* %PC
  %5315 = add i64 %5314, 3
  store i64 %5315, i64* %PC
  %5316 = add i64 %5313, %5312
  store i64 %5316, i64* %RAX, align 8, !tbaa !2428
  %5317 = icmp ult i64 %5316, %5312
  %5318 = icmp ult i64 %5316, %5313
  %5319 = or i1 %5317, %5318
  %5320 = zext i1 %5319 to i8
  %5321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5320, i8* %5321, align 1, !tbaa !2432
  %5322 = trunc i64 %5316 to i32
  %5323 = and i32 %5322, 255
  %5324 = call i32 @llvm.ctpop.i32(i32 %5323) #16
  %5325 = trunc i32 %5324 to i8
  %5326 = and i8 %5325, 1
  %5327 = xor i8 %5326, 1
  %5328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5327, i8* %5328, align 1, !tbaa !2446
  %5329 = xor i64 %5313, %5312
  %5330 = xor i64 %5329, %5316
  %5331 = lshr i64 %5330, 4
  %5332 = trunc i64 %5331 to i8
  %5333 = and i8 %5332, 1
  %5334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5333, i8* %5334, align 1, !tbaa !2447
  %5335 = icmp eq i64 %5316, 0
  %5336 = zext i1 %5335 to i8
  %5337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5336, i8* %5337, align 1, !tbaa !2448
  %5338 = lshr i64 %5316, 63
  %5339 = trunc i64 %5338 to i8
  %5340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5339, i8* %5340, align 1, !tbaa !2449
  %5341 = lshr i64 %5312, 63
  %5342 = lshr i64 %5313, 63
  %5343 = xor i64 %5338, %5341
  %5344 = xor i64 %5338, %5342
  %5345 = add nuw nsw i64 %5343, %5344
  %5346 = icmp eq i64 %5345, 2
  %5347 = zext i1 %5346 to i8
  %5348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5347, i8* %5348, align 1, !tbaa !2450
  %5349 = load i64, i64* %RBP
  %5350 = sub i64 %5349, 108
  %5351 = load i64, i64* %PC
  %5352 = add i64 %5351, 3
  store i64 %5352, i64* %PC
  %5353 = inttoptr i64 %5350 to i32*
  %5354 = load i32, i32* %5353
  %5355 = zext i32 %5354 to i64
  store i64 %5355, i64* %RDX, align 8, !tbaa !2428
  %5356 = load i64, i64* %RDX
  %5357 = load i64, i64* %PC
  %5358 = add i64 %5357, 3
  store i64 %5358, i64* %PC
  %5359 = trunc i64 %5356 to i32
  %5360 = add i32 1, %5359
  %5361 = zext i32 %5360 to i64
  store i64 %5361, i64* %RDX, align 8, !tbaa !2428
  %5362 = icmp ult i32 %5360, %5359
  %5363 = icmp ult i32 %5360, 1
  %5364 = or i1 %5362, %5363
  %5365 = zext i1 %5364 to i8
  %5366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5365, i8* %5366, align 1, !tbaa !2432
  %5367 = and i32 %5360, 255
  %5368 = call i32 @llvm.ctpop.i32(i32 %5367) #16
  %5369 = trunc i32 %5368 to i8
  %5370 = and i8 %5369, 1
  %5371 = xor i8 %5370, 1
  %5372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5371, i8* %5372, align 1, !tbaa !2446
  %5373 = xor i64 1, %5356
  %5374 = trunc i64 %5373 to i32
  %5375 = xor i32 %5374, %5360
  %5376 = lshr i32 %5375, 4
  %5377 = trunc i32 %5376 to i8
  %5378 = and i8 %5377, 1
  %5379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5378, i8* %5379, align 1, !tbaa !2447
  %5380 = icmp eq i32 %5360, 0
  %5381 = zext i1 %5380 to i8
  %5382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5381, i8* %5382, align 1, !tbaa !2448
  %5383 = lshr i32 %5360, 31
  %5384 = trunc i32 %5383 to i8
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5384, i8* %5385, align 1, !tbaa !2449
  %5386 = lshr i32 %5359, 31
  %5387 = xor i32 %5383, %5386
  %5388 = add nuw nsw i32 %5387, %5383
  %5389 = icmp eq i32 %5388, 2
  %5390 = zext i1 %5389 to i8
  %5391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5390, i8* %5391, align 1, !tbaa !2450
  %5392 = load i32, i32* %EDX
  %5393 = zext i32 %5392 to i64
  %5394 = load i64, i64* %PC
  %5395 = add i64 %5394, 3
  store i64 %5395, i64* %PC
  %5396 = shl i64 %5393, 32
  %5397 = ashr exact i64 %5396, 32
  store i64 %5397, i64* %RCX, align 8, !tbaa !2428
  %5398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5399 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5400 = load i64, i64* %RAX
  %5401 = load i64, i64* %RCX
  %5402 = mul i64 %5401, 8
  %5403 = add i64 %5402, %5400
  %5404 = load i64, i64* %PC
  %5405 = add i64 %5404, 5
  store i64 %5405, i64* %PC
  %5406 = bitcast i8* %5399 to double*
  %5407 = load double, double* %5406, align 1
  %5408 = getelementptr inbounds i8, i8* %5399, i64 8
  %5409 = bitcast i8* %5408 to i64*
  %5410 = load i64, i64* %5409, align 1
  %5411 = inttoptr i64 %5403 to double*
  %5412 = load double, double* %5411
  %5413 = fadd double %5407, %5412
  %5414 = bitcast i8* %5398 to double*
  store double %5413, double* %5414, align 1, !tbaa !2452
  %5415 = getelementptr inbounds i8, i8* %5398, i64 8
  %5416 = bitcast i8* %5415 to i64*
  store i64 %5410, i64* %5416, align 1, !tbaa !2452
  %5417 = load i64, i64* %RBP
  %5418 = add i64 %5417, 40
  %5419 = load i64, i64* %PC
  %5420 = add i64 %5419, 4
  store i64 %5420, i64* %PC
  %5421 = inttoptr i64 %5418 to i64*
  %5422 = load i64, i64* %5421
  store i64 %5422, i64* %RAX, align 8, !tbaa !2428
  %5423 = load i64, i64* %RBP
  %5424 = sub i64 %5423, 100
  %5425 = load i64, i64* %PC
  %5426 = add i64 %5425, 4
  store i64 %5426, i64* %PC
  %5427 = inttoptr i64 %5424 to i32*
  %5428 = load i32, i32* %5427
  %5429 = sext i32 %5428 to i64
  store i64 %5429, i64* %RCX, align 8, !tbaa !2428
  %5430 = load i64, i64* %RCX
  %5431 = load i64, i64* %PC
  %5432 = add i64 %5431, 7
  store i64 %5432, i64* %PC
  %5433 = sext i64 %5430 to i128
  %5434 = and i128 %5433, -18446744073709551616
  %5435 = zext i64 %5430 to i128
  %5436 = or i128 %5434, %5435
  %5437 = mul nsw i128 33800, %5436
  %5438 = trunc i128 %5437 to i64
  store i64 %5438, i64* %RCX, align 8, !tbaa !2428
  %5439 = sext i64 %5438 to i128
  %5440 = icmp ne i128 %5439, %5437
  %5441 = zext i1 %5440 to i8
  %5442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5441, i8* %5442, align 1, !tbaa !2432
  %5443 = trunc i128 %5437 to i32
  %5444 = and i32 %5443, 255
  %5445 = call i32 @llvm.ctpop.i32(i32 %5444) #16
  %5446 = trunc i32 %5445 to i8
  %5447 = and i8 %5446, 1
  %5448 = xor i8 %5447, 1
  %5449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5448, i8* %5449, align 1, !tbaa !2446
  %5450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5450, align 1, !tbaa !2447
  %5451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5451, align 1, !tbaa !2448
  %5452 = lshr i64 %5438, 63
  %5453 = trunc i64 %5452 to i8
  %5454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5453, i8* %5454, align 1, !tbaa !2449
  %5455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5441, i8* %5455, align 1, !tbaa !2450
  %5456 = load i64, i64* %RAX
  %5457 = load i64, i64* %RCX
  %5458 = load i64, i64* %PC
  %5459 = add i64 %5458, 3
  store i64 %5459, i64* %PC
  %5460 = add i64 %5457, %5456
  store i64 %5460, i64* %RAX, align 8, !tbaa !2428
  %5461 = icmp ult i64 %5460, %5456
  %5462 = icmp ult i64 %5460, %5457
  %5463 = or i1 %5461, %5462
  %5464 = zext i1 %5463 to i8
  %5465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5464, i8* %5465, align 1, !tbaa !2432
  %5466 = trunc i64 %5460 to i32
  %5467 = and i32 %5466, 255
  %5468 = call i32 @llvm.ctpop.i32(i32 %5467) #16
  %5469 = trunc i32 %5468 to i8
  %5470 = and i8 %5469, 1
  %5471 = xor i8 %5470, 1
  %5472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5471, i8* %5472, align 1, !tbaa !2446
  %5473 = xor i64 %5457, %5456
  %5474 = xor i64 %5473, %5460
  %5475 = lshr i64 %5474, 4
  %5476 = trunc i64 %5475 to i8
  %5477 = and i8 %5476, 1
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5477, i8* %5478, align 1, !tbaa !2447
  %5479 = icmp eq i64 %5460, 0
  %5480 = zext i1 %5479 to i8
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5480, i8* %5481, align 1, !tbaa !2448
  %5482 = lshr i64 %5460, 63
  %5483 = trunc i64 %5482 to i8
  %5484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5483, i8* %5484, align 1, !tbaa !2449
  %5485 = lshr i64 %5456, 63
  %5486 = lshr i64 %5457, 63
  %5487 = xor i64 %5482, %5485
  %5488 = xor i64 %5482, %5486
  %5489 = add nuw nsw i64 %5487, %5488
  %5490 = icmp eq i64 %5489, 2
  %5491 = zext i1 %5490 to i8
  %5492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5491, i8* %5492, align 1, !tbaa !2450
  %5493 = load i64, i64* %RBP
  %5494 = sub i64 %5493, 52
  %5495 = load i64, i64* %PC
  %5496 = add i64 %5495, 4
  store i64 %5496, i64* %PC
  %5497 = inttoptr i64 %5494 to i32*
  %5498 = load i32, i32* %5497
  %5499 = sext i32 %5498 to i64
  store i64 %5499, i64* %RCX, align 8, !tbaa !2428
  %5500 = load i64, i64* %RCX
  %5501 = load i64, i64* %PC
  %5502 = add i64 %5501, 7
  store i64 %5502, i64* %PC
  %5503 = sext i64 %5500 to i128
  %5504 = and i128 %5503, -18446744073709551616
  %5505 = zext i64 %5500 to i128
  %5506 = or i128 %5504, %5505
  %5507 = mul nsw i128 520, %5506
  %5508 = trunc i128 %5507 to i64
  store i64 %5508, i64* %RCX, align 8, !tbaa !2428
  %5509 = sext i64 %5508 to i128
  %5510 = icmp ne i128 %5509, %5507
  %5511 = zext i1 %5510 to i8
  %5512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5511, i8* %5512, align 1, !tbaa !2432
  %5513 = trunc i128 %5507 to i32
  %5514 = and i32 %5513, 255
  %5515 = call i32 @llvm.ctpop.i32(i32 %5514) #16
  %5516 = trunc i32 %5515 to i8
  %5517 = and i8 %5516, 1
  %5518 = xor i8 %5517, 1
  %5519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5518, i8* %5519, align 1, !tbaa !2446
  %5520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5520, align 1, !tbaa !2447
  %5521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5521, align 1, !tbaa !2448
  %5522 = lshr i64 %5508, 63
  %5523 = trunc i64 %5522 to i8
  %5524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5523, i8* %5524, align 1, !tbaa !2449
  %5525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5511, i8* %5525, align 1, !tbaa !2450
  %5526 = load i64, i64* %RAX
  %5527 = load i64, i64* %RCX
  %5528 = load i64, i64* %PC
  %5529 = add i64 %5528, 3
  store i64 %5529, i64* %PC
  %5530 = add i64 %5527, %5526
  store i64 %5530, i64* %RAX, align 8, !tbaa !2428
  %5531 = icmp ult i64 %5530, %5526
  %5532 = icmp ult i64 %5530, %5527
  %5533 = or i1 %5531, %5532
  %5534 = zext i1 %5533 to i8
  %5535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5534, i8* %5535, align 1, !tbaa !2432
  %5536 = trunc i64 %5530 to i32
  %5537 = and i32 %5536, 255
  %5538 = call i32 @llvm.ctpop.i32(i32 %5537) #16
  %5539 = trunc i32 %5538 to i8
  %5540 = and i8 %5539, 1
  %5541 = xor i8 %5540, 1
  %5542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5541, i8* %5542, align 1, !tbaa !2446
  %5543 = xor i64 %5527, %5526
  %5544 = xor i64 %5543, %5530
  %5545 = lshr i64 %5544, 4
  %5546 = trunc i64 %5545 to i8
  %5547 = and i8 %5546, 1
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5547, i8* %5548, align 1, !tbaa !2447
  %5549 = icmp eq i64 %5530, 0
  %5550 = zext i1 %5549 to i8
  %5551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5550, i8* %5551, align 1, !tbaa !2448
  %5552 = lshr i64 %5530, 63
  %5553 = trunc i64 %5552 to i8
  %5554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5553, i8* %5554, align 1, !tbaa !2449
  %5555 = lshr i64 %5526, 63
  %5556 = lshr i64 %5527, 63
  %5557 = xor i64 %5552, %5555
  %5558 = xor i64 %5552, %5556
  %5559 = add nuw nsw i64 %5557, %5558
  %5560 = icmp eq i64 %5559, 2
  %5561 = zext i1 %5560 to i8
  %5562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5561, i8* %5562, align 1, !tbaa !2450
  %5563 = load i64, i64* %RBP
  %5564 = sub i64 %5563, 108
  %5565 = load i64, i64* %PC
  %5566 = add i64 %5565, 4
  store i64 %5566, i64* %PC
  %5567 = inttoptr i64 %5564 to i32*
  %5568 = load i32, i32* %5567
  %5569 = sext i32 %5568 to i64
  store i64 %5569, i64* %RCX, align 8, !tbaa !2428
  %5570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5572 = load i64, i64* %RAX
  %5573 = load i64, i64* %RCX
  %5574 = mul i64 %5573, 8
  %5575 = add i64 %5574, %5572
  %5576 = load i64, i64* %PC
  %5577 = add i64 %5576, 5
  store i64 %5577, i64* %PC
  %5578 = bitcast i8* %5571 to double*
  %5579 = load double, double* %5578, align 1
  %5580 = getelementptr inbounds i8, i8* %5571, i64 8
  %5581 = bitcast i8* %5580 to i64*
  %5582 = load i64, i64* %5581, align 1
  %5583 = inttoptr i64 %5575 to double*
  %5584 = load double, double* %5583
  %5585 = fsub double %5579, %5584
  %5586 = bitcast i8* %5570 to double*
  store double %5585, double* %5586, align 1, !tbaa !2452
  %5587 = getelementptr inbounds i8, i8* %5570, i64 8
  %5588 = bitcast i8* %5587 to i64*
  store i64 %5582, i64* %5588, align 1, !tbaa !2452
  %5589 = load i64, i64* %RBP
  %5590 = sub i64 %5589, 96
  %5591 = load i64, i64* %PC
  %5592 = add i64 %5591, 4
  store i64 %5592, i64* %PC
  %5593 = inttoptr i64 %5590 to i64*
  %5594 = load i64, i64* %5593
  store i64 %5594, i64* %RAX, align 8, !tbaa !2428
  %5595 = load i64, i64* %RBP
  %5596 = sub i64 %5595, 100
  %5597 = load i64, i64* %PC
  %5598 = add i64 %5597, 4
  store i64 %5598, i64* %PC
  %5599 = inttoptr i64 %5596 to i32*
  %5600 = load i32, i32* %5599
  %5601 = sext i32 %5600 to i64
  store i64 %5601, i64* %RCX, align 8, !tbaa !2428
  %5602 = load i64, i64* %RCX
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 7
  store i64 %5604, i64* %PC
  %5605 = sext i64 %5602 to i128
  %5606 = and i128 %5605, -18446744073709551616
  %5607 = zext i64 %5602 to i128
  %5608 = or i128 %5606, %5607
  %5609 = mul nsw i128 520, %5608
  %5610 = trunc i128 %5609 to i64
  store i64 %5610, i64* %RCX, align 8, !tbaa !2428
  %5611 = sext i64 %5610 to i128
  %5612 = icmp ne i128 %5611, %5609
  %5613 = zext i1 %5612 to i8
  %5614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5613, i8* %5614, align 1, !tbaa !2432
  %5615 = trunc i128 %5609 to i32
  %5616 = and i32 %5615, 255
  %5617 = call i32 @llvm.ctpop.i32(i32 %5616) #16
  %5618 = trunc i32 %5617 to i8
  %5619 = and i8 %5618, 1
  %5620 = xor i8 %5619, 1
  %5621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5620, i8* %5621, align 1, !tbaa !2446
  %5622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5622, align 1, !tbaa !2447
  %5623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5623, align 1, !tbaa !2448
  %5624 = lshr i64 %5610, 63
  %5625 = trunc i64 %5624 to i8
  %5626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5625, i8* %5626, align 1, !tbaa !2449
  %5627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5613, i8* %5627, align 1, !tbaa !2450
  %5628 = load i64, i64* %RAX
  %5629 = load i64, i64* %RCX
  %5630 = load i64, i64* %PC
  %5631 = add i64 %5630, 3
  store i64 %5631, i64* %PC
  %5632 = add i64 %5629, %5628
  store i64 %5632, i64* %RAX, align 8, !tbaa !2428
  %5633 = icmp ult i64 %5632, %5628
  %5634 = icmp ult i64 %5632, %5629
  %5635 = or i1 %5633, %5634
  %5636 = zext i1 %5635 to i8
  %5637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5636, i8* %5637, align 1, !tbaa !2432
  %5638 = trunc i64 %5632 to i32
  %5639 = and i32 %5638, 255
  %5640 = call i32 @llvm.ctpop.i32(i32 %5639) #16
  %5641 = trunc i32 %5640 to i8
  %5642 = and i8 %5641, 1
  %5643 = xor i8 %5642, 1
  %5644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5643, i8* %5644, align 1, !tbaa !2446
  %5645 = xor i64 %5629, %5628
  %5646 = xor i64 %5645, %5632
  %5647 = lshr i64 %5646, 4
  %5648 = trunc i64 %5647 to i8
  %5649 = and i8 %5648, 1
  %5650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5649, i8* %5650, align 1, !tbaa !2447
  %5651 = icmp eq i64 %5632, 0
  %5652 = zext i1 %5651 to i8
  %5653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5652, i8* %5653, align 1, !tbaa !2448
  %5654 = lshr i64 %5632, 63
  %5655 = trunc i64 %5654 to i8
  %5656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5655, i8* %5656, align 1, !tbaa !2449
  %5657 = lshr i64 %5628, 63
  %5658 = lshr i64 %5629, 63
  %5659 = xor i64 %5654, %5657
  %5660 = xor i64 %5654, %5658
  %5661 = add nuw nsw i64 %5659, %5660
  %5662 = icmp eq i64 %5661, 2
  %5663 = zext i1 %5662 to i8
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5663, i8* %5664, align 1, !tbaa !2450
  %5665 = load i64, i64* %RBP
  %5666 = sub i64 %5665, 104
  %5667 = load i64, i64* %PC
  %5668 = add i64 %5667, 4
  store i64 %5668, i64* %PC
  %5669 = inttoptr i64 %5666 to i32*
  %5670 = load i32, i32* %5669
  %5671 = sext i32 %5670 to i64
  store i64 %5671, i64* %RCX, align 8, !tbaa !2428
  %5672 = load i64, i64* %RAX
  %5673 = load i64, i64* %RCX
  %5674 = mul i64 %5673, 8
  %5675 = add i64 %5674, %5672
  %5676 = bitcast %union.vec128_t* %XMM0 to i8*
  %5677 = load i64, i64* %PC
  %5678 = add i64 %5677, 5
  store i64 %5678, i64* %PC
  %5679 = bitcast i8* %5676 to double*
  %5680 = load double, double* %5679, align 1
  %5681 = inttoptr i64 %5675 to double*
  store double %5680, double* %5681
  %5682 = load i64, i64* %RBP
  %5683 = add i64 %5682, 88
  %5684 = load i64, i64* %PC
  %5685 = add i64 %5684, 4
  store i64 %5685, i64* %PC
  %5686 = inttoptr i64 %5683 to i64*
  %5687 = load i64, i64* %5686
  store i64 %5687, i64* %RAX, align 8, !tbaa !2428
  %5688 = load i64, i64* %RBP
  %5689 = sub i64 %5688, 52
  %5690 = load i64, i64* %PC
  %5691 = add i64 %5690, 4
  store i64 %5691, i64* %PC
  %5692 = inttoptr i64 %5689 to i32*
  %5693 = load i32, i32* %5692
  %5694 = sext i32 %5693 to i64
  store i64 %5694, i64* %RCX, align 8, !tbaa !2428
  %5695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5696 = load i64, i64* %RAX
  %5697 = load i64, i64* %RCX
  %5698 = mul i64 %5697, 8
  %5699 = add i64 %5698, %5696
  %5700 = load i64, i64* %PC
  %5701 = add i64 %5700, 5
  store i64 %5701, i64* %PC
  %5702 = inttoptr i64 %5699 to double*
  %5703 = load double, double* %5702
  %5704 = bitcast i8* %5695 to double*
  store double %5703, double* %5704, align 1, !tbaa !2452
  %5705 = getelementptr inbounds i8, i8* %5695, i64 8
  %5706 = bitcast i8* %5705 to double*
  store double 0.000000e+00, double* %5706, align 1, !tbaa !2452
  %5707 = load i64, i64* %RBP
  %5708 = add i64 %5707, 96
  %5709 = load i64, i64* %PC
  %5710 = add i64 %5709, 4
  store i64 %5710, i64* %PC
  %5711 = inttoptr i64 %5708 to i64*
  %5712 = load i64, i64* %5711
  store i64 %5712, i64* %RAX, align 8, !tbaa !2428
  %5713 = load i64, i64* %RBP
  %5714 = sub i64 %5713, 104
  %5715 = load i64, i64* %PC
  %5716 = add i64 %5715, 4
  store i64 %5716, i64* %PC
  %5717 = inttoptr i64 %5714 to i32*
  %5718 = load i32, i32* %5717
  %5719 = sext i32 %5718 to i64
  store i64 %5719, i64* %RCX, align 8, !tbaa !2428
  %5720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5721 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5722 = load i64, i64* %RAX
  %5723 = load i64, i64* %RCX
  %5724 = mul i64 %5723, 8
  %5725 = add i64 %5724, %5722
  %5726 = load i64, i64* %PC
  %5727 = add i64 %5726, 5
  store i64 %5727, i64* %PC
  %5728 = bitcast i8* %5721 to double*
  %5729 = load double, double* %5728, align 1
  %5730 = getelementptr inbounds i8, i8* %5721, i64 8
  %5731 = bitcast i8* %5730 to i64*
  %5732 = load i64, i64* %5731, align 1
  %5733 = inttoptr i64 %5725 to double*
  %5734 = load double, double* %5733
  %5735 = fdiv double %5729, %5734
  %5736 = bitcast i8* %5720 to double*
  store double %5735, double* %5736, align 1, !tbaa !2452
  %5737 = getelementptr inbounds i8, i8* %5720, i64 8
  %5738 = bitcast i8* %5737 to i64*
  store i64 %5732, i64* %5738, align 1, !tbaa !2452
  %5739 = load i64, i64* %RBP
  %5740 = add i64 %5739, 24
  %5741 = load i64, i64* %PC
  %5742 = add i64 %5741, 4
  store i64 %5742, i64* %PC
  %5743 = inttoptr i64 %5740 to i64*
  %5744 = load i64, i64* %5743
  store i64 %5744, i64* %RAX, align 8, !tbaa !2428
  %5745 = load i64, i64* %RBP
  %5746 = sub i64 %5745, 100
  %5747 = load i64, i64* %PC
  %5748 = add i64 %5747, 4
  store i64 %5748, i64* %PC
  %5749 = inttoptr i64 %5746 to i32*
  %5750 = load i32, i32* %5749
  %5751 = sext i32 %5750 to i64
  store i64 %5751, i64* %RCX, align 8, !tbaa !2428
  %5752 = load i64, i64* %RCX
  %5753 = load i64, i64* %PC
  %5754 = add i64 %5753, 7
  store i64 %5754, i64* %PC
  %5755 = sext i64 %5752 to i128
  %5756 = and i128 %5755, -18446744073709551616
  %5757 = zext i64 %5752 to i128
  %5758 = or i128 %5756, %5757
  %5759 = mul nsw i128 33800, %5758
  %5760 = trunc i128 %5759 to i64
  store i64 %5760, i64* %RCX, align 8, !tbaa !2428
  %5761 = sext i64 %5760 to i128
  %5762 = icmp ne i128 %5761, %5759
  %5763 = zext i1 %5762 to i8
  %5764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5763, i8* %5764, align 1, !tbaa !2432
  %5765 = trunc i128 %5759 to i32
  %5766 = and i32 %5765, 255
  %5767 = call i32 @llvm.ctpop.i32(i32 %5766) #16
  %5768 = trunc i32 %5767 to i8
  %5769 = and i8 %5768, 1
  %5770 = xor i8 %5769, 1
  %5771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5770, i8* %5771, align 1, !tbaa !2446
  %5772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5772, align 1, !tbaa !2447
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5773, align 1, !tbaa !2448
  %5774 = lshr i64 %5760, 63
  %5775 = trunc i64 %5774 to i8
  %5776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5775, i8* %5776, align 1, !tbaa !2449
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5763, i8* %5777, align 1, !tbaa !2450
  %5778 = load i64, i64* %RAX
  %5779 = load i64, i64* %RCX
  %5780 = load i64, i64* %PC
  %5781 = add i64 %5780, 3
  store i64 %5781, i64* %PC
  %5782 = add i64 %5779, %5778
  store i64 %5782, i64* %RAX, align 8, !tbaa !2428
  %5783 = icmp ult i64 %5782, %5778
  %5784 = icmp ult i64 %5782, %5779
  %5785 = or i1 %5783, %5784
  %5786 = zext i1 %5785 to i8
  %5787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5786, i8* %5787, align 1, !tbaa !2432
  %5788 = trunc i64 %5782 to i32
  %5789 = and i32 %5788, 255
  %5790 = call i32 @llvm.ctpop.i32(i32 %5789) #16
  %5791 = trunc i32 %5790 to i8
  %5792 = and i8 %5791, 1
  %5793 = xor i8 %5792, 1
  %5794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5793, i8* %5794, align 1, !tbaa !2446
  %5795 = xor i64 %5779, %5778
  %5796 = xor i64 %5795, %5782
  %5797 = lshr i64 %5796, 4
  %5798 = trunc i64 %5797 to i8
  %5799 = and i8 %5798, 1
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5799, i8* %5800, align 1, !tbaa !2447
  %5801 = icmp eq i64 %5782, 0
  %5802 = zext i1 %5801 to i8
  %5803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5802, i8* %5803, align 1, !tbaa !2448
  %5804 = lshr i64 %5782, 63
  %5805 = trunc i64 %5804 to i8
  %5806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5805, i8* %5806, align 1, !tbaa !2449
  %5807 = lshr i64 %5778, 63
  %5808 = lshr i64 %5779, 63
  %5809 = xor i64 %5804, %5807
  %5810 = xor i64 %5804, %5808
  %5811 = add nuw nsw i64 %5809, %5810
  %5812 = icmp eq i64 %5811, 2
  %5813 = zext i1 %5812 to i8
  %5814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5813, i8* %5814, align 1, !tbaa !2450
  %5815 = load i64, i64* %RBP
  %5816 = sub i64 %5815, 104
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 4
  store i64 %5818, i64* %PC
  %5819 = inttoptr i64 %5816 to i32*
  %5820 = load i32, i32* %5819
  %5821 = sext i32 %5820 to i64
  store i64 %5821, i64* %RCX, align 8, !tbaa !2428
  %5822 = load i64, i64* %RCX
  %5823 = load i64, i64* %PC
  %5824 = add i64 %5823, 7
  store i64 %5824, i64* %PC
  %5825 = sext i64 %5822 to i128
  %5826 = and i128 %5825, -18446744073709551616
  %5827 = zext i64 %5822 to i128
  %5828 = or i128 %5826, %5827
  %5829 = mul nsw i128 520, %5828
  %5830 = trunc i128 %5829 to i64
  store i64 %5830, i64* %RCX, align 8, !tbaa !2428
  %5831 = sext i64 %5830 to i128
  %5832 = icmp ne i128 %5831, %5829
  %5833 = zext i1 %5832 to i8
  %5834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5833, i8* %5834, align 1, !tbaa !2432
  %5835 = trunc i128 %5829 to i32
  %5836 = and i32 %5835, 255
  %5837 = call i32 @llvm.ctpop.i32(i32 %5836) #16
  %5838 = trunc i32 %5837 to i8
  %5839 = and i8 %5838, 1
  %5840 = xor i8 %5839, 1
  %5841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5840, i8* %5841, align 1, !tbaa !2446
  %5842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5842, align 1, !tbaa !2447
  %5843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5843, align 1, !tbaa !2448
  %5844 = lshr i64 %5830, 63
  %5845 = trunc i64 %5844 to i8
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5845, i8* %5846, align 1, !tbaa !2449
  %5847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5833, i8* %5847, align 1, !tbaa !2450
  %5848 = load i64, i64* %RAX
  %5849 = load i64, i64* %RCX
  %5850 = load i64, i64* %PC
  %5851 = add i64 %5850, 3
  store i64 %5851, i64* %PC
  %5852 = add i64 %5849, %5848
  store i64 %5852, i64* %RAX, align 8, !tbaa !2428
  %5853 = icmp ult i64 %5852, %5848
  %5854 = icmp ult i64 %5852, %5849
  %5855 = or i1 %5853, %5854
  %5856 = zext i1 %5855 to i8
  %5857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5856, i8* %5857, align 1, !tbaa !2432
  %5858 = trunc i64 %5852 to i32
  %5859 = and i32 %5858, 255
  %5860 = call i32 @llvm.ctpop.i32(i32 %5859) #16
  %5861 = trunc i32 %5860 to i8
  %5862 = and i8 %5861, 1
  %5863 = xor i8 %5862, 1
  %5864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5863, i8* %5864, align 1, !tbaa !2446
  %5865 = xor i64 %5849, %5848
  %5866 = xor i64 %5865, %5852
  %5867 = lshr i64 %5866, 4
  %5868 = trunc i64 %5867 to i8
  %5869 = and i8 %5868, 1
  %5870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5869, i8* %5870, align 1, !tbaa !2447
  %5871 = icmp eq i64 %5852, 0
  %5872 = zext i1 %5871 to i8
  %5873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5872, i8* %5873, align 1, !tbaa !2448
  %5874 = lshr i64 %5852, 63
  %5875 = trunc i64 %5874 to i8
  %5876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5875, i8* %5876, align 1, !tbaa !2449
  %5877 = lshr i64 %5848, 63
  %5878 = lshr i64 %5849, 63
  %5879 = xor i64 %5874, %5877
  %5880 = xor i64 %5874, %5878
  %5881 = add nuw nsw i64 %5879, %5880
  %5882 = icmp eq i64 %5881, 2
  %5883 = zext i1 %5882 to i8
  %5884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5883, i8* %5884, align 1, !tbaa !2450
  %5885 = load i64, i64* %RBP
  %5886 = sub i64 %5885, 108
  %5887 = load i64, i64* %PC
  %5888 = add i64 %5887, 4
  store i64 %5888, i64* %PC
  %5889 = inttoptr i64 %5886 to i32*
  %5890 = load i32, i32* %5889
  %5891 = sext i32 %5890 to i64
  store i64 %5891, i64* %RCX, align 8, !tbaa !2428
  %5892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5894 = load i64, i64* %RAX
  %5895 = load i64, i64* %RCX
  %5896 = mul i64 %5895, 8
  %5897 = add i64 %5896, %5894
  %5898 = load i64, i64* %PC
  %5899 = add i64 %5898, 5
  store i64 %5899, i64* %PC
  %5900 = bitcast i8* %5893 to double*
  %5901 = load double, double* %5900, align 1
  %5902 = getelementptr inbounds i8, i8* %5893, i64 8
  %5903 = bitcast i8* %5902 to i64*
  %5904 = load i64, i64* %5903, align 1
  %5905 = inttoptr i64 %5897 to double*
  %5906 = load double, double* %5905
  %5907 = fmul double %5901, %5906
  %5908 = bitcast i8* %5892 to double*
  store double %5907, double* %5908, align 1, !tbaa !2452
  %5909 = getelementptr inbounds i8, i8* %5892, i64 8
  %5910 = bitcast i8* %5909 to i64*
  store i64 %5904, i64* %5910, align 1, !tbaa !2452
  %5911 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5912 = load i64, i64* %RBP
  %5913 = sub i64 %5912, 72
  %5914 = load i64, i64* %PC
  %5915 = add i64 %5914, 5
  store i64 %5915, i64* %PC
  %5916 = inttoptr i64 %5913 to double*
  %5917 = load double, double* %5916
  %5918 = bitcast i8* %5911 to double*
  store double %5917, double* %5918, align 1, !tbaa !2452
  %5919 = getelementptr inbounds i8, i8* %5911, i64 8
  %5920 = bitcast i8* %5919 to double*
  store double 0.000000e+00, double* %5920, align 1, !tbaa !2452
  %5921 = load i64, i64* %RBP
  %5922 = add i64 %5921, 96
  %5923 = load i64, i64* %PC
  %5924 = add i64 %5923, 4
  store i64 %5924, i64* %PC
  %5925 = inttoptr i64 %5922 to i64*
  %5926 = load i64, i64* %5925
  store i64 %5926, i64* %RAX, align 8, !tbaa !2428
  %5927 = load i64, i64* %RBP
  %5928 = sub i64 %5927, 104
  %5929 = load i64, i64* %PC
  %5930 = add i64 %5929, 4
  store i64 %5930, i64* %PC
  %5931 = inttoptr i64 %5928 to i32*
  %5932 = load i32, i32* %5931
  %5933 = sext i32 %5932 to i64
  store i64 %5933, i64* %RCX, align 8, !tbaa !2428
  %5934 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5935 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5936 = load i64, i64* %RAX
  %5937 = load i64, i64* %RCX
  %5938 = mul i64 %5937, 8
  %5939 = add i64 %5938, %5936
  %5940 = load i64, i64* %PC
  %5941 = add i64 %5940, 5
  store i64 %5941, i64* %PC
  %5942 = bitcast i8* %5935 to double*
  %5943 = load double, double* %5942, align 1
  %5944 = getelementptr inbounds i8, i8* %5935, i64 8
  %5945 = bitcast i8* %5944 to i64*
  %5946 = load i64, i64* %5945, align 1
  %5947 = inttoptr i64 %5939 to double*
  %5948 = load double, double* %5947
  %5949 = fdiv double %5943, %5948
  %5950 = bitcast i8* %5934 to double*
  store double %5949, double* %5950, align 1, !tbaa !2452
  %5951 = getelementptr inbounds i8, i8* %5934, i64 8
  %5952 = bitcast i8* %5951 to i64*
  store i64 %5946, i64* %5952, align 1, !tbaa !2452
  %5953 = load i64, i64* %RBP
  %5954 = sub i64 %5953, 96
  %5955 = load i64, i64* %PC
  %5956 = add i64 %5955, 4
  store i64 %5956, i64* %PC
  %5957 = inttoptr i64 %5954 to i64*
  %5958 = load i64, i64* %5957
  store i64 %5958, i64* %RAX, align 8, !tbaa !2428
  %5959 = load i64, i64* %RBP
  %5960 = sub i64 %5959, 100
  %5961 = load i64, i64* %PC
  %5962 = add i64 %5961, 4
  store i64 %5962, i64* %PC
  %5963 = inttoptr i64 %5960 to i32*
  %5964 = load i32, i32* %5963
  %5965 = sext i32 %5964 to i64
  store i64 %5965, i64* %RCX, align 8, !tbaa !2428
  %5966 = load i64, i64* %RCX
  %5967 = load i64, i64* %PC
  %5968 = add i64 %5967, 7
  store i64 %5968, i64* %PC
  %5969 = sext i64 %5966 to i128
  %5970 = and i128 %5969, -18446744073709551616
  %5971 = zext i64 %5966 to i128
  %5972 = or i128 %5970, %5971
  %5973 = mul nsw i128 520, %5972
  %5974 = trunc i128 %5973 to i64
  store i64 %5974, i64* %RCX, align 8, !tbaa !2428
  %5975 = sext i64 %5974 to i128
  %5976 = icmp ne i128 %5975, %5973
  %5977 = zext i1 %5976 to i8
  %5978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5977, i8* %5978, align 1, !tbaa !2432
  %5979 = trunc i128 %5973 to i32
  %5980 = and i32 %5979, 255
  %5981 = call i32 @llvm.ctpop.i32(i32 %5980) #16
  %5982 = trunc i32 %5981 to i8
  %5983 = and i8 %5982, 1
  %5984 = xor i8 %5983, 1
  %5985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5984, i8* %5985, align 1, !tbaa !2446
  %5986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5986, align 1, !tbaa !2447
  %5987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5987, align 1, !tbaa !2448
  %5988 = lshr i64 %5974, 63
  %5989 = trunc i64 %5988 to i8
  %5990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5989, i8* %5990, align 1, !tbaa !2449
  %5991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5977, i8* %5991, align 1, !tbaa !2450
  %5992 = load i64, i64* %RAX
  %5993 = load i64, i64* %RCX
  %5994 = load i64, i64* %PC
  %5995 = add i64 %5994, 3
  store i64 %5995, i64* %PC
  %5996 = add i64 %5993, %5992
  store i64 %5996, i64* %RAX, align 8, !tbaa !2428
  %5997 = icmp ult i64 %5996, %5992
  %5998 = icmp ult i64 %5996, %5993
  %5999 = or i1 %5997, %5998
  %6000 = zext i1 %5999 to i8
  %6001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6000, i8* %6001, align 1, !tbaa !2432
  %6002 = trunc i64 %5996 to i32
  %6003 = and i32 %6002, 255
  %6004 = call i32 @llvm.ctpop.i32(i32 %6003) #16
  %6005 = trunc i32 %6004 to i8
  %6006 = and i8 %6005, 1
  %6007 = xor i8 %6006, 1
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6007, i8* %6008, align 1, !tbaa !2446
  %6009 = xor i64 %5993, %5992
  %6010 = xor i64 %6009, %5996
  %6011 = lshr i64 %6010, 4
  %6012 = trunc i64 %6011 to i8
  %6013 = and i8 %6012, 1
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6013, i8* %6014, align 1, !tbaa !2447
  %6015 = icmp eq i64 %5996, 0
  %6016 = zext i1 %6015 to i8
  %6017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6016, i8* %6017, align 1, !tbaa !2448
  %6018 = lshr i64 %5996, 63
  %6019 = trunc i64 %6018 to i8
  %6020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6019, i8* %6020, align 1, !tbaa !2449
  %6021 = lshr i64 %5992, 63
  %6022 = lshr i64 %5993, 63
  %6023 = xor i64 %6018, %6021
  %6024 = xor i64 %6018, %6022
  %6025 = add nuw nsw i64 %6023, %6024
  %6026 = icmp eq i64 %6025, 2
  %6027 = zext i1 %6026 to i8
  %6028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6027, i8* %6028, align 1, !tbaa !2450
  %6029 = load i64, i64* %RBP
  %6030 = sub i64 %6029, 104
  %6031 = load i64, i64* %PC
  %6032 = add i64 %6031, 4
  store i64 %6032, i64* %PC
  %6033 = inttoptr i64 %6030 to i32*
  %6034 = load i32, i32* %6033
  %6035 = sext i32 %6034 to i64
  store i64 %6035, i64* %RCX, align 8, !tbaa !2428
  %6036 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6037 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6038 = load i64, i64* %RAX
  %6039 = load i64, i64* %RCX
  %6040 = mul i64 %6039, 8
  %6041 = add i64 %6040, %6038
  %6042 = load i64, i64* %PC
  %6043 = add i64 %6042, 5
  store i64 %6043, i64* %PC
  %6044 = bitcast i8* %6037 to double*
  %6045 = load double, double* %6044, align 1
  %6046 = getelementptr inbounds i8, i8* %6037, i64 8
  %6047 = bitcast i8* %6046 to i64*
  %6048 = load i64, i64* %6047, align 1
  %6049 = inttoptr i64 %6041 to double*
  %6050 = load double, double* %6049
  %6051 = fmul double %6045, %6050
  %6052 = bitcast i8* %6036 to double*
  store double %6051, double* %6052, align 1, !tbaa !2452
  %6053 = getelementptr inbounds i8, i8* %6036, i64 8
  %6054 = bitcast i8* %6053 to i64*
  store i64 %6048, i64* %6054, align 1, !tbaa !2452
  %6055 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6057 = bitcast %union.vec128_t* %XMM1 to i8*
  %6058 = load i64, i64* %PC
  %6059 = add i64 %6058, 4
  store i64 %6059, i64* %PC
  %6060 = bitcast i8* %6056 to double*
  %6061 = load double, double* %6060, align 1
  %6062 = getelementptr inbounds i8, i8* %6056, i64 8
  %6063 = bitcast i8* %6062 to i64*
  %6064 = load i64, i64* %6063, align 1
  %6065 = bitcast i8* %6057 to double*
  %6066 = load double, double* %6065, align 1
  %6067 = fsub double %6061, %6066
  %6068 = bitcast i8* %6055 to double*
  store double %6067, double* %6068, align 1, !tbaa !2452
  %6069 = getelementptr inbounds i8, i8* %6055, i64 8
  %6070 = bitcast i8* %6069 to i64*
  store i64 %6064, i64* %6070, align 1, !tbaa !2452
  %6071 = load i64, i64* %RBP
  %6072 = add i64 %6071, 16
  %6073 = load i64, i64* %PC
  %6074 = add i64 %6073, 4
  store i64 %6074, i64* %PC
  %6075 = inttoptr i64 %6072 to i64*
  %6076 = load i64, i64* %6075
  store i64 %6076, i64* %RAX, align 8, !tbaa !2428
  %6077 = load i64, i64* %RBP
  %6078 = sub i64 %6077, 100
  %6079 = load i64, i64* %PC
  %6080 = add i64 %6079, 4
  store i64 %6080, i64* %PC
  %6081 = inttoptr i64 %6078 to i32*
  %6082 = load i32, i32* %6081
  %6083 = sext i32 %6082 to i64
  store i64 %6083, i64* %RCX, align 8, !tbaa !2428
  %6084 = load i64, i64* %RCX
  %6085 = load i64, i64* %PC
  %6086 = add i64 %6085, 7
  store i64 %6086, i64* %PC
  %6087 = sext i64 %6084 to i128
  %6088 = and i128 %6087, -18446744073709551616
  %6089 = zext i64 %6084 to i128
  %6090 = or i128 %6088, %6089
  %6091 = mul nsw i128 520, %6090
  %6092 = trunc i128 %6091 to i64
  store i64 %6092, i64* %RCX, align 8, !tbaa !2428
  %6093 = sext i64 %6092 to i128
  %6094 = icmp ne i128 %6093, %6091
  %6095 = zext i1 %6094 to i8
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6095, i8* %6096, align 1, !tbaa !2432
  %6097 = trunc i128 %6091 to i32
  %6098 = and i32 %6097, 255
  %6099 = call i32 @llvm.ctpop.i32(i32 %6098) #16
  %6100 = trunc i32 %6099 to i8
  %6101 = and i8 %6100, 1
  %6102 = xor i8 %6101, 1
  %6103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6102, i8* %6103, align 1, !tbaa !2446
  %6104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6104, align 1, !tbaa !2447
  %6105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6105, align 1, !tbaa !2448
  %6106 = lshr i64 %6092, 63
  %6107 = trunc i64 %6106 to i8
  %6108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6107, i8* %6108, align 1, !tbaa !2449
  %6109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6095, i8* %6109, align 1, !tbaa !2450
  %6110 = load i64, i64* %RAX
  %6111 = load i64, i64* %RCX
  %6112 = load i64, i64* %PC
  %6113 = add i64 %6112, 3
  store i64 %6113, i64* %PC
  %6114 = add i64 %6111, %6110
  store i64 %6114, i64* %RAX, align 8, !tbaa !2428
  %6115 = icmp ult i64 %6114, %6110
  %6116 = icmp ult i64 %6114, %6111
  %6117 = or i1 %6115, %6116
  %6118 = zext i1 %6117 to i8
  %6119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6118, i8* %6119, align 1, !tbaa !2432
  %6120 = trunc i64 %6114 to i32
  %6121 = and i32 %6120, 255
  %6122 = call i32 @llvm.ctpop.i32(i32 %6121) #16
  %6123 = trunc i32 %6122 to i8
  %6124 = and i8 %6123, 1
  %6125 = xor i8 %6124, 1
  %6126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6125, i8* %6126, align 1, !tbaa !2446
  %6127 = xor i64 %6111, %6110
  %6128 = xor i64 %6127, %6114
  %6129 = lshr i64 %6128, 4
  %6130 = trunc i64 %6129 to i8
  %6131 = and i8 %6130, 1
  %6132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6131, i8* %6132, align 1, !tbaa !2447
  %6133 = icmp eq i64 %6114, 0
  %6134 = zext i1 %6133 to i8
  %6135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6134, i8* %6135, align 1, !tbaa !2448
  %6136 = lshr i64 %6114, 63
  %6137 = trunc i64 %6136 to i8
  %6138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6137, i8* %6138, align 1, !tbaa !2449
  %6139 = lshr i64 %6110, 63
  %6140 = lshr i64 %6111, 63
  %6141 = xor i64 %6136, %6139
  %6142 = xor i64 %6136, %6140
  %6143 = add nuw nsw i64 %6141, %6142
  %6144 = icmp eq i64 %6143, 2
  %6145 = zext i1 %6144 to i8
  %6146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6145, i8* %6146, align 1, !tbaa !2450
  %6147 = load i64, i64* %RBP
  %6148 = sub i64 %6147, 104
  %6149 = load i64, i64* %PC
  %6150 = add i64 %6149, 4
  store i64 %6150, i64* %PC
  %6151 = inttoptr i64 %6148 to i32*
  %6152 = load i32, i32* %6151
  %6153 = sext i32 %6152 to i64
  store i64 %6153, i64* %RCX, align 8, !tbaa !2428
  %6154 = load i64, i64* %RAX
  %6155 = load i64, i64* %RCX
  %6156 = mul i64 %6155, 8
  %6157 = add i64 %6156, %6154
  %6158 = bitcast %union.vec128_t* %XMM0 to i8*
  %6159 = load i64, i64* %PC
  %6160 = add i64 %6159, 5
  store i64 %6160, i64* %PC
  %6161 = bitcast i8* %6158 to double*
  %6162 = load double, double* %6161, align 1
  %6163 = inttoptr i64 %6157 to double*
  store double %6162, double* %6163
  %6164 = load i64, i64* %RBP
  %6165 = add i64 %6164, 72
  %6166 = load i64, i64* %PC
  %6167 = add i64 %6166, 4
  store i64 %6167, i64* %PC
  %6168 = inttoptr i64 %6165 to i64*
  %6169 = load i64, i64* %6168
  store i64 %6169, i64* %RAX, align 8, !tbaa !2428
  %6170 = load i64, i64* %RBP
  %6171 = sub i64 %6170, 108
  %6172 = load i64, i64* %PC
  %6173 = add i64 %6172, 4
  store i64 %6173, i64* %PC
  %6174 = inttoptr i64 %6171 to i32*
  %6175 = load i32, i32* %6174
  %6176 = sext i32 %6175 to i64
  store i64 %6176, i64* %RCX, align 8, !tbaa !2428
  %6177 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6178 = load i64, i64* %RAX
  %6179 = load i64, i64* %RCX
  %6180 = mul i64 %6179, 8
  %6181 = add i64 %6180, %6178
  %6182 = load i64, i64* %PC
  %6183 = add i64 %6182, 5
  store i64 %6183, i64* %PC
  %6184 = inttoptr i64 %6181 to double*
  %6185 = load double, double* %6184
  %6186 = bitcast i8* %6177 to double*
  store double %6185, double* %6186, align 1, !tbaa !2452
  %6187 = getelementptr inbounds i8, i8* %6177, i64 8
  %6188 = bitcast i8* %6187 to double*
  store double 0.000000e+00, double* %6188, align 1, !tbaa !2452
  %6189 = load i64, i64* %RBP
  %6190 = add i64 %6189, 80
  %6191 = load i64, i64* %PC
  %6192 = add i64 %6191, 4
  store i64 %6192, i64* %PC
  %6193 = inttoptr i64 %6190 to i64*
  %6194 = load i64, i64* %6193
  store i64 %6194, i64* %RAX, align 8, !tbaa !2428
  %6195 = load i64, i64* %RBP
  %6196 = sub i64 %6195, 108
  %6197 = load i64, i64* %PC
  %6198 = add i64 %6197, 4
  store i64 %6198, i64* %PC
  %6199 = inttoptr i64 %6196 to i32*
  %6200 = load i32, i32* %6199
  %6201 = sext i32 %6200 to i64
  store i64 %6201, i64* %RCX, align 8, !tbaa !2428
  %6202 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6203 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6204 = load i64, i64* %RAX
  %6205 = load i64, i64* %RCX
  %6206 = mul i64 %6205, 8
  %6207 = add i64 %6206, %6204
  %6208 = load i64, i64* %PC
  %6209 = add i64 %6208, 5
  store i64 %6209, i64* %PC
  %6210 = bitcast i8* %6203 to double*
  %6211 = load double, double* %6210, align 1
  %6212 = getelementptr inbounds i8, i8* %6203, i64 8
  %6213 = bitcast i8* %6212 to i64*
  %6214 = load i64, i64* %6213, align 1
  %6215 = inttoptr i64 %6207 to double*
  %6216 = load double, double* %6215
  %6217 = fdiv double %6211, %6216
  %6218 = bitcast i8* %6202 to double*
  store double %6217, double* %6218, align 1, !tbaa !2452
  %6219 = getelementptr inbounds i8, i8* %6202, i64 8
  %6220 = bitcast i8* %6219 to i64*
  store i64 %6214, i64* %6220, align 1, !tbaa !2452
  %6221 = load i64, i64* %RBP
  %6222 = add i64 %6221, 48
  %6223 = load i64, i64* %PC
  %6224 = add i64 %6223, 4
  store i64 %6224, i64* %PC
  %6225 = inttoptr i64 %6222 to i64*
  %6226 = load i64, i64* %6225
  store i64 %6226, i64* %RAX, align 8, !tbaa !2428
  %6227 = load i64, i64* %RBP
  %6228 = sub i64 %6227, 100
  %6229 = load i64, i64* %PC
  %6230 = add i64 %6229, 4
  store i64 %6230, i64* %PC
  %6231 = inttoptr i64 %6228 to i32*
  %6232 = load i32, i32* %6231
  %6233 = sext i32 %6232 to i64
  store i64 %6233, i64* %RCX, align 8, !tbaa !2428
  %6234 = load i64, i64* %RCX
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 7
  store i64 %6236, i64* %PC
  %6237 = sext i64 %6234 to i128
  %6238 = and i128 %6237, -18446744073709551616
  %6239 = zext i64 %6234 to i128
  %6240 = or i128 %6238, %6239
  %6241 = mul nsw i128 33800, %6240
  %6242 = trunc i128 %6241 to i64
  store i64 %6242, i64* %RCX, align 8, !tbaa !2428
  %6243 = sext i64 %6242 to i128
  %6244 = icmp ne i128 %6243, %6241
  %6245 = zext i1 %6244 to i8
  %6246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6245, i8* %6246, align 1, !tbaa !2432
  %6247 = trunc i128 %6241 to i32
  %6248 = and i32 %6247, 255
  %6249 = call i32 @llvm.ctpop.i32(i32 %6248) #16
  %6250 = trunc i32 %6249 to i8
  %6251 = and i8 %6250, 1
  %6252 = xor i8 %6251, 1
  %6253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6252, i8* %6253, align 1, !tbaa !2446
  %6254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6254, align 1, !tbaa !2447
  %6255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6255, align 1, !tbaa !2448
  %6256 = lshr i64 %6242, 63
  %6257 = trunc i64 %6256 to i8
  %6258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6257, i8* %6258, align 1, !tbaa !2449
  %6259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6245, i8* %6259, align 1, !tbaa !2450
  %6260 = load i64, i64* %RAX
  %6261 = load i64, i64* %RCX
  %6262 = load i64, i64* %PC
  %6263 = add i64 %6262, 3
  store i64 %6263, i64* %PC
  %6264 = add i64 %6261, %6260
  store i64 %6264, i64* %RAX, align 8, !tbaa !2428
  %6265 = icmp ult i64 %6264, %6260
  %6266 = icmp ult i64 %6264, %6261
  %6267 = or i1 %6265, %6266
  %6268 = zext i1 %6267 to i8
  %6269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6268, i8* %6269, align 1, !tbaa !2432
  %6270 = trunc i64 %6264 to i32
  %6271 = and i32 %6270, 255
  %6272 = call i32 @llvm.ctpop.i32(i32 %6271) #16
  %6273 = trunc i32 %6272 to i8
  %6274 = and i8 %6273, 1
  %6275 = xor i8 %6274, 1
  %6276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6275, i8* %6276, align 1, !tbaa !2446
  %6277 = xor i64 %6261, %6260
  %6278 = xor i64 %6277, %6264
  %6279 = lshr i64 %6278, 4
  %6280 = trunc i64 %6279 to i8
  %6281 = and i8 %6280, 1
  %6282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6281, i8* %6282, align 1, !tbaa !2447
  %6283 = icmp eq i64 %6264, 0
  %6284 = zext i1 %6283 to i8
  %6285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6284, i8* %6285, align 1, !tbaa !2448
  %6286 = lshr i64 %6264, 63
  %6287 = trunc i64 %6286 to i8
  %6288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6287, i8* %6288, align 1, !tbaa !2449
  %6289 = lshr i64 %6260, 63
  %6290 = lshr i64 %6261, 63
  %6291 = xor i64 %6286, %6289
  %6292 = xor i64 %6286, %6290
  %6293 = add nuw nsw i64 %6291, %6292
  %6294 = icmp eq i64 %6293, 2
  %6295 = zext i1 %6294 to i8
  %6296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6295, i8* %6296, align 1, !tbaa !2450
  %6297 = load i64, i64* %RBP
  %6298 = sub i64 %6297, 52
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 4
  store i64 %6300, i64* %PC
  %6301 = inttoptr i64 %6298 to i32*
  %6302 = load i32, i32* %6301
  %6303 = sext i32 %6302 to i64
  store i64 %6303, i64* %RCX, align 8, !tbaa !2428
  %6304 = load i64, i64* %RCX
  %6305 = load i64, i64* %PC
  %6306 = add i64 %6305, 7
  store i64 %6306, i64* %PC
  %6307 = sext i64 %6304 to i128
  %6308 = and i128 %6307, -18446744073709551616
  %6309 = zext i64 %6304 to i128
  %6310 = or i128 %6308, %6309
  %6311 = mul nsw i128 520, %6310
  %6312 = trunc i128 %6311 to i64
  store i64 %6312, i64* %RCX, align 8, !tbaa !2428
  %6313 = sext i64 %6312 to i128
  %6314 = icmp ne i128 %6313, %6311
  %6315 = zext i1 %6314 to i8
  %6316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6315, i8* %6316, align 1, !tbaa !2432
  %6317 = trunc i128 %6311 to i32
  %6318 = and i32 %6317, 255
  %6319 = call i32 @llvm.ctpop.i32(i32 %6318) #16
  %6320 = trunc i32 %6319 to i8
  %6321 = and i8 %6320, 1
  %6322 = xor i8 %6321, 1
  %6323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6322, i8* %6323, align 1, !tbaa !2446
  %6324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6324, align 1, !tbaa !2447
  %6325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6325, align 1, !tbaa !2448
  %6326 = lshr i64 %6312, 63
  %6327 = trunc i64 %6326 to i8
  %6328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6327, i8* %6328, align 1, !tbaa !2449
  %6329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6315, i8* %6329, align 1, !tbaa !2450
  %6330 = load i64, i64* %RAX
  %6331 = load i64, i64* %RCX
  %6332 = load i64, i64* %PC
  %6333 = add i64 %6332, 3
  store i64 %6333, i64* %PC
  %6334 = add i64 %6331, %6330
  store i64 %6334, i64* %RAX, align 8, !tbaa !2428
  %6335 = icmp ult i64 %6334, %6330
  %6336 = icmp ult i64 %6334, %6331
  %6337 = or i1 %6335, %6336
  %6338 = zext i1 %6337 to i8
  %6339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6338, i8* %6339, align 1, !tbaa !2432
  %6340 = trunc i64 %6334 to i32
  %6341 = and i32 %6340, 255
  %6342 = call i32 @llvm.ctpop.i32(i32 %6341) #16
  %6343 = trunc i32 %6342 to i8
  %6344 = and i8 %6343, 1
  %6345 = xor i8 %6344, 1
  %6346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6345, i8* %6346, align 1, !tbaa !2446
  %6347 = xor i64 %6331, %6330
  %6348 = xor i64 %6347, %6334
  %6349 = lshr i64 %6348, 4
  %6350 = trunc i64 %6349 to i8
  %6351 = and i8 %6350, 1
  %6352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6351, i8* %6352, align 1, !tbaa !2447
  %6353 = icmp eq i64 %6334, 0
  %6354 = zext i1 %6353 to i8
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6354, i8* %6355, align 1, !tbaa !2448
  %6356 = lshr i64 %6334, 63
  %6357 = trunc i64 %6356 to i8
  %6358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6357, i8* %6358, align 1, !tbaa !2449
  %6359 = lshr i64 %6330, 63
  %6360 = lshr i64 %6331, 63
  %6361 = xor i64 %6356, %6359
  %6362 = xor i64 %6356, %6360
  %6363 = add nuw nsw i64 %6361, %6362
  %6364 = icmp eq i64 %6363, 2
  %6365 = zext i1 %6364 to i8
  %6366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6365, i8* %6366, align 1, !tbaa !2450
  %6367 = load i64, i64* %RBP
  %6368 = sub i64 %6367, 108
  %6369 = load i64, i64* %PC
  %6370 = add i64 %6369, 4
  store i64 %6370, i64* %PC
  %6371 = inttoptr i64 %6368 to i32*
  %6372 = load i32, i32* %6371
  %6373 = sext i32 %6372 to i64
  store i64 %6373, i64* %RCX, align 8, !tbaa !2428
  %6374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6375 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6376 = load i64, i64* %RAX
  %6377 = load i64, i64* %RCX
  %6378 = mul i64 %6377, 8
  %6379 = add i64 %6378, %6376
  %6380 = load i64, i64* %PC
  %6381 = add i64 %6380, 5
  store i64 %6381, i64* %PC
  %6382 = bitcast i8* %6375 to double*
  %6383 = load double, double* %6382, align 1
  %6384 = getelementptr inbounds i8, i8* %6375, i64 8
  %6385 = bitcast i8* %6384 to i64*
  %6386 = load i64, i64* %6385, align 1
  %6387 = inttoptr i64 %6379 to double*
  %6388 = load double, double* %6387
  %6389 = fmul double %6383, %6388
  %6390 = bitcast i8* %6374 to double*
  store double %6389, double* %6390, align 1, !tbaa !2452
  %6391 = getelementptr inbounds i8, i8* %6374, i64 8
  %6392 = bitcast i8* %6391 to i64*
  store i64 %6386, i64* %6392, align 1, !tbaa !2452
  %6393 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6394 = load i64, i64* %RBP
  %6395 = sub i64 %6394, 64
  %6396 = load i64, i64* %PC
  %6397 = add i64 %6396, 5
  store i64 %6397, i64* %PC
  %6398 = inttoptr i64 %6395 to double*
  %6399 = load double, double* %6398
  %6400 = bitcast i8* %6393 to double*
  store double %6399, double* %6400, align 1, !tbaa !2452
  %6401 = getelementptr inbounds i8, i8* %6393, i64 8
  %6402 = bitcast i8* %6401 to double*
  store double 0.000000e+00, double* %6402, align 1, !tbaa !2452
  %6403 = load i64, i64* %RBP
  %6404 = add i64 %6403, 64
  %6405 = load i64, i64* %PC
  %6406 = add i64 %6405, 4
  store i64 %6406, i64* %PC
  %6407 = inttoptr i64 %6404 to i64*
  %6408 = load i64, i64* %6407
  store i64 %6408, i64* %RAX, align 8, !tbaa !2428
  %6409 = load i64, i64* %RBP
  %6410 = sub i64 %6409, 100
  %6411 = load i64, i64* %PC
  %6412 = add i64 %6411, 4
  store i64 %6412, i64* %PC
  %6413 = inttoptr i64 %6410 to i32*
  %6414 = load i32, i32* %6413
  %6415 = sext i32 %6414 to i64
  store i64 %6415, i64* %RCX, align 8, !tbaa !2428
  %6416 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6417 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6418 = load i64, i64* %RAX
  %6419 = load i64, i64* %RCX
  %6420 = mul i64 %6419, 8
  %6421 = add i64 %6420, %6418
  %6422 = load i64, i64* %PC
  %6423 = add i64 %6422, 5
  store i64 %6423, i64* %PC
  %6424 = bitcast i8* %6417 to double*
  %6425 = load double, double* %6424, align 1
  %6426 = getelementptr inbounds i8, i8* %6417, i64 8
  %6427 = bitcast i8* %6426 to i64*
  %6428 = load i64, i64* %6427, align 1
  %6429 = inttoptr i64 %6421 to double*
  %6430 = load double, double* %6429
  %6431 = fmul double %6425, %6430
  %6432 = bitcast i8* %6416 to double*
  store double %6431, double* %6432, align 1, !tbaa !2452
  %6433 = getelementptr inbounds i8, i8* %6416, i64 8
  %6434 = bitcast i8* %6433 to i64*
  store i64 %6428, i64* %6434, align 1, !tbaa !2452
  %6435 = load i64, i64* %RBP
  %6436 = add i64 %6435, 80
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 4
  store i64 %6438, i64* %PC
  %6439 = inttoptr i64 %6436 to i64*
  %6440 = load i64, i64* %6439
  store i64 %6440, i64* %RAX, align 8, !tbaa !2428
  %6441 = load i64, i64* %RBP
  %6442 = sub i64 %6441, 108
  %6443 = load i64, i64* %PC
  %6444 = add i64 %6443, 4
  store i64 %6444, i64* %PC
  %6445 = inttoptr i64 %6442 to i32*
  %6446 = load i32, i32* %6445
  %6447 = sext i32 %6446 to i64
  store i64 %6447, i64* %RCX, align 8, !tbaa !2428
  %6448 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6449 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6450 = load i64, i64* %RAX
  %6451 = load i64, i64* %RCX
  %6452 = mul i64 %6451, 8
  %6453 = add i64 %6452, %6450
  %6454 = load i64, i64* %PC
  %6455 = add i64 %6454, 5
  store i64 %6455, i64* %PC
  %6456 = bitcast i8* %6449 to double*
  %6457 = load double, double* %6456, align 1
  %6458 = getelementptr inbounds i8, i8* %6449, i64 8
  %6459 = bitcast i8* %6458 to i64*
  %6460 = load i64, i64* %6459, align 1
  %6461 = inttoptr i64 %6453 to double*
  %6462 = load double, double* %6461
  %6463 = fdiv double %6457, %6462
  %6464 = bitcast i8* %6448 to double*
  store double %6463, double* %6464, align 1, !tbaa !2452
  %6465 = getelementptr inbounds i8, i8* %6448, i64 8
  %6466 = bitcast i8* %6465 to i64*
  store i64 %6460, i64* %6466, align 1, !tbaa !2452
  %6467 = load i64, i64* %RBP
  %6468 = add i64 %6467, 16
  %6469 = load i64, i64* %PC
  %6470 = add i64 %6469, 4
  store i64 %6470, i64* %PC
  %6471 = inttoptr i64 %6468 to i64*
  %6472 = load i64, i64* %6471
  store i64 %6472, i64* %RAX, align 8, !tbaa !2428
  %6473 = load i64, i64* %RBP
  %6474 = sub i64 %6473, 100
  %6475 = load i64, i64* %PC
  %6476 = add i64 %6475, 4
  store i64 %6476, i64* %PC
  %6477 = inttoptr i64 %6474 to i32*
  %6478 = load i32, i32* %6477
  %6479 = sext i32 %6478 to i64
  store i64 %6479, i64* %RCX, align 8, !tbaa !2428
  %6480 = load i64, i64* %RCX
  %6481 = load i64, i64* %PC
  %6482 = add i64 %6481, 7
  store i64 %6482, i64* %PC
  %6483 = sext i64 %6480 to i128
  %6484 = and i128 %6483, -18446744073709551616
  %6485 = zext i64 %6480 to i128
  %6486 = or i128 %6484, %6485
  %6487 = mul nsw i128 520, %6486
  %6488 = trunc i128 %6487 to i64
  store i64 %6488, i64* %RCX, align 8, !tbaa !2428
  %6489 = sext i64 %6488 to i128
  %6490 = icmp ne i128 %6489, %6487
  %6491 = zext i1 %6490 to i8
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6491, i8* %6492, align 1, !tbaa !2432
  %6493 = trunc i128 %6487 to i32
  %6494 = and i32 %6493, 255
  %6495 = call i32 @llvm.ctpop.i32(i32 %6494) #16
  %6496 = trunc i32 %6495 to i8
  %6497 = and i8 %6496, 1
  %6498 = xor i8 %6497, 1
  %6499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6498, i8* %6499, align 1, !tbaa !2446
  %6500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6500, align 1, !tbaa !2447
  %6501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6501, align 1, !tbaa !2448
  %6502 = lshr i64 %6488, 63
  %6503 = trunc i64 %6502 to i8
  %6504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6503, i8* %6504, align 1, !tbaa !2449
  %6505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6491, i8* %6505, align 1, !tbaa !2450
  %6506 = load i64, i64* %RAX
  %6507 = load i64, i64* %RCX
  %6508 = load i64, i64* %PC
  %6509 = add i64 %6508, 3
  store i64 %6509, i64* %PC
  %6510 = add i64 %6507, %6506
  store i64 %6510, i64* %RAX, align 8, !tbaa !2428
  %6511 = icmp ult i64 %6510, %6506
  %6512 = icmp ult i64 %6510, %6507
  %6513 = or i1 %6511, %6512
  %6514 = zext i1 %6513 to i8
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6514, i8* %6515, align 1, !tbaa !2432
  %6516 = trunc i64 %6510 to i32
  %6517 = and i32 %6516, 255
  %6518 = call i32 @llvm.ctpop.i32(i32 %6517) #16
  %6519 = trunc i32 %6518 to i8
  %6520 = and i8 %6519, 1
  %6521 = xor i8 %6520, 1
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6521, i8* %6522, align 1, !tbaa !2446
  %6523 = xor i64 %6507, %6506
  %6524 = xor i64 %6523, %6510
  %6525 = lshr i64 %6524, 4
  %6526 = trunc i64 %6525 to i8
  %6527 = and i8 %6526, 1
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6527, i8* %6528, align 1, !tbaa !2447
  %6529 = icmp eq i64 %6510, 0
  %6530 = zext i1 %6529 to i8
  %6531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6530, i8* %6531, align 1, !tbaa !2448
  %6532 = lshr i64 %6510, 63
  %6533 = trunc i64 %6532 to i8
  %6534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6533, i8* %6534, align 1, !tbaa !2449
  %6535 = lshr i64 %6506, 63
  %6536 = lshr i64 %6507, 63
  %6537 = xor i64 %6532, %6535
  %6538 = xor i64 %6532, %6536
  %6539 = add nuw nsw i64 %6537, %6538
  %6540 = icmp eq i64 %6539, 2
  %6541 = zext i1 %6540 to i8
  %6542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6541, i8* %6542, align 1, !tbaa !2450
  %6543 = load i64, i64* %RBP
  %6544 = sub i64 %6543, 104
  %6545 = load i64, i64* %PC
  %6546 = add i64 %6545, 4
  store i64 %6546, i64* %PC
  %6547 = inttoptr i64 %6544 to i32*
  %6548 = load i32, i32* %6547
  %6549 = sext i32 %6548 to i64
  store i64 %6549, i64* %RCX, align 8, !tbaa !2428
  %6550 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6551 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6552 = load i64, i64* %RAX
  %6553 = load i64, i64* %RCX
  %6554 = mul i64 %6553, 8
  %6555 = add i64 %6554, %6552
  %6556 = load i64, i64* %PC
  %6557 = add i64 %6556, 5
  store i64 %6557, i64* %PC
  %6558 = bitcast i8* %6551 to double*
  %6559 = load double, double* %6558, align 1
  %6560 = getelementptr inbounds i8, i8* %6551, i64 8
  %6561 = bitcast i8* %6560 to i64*
  %6562 = load i64, i64* %6561, align 1
  %6563 = inttoptr i64 %6555 to double*
  %6564 = load double, double* %6563
  %6565 = fmul double %6559, %6564
  %6566 = bitcast i8* %6550 to double*
  store double %6565, double* %6566, align 1, !tbaa !2452
  %6567 = getelementptr inbounds i8, i8* %6550, i64 8
  %6568 = bitcast i8* %6567 to i64*
  store i64 %6562, i64* %6568, align 1, !tbaa !2452
  %6569 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6571 = bitcast %union.vec128_t* %XMM1 to i8*
  %6572 = load i64, i64* %PC
  %6573 = add i64 %6572, 4
  store i64 %6573, i64* %PC
  %6574 = bitcast i8* %6570 to double*
  %6575 = load double, double* %6574, align 1
  %6576 = getelementptr inbounds i8, i8* %6570, i64 8
  %6577 = bitcast i8* %6576 to i64*
  %6578 = load i64, i64* %6577, align 1
  %6579 = bitcast i8* %6571 to double*
  %6580 = load double, double* %6579, align 1
  %6581 = fadd double %6575, %6580
  %6582 = bitcast i8* %6569 to double*
  store double %6581, double* %6582, align 1, !tbaa !2452
  %6583 = getelementptr inbounds i8, i8* %6569, i64 8
  %6584 = bitcast i8* %6583 to i64*
  store i64 %6578, i64* %6584, align 1, !tbaa !2452
  %6585 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6586 = load i64, i64* %RBP
  %6587 = sub i64 %6586, 64
  %6588 = load i64, i64* %PC
  %6589 = add i64 %6588, 5
  store i64 %6589, i64* %PC
  %6590 = inttoptr i64 %6587 to double*
  %6591 = load double, double* %6590
  %6592 = bitcast i8* %6585 to double*
  store double %6591, double* %6592, align 1, !tbaa !2452
  %6593 = getelementptr inbounds i8, i8* %6585, i64 8
  %6594 = bitcast i8* %6593 to double*
  store double 0.000000e+00, double* %6594, align 1, !tbaa !2452
  %6595 = load i64, i64* %RBP
  %6596 = add i64 %6595, 56
  %6597 = load i64, i64* %PC
  %6598 = add i64 %6597, 4
  store i64 %6598, i64* %PC
  %6599 = inttoptr i64 %6596 to i64*
  %6600 = load i64, i64* %6599
  store i64 %6600, i64* %RAX, align 8, !tbaa !2428
  %6601 = load i64, i64* %RBP
  %6602 = sub i64 %6601, 100
  %6603 = load i64, i64* %PC
  %6604 = add i64 %6603, 4
  store i64 %6604, i64* %PC
  %6605 = inttoptr i64 %6602 to i32*
  %6606 = load i32, i32* %6605
  %6607 = sext i32 %6606 to i64
  store i64 %6607, i64* %RCX, align 8, !tbaa !2428
  %6608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6609 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6610 = load i64, i64* %RAX
  %6611 = load i64, i64* %RCX
  %6612 = mul i64 %6611, 8
  %6613 = add i64 %6612, %6610
  %6614 = load i64, i64* %PC
  %6615 = add i64 %6614, 5
  store i64 %6615, i64* %PC
  %6616 = bitcast i8* %6609 to double*
  %6617 = load double, double* %6616, align 1
  %6618 = getelementptr inbounds i8, i8* %6609, i64 8
  %6619 = bitcast i8* %6618 to i64*
  %6620 = load i64, i64* %6619, align 1
  %6621 = inttoptr i64 %6613 to double*
  %6622 = load double, double* %6621
  %6623 = fmul double %6617, %6622
  %6624 = bitcast i8* %6608 to double*
  store double %6623, double* %6624, align 1, !tbaa !2452
  %6625 = getelementptr inbounds i8, i8* %6608, i64 8
  %6626 = bitcast i8* %6625 to i64*
  store i64 %6620, i64* %6626, align 1, !tbaa !2452
  %6627 = load i64, i64* %RBP
  %6628 = add i64 %6627, 80
  %6629 = load i64, i64* %PC
  %6630 = add i64 %6629, 4
  store i64 %6630, i64* %PC
  %6631 = inttoptr i64 %6628 to i64*
  %6632 = load i64, i64* %6631
  store i64 %6632, i64* %RAX, align 8, !tbaa !2428
  %6633 = load i64, i64* %RBP
  %6634 = sub i64 %6633, 108
  %6635 = load i64, i64* %PC
  %6636 = add i64 %6635, 4
  store i64 %6636, i64* %PC
  %6637 = inttoptr i64 %6634 to i32*
  %6638 = load i32, i32* %6637
  %6639 = sext i32 %6638 to i64
  store i64 %6639, i64* %RCX, align 8, !tbaa !2428
  %6640 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6641 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6642 = load i64, i64* %RAX
  %6643 = load i64, i64* %RCX
  %6644 = mul i64 %6643, 8
  %6645 = add i64 %6644, %6642
  %6646 = load i64, i64* %PC
  %6647 = add i64 %6646, 5
  store i64 %6647, i64* %PC
  %6648 = bitcast i8* %6641 to double*
  %6649 = load double, double* %6648, align 1
  %6650 = getelementptr inbounds i8, i8* %6641, i64 8
  %6651 = bitcast i8* %6650 to i64*
  %6652 = load i64, i64* %6651, align 1
  %6653 = inttoptr i64 %6645 to double*
  %6654 = load double, double* %6653
  %6655 = fdiv double %6649, %6654
  %6656 = bitcast i8* %6640 to double*
  store double %6655, double* %6656, align 1, !tbaa !2452
  %6657 = getelementptr inbounds i8, i8* %6640, i64 8
  %6658 = bitcast i8* %6657 to i64*
  store i64 %6652, i64* %6658, align 1, !tbaa !2452
  %6659 = load i64, i64* %RBP
  %6660 = add i64 %6659, 24
  %6661 = load i64, i64* %PC
  %6662 = add i64 %6661, 4
  store i64 %6662, i64* %PC
  %6663 = inttoptr i64 %6660 to i64*
  %6664 = load i64, i64* %6663
  store i64 %6664, i64* %RAX, align 8, !tbaa !2428
  %6665 = load i64, i64* %RBP
  %6666 = sub i64 %6665, 100
  %6667 = load i64, i64* %PC
  %6668 = add i64 %6667, 4
  store i64 %6668, i64* %PC
  %6669 = inttoptr i64 %6666 to i32*
  %6670 = load i32, i32* %6669
  %6671 = sext i32 %6670 to i64
  store i64 %6671, i64* %RCX, align 8, !tbaa !2428
  %6672 = load i64, i64* %RCX
  %6673 = load i64, i64* %PC
  %6674 = add i64 %6673, 7
  store i64 %6674, i64* %PC
  %6675 = sext i64 %6672 to i128
  %6676 = and i128 %6675, -18446744073709551616
  %6677 = zext i64 %6672 to i128
  %6678 = or i128 %6676, %6677
  %6679 = mul nsw i128 33800, %6678
  %6680 = trunc i128 %6679 to i64
  store i64 %6680, i64* %RCX, align 8, !tbaa !2428
  %6681 = sext i64 %6680 to i128
  %6682 = icmp ne i128 %6681, %6679
  %6683 = zext i1 %6682 to i8
  %6684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6683, i8* %6684, align 1, !tbaa !2432
  %6685 = trunc i128 %6679 to i32
  %6686 = and i32 %6685, 255
  %6687 = call i32 @llvm.ctpop.i32(i32 %6686) #16
  %6688 = trunc i32 %6687 to i8
  %6689 = and i8 %6688, 1
  %6690 = xor i8 %6689, 1
  %6691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6690, i8* %6691, align 1, !tbaa !2446
  %6692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6692, align 1, !tbaa !2447
  %6693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6693, align 1, !tbaa !2448
  %6694 = lshr i64 %6680, 63
  %6695 = trunc i64 %6694 to i8
  %6696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6695, i8* %6696, align 1, !tbaa !2449
  %6697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6683, i8* %6697, align 1, !tbaa !2450
  %6698 = load i64, i64* %RAX
  %6699 = load i64, i64* %RCX
  %6700 = load i64, i64* %PC
  %6701 = add i64 %6700, 3
  store i64 %6701, i64* %PC
  %6702 = add i64 %6699, %6698
  store i64 %6702, i64* %RAX, align 8, !tbaa !2428
  %6703 = icmp ult i64 %6702, %6698
  %6704 = icmp ult i64 %6702, %6699
  %6705 = or i1 %6703, %6704
  %6706 = zext i1 %6705 to i8
  %6707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6706, i8* %6707, align 1, !tbaa !2432
  %6708 = trunc i64 %6702 to i32
  %6709 = and i32 %6708, 255
  %6710 = call i32 @llvm.ctpop.i32(i32 %6709) #16
  %6711 = trunc i32 %6710 to i8
  %6712 = and i8 %6711, 1
  %6713 = xor i8 %6712, 1
  %6714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6713, i8* %6714, align 1, !tbaa !2446
  %6715 = xor i64 %6699, %6698
  %6716 = xor i64 %6715, %6702
  %6717 = lshr i64 %6716, 4
  %6718 = trunc i64 %6717 to i8
  %6719 = and i8 %6718, 1
  %6720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6719, i8* %6720, align 1, !tbaa !2447
  %6721 = icmp eq i64 %6702, 0
  %6722 = zext i1 %6721 to i8
  %6723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6722, i8* %6723, align 1, !tbaa !2448
  %6724 = lshr i64 %6702, 63
  %6725 = trunc i64 %6724 to i8
  %6726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6725, i8* %6726, align 1, !tbaa !2449
  %6727 = lshr i64 %6698, 63
  %6728 = lshr i64 %6699, 63
  %6729 = xor i64 %6724, %6727
  %6730 = xor i64 %6724, %6728
  %6731 = add nuw nsw i64 %6729, %6730
  %6732 = icmp eq i64 %6731, 2
  %6733 = zext i1 %6732 to i8
  %6734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6733, i8* %6734, align 1, !tbaa !2450
  %6735 = load i64, i64* %RBP
  %6736 = sub i64 %6735, 52
  %6737 = load i64, i64* %PC
  %6738 = add i64 %6737, 4
  store i64 %6738, i64* %PC
  %6739 = inttoptr i64 %6736 to i32*
  %6740 = load i32, i32* %6739
  %6741 = sext i32 %6740 to i64
  store i64 %6741, i64* %RCX, align 8, !tbaa !2428
  %6742 = load i64, i64* %RCX
  %6743 = load i64, i64* %PC
  %6744 = add i64 %6743, 7
  store i64 %6744, i64* %PC
  %6745 = sext i64 %6742 to i128
  %6746 = and i128 %6745, -18446744073709551616
  %6747 = zext i64 %6742 to i128
  %6748 = or i128 %6746, %6747
  %6749 = mul nsw i128 520, %6748
  %6750 = trunc i128 %6749 to i64
  store i64 %6750, i64* %RCX, align 8, !tbaa !2428
  %6751 = sext i64 %6750 to i128
  %6752 = icmp ne i128 %6751, %6749
  %6753 = zext i1 %6752 to i8
  %6754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6753, i8* %6754, align 1, !tbaa !2432
  %6755 = trunc i128 %6749 to i32
  %6756 = and i32 %6755, 255
  %6757 = call i32 @llvm.ctpop.i32(i32 %6756) #16
  %6758 = trunc i32 %6757 to i8
  %6759 = and i8 %6758, 1
  %6760 = xor i8 %6759, 1
  %6761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6760, i8* %6761, align 1, !tbaa !2446
  %6762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6762, align 1, !tbaa !2447
  %6763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6763, align 1, !tbaa !2448
  %6764 = lshr i64 %6750, 63
  %6765 = trunc i64 %6764 to i8
  %6766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6765, i8* %6766, align 1, !tbaa !2449
  %6767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6753, i8* %6767, align 1, !tbaa !2450
  %6768 = load i64, i64* %RAX
  %6769 = load i64, i64* %RCX
  %6770 = load i64, i64* %PC
  %6771 = add i64 %6770, 3
  store i64 %6771, i64* %PC
  %6772 = add i64 %6769, %6768
  store i64 %6772, i64* %RAX, align 8, !tbaa !2428
  %6773 = icmp ult i64 %6772, %6768
  %6774 = icmp ult i64 %6772, %6769
  %6775 = or i1 %6773, %6774
  %6776 = zext i1 %6775 to i8
  %6777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6776, i8* %6777, align 1, !tbaa !2432
  %6778 = trunc i64 %6772 to i32
  %6779 = and i32 %6778, 255
  %6780 = call i32 @llvm.ctpop.i32(i32 %6779) #16
  %6781 = trunc i32 %6780 to i8
  %6782 = and i8 %6781, 1
  %6783 = xor i8 %6782, 1
  %6784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6783, i8* %6784, align 1, !tbaa !2446
  %6785 = xor i64 %6769, %6768
  %6786 = xor i64 %6785, %6772
  %6787 = lshr i64 %6786, 4
  %6788 = trunc i64 %6787 to i8
  %6789 = and i8 %6788, 1
  %6790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6789, i8* %6790, align 1, !tbaa !2447
  %6791 = icmp eq i64 %6772, 0
  %6792 = zext i1 %6791 to i8
  %6793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6792, i8* %6793, align 1, !tbaa !2448
  %6794 = lshr i64 %6772, 63
  %6795 = trunc i64 %6794 to i8
  %6796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6795, i8* %6796, align 1, !tbaa !2449
  %6797 = lshr i64 %6768, 63
  %6798 = lshr i64 %6769, 63
  %6799 = xor i64 %6794, %6797
  %6800 = xor i64 %6794, %6798
  %6801 = add nuw nsw i64 %6799, %6800
  %6802 = icmp eq i64 %6801, 2
  %6803 = zext i1 %6802 to i8
  %6804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6803, i8* %6804, align 1, !tbaa !2450
  %6805 = load i64, i64* %RBP
  %6806 = sub i64 %6805, 108
  %6807 = load i64, i64* %PC
  %6808 = add i64 %6807, 4
  store i64 %6808, i64* %PC
  %6809 = inttoptr i64 %6806 to i32*
  %6810 = load i32, i32* %6809
  %6811 = sext i32 %6810 to i64
  store i64 %6811, i64* %RCX, align 8, !tbaa !2428
  %6812 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6813 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6814 = load i64, i64* %RAX
  %6815 = load i64, i64* %RCX
  %6816 = mul i64 %6815, 8
  %6817 = add i64 %6816, %6814
  %6818 = load i64, i64* %PC
  %6819 = add i64 %6818, 5
  store i64 %6819, i64* %PC
  %6820 = bitcast i8* %6813 to double*
  %6821 = load double, double* %6820, align 1
  %6822 = getelementptr inbounds i8, i8* %6813, i64 8
  %6823 = bitcast i8* %6822 to i64*
  %6824 = load i64, i64* %6823, align 1
  %6825 = inttoptr i64 %6817 to double*
  %6826 = load double, double* %6825
  %6827 = fmul double %6821, %6826
  %6828 = bitcast i8* %6812 to double*
  store double %6827, double* %6828, align 1, !tbaa !2452
  %6829 = getelementptr inbounds i8, i8* %6812, i64 8
  %6830 = bitcast i8* %6829 to i64*
  store i64 %6824, i64* %6830, align 1, !tbaa !2452
  %6831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6833 = bitcast %union.vec128_t* %XMM1 to i8*
  %6834 = load i64, i64* %PC
  %6835 = add i64 %6834, 4
  store i64 %6835, i64* %PC
  %6836 = bitcast i8* %6832 to double*
  %6837 = load double, double* %6836, align 1
  %6838 = getelementptr inbounds i8, i8* %6832, i64 8
  %6839 = bitcast i8* %6838 to i64*
  %6840 = load i64, i64* %6839, align 1
  %6841 = bitcast i8* %6833 to double*
  %6842 = load double, double* %6841, align 1
  %6843 = fsub double %6837, %6842
  %6844 = bitcast i8* %6831 to double*
  store double %6843, double* %6844, align 1, !tbaa !2452
  %6845 = getelementptr inbounds i8, i8* %6831, i64 8
  %6846 = bitcast i8* %6845 to i64*
  store i64 %6840, i64* %6846, align 1, !tbaa !2452
  %6847 = load i64, i64* %RBP
  %6848 = add i64 %6847, 48
  %6849 = load i64, i64* %PC
  %6850 = add i64 %6849, 4
  store i64 %6850, i64* %PC
  %6851 = inttoptr i64 %6848 to i64*
  %6852 = load i64, i64* %6851
  store i64 %6852, i64* %RAX, align 8, !tbaa !2428
  %6853 = load i64, i64* %RBP
  %6854 = sub i64 %6853, 100
  %6855 = load i64, i64* %PC
  %6856 = add i64 %6855, 4
  store i64 %6856, i64* %PC
  %6857 = inttoptr i64 %6854 to i32*
  %6858 = load i32, i32* %6857
  %6859 = sext i32 %6858 to i64
  store i64 %6859, i64* %RCX, align 8, !tbaa !2428
  %6860 = load i64, i64* %RCX
  %6861 = load i64, i64* %PC
  %6862 = add i64 %6861, 7
  store i64 %6862, i64* %PC
  %6863 = sext i64 %6860 to i128
  %6864 = and i128 %6863, -18446744073709551616
  %6865 = zext i64 %6860 to i128
  %6866 = or i128 %6864, %6865
  %6867 = mul nsw i128 33800, %6866
  %6868 = trunc i128 %6867 to i64
  store i64 %6868, i64* %RCX, align 8, !tbaa !2428
  %6869 = sext i64 %6868 to i128
  %6870 = icmp ne i128 %6869, %6867
  %6871 = zext i1 %6870 to i8
  %6872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6871, i8* %6872, align 1, !tbaa !2432
  %6873 = trunc i128 %6867 to i32
  %6874 = and i32 %6873, 255
  %6875 = call i32 @llvm.ctpop.i32(i32 %6874) #16
  %6876 = trunc i32 %6875 to i8
  %6877 = and i8 %6876, 1
  %6878 = xor i8 %6877, 1
  %6879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6878, i8* %6879, align 1, !tbaa !2446
  %6880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6880, align 1, !tbaa !2447
  %6881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6881, align 1, !tbaa !2448
  %6882 = lshr i64 %6868, 63
  %6883 = trunc i64 %6882 to i8
  %6884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6883, i8* %6884, align 1, !tbaa !2449
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6871, i8* %6885, align 1, !tbaa !2450
  %6886 = load i64, i64* %RAX
  %6887 = load i64, i64* %RCX
  %6888 = load i64, i64* %PC
  %6889 = add i64 %6888, 3
  store i64 %6889, i64* %PC
  %6890 = add i64 %6887, %6886
  store i64 %6890, i64* %RAX, align 8, !tbaa !2428
  %6891 = icmp ult i64 %6890, %6886
  %6892 = icmp ult i64 %6890, %6887
  %6893 = or i1 %6891, %6892
  %6894 = zext i1 %6893 to i8
  %6895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6894, i8* %6895, align 1, !tbaa !2432
  %6896 = trunc i64 %6890 to i32
  %6897 = and i32 %6896, 255
  %6898 = call i32 @llvm.ctpop.i32(i32 %6897) #16
  %6899 = trunc i32 %6898 to i8
  %6900 = and i8 %6899, 1
  %6901 = xor i8 %6900, 1
  %6902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6901, i8* %6902, align 1, !tbaa !2446
  %6903 = xor i64 %6887, %6886
  %6904 = xor i64 %6903, %6890
  %6905 = lshr i64 %6904, 4
  %6906 = trunc i64 %6905 to i8
  %6907 = and i8 %6906, 1
  %6908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6907, i8* %6908, align 1, !tbaa !2447
  %6909 = icmp eq i64 %6890, 0
  %6910 = zext i1 %6909 to i8
  %6911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6910, i8* %6911, align 1, !tbaa !2448
  %6912 = lshr i64 %6890, 63
  %6913 = trunc i64 %6912 to i8
  %6914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6913, i8* %6914, align 1, !tbaa !2449
  %6915 = lshr i64 %6886, 63
  %6916 = lshr i64 %6887, 63
  %6917 = xor i64 %6912, %6915
  %6918 = xor i64 %6912, %6916
  %6919 = add nuw nsw i64 %6917, %6918
  %6920 = icmp eq i64 %6919, 2
  %6921 = zext i1 %6920 to i8
  %6922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6921, i8* %6922, align 1, !tbaa !2450
  %6923 = load i64, i64* %RBP
  %6924 = sub i64 %6923, 52
  %6925 = load i64, i64* %PC
  %6926 = add i64 %6925, 4
  store i64 %6926, i64* %PC
  %6927 = inttoptr i64 %6924 to i32*
  %6928 = load i32, i32* %6927
  %6929 = sext i32 %6928 to i64
  store i64 %6929, i64* %RCX, align 8, !tbaa !2428
  %6930 = load i64, i64* %RCX
  %6931 = load i64, i64* %PC
  %6932 = add i64 %6931, 7
  store i64 %6932, i64* %PC
  %6933 = sext i64 %6930 to i128
  %6934 = and i128 %6933, -18446744073709551616
  %6935 = zext i64 %6930 to i128
  %6936 = or i128 %6934, %6935
  %6937 = mul nsw i128 520, %6936
  %6938 = trunc i128 %6937 to i64
  store i64 %6938, i64* %RCX, align 8, !tbaa !2428
  %6939 = sext i64 %6938 to i128
  %6940 = icmp ne i128 %6939, %6937
  %6941 = zext i1 %6940 to i8
  %6942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6941, i8* %6942, align 1, !tbaa !2432
  %6943 = trunc i128 %6937 to i32
  %6944 = and i32 %6943, 255
  %6945 = call i32 @llvm.ctpop.i32(i32 %6944) #16
  %6946 = trunc i32 %6945 to i8
  %6947 = and i8 %6946, 1
  %6948 = xor i8 %6947, 1
  %6949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6948, i8* %6949, align 1, !tbaa !2446
  %6950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6950, align 1, !tbaa !2447
  %6951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6951, align 1, !tbaa !2448
  %6952 = lshr i64 %6938, 63
  %6953 = trunc i64 %6952 to i8
  %6954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6953, i8* %6954, align 1, !tbaa !2449
  %6955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6941, i8* %6955, align 1, !tbaa !2450
  %6956 = load i64, i64* %RAX
  %6957 = load i64, i64* %RCX
  %6958 = load i64, i64* %PC
  %6959 = add i64 %6958, 3
  store i64 %6959, i64* %PC
  %6960 = add i64 %6957, %6956
  store i64 %6960, i64* %RAX, align 8, !tbaa !2428
  %6961 = icmp ult i64 %6960, %6956
  %6962 = icmp ult i64 %6960, %6957
  %6963 = or i1 %6961, %6962
  %6964 = zext i1 %6963 to i8
  %6965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6964, i8* %6965, align 1, !tbaa !2432
  %6966 = trunc i64 %6960 to i32
  %6967 = and i32 %6966, 255
  %6968 = call i32 @llvm.ctpop.i32(i32 %6967) #16
  %6969 = trunc i32 %6968 to i8
  %6970 = and i8 %6969, 1
  %6971 = xor i8 %6970, 1
  %6972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6971, i8* %6972, align 1, !tbaa !2446
  %6973 = xor i64 %6957, %6956
  %6974 = xor i64 %6973, %6960
  %6975 = lshr i64 %6974, 4
  %6976 = trunc i64 %6975 to i8
  %6977 = and i8 %6976, 1
  %6978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6977, i8* %6978, align 1, !tbaa !2447
  %6979 = icmp eq i64 %6960, 0
  %6980 = zext i1 %6979 to i8
  %6981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6980, i8* %6981, align 1, !tbaa !2448
  %6982 = lshr i64 %6960, 63
  %6983 = trunc i64 %6982 to i8
  %6984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6983, i8* %6984, align 1, !tbaa !2449
  %6985 = lshr i64 %6956, 63
  %6986 = lshr i64 %6957, 63
  %6987 = xor i64 %6982, %6985
  %6988 = xor i64 %6982, %6986
  %6989 = add nuw nsw i64 %6987, %6988
  %6990 = icmp eq i64 %6989, 2
  %6991 = zext i1 %6990 to i8
  %6992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6991, i8* %6992, align 1, !tbaa !2450
  %6993 = load i64, i64* %RBP
  %6994 = sub i64 %6993, 108
  %6995 = load i64, i64* %PC
  %6996 = add i64 %6995, 4
  store i64 %6996, i64* %PC
  %6997 = inttoptr i64 %6994 to i32*
  %6998 = load i32, i32* %6997
  %6999 = sext i32 %6998 to i64
  store i64 %6999, i64* %RCX, align 8, !tbaa !2428
  %7000 = load i64, i64* %RAX
  %7001 = load i64, i64* %RCX
  %7002 = mul i64 %7001, 8
  %7003 = add i64 %7002, %7000
  %7004 = bitcast %union.vec128_t* %XMM0 to i8*
  %7005 = load i64, i64* %PC
  %7006 = add i64 %7005, 5
  store i64 %7006, i64* %PC
  %7007 = bitcast i8* %7004 to double*
  %7008 = load double, double* %7007, align 1
  %7009 = inttoptr i64 %7003 to double*
  store double %7008, double* %7009
  %7010 = load i64, i64* %RBP
  %7011 = add i64 %7010, 16
  %7012 = load i64, i64* %PC
  %7013 = add i64 %7012, 4
  store i64 %7013, i64* %PC
  %7014 = inttoptr i64 %7011 to i64*
  %7015 = load i64, i64* %7014
  store i64 %7015, i64* %RAX, align 8, !tbaa !2428
  %7016 = load i64, i64* %RBP
  %7017 = sub i64 %7016, 100
  %7018 = load i64, i64* %PC
  %7019 = add i64 %7018, 4
  store i64 %7019, i64* %PC
  %7020 = inttoptr i64 %7017 to i32*
  %7021 = load i32, i32* %7020
  %7022 = sext i32 %7021 to i64
  store i64 %7022, i64* %RCX, align 8, !tbaa !2428
  %7023 = load i64, i64* %RCX
  %7024 = load i64, i64* %PC
  %7025 = add i64 %7024, 7
  store i64 %7025, i64* %PC
  %7026 = sext i64 %7023 to i128
  %7027 = and i128 %7026, -18446744073709551616
  %7028 = zext i64 %7023 to i128
  %7029 = or i128 %7027, %7028
  %7030 = mul nsw i128 520, %7029
  %7031 = trunc i128 %7030 to i64
  store i64 %7031, i64* %RCX, align 8, !tbaa !2428
  %7032 = sext i64 %7031 to i128
  %7033 = icmp ne i128 %7032, %7030
  %7034 = zext i1 %7033 to i8
  %7035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7034, i8* %7035, align 1, !tbaa !2432
  %7036 = trunc i128 %7030 to i32
  %7037 = and i32 %7036, 255
  %7038 = call i32 @llvm.ctpop.i32(i32 %7037) #16
  %7039 = trunc i32 %7038 to i8
  %7040 = and i8 %7039, 1
  %7041 = xor i8 %7040, 1
  %7042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7041, i8* %7042, align 1, !tbaa !2446
  %7043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7043, align 1, !tbaa !2447
  %7044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7044, align 1, !tbaa !2448
  %7045 = lshr i64 %7031, 63
  %7046 = trunc i64 %7045 to i8
  %7047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7046, i8* %7047, align 1, !tbaa !2449
  %7048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7034, i8* %7048, align 1, !tbaa !2450
  %7049 = load i64, i64* %RAX
  %7050 = load i64, i64* %RCX
  %7051 = load i64, i64* %PC
  %7052 = add i64 %7051, 3
  store i64 %7052, i64* %PC
  %7053 = add i64 %7050, %7049
  store i64 %7053, i64* %RAX, align 8, !tbaa !2428
  %7054 = icmp ult i64 %7053, %7049
  %7055 = icmp ult i64 %7053, %7050
  %7056 = or i1 %7054, %7055
  %7057 = zext i1 %7056 to i8
  %7058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7057, i8* %7058, align 1, !tbaa !2432
  %7059 = trunc i64 %7053 to i32
  %7060 = and i32 %7059, 255
  %7061 = call i32 @llvm.ctpop.i32(i32 %7060) #16
  %7062 = trunc i32 %7061 to i8
  %7063 = and i8 %7062, 1
  %7064 = xor i8 %7063, 1
  %7065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7064, i8* %7065, align 1, !tbaa !2446
  %7066 = xor i64 %7050, %7049
  %7067 = xor i64 %7066, %7053
  %7068 = lshr i64 %7067, 4
  %7069 = trunc i64 %7068 to i8
  %7070 = and i8 %7069, 1
  %7071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7070, i8* %7071, align 1, !tbaa !2447
  %7072 = icmp eq i64 %7053, 0
  %7073 = zext i1 %7072 to i8
  %7074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7073, i8* %7074, align 1, !tbaa !2448
  %7075 = lshr i64 %7053, 63
  %7076 = trunc i64 %7075 to i8
  %7077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7076, i8* %7077, align 1, !tbaa !2449
  %7078 = lshr i64 %7049, 63
  %7079 = lshr i64 %7050, 63
  %7080 = xor i64 %7075, %7078
  %7081 = xor i64 %7075, %7079
  %7082 = add nuw nsw i64 %7080, %7081
  %7083 = icmp eq i64 %7082, 2
  %7084 = zext i1 %7083 to i8
  %7085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7084, i8* %7085, align 1, !tbaa !2450
  %7086 = load i64, i64* %RBP
  %7087 = sub i64 %7086, 104
  %7088 = load i64, i64* %PC
  %7089 = add i64 %7088, 4
  store i64 %7089, i64* %PC
  %7090 = inttoptr i64 %7087 to i32*
  %7091 = load i32, i32* %7090
  %7092 = sext i32 %7091 to i64
  store i64 %7092, i64* %RCX, align 8, !tbaa !2428
  %7093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7094 = load i64, i64* %RAX
  %7095 = load i64, i64* %RCX
  %7096 = mul i64 %7095, 8
  %7097 = add i64 %7096, %7094
  %7098 = load i64, i64* %PC
  %7099 = add i64 %7098, 5
  store i64 %7099, i64* %PC
  %7100 = inttoptr i64 %7097 to double*
  %7101 = load double, double* %7100
  %7102 = bitcast i8* %7093 to double*
  store double %7101, double* %7102, align 1, !tbaa !2452
  %7103 = getelementptr inbounds i8, i8* %7093, i64 8
  %7104 = bitcast i8* %7103 to double*
  store double 0.000000e+00, double* %7104, align 1, !tbaa !2452
  %7105 = load i64, i64* %RBP
  %7106 = add i64 %7105, 24
  %7107 = load i64, i64* %PC
  %7108 = add i64 %7107, 4
  store i64 %7108, i64* %PC
  %7109 = inttoptr i64 %7106 to i64*
  %7110 = load i64, i64* %7109
  store i64 %7110, i64* %RAX, align 8, !tbaa !2428
  %7111 = load i64, i64* %RBP
  %7112 = sub i64 %7111, 100
  %7113 = load i64, i64* %PC
  %7114 = add i64 %7113, 4
  store i64 %7114, i64* %PC
  %7115 = inttoptr i64 %7112 to i32*
  %7116 = load i32, i32* %7115
  %7117 = sext i32 %7116 to i64
  store i64 %7117, i64* %RCX, align 8, !tbaa !2428
  %7118 = load i64, i64* %RCX
  %7119 = load i64, i64* %PC
  %7120 = add i64 %7119, 7
  store i64 %7120, i64* %PC
  %7121 = sext i64 %7118 to i128
  %7122 = and i128 %7121, -18446744073709551616
  %7123 = zext i64 %7118 to i128
  %7124 = or i128 %7122, %7123
  %7125 = mul nsw i128 33800, %7124
  %7126 = trunc i128 %7125 to i64
  store i64 %7126, i64* %RCX, align 8, !tbaa !2428
  %7127 = sext i64 %7126 to i128
  %7128 = icmp ne i128 %7127, %7125
  %7129 = zext i1 %7128 to i8
  %7130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7129, i8* %7130, align 1, !tbaa !2432
  %7131 = trunc i128 %7125 to i32
  %7132 = and i32 %7131, 255
  %7133 = call i32 @llvm.ctpop.i32(i32 %7132) #16
  %7134 = trunc i32 %7133 to i8
  %7135 = and i8 %7134, 1
  %7136 = xor i8 %7135, 1
  %7137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7136, i8* %7137, align 1, !tbaa !2446
  %7138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7138, align 1, !tbaa !2447
  %7139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7139, align 1, !tbaa !2448
  %7140 = lshr i64 %7126, 63
  %7141 = trunc i64 %7140 to i8
  %7142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7141, i8* %7142, align 1, !tbaa !2449
  %7143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7129, i8* %7143, align 1, !tbaa !2450
  %7144 = load i64, i64* %RAX
  %7145 = load i64, i64* %RCX
  %7146 = load i64, i64* %PC
  %7147 = add i64 %7146, 3
  store i64 %7147, i64* %PC
  %7148 = add i64 %7145, %7144
  store i64 %7148, i64* %RAX, align 8, !tbaa !2428
  %7149 = icmp ult i64 %7148, %7144
  %7150 = icmp ult i64 %7148, %7145
  %7151 = or i1 %7149, %7150
  %7152 = zext i1 %7151 to i8
  %7153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7152, i8* %7153, align 1, !tbaa !2432
  %7154 = trunc i64 %7148 to i32
  %7155 = and i32 %7154, 255
  %7156 = call i32 @llvm.ctpop.i32(i32 %7155) #16
  %7157 = trunc i32 %7156 to i8
  %7158 = and i8 %7157, 1
  %7159 = xor i8 %7158, 1
  %7160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7159, i8* %7160, align 1, !tbaa !2446
  %7161 = xor i64 %7145, %7144
  %7162 = xor i64 %7161, %7148
  %7163 = lshr i64 %7162, 4
  %7164 = trunc i64 %7163 to i8
  %7165 = and i8 %7164, 1
  %7166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7165, i8* %7166, align 1, !tbaa !2447
  %7167 = icmp eq i64 %7148, 0
  %7168 = zext i1 %7167 to i8
  %7169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7168, i8* %7169, align 1, !tbaa !2448
  %7170 = lshr i64 %7148, 63
  %7171 = trunc i64 %7170 to i8
  %7172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7171, i8* %7172, align 1, !tbaa !2449
  %7173 = lshr i64 %7144, 63
  %7174 = lshr i64 %7145, 63
  %7175 = xor i64 %7170, %7173
  %7176 = xor i64 %7170, %7174
  %7177 = add nuw nsw i64 %7175, %7176
  %7178 = icmp eq i64 %7177, 2
  %7179 = zext i1 %7178 to i8
  %7180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7179, i8* %7180, align 1, !tbaa !2450
  %7181 = load i64, i64* %RBP
  %7182 = sub i64 %7181, 52
  %7183 = load i64, i64* %PC
  %7184 = add i64 %7183, 4
  store i64 %7184, i64* %PC
  %7185 = inttoptr i64 %7182 to i32*
  %7186 = load i32, i32* %7185
  %7187 = sext i32 %7186 to i64
  store i64 %7187, i64* %RCX, align 8, !tbaa !2428
  %7188 = load i64, i64* %RCX
  %7189 = load i64, i64* %PC
  %7190 = add i64 %7189, 7
  store i64 %7190, i64* %PC
  %7191 = sext i64 %7188 to i128
  %7192 = and i128 %7191, -18446744073709551616
  %7193 = zext i64 %7188 to i128
  %7194 = or i128 %7192, %7193
  %7195 = mul nsw i128 520, %7194
  %7196 = trunc i128 %7195 to i64
  store i64 %7196, i64* %RCX, align 8, !tbaa !2428
  %7197 = sext i64 %7196 to i128
  %7198 = icmp ne i128 %7197, %7195
  %7199 = zext i1 %7198 to i8
  %7200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7199, i8* %7200, align 1, !tbaa !2432
  %7201 = trunc i128 %7195 to i32
  %7202 = and i32 %7201, 255
  %7203 = call i32 @llvm.ctpop.i32(i32 %7202) #16
  %7204 = trunc i32 %7203 to i8
  %7205 = and i8 %7204, 1
  %7206 = xor i8 %7205, 1
  %7207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7206, i8* %7207, align 1, !tbaa !2446
  %7208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7208, align 1, !tbaa !2447
  %7209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7209, align 1, !tbaa !2448
  %7210 = lshr i64 %7196, 63
  %7211 = trunc i64 %7210 to i8
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7211, i8* %7212, align 1, !tbaa !2449
  %7213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7199, i8* %7213, align 1, !tbaa !2450
  %7214 = load i64, i64* %RAX
  %7215 = load i64, i64* %RCX
  %7216 = load i64, i64* %PC
  %7217 = add i64 %7216, 3
  store i64 %7217, i64* %PC
  %7218 = add i64 %7215, %7214
  store i64 %7218, i64* %RAX, align 8, !tbaa !2428
  %7219 = icmp ult i64 %7218, %7214
  %7220 = icmp ult i64 %7218, %7215
  %7221 = or i1 %7219, %7220
  %7222 = zext i1 %7221 to i8
  %7223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7222, i8* %7223, align 1, !tbaa !2432
  %7224 = trunc i64 %7218 to i32
  %7225 = and i32 %7224, 255
  %7226 = call i32 @llvm.ctpop.i32(i32 %7225) #16
  %7227 = trunc i32 %7226 to i8
  %7228 = and i8 %7227, 1
  %7229 = xor i8 %7228, 1
  %7230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7229, i8* %7230, align 1, !tbaa !2446
  %7231 = xor i64 %7215, %7214
  %7232 = xor i64 %7231, %7218
  %7233 = lshr i64 %7232, 4
  %7234 = trunc i64 %7233 to i8
  %7235 = and i8 %7234, 1
  %7236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7235, i8* %7236, align 1, !tbaa !2447
  %7237 = icmp eq i64 %7218, 0
  %7238 = zext i1 %7237 to i8
  %7239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7238, i8* %7239, align 1, !tbaa !2448
  %7240 = lshr i64 %7218, 63
  %7241 = trunc i64 %7240 to i8
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7241, i8* %7242, align 1, !tbaa !2449
  %7243 = lshr i64 %7214, 63
  %7244 = lshr i64 %7215, 63
  %7245 = xor i64 %7240, %7243
  %7246 = xor i64 %7240, %7244
  %7247 = add nuw nsw i64 %7245, %7246
  %7248 = icmp eq i64 %7247, 2
  %7249 = zext i1 %7248 to i8
  %7250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7249, i8* %7250, align 1, !tbaa !2450
  %7251 = load i64, i64* %RBP
  %7252 = sub i64 %7251, 108
  %7253 = load i64, i64* %PC
  %7254 = add i64 %7253, 4
  store i64 %7254, i64* %PC
  %7255 = inttoptr i64 %7252 to i32*
  %7256 = load i32, i32* %7255
  %7257 = sext i32 %7256 to i64
  store i64 %7257, i64* %RCX, align 8, !tbaa !2428
  %7258 = load i64, i64* %RAX
  %7259 = load i64, i64* %RCX
  %7260 = mul i64 %7259, 8
  %7261 = add i64 %7260, %7258
  %7262 = bitcast %union.vec128_t* %XMM0 to i8*
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 5
  store i64 %7264, i64* %PC
  %7265 = bitcast i8* %7262 to double*
  %7266 = load double, double* %7265, align 1
  %7267 = inttoptr i64 %7261 to double*
  store double %7266, double* %7267
  %7268 = load i64, i64* %RBP
  %7269 = sub i64 %7268, 108
  %7270 = load i64, i64* %PC
  %7271 = add i64 %7270, 3
  store i64 %7271, i64* %PC
  %7272 = inttoptr i64 %7269 to i32*
  %7273 = load i32, i32* %7272
  %7274 = zext i32 %7273 to i64
  store i64 %7274, i64* %RAX, align 8, !tbaa !2428
  %7275 = load i64, i64* %RAX
  %7276 = load i64, i64* %PC
  %7277 = add i64 %7276, 3
  store i64 %7277, i64* %PC
  %7278 = trunc i64 %7275 to i32
  %7279 = add i32 1, %7278
  %7280 = zext i32 %7279 to i64
  store i64 %7280, i64* %RAX, align 8, !tbaa !2428
  %7281 = icmp ult i32 %7279, %7278
  %7282 = icmp ult i32 %7279, 1
  %7283 = or i1 %7281, %7282
  %7284 = zext i1 %7283 to i8
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7284, i8* %7285, align 1, !tbaa !2432
  %7286 = and i32 %7279, 255
  %7287 = call i32 @llvm.ctpop.i32(i32 %7286) #16
  %7288 = trunc i32 %7287 to i8
  %7289 = and i8 %7288, 1
  %7290 = xor i8 %7289, 1
  %7291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7290, i8* %7291, align 1, !tbaa !2446
  %7292 = xor i64 1, %7275
  %7293 = trunc i64 %7292 to i32
  %7294 = xor i32 %7293, %7279
  %7295 = lshr i32 %7294, 4
  %7296 = trunc i32 %7295 to i8
  %7297 = and i8 %7296, 1
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7297, i8* %7298, align 1, !tbaa !2447
  %7299 = icmp eq i32 %7279, 0
  %7300 = zext i1 %7299 to i8
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7300, i8* %7301, align 1, !tbaa !2448
  %7302 = lshr i32 %7279, 31
  %7303 = trunc i32 %7302 to i8
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7303, i8* %7304, align 1, !tbaa !2449
  %7305 = lshr i32 %7278, 31
  %7306 = xor i32 %7302, %7305
  %7307 = add nuw nsw i32 %7306, %7302
  %7308 = icmp eq i32 %7307, 2
  %7309 = zext i1 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7309, i8* %7310, align 1, !tbaa !2450
  %7311 = load i64, i64* %RBP
  %7312 = sub i64 %7311, 108
  %7313 = load i32, i32* %EAX
  %7314 = zext i32 %7313 to i64
  %7315 = load i64, i64* %PC
  %7316 = add i64 %7315, 3
  store i64 %7316, i64* %PC
  %7317 = inttoptr i64 %7312 to i32*
  store i32 %7313, i32* %7317
  %7318 = load i64, i64* %PC
  %7319 = sub i64 %7318, 660
  %7320 = load i64, i64* %PC
  %7321 = add i64 %7320, 5
  store i64 %7321, i64* %PC
  %7322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7319, i64* %7322, align 8, !tbaa !2428
  br label %block_4019d2

block_4014ac:                                     ; preds = %block_4014a0
  %7323 = sub i64 %9950, 108
  %7324 = load i64, i64* %PC
  %7325 = add i64 %7324, 4
  store i64 %7325, i64* %PC
  %7326 = inttoptr i64 %7323 to i32*
  %7327 = load i32, i32* %7326
  %7328 = sext i32 %7327 to i64
  store i64 %7328, i64* %RCX, align 8, !tbaa !2428
  %7329 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7330 = load i64, i64* %RAX
  %7331 = load i64, i64* %RCX
  %7332 = mul i64 %7331, 8
  %7333 = add i64 %7332, %7330
  %7334 = load i64, i64* %PC
  %7335 = add i64 %7334, 5
  store i64 %7335, i64* %PC
  %7336 = inttoptr i64 %7333 to double*
  %7337 = load double, double* %7336
  %7338 = bitcast i8* %7329 to double*
  store double %7337, double* %7338, align 1, !tbaa !2452
  %7339 = getelementptr inbounds i8, i8* %7329, i64 8
  %7340 = bitcast i8* %7339 to double*
  store double 0.000000e+00, double* %7340, align 1, !tbaa !2452
  %7341 = load i64, i64* %RBP
  %7342 = add i64 %7341, 32
  %7343 = load i64, i64* %PC
  %7344 = add i64 %7343, 4
  store i64 %7344, i64* %PC
  %7345 = inttoptr i64 %7342 to i64*
  %7346 = load i64, i64* %7345
  store i64 %7346, i64* %RAX, align 8, !tbaa !2428
  %7347 = load i64, i64* %RBP
  %7348 = sub i64 %7347, 100
  %7349 = load i64, i64* %PC
  %7350 = add i64 %7349, 4
  store i64 %7350, i64* %PC
  %7351 = inttoptr i64 %7348 to i32*
  %7352 = load i32, i32* %7351
  %7353 = sext i32 %7352 to i64
  store i64 %7353, i64* %RCX, align 8, !tbaa !2428
  %7354 = load i64, i64* %RCX
  %7355 = load i64, i64* %PC
  %7356 = add i64 %7355, 7
  store i64 %7356, i64* %PC
  %7357 = sext i64 %7354 to i128
  %7358 = and i128 %7357, -18446744073709551616
  %7359 = zext i64 %7354 to i128
  %7360 = or i128 %7358, %7359
  %7361 = mul nsw i128 33800, %7360
  %7362 = trunc i128 %7361 to i64
  store i64 %7362, i64* %RCX, align 8, !tbaa !2428
  %7363 = sext i64 %7362 to i128
  %7364 = icmp ne i128 %7363, %7361
  %7365 = zext i1 %7364 to i8
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7365, i8* %7366, align 1, !tbaa !2432
  %7367 = trunc i128 %7361 to i32
  %7368 = and i32 %7367, 255
  %7369 = call i32 @llvm.ctpop.i32(i32 %7368) #16
  %7370 = trunc i32 %7369 to i8
  %7371 = and i8 %7370, 1
  %7372 = xor i8 %7371, 1
  %7373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7372, i8* %7373, align 1, !tbaa !2446
  %7374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7374, align 1, !tbaa !2447
  %7375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7375, align 1, !tbaa !2448
  %7376 = lshr i64 %7362, 63
  %7377 = trunc i64 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7377, i8* %7378, align 1, !tbaa !2449
  %7379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7365, i8* %7379, align 1, !tbaa !2450
  %7380 = load i64, i64* %RAX
  %7381 = load i64, i64* %RCX
  %7382 = load i64, i64* %PC
  %7383 = add i64 %7382, 3
  store i64 %7383, i64* %PC
  %7384 = add i64 %7381, %7380
  store i64 %7384, i64* %RAX, align 8, !tbaa !2428
  %7385 = icmp ult i64 %7384, %7380
  %7386 = icmp ult i64 %7384, %7381
  %7387 = or i1 %7385, %7386
  %7388 = zext i1 %7387 to i8
  %7389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7388, i8* %7389, align 1, !tbaa !2432
  %7390 = trunc i64 %7384 to i32
  %7391 = and i32 %7390, 255
  %7392 = call i32 @llvm.ctpop.i32(i32 %7391) #16
  %7393 = trunc i32 %7392 to i8
  %7394 = and i8 %7393, 1
  %7395 = xor i8 %7394, 1
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7395, i8* %7396, align 1, !tbaa !2446
  %7397 = xor i64 %7381, %7380
  %7398 = xor i64 %7397, %7384
  %7399 = lshr i64 %7398, 4
  %7400 = trunc i64 %7399 to i8
  %7401 = and i8 %7400, 1
  %7402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7401, i8* %7402, align 1, !tbaa !2447
  %7403 = icmp eq i64 %7384, 0
  %7404 = zext i1 %7403 to i8
  %7405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7404, i8* %7405, align 1, !tbaa !2448
  %7406 = lshr i64 %7384, 63
  %7407 = trunc i64 %7406 to i8
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7407, i8* %7408, align 1, !tbaa !2449
  %7409 = lshr i64 %7380, 63
  %7410 = lshr i64 %7381, 63
  %7411 = xor i64 %7406, %7409
  %7412 = xor i64 %7406, %7410
  %7413 = add nuw nsw i64 %7411, %7412
  %7414 = icmp eq i64 %7413, 2
  %7415 = zext i1 %7414 to i8
  %7416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7415, i8* %7416, align 1, !tbaa !2450
  %7417 = load i64, i64* %RBP
  %7418 = sub i64 %7417, 104
  %7419 = load i64, i64* %PC
  %7420 = add i64 %7419, 3
  store i64 %7420, i64* %PC
  %7421 = inttoptr i64 %7418 to i32*
  %7422 = load i32, i32* %7421
  %7423 = zext i32 %7422 to i64
  store i64 %7423, i64* %RDX, align 8, !tbaa !2428
  %7424 = load i64, i64* %RDX
  %7425 = load i64, i64* %PC
  %7426 = add i64 %7425, 3
  store i64 %7426, i64* %PC
  %7427 = trunc i64 %7424 to i32
  %7428 = add i32 1, %7427
  %7429 = zext i32 %7428 to i64
  store i64 %7429, i64* %RDX, align 8, !tbaa !2428
  %7430 = icmp ult i32 %7428, %7427
  %7431 = icmp ult i32 %7428, 1
  %7432 = or i1 %7430, %7431
  %7433 = zext i1 %7432 to i8
  %7434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7433, i8* %7434, align 1, !tbaa !2432
  %7435 = and i32 %7428, 255
  %7436 = call i32 @llvm.ctpop.i32(i32 %7435) #16
  %7437 = trunc i32 %7436 to i8
  %7438 = and i8 %7437, 1
  %7439 = xor i8 %7438, 1
  %7440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7439, i8* %7440, align 1, !tbaa !2446
  %7441 = xor i64 1, %7424
  %7442 = trunc i64 %7441 to i32
  %7443 = xor i32 %7442, %7428
  %7444 = lshr i32 %7443, 4
  %7445 = trunc i32 %7444 to i8
  %7446 = and i8 %7445, 1
  %7447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7446, i8* %7447, align 1, !tbaa !2447
  %7448 = icmp eq i32 %7428, 0
  %7449 = zext i1 %7448 to i8
  %7450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7449, i8* %7450, align 1, !tbaa !2448
  %7451 = lshr i32 %7428, 31
  %7452 = trunc i32 %7451 to i8
  %7453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7452, i8* %7453, align 1, !tbaa !2449
  %7454 = lshr i32 %7427, 31
  %7455 = xor i32 %7451, %7454
  %7456 = add nuw nsw i32 %7455, %7451
  %7457 = icmp eq i32 %7456, 2
  %7458 = zext i1 %7457 to i8
  %7459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7458, i8* %7459, align 1, !tbaa !2450
  %7460 = load i32, i32* %EDX
  %7461 = zext i32 %7460 to i64
  %7462 = load i64, i64* %PC
  %7463 = add i64 %7462, 3
  store i64 %7463, i64* %PC
  %7464 = shl i64 %7461, 32
  %7465 = ashr exact i64 %7464, 32
  store i64 %7465, i64* %RCX, align 8, !tbaa !2428
  %7466 = load i64, i64* %RCX
  %7467 = load i64, i64* %PC
  %7468 = add i64 %7467, 7
  store i64 %7468, i64* %PC
  %7469 = sext i64 %7466 to i128
  %7470 = and i128 %7469, -18446744073709551616
  %7471 = zext i64 %7466 to i128
  %7472 = or i128 %7470, %7471
  %7473 = mul nsw i128 520, %7472
  %7474 = trunc i128 %7473 to i64
  store i64 %7474, i64* %RCX, align 8, !tbaa !2428
  %7475 = sext i64 %7474 to i128
  %7476 = icmp ne i128 %7475, %7473
  %7477 = zext i1 %7476 to i8
  %7478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7477, i8* %7478, align 1, !tbaa !2432
  %7479 = trunc i128 %7473 to i32
  %7480 = and i32 %7479, 255
  %7481 = call i32 @llvm.ctpop.i32(i32 %7480) #16
  %7482 = trunc i32 %7481 to i8
  %7483 = and i8 %7482, 1
  %7484 = xor i8 %7483, 1
  %7485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7484, i8* %7485, align 1, !tbaa !2446
  %7486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7486, align 1, !tbaa !2447
  %7487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7487, align 1, !tbaa !2448
  %7488 = lshr i64 %7474, 63
  %7489 = trunc i64 %7488 to i8
  %7490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7489, i8* %7490, align 1, !tbaa !2449
  %7491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7477, i8* %7491, align 1, !tbaa !2450
  %7492 = load i64, i64* %RAX
  %7493 = load i64, i64* %RCX
  %7494 = load i64, i64* %PC
  %7495 = add i64 %7494, 3
  store i64 %7495, i64* %PC
  %7496 = add i64 %7493, %7492
  store i64 %7496, i64* %RAX, align 8, !tbaa !2428
  %7497 = icmp ult i64 %7496, %7492
  %7498 = icmp ult i64 %7496, %7493
  %7499 = or i1 %7497, %7498
  %7500 = zext i1 %7499 to i8
  %7501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7500, i8* %7501, align 1, !tbaa !2432
  %7502 = trunc i64 %7496 to i32
  %7503 = and i32 %7502, 255
  %7504 = call i32 @llvm.ctpop.i32(i32 %7503) #16
  %7505 = trunc i32 %7504 to i8
  %7506 = and i8 %7505, 1
  %7507 = xor i8 %7506, 1
  %7508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7507, i8* %7508, align 1, !tbaa !2446
  %7509 = xor i64 %7493, %7492
  %7510 = xor i64 %7509, %7496
  %7511 = lshr i64 %7510, 4
  %7512 = trunc i64 %7511 to i8
  %7513 = and i8 %7512, 1
  %7514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7513, i8* %7514, align 1, !tbaa !2447
  %7515 = icmp eq i64 %7496, 0
  %7516 = zext i1 %7515 to i8
  %7517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7516, i8* %7517, align 1, !tbaa !2448
  %7518 = lshr i64 %7496, 63
  %7519 = trunc i64 %7518 to i8
  %7520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7519, i8* %7520, align 1, !tbaa !2449
  %7521 = lshr i64 %7492, 63
  %7522 = lshr i64 %7493, 63
  %7523 = xor i64 %7518, %7521
  %7524 = xor i64 %7518, %7522
  %7525 = add nuw nsw i64 %7523, %7524
  %7526 = icmp eq i64 %7525, 2
  %7527 = zext i1 %7526 to i8
  %7528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7527, i8* %7528, align 1, !tbaa !2450
  %7529 = load i64, i64* %RBP
  %7530 = sub i64 %7529, 108
  %7531 = load i64, i64* %PC
  %7532 = add i64 %7531, 4
  store i64 %7532, i64* %PC
  %7533 = inttoptr i64 %7530 to i32*
  %7534 = load i32, i32* %7533
  %7535 = sext i32 %7534 to i64
  store i64 %7535, i64* %RCX, align 8, !tbaa !2428
  %7536 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7537 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7538 = load i64, i64* %RAX
  %7539 = load i64, i64* %RCX
  %7540 = mul i64 %7539, 8
  %7541 = add i64 %7540, %7538
  %7542 = load i64, i64* %PC
  %7543 = add i64 %7542, 5
  store i64 %7543, i64* %PC
  %7544 = bitcast i8* %7537 to double*
  %7545 = load double, double* %7544, align 1
  %7546 = getelementptr inbounds i8, i8* %7537, i64 8
  %7547 = bitcast i8* %7546 to i64*
  %7548 = load i64, i64* %7547, align 1
  %7549 = inttoptr i64 %7541 to double*
  %7550 = load double, double* %7549
  %7551 = fsub double %7545, %7550
  %7552 = bitcast i8* %7536 to double*
  store double %7551, double* %7552, align 1, !tbaa !2452
  %7553 = getelementptr inbounds i8, i8* %7536, i64 8
  %7554 = bitcast i8* %7553 to i64*
  store i64 %7548, i64* %7554, align 1, !tbaa !2452
  %7555 = load i64, i64* %RBP
  %7556 = add i64 %7555, 40
  %7557 = load i64, i64* %PC
  %7558 = add i64 %7557, 4
  store i64 %7558, i64* %PC
  %7559 = inttoptr i64 %7556 to i64*
  %7560 = load i64, i64* %7559
  store i64 %7560, i64* %RAX, align 8, !tbaa !2428
  %7561 = load i64, i64* %RBP
  %7562 = sub i64 %7561, 100
  %7563 = load i64, i64* %PC
  %7564 = add i64 %7563, 4
  store i64 %7564, i64* %PC
  %7565 = inttoptr i64 %7562 to i32*
  %7566 = load i32, i32* %7565
  %7567 = sext i32 %7566 to i64
  store i64 %7567, i64* %RCX, align 8, !tbaa !2428
  %7568 = load i64, i64* %RCX
  %7569 = load i64, i64* %PC
  %7570 = add i64 %7569, 7
  store i64 %7570, i64* %PC
  %7571 = sext i64 %7568 to i128
  %7572 = and i128 %7571, -18446744073709551616
  %7573 = zext i64 %7568 to i128
  %7574 = or i128 %7572, %7573
  %7575 = mul nsw i128 33800, %7574
  %7576 = trunc i128 %7575 to i64
  store i64 %7576, i64* %RCX, align 8, !tbaa !2428
  %7577 = sext i64 %7576 to i128
  %7578 = icmp ne i128 %7577, %7575
  %7579 = zext i1 %7578 to i8
  %7580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7579, i8* %7580, align 1, !tbaa !2432
  %7581 = trunc i128 %7575 to i32
  %7582 = and i32 %7581, 255
  %7583 = call i32 @llvm.ctpop.i32(i32 %7582) #16
  %7584 = trunc i32 %7583 to i8
  %7585 = and i8 %7584, 1
  %7586 = xor i8 %7585, 1
  %7587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7586, i8* %7587, align 1, !tbaa !2446
  %7588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7588, align 1, !tbaa !2447
  %7589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7589, align 1, !tbaa !2448
  %7590 = lshr i64 %7576, 63
  %7591 = trunc i64 %7590 to i8
  %7592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7591, i8* %7592, align 1, !tbaa !2449
  %7593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7579, i8* %7593, align 1, !tbaa !2450
  %7594 = load i64, i64* %RAX
  %7595 = load i64, i64* %RCX
  %7596 = load i64, i64* %PC
  %7597 = add i64 %7596, 3
  store i64 %7597, i64* %PC
  %7598 = add i64 %7595, %7594
  store i64 %7598, i64* %RAX, align 8, !tbaa !2428
  %7599 = icmp ult i64 %7598, %7594
  %7600 = icmp ult i64 %7598, %7595
  %7601 = or i1 %7599, %7600
  %7602 = zext i1 %7601 to i8
  %7603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7602, i8* %7603, align 1, !tbaa !2432
  %7604 = trunc i64 %7598 to i32
  %7605 = and i32 %7604, 255
  %7606 = call i32 @llvm.ctpop.i32(i32 %7605) #16
  %7607 = trunc i32 %7606 to i8
  %7608 = and i8 %7607, 1
  %7609 = xor i8 %7608, 1
  %7610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7609, i8* %7610, align 1, !tbaa !2446
  %7611 = xor i64 %7595, %7594
  %7612 = xor i64 %7611, %7598
  %7613 = lshr i64 %7612, 4
  %7614 = trunc i64 %7613 to i8
  %7615 = and i8 %7614, 1
  %7616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7615, i8* %7616, align 1, !tbaa !2447
  %7617 = icmp eq i64 %7598, 0
  %7618 = zext i1 %7617 to i8
  %7619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7618, i8* %7619, align 1, !tbaa !2448
  %7620 = lshr i64 %7598, 63
  %7621 = trunc i64 %7620 to i8
  %7622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7621, i8* %7622, align 1, !tbaa !2449
  %7623 = lshr i64 %7594, 63
  %7624 = lshr i64 %7595, 63
  %7625 = xor i64 %7620, %7623
  %7626 = xor i64 %7620, %7624
  %7627 = add nuw nsw i64 %7625, %7626
  %7628 = icmp eq i64 %7627, 2
  %7629 = zext i1 %7628 to i8
  %7630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7629, i8* %7630, align 1, !tbaa !2450
  %7631 = load i64, i64* %RBP
  %7632 = sub i64 %7631, 104
  %7633 = load i64, i64* %PC
  %7634 = add i64 %7633, 4
  store i64 %7634, i64* %PC
  %7635 = inttoptr i64 %7632 to i32*
  %7636 = load i32, i32* %7635
  %7637 = sext i32 %7636 to i64
  store i64 %7637, i64* %RCX, align 8, !tbaa !2428
  %7638 = load i64, i64* %RCX
  %7639 = load i64, i64* %PC
  %7640 = add i64 %7639, 7
  store i64 %7640, i64* %PC
  %7641 = sext i64 %7638 to i128
  %7642 = and i128 %7641, -18446744073709551616
  %7643 = zext i64 %7638 to i128
  %7644 = or i128 %7642, %7643
  %7645 = mul nsw i128 520, %7644
  %7646 = trunc i128 %7645 to i64
  store i64 %7646, i64* %RCX, align 8, !tbaa !2428
  %7647 = sext i64 %7646 to i128
  %7648 = icmp ne i128 %7647, %7645
  %7649 = zext i1 %7648 to i8
  %7650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7649, i8* %7650, align 1, !tbaa !2432
  %7651 = trunc i128 %7645 to i32
  %7652 = and i32 %7651, 255
  %7653 = call i32 @llvm.ctpop.i32(i32 %7652) #16
  %7654 = trunc i32 %7653 to i8
  %7655 = and i8 %7654, 1
  %7656 = xor i8 %7655, 1
  %7657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7656, i8* %7657, align 1, !tbaa !2446
  %7658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7658, align 1, !tbaa !2447
  %7659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7659, align 1, !tbaa !2448
  %7660 = lshr i64 %7646, 63
  %7661 = trunc i64 %7660 to i8
  %7662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7661, i8* %7662, align 1, !tbaa !2449
  %7663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7649, i8* %7663, align 1, !tbaa !2450
  %7664 = load i64, i64* %RAX
  %7665 = load i64, i64* %RCX
  %7666 = load i64, i64* %PC
  %7667 = add i64 %7666, 3
  store i64 %7667, i64* %PC
  %7668 = add i64 %7665, %7664
  store i64 %7668, i64* %RAX, align 8, !tbaa !2428
  %7669 = icmp ult i64 %7668, %7664
  %7670 = icmp ult i64 %7668, %7665
  %7671 = or i1 %7669, %7670
  %7672 = zext i1 %7671 to i8
  %7673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7672, i8* %7673, align 1, !tbaa !2432
  %7674 = trunc i64 %7668 to i32
  %7675 = and i32 %7674, 255
  %7676 = call i32 @llvm.ctpop.i32(i32 %7675) #16
  %7677 = trunc i32 %7676 to i8
  %7678 = and i8 %7677, 1
  %7679 = xor i8 %7678, 1
  %7680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7679, i8* %7680, align 1, !tbaa !2446
  %7681 = xor i64 %7665, %7664
  %7682 = xor i64 %7681, %7668
  %7683 = lshr i64 %7682, 4
  %7684 = trunc i64 %7683 to i8
  %7685 = and i8 %7684, 1
  %7686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7685, i8* %7686, align 1, !tbaa !2447
  %7687 = icmp eq i64 %7668, 0
  %7688 = zext i1 %7687 to i8
  %7689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7688, i8* %7689, align 1, !tbaa !2448
  %7690 = lshr i64 %7668, 63
  %7691 = trunc i64 %7690 to i8
  %7692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7691, i8* %7692, align 1, !tbaa !2449
  %7693 = lshr i64 %7664, 63
  %7694 = lshr i64 %7665, 63
  %7695 = xor i64 %7690, %7693
  %7696 = xor i64 %7690, %7694
  %7697 = add nuw nsw i64 %7695, %7696
  %7698 = icmp eq i64 %7697, 2
  %7699 = zext i1 %7698 to i8
  %7700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7699, i8* %7700, align 1, !tbaa !2450
  %7701 = load i64, i64* %RBP
  %7702 = sub i64 %7701, 108
  %7703 = load i64, i64* %PC
  %7704 = add i64 %7703, 3
  store i64 %7704, i64* %PC
  %7705 = inttoptr i64 %7702 to i32*
  %7706 = load i32, i32* %7705
  %7707 = zext i32 %7706 to i64
  store i64 %7707, i64* %RDX, align 8, !tbaa !2428
  %7708 = load i64, i64* %RDX
  %7709 = load i64, i64* %PC
  %7710 = add i64 %7709, 3
  store i64 %7710, i64* %PC
  %7711 = trunc i64 %7708 to i32
  %7712 = add i32 1, %7711
  %7713 = zext i32 %7712 to i64
  store i64 %7713, i64* %RDX, align 8, !tbaa !2428
  %7714 = icmp ult i32 %7712, %7711
  %7715 = icmp ult i32 %7712, 1
  %7716 = or i1 %7714, %7715
  %7717 = zext i1 %7716 to i8
  %7718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7717, i8* %7718, align 1, !tbaa !2432
  %7719 = and i32 %7712, 255
  %7720 = call i32 @llvm.ctpop.i32(i32 %7719) #16
  %7721 = trunc i32 %7720 to i8
  %7722 = and i8 %7721, 1
  %7723 = xor i8 %7722, 1
  %7724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7723, i8* %7724, align 1, !tbaa !2446
  %7725 = xor i64 1, %7708
  %7726 = trunc i64 %7725 to i32
  %7727 = xor i32 %7726, %7712
  %7728 = lshr i32 %7727, 4
  %7729 = trunc i32 %7728 to i8
  %7730 = and i8 %7729, 1
  %7731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7730, i8* %7731, align 1, !tbaa !2447
  %7732 = icmp eq i32 %7712, 0
  %7733 = zext i1 %7732 to i8
  %7734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7733, i8* %7734, align 1, !tbaa !2448
  %7735 = lshr i32 %7712, 31
  %7736 = trunc i32 %7735 to i8
  %7737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7736, i8* %7737, align 1, !tbaa !2449
  %7738 = lshr i32 %7711, 31
  %7739 = xor i32 %7735, %7738
  %7740 = add nuw nsw i32 %7739, %7735
  %7741 = icmp eq i32 %7740, 2
  %7742 = zext i1 %7741 to i8
  %7743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7742, i8* %7743, align 1, !tbaa !2450
  %7744 = load i32, i32* %EDX
  %7745 = zext i32 %7744 to i64
  %7746 = load i64, i64* %PC
  %7747 = add i64 %7746, 3
  store i64 %7747, i64* %PC
  %7748 = shl i64 %7745, 32
  %7749 = ashr exact i64 %7748, 32
  store i64 %7749, i64* %RCX, align 8, !tbaa !2428
  %7750 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7751 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7752 = load i64, i64* %RAX
  %7753 = load i64, i64* %RCX
  %7754 = mul i64 %7753, 8
  %7755 = add i64 %7754, %7752
  %7756 = load i64, i64* %PC
  %7757 = add i64 %7756, 5
  store i64 %7757, i64* %PC
  %7758 = bitcast i8* %7751 to double*
  %7759 = load double, double* %7758, align 1
  %7760 = getelementptr inbounds i8, i8* %7751, i64 8
  %7761 = bitcast i8* %7760 to i64*
  %7762 = load i64, i64* %7761, align 1
  %7763 = inttoptr i64 %7755 to double*
  %7764 = load double, double* %7763
  %7765 = fadd double %7759, %7764
  %7766 = bitcast i8* %7750 to double*
  store double %7765, double* %7766, align 1, !tbaa !2452
  %7767 = getelementptr inbounds i8, i8* %7750, i64 8
  %7768 = bitcast i8* %7767 to i64*
  store i64 %7762, i64* %7768, align 1, !tbaa !2452
  %7769 = load i64, i64* %RBP
  %7770 = add i64 %7769, 40
  %7771 = load i64, i64* %PC
  %7772 = add i64 %7771, 4
  store i64 %7772, i64* %PC
  %7773 = inttoptr i64 %7770 to i64*
  %7774 = load i64, i64* %7773
  store i64 %7774, i64* %RAX, align 8, !tbaa !2428
  %7775 = load i64, i64* %RBP
  %7776 = sub i64 %7775, 100
  %7777 = load i64, i64* %PC
  %7778 = add i64 %7777, 4
  store i64 %7778, i64* %PC
  %7779 = inttoptr i64 %7776 to i32*
  %7780 = load i32, i32* %7779
  %7781 = sext i32 %7780 to i64
  store i64 %7781, i64* %RCX, align 8, !tbaa !2428
  %7782 = load i64, i64* %RCX
  %7783 = load i64, i64* %PC
  %7784 = add i64 %7783, 7
  store i64 %7784, i64* %PC
  %7785 = sext i64 %7782 to i128
  %7786 = and i128 %7785, -18446744073709551616
  %7787 = zext i64 %7782 to i128
  %7788 = or i128 %7786, %7787
  %7789 = mul nsw i128 33800, %7788
  %7790 = trunc i128 %7789 to i64
  store i64 %7790, i64* %RCX, align 8, !tbaa !2428
  %7791 = sext i64 %7790 to i128
  %7792 = icmp ne i128 %7791, %7789
  %7793 = zext i1 %7792 to i8
  %7794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7793, i8* %7794, align 1, !tbaa !2432
  %7795 = trunc i128 %7789 to i32
  %7796 = and i32 %7795, 255
  %7797 = call i32 @llvm.ctpop.i32(i32 %7796) #16
  %7798 = trunc i32 %7797 to i8
  %7799 = and i8 %7798, 1
  %7800 = xor i8 %7799, 1
  %7801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7800, i8* %7801, align 1, !tbaa !2446
  %7802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7802, align 1, !tbaa !2447
  %7803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7803, align 1, !tbaa !2448
  %7804 = lshr i64 %7790, 63
  %7805 = trunc i64 %7804 to i8
  %7806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7805, i8* %7806, align 1, !tbaa !2449
  %7807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7793, i8* %7807, align 1, !tbaa !2450
  %7808 = load i64, i64* %RAX
  %7809 = load i64, i64* %RCX
  %7810 = load i64, i64* %PC
  %7811 = add i64 %7810, 3
  store i64 %7811, i64* %PC
  %7812 = add i64 %7809, %7808
  store i64 %7812, i64* %RAX, align 8, !tbaa !2428
  %7813 = icmp ult i64 %7812, %7808
  %7814 = icmp ult i64 %7812, %7809
  %7815 = or i1 %7813, %7814
  %7816 = zext i1 %7815 to i8
  %7817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7816, i8* %7817, align 1, !tbaa !2432
  %7818 = trunc i64 %7812 to i32
  %7819 = and i32 %7818, 255
  %7820 = call i32 @llvm.ctpop.i32(i32 %7819) #16
  %7821 = trunc i32 %7820 to i8
  %7822 = and i8 %7821, 1
  %7823 = xor i8 %7822, 1
  %7824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7823, i8* %7824, align 1, !tbaa !2446
  %7825 = xor i64 %7809, %7808
  %7826 = xor i64 %7825, %7812
  %7827 = lshr i64 %7826, 4
  %7828 = trunc i64 %7827 to i8
  %7829 = and i8 %7828, 1
  %7830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7829, i8* %7830, align 1, !tbaa !2447
  %7831 = icmp eq i64 %7812, 0
  %7832 = zext i1 %7831 to i8
  %7833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7832, i8* %7833, align 1, !tbaa !2448
  %7834 = lshr i64 %7812, 63
  %7835 = trunc i64 %7834 to i8
  %7836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7835, i8* %7836, align 1, !tbaa !2449
  %7837 = lshr i64 %7808, 63
  %7838 = lshr i64 %7809, 63
  %7839 = xor i64 %7834, %7837
  %7840 = xor i64 %7834, %7838
  %7841 = add nuw nsw i64 %7839, %7840
  %7842 = icmp eq i64 %7841, 2
  %7843 = zext i1 %7842 to i8
  %7844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7843, i8* %7844, align 1, !tbaa !2450
  %7845 = load i64, i64* %RBP
  %7846 = sub i64 %7845, 104
  %7847 = load i64, i64* %PC
  %7848 = add i64 %7847, 4
  store i64 %7848, i64* %PC
  %7849 = inttoptr i64 %7846 to i32*
  %7850 = load i32, i32* %7849
  %7851 = sext i32 %7850 to i64
  store i64 %7851, i64* %RCX, align 8, !tbaa !2428
  %7852 = load i64, i64* %RCX
  %7853 = load i64, i64* %PC
  %7854 = add i64 %7853, 7
  store i64 %7854, i64* %PC
  %7855 = sext i64 %7852 to i128
  %7856 = and i128 %7855, -18446744073709551616
  %7857 = zext i64 %7852 to i128
  %7858 = or i128 %7856, %7857
  %7859 = mul nsw i128 520, %7858
  %7860 = trunc i128 %7859 to i64
  store i64 %7860, i64* %RCX, align 8, !tbaa !2428
  %7861 = sext i64 %7860 to i128
  %7862 = icmp ne i128 %7861, %7859
  %7863 = zext i1 %7862 to i8
  %7864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7863, i8* %7864, align 1, !tbaa !2432
  %7865 = trunc i128 %7859 to i32
  %7866 = and i32 %7865, 255
  %7867 = call i32 @llvm.ctpop.i32(i32 %7866) #16
  %7868 = trunc i32 %7867 to i8
  %7869 = and i8 %7868, 1
  %7870 = xor i8 %7869, 1
  %7871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7870, i8* %7871, align 1, !tbaa !2446
  %7872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7872, align 1, !tbaa !2447
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7873, align 1, !tbaa !2448
  %7874 = lshr i64 %7860, 63
  %7875 = trunc i64 %7874 to i8
  %7876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7875, i8* %7876, align 1, !tbaa !2449
  %7877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7863, i8* %7877, align 1, !tbaa !2450
  %7878 = load i64, i64* %RAX
  %7879 = load i64, i64* %RCX
  %7880 = load i64, i64* %PC
  %7881 = add i64 %7880, 3
  store i64 %7881, i64* %PC
  %7882 = add i64 %7879, %7878
  store i64 %7882, i64* %RAX, align 8, !tbaa !2428
  %7883 = icmp ult i64 %7882, %7878
  %7884 = icmp ult i64 %7882, %7879
  %7885 = or i1 %7883, %7884
  %7886 = zext i1 %7885 to i8
  %7887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7886, i8* %7887, align 1, !tbaa !2432
  %7888 = trunc i64 %7882 to i32
  %7889 = and i32 %7888, 255
  %7890 = call i32 @llvm.ctpop.i32(i32 %7889) #16
  %7891 = trunc i32 %7890 to i8
  %7892 = and i8 %7891, 1
  %7893 = xor i8 %7892, 1
  %7894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7893, i8* %7894, align 1, !tbaa !2446
  %7895 = xor i64 %7879, %7878
  %7896 = xor i64 %7895, %7882
  %7897 = lshr i64 %7896, 4
  %7898 = trunc i64 %7897 to i8
  %7899 = and i8 %7898, 1
  %7900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7899, i8* %7900, align 1, !tbaa !2447
  %7901 = icmp eq i64 %7882, 0
  %7902 = zext i1 %7901 to i8
  %7903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7902, i8* %7903, align 1, !tbaa !2448
  %7904 = lshr i64 %7882, 63
  %7905 = trunc i64 %7904 to i8
  %7906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7905, i8* %7906, align 1, !tbaa !2449
  %7907 = lshr i64 %7878, 63
  %7908 = lshr i64 %7879, 63
  %7909 = xor i64 %7904, %7907
  %7910 = xor i64 %7904, %7908
  %7911 = add nuw nsw i64 %7909, %7910
  %7912 = icmp eq i64 %7911, 2
  %7913 = zext i1 %7912 to i8
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7913, i8* %7914, align 1, !tbaa !2450
  %7915 = load i64, i64* %RBP
  %7916 = sub i64 %7915, 108
  %7917 = load i64, i64* %PC
  %7918 = add i64 %7917, 4
  store i64 %7918, i64* %PC
  %7919 = inttoptr i64 %7916 to i32*
  %7920 = load i32, i32* %7919
  %7921 = sext i32 %7920 to i64
  store i64 %7921, i64* %RCX, align 8, !tbaa !2428
  %7922 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7923 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7924 = load i64, i64* %RAX
  %7925 = load i64, i64* %RCX
  %7926 = mul i64 %7925, 8
  %7927 = add i64 %7926, %7924
  %7928 = load i64, i64* %PC
  %7929 = add i64 %7928, 5
  store i64 %7929, i64* %PC
  %7930 = bitcast i8* %7923 to double*
  %7931 = load double, double* %7930, align 1
  %7932 = getelementptr inbounds i8, i8* %7923, i64 8
  %7933 = bitcast i8* %7932 to i64*
  %7934 = load i64, i64* %7933, align 1
  %7935 = inttoptr i64 %7927 to double*
  %7936 = load double, double* %7935
  %7937 = fsub double %7931, %7936
  %7938 = bitcast i8* %7922 to double*
  store double %7937, double* %7938, align 1, !tbaa !2452
  %7939 = getelementptr inbounds i8, i8* %7922, i64 8
  %7940 = bitcast i8* %7939 to i64*
  store i64 %7934, i64* %7940, align 1, !tbaa !2452
  %7941 = load i64, i64* %RBP
  %7942 = sub i64 %7941, 96
  %7943 = load i64, i64* %PC
  %7944 = add i64 %7943, 4
  store i64 %7944, i64* %PC
  %7945 = inttoptr i64 %7942 to i64*
  %7946 = load i64, i64* %7945
  store i64 %7946, i64* %RAX, align 8, !tbaa !2428
  %7947 = load i64, i64* %RBP
  %7948 = sub i64 %7947, 100
  %7949 = load i64, i64* %PC
  %7950 = add i64 %7949, 4
  store i64 %7950, i64* %PC
  %7951 = inttoptr i64 %7948 to i32*
  %7952 = load i32, i32* %7951
  %7953 = sext i32 %7952 to i64
  store i64 %7953, i64* %RCX, align 8, !tbaa !2428
  %7954 = load i64, i64* %RCX
  %7955 = load i64, i64* %PC
  %7956 = add i64 %7955, 7
  store i64 %7956, i64* %PC
  %7957 = sext i64 %7954 to i128
  %7958 = and i128 %7957, -18446744073709551616
  %7959 = zext i64 %7954 to i128
  %7960 = or i128 %7958, %7959
  %7961 = mul nsw i128 520, %7960
  %7962 = trunc i128 %7961 to i64
  store i64 %7962, i64* %RCX, align 8, !tbaa !2428
  %7963 = sext i64 %7962 to i128
  %7964 = icmp ne i128 %7963, %7961
  %7965 = zext i1 %7964 to i8
  %7966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7965, i8* %7966, align 1, !tbaa !2432
  %7967 = trunc i128 %7961 to i32
  %7968 = and i32 %7967, 255
  %7969 = call i32 @llvm.ctpop.i32(i32 %7968) #16
  %7970 = trunc i32 %7969 to i8
  %7971 = and i8 %7970, 1
  %7972 = xor i8 %7971, 1
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7972, i8* %7973, align 1, !tbaa !2446
  %7974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7974, align 1, !tbaa !2447
  %7975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7975, align 1, !tbaa !2448
  %7976 = lshr i64 %7962, 63
  %7977 = trunc i64 %7976 to i8
  %7978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7977, i8* %7978, align 1, !tbaa !2449
  %7979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7965, i8* %7979, align 1, !tbaa !2450
  %7980 = load i64, i64* %RAX
  %7981 = load i64, i64* %RCX
  %7982 = load i64, i64* %PC
  %7983 = add i64 %7982, 3
  store i64 %7983, i64* %PC
  %7984 = add i64 %7981, %7980
  store i64 %7984, i64* %RAX, align 8, !tbaa !2428
  %7985 = icmp ult i64 %7984, %7980
  %7986 = icmp ult i64 %7984, %7981
  %7987 = or i1 %7985, %7986
  %7988 = zext i1 %7987 to i8
  %7989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7988, i8* %7989, align 1, !tbaa !2432
  %7990 = trunc i64 %7984 to i32
  %7991 = and i32 %7990, 255
  %7992 = call i32 @llvm.ctpop.i32(i32 %7991) #16
  %7993 = trunc i32 %7992 to i8
  %7994 = and i8 %7993, 1
  %7995 = xor i8 %7994, 1
  %7996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7995, i8* %7996, align 1, !tbaa !2446
  %7997 = xor i64 %7981, %7980
  %7998 = xor i64 %7997, %7984
  %7999 = lshr i64 %7998, 4
  %8000 = trunc i64 %7999 to i8
  %8001 = and i8 %8000, 1
  %8002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8001, i8* %8002, align 1, !tbaa !2447
  %8003 = icmp eq i64 %7984, 0
  %8004 = zext i1 %8003 to i8
  %8005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8004, i8* %8005, align 1, !tbaa !2448
  %8006 = lshr i64 %7984, 63
  %8007 = trunc i64 %8006 to i8
  %8008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8007, i8* %8008, align 1, !tbaa !2449
  %8009 = lshr i64 %7980, 63
  %8010 = lshr i64 %7981, 63
  %8011 = xor i64 %8006, %8009
  %8012 = xor i64 %8006, %8010
  %8013 = add nuw nsw i64 %8011, %8012
  %8014 = icmp eq i64 %8013, 2
  %8015 = zext i1 %8014 to i8
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8015, i8* %8016, align 1, !tbaa !2450
  %8017 = load i64, i64* %RBP
  %8018 = sub i64 %8017, 104
  %8019 = load i64, i64* %PC
  %8020 = add i64 %8019, 4
  store i64 %8020, i64* %PC
  %8021 = inttoptr i64 %8018 to i32*
  %8022 = load i32, i32* %8021
  %8023 = sext i32 %8022 to i64
  store i64 %8023, i64* %RCX, align 8, !tbaa !2428
  %8024 = load i64, i64* %RAX
  %8025 = load i64, i64* %RCX
  %8026 = mul i64 %8025, 8
  %8027 = add i64 %8026, %8024
  %8028 = bitcast %union.vec128_t* %XMM0 to i8*
  %8029 = load i64, i64* %PC
  %8030 = add i64 %8029, 5
  store i64 %8030, i64* %PC
  %8031 = bitcast i8* %8028 to double*
  %8032 = load double, double* %8031, align 1
  %8033 = inttoptr i64 %8027 to double*
  store double %8032, double* %8033
  %8034 = load i64, i64* %RBP
  %8035 = add i64 %8034, 88
  %8036 = load i64, i64* %PC
  %8037 = add i64 %8036, 4
  store i64 %8037, i64* %PC
  %8038 = inttoptr i64 %8035 to i64*
  %8039 = load i64, i64* %8038
  store i64 %8039, i64* %RAX, align 8, !tbaa !2428
  %8040 = load i64, i64* %RBP
  %8041 = sub i64 %8040, 104
  %8042 = load i64, i64* %PC
  %8043 = add i64 %8042, 4
  store i64 %8043, i64* %PC
  %8044 = inttoptr i64 %8041 to i32*
  %8045 = load i32, i32* %8044
  %8046 = sext i32 %8045 to i64
  store i64 %8046, i64* %RCX, align 8, !tbaa !2428
  %8047 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8048 = load i64, i64* %RAX
  %8049 = load i64, i64* %RCX
  %8050 = mul i64 %8049, 8
  %8051 = add i64 %8050, %8048
  %8052 = load i64, i64* %PC
  %8053 = add i64 %8052, 5
  store i64 %8053, i64* %PC
  %8054 = inttoptr i64 %8051 to double*
  %8055 = load double, double* %8054
  %8056 = bitcast i8* %8047 to double*
  store double %8055, double* %8056, align 1, !tbaa !2452
  %8057 = getelementptr inbounds i8, i8* %8047, i64 8
  %8058 = bitcast i8* %8057 to double*
  store double 0.000000e+00, double* %8058, align 1, !tbaa !2452
  %8059 = load i64, i64* %RBP
  %8060 = add i64 %8059, 96
  %8061 = load i64, i64* %PC
  %8062 = add i64 %8061, 4
  store i64 %8062, i64* %PC
  %8063 = inttoptr i64 %8060 to i64*
  %8064 = load i64, i64* %8063
  store i64 %8064, i64* %RAX, align 8, !tbaa !2428
  %8065 = load i64, i64* %RBP
  %8066 = sub i64 %8065, 104
  %8067 = load i64, i64* %PC
  %8068 = add i64 %8067, 4
  store i64 %8068, i64* %PC
  %8069 = inttoptr i64 %8066 to i32*
  %8070 = load i32, i32* %8069
  %8071 = sext i32 %8070 to i64
  store i64 %8071, i64* %RCX, align 8, !tbaa !2428
  %8072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8073 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8074 = load i64, i64* %RAX
  %8075 = load i64, i64* %RCX
  %8076 = mul i64 %8075, 8
  %8077 = add i64 %8076, %8074
  %8078 = load i64, i64* %PC
  %8079 = add i64 %8078, 5
  store i64 %8079, i64* %PC
  %8080 = bitcast i8* %8073 to double*
  %8081 = load double, double* %8080, align 1
  %8082 = getelementptr inbounds i8, i8* %8073, i64 8
  %8083 = bitcast i8* %8082 to i64*
  %8084 = load i64, i64* %8083, align 1
  %8085 = inttoptr i64 %8077 to double*
  %8086 = load double, double* %8085
  %8087 = fdiv double %8081, %8086
  %8088 = bitcast i8* %8072 to double*
  store double %8087, double* %8088, align 1, !tbaa !2452
  %8089 = getelementptr inbounds i8, i8* %8072, i64 8
  %8090 = bitcast i8* %8089 to i64*
  store i64 %8084, i64* %8090, align 1, !tbaa !2452
  %8091 = load i64, i64* %RBP
  %8092 = add i64 %8091, 24
  %8093 = load i64, i64* %PC
  %8094 = add i64 %8093, 4
  store i64 %8094, i64* %PC
  %8095 = inttoptr i64 %8092 to i64*
  %8096 = load i64, i64* %8095
  store i64 %8096, i64* %RAX, align 8, !tbaa !2428
  %8097 = load i64, i64* %RBP
  %8098 = sub i64 %8097, 100
  %8099 = load i64, i64* %PC
  %8100 = add i64 %8099, 4
  store i64 %8100, i64* %PC
  %8101 = inttoptr i64 %8098 to i32*
  %8102 = load i32, i32* %8101
  %8103 = sext i32 %8102 to i64
  store i64 %8103, i64* %RCX, align 8, !tbaa !2428
  %8104 = load i64, i64* %RCX
  %8105 = load i64, i64* %PC
  %8106 = add i64 %8105, 7
  store i64 %8106, i64* %PC
  %8107 = sext i64 %8104 to i128
  %8108 = and i128 %8107, -18446744073709551616
  %8109 = zext i64 %8104 to i128
  %8110 = or i128 %8108, %8109
  %8111 = mul nsw i128 33800, %8110
  %8112 = trunc i128 %8111 to i64
  store i64 %8112, i64* %RCX, align 8, !tbaa !2428
  %8113 = sext i64 %8112 to i128
  %8114 = icmp ne i128 %8113, %8111
  %8115 = zext i1 %8114 to i8
  %8116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8115, i8* %8116, align 1, !tbaa !2432
  %8117 = trunc i128 %8111 to i32
  %8118 = and i32 %8117, 255
  %8119 = call i32 @llvm.ctpop.i32(i32 %8118) #16
  %8120 = trunc i32 %8119 to i8
  %8121 = and i8 %8120, 1
  %8122 = xor i8 %8121, 1
  %8123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8122, i8* %8123, align 1, !tbaa !2446
  %8124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8124, align 1, !tbaa !2447
  %8125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8125, align 1, !tbaa !2448
  %8126 = lshr i64 %8112, 63
  %8127 = trunc i64 %8126 to i8
  %8128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8127, i8* %8128, align 1, !tbaa !2449
  %8129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8115, i8* %8129, align 1, !tbaa !2450
  %8130 = load i64, i64* %RAX
  %8131 = load i64, i64* %RCX
  %8132 = load i64, i64* %PC
  %8133 = add i64 %8132, 3
  store i64 %8133, i64* %PC
  %8134 = add i64 %8131, %8130
  store i64 %8134, i64* %RAX, align 8, !tbaa !2428
  %8135 = icmp ult i64 %8134, %8130
  %8136 = icmp ult i64 %8134, %8131
  %8137 = or i1 %8135, %8136
  %8138 = zext i1 %8137 to i8
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8138, i8* %8139, align 1, !tbaa !2432
  %8140 = trunc i64 %8134 to i32
  %8141 = and i32 %8140, 255
  %8142 = call i32 @llvm.ctpop.i32(i32 %8141) #16
  %8143 = trunc i32 %8142 to i8
  %8144 = and i8 %8143, 1
  %8145 = xor i8 %8144, 1
  %8146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8145, i8* %8146, align 1, !tbaa !2446
  %8147 = xor i64 %8131, %8130
  %8148 = xor i64 %8147, %8134
  %8149 = lshr i64 %8148, 4
  %8150 = trunc i64 %8149 to i8
  %8151 = and i8 %8150, 1
  %8152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8151, i8* %8152, align 1, !tbaa !2447
  %8153 = icmp eq i64 %8134, 0
  %8154 = zext i1 %8153 to i8
  %8155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8154, i8* %8155, align 1, !tbaa !2448
  %8156 = lshr i64 %8134, 63
  %8157 = trunc i64 %8156 to i8
  %8158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8157, i8* %8158, align 1, !tbaa !2449
  %8159 = lshr i64 %8130, 63
  %8160 = lshr i64 %8131, 63
  %8161 = xor i64 %8156, %8159
  %8162 = xor i64 %8156, %8160
  %8163 = add nuw nsw i64 %8161, %8162
  %8164 = icmp eq i64 %8163, 2
  %8165 = zext i1 %8164 to i8
  %8166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8165, i8* %8166, align 1, !tbaa !2450
  %8167 = load i64, i64* %RBP
  %8168 = sub i64 %8167, 104
  %8169 = load i64, i64* %PC
  %8170 = add i64 %8169, 4
  store i64 %8170, i64* %PC
  %8171 = inttoptr i64 %8168 to i32*
  %8172 = load i32, i32* %8171
  %8173 = sext i32 %8172 to i64
  store i64 %8173, i64* %RCX, align 8, !tbaa !2428
  %8174 = load i64, i64* %RCX
  %8175 = load i64, i64* %PC
  %8176 = add i64 %8175, 7
  store i64 %8176, i64* %PC
  %8177 = sext i64 %8174 to i128
  %8178 = and i128 %8177, -18446744073709551616
  %8179 = zext i64 %8174 to i128
  %8180 = or i128 %8178, %8179
  %8181 = mul nsw i128 520, %8180
  %8182 = trunc i128 %8181 to i64
  store i64 %8182, i64* %RCX, align 8, !tbaa !2428
  %8183 = sext i64 %8182 to i128
  %8184 = icmp ne i128 %8183, %8181
  %8185 = zext i1 %8184 to i8
  %8186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8185, i8* %8186, align 1, !tbaa !2432
  %8187 = trunc i128 %8181 to i32
  %8188 = and i32 %8187, 255
  %8189 = call i32 @llvm.ctpop.i32(i32 %8188) #16
  %8190 = trunc i32 %8189 to i8
  %8191 = and i8 %8190, 1
  %8192 = xor i8 %8191, 1
  %8193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8192, i8* %8193, align 1, !tbaa !2446
  %8194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8194, align 1, !tbaa !2447
  %8195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8195, align 1, !tbaa !2448
  %8196 = lshr i64 %8182, 63
  %8197 = trunc i64 %8196 to i8
  %8198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8197, i8* %8198, align 1, !tbaa !2449
  %8199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8185, i8* %8199, align 1, !tbaa !2450
  %8200 = load i64, i64* %RAX
  %8201 = load i64, i64* %RCX
  %8202 = load i64, i64* %PC
  %8203 = add i64 %8202, 3
  store i64 %8203, i64* %PC
  %8204 = add i64 %8201, %8200
  store i64 %8204, i64* %RAX, align 8, !tbaa !2428
  %8205 = icmp ult i64 %8204, %8200
  %8206 = icmp ult i64 %8204, %8201
  %8207 = or i1 %8205, %8206
  %8208 = zext i1 %8207 to i8
  %8209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8208, i8* %8209, align 1, !tbaa !2432
  %8210 = trunc i64 %8204 to i32
  %8211 = and i32 %8210, 255
  %8212 = call i32 @llvm.ctpop.i32(i32 %8211) #16
  %8213 = trunc i32 %8212 to i8
  %8214 = and i8 %8213, 1
  %8215 = xor i8 %8214, 1
  %8216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8215, i8* %8216, align 1, !tbaa !2446
  %8217 = xor i64 %8201, %8200
  %8218 = xor i64 %8217, %8204
  %8219 = lshr i64 %8218, 4
  %8220 = trunc i64 %8219 to i8
  %8221 = and i8 %8220, 1
  %8222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8221, i8* %8222, align 1, !tbaa !2447
  %8223 = icmp eq i64 %8204, 0
  %8224 = zext i1 %8223 to i8
  %8225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8224, i8* %8225, align 1, !tbaa !2448
  %8226 = lshr i64 %8204, 63
  %8227 = trunc i64 %8226 to i8
  %8228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8227, i8* %8228, align 1, !tbaa !2449
  %8229 = lshr i64 %8200, 63
  %8230 = lshr i64 %8201, 63
  %8231 = xor i64 %8226, %8229
  %8232 = xor i64 %8226, %8230
  %8233 = add nuw nsw i64 %8231, %8232
  %8234 = icmp eq i64 %8233, 2
  %8235 = zext i1 %8234 to i8
  %8236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8235, i8* %8236, align 1, !tbaa !2450
  %8237 = load i64, i64* %RBP
  %8238 = sub i64 %8237, 108
  %8239 = load i64, i64* %PC
  %8240 = add i64 %8239, 4
  store i64 %8240, i64* %PC
  %8241 = inttoptr i64 %8238 to i32*
  %8242 = load i32, i32* %8241
  %8243 = sext i32 %8242 to i64
  store i64 %8243, i64* %RCX, align 8, !tbaa !2428
  %8244 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8246 = load i64, i64* %RAX
  %8247 = load i64, i64* %RCX
  %8248 = mul i64 %8247, 8
  %8249 = add i64 %8248, %8246
  %8250 = load i64, i64* %PC
  %8251 = add i64 %8250, 5
  store i64 %8251, i64* %PC
  %8252 = bitcast i8* %8245 to double*
  %8253 = load double, double* %8252, align 1
  %8254 = getelementptr inbounds i8, i8* %8245, i64 8
  %8255 = bitcast i8* %8254 to i64*
  %8256 = load i64, i64* %8255, align 1
  %8257 = inttoptr i64 %8249 to double*
  %8258 = load double, double* %8257
  %8259 = fmul double %8253, %8258
  %8260 = bitcast i8* %8244 to double*
  store double %8259, double* %8260, align 1, !tbaa !2452
  %8261 = getelementptr inbounds i8, i8* %8244, i64 8
  %8262 = bitcast i8* %8261 to i64*
  store i64 %8256, i64* %8262, align 1, !tbaa !2452
  %8263 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8264 = load i64, i64* %RBP
  %8265 = sub i64 %8264, 72
  %8266 = load i64, i64* %PC
  %8267 = add i64 %8266, 5
  store i64 %8267, i64* %PC
  %8268 = inttoptr i64 %8265 to double*
  %8269 = load double, double* %8268
  %8270 = bitcast i8* %8263 to double*
  store double %8269, double* %8270, align 1, !tbaa !2452
  %8271 = getelementptr inbounds i8, i8* %8263, i64 8
  %8272 = bitcast i8* %8271 to double*
  store double 0.000000e+00, double* %8272, align 1, !tbaa !2452
  %8273 = load i64, i64* %RBP
  %8274 = add i64 %8273, 96
  %8275 = load i64, i64* %PC
  %8276 = add i64 %8275, 4
  store i64 %8276, i64* %PC
  %8277 = inttoptr i64 %8274 to i64*
  %8278 = load i64, i64* %8277
  store i64 %8278, i64* %RAX, align 8, !tbaa !2428
  %8279 = load i64, i64* %RBP
  %8280 = sub i64 %8279, 104
  %8281 = load i64, i64* %PC
  %8282 = add i64 %8281, 4
  store i64 %8282, i64* %PC
  %8283 = inttoptr i64 %8280 to i32*
  %8284 = load i32, i32* %8283
  %8285 = sext i32 %8284 to i64
  store i64 %8285, i64* %RCX, align 8, !tbaa !2428
  %8286 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8287 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8288 = load i64, i64* %RAX
  %8289 = load i64, i64* %RCX
  %8290 = mul i64 %8289, 8
  %8291 = add i64 %8290, %8288
  %8292 = load i64, i64* %PC
  %8293 = add i64 %8292, 5
  store i64 %8293, i64* %PC
  %8294 = bitcast i8* %8287 to double*
  %8295 = load double, double* %8294, align 1
  %8296 = getelementptr inbounds i8, i8* %8287, i64 8
  %8297 = bitcast i8* %8296 to i64*
  %8298 = load i64, i64* %8297, align 1
  %8299 = inttoptr i64 %8291 to double*
  %8300 = load double, double* %8299
  %8301 = fdiv double %8295, %8300
  %8302 = bitcast i8* %8286 to double*
  store double %8301, double* %8302, align 1, !tbaa !2452
  %8303 = getelementptr inbounds i8, i8* %8286, i64 8
  %8304 = bitcast i8* %8303 to i64*
  store i64 %8298, i64* %8304, align 1, !tbaa !2452
  %8305 = load i64, i64* %RBP
  %8306 = sub i64 %8305, 96
  %8307 = load i64, i64* %PC
  %8308 = add i64 %8307, 4
  store i64 %8308, i64* %PC
  %8309 = inttoptr i64 %8306 to i64*
  %8310 = load i64, i64* %8309
  store i64 %8310, i64* %RAX, align 8, !tbaa !2428
  %8311 = load i64, i64* %RBP
  %8312 = sub i64 %8311, 100
  %8313 = load i64, i64* %PC
  %8314 = add i64 %8313, 4
  store i64 %8314, i64* %PC
  %8315 = inttoptr i64 %8312 to i32*
  %8316 = load i32, i32* %8315
  %8317 = sext i32 %8316 to i64
  store i64 %8317, i64* %RCX, align 8, !tbaa !2428
  %8318 = load i64, i64* %RCX
  %8319 = load i64, i64* %PC
  %8320 = add i64 %8319, 7
  store i64 %8320, i64* %PC
  %8321 = sext i64 %8318 to i128
  %8322 = and i128 %8321, -18446744073709551616
  %8323 = zext i64 %8318 to i128
  %8324 = or i128 %8322, %8323
  %8325 = mul nsw i128 520, %8324
  %8326 = trunc i128 %8325 to i64
  store i64 %8326, i64* %RCX, align 8, !tbaa !2428
  %8327 = sext i64 %8326 to i128
  %8328 = icmp ne i128 %8327, %8325
  %8329 = zext i1 %8328 to i8
  %8330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8329, i8* %8330, align 1, !tbaa !2432
  %8331 = trunc i128 %8325 to i32
  %8332 = and i32 %8331, 255
  %8333 = call i32 @llvm.ctpop.i32(i32 %8332) #16
  %8334 = trunc i32 %8333 to i8
  %8335 = and i8 %8334, 1
  %8336 = xor i8 %8335, 1
  %8337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8336, i8* %8337, align 1, !tbaa !2446
  %8338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8338, align 1, !tbaa !2447
  %8339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8339, align 1, !tbaa !2448
  %8340 = lshr i64 %8326, 63
  %8341 = trunc i64 %8340 to i8
  %8342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8341, i8* %8342, align 1, !tbaa !2449
  %8343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8329, i8* %8343, align 1, !tbaa !2450
  %8344 = load i64, i64* %RAX
  %8345 = load i64, i64* %RCX
  %8346 = load i64, i64* %PC
  %8347 = add i64 %8346, 3
  store i64 %8347, i64* %PC
  %8348 = add i64 %8345, %8344
  store i64 %8348, i64* %RAX, align 8, !tbaa !2428
  %8349 = icmp ult i64 %8348, %8344
  %8350 = icmp ult i64 %8348, %8345
  %8351 = or i1 %8349, %8350
  %8352 = zext i1 %8351 to i8
  %8353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8352, i8* %8353, align 1, !tbaa !2432
  %8354 = trunc i64 %8348 to i32
  %8355 = and i32 %8354, 255
  %8356 = call i32 @llvm.ctpop.i32(i32 %8355) #16
  %8357 = trunc i32 %8356 to i8
  %8358 = and i8 %8357, 1
  %8359 = xor i8 %8358, 1
  %8360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8359, i8* %8360, align 1, !tbaa !2446
  %8361 = xor i64 %8345, %8344
  %8362 = xor i64 %8361, %8348
  %8363 = lshr i64 %8362, 4
  %8364 = trunc i64 %8363 to i8
  %8365 = and i8 %8364, 1
  %8366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8365, i8* %8366, align 1, !tbaa !2447
  %8367 = icmp eq i64 %8348, 0
  %8368 = zext i1 %8367 to i8
  %8369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8368, i8* %8369, align 1, !tbaa !2448
  %8370 = lshr i64 %8348, 63
  %8371 = trunc i64 %8370 to i8
  %8372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8371, i8* %8372, align 1, !tbaa !2449
  %8373 = lshr i64 %8344, 63
  %8374 = lshr i64 %8345, 63
  %8375 = xor i64 %8370, %8373
  %8376 = xor i64 %8370, %8374
  %8377 = add nuw nsw i64 %8375, %8376
  %8378 = icmp eq i64 %8377, 2
  %8379 = zext i1 %8378 to i8
  %8380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8379, i8* %8380, align 1, !tbaa !2450
  %8381 = load i64, i64* %RBP
  %8382 = sub i64 %8381, 104
  %8383 = load i64, i64* %PC
  %8384 = add i64 %8383, 4
  store i64 %8384, i64* %PC
  %8385 = inttoptr i64 %8382 to i32*
  %8386 = load i32, i32* %8385
  %8387 = sext i32 %8386 to i64
  store i64 %8387, i64* %RCX, align 8, !tbaa !2428
  %8388 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8389 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8390 = load i64, i64* %RAX
  %8391 = load i64, i64* %RCX
  %8392 = mul i64 %8391, 8
  %8393 = add i64 %8392, %8390
  %8394 = load i64, i64* %PC
  %8395 = add i64 %8394, 5
  store i64 %8395, i64* %PC
  %8396 = bitcast i8* %8389 to double*
  %8397 = load double, double* %8396, align 1
  %8398 = getelementptr inbounds i8, i8* %8389, i64 8
  %8399 = bitcast i8* %8398 to i64*
  %8400 = load i64, i64* %8399, align 1
  %8401 = inttoptr i64 %8393 to double*
  %8402 = load double, double* %8401
  %8403 = fmul double %8397, %8402
  %8404 = bitcast i8* %8388 to double*
  store double %8403, double* %8404, align 1, !tbaa !2452
  %8405 = getelementptr inbounds i8, i8* %8388, i64 8
  %8406 = bitcast i8* %8405 to i64*
  store i64 %8400, i64* %8406, align 1, !tbaa !2452
  %8407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8408 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8409 = bitcast %union.vec128_t* %XMM1 to i8*
  %8410 = load i64, i64* %PC
  %8411 = add i64 %8410, 4
  store i64 %8411, i64* %PC
  %8412 = bitcast i8* %8408 to double*
  %8413 = load double, double* %8412, align 1
  %8414 = getelementptr inbounds i8, i8* %8408, i64 8
  %8415 = bitcast i8* %8414 to i64*
  %8416 = load i64, i64* %8415, align 1
  %8417 = bitcast i8* %8409 to double*
  %8418 = load double, double* %8417, align 1
  %8419 = fsub double %8413, %8418
  %8420 = bitcast i8* %8407 to double*
  store double %8419, double* %8420, align 1, !tbaa !2452
  %8421 = getelementptr inbounds i8, i8* %8407, i64 8
  %8422 = bitcast i8* %8421 to i64*
  store i64 %8416, i64* %8422, align 1, !tbaa !2452
  %8423 = load i64, i64* %RBP
  %8424 = add i64 %8423, 16
  %8425 = load i64, i64* %PC
  %8426 = add i64 %8425, 4
  store i64 %8426, i64* %PC
  %8427 = inttoptr i64 %8424 to i64*
  %8428 = load i64, i64* %8427
  store i64 %8428, i64* %RAX, align 8, !tbaa !2428
  %8429 = load i64, i64* %RBP
  %8430 = sub i64 %8429, 100
  %8431 = load i64, i64* %PC
  %8432 = add i64 %8431, 4
  store i64 %8432, i64* %PC
  %8433 = inttoptr i64 %8430 to i32*
  %8434 = load i32, i32* %8433
  %8435 = sext i32 %8434 to i64
  store i64 %8435, i64* %RCX, align 8, !tbaa !2428
  %8436 = load i64, i64* %RCX
  %8437 = load i64, i64* %PC
  %8438 = add i64 %8437, 7
  store i64 %8438, i64* %PC
  %8439 = sext i64 %8436 to i128
  %8440 = and i128 %8439, -18446744073709551616
  %8441 = zext i64 %8436 to i128
  %8442 = or i128 %8440, %8441
  %8443 = mul nsw i128 520, %8442
  %8444 = trunc i128 %8443 to i64
  store i64 %8444, i64* %RCX, align 8, !tbaa !2428
  %8445 = sext i64 %8444 to i128
  %8446 = icmp ne i128 %8445, %8443
  %8447 = zext i1 %8446 to i8
  %8448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8447, i8* %8448, align 1, !tbaa !2432
  %8449 = trunc i128 %8443 to i32
  %8450 = and i32 %8449, 255
  %8451 = call i32 @llvm.ctpop.i32(i32 %8450) #16
  %8452 = trunc i32 %8451 to i8
  %8453 = and i8 %8452, 1
  %8454 = xor i8 %8453, 1
  %8455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8454, i8* %8455, align 1, !tbaa !2446
  %8456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8456, align 1, !tbaa !2447
  %8457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8457, align 1, !tbaa !2448
  %8458 = lshr i64 %8444, 63
  %8459 = trunc i64 %8458 to i8
  %8460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8459, i8* %8460, align 1, !tbaa !2449
  %8461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8447, i8* %8461, align 1, !tbaa !2450
  %8462 = load i64, i64* %RAX
  %8463 = load i64, i64* %RCX
  %8464 = load i64, i64* %PC
  %8465 = add i64 %8464, 3
  store i64 %8465, i64* %PC
  %8466 = add i64 %8463, %8462
  store i64 %8466, i64* %RAX, align 8, !tbaa !2428
  %8467 = icmp ult i64 %8466, %8462
  %8468 = icmp ult i64 %8466, %8463
  %8469 = or i1 %8467, %8468
  %8470 = zext i1 %8469 to i8
  %8471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8470, i8* %8471, align 1, !tbaa !2432
  %8472 = trunc i64 %8466 to i32
  %8473 = and i32 %8472, 255
  %8474 = call i32 @llvm.ctpop.i32(i32 %8473) #16
  %8475 = trunc i32 %8474 to i8
  %8476 = and i8 %8475, 1
  %8477 = xor i8 %8476, 1
  %8478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8477, i8* %8478, align 1, !tbaa !2446
  %8479 = xor i64 %8463, %8462
  %8480 = xor i64 %8479, %8466
  %8481 = lshr i64 %8480, 4
  %8482 = trunc i64 %8481 to i8
  %8483 = and i8 %8482, 1
  %8484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8483, i8* %8484, align 1, !tbaa !2447
  %8485 = icmp eq i64 %8466, 0
  %8486 = zext i1 %8485 to i8
  %8487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8486, i8* %8487, align 1, !tbaa !2448
  %8488 = lshr i64 %8466, 63
  %8489 = trunc i64 %8488 to i8
  %8490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8489, i8* %8490, align 1, !tbaa !2449
  %8491 = lshr i64 %8462, 63
  %8492 = lshr i64 %8463, 63
  %8493 = xor i64 %8488, %8491
  %8494 = xor i64 %8488, %8492
  %8495 = add nuw nsw i64 %8493, %8494
  %8496 = icmp eq i64 %8495, 2
  %8497 = zext i1 %8496 to i8
  %8498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8497, i8* %8498, align 1, !tbaa !2450
  %8499 = load i64, i64* %RBP
  %8500 = sub i64 %8499, 104
  %8501 = load i64, i64* %PC
  %8502 = add i64 %8501, 4
  store i64 %8502, i64* %PC
  %8503 = inttoptr i64 %8500 to i32*
  %8504 = load i32, i32* %8503
  %8505 = sext i32 %8504 to i64
  store i64 %8505, i64* %RCX, align 8, !tbaa !2428
  %8506 = load i64, i64* %RAX
  %8507 = load i64, i64* %RCX
  %8508 = mul i64 %8507, 8
  %8509 = add i64 %8508, %8506
  %8510 = bitcast %union.vec128_t* %XMM0 to i8*
  %8511 = load i64, i64* %PC
  %8512 = add i64 %8511, 5
  store i64 %8512, i64* %PC
  %8513 = bitcast i8* %8510 to double*
  %8514 = load double, double* %8513, align 1
  %8515 = inttoptr i64 %8509 to double*
  store double %8514, double* %8515
  %8516 = load i64, i64* %RBP
  %8517 = add i64 %8516, 72
  %8518 = load i64, i64* %PC
  %8519 = add i64 %8518, 4
  store i64 %8519, i64* %PC
  %8520 = inttoptr i64 %8517 to i64*
  %8521 = load i64, i64* %8520
  store i64 %8521, i64* %RAX, align 8, !tbaa !2428
  %8522 = load i64, i64* %RBP
  %8523 = sub i64 %8522, 108
  %8524 = load i64, i64* %PC
  %8525 = add i64 %8524, 4
  store i64 %8525, i64* %PC
  %8526 = inttoptr i64 %8523 to i32*
  %8527 = load i32, i32* %8526
  %8528 = sext i32 %8527 to i64
  store i64 %8528, i64* %RCX, align 8, !tbaa !2428
  %8529 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8530 = load i64, i64* %RAX
  %8531 = load i64, i64* %RCX
  %8532 = mul i64 %8531, 8
  %8533 = add i64 %8532, %8530
  %8534 = load i64, i64* %PC
  %8535 = add i64 %8534, 5
  store i64 %8535, i64* %PC
  %8536 = inttoptr i64 %8533 to double*
  %8537 = load double, double* %8536
  %8538 = bitcast i8* %8529 to double*
  store double %8537, double* %8538, align 1, !tbaa !2452
  %8539 = getelementptr inbounds i8, i8* %8529, i64 8
  %8540 = bitcast i8* %8539 to double*
  store double 0.000000e+00, double* %8540, align 1, !tbaa !2452
  %8541 = load i64, i64* %RBP
  %8542 = add i64 %8541, 80
  %8543 = load i64, i64* %PC
  %8544 = add i64 %8543, 4
  store i64 %8544, i64* %PC
  %8545 = inttoptr i64 %8542 to i64*
  %8546 = load i64, i64* %8545
  store i64 %8546, i64* %RAX, align 8, !tbaa !2428
  %8547 = load i64, i64* %RBP
  %8548 = sub i64 %8547, 108
  %8549 = load i64, i64* %PC
  %8550 = add i64 %8549, 4
  store i64 %8550, i64* %PC
  %8551 = inttoptr i64 %8548 to i32*
  %8552 = load i32, i32* %8551
  %8553 = sext i32 %8552 to i64
  store i64 %8553, i64* %RCX, align 8, !tbaa !2428
  %8554 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8555 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8556 = load i64, i64* %RAX
  %8557 = load i64, i64* %RCX
  %8558 = mul i64 %8557, 8
  %8559 = add i64 %8558, %8556
  %8560 = load i64, i64* %PC
  %8561 = add i64 %8560, 5
  store i64 %8561, i64* %PC
  %8562 = bitcast i8* %8555 to double*
  %8563 = load double, double* %8562, align 1
  %8564 = getelementptr inbounds i8, i8* %8555, i64 8
  %8565 = bitcast i8* %8564 to i64*
  %8566 = load i64, i64* %8565, align 1
  %8567 = inttoptr i64 %8559 to double*
  %8568 = load double, double* %8567
  %8569 = fdiv double %8563, %8568
  %8570 = bitcast i8* %8554 to double*
  store double %8569, double* %8570, align 1, !tbaa !2452
  %8571 = getelementptr inbounds i8, i8* %8554, i64 8
  %8572 = bitcast i8* %8571 to i64*
  store i64 %8566, i64* %8572, align 1, !tbaa !2452
  %8573 = load i64, i64* %RBP
  %8574 = add i64 %8573, 48
  %8575 = load i64, i64* %PC
  %8576 = add i64 %8575, 4
  store i64 %8576, i64* %PC
  %8577 = inttoptr i64 %8574 to i64*
  %8578 = load i64, i64* %8577
  store i64 %8578, i64* %RAX, align 8, !tbaa !2428
  %8579 = load i64, i64* %RBP
  %8580 = sub i64 %8579, 100
  %8581 = load i64, i64* %PC
  %8582 = add i64 %8581, 4
  store i64 %8582, i64* %PC
  %8583 = inttoptr i64 %8580 to i32*
  %8584 = load i32, i32* %8583
  %8585 = sext i32 %8584 to i64
  store i64 %8585, i64* %RCX, align 8, !tbaa !2428
  %8586 = load i64, i64* %RCX
  %8587 = load i64, i64* %PC
  %8588 = add i64 %8587, 7
  store i64 %8588, i64* %PC
  %8589 = sext i64 %8586 to i128
  %8590 = and i128 %8589, -18446744073709551616
  %8591 = zext i64 %8586 to i128
  %8592 = or i128 %8590, %8591
  %8593 = mul nsw i128 33800, %8592
  %8594 = trunc i128 %8593 to i64
  store i64 %8594, i64* %RCX, align 8, !tbaa !2428
  %8595 = sext i64 %8594 to i128
  %8596 = icmp ne i128 %8595, %8593
  %8597 = zext i1 %8596 to i8
  %8598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8597, i8* %8598, align 1, !tbaa !2432
  %8599 = trunc i128 %8593 to i32
  %8600 = and i32 %8599, 255
  %8601 = call i32 @llvm.ctpop.i32(i32 %8600) #16
  %8602 = trunc i32 %8601 to i8
  %8603 = and i8 %8602, 1
  %8604 = xor i8 %8603, 1
  %8605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8604, i8* %8605, align 1, !tbaa !2446
  %8606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8606, align 1, !tbaa !2447
  %8607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8607, align 1, !tbaa !2448
  %8608 = lshr i64 %8594, 63
  %8609 = trunc i64 %8608 to i8
  %8610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8609, i8* %8610, align 1, !tbaa !2449
  %8611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8597, i8* %8611, align 1, !tbaa !2450
  %8612 = load i64, i64* %RAX
  %8613 = load i64, i64* %RCX
  %8614 = load i64, i64* %PC
  %8615 = add i64 %8614, 3
  store i64 %8615, i64* %PC
  %8616 = add i64 %8613, %8612
  store i64 %8616, i64* %RAX, align 8, !tbaa !2428
  %8617 = icmp ult i64 %8616, %8612
  %8618 = icmp ult i64 %8616, %8613
  %8619 = or i1 %8617, %8618
  %8620 = zext i1 %8619 to i8
  %8621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8620, i8* %8621, align 1, !tbaa !2432
  %8622 = trunc i64 %8616 to i32
  %8623 = and i32 %8622, 255
  %8624 = call i32 @llvm.ctpop.i32(i32 %8623) #16
  %8625 = trunc i32 %8624 to i8
  %8626 = and i8 %8625, 1
  %8627 = xor i8 %8626, 1
  %8628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8627, i8* %8628, align 1, !tbaa !2446
  %8629 = xor i64 %8613, %8612
  %8630 = xor i64 %8629, %8616
  %8631 = lshr i64 %8630, 4
  %8632 = trunc i64 %8631 to i8
  %8633 = and i8 %8632, 1
  %8634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8633, i8* %8634, align 1, !tbaa !2447
  %8635 = icmp eq i64 %8616, 0
  %8636 = zext i1 %8635 to i8
  %8637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8636, i8* %8637, align 1, !tbaa !2448
  %8638 = lshr i64 %8616, 63
  %8639 = trunc i64 %8638 to i8
  %8640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8639, i8* %8640, align 1, !tbaa !2449
  %8641 = lshr i64 %8612, 63
  %8642 = lshr i64 %8613, 63
  %8643 = xor i64 %8638, %8641
  %8644 = xor i64 %8638, %8642
  %8645 = add nuw nsw i64 %8643, %8644
  %8646 = icmp eq i64 %8645, 2
  %8647 = zext i1 %8646 to i8
  %8648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8647, i8* %8648, align 1, !tbaa !2450
  %8649 = load i64, i64* %RBP
  %8650 = sub i64 %8649, 104
  %8651 = load i64, i64* %PC
  %8652 = add i64 %8651, 4
  store i64 %8652, i64* %PC
  %8653 = inttoptr i64 %8650 to i32*
  %8654 = load i32, i32* %8653
  %8655 = sext i32 %8654 to i64
  store i64 %8655, i64* %RCX, align 8, !tbaa !2428
  %8656 = load i64, i64* %RCX
  %8657 = load i64, i64* %PC
  %8658 = add i64 %8657, 7
  store i64 %8658, i64* %PC
  %8659 = sext i64 %8656 to i128
  %8660 = and i128 %8659, -18446744073709551616
  %8661 = zext i64 %8656 to i128
  %8662 = or i128 %8660, %8661
  %8663 = mul nsw i128 520, %8662
  %8664 = trunc i128 %8663 to i64
  store i64 %8664, i64* %RCX, align 8, !tbaa !2428
  %8665 = sext i64 %8664 to i128
  %8666 = icmp ne i128 %8665, %8663
  %8667 = zext i1 %8666 to i8
  %8668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8667, i8* %8668, align 1, !tbaa !2432
  %8669 = trunc i128 %8663 to i32
  %8670 = and i32 %8669, 255
  %8671 = call i32 @llvm.ctpop.i32(i32 %8670) #16
  %8672 = trunc i32 %8671 to i8
  %8673 = and i8 %8672, 1
  %8674 = xor i8 %8673, 1
  %8675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8674, i8* %8675, align 1, !tbaa !2446
  %8676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8676, align 1, !tbaa !2447
  %8677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8677, align 1, !tbaa !2448
  %8678 = lshr i64 %8664, 63
  %8679 = trunc i64 %8678 to i8
  %8680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8679, i8* %8680, align 1, !tbaa !2449
  %8681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8667, i8* %8681, align 1, !tbaa !2450
  %8682 = load i64, i64* %RAX
  %8683 = load i64, i64* %RCX
  %8684 = load i64, i64* %PC
  %8685 = add i64 %8684, 3
  store i64 %8685, i64* %PC
  %8686 = add i64 %8683, %8682
  store i64 %8686, i64* %RAX, align 8, !tbaa !2428
  %8687 = icmp ult i64 %8686, %8682
  %8688 = icmp ult i64 %8686, %8683
  %8689 = or i1 %8687, %8688
  %8690 = zext i1 %8689 to i8
  %8691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8690, i8* %8691, align 1, !tbaa !2432
  %8692 = trunc i64 %8686 to i32
  %8693 = and i32 %8692, 255
  %8694 = call i32 @llvm.ctpop.i32(i32 %8693) #16
  %8695 = trunc i32 %8694 to i8
  %8696 = and i8 %8695, 1
  %8697 = xor i8 %8696, 1
  %8698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8697, i8* %8698, align 1, !tbaa !2446
  %8699 = xor i64 %8683, %8682
  %8700 = xor i64 %8699, %8686
  %8701 = lshr i64 %8700, 4
  %8702 = trunc i64 %8701 to i8
  %8703 = and i8 %8702, 1
  %8704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8703, i8* %8704, align 1, !tbaa !2447
  %8705 = icmp eq i64 %8686, 0
  %8706 = zext i1 %8705 to i8
  %8707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8706, i8* %8707, align 1, !tbaa !2448
  %8708 = lshr i64 %8686, 63
  %8709 = trunc i64 %8708 to i8
  %8710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8709, i8* %8710, align 1, !tbaa !2449
  %8711 = lshr i64 %8682, 63
  %8712 = lshr i64 %8683, 63
  %8713 = xor i64 %8708, %8711
  %8714 = xor i64 %8708, %8712
  %8715 = add nuw nsw i64 %8713, %8714
  %8716 = icmp eq i64 %8715, 2
  %8717 = zext i1 %8716 to i8
  %8718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8717, i8* %8718, align 1, !tbaa !2450
  %8719 = load i64, i64* %RBP
  %8720 = sub i64 %8719, 108
  %8721 = load i64, i64* %PC
  %8722 = add i64 %8721, 4
  store i64 %8722, i64* %PC
  %8723 = inttoptr i64 %8720 to i32*
  %8724 = load i32, i32* %8723
  %8725 = sext i32 %8724 to i64
  store i64 %8725, i64* %RCX, align 8, !tbaa !2428
  %8726 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8727 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8728 = load i64, i64* %RAX
  %8729 = load i64, i64* %RCX
  %8730 = mul i64 %8729, 8
  %8731 = add i64 %8730, %8728
  %8732 = load i64, i64* %PC
  %8733 = add i64 %8732, 5
  store i64 %8733, i64* %PC
  %8734 = bitcast i8* %8727 to double*
  %8735 = load double, double* %8734, align 1
  %8736 = getelementptr inbounds i8, i8* %8727, i64 8
  %8737 = bitcast i8* %8736 to i64*
  %8738 = load i64, i64* %8737, align 1
  %8739 = inttoptr i64 %8731 to double*
  %8740 = load double, double* %8739
  %8741 = fmul double %8735, %8740
  %8742 = bitcast i8* %8726 to double*
  store double %8741, double* %8742, align 1, !tbaa !2452
  %8743 = getelementptr inbounds i8, i8* %8726, i64 8
  %8744 = bitcast i8* %8743 to i64*
  store i64 %8738, i64* %8744, align 1, !tbaa !2452
  %8745 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8746 = load i64, i64* %RBP
  %8747 = sub i64 %8746, 64
  %8748 = load i64, i64* %PC
  %8749 = add i64 %8748, 5
  store i64 %8749, i64* %PC
  %8750 = inttoptr i64 %8747 to double*
  %8751 = load double, double* %8750
  %8752 = bitcast i8* %8745 to double*
  store double %8751, double* %8752, align 1, !tbaa !2452
  %8753 = getelementptr inbounds i8, i8* %8745, i64 8
  %8754 = bitcast i8* %8753 to double*
  store double 0.000000e+00, double* %8754, align 1, !tbaa !2452
  %8755 = load i64, i64* %RBP
  %8756 = add i64 %8755, 64
  %8757 = load i64, i64* %PC
  %8758 = add i64 %8757, 4
  store i64 %8758, i64* %PC
  %8759 = inttoptr i64 %8756 to i64*
  %8760 = load i64, i64* %8759
  store i64 %8760, i64* %RAX, align 8, !tbaa !2428
  %8761 = load i64, i64* %RBP
  %8762 = sub i64 %8761, 100
  %8763 = load i64, i64* %PC
  %8764 = add i64 %8763, 4
  store i64 %8764, i64* %PC
  %8765 = inttoptr i64 %8762 to i32*
  %8766 = load i32, i32* %8765
  %8767 = sext i32 %8766 to i64
  store i64 %8767, i64* %RCX, align 8, !tbaa !2428
  %8768 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8769 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8770 = load i64, i64* %RAX
  %8771 = load i64, i64* %RCX
  %8772 = mul i64 %8771, 8
  %8773 = add i64 %8772, %8770
  %8774 = load i64, i64* %PC
  %8775 = add i64 %8774, 5
  store i64 %8775, i64* %PC
  %8776 = bitcast i8* %8769 to double*
  %8777 = load double, double* %8776, align 1
  %8778 = getelementptr inbounds i8, i8* %8769, i64 8
  %8779 = bitcast i8* %8778 to i64*
  %8780 = load i64, i64* %8779, align 1
  %8781 = inttoptr i64 %8773 to double*
  %8782 = load double, double* %8781
  %8783 = fmul double %8777, %8782
  %8784 = bitcast i8* %8768 to double*
  store double %8783, double* %8784, align 1, !tbaa !2452
  %8785 = getelementptr inbounds i8, i8* %8768, i64 8
  %8786 = bitcast i8* %8785 to i64*
  store i64 %8780, i64* %8786, align 1, !tbaa !2452
  %8787 = load i64, i64* %RBP
  %8788 = add i64 %8787, 80
  %8789 = load i64, i64* %PC
  %8790 = add i64 %8789, 4
  store i64 %8790, i64* %PC
  %8791 = inttoptr i64 %8788 to i64*
  %8792 = load i64, i64* %8791
  store i64 %8792, i64* %RAX, align 8, !tbaa !2428
  %8793 = load i64, i64* %RBP
  %8794 = sub i64 %8793, 108
  %8795 = load i64, i64* %PC
  %8796 = add i64 %8795, 4
  store i64 %8796, i64* %PC
  %8797 = inttoptr i64 %8794 to i32*
  %8798 = load i32, i32* %8797
  %8799 = sext i32 %8798 to i64
  store i64 %8799, i64* %RCX, align 8, !tbaa !2428
  %8800 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8801 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8802 = load i64, i64* %RAX
  %8803 = load i64, i64* %RCX
  %8804 = mul i64 %8803, 8
  %8805 = add i64 %8804, %8802
  %8806 = load i64, i64* %PC
  %8807 = add i64 %8806, 5
  store i64 %8807, i64* %PC
  %8808 = bitcast i8* %8801 to double*
  %8809 = load double, double* %8808, align 1
  %8810 = getelementptr inbounds i8, i8* %8801, i64 8
  %8811 = bitcast i8* %8810 to i64*
  %8812 = load i64, i64* %8811, align 1
  %8813 = inttoptr i64 %8805 to double*
  %8814 = load double, double* %8813
  %8815 = fdiv double %8809, %8814
  %8816 = bitcast i8* %8800 to double*
  store double %8815, double* %8816, align 1, !tbaa !2452
  %8817 = getelementptr inbounds i8, i8* %8800, i64 8
  %8818 = bitcast i8* %8817 to i64*
  store i64 %8812, i64* %8818, align 1, !tbaa !2452
  %8819 = load i64, i64* %RBP
  %8820 = add i64 %8819, 16
  %8821 = load i64, i64* %PC
  %8822 = add i64 %8821, 4
  store i64 %8822, i64* %PC
  %8823 = inttoptr i64 %8820 to i64*
  %8824 = load i64, i64* %8823
  store i64 %8824, i64* %RAX, align 8, !tbaa !2428
  %8825 = load i64, i64* %RBP
  %8826 = sub i64 %8825, 100
  %8827 = load i64, i64* %PC
  %8828 = add i64 %8827, 4
  store i64 %8828, i64* %PC
  %8829 = inttoptr i64 %8826 to i32*
  %8830 = load i32, i32* %8829
  %8831 = sext i32 %8830 to i64
  store i64 %8831, i64* %RCX, align 8, !tbaa !2428
  %8832 = load i64, i64* %RCX
  %8833 = load i64, i64* %PC
  %8834 = add i64 %8833, 7
  store i64 %8834, i64* %PC
  %8835 = sext i64 %8832 to i128
  %8836 = and i128 %8835, -18446744073709551616
  %8837 = zext i64 %8832 to i128
  %8838 = or i128 %8836, %8837
  %8839 = mul nsw i128 520, %8838
  %8840 = trunc i128 %8839 to i64
  store i64 %8840, i64* %RCX, align 8, !tbaa !2428
  %8841 = sext i64 %8840 to i128
  %8842 = icmp ne i128 %8841, %8839
  %8843 = zext i1 %8842 to i8
  %8844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8843, i8* %8844, align 1, !tbaa !2432
  %8845 = trunc i128 %8839 to i32
  %8846 = and i32 %8845, 255
  %8847 = call i32 @llvm.ctpop.i32(i32 %8846) #16
  %8848 = trunc i32 %8847 to i8
  %8849 = and i8 %8848, 1
  %8850 = xor i8 %8849, 1
  %8851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8850, i8* %8851, align 1, !tbaa !2446
  %8852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8852, align 1, !tbaa !2447
  %8853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8853, align 1, !tbaa !2448
  %8854 = lshr i64 %8840, 63
  %8855 = trunc i64 %8854 to i8
  %8856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8855, i8* %8856, align 1, !tbaa !2449
  %8857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8843, i8* %8857, align 1, !tbaa !2450
  %8858 = load i64, i64* %RAX
  %8859 = load i64, i64* %RCX
  %8860 = load i64, i64* %PC
  %8861 = add i64 %8860, 3
  store i64 %8861, i64* %PC
  %8862 = add i64 %8859, %8858
  store i64 %8862, i64* %RAX, align 8, !tbaa !2428
  %8863 = icmp ult i64 %8862, %8858
  %8864 = icmp ult i64 %8862, %8859
  %8865 = or i1 %8863, %8864
  %8866 = zext i1 %8865 to i8
  %8867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8866, i8* %8867, align 1, !tbaa !2432
  %8868 = trunc i64 %8862 to i32
  %8869 = and i32 %8868, 255
  %8870 = call i32 @llvm.ctpop.i32(i32 %8869) #16
  %8871 = trunc i32 %8870 to i8
  %8872 = and i8 %8871, 1
  %8873 = xor i8 %8872, 1
  %8874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8873, i8* %8874, align 1, !tbaa !2446
  %8875 = xor i64 %8859, %8858
  %8876 = xor i64 %8875, %8862
  %8877 = lshr i64 %8876, 4
  %8878 = trunc i64 %8877 to i8
  %8879 = and i8 %8878, 1
  %8880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8879, i8* %8880, align 1, !tbaa !2447
  %8881 = icmp eq i64 %8862, 0
  %8882 = zext i1 %8881 to i8
  %8883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8882, i8* %8883, align 1, !tbaa !2448
  %8884 = lshr i64 %8862, 63
  %8885 = trunc i64 %8884 to i8
  %8886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8885, i8* %8886, align 1, !tbaa !2449
  %8887 = lshr i64 %8858, 63
  %8888 = lshr i64 %8859, 63
  %8889 = xor i64 %8884, %8887
  %8890 = xor i64 %8884, %8888
  %8891 = add nuw nsw i64 %8889, %8890
  %8892 = icmp eq i64 %8891, 2
  %8893 = zext i1 %8892 to i8
  %8894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8893, i8* %8894, align 1, !tbaa !2450
  %8895 = load i64, i64* %RBP
  %8896 = sub i64 %8895, 104
  %8897 = load i64, i64* %PC
  %8898 = add i64 %8897, 4
  store i64 %8898, i64* %PC
  %8899 = inttoptr i64 %8896 to i32*
  %8900 = load i32, i32* %8899
  %8901 = sext i32 %8900 to i64
  store i64 %8901, i64* %RCX, align 8, !tbaa !2428
  %8902 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8904 = load i64, i64* %RAX
  %8905 = load i64, i64* %RCX
  %8906 = mul i64 %8905, 8
  %8907 = add i64 %8906, %8904
  %8908 = load i64, i64* %PC
  %8909 = add i64 %8908, 5
  store i64 %8909, i64* %PC
  %8910 = bitcast i8* %8903 to double*
  %8911 = load double, double* %8910, align 1
  %8912 = getelementptr inbounds i8, i8* %8903, i64 8
  %8913 = bitcast i8* %8912 to i64*
  %8914 = load i64, i64* %8913, align 1
  %8915 = inttoptr i64 %8907 to double*
  %8916 = load double, double* %8915
  %8917 = fmul double %8911, %8916
  %8918 = bitcast i8* %8902 to double*
  store double %8917, double* %8918, align 1, !tbaa !2452
  %8919 = getelementptr inbounds i8, i8* %8902, i64 8
  %8920 = bitcast i8* %8919 to i64*
  store i64 %8914, i64* %8920, align 1, !tbaa !2452
  %8921 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8922 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8923 = bitcast %union.vec128_t* %XMM1 to i8*
  %8924 = load i64, i64* %PC
  %8925 = add i64 %8924, 4
  store i64 %8925, i64* %PC
  %8926 = bitcast i8* %8922 to double*
  %8927 = load double, double* %8926, align 1
  %8928 = getelementptr inbounds i8, i8* %8922, i64 8
  %8929 = bitcast i8* %8928 to i64*
  %8930 = load i64, i64* %8929, align 1
  %8931 = bitcast i8* %8923 to double*
  %8932 = load double, double* %8931, align 1
  %8933 = fadd double %8927, %8932
  %8934 = bitcast i8* %8921 to double*
  store double %8933, double* %8934, align 1, !tbaa !2452
  %8935 = getelementptr inbounds i8, i8* %8921, i64 8
  %8936 = bitcast i8* %8935 to i64*
  store i64 %8930, i64* %8936, align 1, !tbaa !2452
  %8937 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8938 = load i64, i64* %RBP
  %8939 = sub i64 %8938, 64
  %8940 = load i64, i64* %PC
  %8941 = add i64 %8940, 5
  store i64 %8941, i64* %PC
  %8942 = inttoptr i64 %8939 to double*
  %8943 = load double, double* %8942
  %8944 = bitcast i8* %8937 to double*
  store double %8943, double* %8944, align 1, !tbaa !2452
  %8945 = getelementptr inbounds i8, i8* %8937, i64 8
  %8946 = bitcast i8* %8945 to double*
  store double 0.000000e+00, double* %8946, align 1, !tbaa !2452
  %8947 = load i64, i64* %RBP
  %8948 = add i64 %8947, 56
  %8949 = load i64, i64* %PC
  %8950 = add i64 %8949, 4
  store i64 %8950, i64* %PC
  %8951 = inttoptr i64 %8948 to i64*
  %8952 = load i64, i64* %8951
  store i64 %8952, i64* %RAX, align 8, !tbaa !2428
  %8953 = load i64, i64* %RBP
  %8954 = sub i64 %8953, 100
  %8955 = load i64, i64* %PC
  %8956 = add i64 %8955, 4
  store i64 %8956, i64* %PC
  %8957 = inttoptr i64 %8954 to i32*
  %8958 = load i32, i32* %8957
  %8959 = sext i32 %8958 to i64
  store i64 %8959, i64* %RCX, align 8, !tbaa !2428
  %8960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8961 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8962 = load i64, i64* %RAX
  %8963 = load i64, i64* %RCX
  %8964 = mul i64 %8963, 8
  %8965 = add i64 %8964, %8962
  %8966 = load i64, i64* %PC
  %8967 = add i64 %8966, 5
  store i64 %8967, i64* %PC
  %8968 = bitcast i8* %8961 to double*
  %8969 = load double, double* %8968, align 1
  %8970 = getelementptr inbounds i8, i8* %8961, i64 8
  %8971 = bitcast i8* %8970 to i64*
  %8972 = load i64, i64* %8971, align 1
  %8973 = inttoptr i64 %8965 to double*
  %8974 = load double, double* %8973
  %8975 = fmul double %8969, %8974
  %8976 = bitcast i8* %8960 to double*
  store double %8975, double* %8976, align 1, !tbaa !2452
  %8977 = getelementptr inbounds i8, i8* %8960, i64 8
  %8978 = bitcast i8* %8977 to i64*
  store i64 %8972, i64* %8978, align 1, !tbaa !2452
  %8979 = load i64, i64* %RBP
  %8980 = add i64 %8979, 80
  %8981 = load i64, i64* %PC
  %8982 = add i64 %8981, 4
  store i64 %8982, i64* %PC
  %8983 = inttoptr i64 %8980 to i64*
  %8984 = load i64, i64* %8983
  store i64 %8984, i64* %RAX, align 8, !tbaa !2428
  %8985 = load i64, i64* %RBP
  %8986 = sub i64 %8985, 108
  %8987 = load i64, i64* %PC
  %8988 = add i64 %8987, 4
  store i64 %8988, i64* %PC
  %8989 = inttoptr i64 %8986 to i32*
  %8990 = load i32, i32* %8989
  %8991 = sext i32 %8990 to i64
  store i64 %8991, i64* %RCX, align 8, !tbaa !2428
  %8992 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8993 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8994 = load i64, i64* %RAX
  %8995 = load i64, i64* %RCX
  %8996 = mul i64 %8995, 8
  %8997 = add i64 %8996, %8994
  %8998 = load i64, i64* %PC
  %8999 = add i64 %8998, 5
  store i64 %8999, i64* %PC
  %9000 = bitcast i8* %8993 to double*
  %9001 = load double, double* %9000, align 1
  %9002 = getelementptr inbounds i8, i8* %8993, i64 8
  %9003 = bitcast i8* %9002 to i64*
  %9004 = load i64, i64* %9003, align 1
  %9005 = inttoptr i64 %8997 to double*
  %9006 = load double, double* %9005
  %9007 = fdiv double %9001, %9006
  %9008 = bitcast i8* %8992 to double*
  store double %9007, double* %9008, align 1, !tbaa !2452
  %9009 = getelementptr inbounds i8, i8* %8992, i64 8
  %9010 = bitcast i8* %9009 to i64*
  store i64 %9004, i64* %9010, align 1, !tbaa !2452
  %9011 = load i64, i64* %RBP
  %9012 = add i64 %9011, 24
  %9013 = load i64, i64* %PC
  %9014 = add i64 %9013, 4
  store i64 %9014, i64* %PC
  %9015 = inttoptr i64 %9012 to i64*
  %9016 = load i64, i64* %9015
  store i64 %9016, i64* %RAX, align 8, !tbaa !2428
  %9017 = load i64, i64* %RBP
  %9018 = sub i64 %9017, 100
  %9019 = load i64, i64* %PC
  %9020 = add i64 %9019, 4
  store i64 %9020, i64* %PC
  %9021 = inttoptr i64 %9018 to i32*
  %9022 = load i32, i32* %9021
  %9023 = sext i32 %9022 to i64
  store i64 %9023, i64* %RCX, align 8, !tbaa !2428
  %9024 = load i64, i64* %RCX
  %9025 = load i64, i64* %PC
  %9026 = add i64 %9025, 7
  store i64 %9026, i64* %PC
  %9027 = sext i64 %9024 to i128
  %9028 = and i128 %9027, -18446744073709551616
  %9029 = zext i64 %9024 to i128
  %9030 = or i128 %9028, %9029
  %9031 = mul nsw i128 33800, %9030
  %9032 = trunc i128 %9031 to i64
  store i64 %9032, i64* %RCX, align 8, !tbaa !2428
  %9033 = sext i64 %9032 to i128
  %9034 = icmp ne i128 %9033, %9031
  %9035 = zext i1 %9034 to i8
  %9036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9035, i8* %9036, align 1, !tbaa !2432
  %9037 = trunc i128 %9031 to i32
  %9038 = and i32 %9037, 255
  %9039 = call i32 @llvm.ctpop.i32(i32 %9038) #16
  %9040 = trunc i32 %9039 to i8
  %9041 = and i8 %9040, 1
  %9042 = xor i8 %9041, 1
  %9043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9042, i8* %9043, align 1, !tbaa !2446
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9044, align 1, !tbaa !2447
  %9045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9045, align 1, !tbaa !2448
  %9046 = lshr i64 %9032, 63
  %9047 = trunc i64 %9046 to i8
  %9048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9047, i8* %9048, align 1, !tbaa !2449
  %9049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9035, i8* %9049, align 1, !tbaa !2450
  %9050 = load i64, i64* %RAX
  %9051 = load i64, i64* %RCX
  %9052 = load i64, i64* %PC
  %9053 = add i64 %9052, 3
  store i64 %9053, i64* %PC
  %9054 = add i64 %9051, %9050
  store i64 %9054, i64* %RAX, align 8, !tbaa !2428
  %9055 = icmp ult i64 %9054, %9050
  %9056 = icmp ult i64 %9054, %9051
  %9057 = or i1 %9055, %9056
  %9058 = zext i1 %9057 to i8
  %9059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9058, i8* %9059, align 1, !tbaa !2432
  %9060 = trunc i64 %9054 to i32
  %9061 = and i32 %9060, 255
  %9062 = call i32 @llvm.ctpop.i32(i32 %9061) #16
  %9063 = trunc i32 %9062 to i8
  %9064 = and i8 %9063, 1
  %9065 = xor i8 %9064, 1
  %9066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9065, i8* %9066, align 1, !tbaa !2446
  %9067 = xor i64 %9051, %9050
  %9068 = xor i64 %9067, %9054
  %9069 = lshr i64 %9068, 4
  %9070 = trunc i64 %9069 to i8
  %9071 = and i8 %9070, 1
  %9072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9071, i8* %9072, align 1, !tbaa !2447
  %9073 = icmp eq i64 %9054, 0
  %9074 = zext i1 %9073 to i8
  %9075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9074, i8* %9075, align 1, !tbaa !2448
  %9076 = lshr i64 %9054, 63
  %9077 = trunc i64 %9076 to i8
  %9078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9077, i8* %9078, align 1, !tbaa !2449
  %9079 = lshr i64 %9050, 63
  %9080 = lshr i64 %9051, 63
  %9081 = xor i64 %9076, %9079
  %9082 = xor i64 %9076, %9080
  %9083 = add nuw nsw i64 %9081, %9082
  %9084 = icmp eq i64 %9083, 2
  %9085 = zext i1 %9084 to i8
  %9086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9085, i8* %9086, align 1, !tbaa !2450
  %9087 = load i64, i64* %RBP
  %9088 = sub i64 %9087, 104
  %9089 = load i64, i64* %PC
  %9090 = add i64 %9089, 4
  store i64 %9090, i64* %PC
  %9091 = inttoptr i64 %9088 to i32*
  %9092 = load i32, i32* %9091
  %9093 = sext i32 %9092 to i64
  store i64 %9093, i64* %RCX, align 8, !tbaa !2428
  %9094 = load i64, i64* %RCX
  %9095 = load i64, i64* %PC
  %9096 = add i64 %9095, 7
  store i64 %9096, i64* %PC
  %9097 = sext i64 %9094 to i128
  %9098 = and i128 %9097, -18446744073709551616
  %9099 = zext i64 %9094 to i128
  %9100 = or i128 %9098, %9099
  %9101 = mul nsw i128 520, %9100
  %9102 = trunc i128 %9101 to i64
  store i64 %9102, i64* %RCX, align 8, !tbaa !2428
  %9103 = sext i64 %9102 to i128
  %9104 = icmp ne i128 %9103, %9101
  %9105 = zext i1 %9104 to i8
  %9106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9105, i8* %9106, align 1, !tbaa !2432
  %9107 = trunc i128 %9101 to i32
  %9108 = and i32 %9107, 255
  %9109 = call i32 @llvm.ctpop.i32(i32 %9108) #16
  %9110 = trunc i32 %9109 to i8
  %9111 = and i8 %9110, 1
  %9112 = xor i8 %9111, 1
  %9113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9112, i8* %9113, align 1, !tbaa !2446
  %9114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9114, align 1, !tbaa !2447
  %9115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9115, align 1, !tbaa !2448
  %9116 = lshr i64 %9102, 63
  %9117 = trunc i64 %9116 to i8
  %9118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9117, i8* %9118, align 1, !tbaa !2449
  %9119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9105, i8* %9119, align 1, !tbaa !2450
  %9120 = load i64, i64* %RAX
  %9121 = load i64, i64* %RCX
  %9122 = load i64, i64* %PC
  %9123 = add i64 %9122, 3
  store i64 %9123, i64* %PC
  %9124 = add i64 %9121, %9120
  store i64 %9124, i64* %RAX, align 8, !tbaa !2428
  %9125 = icmp ult i64 %9124, %9120
  %9126 = icmp ult i64 %9124, %9121
  %9127 = or i1 %9125, %9126
  %9128 = zext i1 %9127 to i8
  %9129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9128, i8* %9129, align 1, !tbaa !2432
  %9130 = trunc i64 %9124 to i32
  %9131 = and i32 %9130, 255
  %9132 = call i32 @llvm.ctpop.i32(i32 %9131) #16
  %9133 = trunc i32 %9132 to i8
  %9134 = and i8 %9133, 1
  %9135 = xor i8 %9134, 1
  %9136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9135, i8* %9136, align 1, !tbaa !2446
  %9137 = xor i64 %9121, %9120
  %9138 = xor i64 %9137, %9124
  %9139 = lshr i64 %9138, 4
  %9140 = trunc i64 %9139 to i8
  %9141 = and i8 %9140, 1
  %9142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9141, i8* %9142, align 1, !tbaa !2447
  %9143 = icmp eq i64 %9124, 0
  %9144 = zext i1 %9143 to i8
  %9145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9144, i8* %9145, align 1, !tbaa !2448
  %9146 = lshr i64 %9124, 63
  %9147 = trunc i64 %9146 to i8
  %9148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9147, i8* %9148, align 1, !tbaa !2449
  %9149 = lshr i64 %9120, 63
  %9150 = lshr i64 %9121, 63
  %9151 = xor i64 %9146, %9149
  %9152 = xor i64 %9146, %9150
  %9153 = add nuw nsw i64 %9151, %9152
  %9154 = icmp eq i64 %9153, 2
  %9155 = zext i1 %9154 to i8
  %9156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9155, i8* %9156, align 1, !tbaa !2450
  %9157 = load i64, i64* %RBP
  %9158 = sub i64 %9157, 108
  %9159 = load i64, i64* %PC
  %9160 = add i64 %9159, 4
  store i64 %9160, i64* %PC
  %9161 = inttoptr i64 %9158 to i32*
  %9162 = load i32, i32* %9161
  %9163 = sext i32 %9162 to i64
  store i64 %9163, i64* %RCX, align 8, !tbaa !2428
  %9164 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9165 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9166 = load i64, i64* %RAX
  %9167 = load i64, i64* %RCX
  %9168 = mul i64 %9167, 8
  %9169 = add i64 %9168, %9166
  %9170 = load i64, i64* %PC
  %9171 = add i64 %9170, 5
  store i64 %9171, i64* %PC
  %9172 = bitcast i8* %9165 to double*
  %9173 = load double, double* %9172, align 1
  %9174 = getelementptr inbounds i8, i8* %9165, i64 8
  %9175 = bitcast i8* %9174 to i64*
  %9176 = load i64, i64* %9175, align 1
  %9177 = inttoptr i64 %9169 to double*
  %9178 = load double, double* %9177
  %9179 = fmul double %9173, %9178
  %9180 = bitcast i8* %9164 to double*
  store double %9179, double* %9180, align 1, !tbaa !2452
  %9181 = getelementptr inbounds i8, i8* %9164, i64 8
  %9182 = bitcast i8* %9181 to i64*
  store i64 %9176, i64* %9182, align 1, !tbaa !2452
  %9183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9185 = bitcast %union.vec128_t* %XMM1 to i8*
  %9186 = load i64, i64* %PC
  %9187 = add i64 %9186, 4
  store i64 %9187, i64* %PC
  %9188 = bitcast i8* %9184 to double*
  %9189 = load double, double* %9188, align 1
  %9190 = getelementptr inbounds i8, i8* %9184, i64 8
  %9191 = bitcast i8* %9190 to i64*
  %9192 = load i64, i64* %9191, align 1
  %9193 = bitcast i8* %9185 to double*
  %9194 = load double, double* %9193, align 1
  %9195 = fsub double %9189, %9194
  %9196 = bitcast i8* %9183 to double*
  store double %9195, double* %9196, align 1, !tbaa !2452
  %9197 = getelementptr inbounds i8, i8* %9183, i64 8
  %9198 = bitcast i8* %9197 to i64*
  store i64 %9192, i64* %9198, align 1, !tbaa !2452
  %9199 = load i64, i64* %RBP
  %9200 = add i64 %9199, 48
  %9201 = load i64, i64* %PC
  %9202 = add i64 %9201, 4
  store i64 %9202, i64* %PC
  %9203 = inttoptr i64 %9200 to i64*
  %9204 = load i64, i64* %9203
  store i64 %9204, i64* %RAX, align 8, !tbaa !2428
  %9205 = load i64, i64* %RBP
  %9206 = sub i64 %9205, 100
  %9207 = load i64, i64* %PC
  %9208 = add i64 %9207, 4
  store i64 %9208, i64* %PC
  %9209 = inttoptr i64 %9206 to i32*
  %9210 = load i32, i32* %9209
  %9211 = sext i32 %9210 to i64
  store i64 %9211, i64* %RCX, align 8, !tbaa !2428
  %9212 = load i64, i64* %RCX
  %9213 = load i64, i64* %PC
  %9214 = add i64 %9213, 7
  store i64 %9214, i64* %PC
  %9215 = sext i64 %9212 to i128
  %9216 = and i128 %9215, -18446744073709551616
  %9217 = zext i64 %9212 to i128
  %9218 = or i128 %9216, %9217
  %9219 = mul nsw i128 33800, %9218
  %9220 = trunc i128 %9219 to i64
  store i64 %9220, i64* %RCX, align 8, !tbaa !2428
  %9221 = sext i64 %9220 to i128
  %9222 = icmp ne i128 %9221, %9219
  %9223 = zext i1 %9222 to i8
  %9224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9223, i8* %9224, align 1, !tbaa !2432
  %9225 = trunc i128 %9219 to i32
  %9226 = and i32 %9225, 255
  %9227 = call i32 @llvm.ctpop.i32(i32 %9226) #16
  %9228 = trunc i32 %9227 to i8
  %9229 = and i8 %9228, 1
  %9230 = xor i8 %9229, 1
  %9231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9230, i8* %9231, align 1, !tbaa !2446
  %9232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9232, align 1, !tbaa !2447
  %9233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9233, align 1, !tbaa !2448
  %9234 = lshr i64 %9220, 63
  %9235 = trunc i64 %9234 to i8
  %9236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9235, i8* %9236, align 1, !tbaa !2449
  %9237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9223, i8* %9237, align 1, !tbaa !2450
  %9238 = load i64, i64* %RAX
  %9239 = load i64, i64* %RCX
  %9240 = load i64, i64* %PC
  %9241 = add i64 %9240, 3
  store i64 %9241, i64* %PC
  %9242 = add i64 %9239, %9238
  store i64 %9242, i64* %RAX, align 8, !tbaa !2428
  %9243 = icmp ult i64 %9242, %9238
  %9244 = icmp ult i64 %9242, %9239
  %9245 = or i1 %9243, %9244
  %9246 = zext i1 %9245 to i8
  %9247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9246, i8* %9247, align 1, !tbaa !2432
  %9248 = trunc i64 %9242 to i32
  %9249 = and i32 %9248, 255
  %9250 = call i32 @llvm.ctpop.i32(i32 %9249) #16
  %9251 = trunc i32 %9250 to i8
  %9252 = and i8 %9251, 1
  %9253 = xor i8 %9252, 1
  %9254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9253, i8* %9254, align 1, !tbaa !2446
  %9255 = xor i64 %9239, %9238
  %9256 = xor i64 %9255, %9242
  %9257 = lshr i64 %9256, 4
  %9258 = trunc i64 %9257 to i8
  %9259 = and i8 %9258, 1
  %9260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9259, i8* %9260, align 1, !tbaa !2447
  %9261 = icmp eq i64 %9242, 0
  %9262 = zext i1 %9261 to i8
  %9263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9262, i8* %9263, align 1, !tbaa !2448
  %9264 = lshr i64 %9242, 63
  %9265 = trunc i64 %9264 to i8
  %9266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9265, i8* %9266, align 1, !tbaa !2449
  %9267 = lshr i64 %9238, 63
  %9268 = lshr i64 %9239, 63
  %9269 = xor i64 %9264, %9267
  %9270 = xor i64 %9264, %9268
  %9271 = add nuw nsw i64 %9269, %9270
  %9272 = icmp eq i64 %9271, 2
  %9273 = zext i1 %9272 to i8
  %9274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9273, i8* %9274, align 1, !tbaa !2450
  %9275 = load i64, i64* %RBP
  %9276 = sub i64 %9275, 104
  %9277 = load i64, i64* %PC
  %9278 = add i64 %9277, 4
  store i64 %9278, i64* %PC
  %9279 = inttoptr i64 %9276 to i32*
  %9280 = load i32, i32* %9279
  %9281 = sext i32 %9280 to i64
  store i64 %9281, i64* %RCX, align 8, !tbaa !2428
  %9282 = load i64, i64* %RCX
  %9283 = load i64, i64* %PC
  %9284 = add i64 %9283, 7
  store i64 %9284, i64* %PC
  %9285 = sext i64 %9282 to i128
  %9286 = and i128 %9285, -18446744073709551616
  %9287 = zext i64 %9282 to i128
  %9288 = or i128 %9286, %9287
  %9289 = mul nsw i128 520, %9288
  %9290 = trunc i128 %9289 to i64
  store i64 %9290, i64* %RCX, align 8, !tbaa !2428
  %9291 = sext i64 %9290 to i128
  %9292 = icmp ne i128 %9291, %9289
  %9293 = zext i1 %9292 to i8
  %9294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9293, i8* %9294, align 1, !tbaa !2432
  %9295 = trunc i128 %9289 to i32
  %9296 = and i32 %9295, 255
  %9297 = call i32 @llvm.ctpop.i32(i32 %9296) #16
  %9298 = trunc i32 %9297 to i8
  %9299 = and i8 %9298, 1
  %9300 = xor i8 %9299, 1
  %9301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9300, i8* %9301, align 1, !tbaa !2446
  %9302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9302, align 1, !tbaa !2447
  %9303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9303, align 1, !tbaa !2448
  %9304 = lshr i64 %9290, 63
  %9305 = trunc i64 %9304 to i8
  %9306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9305, i8* %9306, align 1, !tbaa !2449
  %9307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9293, i8* %9307, align 1, !tbaa !2450
  %9308 = load i64, i64* %RAX
  %9309 = load i64, i64* %RCX
  %9310 = load i64, i64* %PC
  %9311 = add i64 %9310, 3
  store i64 %9311, i64* %PC
  %9312 = add i64 %9309, %9308
  store i64 %9312, i64* %RAX, align 8, !tbaa !2428
  %9313 = icmp ult i64 %9312, %9308
  %9314 = icmp ult i64 %9312, %9309
  %9315 = or i1 %9313, %9314
  %9316 = zext i1 %9315 to i8
  %9317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9316, i8* %9317, align 1, !tbaa !2432
  %9318 = trunc i64 %9312 to i32
  %9319 = and i32 %9318, 255
  %9320 = call i32 @llvm.ctpop.i32(i32 %9319) #16
  %9321 = trunc i32 %9320 to i8
  %9322 = and i8 %9321, 1
  %9323 = xor i8 %9322, 1
  %9324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9323, i8* %9324, align 1, !tbaa !2446
  %9325 = xor i64 %9309, %9308
  %9326 = xor i64 %9325, %9312
  %9327 = lshr i64 %9326, 4
  %9328 = trunc i64 %9327 to i8
  %9329 = and i8 %9328, 1
  %9330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9329, i8* %9330, align 1, !tbaa !2447
  %9331 = icmp eq i64 %9312, 0
  %9332 = zext i1 %9331 to i8
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9332, i8* %9333, align 1, !tbaa !2448
  %9334 = lshr i64 %9312, 63
  %9335 = trunc i64 %9334 to i8
  %9336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9335, i8* %9336, align 1, !tbaa !2449
  %9337 = lshr i64 %9308, 63
  %9338 = lshr i64 %9309, 63
  %9339 = xor i64 %9334, %9337
  %9340 = xor i64 %9334, %9338
  %9341 = add nuw nsw i64 %9339, %9340
  %9342 = icmp eq i64 %9341, 2
  %9343 = zext i1 %9342 to i8
  %9344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9343, i8* %9344, align 1, !tbaa !2450
  %9345 = load i64, i64* %RBP
  %9346 = sub i64 %9345, 108
  %9347 = load i64, i64* %PC
  %9348 = add i64 %9347, 4
  store i64 %9348, i64* %PC
  %9349 = inttoptr i64 %9346 to i32*
  %9350 = load i32, i32* %9349
  %9351 = sext i32 %9350 to i64
  store i64 %9351, i64* %RCX, align 8, !tbaa !2428
  %9352 = load i64, i64* %RAX
  %9353 = load i64, i64* %RCX
  %9354 = mul i64 %9353, 8
  %9355 = add i64 %9354, %9352
  %9356 = bitcast %union.vec128_t* %XMM0 to i8*
  %9357 = load i64, i64* %PC
  %9358 = add i64 %9357, 5
  store i64 %9358, i64* %PC
  %9359 = bitcast i8* %9356 to double*
  %9360 = load double, double* %9359, align 1
  %9361 = inttoptr i64 %9355 to double*
  store double %9360, double* %9361
  %9362 = load i64, i64* %RBP
  %9363 = add i64 %9362, 16
  %9364 = load i64, i64* %PC
  %9365 = add i64 %9364, 4
  store i64 %9365, i64* %PC
  %9366 = inttoptr i64 %9363 to i64*
  %9367 = load i64, i64* %9366
  store i64 %9367, i64* %RAX, align 8, !tbaa !2428
  %9368 = load i64, i64* %RBP
  %9369 = sub i64 %9368, 100
  %9370 = load i64, i64* %PC
  %9371 = add i64 %9370, 4
  store i64 %9371, i64* %PC
  %9372 = inttoptr i64 %9369 to i32*
  %9373 = load i32, i32* %9372
  %9374 = sext i32 %9373 to i64
  store i64 %9374, i64* %RCX, align 8, !tbaa !2428
  %9375 = load i64, i64* %RCX
  %9376 = load i64, i64* %PC
  %9377 = add i64 %9376, 7
  store i64 %9377, i64* %PC
  %9378 = sext i64 %9375 to i128
  %9379 = and i128 %9378, -18446744073709551616
  %9380 = zext i64 %9375 to i128
  %9381 = or i128 %9379, %9380
  %9382 = mul nsw i128 520, %9381
  %9383 = trunc i128 %9382 to i64
  store i64 %9383, i64* %RCX, align 8, !tbaa !2428
  %9384 = sext i64 %9383 to i128
  %9385 = icmp ne i128 %9384, %9382
  %9386 = zext i1 %9385 to i8
  %9387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9386, i8* %9387, align 1, !tbaa !2432
  %9388 = trunc i128 %9382 to i32
  %9389 = and i32 %9388, 255
  %9390 = call i32 @llvm.ctpop.i32(i32 %9389) #16
  %9391 = trunc i32 %9390 to i8
  %9392 = and i8 %9391, 1
  %9393 = xor i8 %9392, 1
  %9394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9393, i8* %9394, align 1, !tbaa !2446
  %9395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9395, align 1, !tbaa !2447
  %9396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9396, align 1, !tbaa !2448
  %9397 = lshr i64 %9383, 63
  %9398 = trunc i64 %9397 to i8
  %9399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9398, i8* %9399, align 1, !tbaa !2449
  %9400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9386, i8* %9400, align 1, !tbaa !2450
  %9401 = load i64, i64* %RAX
  %9402 = load i64, i64* %RCX
  %9403 = load i64, i64* %PC
  %9404 = add i64 %9403, 3
  store i64 %9404, i64* %PC
  %9405 = add i64 %9402, %9401
  store i64 %9405, i64* %RAX, align 8, !tbaa !2428
  %9406 = icmp ult i64 %9405, %9401
  %9407 = icmp ult i64 %9405, %9402
  %9408 = or i1 %9406, %9407
  %9409 = zext i1 %9408 to i8
  %9410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9409, i8* %9410, align 1, !tbaa !2432
  %9411 = trunc i64 %9405 to i32
  %9412 = and i32 %9411, 255
  %9413 = call i32 @llvm.ctpop.i32(i32 %9412) #16
  %9414 = trunc i32 %9413 to i8
  %9415 = and i8 %9414, 1
  %9416 = xor i8 %9415, 1
  %9417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9416, i8* %9417, align 1, !tbaa !2446
  %9418 = xor i64 %9402, %9401
  %9419 = xor i64 %9418, %9405
  %9420 = lshr i64 %9419, 4
  %9421 = trunc i64 %9420 to i8
  %9422 = and i8 %9421, 1
  %9423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9422, i8* %9423, align 1, !tbaa !2447
  %9424 = icmp eq i64 %9405, 0
  %9425 = zext i1 %9424 to i8
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9425, i8* %9426, align 1, !tbaa !2448
  %9427 = lshr i64 %9405, 63
  %9428 = trunc i64 %9427 to i8
  %9429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9428, i8* %9429, align 1, !tbaa !2449
  %9430 = lshr i64 %9401, 63
  %9431 = lshr i64 %9402, 63
  %9432 = xor i64 %9427, %9430
  %9433 = xor i64 %9427, %9431
  %9434 = add nuw nsw i64 %9432, %9433
  %9435 = icmp eq i64 %9434, 2
  %9436 = zext i1 %9435 to i8
  %9437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9436, i8* %9437, align 1, !tbaa !2450
  %9438 = load i64, i64* %RBP
  %9439 = sub i64 %9438, 104
  %9440 = load i64, i64* %PC
  %9441 = add i64 %9440, 4
  store i64 %9441, i64* %PC
  %9442 = inttoptr i64 %9439 to i32*
  %9443 = load i32, i32* %9442
  %9444 = sext i32 %9443 to i64
  store i64 %9444, i64* %RCX, align 8, !tbaa !2428
  %9445 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9446 = load i64, i64* %RAX
  %9447 = load i64, i64* %RCX
  %9448 = mul i64 %9447, 8
  %9449 = add i64 %9448, %9446
  %9450 = load i64, i64* %PC
  %9451 = add i64 %9450, 5
  store i64 %9451, i64* %PC
  %9452 = inttoptr i64 %9449 to double*
  %9453 = load double, double* %9452
  %9454 = bitcast i8* %9445 to double*
  store double %9453, double* %9454, align 1, !tbaa !2452
  %9455 = getelementptr inbounds i8, i8* %9445, i64 8
  %9456 = bitcast i8* %9455 to double*
  store double 0.000000e+00, double* %9456, align 1, !tbaa !2452
  %9457 = load i64, i64* %RBP
  %9458 = add i64 %9457, 24
  %9459 = load i64, i64* %PC
  %9460 = add i64 %9459, 4
  store i64 %9460, i64* %PC
  %9461 = inttoptr i64 %9458 to i64*
  %9462 = load i64, i64* %9461
  store i64 %9462, i64* %RAX, align 8, !tbaa !2428
  %9463 = load i64, i64* %RBP
  %9464 = sub i64 %9463, 100
  %9465 = load i64, i64* %PC
  %9466 = add i64 %9465, 4
  store i64 %9466, i64* %PC
  %9467 = inttoptr i64 %9464 to i32*
  %9468 = load i32, i32* %9467
  %9469 = sext i32 %9468 to i64
  store i64 %9469, i64* %RCX, align 8, !tbaa !2428
  %9470 = load i64, i64* %RCX
  %9471 = load i64, i64* %PC
  %9472 = add i64 %9471, 7
  store i64 %9472, i64* %PC
  %9473 = sext i64 %9470 to i128
  %9474 = and i128 %9473, -18446744073709551616
  %9475 = zext i64 %9470 to i128
  %9476 = or i128 %9474, %9475
  %9477 = mul nsw i128 33800, %9476
  %9478 = trunc i128 %9477 to i64
  store i64 %9478, i64* %RCX, align 8, !tbaa !2428
  %9479 = sext i64 %9478 to i128
  %9480 = icmp ne i128 %9479, %9477
  %9481 = zext i1 %9480 to i8
  %9482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9481, i8* %9482, align 1, !tbaa !2432
  %9483 = trunc i128 %9477 to i32
  %9484 = and i32 %9483, 255
  %9485 = call i32 @llvm.ctpop.i32(i32 %9484) #16
  %9486 = trunc i32 %9485 to i8
  %9487 = and i8 %9486, 1
  %9488 = xor i8 %9487, 1
  %9489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9488, i8* %9489, align 1, !tbaa !2446
  %9490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9490, align 1, !tbaa !2447
  %9491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9491, align 1, !tbaa !2448
  %9492 = lshr i64 %9478, 63
  %9493 = trunc i64 %9492 to i8
  %9494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9493, i8* %9494, align 1, !tbaa !2449
  %9495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9481, i8* %9495, align 1, !tbaa !2450
  %9496 = load i64, i64* %RAX
  %9497 = load i64, i64* %RCX
  %9498 = load i64, i64* %PC
  %9499 = add i64 %9498, 3
  store i64 %9499, i64* %PC
  %9500 = add i64 %9497, %9496
  store i64 %9500, i64* %RAX, align 8, !tbaa !2428
  %9501 = icmp ult i64 %9500, %9496
  %9502 = icmp ult i64 %9500, %9497
  %9503 = or i1 %9501, %9502
  %9504 = zext i1 %9503 to i8
  %9505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9504, i8* %9505, align 1, !tbaa !2432
  %9506 = trunc i64 %9500 to i32
  %9507 = and i32 %9506, 255
  %9508 = call i32 @llvm.ctpop.i32(i32 %9507) #16
  %9509 = trunc i32 %9508 to i8
  %9510 = and i8 %9509, 1
  %9511 = xor i8 %9510, 1
  %9512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9511, i8* %9512, align 1, !tbaa !2446
  %9513 = xor i64 %9497, %9496
  %9514 = xor i64 %9513, %9500
  %9515 = lshr i64 %9514, 4
  %9516 = trunc i64 %9515 to i8
  %9517 = and i8 %9516, 1
  %9518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9517, i8* %9518, align 1, !tbaa !2447
  %9519 = icmp eq i64 %9500, 0
  %9520 = zext i1 %9519 to i8
  %9521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9520, i8* %9521, align 1, !tbaa !2448
  %9522 = lshr i64 %9500, 63
  %9523 = trunc i64 %9522 to i8
  %9524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9523, i8* %9524, align 1, !tbaa !2449
  %9525 = lshr i64 %9496, 63
  %9526 = lshr i64 %9497, 63
  %9527 = xor i64 %9522, %9525
  %9528 = xor i64 %9522, %9526
  %9529 = add nuw nsw i64 %9527, %9528
  %9530 = icmp eq i64 %9529, 2
  %9531 = zext i1 %9530 to i8
  %9532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9531, i8* %9532, align 1, !tbaa !2450
  %9533 = load i64, i64* %RBP
  %9534 = sub i64 %9533, 104
  %9535 = load i64, i64* %PC
  %9536 = add i64 %9535, 4
  store i64 %9536, i64* %PC
  %9537 = inttoptr i64 %9534 to i32*
  %9538 = load i32, i32* %9537
  %9539 = sext i32 %9538 to i64
  store i64 %9539, i64* %RCX, align 8, !tbaa !2428
  %9540 = load i64, i64* %RCX
  %9541 = load i64, i64* %PC
  %9542 = add i64 %9541, 7
  store i64 %9542, i64* %PC
  %9543 = sext i64 %9540 to i128
  %9544 = and i128 %9543, -18446744073709551616
  %9545 = zext i64 %9540 to i128
  %9546 = or i128 %9544, %9545
  %9547 = mul nsw i128 520, %9546
  %9548 = trunc i128 %9547 to i64
  store i64 %9548, i64* %RCX, align 8, !tbaa !2428
  %9549 = sext i64 %9548 to i128
  %9550 = icmp ne i128 %9549, %9547
  %9551 = zext i1 %9550 to i8
  %9552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9551, i8* %9552, align 1, !tbaa !2432
  %9553 = trunc i128 %9547 to i32
  %9554 = and i32 %9553, 255
  %9555 = call i32 @llvm.ctpop.i32(i32 %9554) #16
  %9556 = trunc i32 %9555 to i8
  %9557 = and i8 %9556, 1
  %9558 = xor i8 %9557, 1
  %9559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9558, i8* %9559, align 1, !tbaa !2446
  %9560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9560, align 1, !tbaa !2447
  %9561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9561, align 1, !tbaa !2448
  %9562 = lshr i64 %9548, 63
  %9563 = trunc i64 %9562 to i8
  %9564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9563, i8* %9564, align 1, !tbaa !2449
  %9565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9551, i8* %9565, align 1, !tbaa !2450
  %9566 = load i64, i64* %RAX
  %9567 = load i64, i64* %RCX
  %9568 = load i64, i64* %PC
  %9569 = add i64 %9568, 3
  store i64 %9569, i64* %PC
  %9570 = add i64 %9567, %9566
  store i64 %9570, i64* %RAX, align 8, !tbaa !2428
  %9571 = icmp ult i64 %9570, %9566
  %9572 = icmp ult i64 %9570, %9567
  %9573 = or i1 %9571, %9572
  %9574 = zext i1 %9573 to i8
  %9575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9574, i8* %9575, align 1, !tbaa !2432
  %9576 = trunc i64 %9570 to i32
  %9577 = and i32 %9576, 255
  %9578 = call i32 @llvm.ctpop.i32(i32 %9577) #16
  %9579 = trunc i32 %9578 to i8
  %9580 = and i8 %9579, 1
  %9581 = xor i8 %9580, 1
  %9582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9581, i8* %9582, align 1, !tbaa !2446
  %9583 = xor i64 %9567, %9566
  %9584 = xor i64 %9583, %9570
  %9585 = lshr i64 %9584, 4
  %9586 = trunc i64 %9585 to i8
  %9587 = and i8 %9586, 1
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9587, i8* %9588, align 1, !tbaa !2447
  %9589 = icmp eq i64 %9570, 0
  %9590 = zext i1 %9589 to i8
  %9591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9590, i8* %9591, align 1, !tbaa !2448
  %9592 = lshr i64 %9570, 63
  %9593 = trunc i64 %9592 to i8
  %9594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9593, i8* %9594, align 1, !tbaa !2449
  %9595 = lshr i64 %9566, 63
  %9596 = lshr i64 %9567, 63
  %9597 = xor i64 %9592, %9595
  %9598 = xor i64 %9592, %9596
  %9599 = add nuw nsw i64 %9597, %9598
  %9600 = icmp eq i64 %9599, 2
  %9601 = zext i1 %9600 to i8
  %9602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9601, i8* %9602, align 1, !tbaa !2450
  %9603 = load i64, i64* %RBP
  %9604 = sub i64 %9603, 108
  %9605 = load i64, i64* %PC
  %9606 = add i64 %9605, 4
  store i64 %9606, i64* %PC
  %9607 = inttoptr i64 %9604 to i32*
  %9608 = load i32, i32* %9607
  %9609 = sext i32 %9608 to i64
  store i64 %9609, i64* %RCX, align 8, !tbaa !2428
  %9610 = load i64, i64* %RAX
  %9611 = load i64, i64* %RCX
  %9612 = mul i64 %9611, 8
  %9613 = add i64 %9612, %9610
  %9614 = bitcast %union.vec128_t* %XMM0 to i8*
  %9615 = load i64, i64* %PC
  %9616 = add i64 %9615, 5
  store i64 %9616, i64* %PC
  %9617 = bitcast i8* %9614 to double*
  %9618 = load double, double* %9617, align 1
  %9619 = inttoptr i64 %9613 to double*
  store double %9618, double* %9619
  %9620 = load i64, i64* %RBP
  %9621 = sub i64 %9620, 108
  %9622 = load i64, i64* %PC
  %9623 = add i64 %9622, 3
  store i64 %9623, i64* %PC
  %9624 = inttoptr i64 %9621 to i32*
  %9625 = load i32, i32* %9624
  %9626 = zext i32 %9625 to i64
  store i64 %9626, i64* %RAX, align 8, !tbaa !2428
  %9627 = load i64, i64* %RAX
  %9628 = load i64, i64* %PC
  %9629 = add i64 %9628, 3
  store i64 %9629, i64* %PC
  %9630 = trunc i64 %9627 to i32
  %9631 = add i32 1, %9630
  %9632 = zext i32 %9631 to i64
  store i64 %9632, i64* %RAX, align 8, !tbaa !2428
  %9633 = icmp ult i32 %9631, %9630
  %9634 = icmp ult i32 %9631, 1
  %9635 = or i1 %9633, %9634
  %9636 = zext i1 %9635 to i8
  %9637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9636, i8* %9637, align 1, !tbaa !2432
  %9638 = and i32 %9631, 255
  %9639 = call i32 @llvm.ctpop.i32(i32 %9638) #16
  %9640 = trunc i32 %9639 to i8
  %9641 = and i8 %9640, 1
  %9642 = xor i8 %9641, 1
  %9643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9642, i8* %9643, align 1, !tbaa !2446
  %9644 = xor i64 1, %9627
  %9645 = trunc i64 %9644 to i32
  %9646 = xor i32 %9645, %9631
  %9647 = lshr i32 %9646, 4
  %9648 = trunc i32 %9647 to i8
  %9649 = and i8 %9648, 1
  %9650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9649, i8* %9650, align 1, !tbaa !2447
  %9651 = icmp eq i32 %9631, 0
  %9652 = zext i1 %9651 to i8
  %9653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9652, i8* %9653, align 1, !tbaa !2448
  %9654 = lshr i32 %9631, 31
  %9655 = trunc i32 %9654 to i8
  %9656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9655, i8* %9656, align 1, !tbaa !2449
  %9657 = lshr i32 %9630, 31
  %9658 = xor i32 %9654, %9657
  %9659 = add nuw nsw i32 %9658, %9654
  %9660 = icmp eq i32 %9659, 2
  %9661 = zext i1 %9660 to i8
  %9662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9661, i8* %9662, align 1, !tbaa !2450
  %9663 = load i64, i64* %RBP
  %9664 = sub i64 %9663, 108
  %9665 = load i32, i32* %EAX
  %9666 = zext i32 %9665 to i64
  %9667 = load i64, i64* %PC
  %9668 = add i64 %9667, 3
  store i64 %9668, i64* %PC
  %9669 = inttoptr i64 %9664 to i32*
  store i32 %9665, i32* %9669
  %9670 = load i64, i64* %PC
  %9671 = sub i64 %9670, 679
  %9672 = load i64, i64* %PC
  %9673 = add i64 %9672, 5
  store i64 %9673, i64* %PC
  %9674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9671, i64* %9674, align 8, !tbaa !2428
  br label %block_4014a0

block_401486:                                     ; preds = %block_40147a
  %9675 = load i64, i64* %RBP
  %9676 = sub i64 %9675, 104
  %9677 = load i64, i64* %PC
  %9678 = add i64 %9677, 7
  store i64 %9678, i64* %PC
  %9679 = inttoptr i64 %9676 to i32*
  store i32 0, i32* %9679
  br label %block_40148d

block_401ee5:                                     ; preds = %block_40148d
  %9680 = load i64, i64* %PC
  %9681 = add i64 %9680, 5
  %9682 = load i64, i64* %PC
  %9683 = add i64 %9682, 5
  store i64 %9683, i64* %PC
  %9684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9681, i64* %9684, align 8, !tbaa !2428
  %9685 = load i64, i64* %RBP
  %9686 = sub i64 %9685, 100
  %9687 = load i64, i64* %PC
  %9688 = add i64 %9687, 3
  store i64 %9688, i64* %PC
  %9689 = inttoptr i64 %9686 to i32*
  %9690 = load i32, i32* %9689
  %9691 = zext i32 %9690 to i64
  store i64 %9691, i64* %RAX, align 8, !tbaa !2428
  %9692 = load i64, i64* %RAX
  %9693 = load i64, i64* %PC
  %9694 = add i64 %9693, 3
  store i64 %9694, i64* %PC
  %9695 = trunc i64 %9692 to i32
  %9696 = add i32 1, %9695
  %9697 = zext i32 %9696 to i64
  store i64 %9697, i64* %RAX, align 8, !tbaa !2428
  %9698 = icmp ult i32 %9696, %9695
  %9699 = icmp ult i32 %9696, 1
  %9700 = or i1 %9698, %9699
  %9701 = zext i1 %9700 to i8
  %9702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9701, i8* %9702, align 1, !tbaa !2432
  %9703 = and i32 %9696, 255
  %9704 = call i32 @llvm.ctpop.i32(i32 %9703) #16
  %9705 = trunc i32 %9704 to i8
  %9706 = and i8 %9705, 1
  %9707 = xor i8 %9706, 1
  %9708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9707, i8* %9708, align 1, !tbaa !2446
  %9709 = xor i64 1, %9692
  %9710 = trunc i64 %9709 to i32
  %9711 = xor i32 %9710, %9696
  %9712 = lshr i32 %9711, 4
  %9713 = trunc i32 %9712 to i8
  %9714 = and i8 %9713, 1
  %9715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9714, i8* %9715, align 1, !tbaa !2447
  %9716 = icmp eq i32 %9696, 0
  %9717 = zext i1 %9716 to i8
  %9718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9717, i8* %9718, align 1, !tbaa !2448
  %9719 = lshr i32 %9696, 31
  %9720 = trunc i32 %9719 to i8
  %9721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9720, i8* %9721, align 1, !tbaa !2449
  %9722 = lshr i32 %9695, 31
  %9723 = xor i32 %9719, %9722
  %9724 = add nuw nsw i32 %9723, %9719
  %9725 = icmp eq i32 %9724, 2
  %9726 = zext i1 %9725 to i8
  %9727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9726, i8* %9727, align 1, !tbaa !2450
  %9728 = load i64, i64* %RBP
  %9729 = sub i64 %9728, 100
  %9730 = load i32, i32* %EAX
  %9731 = zext i32 %9730 to i64
  %9732 = load i64, i64* %PC
  %9733 = add i64 %9732, 3
  store i64 %9733, i64* %PC
  %9734 = inttoptr i64 %9729 to i32*
  store i32 %9730, i32* %9734
  %9735 = load i64, i64* %PC
  %9736 = sub i64 %9735, 2681
  %9737 = load i64, i64* %PC
  %9738 = add i64 %9737, 5
  store i64 %9738, i64* %PC
  %9739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9736, i64* %9739, align 8, !tbaa !2428
  br label %block_40147a

block_4014a0:                                     ; preds = %block_4014ac, %block_401499
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_401499 ], [ %MEMORY.3, %block_4014ac ]
  %9740 = load i64, i64* %RBP
  %9741 = sub i64 %9740, 108
  %9742 = load i64, i64* %PC
  %9743 = add i64 %9742, 3
  store i64 %9743, i64* %PC
  %9744 = inttoptr i64 %9741 to i32*
  %9745 = load i32, i32* %9744
  %9746 = zext i32 %9745 to i64
  store i64 %9746, i64* %RAX, align 8, !tbaa !2428
  %9747 = load i32, i32* %EAX
  %9748 = zext i32 %9747 to i64
  %9749 = load i64, i64* %RBP
  %9750 = sub i64 %9749, 48
  %9751 = load i64, i64* %PC
  %9752 = add i64 %9751, 3
  store i64 %9752, i64* %PC
  %9753 = inttoptr i64 %9750 to i32*
  %9754 = load i32, i32* %9753
  %9755 = sub i32 %9747, %9754
  %9756 = icmp ult i32 %9747, %9754
  %9757 = zext i1 %9756 to i8
  %9758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9757, i8* %9758, align 1, !tbaa !2432
  %9759 = and i32 %9755, 255
  %9760 = call i32 @llvm.ctpop.i32(i32 %9759) #16
  %9761 = trunc i32 %9760 to i8
  %9762 = and i8 %9761, 1
  %9763 = xor i8 %9762, 1
  %9764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9763, i8* %9764, align 1, !tbaa !2446
  %9765 = xor i32 %9754, %9747
  %9766 = xor i32 %9765, %9755
  %9767 = lshr i32 %9766, 4
  %9768 = trunc i32 %9767 to i8
  %9769 = and i8 %9768, 1
  %9770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9769, i8* %9770, align 1, !tbaa !2447
  %9771 = icmp eq i32 %9755, 0
  %9772 = zext i1 %9771 to i8
  %9773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9772, i8* %9773, align 1, !tbaa !2448
  %9774 = lshr i32 %9755, 31
  %9775 = trunc i32 %9774 to i8
  %9776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9775, i8* %9776, align 1, !tbaa !2449
  %9777 = lshr i32 %9747, 31
  %9778 = lshr i32 %9754, 31
  %9779 = xor i32 %9778, %9777
  %9780 = xor i32 %9774, %9777
  %9781 = add nuw nsw i32 %9780, %9779
  %9782 = icmp eq i32 %9781, 2
  %9783 = zext i1 %9782 to i8
  %9784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9783, i8* %9784, align 1, !tbaa !2450
  %9785 = load i64, i64* %PC
  %9786 = add i64 %9785, 678
  %9787 = load i64, i64* %PC
  %9788 = add i64 %9787, 6
  %9789 = load i64, i64* %PC
  %9790 = add i64 %9789, 6
  store i64 %9790, i64* %PC
  %9791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9792 = load i8, i8* %9791, align 1, !tbaa !2449
  %9793 = icmp ne i8 %9792, 0
  %9794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9795 = load i8, i8* %9794, align 1, !tbaa !2450
  %9796 = icmp ne i8 %9795, 0
  %9797 = xor i1 %9793, %9796
  %9798 = xor i1 %9797, true
  %9799 = zext i1 %9798 to i8
  store i8 %9799, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %9800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9801 = select i1 %9797, i64 %9788, i64 %9786
  store i64 %9801, i64* %9800, align 8, !tbaa !2428
  %9802 = load i8, i8* %BRANCH_TAKEN
  %9803 = icmp eq i8 %9802, 1
  %9804 = load i64, i64* %RBP
  %9805 = add i64 %9804, 32
  %9806 = load i64, i64* %PC
  %9807 = add i64 %9806, 4
  store i64 %9807, i64* %PC
  %9808 = inttoptr i64 %9805 to i64*
  %9809 = load i64, i64* %9808
  store i64 %9809, i64* %RAX, align 8, !tbaa !2428
  %9810 = load i64, i64* %RBP
  %9811 = sub i64 %9810, 100
  %9812 = load i64, i64* %PC
  %9813 = add i64 %9812, 4
  store i64 %9813, i64* %PC
  %9814 = inttoptr i64 %9811 to i32*
  %9815 = load i32, i32* %9814
  %9816 = sext i32 %9815 to i64
  store i64 %9816, i64* %RCX, align 8, !tbaa !2428
  %9817 = load i64, i64* %RCX
  %9818 = load i64, i64* %PC
  %9819 = add i64 %9818, 7
  store i64 %9819, i64* %PC
  %9820 = sext i64 %9817 to i128
  %9821 = and i128 %9820, -18446744073709551616
  %9822 = zext i64 %9817 to i128
  %9823 = or i128 %9821, %9822
  %9824 = mul nsw i128 33800, %9823
  %9825 = trunc i128 %9824 to i64
  store i64 %9825, i64* %RCX, align 8, !tbaa !2428
  %9826 = sext i64 %9825 to i128
  %9827 = icmp ne i128 %9826, %9824
  %9828 = zext i1 %9827 to i8
  %9829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9828, i8* %9829, align 1, !tbaa !2432
  %9830 = trunc i128 %9824 to i32
  %9831 = and i32 %9830, 255
  %9832 = call i32 @llvm.ctpop.i32(i32 %9831) #16
  %9833 = trunc i32 %9832 to i8
  %9834 = and i8 %9833, 1
  %9835 = xor i8 %9834, 1
  %9836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9835, i8* %9836, align 1, !tbaa !2446
  %9837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9837, align 1, !tbaa !2447
  %9838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9838, align 1, !tbaa !2448
  %9839 = lshr i64 %9825, 63
  %9840 = trunc i64 %9839 to i8
  %9841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9840, i8* %9841, align 1, !tbaa !2449
  %9842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9828, i8* %9842, align 1, !tbaa !2450
  %9843 = load i64, i64* %RAX
  %9844 = load i64, i64* %RCX
  %9845 = load i64, i64* %PC
  %9846 = add i64 %9845, 3
  store i64 %9846, i64* %PC
  %9847 = add i64 %9844, %9843
  store i64 %9847, i64* %RAX, align 8, !tbaa !2428
  %9848 = icmp ult i64 %9847, %9843
  %9849 = icmp ult i64 %9847, %9844
  %9850 = or i1 %9848, %9849
  %9851 = zext i1 %9850 to i8
  %9852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9851, i8* %9852, align 1, !tbaa !2432
  %9853 = trunc i64 %9847 to i32
  %9854 = and i32 %9853, 255
  %9855 = call i32 @llvm.ctpop.i32(i32 %9854) #16
  %9856 = trunc i32 %9855 to i8
  %9857 = and i8 %9856, 1
  %9858 = xor i8 %9857, 1
  %9859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9858, i8* %9859, align 1, !tbaa !2446
  %9860 = xor i64 %9844, %9843
  %9861 = xor i64 %9860, %9847
  %9862 = lshr i64 %9861, 4
  %9863 = trunc i64 %9862 to i8
  %9864 = and i8 %9863, 1
  %9865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9864, i8* %9865, align 1, !tbaa !2447
  %9866 = icmp eq i64 %9847, 0
  %9867 = zext i1 %9866 to i8
  %9868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9867, i8* %9868, align 1, !tbaa !2448
  %9869 = lshr i64 %9847, 63
  %9870 = trunc i64 %9869 to i8
  %9871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9870, i8* %9871, align 1, !tbaa !2449
  %9872 = lshr i64 %9843, 63
  %9873 = lshr i64 %9844, 63
  %9874 = xor i64 %9869, %9872
  %9875 = xor i64 %9869, %9873
  %9876 = add nuw nsw i64 %9874, %9875
  %9877 = icmp eq i64 %9876, 2
  %9878 = zext i1 %9877 to i8
  %9879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9878, i8* %9879, align 1, !tbaa !2450
  %9880 = load i64, i64* %RBP
  %9881 = sub i64 %9880, 104
  %9882 = load i64, i64* %PC
  %9883 = add i64 %9882, 4
  store i64 %9883, i64* %PC
  %9884 = inttoptr i64 %9881 to i32*
  %9885 = load i32, i32* %9884
  %9886 = sext i32 %9885 to i64
  store i64 %9886, i64* %RCX, align 8, !tbaa !2428
  %9887 = load i64, i64* %RCX
  %9888 = load i64, i64* %PC
  %9889 = add i64 %9888, 7
  store i64 %9889, i64* %PC
  %9890 = sext i64 %9887 to i128
  %9891 = and i128 %9890, -18446744073709551616
  %9892 = zext i64 %9887 to i128
  %9893 = or i128 %9891, %9892
  %9894 = mul nsw i128 520, %9893
  %9895 = trunc i128 %9894 to i64
  store i64 %9895, i64* %RCX, align 8, !tbaa !2428
  %9896 = sext i64 %9895 to i128
  %9897 = icmp ne i128 %9896, %9894
  %9898 = zext i1 %9897 to i8
  %9899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9898, i8* %9899, align 1, !tbaa !2432
  %9900 = trunc i128 %9894 to i32
  %9901 = and i32 %9900, 255
  %9902 = call i32 @llvm.ctpop.i32(i32 %9901) #16
  %9903 = trunc i32 %9902 to i8
  %9904 = and i8 %9903, 1
  %9905 = xor i8 %9904, 1
  %9906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9905, i8* %9906, align 1, !tbaa !2446
  %9907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9907, align 1, !tbaa !2447
  %9908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9908, align 1, !tbaa !2448
  %9909 = lshr i64 %9895, 63
  %9910 = trunc i64 %9909 to i8
  %9911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9910, i8* %9911, align 1, !tbaa !2449
  %9912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9898, i8* %9912, align 1, !tbaa !2450
  %9913 = load i64, i64* %RAX
  %9914 = load i64, i64* %RCX
  %9915 = load i64, i64* %PC
  %9916 = add i64 %9915, 3
  store i64 %9916, i64* %PC
  %9917 = add i64 %9914, %9913
  store i64 %9917, i64* %RAX, align 8, !tbaa !2428
  %9918 = icmp ult i64 %9917, %9913
  %9919 = icmp ult i64 %9917, %9914
  %9920 = or i1 %9918, %9919
  %9921 = zext i1 %9920 to i8
  %9922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9921, i8* %9922, align 1, !tbaa !2432
  %9923 = trunc i64 %9917 to i32
  %9924 = and i32 %9923, 255
  %9925 = call i32 @llvm.ctpop.i32(i32 %9924) #16
  %9926 = trunc i32 %9925 to i8
  %9927 = and i8 %9926, 1
  %9928 = xor i8 %9927, 1
  %9929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9928, i8* %9929, align 1, !tbaa !2446
  %9930 = xor i64 %9914, %9913
  %9931 = xor i64 %9930, %9917
  %9932 = lshr i64 %9931, 4
  %9933 = trunc i64 %9932 to i8
  %9934 = and i8 %9933, 1
  %9935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9934, i8* %9935, align 1, !tbaa !2447
  %9936 = icmp eq i64 %9917, 0
  %9937 = zext i1 %9936 to i8
  %9938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9937, i8* %9938, align 1, !tbaa !2448
  %9939 = lshr i64 %9917, 63
  %9940 = trunc i64 %9939 to i8
  %9941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9940, i8* %9941, align 1, !tbaa !2449
  %9942 = lshr i64 %9913, 63
  %9943 = lshr i64 %9914, 63
  %9944 = xor i64 %9939, %9942
  %9945 = xor i64 %9939, %9943
  %9946 = add nuw nsw i64 %9944, %9945
  %9947 = icmp eq i64 %9946, 2
  %9948 = zext i1 %9947 to i8
  %9949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9948, i8* %9949, align 1, !tbaa !2450
  %9950 = load i64, i64* %RBP
  br i1 %9803, label %block_40174c, label %block_4014ac
}

; Function Attrs: noinline
define %struct.Memory* @sub_400800_xmalloc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400800:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 32
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 32
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2432
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2446
  %61 = xor i64 32, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2448
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2449
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 5
  store i64 %84, i64* %PC
  store i64 32, i64* %RCX, align 8, !tbaa !2428
  %85 = load i32, i32* %ECX
  %86 = zext i32 %85 to i64
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 2
  store i64 %88, i64* %PC
  %89 = and i64 %86, 4294967295
  store i64 %89, i64* %RSI, align 8, !tbaa !2428
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i64, i64* %RDI
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 16
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 8
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i64*
  store i64 0, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i64*
  %106 = load i64, i64* %105
  store i64 %106, i64* %RDX, align 8, !tbaa !2428
  %107 = load i64, i64* %RAX
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  store i64 %107, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = sub i64 %110, 646
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %111, i64* %120, align 8, !tbaa !2428
  %121 = load i64, i64* %PC
  %122 = call %struct.Memory* @ext_4005a0_posix_memalign(%struct.State* %0, i64 %121, %struct.Memory* %2)
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 20
  %125 = load i32, i32* %EAX
  %126 = zext i32 %125 to i64
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 16
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 5
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %136, align 1, !tbaa !2432
  %137 = trunc i64 %135 to i32
  %138 = and i32 %137, 255
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #16
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %142, i8* %143, align 1, !tbaa !2446
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %144, align 1, !tbaa !2447
  %145 = icmp eq i64 %135, 0
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %146, i8* %147, align 1, !tbaa !2448
  %148 = lshr i64 %135, 63
  %149 = trunc i64 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %149, i8* %150, align 1, !tbaa !2449
  %151 = lshr i64 %135, 63
  %152 = xor i64 %148, %151
  %153 = add nuw nsw i64 %152, %151
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 16
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 6
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 6
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %164 = load i8, i8* %163, align 1, !tbaa !2448
  store i8 %164, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %166 = icmp ne i8 %164, 0
  %167 = select i1 %166, i64 %158, i64 %160
  store i64 %167, i64* %165, align 8, !tbaa !2428
  %168 = load i8, i8* %BRANCH_TAKEN
  %169 = icmp eq i8 %168, 1
  br i1 %169, label %block_400843, label %block_400839

block_400843:                                     ; preds = %block_400839, %block_400800
  %MEMORY.0 = phi %struct.Memory* [ %122, %block_400800 ], [ %122, %block_400839 ]
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 10
  store i64 %171, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e80__rodata_type* @seg_402e80__rodata to i64), i64 119), i64* %RSI, align 8, !tbaa !2428
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 8
  store i64 %173, i64* %PC
  %174 = load i64, i64* @stderr
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 2
  store i64 %176, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2454
  %177 = load i64, i64* %PC
  %178 = sub i64 %177, 727
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 5
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 5
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %184 = load i64, i64* %183, align 8, !tbaa !2428
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %180, i64* %186
  store i64 %185, i64* %183, align 8, !tbaa !2428
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %178, i64* %187, align 8, !tbaa !2428
  %188 = load i64, i64* %PC
  %189 = call %struct.Memory* @ext_6040f8_fprintf(%struct.State* %0, i64 %188, %struct.Memory* %MEMORY.0)
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 5
  store i64 %191, i64* %PC
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 24
  %194 = load i32, i32* %EAX
  %195 = zext i32 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %193 to i32*
  store i32 %194, i32* %198
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 724
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @ext_6040c8_exit(%struct.State* %0, i64 %210, %struct.Memory* %189)
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %212, %struct.Memory* %211)
  ret %struct.Memory* %213

block_400839:                                     ; preds = %block_400800
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 20
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i32*
  %219 = load i32, i32* %218
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %220, align 1, !tbaa !2432
  %221 = and i32 %219, 255
  %222 = call i32 @llvm.ctpop.i32(i32 %221) #16
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %225, i8* %226, align 1, !tbaa !2446
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %227, align 1, !tbaa !2447
  %228 = icmp eq i32 %219, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = lshr i32 %219, 31
  %232 = trunc i32 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2449
  %234 = lshr i32 %219, 31
  %235 = xor i32 %231, %234
  %236 = add nuw nsw i32 %235, %234
  %237 = icmp eq i32 %236, 2
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %238, i8* %239, align 1, !tbaa !2450
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 44
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 6
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 6
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %247 = load i8, i8* %246, align 1, !tbaa !2448
  store i8 %247, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %249 = icmp ne i8 %247, 0
  %250 = select i1 %249, i64 %241, i64 %243
  store i64 %250, i64* %248, align 8, !tbaa !2428
  %251 = load i8, i8* %BRANCH_TAKEN
  %252 = icmp eq i8 %251, 1
  br i1 %252, label %block_400869, label %block_400843

block_400869:                                     ; preds = %block_400839
  %253 = load i64, i64* %RBP
  %254 = sub i64 %253, 16
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %254 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = load i64, i64* %RSP
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = add i64 32, %259
  store i64 %262, i64* %RSP, align 8, !tbaa !2428
  %263 = icmp ult i64 %262, %259
  %264 = icmp ult i64 %262, 32
  %265 = or i1 %263, %264
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %262 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 32, %259
  %276 = xor i64 %275, %262
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %262, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %262, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %259, 63
  %288 = xor i64 %284, %287
  %289 = add nuw nsw i64 %288, %284
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %291, i8* %292, align 1, !tbaa !2450
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %296 = load i64, i64* %295, align 8, !tbaa !2428
  %297 = add i64 %296, 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RBP, align 8, !tbaa !2428
  store i64 %297, i64* %295, align 8, !tbaa !2428
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 1
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %302, align 8, !tbaa !2428
  %307 = add i64 %304, 8
  store i64 %307, i64* %303, align 8, !tbaa !2428
  ret %struct.Memory* %122
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e70___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e70:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400880_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400880:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 3
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 21
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R10 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 23
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R11 = bitcast %union.anon* %50 to i64*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 25
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %R12 = bitcast %union.anon* %53 to i64*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %55 = getelementptr inbounds %struct.GPR, %struct.GPR* %54, i32 0, i32 27
  %56 = getelementptr inbounds %struct.Reg, %struct.Reg* %55, i32 0, i32 0
  %R13 = bitcast %union.anon* %56 to i64*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %58 = getelementptr inbounds %struct.GPR, %struct.GPR* %57, i32 0, i32 29
  %59 = getelementptr inbounds %struct.Reg, %struct.Reg* %58, i32 0, i32 0
  %R14 = bitcast %union.anon* %59 to i64*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %61 = getelementptr inbounds %struct.GPR, %struct.GPR* %60, i32 0, i32 31
  %62 = getelementptr inbounds %struct.Reg, %struct.Reg* %61, i32 0, i32 0
  %R15 = bitcast %union.anon* %62 to i64*
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %64 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %63, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %64 to %"class.std::bitset"*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %66 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %65, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %66 to %"class.std::bitset"*
  %67 = load i64, i64* %RBP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 1
  store i64 %69, i64* %PC
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %71 = load i64, i64* %70, align 8, !tbaa !2428
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %67, i64* %73
  store i64 %72, i64* %70, align 8, !tbaa !2428
  %74 = load i64, i64* %RSP
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 3
  store i64 %76, i64* %PC
  store i64 %74, i64* %RBP, align 8, !tbaa !2428
  %77 = load i64, i64* %R15
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 2
  store i64 %79, i64* %PC
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %81 = load i64, i64* %80, align 8, !tbaa !2428
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %77, i64* %83
  store i64 %82, i64* %80, align 8, !tbaa !2428
  %84 = load i64, i64* %R14
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 2
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %R13
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %95 = load i64, i64* %94, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %97
  store i64 %96, i64* %94, align 8, !tbaa !2428
  %98 = load i64, i64* %R12
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 2
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = load i64, i64* %RBX
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 1
  store i64 %107, i64* %PC
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %109 = load i64, i64* %108, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %105, i64* %111
  store i64 %110, i64* %108, align 8, !tbaa !2428
  %112 = load i64, i64* %RSP
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 7
  store i64 %114, i64* %PC
  %115 = sub i64 %112, 392
  store i64 %115, i64* %RSP, align 8, !tbaa !2428
  %116 = icmp ult i64 %112, 392
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %117, i8* %118, align 1, !tbaa !2432
  %119 = trunc i64 %115 to i32
  %120 = and i32 %119, 255
  %121 = call i32 @llvm.ctpop.i32(i32 %120) #16
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = xor i8 %123, 1
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %124, i8* %125, align 1, !tbaa !2446
  %126 = xor i64 392, %112
  %127 = xor i64 %126, %115
  %128 = lshr i64 %127, 4
  %129 = trunc i64 %128 to i8
  %130 = and i8 %129, 1
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %130, i8* %131, align 1, !tbaa !2447
  %132 = icmp eq i64 %115, 0
  %133 = zext i1 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %133, i8* %134, align 1, !tbaa !2448
  %135 = lshr i64 %115, 63
  %136 = trunc i64 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %136, i8* %137, align 1, !tbaa !2449
  %138 = lshr i64 %112, 63
  %139 = xor i64 %135, %138
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  store i64 4225, i64* %RAX, align 8, !tbaa !2428
  %146 = load i32, i32* %EAX
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 2
  store i64 %149, i64* %PC
  %150 = and i64 %147, 4294967295
  store i64 %150, i64* %RCX, align 8, !tbaa !2428
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 44
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 7
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to i32*
  store i32 0, i32* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 48
  %160 = load i32, i32* %EDI
  %161 = zext i32 %160 to i64
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 3
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %159 to i32*
  store i32 %160, i32* %164
  %165 = load i64, i64* %RBP
  %166 = sub i64 %165, 56
  %167 = load i64, i64* %RSI
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %166 to i64*
  store i64 %167, i64* %170
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 60
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i32*
  store i32 64, i32* %175
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 64
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  store i32 64, i32* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 68
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 7
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i32*
  store i32 64, i32* %185
  %186 = load i64, i64* %RCX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  store i64 %186, i64* %RDI, align 8, !tbaa !2428
  %189 = load i32, i32* %EAX
  %190 = zext i32 %189 to i64
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 2
  store i64 %192, i64* %PC
  %193 = and i64 %190, 4294967295
  store i64 %193, i64* %RSI, align 8, !tbaa !2428
  %194 = load i64, i64* %PC
  %195 = sub i64 %194, 264
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 5
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %201 = load i64, i64* %200, align 8, !tbaa !2428
  %202 = add i64 %201, -8
  %203 = inttoptr i64 %202 to i64*
  store i64 %197, i64* %203
  store i64 %202, i64* %200, align 8, !tbaa !2428
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %195, i64* %204, align 8, !tbaa !2428
  %205 = load i64, i64* %PC
  %206 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %205, %struct.Memory* %2)
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC
  store i64 4225, i64* %RSI, align 8, !tbaa !2428
  %209 = load i32, i32* %ESI
  %210 = zext i32 %209 to i64
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 2
  store i64 %212, i64* %PC
  %213 = and i64 %210, 4294967295
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 96
  %218 = load i64, i64* %RAX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 285
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %233, %struct.Memory* %206)
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 5
  store i64 %236, i64* %PC
  store i64 4225, i64* %RSI, align 8, !tbaa !2428
  %237 = load i32, i32* %ESI
  %238 = zext i32 %237 to i64
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  store i64 %240, i64* %PC
  %241 = and i64 %238, 4294967295
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 5
  store i64 %243, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %244 = load i64, i64* %RBP
  %245 = sub i64 %244, 104
  %246 = load i64, i64* %RAX
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %245 to i64*
  store i64 %246, i64* %249
  %250 = load i64, i64* %PC
  %251 = sub i64 %250, 306
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 5
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %257 = load i64, i64* %256, align 8, !tbaa !2428
  %258 = add i64 %257, -8
  %259 = inttoptr i64 %258 to i64*
  store i64 %253, i64* %259
  store i64 %258, i64* %256, align 8, !tbaa !2428
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %251, i64* %260, align 8, !tbaa !2428
  %261 = load i64, i64* %PC
  %262 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %261, %struct.Memory* %234)
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 5
  store i64 %264, i64* %PC
  store i64 4225, i64* %RSI, align 8, !tbaa !2428
  %265 = load i32, i32* %ESI
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 2
  store i64 %268, i64* %PC
  %269 = and i64 %266, 4294967295
  store i64 %269, i64* %RDI, align 8, !tbaa !2428
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 5
  store i64 %271, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 112
  %274 = load i64, i64* %RAX
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %PC
  %279 = sub i64 %278, 327
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 5
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 5
  store i64 %283, i64* %PC
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %285 = load i64, i64* %284, align 8, !tbaa !2428
  %286 = add i64 %285, -8
  %287 = inttoptr i64 %286 to i64*
  store i64 %281, i64* %287
  store i64 %286, i64* %284, align 8, !tbaa !2428
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %279, i64* %288, align 8, !tbaa !2428
  %289 = load i64, i64* %PC
  %290 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %289, %struct.Memory* %262)
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 5
  store i64 %292, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %293 = load i32, i32* %ESI
  %294 = zext i32 %293 to i64
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 2
  store i64 %296, i64* %PC
  %297 = and i64 %294, 4294967295
  store i64 %297, i64* %RDI, align 8, !tbaa !2428
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 5
  store i64 %299, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 120
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %301 to i64*
  store i64 %302, i64* %305
  %306 = load i64, i64* %PC
  %307 = sub i64 %306, 348
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %309, i64* %315
  store i64 %314, i64* %312, align 8, !tbaa !2428
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %307, i64* %316, align 8, !tbaa !2428
  %317 = load i64, i64* %PC
  %318 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %317, %struct.Memory* %290)
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 5
  store i64 %320, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %321 = load i32, i32* %ESI
  %322 = zext i32 %321 to i64
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 2
  store i64 %324, i64* %PC
  %325 = and i64 %322, 4294967295
  store i64 %325, i64* %RDI, align 8, !tbaa !2428
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 128
  %330 = load i64, i64* %RAX
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 4
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %329 to i64*
  store i64 %330, i64* %333
  %334 = load i64, i64* %PC
  %335 = sub i64 %334, 369
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 5
  store i64 %339, i64* %PC
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %341 = load i64, i64* %340, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %337, i64* %343
  store i64 %342, i64* %340, align 8, !tbaa !2428
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %335, i64* %344, align 8, !tbaa !2428
  %345 = load i64, i64* %PC
  %346 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %345, %struct.Memory* %318)
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 5
  store i64 %348, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %349 = load i32, i32* %ESI
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 2
  store i64 %352, i64* %PC
  %353 = and i64 %350, 4294967295
  store i64 %353, i64* %RDI, align 8, !tbaa !2428
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 136
  %358 = load i64, i64* %RAX
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 7
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %357 to i64*
  store i64 %358, i64* %361
  %362 = load i64, i64* %PC
  %363 = sub i64 %362, 393
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 5
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %369 = load i64, i64* %368, align 8, !tbaa !2428
  %370 = add i64 %369, -8
  %371 = inttoptr i64 %370 to i64*
  store i64 %365, i64* %371
  store i64 %370, i64* %368, align 8, !tbaa !2428
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %363, i64* %372, align 8, !tbaa !2428
  %373 = load i64, i64* %PC
  %374 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %373, %struct.Memory* %346)
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 5
  store i64 %376, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %377 = load i32, i32* %ESI
  %378 = zext i32 %377 to i64
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 2
  store i64 %380, i64* %PC
  %381 = and i64 %378, 4294967295
  store i64 %381, i64* %RDI, align 8, !tbaa !2428
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 144
  %386 = load i64, i64* %RAX
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 7
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %385 to i64*
  store i64 %386, i64* %389
  %390 = load i64, i64* %PC
  %391 = sub i64 %390, 417
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 5
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  store i64 %395, i64* %PC
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %397 = load i64, i64* %396, align 8, !tbaa !2428
  %398 = add i64 %397, -8
  %399 = inttoptr i64 %398 to i64*
  store i64 %393, i64* %399
  store i64 %398, i64* %396, align 8, !tbaa !2428
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %391, i64* %400, align 8, !tbaa !2428
  %401 = load i64, i64* %PC
  %402 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %401, %struct.Memory* %374)
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 5
  store i64 %404, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %405 = load i32, i32* %ESI
  %406 = zext i32 %405 to i64
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 2
  store i64 %408, i64* %PC
  %409 = and i64 %406, 4294967295
  store i64 %409, i64* %RDI, align 8, !tbaa !2428
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 5
  store i64 %411, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %412 = load i64, i64* %RBP
  %413 = sub i64 %412, 152
  %414 = load i64, i64* %RAX
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 7
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %413 to i64*
  store i64 %414, i64* %417
  %418 = load i64, i64* %PC
  %419 = sub i64 %418, 441
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 5
  store i64 %423, i64* %PC
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %425 = load i64, i64* %424, align 8, !tbaa !2428
  %426 = add i64 %425, -8
  %427 = inttoptr i64 %426 to i64*
  store i64 %421, i64* %427
  store i64 %426, i64* %424, align 8, !tbaa !2428
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %419, i64* %428, align 8, !tbaa !2428
  %429 = load i64, i64* %PC
  %430 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %429, %struct.Memory* %402)
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 5
  store i64 %432, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %433 = load i32, i32* %ESI
  %434 = zext i32 %433 to i64
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 2
  store i64 %436, i64* %PC
  %437 = and i64 %434, 4294967295
  store i64 %437, i64* %RDI, align 8, !tbaa !2428
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 5
  store i64 %439, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 160
  %442 = load i64, i64* %RAX
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 7
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %441 to i64*
  store i64 %442, i64* %445
  %446 = load i64, i64* %PC
  %447 = sub i64 %446, 465
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  store i64 %451, i64* %PC
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %453 = load i64, i64* %452, align 8, !tbaa !2428
  %454 = add i64 %453, -8
  %455 = inttoptr i64 %454 to i64*
  store i64 %449, i64* %455
  store i64 %454, i64* %452, align 8, !tbaa !2428
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %447, i64* %456, align 8, !tbaa !2428
  %457 = load i64, i64* %PC
  %458 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %457, %struct.Memory* %430)
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %461 = load i32, i32* %ESI
  %462 = zext i32 %461 to i64
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 2
  store i64 %464, i64* %PC
  %465 = and i64 %462, 4294967295
  store i64 %465, i64* %RDI, align 8, !tbaa !2428
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 5
  store i64 %467, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 168
  %470 = load i64, i64* %RAX
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 7
  store i64 %472, i64* %PC
  %473 = inttoptr i64 %469 to i64*
  store i64 %470, i64* %473
  %474 = load i64, i64* %PC
  %475 = sub i64 %474, 489
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 5
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %481 = load i64, i64* %480, align 8, !tbaa !2428
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %477, i64* %483
  store i64 %482, i64* %480, align 8, !tbaa !2428
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %475, i64* %484, align 8, !tbaa !2428
  %485 = load i64, i64* %PC
  %486 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %485, %struct.Memory* %458)
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  store i64 %488, i64* %PC
  store i64 274625, i64* %RSI, align 8, !tbaa !2428
  %489 = load i32, i32* %ESI
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 2
  store i64 %492, i64* %PC
  %493 = and i64 %490, 4294967295
  store i64 %493, i64* %RDI, align 8, !tbaa !2428
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  store i64 %495, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 176
  %498 = load i64, i64* %RAX
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 7
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %497 to i64*
  store i64 %498, i64* %501
  %502 = load i64, i64* %PC
  %503 = sub i64 %502, 513
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 5
  store i64 %507, i64* %PC
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %509 = load i64, i64* %508, align 8, !tbaa !2428
  %510 = add i64 %509, -8
  %511 = inttoptr i64 %510 to i64*
  store i64 %505, i64* %511
  store i64 %510, i64* %508, align 8, !tbaa !2428
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %503, i64* %512, align 8, !tbaa !2428
  %513 = load i64, i64* %PC
  %514 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %513, %struct.Memory* %486)
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 5
  store i64 %516, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %517 = load i32, i32* %ESI
  %518 = zext i32 %517 to i64
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 2
  store i64 %520, i64* %PC
  %521 = and i64 %518, 4294967295
  store i64 %521, i64* %RDI, align 8, !tbaa !2428
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 5
  store i64 %523, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 184
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 7
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %525 to i64*
  store i64 %526, i64* %529
  %530 = load i64, i64* %PC
  %531 = sub i64 %530, 537
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 5
  store i64 %535, i64* %PC
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %537 = load i64, i64* %536, align 8, !tbaa !2428
  %538 = add i64 %537, -8
  %539 = inttoptr i64 %538 to i64*
  store i64 %533, i64* %539
  store i64 %538, i64* %536, align 8, !tbaa !2428
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %531, i64* %540, align 8, !tbaa !2428
  %541 = load i64, i64* %PC
  %542 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %541, %struct.Memory* %514)
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 5
  store i64 %544, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %545 = load i32, i32* %ESI
  %546 = zext i32 %545 to i64
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 2
  store i64 %548, i64* %PC
  %549 = and i64 %546, 4294967295
  store i64 %549, i64* %RDI, align 8, !tbaa !2428
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 5
  store i64 %551, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 192
  %554 = load i64, i64* %RAX
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 7
  store i64 %556, i64* %PC
  %557 = inttoptr i64 %553 to i64*
  store i64 %554, i64* %557
  %558 = load i64, i64* %PC
  %559 = sub i64 %558, 561
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 5
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  store i64 %563, i64* %PC
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %565 = load i64, i64* %564, align 8, !tbaa !2428
  %566 = add i64 %565, -8
  %567 = inttoptr i64 %566 to i64*
  store i64 %561, i64* %567
  store i64 %566, i64* %564, align 8, !tbaa !2428
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %559, i64* %568, align 8, !tbaa !2428
  %569 = load i64, i64* %PC
  %570 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %569, %struct.Memory* %542)
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 5
  store i64 %572, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %573 = load i32, i32* %ESI
  %574 = zext i32 %573 to i64
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 2
  store i64 %576, i64* %PC
  %577 = and i64 %574, 4294967295
  store i64 %577, i64* %RDI, align 8, !tbaa !2428
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 5
  store i64 %579, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 200
  %582 = load i64, i64* %RAX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 7
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %581 to i64*
  store i64 %582, i64* %585
  %586 = load i64, i64* %PC
  %587 = sub i64 %586, 585
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 5
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 5
  store i64 %591, i64* %PC
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %593 = load i64, i64* %592, align 8, !tbaa !2428
  %594 = add i64 %593, -8
  %595 = inttoptr i64 %594 to i64*
  store i64 %589, i64* %595
  store i64 %594, i64* %592, align 8, !tbaa !2428
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %587, i64* %596, align 8, !tbaa !2428
  %597 = load i64, i64* %PC
  %598 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %597, %struct.Memory* %570)
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 5
  store i64 %600, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %601 = load i32, i32* %ESI
  %602 = zext i32 %601 to i64
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 2
  store i64 %604, i64* %PC
  %605 = and i64 %602, 4294967295
  store i64 %605, i64* %RDI, align 8, !tbaa !2428
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 5
  store i64 %607, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 208
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 7
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %609 to i64*
  store i64 %610, i64* %613
  %614 = load i64, i64* %PC
  %615 = sub i64 %614, 609
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 5
  store i64 %619, i64* %PC
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %621 = load i64, i64* %620, align 8, !tbaa !2428
  %622 = add i64 %621, -8
  %623 = inttoptr i64 %622 to i64*
  store i64 %617, i64* %623
  store i64 %622, i64* %620, align 8, !tbaa !2428
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %615, i64* %624, align 8, !tbaa !2428
  %625 = load i64, i64* %PC
  %626 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %625, %struct.Memory* %598)
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %629 = load i32, i32* %ESI
  %630 = zext i32 %629 to i64
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 2
  store i64 %632, i64* %PC
  %633 = and i64 %630, 4294967295
  store i64 %633, i64* %RDI, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 5
  store i64 %635, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 216
  %638 = load i64, i64* %RAX
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 7
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641
  %642 = load i64, i64* %PC
  %643 = sub i64 %642, 633
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 5
  store i64 %647, i64* %PC
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %649 = load i64, i64* %648, align 8, !tbaa !2428
  %650 = add i64 %649, -8
  %651 = inttoptr i64 %650 to i64*
  store i64 %645, i64* %651
  store i64 %650, i64* %648, align 8, !tbaa !2428
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %643, i64* %652, align 8, !tbaa !2428
  %653 = load i64, i64* %PC
  %654 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %653, %struct.Memory* %626)
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  store i64 65, i64* %RSI, align 8, !tbaa !2428
  %657 = load i32, i32* %ESI
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 2
  store i64 %660, i64* %PC
  %661 = and i64 %658, 4294967295
  store i64 %661, i64* %RDI, align 8, !tbaa !2428
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  store i64 8, i64* %RSI, align 8, !tbaa !2428
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 224
  %666 = load i64, i64* %RAX
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 7
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %665 to i64*
  store i64 %666, i64* %669
  %670 = load i64, i64* %PC
  %671 = sub i64 %670, 657
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 5
  store i64 %675, i64* %PC
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %677 = load i64, i64* %676, align 8, !tbaa !2428
  %678 = add i64 %677, -8
  %679 = inttoptr i64 %678 to i64*
  store i64 %673, i64* %679
  store i64 %678, i64* %676, align 8, !tbaa !2428
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %671, i64* %680, align 8, !tbaa !2428
  %681 = load i64, i64* %PC
  %682 = call %struct.Memory* @sub_4007c0_polybench_alloc_data_renamed_(%struct.State* %0, i64 %681, %struct.Memory* %654)
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 80
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 4
  store i64 %686, i64* %PC
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 88
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  store i64 %688, i64* %R8, align 8, !tbaa !2428
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 232
  %693 = load i64, i64* %RAX
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 7
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %692 to i64*
  store i64 %693, i64* %696
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 60
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 3
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to i32*
  %702 = load i32, i32* %701
  %703 = zext i32 %702 to i64
  store i64 %703, i64* %RDI, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 68
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 3
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i32*
  %709 = load i32, i32* %708
  %710 = zext i32 %709 to i64
  store i64 %710, i64* %RSI, align 8, !tbaa !2428
  %711 = load i64, i64* %RBP
  %712 = sub i64 %711, 64
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 3
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %712 to i32*
  %716 = load i32, i32* %715
  %717 = zext i32 %716 to i64
  store i64 %717, i64* %RDX, align 8, !tbaa !2428
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 96
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i64*
  %723 = load i64, i64* %722
  store i64 %723, i64* %R9, align 8, !tbaa !2428
  %724 = load i64, i64* %RBP
  %725 = sub i64 %724, 104
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = inttoptr i64 %725 to i64*
  %729 = load i64, i64* %728
  store i64 %729, i64* %RAX, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 136
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 7
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %731 to i64*
  %735 = load i64, i64* %734
  store i64 %735, i64* %R10, align 8, !tbaa !2428
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 144
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 7
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %R11, align 8, !tbaa !2428
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 152
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 7
  store i64 %745, i64* %PC
  %746 = inttoptr i64 %743 to i64*
  %747 = load i64, i64* %746
  store i64 %747, i64* %RBX, align 8, !tbaa !2428
  %748 = load i64, i64* %RBP
  %749 = sub i64 %748, 192
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 7
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %749 to i64*
  %753 = load i64, i64* %752
  store i64 %753, i64* %R14, align 8, !tbaa !2428
  %754 = load i64, i64* %RBP
  %755 = sub i64 %754, 200
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 7
  store i64 %757, i64* %PC
  %758 = inttoptr i64 %755 to i64*
  %759 = load i64, i64* %758
  store i64 %759, i64* %R15, align 8, !tbaa !2428
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 208
  %762 = load i64, i64* %PC
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC
  %764 = inttoptr i64 %761 to i64*
  %765 = load i64, i64* %764
  store i64 %765, i64* %R12, align 8, !tbaa !2428
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 216
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 7
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %767 to i64*
  %771 = load i64, i64* %770
  store i64 %771, i64* %R13, align 8, !tbaa !2428
  %772 = load i64, i64* %RBP
  %773 = sub i64 %772, 240
  %774 = load i64, i64* %RAX
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 7
  store i64 %776, i64* %PC
  %777 = inttoptr i64 %773 to i64*
  store i64 %774, i64* %777
  %778 = load i64, i64* %RBP
  %779 = sub i64 %778, 224
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 7
  store i64 %781, i64* %PC
  %782 = inttoptr i64 %779 to i64*
  %783 = load i64, i64* %782
  store i64 %783, i64* %RAX, align 8, !tbaa !2428
  %784 = load i64, i64* %RBP
  %785 = sub i64 %784, 248
  %786 = load i64, i64* %RAX
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 7
  store i64 %788, i64* %PC
  %789 = inttoptr i64 %785 to i64*
  store i64 %786, i64* %789
  %790 = load i64, i64* %RBP
  %791 = sub i64 %790, 232
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 7
  store i64 %793, i64* %PC
  %794 = inttoptr i64 %791 to i64*
  %795 = load i64, i64* %794
  store i64 %795, i64* %RAX, align 8, !tbaa !2428
  %796 = load i64, i64* %RBP
  %797 = sub i64 %796, 256
  %798 = load i64, i64* %RAX
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 7
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %797 to i64*
  store i64 %798, i64* %801
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 240
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 7
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %803 to i64*
  %807 = load i64, i64* %806
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = load i64, i64* %RSP
  %809 = load i64, i64* %RAX
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %808 to i64*
  store i64 %809, i64* %812
  %813 = load i64, i64* %RSP
  %814 = add i64 %813, 8
  %815 = load i64, i64* %R10
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %814 to i64*
  store i64 %815, i64* %818
  %819 = load i64, i64* %RSP
  %820 = add i64 %819, 16
  %821 = load i64, i64* %R11
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %820 to i64*
  store i64 %821, i64* %824
  %825 = load i64, i64* %RSP
  %826 = add i64 %825, 24
  %827 = load i64, i64* %RBX
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 5
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %826 to i64*
  store i64 %827, i64* %830
  %831 = load i64, i64* %RSP
  %832 = add i64 %831, 32
  %833 = load i64, i64* %R14
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 5
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %832 to i64*
  store i64 %833, i64* %836
  %837 = load i64, i64* %RSP
  %838 = add i64 %837, 40
  %839 = load i64, i64* %R15
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %838 to i64*
  store i64 %839, i64* %842
  %843 = load i64, i64* %RSP
  %844 = add i64 %843, 48
  %845 = load i64, i64* %R12
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %844 to i64*
  store i64 %845, i64* %848
  %849 = load i64, i64* %RSP
  %850 = add i64 %849, 56
  %851 = load i64, i64* %R13
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 5
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %850 to i64*
  store i64 %851, i64* %854
  %855 = load i64, i64* %RBP
  %856 = sub i64 %855, 248
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 7
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i64*
  %860 = load i64, i64* %859
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %861 = load i64, i64* %RSP
  %862 = add i64 %861, 64
  %863 = load i64, i64* %RAX
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 5
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %862 to i64*
  store i64 %863, i64* %866
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 256
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 7
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i64*
  %872 = load i64, i64* %871
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = load i64, i64* %RSP
  %874 = add i64 %873, 72
  %875 = load i64, i64* %RAX
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 5
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %874 to i64*
  store i64 %875, i64* %878
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 1152
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 5
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 5
  store i64 %884, i64* %PC
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %886 = load i64, i64* %885, align 8, !tbaa !2428
  %887 = add i64 %886, -8
  %888 = inttoptr i64 %887 to i64*
  store i64 %882, i64* %888
  store i64 %887, i64* %885, align 8, !tbaa !2428
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %880, i64* %889, align 8, !tbaa !2428
  %890 = load i64, i64* %PC
  %891 = call %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* %0, i64 %890, %struct.Memory* %682)
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 60
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  %897 = load i32, i32* %896
  %898 = zext i32 %897 to i64
  store i64 %898, i64* %RDI, align 8, !tbaa !2428
  %899 = load i64, i64* %RBP
  %900 = sub i64 %899, 68
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = inttoptr i64 %900 to i32*
  %904 = load i32, i32* %903
  %905 = zext i32 %904 to i64
  store i64 %905, i64* %RSI, align 8, !tbaa !2428
  %906 = load i64, i64* %RBP
  %907 = sub i64 %906, 64
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 3
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  %911 = load i32, i32* %910
  %912 = zext i32 %911 to i64
  store i64 %912, i64* %RDX, align 8, !tbaa !2428
  %913 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %914 = load i64, i64* %RBP
  %915 = sub i64 %914, 80
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 5
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to double*
  %919 = load double, double* %918
  %920 = bitcast i8* %913 to double*
  store double %919, double* %920, align 1, !tbaa !2452
  %921 = getelementptr inbounds i8, i8* %913, i64 8
  %922 = bitcast i8* %921 to double*
  store double 0.000000e+00, double* %922, align 1, !tbaa !2452
  %923 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %924 = load i64, i64* %RBP
  %925 = sub i64 %924, 88
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC
  %928 = inttoptr i64 %925 to double*
  %929 = load double, double* %928
  %930 = bitcast i8* %923 to double*
  store double %929, double* %930, align 1, !tbaa !2452
  %931 = getelementptr inbounds i8, i8* %923, i64 8
  %932 = bitcast i8* %931 to double*
  store double 0.000000e+00, double* %932, align 1, !tbaa !2452
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 96
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i64*
  %938 = load i64, i64* %937
  store i64 %938, i64* %RCX, align 8, !tbaa !2428
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 104
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  store i64 %944, i64* %R8, align 8, !tbaa !2428
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 112
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 4
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i64*
  %950 = load i64, i64* %949
  store i64 %950, i64* %R9, align 8, !tbaa !2428
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 120
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 128
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 4
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961
  store i64 %962, i64* %R10, align 8, !tbaa !2428
  %963 = load i64, i64* %RBP
  %964 = sub i64 %963, 136
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 7
  store i64 %966, i64* %PC
  %967 = inttoptr i64 %964 to i64*
  %968 = load i64, i64* %967
  store i64 %968, i64* %R11, align 8, !tbaa !2428
  %969 = load i64, i64* %RBP
  %970 = sub i64 %969, 144
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 7
  store i64 %972, i64* %PC
  %973 = inttoptr i64 %970 to i64*
  %974 = load i64, i64* %973
  store i64 %974, i64* %RBX, align 8, !tbaa !2428
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 152
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 7
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i64*
  %980 = load i64, i64* %979
  store i64 %980, i64* %R14, align 8, !tbaa !2428
  %981 = load i64, i64* %RBP
  %982 = sub i64 %981, 192
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 7
  store i64 %984, i64* %PC
  %985 = inttoptr i64 %982 to i64*
  %986 = load i64, i64* %985
  store i64 %986, i64* %R15, align 8, !tbaa !2428
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 200
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 7
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  store i64 %992, i64* %R12, align 8, !tbaa !2428
  %993 = load i64, i64* %RBP
  %994 = sub i64 %993, 208
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 7
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %994 to i64*
  %998 = load i64, i64* %997
  store i64 %998, i64* %R13, align 8, !tbaa !2428
  %999 = load i64, i64* %RBP
  %1000 = sub i64 %999, 264
  %1001 = load i64, i64* %RAX
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 7
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1000 to i64*
  store i64 %1001, i64* %1004
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 216
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 7
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %RAX, align 8, !tbaa !2428
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 272
  %1013 = load i64, i64* %RAX
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 7
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1012 to i64*
  store i64 %1013, i64* %1016
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 224
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 7
  store i64 %1020, i64* %PC
  %1021 = inttoptr i64 %1018 to i64*
  %1022 = load i64, i64* %1021
  store i64 %1022, i64* %RAX, align 8, !tbaa !2428
  %1023 = load i64, i64* %RBP
  %1024 = sub i64 %1023, 280
  %1025 = load i64, i64* %RAX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 7
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1024 to i64*
  store i64 %1025, i64* %1028
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 232
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 7
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 288
  %1037 = load i64, i64* %RAX
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 7
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1036 to i64*
  store i64 %1037, i64* %1040
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 264
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 7
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RSP
  %1048 = load i64, i64* %RAX
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 4
  store i64 %1050, i64* %PC
  %1051 = inttoptr i64 %1047 to i64*
  store i64 %1048, i64* %1051
  %1052 = load i64, i64* %RSP
  %1053 = add i64 %1052, 8
  %1054 = load i64, i64* %R10
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 5
  store i64 %1056, i64* %PC
  %1057 = inttoptr i64 %1053 to i64*
  store i64 %1054, i64* %1057
  %1058 = load i64, i64* %RSP
  %1059 = add i64 %1058, 16
  %1060 = load i64, i64* %R11
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 5
  store i64 %1062, i64* %PC
  %1063 = inttoptr i64 %1059 to i64*
  store i64 %1060, i64* %1063
  %1064 = load i64, i64* %RSP
  %1065 = add i64 %1064, 24
  %1066 = load i64, i64* %RBX
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 5
  store i64 %1068, i64* %PC
  %1069 = inttoptr i64 %1065 to i64*
  store i64 %1066, i64* %1069
  %1070 = load i64, i64* %RSP
  %1071 = add i64 %1070, 32
  %1072 = load i64, i64* %R14
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 5
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1071 to i64*
  store i64 %1072, i64* %1075
  %1076 = load i64, i64* %RSP
  %1077 = add i64 %1076, 40
  %1078 = load i64, i64* %R15
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1077 to i64*
  store i64 %1078, i64* %1081
  %1082 = load i64, i64* %RSP
  %1083 = add i64 %1082, 48
  %1084 = load i64, i64* %R12
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 5
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1083 to i64*
  store i64 %1084, i64* %1087
  %1088 = load i64, i64* %RSP
  %1089 = add i64 %1088, 56
  %1090 = load i64, i64* %R13
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  store i64 %1092, i64* %PC
  %1093 = inttoptr i64 %1089 to i64*
  store i64 %1090, i64* %1093
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 272
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 7
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1095 to i64*
  %1099 = load i64, i64* %1098
  store i64 %1099, i64* %RAX, align 8, !tbaa !2428
  %1100 = load i64, i64* %RSP
  %1101 = add i64 %1100, 64
  %1102 = load i64, i64* %RAX
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 5
  store i64 %1104, i64* %PC
  %1105 = inttoptr i64 %1101 to i64*
  store i64 %1102, i64* %1105
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 280
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 7
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %RAX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RSP
  %1113 = add i64 %1112, 72
  %1114 = load i64, i64* %RAX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 5
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1113 to i64*
  store i64 %1114, i64* %1117
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 288
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 7
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1119 to i64*
  %1123 = load i64, i64* %1122
  store i64 %1123, i64* %RAX, align 8, !tbaa !2428
  %1124 = load i64, i64* %RSP
  %1125 = add i64 %1124, 80
  %1126 = load i64, i64* %RAX
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1125 to i64*
  store i64 %1126, i64* %1129
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 2023
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 5
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 5
  store i64 %1135, i64* %PC
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1137 = load i64, i64* %1136, align 8, !tbaa !2428
  %1138 = add i64 %1137, -8
  %1139 = inttoptr i64 %1138 to i64*
  store i64 %1133, i64* %1139
  store i64 %1138, i64* %1136, align 8, !tbaa !2428
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1131, i64* %1140, align 8, !tbaa !2428
  %1141 = load i64, i64* %PC
  %1142 = call %struct.Memory* @sub_4013d0_kernel_fdtd_apml_renamed_(%struct.State* %0, i64 %1141, %struct.Memory* %891)
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 80
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 4
  store i64 %1146, i64* %PC
  store i64 %1144, i64* %RCX, align 8, !tbaa !2428
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 88
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC
  store i64 %1148, i64* %R8, align 8, !tbaa !2428
  %1151 = load i64, i64* %RBP
  %1152 = sub i64 %1151, 60
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 3
  store i64 %1154, i64* %PC
  %1155 = inttoptr i64 %1152 to i32*
  %1156 = load i32, i32* %1155
  %1157 = zext i32 %1156 to i64
  store i64 %1157, i64* %RDI, align 8, !tbaa !2428
  %1158 = load i64, i64* %RBP
  %1159 = sub i64 %1158, 68
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 3
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i32*
  %1163 = load i32, i32* %1162
  %1164 = zext i32 %1163 to i64
  store i64 %1164, i64* %RSI, align 8, !tbaa !2428
  %1165 = load i64, i64* %RBP
  %1166 = sub i64 %1165, 64
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 3
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1166 to i32*
  %1170 = load i32, i32* %1169
  %1171 = zext i32 %1170 to i64
  store i64 %1171, i64* %RDX, align 8, !tbaa !2428
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 96
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 4
  store i64 %1175, i64* %PC
  %1176 = inttoptr i64 %1173 to i64*
  %1177 = load i64, i64* %1176
  store i64 %1177, i64* %R9, align 8, !tbaa !2428
  %1178 = load i64, i64* %RBP
  %1179 = sub i64 %1178, 104
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 4
  store i64 %1181, i64* %PC
  %1182 = inttoptr i64 %1179 to i64*
  %1183 = load i64, i64* %1182
  store i64 %1183, i64* %RAX, align 8, !tbaa !2428
  %1184 = load i64, i64* %RBP
  %1185 = sub i64 %1184, 168
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 7
  store i64 %1187, i64* %PC
  %1188 = inttoptr i64 %1185 to i64*
  %1189 = load i64, i64* %1188
  store i64 %1189, i64* %R10, align 8, !tbaa !2428
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 176
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 7
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194
  store i64 %1195, i64* %R11, align 8, !tbaa !2428
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 184
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 7
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RBX, align 8, !tbaa !2428
  %1202 = load i64, i64* %RBP
  %1203 = sub i64 %1202, 192
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 7
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to i64*
  %1207 = load i64, i64* %1206
  store i64 %1207, i64* %R14, align 8, !tbaa !2428
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 200
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 7
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i64*
  %1213 = load i64, i64* %1212
  store i64 %1213, i64* %R15, align 8, !tbaa !2428
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 208
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 7
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i64*
  %1219 = load i64, i64* %1218
  store i64 %1219, i64* %R12, align 8, !tbaa !2428
  %1220 = load i64, i64* %RBP
  %1221 = sub i64 %1220, 216
  %1222 = load i64, i64* %PC
  %1223 = add i64 %1222, 7
  store i64 %1223, i64* %PC
  %1224 = inttoptr i64 %1221 to i64*
  %1225 = load i64, i64* %1224
  store i64 %1225, i64* %R13, align 8, !tbaa !2428
  %1226 = load i64, i64* %RBP
  %1227 = sub i64 %1226, 296
  %1228 = load i64, i64* %RAX
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 7
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1227 to i64*
  store i64 %1228, i64* %1231
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 224
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 7
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i64*
  %1237 = load i64, i64* %1236
  store i64 %1237, i64* %RAX, align 8, !tbaa !2428
  %1238 = load i64, i64* %RBP
  %1239 = sub i64 %1238, 304
  %1240 = load i64, i64* %RAX
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 7
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1239 to i64*
  store i64 %1240, i64* %1243
  %1244 = load i64, i64* %RBP
  %1245 = sub i64 %1244, 232
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 7
  store i64 %1247, i64* %PC
  %1248 = inttoptr i64 %1245 to i64*
  %1249 = load i64, i64* %1248
  store i64 %1249, i64* %RAX, align 8, !tbaa !2428
  %1250 = load i64, i64* %RBP
  %1251 = sub i64 %1250, 312
  %1252 = load i64, i64* %RAX
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 7
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1251 to i64*
  store i64 %1252, i64* %1255
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 296
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 7
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i64*
  %1261 = load i64, i64* %1260
  store i64 %1261, i64* %RAX, align 8, !tbaa !2428
  %1262 = load i64, i64* %RSP
  %1263 = load i64, i64* %RAX
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 4
  store i64 %1265, i64* %PC
  %1266 = inttoptr i64 %1262 to i64*
  store i64 %1263, i64* %1266
  %1267 = load i64, i64* %RSP
  %1268 = add i64 %1267, 8
  %1269 = load i64, i64* %R10
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = inttoptr i64 %1268 to i64*
  store i64 %1269, i64* %1272
  %1273 = load i64, i64* %RSP
  %1274 = add i64 %1273, 16
  %1275 = load i64, i64* %R11
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 5
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1274 to i64*
  store i64 %1275, i64* %1278
  %1279 = load i64, i64* %RSP
  %1280 = add i64 %1279, 24
  %1281 = load i64, i64* %RBX
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 5
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1280 to i64*
  store i64 %1281, i64* %1284
  %1285 = load i64, i64* %RSP
  %1286 = add i64 %1285, 32
  %1287 = load i64, i64* %R14
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 5
  store i64 %1289, i64* %PC
  %1290 = inttoptr i64 %1286 to i64*
  store i64 %1287, i64* %1290
  %1291 = load i64, i64* %RSP
  %1292 = add i64 %1291, 40
  %1293 = load i64, i64* %R15
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 5
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1292 to i64*
  store i64 %1293, i64* %1296
  %1297 = load i64, i64* %RSP
  %1298 = add i64 %1297, 48
  %1299 = load i64, i64* %R12
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1298 to i64*
  store i64 %1299, i64* %1302
  %1303 = load i64, i64* %RSP
  %1304 = add i64 %1303, 56
  %1305 = load i64, i64* %R13
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 5
  store i64 %1307, i64* %PC
  %1308 = inttoptr i64 %1304 to i64*
  store i64 %1305, i64* %1308
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 304
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 7
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = load i64, i64* %RSP
  %1316 = add i64 %1315, 64
  %1317 = load i64, i64* %RAX
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 5
  store i64 %1319, i64* %PC
  %1320 = inttoptr i64 %1316 to i64*
  store i64 %1317, i64* %1320
  %1321 = load i64, i64* %RBP
  %1322 = sub i64 %1321, 312
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 7
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1322 to i64*
  %1326 = load i64, i64* %1325
  store i64 %1326, i64* %RAX, align 8, !tbaa !2428
  %1327 = load i64, i64* %RSP
  %1328 = add i64 %1327, 72
  %1329 = load i64, i64* %RAX
  %1330 = load i64, i64* %PC
  %1331 = add i64 %1330, 5
  store i64 %1331, i64* %PC
  %1332 = inttoptr i64 %1328 to i64*
  store i64 %1329, i64* %1332
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 751
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 5
  store i64 %1338, i64* %PC
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1340 = load i64, i64* %1339, align 8, !tbaa !2428
  %1341 = add i64 %1340, -8
  %1342 = inttoptr i64 %1341 to i64*
  store i64 %1336, i64* %1342
  store i64 %1341, i64* %1339, align 8, !tbaa !2428
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1334, i64* %1343, align 8, !tbaa !2428
  %1344 = load i64, i64* %PC
  %1345 = call %struct.Memory* @sub_400f90_init_array_renamed_(%struct.State* %0, i64 %1344, %struct.Memory* %1142)
  %1346 = load i64, i64* %RBP
  %1347 = sub i64 %1346, 60
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 3
  store i64 %1349, i64* %PC
  %1350 = inttoptr i64 %1347 to i32*
  %1351 = load i32, i32* %1350
  %1352 = zext i32 %1351 to i64
  store i64 %1352, i64* %RDI, align 8, !tbaa !2428
  %1353 = load i64, i64* %RBP
  %1354 = sub i64 %1353, 68
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 3
  store i64 %1356, i64* %PC
  %1357 = inttoptr i64 %1354 to i32*
  %1358 = load i32, i32* %1357
  %1359 = zext i32 %1358 to i64
  store i64 %1359, i64* %RSI, align 8, !tbaa !2428
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 64
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 3
  store i64 %1363, i64* %PC
  %1364 = inttoptr i64 %1361 to i32*
  %1365 = load i32, i32* %1364
  %1366 = zext i32 %1365 to i64
  store i64 %1366, i64* %RDX, align 8, !tbaa !2428
  %1367 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1368 = load i64, i64* %RBP
  %1369 = sub i64 %1368, 80
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 5
  store i64 %1371, i64* %PC
  %1372 = inttoptr i64 %1369 to double*
  %1373 = load double, double* %1372
  %1374 = bitcast i8* %1367 to double*
  store double %1373, double* %1374, align 1, !tbaa !2452
  %1375 = getelementptr inbounds i8, i8* %1367, i64 8
  %1376 = bitcast i8* %1375 to double*
  store double 0.000000e+00, double* %1376, align 1, !tbaa !2452
  %1377 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 88
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 5
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to double*
  %1383 = load double, double* %1382
  %1384 = bitcast i8* %1377 to double*
  store double %1383, double* %1384, align 1, !tbaa !2452
  %1385 = getelementptr inbounds i8, i8* %1377, i64 8
  %1386 = bitcast i8* %1385 to double*
  store double 0.000000e+00, double* %1386, align 1, !tbaa !2452
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 96
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 4
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i64*
  %1392 = load i64, i64* %1391
  store i64 %1392, i64* %RCX, align 8, !tbaa !2428
  %1393 = load i64, i64* %RBP
  %1394 = sub i64 %1393, 104
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 4
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %R8, align 8, !tbaa !2428
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 112
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 4
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to i64*
  %1404 = load i64, i64* %1403
  store i64 %1404, i64* %R9, align 8, !tbaa !2428
  %1405 = load i64, i64* %RBP
  %1406 = sub i64 %1405, 120
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %PC
  %1409 = inttoptr i64 %1406 to i64*
  %1410 = load i64, i64* %1409
  store i64 %1410, i64* %RAX, align 8, !tbaa !2428
  %1411 = load i64, i64* %RBP
  %1412 = sub i64 %1411, 160
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 7
  store i64 %1414, i64* %PC
  %1415 = inttoptr i64 %1412 to i64*
  %1416 = load i64, i64* %1415
  store i64 %1416, i64* %R10, align 8, !tbaa !2428
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 168
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 7
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %R11, align 8, !tbaa !2428
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 176
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 7
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i64*
  %1428 = load i64, i64* %1427
  store i64 %1428, i64* %RBX, align 8, !tbaa !2428
  %1429 = load i64, i64* %RBP
  %1430 = sub i64 %1429, 184
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 7
  store i64 %1432, i64* %PC
  %1433 = inttoptr i64 %1430 to i64*
  %1434 = load i64, i64* %1433
  store i64 %1434, i64* %R14, align 8, !tbaa !2428
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 192
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 7
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %R15, align 8, !tbaa !2428
  %1441 = load i64, i64* %RBP
  %1442 = sub i64 %1441, 200
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 7
  store i64 %1444, i64* %PC
  %1445 = inttoptr i64 %1442 to i64*
  %1446 = load i64, i64* %1445
  store i64 %1446, i64* %R12, align 8, !tbaa !2428
  %1447 = load i64, i64* %RBP
  %1448 = sub i64 %1447, 208
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 7
  store i64 %1450, i64* %PC
  %1451 = inttoptr i64 %1448 to i64*
  %1452 = load i64, i64* %1451
  store i64 %1452, i64* %R13, align 8, !tbaa !2428
  %1453 = load i64, i64* %RBP
  %1454 = sub i64 %1453, 320
  %1455 = load i64, i64* %RAX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 7
  store i64 %1457, i64* %PC
  %1458 = inttoptr i64 %1454 to i64*
  store i64 %1455, i64* %1458
  %1459 = load i64, i64* %RBP
  %1460 = sub i64 %1459, 216
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 7
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %RAX, align 8, !tbaa !2428
  %1465 = load i64, i64* %RBP
  %1466 = sub i64 %1465, 328
  %1467 = load i64, i64* %RAX
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 7
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1466 to i64*
  store i64 %1467, i64* %1470
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 224
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 7
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i64*
  %1476 = load i64, i64* %1475
  store i64 %1476, i64* %RAX, align 8, !tbaa !2428
  %1477 = load i64, i64* %RBP
  %1478 = sub i64 %1477, 336
  %1479 = load i64, i64* %RAX
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 7
  store i64 %1481, i64* %PC
  %1482 = inttoptr i64 %1478 to i64*
  store i64 %1479, i64* %1482
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 232
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 7
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to i64*
  %1488 = load i64, i64* %1487
  store i64 %1488, i64* %RAX, align 8, !tbaa !2428
  %1489 = load i64, i64* %RBP
  %1490 = sub i64 %1489, 344
  %1491 = load i64, i64* %RAX
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 7
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1490 to i64*
  store i64 %1491, i64* %1494
  %1495 = load i64, i64* %RBP
  %1496 = sub i64 %1495, 320
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 7
  store i64 %1498, i64* %PC
  %1499 = inttoptr i64 %1496 to i64*
  %1500 = load i64, i64* %1499
  store i64 %1500, i64* %RAX, align 8, !tbaa !2428
  %1501 = load i64, i64* %RSP
  %1502 = load i64, i64* %RAX
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 4
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1501 to i64*
  store i64 %1502, i64* %1505
  %1506 = load i64, i64* %RSP
  %1507 = add i64 %1506, 8
  %1508 = load i64, i64* %R10
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 5
  store i64 %1510, i64* %PC
  %1511 = inttoptr i64 %1507 to i64*
  store i64 %1508, i64* %1511
  %1512 = load i64, i64* %RSP
  %1513 = add i64 %1512, 16
  %1514 = load i64, i64* %R11
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 5
  store i64 %1516, i64* %PC
  %1517 = inttoptr i64 %1513 to i64*
  store i64 %1514, i64* %1517
  %1518 = load i64, i64* %RSP
  %1519 = add i64 %1518, 24
  %1520 = load i64, i64* %RBX
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 5
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1519 to i64*
  store i64 %1520, i64* %1523
  %1524 = load i64, i64* %RSP
  %1525 = add i64 %1524, 32
  %1526 = load i64, i64* %R14
  %1527 = load i64, i64* %PC
  %1528 = add i64 %1527, 5
  store i64 %1528, i64* %PC
  %1529 = inttoptr i64 %1525 to i64*
  store i64 %1526, i64* %1529
  %1530 = load i64, i64* %RSP
  %1531 = add i64 %1530, 40
  %1532 = load i64, i64* %R15
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 5
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1531 to i64*
  store i64 %1532, i64* %1535
  %1536 = load i64, i64* %RSP
  %1537 = add i64 %1536, 48
  %1538 = load i64, i64* %R12
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 5
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1537 to i64*
  store i64 %1538, i64* %1541
  %1542 = load i64, i64* %RSP
  %1543 = add i64 %1542, 56
  %1544 = load i64, i64* %R13
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 5
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1543 to i64*
  store i64 %1544, i64* %1547
  %1548 = load i64, i64* %RBP
  %1549 = sub i64 %1548, 328
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 7
  store i64 %1551, i64* %PC
  %1552 = inttoptr i64 %1549 to i64*
  %1553 = load i64, i64* %1552
  store i64 %1553, i64* %RAX, align 8, !tbaa !2428
  %1554 = load i64, i64* %RSP
  %1555 = add i64 %1554, 64
  %1556 = load i64, i64* %RAX
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 5
  store i64 %1558, i64* %PC
  %1559 = inttoptr i64 %1555 to i64*
  store i64 %1556, i64* %1559
  %1560 = load i64, i64* %RBP
  %1561 = sub i64 %1560, 336
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 7
  store i64 %1563, i64* %PC
  %1564 = inttoptr i64 %1561 to i64*
  %1565 = load i64, i64* %1564
  store i64 %1565, i64* %RAX, align 8, !tbaa !2428
  %1566 = load i64, i64* %RSP
  %1567 = add i64 %1566, 72
  %1568 = load i64, i64* %RAX
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1567 to i64*
  store i64 %1568, i64* %1571
  %1572 = load i64, i64* %RBP
  %1573 = sub i64 %1572, 344
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 7
  store i64 %1575, i64* %PC
  %1576 = inttoptr i64 %1573 to i64*
  %1577 = load i64, i64* %1576
  store i64 %1577, i64* %RAX, align 8, !tbaa !2428
  %1578 = load i64, i64* %RSP
  %1579 = add i64 %1578, 80
  %1580 = load i64, i64* %RAX
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 5
  store i64 %1582, i64* %PC
  %1583 = inttoptr i64 %1579 to i64*
  store i64 %1580, i64* %1583
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 4499
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 5
  %1588 = load i64, i64* %PC
  %1589 = add i64 %1588, 5
  store i64 %1589, i64* %PC
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1591 = load i64, i64* %1590, align 8, !tbaa !2428
  %1592 = add i64 %1591, -8
  %1593 = inttoptr i64 %1592 to i64*
  store i64 %1587, i64* %1593
  store i64 %1592, i64* %1590, align 8, !tbaa !2428
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1585, i64* %1594, align 8, !tbaa !2428
  %1595 = load i64, i64* %PC
  %1596 = call %struct.Memory* @sub_401f10_kernel_fdtd_apml_StrictFP_renamed_(%struct.State* %0, i64 %1595, %struct.Memory* %1345)
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 60
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDI, align 8, !tbaa !2428
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 68
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  %1609 = load i32, i32* %1608
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RSI, align 8, !tbaa !2428
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 64
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 3
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i32*
  %1616 = load i32, i32* %1615
  %1617 = zext i32 %1616 to i64
  store i64 %1617, i64* %RDX, align 8, !tbaa !2428
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 128
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to i64*
  %1623 = load i64, i64* %1622
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 160
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 7
  store i64 %1627, i64* %PC
  %1628 = inttoptr i64 %1625 to i64*
  %1629 = load i64, i64* %1628
  store i64 %1629, i64* %R8, align 8, !tbaa !2428
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 7354
  %1632 = load i64, i64* %PC
  %1633 = add i64 %1632, 5
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 5
  store i64 %1635, i64* %PC
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1637 = load i64, i64* %1636, align 8, !tbaa !2428
  %1638 = add i64 %1637, -8
  %1639 = inttoptr i64 %1638 to i64*
  store i64 %1633, i64* %1639
  store i64 %1638, i64* %1636, align 8, !tbaa !2428
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1631, i64* %1640, align 8, !tbaa !2428
  %1641 = load i64, i64* %PC
  %1642 = call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* %0, i64 %1641, %struct.Memory* %1596)
  %1643 = load i32, i32* %EAX
  %1644 = zext i32 %1643 to i64
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 3
  store i64 %1646, i64* %PC
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1647, align 1, !tbaa !2432
  %1648 = and i32 %1643, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #16
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1654, align 1, !tbaa !2447
  %1655 = icmp eq i32 %1643, 0
  %1656 = zext i1 %1655 to i8
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1656, i8* %1657, align 1, !tbaa !2448
  %1658 = lshr i32 %1643, 31
  %1659 = trunc i32 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1659, i8* %1660, align 1, !tbaa !2449
  %1661 = lshr i32 %1643, 31
  %1662 = xor i32 %1658, %1661
  %1663 = add nuw nsw i32 %1662, %1661
  %1664 = icmp eq i32 %1663, 2
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1665, i8* %1666, align 1, !tbaa !2450
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 18
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 6
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 6
  store i64 %1672, i64* %PC
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1674 = load i8, i8* %1673, align 1, !tbaa !2448
  %1675 = icmp eq i8 %1674, 0
  %1676 = zext i1 %1675 to i8
  store i8 %1676, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1678 = select i1 %1675, i64 %1668, i64 %1670
  store i64 %1678, i64* %1677, align 8, !tbaa !2428
  %1679 = load i8, i8* %BRANCH_TAKEN
  %1680 = icmp eq i8 %1679, 1
  %1681 = load i64, i64* %RBP
  br i1 %1680, label %block_400db0, label %block_400da4

block_400e12:                                     ; preds = %block_400de1
  %1682 = sub i64 %2514, 60
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1682 to i32*
  %1686 = load i32, i32* %1685
  %1687 = zext i32 %1686 to i64
  store i64 %1687, i64* %RDI, align 8, !tbaa !2428
  %1688 = load i64, i64* %RBP
  %1689 = sub i64 %1688, 68
  %1690 = load i64, i64* %PC
  %1691 = add i64 %1690, 3
  store i64 %1691, i64* %PC
  %1692 = inttoptr i64 %1689 to i32*
  %1693 = load i32, i32* %1692
  %1694 = zext i32 %1693 to i64
  store i64 %1694, i64* %RSI, align 8, !tbaa !2428
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 64
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RDX, align 8, !tbaa !2428
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 152
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 7
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i64*
  %1707 = load i64, i64* %1706
  store i64 %1707, i64* %RCX, align 8, !tbaa !2428
  %1708 = load i64, i64* %RBP
  %1709 = sub i64 %1708, 184
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 7
  store i64 %1711, i64* %PC
  %1712 = inttoptr i64 %1709 to i64*
  %1713 = load i64, i64* %1712
  store i64 %1713, i64* %R8, align 8, !tbaa !2428
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 7207
  %1716 = load i64, i64* %PC
  %1717 = add i64 %1716, 5
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  store i64 %1719, i64* %PC
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1721 = load i64, i64* %1720, align 8, !tbaa !2428
  %1722 = add i64 %1721, -8
  %1723 = inttoptr i64 %1722 to i64*
  store i64 %1717, i64* %1723
  store i64 %1722, i64* %1720, align 8, !tbaa !2428
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1715, i64* %1724, align 8, !tbaa !2428
  %1725 = load i64, i64* %PC
  %1726 = call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* %0, i64 %1725, %struct.Memory* %2475)
  %1727 = load i32, i32* %EAX
  %1728 = zext i32 %1727 to i64
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 3
  store i64 %1730, i64* %PC
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1731, align 1, !tbaa !2432
  %1732 = and i32 %1727, 255
  %1733 = call i32 @llvm.ctpop.i32(i32 %1732) #16
  %1734 = trunc i32 %1733 to i8
  %1735 = and i8 %1734, 1
  %1736 = xor i8 %1735, 1
  %1737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1736, i8* %1737, align 1, !tbaa !2446
  %1738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1738, align 1, !tbaa !2447
  %1739 = icmp eq i32 %1727, 0
  %1740 = zext i1 %1739 to i8
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1740, i8* %1741, align 1, !tbaa !2448
  %1742 = lshr i32 %1727, 31
  %1743 = trunc i32 %1742 to i8
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1743, i8* %1744, align 1, !tbaa !2449
  %1745 = lshr i32 %1727, 31
  %1746 = xor i32 %1742, %1745
  %1747 = add nuw nsw i32 %1746, %1745
  %1748 = icmp eq i32 %1747, 2
  %1749 = zext i1 %1748 to i8
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1749, i8* %1750, align 1, !tbaa !2450
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 18
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 6
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 6
  store i64 %1756, i64* %PC
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1758 = load i8, i8* %1757, align 1, !tbaa !2448
  %1759 = icmp eq i8 %1758, 0
  %1760 = zext i1 %1759 to i8
  store i8 %1760, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1762 = select i1 %1759, i64 %1752, i64 %1754
  store i64 %1762, i64* %1761, align 8, !tbaa !2428
  %1763 = load i8, i8* %BRANCH_TAKEN
  %1764 = icmp eq i8 %1763, 1
  %1765 = load i64, i64* %RBP
  br i1 %1764, label %block_400e43, label %block_400e37

block_400f77:                                     ; preds = %block_400dd5, %block_400e43, %block_400da4, %block_400e06, %block_400e37
  %MEMORY.0 = phi %struct.Memory* [ %2425, %block_400e43 ], [ %1726, %block_400e37 ], [ %2475, %block_400e06 ], [ %1901, %block_400dd5 ], [ %1642, %block_400da4 ]
  %1766 = load i64, i64* %RBP
  %1767 = sub i64 %1766, 44
  %1768 = load i64, i64* %PC
  %1769 = add i64 %1768, 3
  store i64 %1769, i64* %PC
  %1770 = inttoptr i64 %1767 to i32*
  %1771 = load i32, i32* %1770
  %1772 = zext i32 %1771 to i64
  store i64 %1772, i64* %RAX, align 8, !tbaa !2428
  %1773 = load i64, i64* %RSP
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 7
  store i64 %1775, i64* %PC
  %1776 = add i64 392, %1773
  store i64 %1776, i64* %RSP, align 8, !tbaa !2428
  %1777 = icmp ult i64 %1776, %1773
  %1778 = icmp ult i64 %1776, 392
  %1779 = or i1 %1777, %1778
  %1780 = zext i1 %1779 to i8
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1780, i8* %1781, align 1, !tbaa !2432
  %1782 = trunc i64 %1776 to i32
  %1783 = and i32 %1782, 255
  %1784 = call i32 @llvm.ctpop.i32(i32 %1783) #16
  %1785 = trunc i32 %1784 to i8
  %1786 = and i8 %1785, 1
  %1787 = xor i8 %1786, 1
  %1788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1787, i8* %1788, align 1, !tbaa !2446
  %1789 = xor i64 392, %1773
  %1790 = xor i64 %1789, %1776
  %1791 = lshr i64 %1790, 4
  %1792 = trunc i64 %1791 to i8
  %1793 = and i8 %1792, 1
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1793, i8* %1794, align 1, !tbaa !2447
  %1795 = icmp eq i64 %1776, 0
  %1796 = zext i1 %1795 to i8
  %1797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1796, i8* %1797, align 1, !tbaa !2448
  %1798 = lshr i64 %1776, 63
  %1799 = trunc i64 %1798 to i8
  %1800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1799, i8* %1800, align 1, !tbaa !2449
  %1801 = lshr i64 %1773, 63
  %1802 = xor i64 %1798, %1801
  %1803 = add nuw nsw i64 %1802, %1798
  %1804 = icmp eq i64 %1803, 2
  %1805 = zext i1 %1804 to i8
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1805, i8* %1806, align 1, !tbaa !2450
  %1807 = load i64, i64* %PC
  %1808 = add i64 %1807, 1
  store i64 %1808, i64* %PC
  %1809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1810 = load i64, i64* %1809, align 8, !tbaa !2428
  %1811 = add i64 %1810, 8
  %1812 = inttoptr i64 %1810 to i64*
  %1813 = load i64, i64* %1812
  store i64 %1813, i64* %RBX, align 8, !tbaa !2428
  store i64 %1811, i64* %1809, align 8, !tbaa !2428
  %1814 = load i64, i64* %PC
  %1815 = add i64 %1814, 2
  store i64 %1815, i64* %PC
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1817 = load i64, i64* %1816, align 8, !tbaa !2428
  %1818 = add i64 %1817, 8
  %1819 = inttoptr i64 %1817 to i64*
  %1820 = load i64, i64* %1819
  store i64 %1820, i64* %R12, align 8, !tbaa !2428
  store i64 %1818, i64* %1816, align 8, !tbaa !2428
  %1821 = load i64, i64* %PC
  %1822 = add i64 %1821, 2
  store i64 %1822, i64* %PC
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1824 = load i64, i64* %1823, align 8, !tbaa !2428
  %1825 = add i64 %1824, 8
  %1826 = inttoptr i64 %1824 to i64*
  %1827 = load i64, i64* %1826
  store i64 %1827, i64* %R13, align 8, !tbaa !2428
  store i64 %1825, i64* %1823, align 8, !tbaa !2428
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 2
  store i64 %1829, i64* %PC
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1831 = load i64, i64* %1830, align 8, !tbaa !2428
  %1832 = add i64 %1831, 8
  %1833 = inttoptr i64 %1831 to i64*
  %1834 = load i64, i64* %1833
  store i64 %1834, i64* %R14, align 8, !tbaa !2428
  store i64 %1832, i64* %1830, align 8, !tbaa !2428
  %1835 = load i64, i64* %PC
  %1836 = add i64 %1835, 2
  store i64 %1836, i64* %PC
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1838 = load i64, i64* %1837, align 8, !tbaa !2428
  %1839 = add i64 %1838, 8
  %1840 = inttoptr i64 %1838 to i64*
  %1841 = load i64, i64* %1840
  store i64 %1841, i64* %R15, align 8, !tbaa !2428
  store i64 %1839, i64* %1837, align 8, !tbaa !2428
  %1842 = load i64, i64* %PC
  %1843 = add i64 %1842, 1
  store i64 %1843, i64* %PC
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1845 = load i64, i64* %1844, align 8, !tbaa !2428
  %1846 = add i64 %1845, 8
  %1847 = inttoptr i64 %1845 to i64*
  %1848 = load i64, i64* %1847
  store i64 %1848, i64* %RBP, align 8, !tbaa !2428
  store i64 %1846, i64* %1844, align 8, !tbaa !2428
  %1849 = load i64, i64* %PC
  %1850 = add i64 %1849, 1
  store i64 %1850, i64* %PC
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1853 = load i64, i64* %1852, align 8, !tbaa !2428
  %1854 = inttoptr i64 %1853 to i64*
  %1855 = load i64, i64* %1854
  store i64 %1855, i64* %1851, align 8, !tbaa !2428
  %1856 = add i64 %1853, 8
  store i64 %1856, i64* %1852, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400db0:                                     ; preds = %block_400880
  %1857 = sub i64 %1681, 60
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 3
  store i64 %1859, i64* %PC
  %1860 = inttoptr i64 %1857 to i32*
  %1861 = load i32, i32* %1860
  %1862 = zext i32 %1861 to i64
  store i64 %1862, i64* %RDI, align 8, !tbaa !2428
  %1863 = load i64, i64* %RBP
  %1864 = sub i64 %1863, 68
  %1865 = load i64, i64* %PC
  %1866 = add i64 %1865, 3
  store i64 %1866, i64* %PC
  %1867 = inttoptr i64 %1864 to i32*
  %1868 = load i32, i32* %1867
  %1869 = zext i32 %1868 to i64
  store i64 %1869, i64* %RSI, align 8, !tbaa !2428
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 64
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 3
  store i64 %1873, i64* %PC
  %1874 = inttoptr i64 %1871 to i32*
  %1875 = load i32, i32* %1874
  %1876 = zext i32 %1875 to i64
  store i64 %1876, i64* %RDX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 136
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 7
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i64*
  %1882 = load i64, i64* %1881
  store i64 %1882, i64* %RCX, align 8, !tbaa !2428
  %1883 = load i64, i64* %RBP
  %1884 = sub i64 %1883, 168
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 7
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to i64*
  %1888 = load i64, i64* %1887
  store i64 %1888, i64* %R8, align 8, !tbaa !2428
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 7305
  %1891 = load i64, i64* %PC
  %1892 = add i64 %1891, 5
  %1893 = load i64, i64* %PC
  %1894 = add i64 %1893, 5
  store i64 %1894, i64* %PC
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1896 = load i64, i64* %1895, align 8, !tbaa !2428
  %1897 = add i64 %1896, -8
  %1898 = inttoptr i64 %1897 to i64*
  store i64 %1892, i64* %1898
  store i64 %1897, i64* %1895, align 8, !tbaa !2428
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1890, i64* %1899, align 8, !tbaa !2428
  %1900 = load i64, i64* %PC
  %1901 = call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* %0, i64 %1900, %struct.Memory* %1642)
  %1902 = load i32, i32* %EAX
  %1903 = zext i32 %1902 to i64
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 3
  store i64 %1905, i64* %PC
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1906, align 1, !tbaa !2432
  %1907 = and i32 %1902, 255
  %1908 = call i32 @llvm.ctpop.i32(i32 %1907) #16
  %1909 = trunc i32 %1908 to i8
  %1910 = and i8 %1909, 1
  %1911 = xor i8 %1910, 1
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1911, i8* %1912, align 1, !tbaa !2446
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1913, align 1, !tbaa !2447
  %1914 = icmp eq i32 %1902, 0
  %1915 = zext i1 %1914 to i8
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1915, i8* %1916, align 1, !tbaa !2448
  %1917 = lshr i32 %1902, 31
  %1918 = trunc i32 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1918, i8* %1919, align 1, !tbaa !2449
  %1920 = lshr i32 %1902, 31
  %1921 = xor i32 %1917, %1920
  %1922 = add nuw nsw i32 %1921, %1920
  %1923 = icmp eq i32 %1922, 2
  %1924 = zext i1 %1923 to i8
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1924, i8* %1925, align 1, !tbaa !2450
  %1926 = load i64, i64* %PC
  %1927 = add i64 %1926, 18
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 6
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 6
  store i64 %1931, i64* %PC
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1933 = load i8, i8* %1932, align 1, !tbaa !2448
  %1934 = icmp eq i8 %1933, 0
  %1935 = zext i1 %1934 to i8
  store i8 %1935, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1937 = select i1 %1934, i64 %1927, i64 %1929
  store i64 %1937, i64* %1936, align 8, !tbaa !2428
  %1938 = load i8, i8* %BRANCH_TAKEN
  %1939 = icmp eq i8 %1938, 1
  %1940 = load i64, i64* %RBP
  br i1 %1939, label %block_400de1, label %block_400dd5

block_400e37:                                     ; preds = %block_400e12
  %1941 = sub i64 %1765, 44
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 7
  store i64 %1943, i64* %PC
  %1944 = inttoptr i64 %1941 to i32*
  store i32 1, i32* %1944
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 313
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 5
  store i64 %1948, i64* %PC
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1946, i64* %1949, align 8, !tbaa !2428
  br label %block_400f77

block_400e06:                                     ; preds = %block_400de1
  %1950 = sub i64 %2514, 44
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 7
  store i64 %1952, i64* %PC
  %1953 = inttoptr i64 %1950 to i32*
  store i32 1, i32* %1953
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 362
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 5
  store i64 %1957, i64* %PC
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1955, i64* %1958, align 8, !tbaa !2428
  br label %block_400f77

block_400da4:                                     ; preds = %block_400880
  %1959 = sub i64 %1681, 44
  %1960 = load i64, i64* %PC
  %1961 = add i64 %1960, 7
  store i64 %1961, i64* %PC
  %1962 = inttoptr i64 %1959 to i32*
  store i32 1, i32* %1962
  %1963 = load i64, i64* %PC
  %1964 = add i64 %1963, 460
  %1965 = load i64, i64* %PC
  %1966 = add i64 %1965, 5
  store i64 %1966, i64* %PC
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1964, i64* %1967, align 8, !tbaa !2428
  br label %block_400f77

block_400e43:                                     ; preds = %block_400e12
  %1968 = sub i64 %1765, 60
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 3
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i32*
  %1972 = load i32, i32* %1971
  %1973 = zext i32 %1972 to i64
  store i64 %1973, i64* %RDI, align 8, !tbaa !2428
  %1974 = load i64, i64* %RBP
  %1975 = sub i64 %1974, 68
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 3
  store i64 %1977, i64* %PC
  %1978 = inttoptr i64 %1975 to i32*
  %1979 = load i32, i32* %1978
  %1980 = zext i32 %1979 to i64
  store i64 %1980, i64* %RSI, align 8, !tbaa !2428
  %1981 = load i64, i64* %RBP
  %1982 = sub i64 %1981, 64
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 3
  store i64 %1984, i64* %PC
  %1985 = inttoptr i64 %1982 to i32*
  %1986 = load i32, i32* %1985
  %1987 = zext i32 %1986 to i64
  store i64 %1987, i64* %RDX, align 8, !tbaa !2428
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 160
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 7
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1989 to i64*
  %1993 = load i64, i64* %1992
  store i64 %1993, i64* %RCX, align 8, !tbaa !2428
  %1994 = load i64, i64* %RBP
  %1995 = sub i64 %1994, 168
  %1996 = load i64, i64* %PC
  %1997 = add i64 %1996, 7
  store i64 %1997, i64* %PC
  %1998 = inttoptr i64 %1995 to i64*
  %1999 = load i64, i64* %1998
  store i64 %1999, i64* %R8, align 8, !tbaa !2428
  %2000 = load i64, i64* %RBP
  %2001 = sub i64 %2000, 176
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 7
  store i64 %2003, i64* %PC
  %2004 = inttoptr i64 %2001 to i64*
  %2005 = load i64, i64* %2004
  store i64 %2005, i64* %R9, align 8, !tbaa !2428
  %2006 = load i64, i64* %RBP
  %2007 = sub i64 %2006, 184
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 7
  store i64 %2009, i64* %PC
  %2010 = inttoptr i64 %2007 to i64*
  %2011 = load i64, i64* %2010
  store i64 %2011, i64* %RAX, align 8, !tbaa !2428
  %2012 = load i64, i64* %RSP
  %2013 = load i64, i64* %RAX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 4
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2012 to i64*
  store i64 %2013, i64* %2016
  %2017 = load i64, i64* %PC
  %2018 = add i64 %2017, 7556
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 5
  %2021 = load i64, i64* %PC
  %2022 = add i64 %2021, 5
  store i64 %2022, i64* %PC
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2024 = load i64, i64* %2023, align 8, !tbaa !2428
  %2025 = add i64 %2024, -8
  %2026 = inttoptr i64 %2025 to i64*
  store i64 %2020, i64* %2026
  store i64 %2025, i64* %2023, align 8, !tbaa !2428
  %2027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2018, i64* %2027, align 8, !tbaa !2428
  %2028 = load i64, i64* %PC
  %2029 = call %struct.Memory* @sub_402bf0_print_array_renamed_(%struct.State* %0, i64 %2028, %struct.Memory* %1726)
  %2030 = load i64, i64* %RBP
  %2031 = sub i64 %2030, 96
  %2032 = load i64, i64* %PC
  %2033 = add i64 %2032, 4
  store i64 %2033, i64* %PC
  %2034 = inttoptr i64 %2031 to i64*
  %2035 = load i64, i64* %2034
  store i64 %2035, i64* %RAX, align 8, !tbaa !2428
  %2036 = load i64, i64* %RAX
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 3
  store i64 %2038, i64* %PC
  store i64 %2036, i64* %RDI, align 8, !tbaa !2428
  %2039 = load i64, i64* %PC
  %2040 = sub i64 %2039, 2344
  %2041 = load i64, i64* %PC
  %2042 = add i64 %2041, 5
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 5
  store i64 %2044, i64* %PC
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2046 = load i64, i64* %2045, align 8, !tbaa !2428
  %2047 = add i64 %2046, -8
  %2048 = inttoptr i64 %2047 to i64*
  store i64 %2042, i64* %2048
  store i64 %2047, i64* %2045, align 8, !tbaa !2428
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2040, i64* %2049, align 8, !tbaa !2428
  %2050 = load i64, i64* %PC
  %2051 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2050, %struct.Memory* %2029)
  %2052 = load i64, i64* %RBP
  %2053 = sub i64 %2052, 104
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 4
  store i64 %2055, i64* %PC
  %2056 = inttoptr i64 %2053 to i64*
  %2057 = load i64, i64* %2056
  store i64 %2057, i64* %RAX, align 8, !tbaa !2428
  %2058 = load i64, i64* %RAX
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 3
  store i64 %2060, i64* %PC
  store i64 %2058, i64* %RDI, align 8, !tbaa !2428
  %2061 = load i64, i64* %PC
  %2062 = sub i64 %2061, 2356
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 5
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 5
  store i64 %2066, i64* %PC
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2068 = load i64, i64* %2067, align 8, !tbaa !2428
  %2069 = add i64 %2068, -8
  %2070 = inttoptr i64 %2069 to i64*
  store i64 %2064, i64* %2070
  store i64 %2069, i64* %2067, align 8, !tbaa !2428
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2062, i64* %2071, align 8, !tbaa !2428
  %2072 = load i64, i64* %PC
  %2073 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2072, %struct.Memory* %2051)
  %2074 = load i64, i64* %RBP
  %2075 = sub i64 %2074, 112
  %2076 = load i64, i64* %PC
  %2077 = add i64 %2076, 4
  store i64 %2077, i64* %PC
  %2078 = inttoptr i64 %2075 to i64*
  %2079 = load i64, i64* %2078
  store i64 %2079, i64* %RAX, align 8, !tbaa !2428
  %2080 = load i64, i64* %RAX
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 3
  store i64 %2082, i64* %PC
  store i64 %2080, i64* %RDI, align 8, !tbaa !2428
  %2083 = load i64, i64* %PC
  %2084 = sub i64 %2083, 2368
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 5
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 5
  store i64 %2088, i64* %PC
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2090 = load i64, i64* %2089, align 8, !tbaa !2428
  %2091 = add i64 %2090, -8
  %2092 = inttoptr i64 %2091 to i64*
  store i64 %2086, i64* %2092
  store i64 %2091, i64* %2089, align 8, !tbaa !2428
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2084, i64* %2093, align 8, !tbaa !2428
  %2094 = load i64, i64* %PC
  %2095 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2094, %struct.Memory* %2073)
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 120
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 4
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i64*
  %2101 = load i64, i64* %2100
  store i64 %2101, i64* %RAX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RAX
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 3
  store i64 %2104, i64* %PC
  store i64 %2102, i64* %RDI, align 8, !tbaa !2428
  %2105 = load i64, i64* %PC
  %2106 = sub i64 %2105, 2380
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 5
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 5
  store i64 %2110, i64* %PC
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2112 = load i64, i64* %2111, align 8, !tbaa !2428
  %2113 = add i64 %2112, -8
  %2114 = inttoptr i64 %2113 to i64*
  store i64 %2108, i64* %2114
  store i64 %2113, i64* %2111, align 8, !tbaa !2428
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2106, i64* %2115, align 8, !tbaa !2428
  %2116 = load i64, i64* %PC
  %2117 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2116, %struct.Memory* %2095)
  %2118 = load i64, i64* %RBP
  %2119 = sub i64 %2118, 128
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 4
  store i64 %2121, i64* %PC
  %2122 = inttoptr i64 %2119 to i64*
  %2123 = load i64, i64* %2122
  store i64 %2123, i64* %RAX, align 8, !tbaa !2428
  %2124 = load i64, i64* %RAX
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 3
  store i64 %2126, i64* %PC
  store i64 %2124, i64* %RDI, align 8, !tbaa !2428
  %2127 = load i64, i64* %PC
  %2128 = sub i64 %2127, 2392
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 5
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 5
  store i64 %2132, i64* %PC
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2134 = load i64, i64* %2133, align 8, !tbaa !2428
  %2135 = add i64 %2134, -8
  %2136 = inttoptr i64 %2135 to i64*
  store i64 %2130, i64* %2136
  store i64 %2135, i64* %2133, align 8, !tbaa !2428
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2128, i64* %2137, align 8, !tbaa !2428
  %2138 = load i64, i64* %PC
  %2139 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2138, %struct.Memory* %2117)
  %2140 = load i64, i64* %RBP
  %2141 = sub i64 %2140, 136
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 7
  store i64 %2143, i64* %PC
  %2144 = inttoptr i64 %2141 to i64*
  %2145 = load i64, i64* %2144
  store i64 %2145, i64* %RAX, align 8, !tbaa !2428
  %2146 = load i64, i64* %RAX
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 3
  store i64 %2148, i64* %PC
  store i64 %2146, i64* %RDI, align 8, !tbaa !2428
  %2149 = load i64, i64* %PC
  %2150 = sub i64 %2149, 2407
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 5
  %2153 = load i64, i64* %PC
  %2154 = add i64 %2153, 5
  store i64 %2154, i64* %PC
  %2155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2156 = load i64, i64* %2155, align 8, !tbaa !2428
  %2157 = add i64 %2156, -8
  %2158 = inttoptr i64 %2157 to i64*
  store i64 %2152, i64* %2158
  store i64 %2157, i64* %2155, align 8, !tbaa !2428
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2150, i64* %2159, align 8, !tbaa !2428
  %2160 = load i64, i64* %PC
  %2161 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2160, %struct.Memory* %2139)
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 144
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 7
  store i64 %2165, i64* %PC
  %2166 = inttoptr i64 %2163 to i64*
  %2167 = load i64, i64* %2166
  store i64 %2167, i64* %RAX, align 8, !tbaa !2428
  %2168 = load i64, i64* %RAX
  %2169 = load i64, i64* %PC
  %2170 = add i64 %2169, 3
  store i64 %2170, i64* %PC
  store i64 %2168, i64* %RDI, align 8, !tbaa !2428
  %2171 = load i64, i64* %PC
  %2172 = sub i64 %2171, 2422
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 5
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2178 = load i64, i64* %2177, align 8, !tbaa !2428
  %2179 = add i64 %2178, -8
  %2180 = inttoptr i64 %2179 to i64*
  store i64 %2174, i64* %2180
  store i64 %2179, i64* %2177, align 8, !tbaa !2428
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2172, i64* %2181, align 8, !tbaa !2428
  %2182 = load i64, i64* %PC
  %2183 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2182, %struct.Memory* %2161)
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 152
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 7
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i64*
  %2189 = load i64, i64* %2188
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = load i64, i64* %RAX
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  store i64 %2190, i64* %RDI, align 8, !tbaa !2428
  %2193 = load i64, i64* %PC
  %2194 = sub i64 %2193, 2437
  %2195 = load i64, i64* %PC
  %2196 = add i64 %2195, 5
  %2197 = load i64, i64* %PC
  %2198 = add i64 %2197, 5
  store i64 %2198, i64* %PC
  %2199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2200 = load i64, i64* %2199, align 8, !tbaa !2428
  %2201 = add i64 %2200, -8
  %2202 = inttoptr i64 %2201 to i64*
  store i64 %2196, i64* %2202
  store i64 %2201, i64* %2199, align 8, !tbaa !2428
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2194, i64* %2203, align 8, !tbaa !2428
  %2204 = load i64, i64* %PC
  %2205 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2204, %struct.Memory* %2183)
  %2206 = load i64, i64* %RBP
  %2207 = sub i64 %2206, 160
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 7
  store i64 %2209, i64* %PC
  %2210 = inttoptr i64 %2207 to i64*
  %2211 = load i64, i64* %2210
  store i64 %2211, i64* %RAX, align 8, !tbaa !2428
  %2212 = load i64, i64* %RAX
  %2213 = load i64, i64* %PC
  %2214 = add i64 %2213, 3
  store i64 %2214, i64* %PC
  store i64 %2212, i64* %RDI, align 8, !tbaa !2428
  %2215 = load i64, i64* %PC
  %2216 = sub i64 %2215, 2452
  %2217 = load i64, i64* %PC
  %2218 = add i64 %2217, 5
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 5
  store i64 %2220, i64* %PC
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2222 = load i64, i64* %2221, align 8, !tbaa !2428
  %2223 = add i64 %2222, -8
  %2224 = inttoptr i64 %2223 to i64*
  store i64 %2218, i64* %2224
  store i64 %2223, i64* %2221, align 8, !tbaa !2428
  %2225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2216, i64* %2225, align 8, !tbaa !2428
  %2226 = load i64, i64* %PC
  %2227 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2226, %struct.Memory* %2205)
  %2228 = load i64, i64* %RBP
  %2229 = sub i64 %2228, 168
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 7
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2229 to i64*
  %2233 = load i64, i64* %2232
  store i64 %2233, i64* %RAX, align 8, !tbaa !2428
  %2234 = load i64, i64* %RAX
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 3
  store i64 %2236, i64* %PC
  store i64 %2234, i64* %RDI, align 8, !tbaa !2428
  %2237 = load i64, i64* %PC
  %2238 = sub i64 %2237, 2467
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 5
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 5
  store i64 %2242, i64* %PC
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2244 = load i64, i64* %2243, align 8, !tbaa !2428
  %2245 = add i64 %2244, -8
  %2246 = inttoptr i64 %2245 to i64*
  store i64 %2240, i64* %2246
  store i64 %2245, i64* %2243, align 8, !tbaa !2428
  %2247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2238, i64* %2247, align 8, !tbaa !2428
  %2248 = load i64, i64* %PC
  %2249 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2248, %struct.Memory* %2227)
  %2250 = load i64, i64* %RBP
  %2251 = sub i64 %2250, 176
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 7
  store i64 %2253, i64* %PC
  %2254 = inttoptr i64 %2251 to i64*
  %2255 = load i64, i64* %2254
  store i64 %2255, i64* %RAX, align 8, !tbaa !2428
  %2256 = load i64, i64* %RAX
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 3
  store i64 %2258, i64* %PC
  store i64 %2256, i64* %RDI, align 8, !tbaa !2428
  %2259 = load i64, i64* %PC
  %2260 = sub i64 %2259, 2482
  %2261 = load i64, i64* %PC
  %2262 = add i64 %2261, 5
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 5
  store i64 %2264, i64* %PC
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2266 = load i64, i64* %2265, align 8, !tbaa !2428
  %2267 = add i64 %2266, -8
  %2268 = inttoptr i64 %2267 to i64*
  store i64 %2262, i64* %2268
  store i64 %2267, i64* %2265, align 8, !tbaa !2428
  %2269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2260, i64* %2269, align 8, !tbaa !2428
  %2270 = load i64, i64* %PC
  %2271 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2270, %struct.Memory* %2249)
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 184
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 7
  store i64 %2275, i64* %PC
  %2276 = inttoptr i64 %2273 to i64*
  %2277 = load i64, i64* %2276
  store i64 %2277, i64* %RAX, align 8, !tbaa !2428
  %2278 = load i64, i64* %RAX
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 3
  store i64 %2280, i64* %PC
  store i64 %2278, i64* %RDI, align 8, !tbaa !2428
  %2281 = load i64, i64* %PC
  %2282 = sub i64 %2281, 2497
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 5
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 5
  store i64 %2286, i64* %PC
  %2287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2288 = load i64, i64* %2287, align 8, !tbaa !2428
  %2289 = add i64 %2288, -8
  %2290 = inttoptr i64 %2289 to i64*
  store i64 %2284, i64* %2290
  store i64 %2289, i64* %2287, align 8, !tbaa !2428
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2282, i64* %2291, align 8, !tbaa !2428
  %2292 = load i64, i64* %PC
  %2293 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2292, %struct.Memory* %2271)
  %2294 = load i64, i64* %RBP
  %2295 = sub i64 %2294, 192
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 7
  store i64 %2297, i64* %PC
  %2298 = inttoptr i64 %2295 to i64*
  %2299 = load i64, i64* %2298
  store i64 %2299, i64* %RAX, align 8, !tbaa !2428
  %2300 = load i64, i64* %RAX
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 3
  store i64 %2302, i64* %PC
  store i64 %2300, i64* %RDI, align 8, !tbaa !2428
  %2303 = load i64, i64* %PC
  %2304 = sub i64 %2303, 2512
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 5
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 5
  store i64 %2308, i64* %PC
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2310 = load i64, i64* %2309, align 8, !tbaa !2428
  %2311 = add i64 %2310, -8
  %2312 = inttoptr i64 %2311 to i64*
  store i64 %2306, i64* %2312
  store i64 %2311, i64* %2309, align 8, !tbaa !2428
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2304, i64* %2313, align 8, !tbaa !2428
  %2314 = load i64, i64* %PC
  %2315 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2314, %struct.Memory* %2293)
  %2316 = load i64, i64* %RBP
  %2317 = sub i64 %2316, 200
  %2318 = load i64, i64* %PC
  %2319 = add i64 %2318, 7
  store i64 %2319, i64* %PC
  %2320 = inttoptr i64 %2317 to i64*
  %2321 = load i64, i64* %2320
  store i64 %2321, i64* %RAX, align 8, !tbaa !2428
  %2322 = load i64, i64* %RAX
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 3
  store i64 %2324, i64* %PC
  store i64 %2322, i64* %RDI, align 8, !tbaa !2428
  %2325 = load i64, i64* %PC
  %2326 = sub i64 %2325, 2527
  %2327 = load i64, i64* %PC
  %2328 = add i64 %2327, 5
  %2329 = load i64, i64* %PC
  %2330 = add i64 %2329, 5
  store i64 %2330, i64* %PC
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2332 = load i64, i64* %2331, align 8, !tbaa !2428
  %2333 = add i64 %2332, -8
  %2334 = inttoptr i64 %2333 to i64*
  store i64 %2328, i64* %2334
  store i64 %2333, i64* %2331, align 8, !tbaa !2428
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2326, i64* %2335, align 8, !tbaa !2428
  %2336 = load i64, i64* %PC
  %2337 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2336, %struct.Memory* %2315)
  %2338 = load i64, i64* %RBP
  %2339 = sub i64 %2338, 208
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 7
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RAX
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 3
  store i64 %2346, i64* %PC
  store i64 %2344, i64* %RDI, align 8, !tbaa !2428
  %2347 = load i64, i64* %PC
  %2348 = sub i64 %2347, 2542
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 5
  %2351 = load i64, i64* %PC
  %2352 = add i64 %2351, 5
  store i64 %2352, i64* %PC
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2354 = load i64, i64* %2353, align 8, !tbaa !2428
  %2355 = add i64 %2354, -8
  %2356 = inttoptr i64 %2355 to i64*
  store i64 %2350, i64* %2356
  store i64 %2355, i64* %2353, align 8, !tbaa !2428
  %2357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2348, i64* %2357, align 8, !tbaa !2428
  %2358 = load i64, i64* %PC
  %2359 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2358, %struct.Memory* %2337)
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 216
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 7
  store i64 %2363, i64* %PC
  %2364 = inttoptr i64 %2361 to i64*
  %2365 = load i64, i64* %2364
  store i64 %2365, i64* %RAX, align 8, !tbaa !2428
  %2366 = load i64, i64* %RAX
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 3
  store i64 %2368, i64* %PC
  store i64 %2366, i64* %RDI, align 8, !tbaa !2428
  %2369 = load i64, i64* %PC
  %2370 = sub i64 %2369, 2557
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 5
  store i64 %2374, i64* %PC
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2376 = load i64, i64* %2375, align 8, !tbaa !2428
  %2377 = add i64 %2376, -8
  %2378 = inttoptr i64 %2377 to i64*
  store i64 %2372, i64* %2378
  store i64 %2377, i64* %2375, align 8, !tbaa !2428
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2370, i64* %2379, align 8, !tbaa !2428
  %2380 = load i64, i64* %PC
  %2381 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2380, %struct.Memory* %2359)
  %2382 = load i64, i64* %RBP
  %2383 = sub i64 %2382, 224
  %2384 = load i64, i64* %PC
  %2385 = add i64 %2384, 7
  store i64 %2385, i64* %PC
  %2386 = inttoptr i64 %2383 to i64*
  %2387 = load i64, i64* %2386
  store i64 %2387, i64* %RAX, align 8, !tbaa !2428
  %2388 = load i64, i64* %RAX
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 3
  store i64 %2390, i64* %PC
  store i64 %2388, i64* %RDI, align 8, !tbaa !2428
  %2391 = load i64, i64* %PC
  %2392 = sub i64 %2391, 2572
  %2393 = load i64, i64* %PC
  %2394 = add i64 %2393, 5
  %2395 = load i64, i64* %PC
  %2396 = add i64 %2395, 5
  store i64 %2396, i64* %PC
  %2397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2398 = load i64, i64* %2397, align 8, !tbaa !2428
  %2399 = add i64 %2398, -8
  %2400 = inttoptr i64 %2399 to i64*
  store i64 %2394, i64* %2400
  store i64 %2399, i64* %2397, align 8, !tbaa !2428
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2392, i64* %2401, align 8, !tbaa !2428
  %2402 = load i64, i64* %PC
  %2403 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2402, %struct.Memory* %2381)
  %2404 = load i64, i64* %RBP
  %2405 = sub i64 %2404, 232
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 7
  store i64 %2407, i64* %PC
  %2408 = inttoptr i64 %2405 to i64*
  %2409 = load i64, i64* %2408
  store i64 %2409, i64* %RAX, align 8, !tbaa !2428
  %2410 = load i64, i64* %RAX
  %2411 = load i64, i64* %PC
  %2412 = add i64 %2411, 3
  store i64 %2412, i64* %PC
  store i64 %2410, i64* %RDI, align 8, !tbaa !2428
  %2413 = load i64, i64* %PC
  %2414 = sub i64 %2413, 2587
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 5
  %2417 = load i64, i64* %PC
  %2418 = add i64 %2417, 5
  store i64 %2418, i64* %PC
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2420 = load i64, i64* %2419, align 8, !tbaa !2428
  %2421 = add i64 %2420, -8
  %2422 = inttoptr i64 %2421 to i64*
  store i64 %2416, i64* %2422
  store i64 %2421, i64* %2419, align 8, !tbaa !2428
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2414, i64* %2423, align 8, !tbaa !2428
  %2424 = load i64, i64* %PC
  %2425 = call %struct.Memory* @ext_6040d8_free(%struct.State* %0, i64 %2424, %struct.Memory* %2403)
  %2426 = load i64, i64* %RBP
  %2427 = sub i64 %2426, 44
  %2428 = load i64, i64* %PC
  %2429 = add i64 %2428, 7
  store i64 %2429, i64* %PC
  %2430 = inttoptr i64 %2427 to i32*
  store i32 0, i32* %2430
  br label %block_400f77

block_400de1:                                     ; preds = %block_400db0
  %2431 = sub i64 %1940, 60
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 3
  store i64 %2433, i64* %PC
  %2434 = inttoptr i64 %2431 to i32*
  %2435 = load i32, i32* %2434
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RDI, align 8, !tbaa !2428
  %2437 = load i64, i64* %RBP
  %2438 = sub i64 %2437, 68
  %2439 = load i64, i64* %PC
  %2440 = add i64 %2439, 3
  store i64 %2440, i64* %PC
  %2441 = inttoptr i64 %2438 to i32*
  %2442 = load i32, i32* %2441
  %2443 = zext i32 %2442 to i64
  store i64 %2443, i64* %RSI, align 8, !tbaa !2428
  %2444 = load i64, i64* %RBP
  %2445 = sub i64 %2444, 64
  %2446 = load i64, i64* %PC
  %2447 = add i64 %2446, 3
  store i64 %2447, i64* %PC
  %2448 = inttoptr i64 %2445 to i32*
  %2449 = load i32, i32* %2448
  %2450 = zext i32 %2449 to i64
  store i64 %2450, i64* %RDX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 144
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 7
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i64*
  %2456 = load i64, i64* %2455
  store i64 %2456, i64* %RCX, align 8, !tbaa !2428
  %2457 = load i64, i64* %RBP
  %2458 = sub i64 %2457, 176
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 7
  store i64 %2460, i64* %PC
  %2461 = inttoptr i64 %2458 to i64*
  %2462 = load i64, i64* %2461
  store i64 %2462, i64* %R8, align 8, !tbaa !2428
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 7256
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 5
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 5
  store i64 %2468, i64* %PC
  %2469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2470 = load i64, i64* %2469, align 8, !tbaa !2428
  %2471 = add i64 %2470, -8
  %2472 = inttoptr i64 %2471 to i64*
  store i64 %2466, i64* %2472
  store i64 %2471, i64* %2469, align 8, !tbaa !2428
  %2473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2464, i64* %2473, align 8, !tbaa !2428
  %2474 = load i64, i64* %PC
  %2475 = call %struct.Memory* @sub_402a50_check_FP_renamed_(%struct.State* %0, i64 %2474, %struct.Memory* %1901)
  %2476 = load i32, i32* %EAX
  %2477 = zext i32 %2476 to i64
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 3
  store i64 %2479, i64* %PC
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2480, align 1, !tbaa !2432
  %2481 = and i32 %2476, 255
  %2482 = call i32 @llvm.ctpop.i32(i32 %2481) #16
  %2483 = trunc i32 %2482 to i8
  %2484 = and i8 %2483, 1
  %2485 = xor i8 %2484, 1
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2485, i8* %2486, align 1, !tbaa !2446
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2487, align 1, !tbaa !2447
  %2488 = icmp eq i32 %2476, 0
  %2489 = zext i1 %2488 to i8
  %2490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2489, i8* %2490, align 1, !tbaa !2448
  %2491 = lshr i32 %2476, 31
  %2492 = trunc i32 %2491 to i8
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2492, i8* %2493, align 1, !tbaa !2449
  %2494 = lshr i32 %2476, 31
  %2495 = xor i32 %2491, %2494
  %2496 = add nuw nsw i32 %2495, %2494
  %2497 = icmp eq i32 %2496, 2
  %2498 = zext i1 %2497 to i8
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2498, i8* %2499, align 1, !tbaa !2450
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 18
  %2502 = load i64, i64* %PC
  %2503 = add i64 %2502, 6
  %2504 = load i64, i64* %PC
  %2505 = add i64 %2504, 6
  store i64 %2505, i64* %PC
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2507 = load i8, i8* %2506, align 1, !tbaa !2448
  %2508 = icmp eq i8 %2507, 0
  %2509 = zext i1 %2508 to i8
  store i8 %2509, i8* %BRANCH_TAKEN, align 1, !tbaa !2454
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2511 = select i1 %2508, i64 %2501, i64 %2503
  store i64 %2511, i64* %2510, align 8, !tbaa !2428
  %2512 = load i8, i8* %BRANCH_TAKEN
  %2513 = icmp eq i8 %2512, 1
  %2514 = load i64, i64* %RBP
  br i1 %2513, label %block_400e12, label %block_400e06

block_400dd5:                                     ; preds = %block_400db0
  %2515 = sub i64 %1940, 44
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 7
  store i64 %2517, i64* %PC
  %2518 = inttoptr i64 %2515 to i32*
  store i32 1, i32* %2518
  %2519 = load i64, i64* %PC
  %2520 = add i64 %2519, 411
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 5
  store i64 %2522, i64* %PC
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2520, i64* %2523, align 8, !tbaa !2428
  br label %block_400f77
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400690_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400690_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400690_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400660___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400660___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400660___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040d8_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040b8_calloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040f8_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040e0_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e70___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402e70___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e70___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e00___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402e00___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e00___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400880_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040b0___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6040c8_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4005a0_posix_memalign(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @posix_memalign to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_flush_cache() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4006a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_flush_cache_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4006a0_polybench_flush_cache(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e74;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e74__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_stop() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_timer_stop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400760_polybench_timer_stop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_alloc_data() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4007c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_alloc_data_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4007c0_polybench_alloc_data(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_print() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400780;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_timer_print_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400780_polybench_timer_print(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400520;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400520__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_timer_start() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_timer_start_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400730_polybench_timer_start(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @polybench_prepare_instruments() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400720;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @polybench_prepare_instruments_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400720_polybench_prepare_instruments(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402e00___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_402e70___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2445, !2445, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2430, !2430, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
